// -------- polyfills.js --------
// Polyfills: Mostly for IE
Polyfills = [];
//
// Overloading is very dodgy in case code needs to distinguish arrays and typed arrays
//
Array.isUntypedArray = Array.isArray;
Array.isGeneralArray = function (array) {
if (Array.isUntypedArray(array)) {
return true;
} else {
return (array != null) && (Object.prototype.toString.call(array.buffer) === "[object ArrayBuffer]");
}
}
// Generated if transpiled by Babel
if (typeof this["_arrayWithHoles"] !== "undefined") {
Polyfills.push('Array.isArray generalised');
Array.isArray = Array.isGeneralArray;
}
//
// Math.fround
//
if (!Math.fround) {
Polyfills.push('Math.fround');
Math.fround = (function (array) {
return function(x) {
array[0] = x;
// console.log ("Math.fround(" + x + ") = " + array[0]);
return array[0];
};
})(new Float32Array(1));
}
if (!Math.imul) {
Polyfills.push('Math.imul');
Math.imul = function(a, b) {
var aHi = (a >>> 16) & 0xffff;
var aLo = a & 0xffff;
var bHi = (b >>> 16) & 0xffff;
var bLo = b & 0xffff;
// the shift by 0 fixes the sign on the high part
// the final |0 converts the unsigned value into a signed value
return ((aLo * bLo) + (((aHi * bLo + aLo * bHi) << 16) >>> 0) | 0);
};
}
if (!Math.clz32) {
Polyfills.push('Math.clz32');
Math.clz32 = function(x) {
// Let n be ToUint32(x).
// Let p be the number of leading zero bits in
// the 32-bit binary representation of n.
// Return p.
if (x == null || x === 0) {
return 32;
}
return 31 - Math.floor(Math.log(x >>> 0) * Math.LOG2E);
};
}
//
// Date.now
//
if (!Date.now) {
Polyfills.push('Date.now');
Date.now = function now() {
return new Date().getTime();
};
}
//
// requestAnimationFrame functions
//
// requestAnimationFrame with no fallback
(function() {
var vendors = ['ms', 'moz', 'webkit', 'o'];
for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
|| window[vendors[x]+'CancelRequestAnimationFrame'];
}
var lastTime = 0;
if (!window.requestAnimationFrame) {
// requestAnimationFrame using fallback to setTimeout
Polyfills.push('requestAnimationFrame using setTimeout');
// Omits the mysterious element parameter
window.requestAnimationFrame = function(callback) {
var currTime = Date.now();
var timeToCall = Math.max(0, 16 - (currTime - lastTime));
var id = window.setTimeout(function() { callback(currTime + timeToCall); },
timeToCall);
lastTime = currTime + timeToCall;
return id;
}
}
if (!window.cancelAnimationFrame) {
window.cancelAnimationFrame = function(id) {
clearTimeout(id);
}
}
// delayAnimationFrame using requestAnimationFrame
Polyfills.push('delayAnimationFrame using requestAnimationFrame');
window.delayAnimationFrame = function(callback, delay) {
if (delay == null) delay = 0;
var id = window.setTimeout(function() { window.requestAnimationFrame(callback); }, delay);
return id;
}
}());
//
// String.endsWith
//
if (!String.prototype.endsWith) {
Polyfills.push('String.endsWith');
String.prototype.endsWith = function(searchString, position) {
var subjectString = this.toString();
if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
position = subjectString.length;
}
position -= searchString.length;
var lastIndex = subjectString.lastIndexOf(searchString, position);
return lastIndex !== -1 && lastIndex === position;
};
}
//
// String.startsWith
//
if (!String.prototype.startsWith) {
Polyfills.push('String.startsWith');
String.prototype.startsWith = function(searchString, position){
position = position || 0;
return this.substr(position, searchString.length) === searchString;
};
}
//
// Promise
//
(function (root) {
// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;
function noop() {}
// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
return function () {
fn.apply(thisArg, arguments);
};
}
function Promise(fn) {
if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
if (typeof fn !== 'function') throw new TypeError('not a function');
this._state = 0;
this._handled = false;
this._value = undefined;
this._deferreds = [];
doResolve(fn, this);
}
function handle(self, deferred) {
while (self._state === 3) {
self = self._value;
}
if (self._state === 0) {
self._deferreds.push(deferred);
return;
}
self._handled = true;
Promise._immediateFn(function () {
var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
if (cb === null) {
(self._state === 1 ? resolve : reject)(deferred.promise, self._value);
return;
}
var ret;
try {
ret = cb(self._value);
} catch (e) {
reject(deferred.promise, e);
return;
}
resolve(deferred.promise, ret);
});
}
function resolve(self, newValue) {
try {
// Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
var then = newValue.then;
if (newValue instanceof Promise) {
self._state = 3;
self._value = newValue;
finale(self);
return;
} else if (typeof then === 'function') {
doResolve(bind(then, newValue), self);
return;
}
}
self._state = 1;
self._value = newValue;
finale(self);
} catch (e) {
reject(self, e);
}
}
function reject(self, newValue) {
self._state = 2;
self._value = newValue;
finale(self);
}
function finale(self) {
if (self._state === 2 && self._deferreds.length === 0) {
Promise._immediateFn(function() {
if (!self._handled) {
Promise._unhandledRejectionFn(self._value);
}
});
}
for (var i = 0, len = self._deferreds.length; i < len; i++) {
handle(self, self._deferreds[i]);
}
self._deferreds = null;
}
function Handler(onFulfilled, onRejected, promise) {
this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
this.onRejected = typeof onRejected === 'function' ? onRejected : null;
this.promise = promise;
}
/**
* Take a potentially misbehaving resolver function and make sure
* onFulfilled and onRejected are only called once.
*
* Makes no guarantees about asynchrony.
*/
function doResolve(fn, self) {
var done = false;
try {
fn(function (value) {
if (done) return;
done = true;
resolve(self, value);
}, function (reason) {
if (done) return;
done = true;
reject(self, reason);
});
} catch (ex) {
if (done) return;
done = true;
reject(self, ex);
}
}
Promise.prototype['catch'] = function (onRejected) {
return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
var prom = new (this.constructor)(noop);
handle(this, new Handler(onFulfilled, onRejected, prom));
return prom;
};
Promise.all = function (arr) {
var args = Array.prototype.slice.call(arr);
return new Promise(function (resolve, reject) {
if (args.length === 0) return resolve([]);
var remaining = args.length;
function res(i, val) {
try {
if (val && (typeof val === 'object' || typeof val === 'function')) {
var then = val.then;
if (typeof then === 'function') {
then.call(val, function (val) {
res(i, val);
}, reject);
return;
}
}
args[i] = val;
if (--remaining === 0) {
resolve(args);
}
} catch (ex) {
reject(ex);
}
}
for (var i = 0; i < args.length; i++) {
res(i, args[i]);
}
});
};
Promise.resolve = function (value) {
if (value && typeof value === 'object' && value.constructor === Promise) {
return value;
}
return new Promise(function (resolve) {
resolve(value);
});
};
Promise.reject = function (value) {
return new Promise(function (resolve, reject) {
reject(value);
});
};
Promise.race = function (values) {
return new Promise(function (resolve, reject) {
for (var i = 0, len = values.length; i < len; i++) {
values[i].then(resolve, reject);
}
});
};
// Use polyfill for setImmediate for performance gains
Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||
function (fn) {
setTimeoutFunc(fn, 0);
};
Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
if (typeof console !== 'undefined' && console) {
console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
}
};
/**
* Set the immediate function to execute callbacks
* @param fn {function} Function to execute
* @deprecated
*/
Promise._setImmediateFn = function _setImmediateFn(fn) {
Promise._immediateFn = fn;
};
/**
* Change the function to execute on unhandled rejection
* @param {function} fn Function to execute on unhandled rejection
* @deprecated
*/
Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
Promise._unhandledRejectionFn = fn;
};
// Better to have avoided computation if Promise already exists!
if (typeof module !== 'undefined' && module.exports) {
module.exports = Promise;
} else if (!root.Promise) {
Polyfills.push('Promise');
root.Promise = Promise;
}
})(this);
//
// Symbol from ES6
//
/**
* Symbol-ES6 v0.1.2
* ES6 Symbol polyfill in pure ES5.
*
* @license Copyright (c) 2017-2018 Rousan Ali, MIT License
*
* Codebase: https://github.com/rousan/symbol-es6
* Date: 28th Jan, 2018
*/
// Internet Explorer succeeds without Symbol if isArray is modified to recognise type arrays. JRWG
// (function (global, factory) {
// 	"use strict";
// 	if (typeof module === "object" && typeof module.exports === "object") {
// 		// For the environment like NodeJS, CommonJS etc where module or
// 		// module.exports objects are available
// 		module.exports = factory(global);
// 	} else if (!global.Symbol){
// 		// console.log("Symbol polyfill: No Symbol found so create");
// 		// For browser context, where global object is window
// 		// Suppress for test
// 		Polyfills.push('Symbol');
// 		factory(global);
// 	}
// 	/* window is for browser environment and global is for NodeJS environment */
// // })(typeof window !== "undefined" ? window : global,
// })(this,
//   function (global) {
// 	"use strict";
// 	var defineProperty = Object.defineProperty;
// 	var defineProperties = Object.defineProperties;
// 	var symbolHiddenCounter = 0;
// 	var globalSymbolRegistry = [];
// 	var slice = Array.prototype.slice;
// 	var ES6 = typeof global.ES6 === "object" ? global.ES6 : (global.ES6 = {});
// 	var isArray = Array.isArray;
// 	var objectToString = Object.prototype.toString;
// 	var push = Array.prototype.push;
// 	var emptyFunction = function () {};
// 	var simpleFunction = function (arg) {
// 		return arg;
// 	};
// 	var isCallable = function (fn) {
// 		return typeof fn === 'function';
// 	};
// 	var isConstructor = function (fn) {
// 		return isCallable(fn);
// 	};
// 	var Iterator = function () {};
// 	var ArrayIterator = function ArrayIterator(array, flag) {
// 		this._array = array;
// 		this._flag = flag;
// 		this._nextIndex = 0;
// 	};
// 	var StringIterator = function StringIterator(string, flag) {
// 		this._string = string;
// 		this._flag = flag;
// 		this._nextIndex = 0;
// 	};
// 	var isES6Running = function() {
// 		return false; /* Now 'false' for testing purpose */
// 	};
// 	var isObject = function (value) {
// 		return value !== null && (typeof value === "object" || typeof value === "function");
// 	};
// 	var es6FunctionPrototypeHasInstanceSymbol = function (instance) {
// 		if (typeof this !== "function")
// 			return false;
// 		return instance instanceof this;
// 	};
// 	var es6InstanceOfOperator = function (object, constructor) {
// 		if (!isObject(constructor))
// 			throw new TypeError("Right-hand side of 'instanceof' is not an object");
// 		var hasInstanceSymbolProp = constructor[Symbol.hasInstance];
// 		if (typeof hasInstanceSymbolProp === "undefined") {
// 			return object instanceof constructor;
// 		} else if(typeof hasInstanceSymbolProp !== "function") {
// 			throw new TypeError(typeof hasInstanceSymbolProp + " is not a function");
// 		} else {
// 			return hasInstanceSymbolProp.call(constructor, object);
// 		}
// 	};
// 	// Generates name for a symbol instance and this name will be used as
// 	// property key for property symbols internally.
// 	var generateSymbolName = function (id) {
// 		return "@@_____" + id + "_____";
// 	};
// 	// Generates id for next Symbol instance
// 	var getNextSymbolId = function () {
// 		return symbolHiddenCounter++;
// 	};
// 	var setupSymbolInternals = function (symbol, desc) {
// 		defineProperties(symbol, {
// 			_description: {
// 				value: desc
// 			},
// 			_isSymbol: {
// 				value: true
// 			},
// 			_id: {
// 				value: getNextSymbolId()
// 			}
// 		});
// 		return symbol;
// 	};
// 	var checkSymbolInternals = function (symbol) {
// 		return symbol._isSymbol === true && typeof symbol._id === "number" && typeof symbol._description === "string";
// 	};
// 	var isSymbol = function (symbol) {
// 		return symbol instanceof Symbol && checkSymbolInternals(symbol);
// 	};
// 	var symbolFor = function (key) {
// 		key = String(key);
// 		var registryLength = globalSymbolRegistry.length,
// 			record,
// 			i = 0;
// 		for(; i<registryLength; ++i) {
// 			record = globalSymbolRegistry[i];
// 			if (record.key === key)
// 				return record.symbol;
// 		}
// 		record = {
// 			key: key,
// 			symbol: Symbol(key)
// 		};
// 		globalSymbolRegistry.push(record);
// 		return record.symbol;
// 	};
// 	var symbolKeyFor = function (symbol) {
// 		if (!ES6.isSymbol(symbol))
// 			throw new TypeError(String(symbol) + " is not a symbol");
// 		var registryLength = globalSymbolRegistry.length,
// 			record,
// 			i = 0;
// 		for(; i<registryLength; ++i) {
// 			record = globalSymbolRegistry[i];
// 			if (record.symbol === symbol)
// 				return record.key;
// 		}
// 	};
// 	/* It affects array1 and appends array2 at the end of array1 */
// 	var appendArray = function (array1, array2) {
// 		// Returns immediately if these are not array or not array-like objects
// 		if (!(typeof array1.length === "number" && array1.length >= 0 && typeof array2.length === "number" && array2.length >= 0))
// 			return;
// 		var length1 = Math.floor(array1.length),
// 			length2 = Math.floor(array2.length),
// 			i = 0;
// 		array1.length = length1 + length2;
// 		for (; i<length2; ++i)
// 			if (array2.hasOwnProperty(i))
// 				array1[length1 + i] = array2[i];
// 	};
// 	var es6ObjectPrototypeToString = function toString() {
// 		if (this === undefined || this === null)
// 			return objectToString.call(this);
// 		// Add support for @@toStringTag symbol
// 		if (typeof this[Symbol.toStringTag] === "string")
// 			return "[object " + this[Symbol.toStringTag] + "]";
// 		else
// 			return objectToString.call(this);
// 	};
// 	var es6ArrayPrototypeConcat = function concat() {
// 		if (this === undefined || this === null)
// 			throw new TypeError("Array.prototype.concat called on null or undefined");
// 		// Boxing 'this' value to wrapper object
// 		var self = Object(this),
// 			targets = slice.call(arguments),
// 			outputs = []; // Later it may affected by Symbol
// 		targets.unshift(self);
// 		targets.forEach(function (target) {
// 			// If target is primitive then just push
// 			if (!isObject(target))
// 				outputs.push(target);
// 			// Here Symbol.isConcatSpreadable support is added
// 			else if (typeof target[Symbol.isConcatSpreadable] !== "undefined") {
// 				if (target[Symbol.isConcatSpreadable]) {
// 					appendArray(outputs, target);
// 				} else {
// 					outputs.push(target);
// 				}
// 			} else if (isArray(target)) {
// 				appendArray(outputs, target);
// 			} else {
// 				outputs.push(target);
// 			}
// 		});
// 		return outputs;
// 	};
// 	var es6ForOfLoop = function (iterable, callback, thisArg) {
// 		callback = typeof callback !== "function" ? emptyFunction : callback;
// 		if (typeof iterable[Symbol.iterator] !== "function")
// 			throw new TypeError("Iterable[Symbol.iterator] is not a function");
// 		var iterator = iterable[Symbol.iterator](),
// 			iterationResult;
// 		if (typeof iterator.next !== "function")
// 			throw new TypeError(".iterator.next is not a function");
// 		while (true) {
// 			iterationResult = iterator.next();
// 			if (!isObject(iterationResult))
// 				throw new TypeError("Iterator result " + iterationResult + " is not an object");
// 			if (iterationResult.done)
// 				break;
// 			callback.call(thisArg, iterationResult.value);
// 		}
// 	};
// 	// Provides simple inheritance functionality
// 	var simpleInheritance = function (child, parent) {
// 		if (typeof child !== "function" || typeof parent !== "function")
// 			throw new TypeError("Child and Parent must be function type");
// 		child.prototype = Object.create(parent.prototype);
// 		child.prototype.constructor = child;
// 	};
// 	// Behaves as Symbol function in ES6, take description and returns an unique object,
// 	// but in ES6 this function returns 'symbol' primitive typed value.
// 	// Its type is 'object' not 'symbol'.
// 	// There is no wrapping in this case i.e. Object(sym) = sym.
// 	var Symbol = function Symbol(desc) {
// 		desc = typeof desc === "undefined" ? "" : String(desc);
// 		if(this instanceof Symbol)
// 			throw new TypeError("Symbol is not a constructor");
// 		return setupSymbolInternals(Object.create(Symbol.prototype), desc);
// 	};
// 	defineProperties(Symbol, {
// 		"for": {
// 			value: symbolFor,
// 			writable: true,
// 			configurable: true
// 		},
// 		"keyFor": {
// 			value: symbolKeyFor,
// 			writable: true,
// 			configurable: true
// 		},
// 		"hasInstance": {
// 			value: Symbol("Symbol.hasInstance")
// 		},
// 		"isConcatSpreadable": {
// 			value: Symbol("Symbol.isConcatSpreadable")
// 		},
// 		"iterator": {
// 			value: Symbol("Symbol.iterator")
// 		},
// 		"toStringTag": {
// 			value: Symbol("Symbol.toStringTag")
// 		}
// 	});
// 	// In ES6, this function returns like 'Symbol(<desc>)', but in this case
// 	// this function returns the symbol's internal name to work properly.
// 	Symbol.prototype.toString = function () {
// 		return generateSymbolName(this._id);
// 	};
// 	// Returns itself but in ES6 It returns 'symbol' typed value.
// 	Symbol.prototype.valueOf = function () {
// 		return this;
// 	};
// 	// Make Iterator like iterable
// 	defineProperty(Iterator.prototype, Symbol.iterator.toString(), {
// 		value: function () {return this;},
// 		writable: true,
// 		configurable: true
// 	});
// 	simpleInheritance(ArrayIterator, Iterator);
// 	simpleInheritance(StringIterator, Iterator);
// 	defineProperty(ArrayIterator.prototype, Symbol.toStringTag.toString(), {
// 		value: "Array Iterator",
// 		configurable: true
// 	});
// 	defineProperty(StringIterator.prototype, Symbol.toStringTag.toString(), {
// 		value: "String Iterator",
// 		configurable: true
// 	});
// 	// This iterator works on any Array or TypedArray or array-like objects
// 	ArrayIterator.prototype.next = function next() {
// 		if (!(this instanceof ArrayIterator))
// 			throw new TypeError("Method Array Iterator.prototype.next called on incompatible receiver " + String(this));
// 		var self = this,
// 			nextValue;
// 		if (self._nextIndex === -1) {
// 			return {
// 				done: true,
// 				value: undefined
// 			};
// 		}
// 		if (!(typeof self._array.length === "number" && self._array.length >= 0)) {
// 			self._nextIndex = -1;
// 			return {
// 				done: true,
// 				value: undefined
// 			};
// 		}
// 		// _flag = 1 for [index, value]
// 		// _flag = 2 for [value]
// 		// _flag = 3 for [index]
// 		if (self._nextIndex < Math.floor(self._array.length)) {
// 			if (self._flag === 1)
// 				nextValue = [self._nextIndex, self._array[self._nextIndex]];
// 			else if (self._flag === 2)
// 				nextValue = self._array[self._nextIndex];
// 			else if (self._flag === 3)
// 				nextValue = self._nextIndex;
// 			self._nextIndex++;
// 			return {
// 				done: false,
// 				value: nextValue
// 			};
// 		} else {
// 			self._nextIndex = -1;
// 			return {
// 				done: true,
// 				value: undefined
// 			};
// 		}
// 	};
// 	StringIterator.prototype.next = function next() {
// 		if (!(this instanceof StringIterator))
// 			throw new TypeError("Method String Iterator.prototype.next called on incompatible receiver " + String(this));
// 		var self = this,
// 			stringObject = new String(this._string),
// 			nextValue;
// 		if (self._nextIndex === -1) {
// 			return {
// 				done: true,
// 				value: undefined
// 			};
// 		}
// 		if (self._nextIndex < stringObject.length) {
// 			nextValue = stringObject[self._nextIndex];
// 			self._nextIndex++;
// 			return {
// 				done: false,
// 				value: nextValue
// 			};
// 		} else {
// 			self._nextIndex = -1;
// 			return {
// 				done: true,
// 				value: undefined
// 			};
// 		}
// 	};
// 	var es6ArrayPrototypeIteratorSymbol = function values() {
// 		if (this === undefined || this === null)
// 			throw new TypeError("Cannot convert undefined or null to object");
// 		var self = Object(this);
// 		return new ArrayIterator(self, 2);
// 	};
// 	var es6StringPrototypeIteratorSymbol = function values() {
// 		if (this === undefined || this === null)
// 			throw new TypeError("String.prototype[Symbol.iterator] called on null or undefined");
// 		return new StringIterator(String(this), 0);
// 	};
// 	var es6ArrayPrototypeEntries = function entries() {
// 		if (this === undefined || this === null)
// 			throw new TypeError("Cannot convert undefined or null to object");
// 		var self = Object(this);
// 		return new ArrayIterator(self, 1);
// 	};
// 	var es6ArrayPrototypeKeys = function keys() {
// 		if (this === undefined || this === null)
// 			throw new TypeError("Cannot convert undefined or null to object");
// 		var self = Object(this);
// 		return new ArrayIterator(self, 3);
// 	};
// 	var SpreadOperatorImpl = function (target, thisArg) {
// 		this._target = target;
// 		this._values = [];
// 		this._thisArg = thisArg;
// 	};
// 	// All the arguments must be iterable
// 	SpreadOperatorImpl.prototype.spread = function () {
// 		var self = this;
// 		slice.call(arguments).forEach(function (iterable) {
// 			ES6.forOf(iterable, function (value) {
// 				self._values.push(value);
// 			});
// 		});
// 		return self;
// 	};
// 	SpreadOperatorImpl.prototype.add = function () {
// 		var self = this;
// 		slice.call(arguments).forEach(function (value) {
// 			self._values.push(value);
// 		});
// 		return self;
// 	};
// 	SpreadOperatorImpl.prototype.call = function (thisArg) {
// 		if (typeof this._target !== "function")
// 			throw new TypeError("Target is not a function");
// 		thisArg = arguments.length <= 0 ? this._thisArg : thisArg;
// 		return this._target.apply(thisArg, this._values);
// 	};
// 	SpreadOperatorImpl.prototype.new = function () {
// 		if (typeof this._target !== "function")
// 			throw new TypeError("Target is not a constructor");
// 		var temp,
// 			returnValue;
// 		temp = Object.create(this._target.prototype);
// 		returnValue = this._target.apply(temp, this._values);
// 		return isObject(returnValue) ? returnValue : temp;
// 	};
// 	// Affects the target array
// 	SpreadOperatorImpl.prototype.array = function () {
// 		if (!isArray(this._target))
// 			throw new TypeError("Target is not a array");
// 		push.apply(this._target, this._values);
// 		return this._target;
// 	};
// 	// Target must be Array or function
// 	var es6SpreadOperator = function spreadOperator(target, thisArg) {
// 		if (!(typeof target === "function" || isArray(target)))
// 			throw new TypeError("Spread operator only supports on array and function objects at this moment");
// 		return new SpreadOperatorImpl(target, thisArg);
// 	};
// 	var es6ArrayFrom = function from(arrayLike, mapFn, thisArg) {
// 		var constructor,
// 			i = 0,
// 			length,
// 			outputs;
// 		// Use the generic constructor
// 		constructor = !isConstructor(this) ? Array : this;
// 		if (arrayLike === undefined || arrayLike === null)
// 			throw new TypeError("Cannot convert undefined or null to object");
// 		arrayLike = Object(arrayLike);
// 		if (mapFn === undefined)
// 			mapFn = simpleFunction;
// 		else if (!isCallable(mapFn))
// 			throw new TypeError(mapFn + " is not a function");
// 		if (typeof arrayLike[Symbol.iterator] === "undefined") {
// 			if (!(typeof arrayLike.length === "number" && arrayLike.length >= 0)) {
// 				outputs = new constructor(0);
// 				outputs.length = 0;
// 				return outputs;
// 			}
// 			length = Math.floor(arrayLike.length);
// 			outputs = new constructor(length);
// 			outputs.length = length;
// 			for(; i < length; ++i)
// 				outputs[i] = mapFn.call(thisArg, arrayLike[i]);
// 		} else {
// 			outputs = new constructor();
// 			outputs.length = 0;
// 			ES6.forOf(arrayLike, function (value) {
// 				outputs.length++;
// 				outputs[outputs.length - 1] = mapFn.call(thisArg, value);
// 			});
// 		}
// 		return outputs;
// 	};
// 	// Export ES6 APIs and add all the patches to support Symbol in ES5
// 	// If the running environment already supports ES6 then no patches will be applied,
// 	if (isES6Running())
// 		return ES6;
// 	else {
// 		// Some ES6 APIs can't be implemented in pure ES5, so this 'ES6' object provides
// 		// some equivalent functionality of these features.
// 		defineProperties(ES6, {
// 			// Checks if a JS value is a symbol
// 			// It can be used as equivalent api in ES6: typeof symbol === 'symbol'
// 			isSymbol: {
// 				value: isSymbol,
// 				writable: true,
// 				configurable: true
// 			},
// 			// Native ES5 'instanceof' operator does not support @@hasInstance symbol,
// 			// this method provides same functionality of ES6 'instanceof' operator.
// 			instanceOf: {
// 				value: es6InstanceOfOperator,
// 				writable: true,
// 				configurable: true
// 			},
// 			// This method behaves exactly same as ES6 for...of loop.
// 			forOf: {
// 				value: es6ForOfLoop,
// 				writable: true,
// 				configurable: true
// 			},
// 			// This method gives same functionality of the spread operator of ES6
// 			// It works on only functions and arrays.
// 			// Limitation: You can't create array like this [...iterable, , , , 33] by this method,
// 			// to achieve this you have to do like this [...iterable, undefined, undefined, undefined, 33]
// 			spreadOperator: {
// 				value: es6SpreadOperator,
// 				writable: true,
// 				configurable: true
// 			}
// 		});
// 		defineProperty(global, "Symbol", {
// 			value: Symbol,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Function.prototype, Symbol.hasInstance.toString(), {
// 			value: es6FunctionPrototypeHasInstanceSymbol
// 		});
// 		defineProperty(Array.prototype, "concat", {
// 			value: es6ArrayPrototypeConcat,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Object.prototype, "toString", {
// 			value: es6ObjectPrototypeToString,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Array.prototype, Symbol.iterator.toString(), {
// 			value: es6ArrayPrototypeIteratorSymbol,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Array, "from", {
// 			value: es6ArrayFrom,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Array.prototype, "entries", {
// 			value: es6ArrayPrototypeEntries,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(Array.prototype, "keys", {
// 			value: es6ArrayPrototypeKeys,
// 			writable: true,
// 			configurable: true
// 		});
// 		defineProperty(String.prototype, Symbol.iterator.toString(), {
// 			value: es6StringPrototypeIteratorSymbol,
// 			writable: true,
// 			configurable: true
// 		});
// 	}
// 	return ES6;
// });
// -------- CWAEnv.js --------
// Generated by CoffeeScript 2.6.1
(function() {
// CoffeeScript WebGL ARP Environment set up.
var CWAEnv, navigator;
navigator = this.navigator;
CWAEnv = (function() {
//-----------
class CWAEnv {
//-----------
constructor() {
throw "CWAEnv is not instantiatable.";
}
static add(cls, cname) {
var ref;
this._mod[cname] = cls;
if (cname === "Logger") {
this._lggr = cls.get("CWAEnv"); // , "trace", "stderr"
}
return (ref = this._lggr) != null ? typeof ref.trace === "function" ? ref.trace(`CWAEnv add for ${cname}`) : void 0 : void 0;
}
static get(cname) {
var ref, ref1, res;
if ((ref = this._lggr) != null) {
if (typeof ref.trace === "function") {
ref.trace(`CWAEnv get for ${cname}`);
}
}
res = this._mod[cname];
if (res != null) {
return res;
} else {
return (ref1 = this._lggr) != null ? ref1.warn(`No CWAEnv entry for ${cname}`) : void 0;
}
}
static fixRef(aname, bname) {
return this._mod[aname][`set${bname}`](this._mod[bname]);
}
static _setEnvTags() {
var avlc, ref, uaHas, ualc;
//---------
[avlc, ualc, this.platTag] = navigator != null ? [navigator.appVersion.toLowerCase(), navigator.userAgent.toLowerCase(), navigator.platform] : ["node", "node", "node"];
uaHas = function(str) {
return (ualc.indexOf(`${str}/`)) !== -1;
};
// OPR can be with Chrome
// Chrome can be with Safari
// iOS version of Opera has no browser except Mobile
this.browTag = uaHas("opr") ? "Opera" : (uaHas("edge")) || (uaHas("edgios")) ? "Edge" : (uaHas("firefox")) || (uaHas("fxios")) ? "Firefox" : (uaHas("chrome")) || (uaHas("crios")) ? "Chrome" : uaHas("safari") ? "Safari" : uaHas("trident") ? "IE" : uaHas("mobile") ? "Opera" : `Unknown browser \"${ualc}\"`;
// Seems javaEnabled is unreliable on IE and Edge
// Testing mime types works generally but not on IE
// IE and Edge always report javaEnabled so fail safe
if (this.browTag === "IE") {
// Was: @hasJava = do navigator?.javaEnabled
return this.hasJava = navigator != null ? navigator.javaEnabled() : void 0;
} else {
return this.hasJava = (navigator != null ? (ref = navigator.mimeTypes) != null ? ref['application/x-java-applet'] : void 0 : void 0) != null;
}
}
};
// Static
CWAEnv._mod = {};
CWAEnv._lggr = null;
CWAEnv.platTag = null;
CWAEnv.browTag = null;
CWAEnv.hasJava = false;
CWAEnv._setEnvTags();
return CWAEnv;
}).call(this);
// CWASA will report settings from environment
// Export
this.getCWAEnv = function() {
return CWAEnv;
};
// Make methods available in the normal way as well
CWAEnv.add(CWAEnv, "CWAEnv");
// (End CWAEnv.coffee)
}).call(this);
// -------- setup-emcc.js --------
var Module = { };
// Closure to hide resolve function
(function() {
var promres;
Module['EMCCInitialised'] = new Promise(function(resolve, reject) {
promres = resolve;
// console.log("EMCCInitialised promise created");
});
Module['onRuntimeInitialized'] = function() {
// console.log("Emscripten Runtime initialised");
promres();
// console.log("EMCCInitialised promise resolve called");
}
}).call();
Module['Build_Type'] = "web";
// Module['EMCCInitialised'].then( () => { console.log("EMCCInitialised then resolved - From Setup code"); } );
// -------- Logger.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Env, Logger, console, cwaenv;
cwaenv = this.getCWAEnv();
Env = cwaenv.get("CWAEnv");
console = this.console;
Logger = (function() {
var base, ref;
class Logger {
// Class Statics
static _nullLogger() {}
static _baseLogger(lev) {
return console[lev].bind(console);
}
static _tagLogger(lev, nom, tag, force) {
var lfn, lgr, tagstr;
lgr = force === "stderr" ? this.OrigWarnLogger : this._defaultLogger[lev].logger;
while (nom.length < 7) {
nom += " ";
}
if (tag !== "") {
while (tag.length < 5) {
tag += " ";
}
nom += " " + tag;
}
tagstr = nom + ": ";
return lfn = (msg, ...args) => {
return lgr(`${((new Date()).toISOString()).substr(11, 12)} ${tagstr}${msg}`, ...args);
};
}
// List names of installed Loggers as string
static list() {
var i, ix, len, lgr, msg, ref1;
msg = '';
ref1 = this._loggers;
for (ix = i = 0, len = ref1.length; i < len; ix = ++i) {
lgr = ref1[ix];
if (ix > 0) {
msg += ', ';
}
msg += lgr.modName;
}
return msg;
}
static _addCode(errNum, errCode, errText) {
Logger._ErrCodeToNum[errCode] = errNum;
return Logger._ErrNumToCode[errNum] = {
errCode: errCode,
errTxt: errText
};
}
// Public Methods
static errCode(errNum) {
var ref1;
return (ref1 = Logger._ErrNumToCode[errNum]) != null ? ref1 : Logger._ErrNumToCode[Logger._ErrUnknown];
}
static errNum(errCode) {
var ref1;
return (ref1 = Logger._ErrCodeToNum[errCode]) != null ? ref1 : Logger._ErrUnknown;
}
static errDesc(err) {
var theCode, txt;
theCode = Logger.errCode(err.errNum);
txt = `(${err.errNum} ${theCode.errCode})`;
if (err.errMsg != null) {
txt += ` ${err.errMsg}`;
}
return txt;
}
// errCode : Exit code including 0 for SUCCESS
// errMsg : High level description of error
// errRef : Often a file path or URL
// errDoc : Result especially for success
// errDetail: Additional text?
// errLink : Traceback or list of outcomes?
// Can map promise to return a success outcome for .then
// Can connect promise to a callback
// Can map a callback to a promise
// Object Methods
_setLoggers(newMaxLog, force) {
var lgr, lgrObj, newMaxLogLev, ref1, ref2, ref3, results;
newMaxLogLev = Logger._defaultLogger[newMaxLog].lev;
if (force === "noforce") {
newMaxLogLev = Math.min(newMaxLogLev, Logger._buildMaxLogLev);
}
this.maxLog = newMaxLog;
this.maxLogLev = newMaxLogLev;
this.force = force;
ref1 = Logger._defaultLogger;
results = [];
for (lgr in ref1) {
lgrObj = ref1[lgr];
if (lgrObj.lev > this.maxLogLev) {
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`Ignoring ${lgr} (lev ${lgrObj.lev}) for ${this.modName}`);
}
}
results.push(this[lgr] = null);
} else {
if ((ref3 = Logger._modLogger) != null) {
if (typeof ref3.trace === "function") {
ref3.trace(`Setting ${lgr} (lev ${Logger._defaultLogger[lgr].lev}) for ${this.modName}`);
}
}
if (force === "stderr") {
// Tag all to stderr with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, lgr, force));
} else {
// Tag debug and trace with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, (lgrObj.lev > 500 ? lgr : ""), force));
}
}
}
return results;
}
// Constructor for Logger
constructor(modName = "anon", newMaxLog, force) {
var ref1;
this.modName = modName;
this._setLoggers(newMaxLog, force);
// Note: Logger._modLogger will not be defined when this is first called by this module
if ((ref1 = Logger._modLogger) != null) {
if (typeof ref1.trace === "function") {
ref1.trace(`${this.modName} created: ${this.maxLog} (${this.maxLogLev}) ${this.force}`);
}
}
Logger._loggers.push(this);
}
// Find or create named Logger
// Uses Logger._defaultMaxLog if maxLog not set
static get(lgr = "anon", maxLog = "default", force = "default") {
var i, len, lg, ref1, ref2, ref3, ref4, stat, theLogger;
theLogger = null;
ref1 = Logger._loggers;
for (i = 0, len = ref1.length; i < len; i++) {
lg = ref1[i];
if (lg.modName === lgr) {
if (theLogger == null) {
theLogger = lg;
}
}
}
stat = theLogger != null ? "Updated" : "Created";
if (theLogger != null) {
if (maxLog === "default") {
maxLog = theLogger.maxLog;
}
if (force === "default") {
force = theLogger.force;
}
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`get: Updating ${theLogger.modName} Logger. MaxLog ${theLogger.maxLog} -> ${maxLog}`);
}
}
theLogger._setLoggers(maxLog, force);
} else {
if (maxLog === "default") {
maxLog = Logger._defaultMaxLog;
}
if (force === "default") {
force = "noforce";
}
if ((ref3 = Logger._modLogger) != null) {
if (typeof ref3.trace === "function") {
ref3.trace(`get: Create ${lgr} logger`);
}
}
theLogger = new Logger(lgr, maxLog, force);
}
if ((ref4 = Logger._modLogger) != null) {
if (typeof ref4.debug === "function") {
ref4.debug(`${theLogger.modName} ${stat}: ${theLogger.maxLog} (${theLogger.maxLogLev}) ${theLogger.force}`);
}
}
return theLogger;
}
static _listHooks() {
var base, base1, hk, i, j, len, len1, ref1, rep, results, ty, typs;
typs = Object.keys(this._hooks);
if (typeof (base = this._hookLog).trace === "function") {
base.trace(`Listing hooks. Types ${typs}`);
}
results = [];
for (i = 0, len = typs.length; i < len; i++) {
ty = typs[i];
rep = `Hooks for ${ty} (${this._hooks[ty].length}):`;
ref1 = this._hooks[ty];
for (j = 0, len1 = ref1.length; j < len1; j++) {
hk = ref1[j];
rep += ` ${hk.typ}/${hk.av}`;
}
results.push(typeof (base1 = this._hookLog).trace === "function" ? base1.trace(rep) : void 0);
}
return results;
}
static addHook(typ, fun, av = "*") {
var base, base1, hook;
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
hook = {
typ: typ,
fun: fun,
av: av
};
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Adding ${hook.typ} hook [${hook.av}]`);
}
Logger._hooks[typ].push(hook);
return Logger._listHooks();
}
// Allow type * to catch all explicit types of call
static callHook(htyp, msg = null, av = "*") {
var base, base1, doCall, evt, hk, i, len, ref1, results, typ;
evt = {
typ: htyp,
msg: msg,
av: av
};
ref1 = [htyp, "*"];
results = [];
for (i = 0, len = ref1.length; i < len; i++) {
typ = ref1[i];
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Calling ${typ} hook for ${av} [${JSON.stringify(msg)}] (${Logger._hooks[typ].length} hooks)`);
}
results.push((function() {
var base2, j, len1, ref2, results1;
ref2 = this._hooks[typ];
results1 = [];
for (j = 0, len1 = ref2.length; j < len1; j++) {
hk = ref2[j];
doCall = av === "*" || hk.av === "*" || av === hk.av;
if (typeof (base2 = this._hookLog).trace === "function") {
base2.trace(`Try ${hk.typ} hook for ${hk.av}: ${doCall ? '' : 'No '}Match`);
}
if (doCall) {
results1.push(hk.fun(evt));
} else {
results1.push(void 0);
}
}
return results1;
}).call(Logger));
}
return results;
}
};
Logger.OrigErrorLogger = Logger._baseLogger("error");
Logger.OrigWarnLogger = Logger._baseLogger("warn");
Logger.OrigLogLogger = Logger._baseLogger("log");
Logger.OrigInfoLogger = Logger._baseLogger("info");
Logger._defaultLogger = {
error: {
lev: 200,
logger: Logger.OrigErrorLogger
},
warn: {
lev: 300,
logger: Logger.OrigWarnLogger
},
log: {
lev: 400,
logger: Logger.OrigLogLogger
},
info: {
lev: 500,
logger: Logger.OrigInfoLogger
},
debug: {
lev: 600,
logger: Logger.OrigInfoLogger
},
trace: {
lev: 700,
logger: Logger.OrigInfoLogger
}
};
// Absolute maximum and default set according to (last character of) version
// VERTAG may be overriden in advance
Logger._buildVersion = (ref = typeof CWASA !== "undefined" && CWASA !== null ? CWASA.version : void 0) != null ? ref : "loc2025";
// Treat an unmapped parameter as a production release
[Logger._buildMaxLog, Logger._defaultMaxLog] = (function() {
switch (Logger._buildVersion.slice(-1)) {
case "t":
case "u":
case "v":
return ["trace", "debug"];
case "w":
case "x":
case "y":
return ["trace", "info"];
case "z":
return ["info", "info"];
default:
return ["log", "log"];
}
}).call(this);
Logger._buildMaxLogLev = Logger._defaultLogger[Logger._buildMaxLog].lev;
Logger._loggers = [];
// console.log "Logger testing with multiple arguments. First. %s. %s.", "Second", "Third" # JRWG
// if Module? then console.log "!!! Found Module" else console.log "!!! No Module"
// if Module?.Build_Type then console.log "!!! Found Module.Build_Type : #{Module.Build_Type}" else console.log "!!! No Module.Build_Type"
// if Module?.Build_Type is "cwasa" then console.log "!!! Module.Build_Type is cwasa" else console.log "!!! Module.Build_Type isnt cwasa"
// This code will override console logs to trap any direct uses
if ((typeof Module !== "undefined" && Module !== null ? Module.Build_Type : void 0) === "web") {
console.error = function(msg, ...args) {
return Logger.OrigErrorLogger((((new Date()).toISOString()).substr(11, 12)) + " Error: " + msg, ...args);
};
console.warn = function(msg, ...args) {
return Logger.OrigWarnLogger((((new Date()).toISOString()).substr(11, 12)) + " Warn: " + msg, ...args);
};
console.log = function(msg, ...args) {
return Logger.OrigLogLogger((((new Date()).toISOString()).substr(11, 12)) + " Log: " + msg, ...args);
};
console.info = function(msg, ...args) {
return Logger.OrigInfoLogger((((new Date()).toISOString()).substr(11, 12)) + " Info: " + msg, ...args);
};
} else {
// JRWG Currently could leave as they were
console.error = function(msg, ...args) {
return Logger.OrigErrorLogger(msg, ...args);
};
console.warn = function(msg, ...args) {
return Logger.OrigWarnLogger(msg, ...args);
};
console.log = function(msg, ...args) {
return Logger.OrigLogLogger(msg, ...args);
};
console.info = function(msg, ...args) {
return Logger.OrigInfoLogger(msg, ...args);
};
}
// Error Code handling
Logger._ErrNumToCode = {};
Logger._ErrCodeToNum = {};
Logger._ErrUnknown = 191; // Placeholder for undocumented error
Logger._addCode(0, 'SUCCESS', 'Sucessful completion');
Logger._addCode(1, 'EPERM', 'Operation not permitted');
Logger._addCode(2, 'ENOENT', 'No such file or directory');
Logger._addCode(13, 'EACCES', 'Permission denied');
Logger._addCode(21, 'EISDIR', 'Is a directory');
Logger._addCode(22, 'EINVAL', 'Invalid argument');
Logger._addCode(Logger._ErrUnknown, 'UNKNOWN', 'Undocumented Error');
// Logger for the Logger module
Logger._modLogger = Logger.get("Logger"); // , "debug" # , "stderr"
// Hooks for status reporting
Logger._hookLog = Logger.get("Hooks");
Logger._hooks = {};
if (Env.platTag !== 'node') {
if (typeof (base = Logger._modLogger).info === "function") {
base.info(`Build Version ${Logger._buildVersion}. Build MaxLog ${Logger._buildMaxLog}. Build MaxLogLev ${Logger._buildMaxLogLev}. Default MaxLog ${Logger._defaultMaxLog}`);
}
}
return Logger;
}).call(this);
// Object Methods
// Export
cwaenv.add(Logger, "Logger");
// (End Logger.coffee)
}).call(this);
// -------- zip.js --------
/*
Copyright (c) 2013 Gildas Lormeau. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the distribution.
3. The names of the authors may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function(obj) {
"use strict";
var ERR_BAD_FORMAT = "ZIP file format not recognized.";
var ERR_CRC = "CRC failed.";
var ERR_ENCRYPTED = "File contains encrypted entry.";
var ERR_ZIP64 = "File is using Zip64 (4gb+ file size).";
var ERR_READ = "Error while reading zip file.";
var ERR_WRITE = "Error while writing zip file.";
var ERR_WRITE_DATA = "Error while writing file data.";
var ERR_READ_DATA = "Error while reading file data.";
var ERR_DUPLICATED_NAME = "File already exists.";
var CHUNK_SIZE = 512 * 1024;
var TEXT_PLAIN = "text/plain";
var appendABViewSupported;
try {
appendABViewSupported = new Blob([ new DataView(new ArrayBuffer(0)) ]).size === 0;
} catch (e) {
}
function Crc32() {
this.crc = -1;
}
Crc32.prototype.append = function append(data) {
var crc = this.crc | 0, table = this.table;
for (var offset = 0, len = data.length | 0; offset < len; offset++)
crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];
this.crc = crc;
};
Crc32.prototype.get = function get() {
return ~this.crc;
};
Crc32.prototype.table = (function() {
var i, j, t, table = []; // Uint32Array is actually slower than []
for (i = 0; i < 256; i++) {
t = i;
for (j = 0; j < 8; j++)
if (t & 1)
t = (t >>> 1) ^ 0xEDB88320;
else
t = t >>> 1;
table[i] = t;
}
return table;
})();
// "no-op" codec
function NOOP() {}
NOOP.prototype.append = function append(bytes, onprogress) {
return bytes;
};
NOOP.prototype.flush = function flush() {};
function blobSlice(blob, index, length) {
if (index < 0 || length < 0 || index + length > blob.size)
throw new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);
if (blob.slice)
return blob.slice(index, index + length);
else if (blob.webkitSlice)
return blob.webkitSlice(index, index + length);
else if (blob.mozSlice)
return blob.mozSlice(index, index + length);
else if (blob.msSlice)
return blob.msSlice(index, index + length);
}
function getDataHelper(byteLength, bytes) {
var dataBuffer, dataArray;
dataBuffer = new ArrayBuffer(byteLength);
dataArray = new Uint8Array(dataBuffer);
if (bytes)
dataArray.set(bytes, 0);
return {
buffer : dataBuffer,
array : dataArray,
view : new DataView(dataBuffer)
};
}
// Readers
function Reader() {
}
function TextReader(text) {
var that = this, blobReader;
function init(callback, onerror) {
var blob = new Blob([ text ], {
type : TEXT_PLAIN
});
blobReader = new BlobReader(blob);
blobReader.init(function() {
that.size = blobReader.size;
callback();
}, onerror);
}
function readUint8Array(index, length, callback, onerror) {
blobReader.readUint8Array(index, length, callback, onerror);
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
TextReader.prototype = new Reader();
TextReader.prototype.constructor = TextReader;
function Data64URIReader(dataURI) {
var that = this, dataStart;
function init(callback) {
var dataEnd = dataURI.length;
while (dataURI.charAt(dataEnd - 1) == "=")
dataEnd--;
dataStart = dataURI.indexOf(",") + 1;
that.size = Math.floor((dataEnd - dataStart) * 0.75);
callback();
}
function readUint8Array(index, length, callback) {
var i, data = getDataHelper(length);
var start = Math.floor(index / 3) * 4;
var end = Math.ceil((index + length) / 3) * 4;
var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));
var delta = index - Math.floor(start / 4) * 3;
for (i = delta; i < delta + length; i++)
data.array[i - delta] = bytes.charCodeAt(i);
callback(data.array);
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
Data64URIReader.prototype = new Reader();
Data64URIReader.prototype.constructor = Data64URIReader;
function BlobReader(blob) {
var that = this;
function init(callback) {
that.size = blob.size;
callback();
}
function readUint8Array(index, length, callback, onerror) {
var reader = new FileReader();
reader.onload = function(e) {
callback(new Uint8Array(e.target.result));
};
reader.onerror = onerror;
try {
reader.readAsArrayBuffer(blobSlice(blob, index, length));
} catch (e) {
onerror(e);
}
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
BlobReader.prototype = new Reader();
BlobReader.prototype.constructor = BlobReader;
// Writers
function Writer() {
}
Writer.prototype.getData = function(callback) {
callback(this.data);
};
function TextWriter(encoding) {
var that = this, blob;
function init(callback) {
blob = new Blob([], {
type : TEXT_PLAIN
});
callback();
}
function writeUint8Array(array, callback) {
blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
type : TEXT_PLAIN
});
callback();
}
function getData(callback, onerror) {
var reader = new FileReader();
reader.onload = function(e) {
callback(e.target.result);
};
reader.onerror = onerror;
reader.readAsText(blob, encoding);
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
TextWriter.prototype = new Writer();
TextWriter.prototype.constructor = TextWriter;
function Data64URIWriter(contentType) {
var that = this, data = "", pending = "";
function init(callback) {
data += "data:" + (contentType || "") + ";base64,";
callback();
}
function writeUint8Array(array, callback) {
var i, delta = pending.length, dataString = pending;
pending = "";
for (i = 0; i < (Math.floor((delta + array.length) / 3) * 3) - delta; i++)
dataString += String.fromCharCode(array[i]);
for (; i < array.length; i++)
pending += String.fromCharCode(array[i]);
if (dataString.length > 2)
data += obj.btoa(dataString);
else
pending = dataString;
callback();
}
function getData(callback) {
callback(data + obj.btoa(pending));
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
Data64URIWriter.prototype = new Writer();
Data64URIWriter.prototype.constructor = Data64URIWriter;
function BlobWriter(contentType) {
var blob, that = this;
function init(callback) {
blob = new Blob([], {
type : contentType
});
callback();
}
function writeUint8Array(array, callback) {
blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
type : contentType
});
callback();
}
function getData(callback) {
callback(blob);
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
BlobWriter.prototype = new Writer();
BlobWriter.prototype.constructor = BlobWriter;
/**
* inflate/deflate core functions
* @param worker {Worker} web worker for the task.
* @param initialMessage {Object} initial message to be sent to the worker. should contain
*   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.
*   This function may add more properties before sending.
*/
function launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {
var chunkIndex = 0, index, outputSize, sn = initialMessage.sn, crc;
function onflush() {
worker.removeEventListener('message', onmessage, false);
onend(outputSize, crc);
}
function onmessage(event) {
var message = event.data, data = message.data, err = message.error;
if (err) {
err.toString = function () { return 'Error: ' + this.message; };
onreaderror(err);
return;
}
if (message.sn !== sn)
return;
if (typeof message.codecTime === 'number')
worker.codecTime += message.codecTime; // should be before onflush()
if (typeof message.crcTime === 'number')
worker.crcTime += message.crcTime;
switch (message.type) {
case 'append':
if (data) {
outputSize += data.length;
writer.writeUint8Array(data, function() {
step();
}, onwriteerror);
} else
step();
break;
case 'flush':
crc = message.crc;
if (data) {
outputSize += data.length;
writer.writeUint8Array(data, function() {
onflush();
}, onwriteerror);
} else
onflush();
break;
case 'progress':
if (onprogress)
onprogress(index + message.loaded, size);
break;
case 'importScripts': //no need to handle here
case 'newTask':
case 'echo':
break;
default:
console.warn('zip.js:launchWorkerProcess: unknown message: ', message);
}
}
function step() {
index = chunkIndex * CHUNK_SIZE;
// use `<=` instead of `<`, because `size` may be 0.
if (index <= size) {
reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(array) {
if (onprogress)
onprogress(index, size);
var msg = index === 0 ? initialMessage : {sn : sn};
msg.type = 'append';
msg.data = array;
// posting a message with transferables will fail on IE10
try {
worker.postMessage(msg, [array.buffer]);
} catch(ex) {
worker.postMessage(msg); // retry without transferables
}
chunkIndex++;
}, onreaderror);
} else {
worker.postMessage({
sn: sn,
type: 'flush'
});
}
}
outputSize = 0;
worker.addEventListener('message', onmessage, false);
step();
}
function launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {
var chunkIndex = 0, index, outputSize = 0,
crcInput = crcType === 'input',
crcOutput = crcType === 'output',
crc = new Crc32();
function step() {
var outputData;
index = chunkIndex * CHUNK_SIZE;
if (index < size)
reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(inputData) {
var outputData;
try {
outputData = process.append(inputData, function(loaded) {
if (onprogress)
onprogress(index + loaded, size);
});
} catch (e) {
onreaderror(e);
return;
}
if (outputData) {
outputSize += outputData.length;
writer.writeUint8Array(outputData, function() {
chunkIndex++;
setTimeout(step, 1);
}, onwriteerror);
if (crcOutput)
crc.append(outputData);
} else {
chunkIndex++;
setTimeout(step, 1);
}
if (crcInput)
crc.append(inputData);
if (onprogress)
onprogress(index, size);
}, onreaderror);
else {
try {
outputData = process.flush();
} catch (e) {
onreaderror(e);
return;
}
if (outputData) {
if (crcOutput)
crc.append(outputData);
outputSize += outputData.length;
writer.writeUint8Array(outputData, function() {
onend(outputSize, crc.get());
}, onwriteerror);
} else
onend(outputSize, crc.get());
}
}
step();
}
function inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
var crcType = computeCrc32 ? 'output' : 'none';
if (obj.zip.useWebWorkers) {
var initialMessage = {
sn: sn,
codecClass: 'Inflater',
crcType: crcType,
};
launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
} else
launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
}
function deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {
var crcType = 'input';
if (obj.zip.useWebWorkers) {
var initialMessage = {
sn: sn,
options: {level: level},
codecClass: 'Deflater',
crcType: crcType,
};
launchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);
} else
launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);
}
function copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
var crcType = 'input';
if (obj.zip.useWebWorkers && computeCrc32) {
var initialMessage = {
sn: sn,
codecClass: 'NOOP',
crcType: crcType,
};
launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
} else
launchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
}
// ZipReader
function decodeASCII(str) {
var i, out = "", charCode, extendedASCII = [ '\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4', '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB',
'\u00E8', '\u00EF', '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6', '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9',
'\u00FF', '\u00D6', '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1', '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1',
'\u00AA', '\u00BA', '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB', '\u00BB', '_', '_', '_', '\u00A6', '\u00A6',
'\u00C1', '\u00C2', '\u00C0', '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-', '-', '+', '-', '+', '\u00E3',
'\u00C3', '+', '+', '-', '-', '\u00A6', '-', '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i', '\u00CD', '\u00CE',
'\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_', '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5', '\u00FE',
'\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD', '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
'\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3', '\u00B2', '_', ' ' ];
for (i = 0; i < str.length; i++) {
charCode = str.charCodeAt(i) & 0xFF;
if (charCode > 127)
out += extendedASCII[charCode - 128];
else
out += String.fromCharCode(charCode);
}
return out;
}
function decodeUTF8(string) {
return decodeURIComponent(escape(string));
}
function getString(bytes) {
var i, str = "";
for (i = 0; i < bytes.length; i++)
str += String.fromCharCode(bytes[i]);
return str;
}
function getDate(timeRaw) {
var date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;
try {
return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5,
(time & 0x001F) * 2, 0);
} catch (e) {
}
}
function readCommonHeader(entry, data, index, centralDirectory, onerror) {
entry.version = data.view.getUint16(index, true);
entry.bitFlag = data.view.getUint16(index + 2, true);
entry.compressionMethod = data.view.getUint16(index + 4, true);
entry.lastModDateRaw = data.view.getUint32(index + 6, true);
entry.lastModDate = getDate(entry.lastModDateRaw);
if ((entry.bitFlag & 0x01) === 0x01) {
onerror(ERR_ENCRYPTED);
return;
}
if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {
entry.crc32 = data.view.getUint32(index + 10, true);
entry.compressedSize = data.view.getUint32(index + 14, true);
entry.uncompressedSize = data.view.getUint32(index + 18, true);
}
if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {
onerror(ERR_ZIP64);
return;
}
entry.filenameLength = data.view.getUint16(index + 22, true);
entry.extraFieldLength = data.view.getUint16(index + 24, true);
}
function createZipReader(reader, callback, onerror) {
var inflateSN = 0;
function Entry() {
}
Entry.prototype.getData = function(writer, onend, onprogress, checkCrc32) {
var that = this;
function testCrc32(crc32) {
var dataCrc32 = getDataHelper(4);
dataCrc32.view.setUint32(0, crc32);
return that.crc32 == dataCrc32.view.getUint32(0);
}
function getWriterData(uncompressedSize, crc32) {
if (checkCrc32 && !testCrc32(crc32))
onerror(ERR_CRC);
else
writer.getData(function(data) {
onend(data);
});
}
function onreaderror(err) {
onerror(err || ERR_READ_DATA);
}
function onwriteerror(err) {
onerror(err || ERR_WRITE_DATA);
}
reader.readUint8Array(that.offset, 30, function(bytes) {
var data = getDataHelper(bytes.length, bytes), dataOffset;
if (data.view.getUint32(0) != 0x504b0304) {
onerror(ERR_BAD_FORMAT);
return;
}
readCommonHeader(that, data, 4, false, onerror);
dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;
writer.init(function() {
if (that.compressionMethod === 0)
copy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
else
inflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
}, onwriteerror);
}, onreaderror);
};
function seekEOCDR(eocdrCallback) {
// "End of central directory record" is the last part of a zip archive, and is at least 22 bytes long.
// Zip file comment is the last part of EOCDR and has max length of 64KB,
// so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).
var EOCDR_MIN = 22;
if (reader.size < EOCDR_MIN) {
onerror(ERR_BAD_FORMAT);
return;
}
var ZIP_COMMENT_MAX = 256 * 256, EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX;
// In most cases, the EOCDR is EOCDR_MIN bytes long
doSeek(EOCDR_MIN, function() {
// If not found, try within EOCDR_MAX bytes
doSeek(Math.min(EOCDR_MAX, reader.size), function() {
onerror(ERR_BAD_FORMAT);
});
});
// seek last length bytes of file for EOCDR
function doSeek(length, eocdrNotFoundCallback) {
reader.readUint8Array(reader.size - length, length, function(bytes) {
for (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {
if (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {
eocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));
return;
}
}
eocdrNotFoundCallback();
}, function() {
onerror(ERR_READ);
});
}
}
var zipReader = {
getEntries : function(callback) {
var worker = this._worker;
// look for End of central directory record
seekEOCDR(function(dataView) {
var datalength, fileslength;
datalength = dataView.getUint32(16, true);
fileslength = dataView.getUint16(8, true);
if (datalength < 0 || datalength >= reader.size) {
onerror(ERR_BAD_FORMAT);
return;
}
reader.readUint8Array(datalength, reader.size - datalength, function(bytes) {
var i, index = 0, entries = [], entry, filename, comment, data = getDataHelper(bytes.length, bytes);
for (i = 0; i < fileslength; i++) {
entry = new Entry();
entry._worker = worker;
if (data.view.getUint32(index) != 0x504b0102) {
onerror(ERR_BAD_FORMAT);
return;
}
readCommonHeader(entry, data, index + 6, true, onerror);
entry.commentLength = data.view.getUint16(index + 32, true);
entry.directory = ((data.view.getUint8(index + 38) & 0x10) == 0x10);
entry.offset = data.view.getUint32(index + 42, true);
filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));
entry.filename = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(filename) : decodeASCII(filename);
if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == "/")
entry.directory = true;
comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46
+ entry.filenameLength + entry.extraFieldLength + entry.commentLength));
entry.comment = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(comment) : decodeASCII(comment);
entries.push(entry);
index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;
}
callback(entries);
}, function() {
onerror(ERR_READ);
});
});
},
close : function(callback) {
if (this._worker) {
this._worker.terminate();
this._worker = null;
}
if (callback)
callback();
},
_worker: null
};
if (!obj.zip.useWebWorkers)
callback(zipReader);
else {
createWorker('inflater',
function(worker) {
zipReader._worker = worker;
callback(zipReader);
},
function(err) {
onerror(err);
}
);
}
}
// ZipWriter
function encodeUTF8(string) {
return unescape(encodeURIComponent(string));
}
function getBytes(str) {
var i, array = [];
for (i = 0; i < str.length; i++)
array.push(str.charCodeAt(i));
return array;
}
function createZipWriter(writer, callback, onerror, dontDeflate) {
var files = {}, filenames = [], datalength = 0;
var deflateSN = 0;
function onwriteerror(err) {
onerror(err || ERR_WRITE);
}
function onreaderror(err) {
onerror(err || ERR_READ_DATA);
}
var zipWriter = {
add : function(name, reader, onend, onprogress, options) {
var header, filename, date;
var worker = this._worker;
function writeHeader(callback) {
var data;
date = options.lastModDate || new Date();
header = getDataHelper(26);
files[name] = {
headerArray : header.array,
directory : options.directory,
filename : filename,
offset : datalength,
comment : getBytes(encodeUTF8(options.comment || ""))
};
header.view.setUint32(0, 0x14000808);
if (options.version)
header.view.setUint8(0, options.version);
if (!dontDeflate && options.level !== 0 && !options.directory)
header.view.setUint16(4, 0x0800);
header.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true);
header.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true);
header.view.setUint16(22, filename.length, true);
data = getDataHelper(30 + filename.length);
data.view.setUint32(0, 0x504b0304);
data.array.set(header.array, 4);
data.array.set(filename, 30);
datalength += data.array.length;
writer.writeUint8Array(data.array, callback, onwriteerror);
}
function writeFooter(compressedLength, crc32) {
var footer = getDataHelper(16);
datalength += compressedLength || 0;
footer.view.setUint32(0, 0x504b0708);
if (typeof crc32 != "undefined") {
header.view.setUint32(10, crc32, true);
footer.view.setUint32(4, crc32, true);
}
if (reader) {
footer.view.setUint32(8, compressedLength, true);
header.view.setUint32(14, compressedLength, true);
footer.view.setUint32(12, reader.size, true);
header.view.setUint32(18, reader.size, true);
}
writer.writeUint8Array(footer.array, function() {
datalength += 16;
onend();
}, onwriteerror);
}
function writeFile() {
options = options || {};
name = name.trim();
if (options.directory && name.charAt(name.length - 1) != "/")
name += "/";
if (files.hasOwnProperty(name)) {
onerror(ERR_DUPLICATED_NAME);
return;
}
filename = getBytes(encodeUTF8(name));
filenames.push(name);
writeHeader(function() {
if (reader)
if (dontDeflate || options.level === 0)
copy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);
else
deflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);
else
writeFooter();
}, onwriteerror);
}
if (reader)
reader.init(writeFile, onreaderror);
else
writeFile();
},
close : function(callback) {
if (this._worker) {
this._worker.terminate();
this._worker = null;
}
var data, length = 0, index = 0, indexFilename, file;
for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
file = files[filenames[indexFilename]];
length += 46 + file.filename.length + file.comment.length;
}
data = getDataHelper(length + 22);
for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
file = files[filenames[indexFilename]];
data.view.setUint32(index, 0x504b0102);
data.view.setUint16(index + 4, 0x1400);
data.array.set(file.headerArray, index + 6);
data.view.setUint16(index + 32, file.comment.length, true);
if (file.directory)
data.view.setUint8(index + 38, 0x10);
data.view.setUint32(index + 42, file.offset, true);
data.array.set(file.filename, index + 46);
data.array.set(file.comment, index + 46 + file.filename.length);
index += 46 + file.filename.length + file.comment.length;
}
data.view.setUint32(index, 0x504b0506);
data.view.setUint16(index + 8, filenames.length, true);
data.view.setUint16(index + 10, filenames.length, true);
data.view.setUint32(index + 12, length, true);
data.view.setUint32(index + 16, datalength, true);
writer.writeUint8Array(data.array, function() {
writer.getData(callback);
}, onwriteerror);
},
_worker: null
};
if (!obj.zip.useWebWorkers)
callback(zipWriter);
else {
createWorker('deflater',
function(worker) {
zipWriter._worker = worker;
callback(zipWriter);
},
function(err) {
onerror(err);
}
);
}
}
function resolveURLs(urls) {
var a = document.createElement('a');
return urls.map(function(url) {
a.href = url;
return a.href;
});
}
var DEFAULT_WORKER_SCRIPTS = {
deflater: ['z-worker.js', 'deflate.js'],
inflater: ['z-worker.js', 'inflate.js']
};
function createWorker(type, callback, onerror) {
if (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {
onerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));
return;
}
var scripts;
if (obj.zip.workerScripts) {
scripts = obj.zip.workerScripts[type];
if (!Array.isArray(scripts)) {
onerror(new Error('zip.workerScripts.' + type + ' is not an array!'));
return;
}
scripts = resolveURLs(scripts);
} else {
scripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);
scripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];
}
var worker = new Worker(scripts[0]);
// record total consumed time by inflater/deflater/crc32 in this worker
worker.codecTime = worker.crcTime = 0;
worker.postMessage({ type: 'importScripts', scripts: scripts.slice(1) });
worker.addEventListener('message', onmessage);
function onmessage(ev) {
var msg = ev.data;
if (msg.error) {
worker.terminate(); // should before onerror(), because onerror() may throw.
onerror(msg.error);
return;
}
if (msg.type === 'importScripts') {
worker.removeEventListener('message', onmessage);
worker.removeEventListener('error', errorHandler);
callback(worker);
}
}
// catch entry script loading error and other unhandled errors
worker.addEventListener('error', errorHandler);
function errorHandler(err) {
worker.terminate();
onerror(err);
}
}
function onerror_default(error) {
console.error(error);
}
obj.zip = {
Reader : Reader,
Writer : Writer,
BlobReader : BlobReader,
Data64URIReader : Data64URIReader,
TextReader : TextReader,
BlobWriter : BlobWriter,
Data64URIWriter : Data64URIWriter,
TextWriter : TextWriter,
createReader : function(reader, callback, onerror) {
onerror = onerror || onerror_default;
reader.init(function() {
createZipReader(reader, callback, onerror);
}, onerror);
},
createWriter : function(writer, callback, onerror, dontDeflate) {
onerror = onerror || onerror_default;
dontDeflate = !!dontDeflate;
writer.init(function() {
createZipWriter(writer, callback, onerror, dontDeflate);
}, onerror);
},
useWebWorkers : true,
/**
* Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.
* E.g.: zip.workerScripts = './';
*/
workerScriptsPath : null,
/**
* Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.
* workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.
* Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.
* All urls are relative to current base url.
* E.g.:
* zip.workerScripts = {
*   deflater: ['z-worker.js', 'deflate.js'],
*   inflater: ['z-worker.js', 'inflate.js']
* };
*/
workerScripts : null,
};
})(this);
// -------- zip-ext.js --------
/*
Copyright (c) 2013 Gildas Lormeau. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the distribution.
3. The names of the authors may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function() {
"use strict";
var ERR_NOT_FOUND = "ZIP file not found.";
var ERR_HTTP_RANGE = "HTTP Range not supported.";
var Reader = zip.Reader;
var Writer = zip.Writer;
var ZipDirectoryEntry;
var appendABViewSupported;
try {
appendABViewSupported = new Blob([ new DataView(new ArrayBuffer(0)) ]).size === 0;
} catch (e) {
}
function HttpReader(url) {
var that = this;
function getData(callback, onerror) {
var request;
if (!that.data) {
request = new XMLHttpRequest();
request.addEventListener("load", function() {
// console.log("Zip GET load event called. Status "+request.status);
if (!that.size)
that.size = Number(request.getResponseHeader("Content-Length")) || Number(request.response.byteLength);
that.data = new Uint8Array(request.response);
callback();
}, false);
request.addEventListener("error", onerror, false);
request.open("GET", url);
request.responseType = "arraybuffer";
request.send();
} else
callback();
}
function init(callback, onerror) {
var request = new XMLHttpRequest();
request.addEventListener("load", function() {
// console.log("Zip HEAD load event called. Status "+request.status);
// Other codes will end up with a format error probably
if (request.status == 404) {
onerror(ERR_NOT_FOUND);
} else {
that.size = Number(request.getResponseHeader("Content-Length"));
// If response header doesn't return size then prefetch the content.
if (!that.size) {
// console.log("Zip HEAD load event called: No size");
getData(callback, onerror);
} else {
callback();
}
}
}, false);
request.addEventListener("error", onerror, false);
request.open("HEAD", url);
request.send();
}
function readUint8Array(index, length, callback, onerror) {
getData(function() {
callback(new Uint8Array(that.data.subarray(index, index + length)));
}, onerror);
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
HttpReader.prototype = new Reader();
HttpReader.prototype.constructor = HttpReader;
function HttpRangeReader(url) {
var that = this;
function init(callback, onerror) {
var request = new XMLHttpRequest();
request.addEventListener("load", function() {
that.size = Number(request.getResponseHeader("Content-Length"));
if (request.getResponseHeader("Accept-Ranges") == "bytes")
callback();
else
onerror(ERR_HTTP_RANGE);
}, false);
request.addEventListener("error", onerror, false);
request.open("HEAD", url);
request.send();
}
function readArrayBuffer(index, length, callback, onerror) {
var request = new XMLHttpRequest();
request.open("GET", url);
request.responseType = "arraybuffer";
request.setRequestHeader("Range", "bytes=" + index + "-" + (index + length - 1));
request.addEventListener("load", function() {
callback(request.response);
}, false);
request.addEventListener("error", onerror, false);
request.send();
}
function readUint8Array(index, length, callback, onerror) {
readArrayBuffer(index, length, function(arraybuffer) {
callback(new Uint8Array(arraybuffer));
}, onerror);
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
HttpRangeReader.prototype = new Reader();
HttpRangeReader.prototype.constructor = HttpRangeReader;
function ArrayBufferReader(arrayBuffer) {
var that = this;
function init(callback, onerror) {
that.size = arrayBuffer.byteLength;
callback();
}
function readUint8Array(index, length, callback, onerror) {
callback(new Uint8Array(arrayBuffer.slice(index, index + length)));
}
that.size = 0;
that.init = init;
that.readUint8Array = readUint8Array;
}
ArrayBufferReader.prototype = new Reader();
ArrayBufferReader.prototype.constructor = ArrayBufferReader;
function ArrayBufferWriter() {
var array, that = this;
function init(callback, onerror) {
array = new Uint8Array();
callback();
}
function writeUint8Array(arr, callback, onerror) {
var tmpArray = new Uint8Array(array.length + arr.length);
tmpArray.set(array);
tmpArray.set(arr, array.length);
array = tmpArray;
callback();
}
function getData(callback) {
callback(array.buffer);
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
ArrayBufferWriter.prototype = new Writer();
ArrayBufferWriter.prototype.constructor = ArrayBufferWriter;
function FileWriter(fileEntry, contentType) {
var writer, that = this;
function init(callback, onerror) {
fileEntry.createWriter(function(fileWriter) {
writer = fileWriter;
callback();
}, onerror);
}
function writeUint8Array(array, callback, onerror) {
var blob = new Blob([ appendABViewSupported ? array : array.buffer ], {
type : contentType
});
writer.onwrite = function() {
writer.onwrite = null;
callback();
};
writer.onerror = onerror;
writer.write(blob);
}
function getData(callback) {
fileEntry.file(callback);
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
FileWriter.prototype = new Writer();
FileWriter.prototype.constructor = FileWriter;
zip.FileWriter = FileWriter;
zip.HttpReader = HttpReader;
zip.HttpRangeReader = HttpRangeReader;
zip.ArrayBufferReader = ArrayBufferReader;
zip.ArrayBufferWriter = ArrayBufferWriter;
if (zip.fs) {
ZipDirectoryEntry = zip.fs.ZipDirectoryEntry;
ZipDirectoryEntry.prototype.addHttpContent = function(name, URL, useRangeHeader) {
function addChild(parent, name, params, directory) {
if (parent.directory)
return directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new zip.fs.ZipFileEntry(parent.fs, name, params, parent);
else
throw "Parent entry is not a directory.";
}
return addChild(this, name, {
data : URL,
Reader : useRangeHeader ? HttpRangeReader : HttpReader
});
};
ZipDirectoryEntry.prototype.importHttpContent = function(URL, useRangeHeader, onend, onerror) {
this.importZip(useRangeHeader ? new HttpRangeReader(URL) : new HttpReader(URL), onend, onerror);
};
zip.fs.FS.prototype.importHttpContent = function(URL, useRangeHeader, onend, onerror) {
this.entries = [];
this.root = new ZipDirectoryEntry(this);
this.root.importHttpContent(URL, useRangeHeader, onend, onerror);
};
}
})();
// -------- zip-dv-ext.js --------
/*
Copyright (c) 2013 Gildas Lormeau. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the distribution.
3. The names of the authors may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function() {
"use strict";
// Repeated to avoid changing zip.js to expose it
function getDataHelper(byteLength, bytes) {
var dataBuffer, dataArray;
dataBuffer = new ArrayBuffer(byteLength);
dataArray = new Uint8Array(dataBuffer);
if (bytes)
dataArray.set(bytes, 0);
return {
buffer : dataBuffer,
array : dataArray,
view : new DataView(dataBuffer)
};
}
// Extension to the set of Writers -- DataViewWriter. Presumably by RE.
function DataViewWriter(byteLength) {
var data, offset, that = this;
function init(callback, onerror) {
data = getDataHelper(byteLength);
offset = 0;
callback();
}
function writeUint8Array(array, callback, onerror) {
//window.console.log("Adding byte range ["+offset+".."+(offset+array.byteLength)+")");
data.array.set(array, offset);
offset += array.byteLength;
callback();
}
function getData(callback) {
callback(data.view);
}
that.init = init;
that.writeUint8Array = writeUint8Array;
that.getData = getData;
}
DataViewWriter.prototype = new zip.Writer();
DataViewWriter.prototype.constructor = DataViewWriter;
zip.DataViewWriter = DataViewWriter;
})();
// -------- inflate.js --------
/*
Copyright (c) 2013 Gildas Lormeau. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright 
notice, this list of conditions and the following disclaimer in 
the documentation and/or other materials provided with the distribution.
3. The names of the authors may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
* This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.
* JZlib is based on zlib-1.1.3, so all credit should go authors
* Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
* and contributors of zlib.
*/
(function(global) {
"use strict";
// Global
var MAX_BITS = 15;
var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_NEED_DICT = 2;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR = -5;
var inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,
0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];
var MANY = 1440;
// JZlib version : "1.0.2"
var Z_NO_FLUSH = 0;
var Z_FINISH = 4;
// InfTree
var fixed_bl = 9;
var fixed_bd = 5;
var fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,
0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,
0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,
0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,
0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,
35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,
26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,
7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,
8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,
8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,
0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,
81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,
0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,
84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,
0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,
80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,
0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,
0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,
0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,
193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,
120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,
227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,
92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,
249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,
130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,
181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,
102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,
221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,
8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,
147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,
85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,
235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,
141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,
167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,
107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,
207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,
127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];
var fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,
8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,
24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];
// Tables for deflate from PKZIP's appnote.txt.
var cplens = [ // Copy lengths for literal codes 257..285
3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];
// see note #13 above about 258
var cplext = [ // Extra bits for literal codes 257..285
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid
];
var cpdist = [ // Copy offsets for distance codes 0..29
1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];
var cpdext = [ // Extra bits for distance codes
0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];
// If BMAX needs to be larger than 16, then h and x[] should be uLong.
var BMAX = 15; // maximum bit length of any code
function InfTree() {
var that = this;
var hn; // hufts used in space
var v; // work area for huft_build
var c; // bit length count table
var r; // table entry for structure assignment
var u; // table stack
var x; // bit offsets, then code stack
function huft_build(b, // code lengths in bits (all assumed <=
// BMAX)
bindex, n, // number of codes (assumed <= 288)
s, // number of simple-valued codes (0..s-1)
d, // list of base values for non-simple codes
e, // list of extra bits for non-simple codes
t, // result: starting table
m, // maximum lookup bits, returns actual
hp,// space for trees
hn,// hufts used in space
v // working area: values in order of bit length
) {
// Given a list of code lengths and a maximum table size, make a set of
// tables to decode that set of codes. Return Z_OK on success,
// Z_BUF_ERROR
// if the given code set is incomplete (the tables are still built in
// this
// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set
// of
// lengths), or Z_MEM_ERROR if not enough memory.
var a; // counter for codes of length k
var f; // i repeats in table every f entries
var g; // maximum code length
var h; // table level
var i; // counter, current code
var j; // counter
var k; // number of bits in current code
var l; // bits per table (returned in m)
var mask; // (1 << w) - 1, to avoid cc -O bug on HP
var p; // pointer into c[], b[], or v[]
var q; // points to current table
var w; // bits before this table == (l * h)
var xp; // pointer into x
var y; // number of dummy codes added
var z; // number of entries in current table
// Generate counts for each bit length
p = 0;
i = n;
do {
c[b[bindex + p]]++;
p++;
i--; // assume all entries <= BMAX
} while (i !== 0);
if (c[0] == n) { // null input--all zero length codes
t[0] = -1;
m[0] = 0;
return Z_OK;
}
// Find minimum and maximum length, bound *m by those
l = m[0];
for (j = 1; j <= BMAX; j++)
if (c[j] !== 0)
break;
k = j; // minimum code length
if (l < j) {
l = j;
}
for (i = BMAX; i !== 0; i--) {
if (c[i] !== 0)
break;
}
g = i; // maximum code length
if (l > i) {
l = i;
}
m[0] = l;
// Adjust last length count to fill out codes, if needed
for (y = 1 << j; j < i; j++, y <<= 1) {
if ((y -= c[j]) < 0) {
return Z_DATA_ERROR;
}
}
if ((y -= c[i]) < 0) {
return Z_DATA_ERROR;
}
c[i] += y;
// Generate starting offsets into the value table for each length
x[1] = j = 0;
p = 1;
xp = 2;
while (--i !== 0) { // note that i == g from above
x[xp] = (j += c[p]);
xp++;
p++;
}
// Make a table of values in order of bit lengths
i = 0;
p = 0;
do {
if ((j = b[bindex + p]) !== 0) {
v[x[j]++] = i;
}
p++;
} while (++i < n);
n = x[g]; // set n to length of v
// Generate the Huffman codes and for each, make the table entries
x[0] = i = 0; // first Huffman code is zero
p = 0; // grab values in bit order
h = -1; // no tables yet--level -1
w = -l; // bits decoded == (l * h)
u[0] = 0; // just to keep compilers happy
q = 0; // ditto
z = 0; // ditto
// go through the bit lengths (k already is bits in shortest code)
for (; k <= g; k++) {
a = c[k];
while (a-- !== 0) {
// here i is the Huffman code of length k bits for value *p
// make tables up to required level
while (k > w + l) {
h++;
w += l; // previous table always l bits
// compute minimum size table less than or equal to l bits
z = g - w;
z = (z > l) ? l : z; // table size upper limit
if ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table
// too few codes for
// k-w bit table
f -= a + 1; // deduct codes from patterns left
xp = k;
if (j < z) {
while (++j < z) { // try smaller tables up to z bits
if ((f <<= 1) <= c[++xp])
break; // enough codes to use up j bits
f -= c[xp]; // else deduct codes from patterns
}
}
}
z = 1 << j; // table entries for j-bit table
// allocate new table
if (hn[0] + z > MANY) { // (note: doesn't matter for fixed)
return Z_DATA_ERROR; // overflow of MANY
}
u[h] = q = /* hp+ */hn[0]; // DEBUG
hn[0] += z;
// connect to last table, if there is one
if (h !== 0) {
x[h] = i; // save pattern for backing up
r[0] = /* (byte) */j; // bits in this table
r[1] = /* (byte) */l; // bits to dump before this table
j = i >>> (w - l);
r[2] = /* (int) */(q - u[h - 1] - j); // offset to this table
hp.set(r, (u[h - 1] + j) * 3);
// to
// last
// table
} else {
t[0] = q; // first table is returned result
}
}
// set up table entry in r
r[1] = /* (byte) */(k - w);
if (p >= n) {
r[0] = 128 + 64; // out of values--invalid code
} else if (v[p] < s) {
r[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is
// end-of-block
r[2] = v[p++]; // simple code is just the value
} else {
r[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look
// up in lists
r[2] = d[v[p++] - s];
}
// fill code-like entries with r
f = 1 << (k - w);
for (j = i >>> w; j < z; j += f) {
hp.set(r, (q + j) * 3);
}
// backwards increment the k-bit code i
for (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {
i ^= j;
}
i ^= j;
// backup over finished tables
mask = (1 << w) - 1; // needed on HP, cc -O bug
while ((i & mask) != x[h]) {
h--; // don't need to update q
w -= l;
mask = (1 << w) - 1;
}
}
}
// Return Z_BUF_ERROR if we were given an incomplete table
return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
}
function initWorkArea(vsize) {
var i;
if (!hn) {
hn = []; // []; //new Array(1);
v = []; // new Array(vsize);
c = new Int32Array(BMAX + 1); // new Array(BMAX + 1);
r = []; // new Array(3);
u = new Int32Array(BMAX); // new Array(BMAX);
x = new Int32Array(BMAX + 1); // new Array(BMAX + 1);
}
if (v.length < vsize) {
v = []; // new Array(vsize);
}
for (i = 0; i < vsize; i++) {
v[i] = 0;
}
for (i = 0; i < BMAX + 1; i++) {
c[i] = 0;
}
for (i = 0; i < 3; i++) {
r[i] = 0;
}
// for(int i=0; i<BMAX; i++){u[i]=0;}
u.set(c.subarray(0, BMAX), 0);
// for(int i=0; i<BMAX+1; i++){x[i]=0;}
x.set(c.subarray(0, BMAX + 1), 0);
}
that.inflate_trees_bits = function(c, // 19 code lengths
bb, // bits tree desired/actual depth
tb, // bits tree result
hp, // space for trees
z // for messages
) {
var result;
initWorkArea(19);
hn[0] = 0;
result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);
if (result == Z_DATA_ERROR) {
z.msg = "oversubscribed dynamic bit lengths tree";
} else if (result == Z_BUF_ERROR || bb[0] === 0) {
z.msg = "incomplete dynamic bit lengths tree";
result = Z_DATA_ERROR;
}
return result;
};
that.inflate_trees_dynamic = function(nl, // number of literal/length codes
nd, // number of distance codes
c, // that many (total) code lengths
bl, // literal desired/actual bit depth
bd, // distance desired/actual bit depth
tl, // literal/length tree result
td, // distance tree result
hp, // space for trees
z // for messages
) {
var result;
// build literal/length tree
initWorkArea(288);
hn[0] = 0;
result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);
if (result != Z_OK || bl[0] === 0) {
if (result == Z_DATA_ERROR) {
z.msg = "oversubscribed literal/length tree";
} else if (result != Z_MEM_ERROR) {
z.msg = "incomplete literal/length tree";
result = Z_DATA_ERROR;
}
return result;
}
// build distance tree
initWorkArea(288);
result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);
if (result != Z_OK || (bd[0] === 0 && nl > 257)) {
if (result == Z_DATA_ERROR) {
z.msg = "oversubscribed distance tree";
} else if (result == Z_BUF_ERROR) {
z.msg = "incomplete distance tree";
result = Z_DATA_ERROR;
} else if (result != Z_MEM_ERROR) {
z.msg = "empty distance tree with lengths";
result = Z_DATA_ERROR;
}
return result;
}
return Z_OK;
};
}
InfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth
bd, // distance desired/actual bit depth
tl,// literal/length tree result
td// distance tree result
) {
bl[0] = fixed_bl;
bd[0] = fixed_bd;
tl[0] = fixed_tl;
td[0] = fixed_td;
return Z_OK;
};
// InfCodes
// waiting for "i:"=input,
// "o:"=output,
// "x:"=nothing
var START = 0; // x: set up for LEN
var LEN = 1; // i: get length/literal/eob next
var LENEXT = 2; // i: getting length extra (have base)
var DIST = 3; // i: get distance next
var DISTEXT = 4;// i: getting distance extra
var COPY = 5; // o: copying bytes in window, waiting
// for space
var LIT = 6; // o: got literal, waiting for output
// space
var WASH = 7; // o: got eob, possibly still output
// waiting
var END = 8; // x: got eob and all data flushed
var BADCODE = 9;// x: got error
function InfCodes() {
var that = this;
var mode; // current inflate_codes mode
// mode dependent information
var len = 0;
var tree; // pointer into tree
var tree_index = 0;
var need = 0; // bits needed
var lit = 0;
// if EXT or COPY, where and how much
var get = 0; // bits to get for extra
var dist = 0; // distance back to copy from
var lbits = 0; // ltree bits decoded per branch
var dbits = 0; // dtree bits decoder per branch
var ltree; // literal/length/eob tree
var ltree_index = 0; // literal/length/eob tree
var dtree; // distance tree
var dtree_index = 0; // distance tree
// Called with number of bytes left to write in window at least 258
// (the maximum string length) and number of input bytes available
// at least ten. The ten bytes are six bytes for the longest length/
// distance pair plus four bytes for overloading the bit buffer.
function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {
var t; // temporary pointer
var tp; // temporary pointer
var tp_index; // temporary pointer
var e; // extra bits or operation
var b; // bit buffer
var k; // bits in bit buffer
var p; // input data pointer
var n; // bytes available there
var q; // output window write pointer
var m; // bytes to end of window or read pointer
var ml; // mask for literal/length tree
var md; // mask for distance tree
var c; // bytes to copy
var d; // distance back to copy from
var r; // copy source pointer
var tp_index_t_3; // (tp_index+t)*3
// load input, output, bit values
p = z.next_in_index;
n = z.avail_in;
b = s.bitb;
k = s.bitk;
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
// initialize masks
ml = inflate_mask[bl];
md = inflate_mask[bd];
// do until not enough input or output space for fast loop
do { // assume called with m >= 258 && n >= 10
// get literal/length code
while (k < (20)) { // max bits for literal/length code
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
t = b & ml;
tp = tl;
tp_index = tl_index;
tp_index_t_3 = (tp_index + t) * 3;
if ((e = tp[tp_index_t_3]) === 0) {
b >>= (tp[tp_index_t_3 + 1]);
k -= (tp[tp_index_t_3 + 1]);
s.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];
m--;
continue;
}
do {
b >>= (tp[tp_index_t_3 + 1]);
k -= (tp[tp_index_t_3 + 1]);
if ((e & 16) !== 0) {
e &= 15;
c = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);
b >>= e;
k -= e;
// decode distance base of block to copy
while (k < (15)) { // max bits for distance code
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
t = b & md;
tp = td;
tp_index = td_index;
tp_index_t_3 = (tp_index + t) * 3;
e = tp[tp_index_t_3];
do {
b >>= (tp[tp_index_t_3 + 1]);
k -= (tp[tp_index_t_3 + 1]);
if ((e & 16) !== 0) {
// get extra bits to add to distance base
e &= 15;
while (k < (e)) { // get extra bits (up to 13)
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);
b >>= (e);
k -= (e);
// do the copy
m -= c;
if (q >= d) { // offset before dest
// just copy
r = q - d;
if (q - r > 0 && 2 > (q - r)) {
s.window[q++] = s.window[r++]; // minimum
// count is
// three,
s.window[q++] = s.window[r++]; // so unroll
// loop a
// little
c -= 2;
} else {
s.window.set(s.window.subarray(r, r + 2), q);
q += 2;
r += 2;
c -= 2;
}
} else { // else offset after destination
r = q - d;
do {
r += s.end; // force pointer in window
} while (r < 0); // covers invalid distances
e = s.end - r;
if (c > e) { // if source crosses,
c -= e; // wrapped copy
if (q - r > 0 && e > (q - r)) {
do {
s.window[q++] = s.window[r++];
} while (--e !== 0);
} else {
s.window.set(s.window.subarray(r, r + e), q);
q += e;
r += e;
e = 0;
}
r = 0; // copy rest from start of window
}
}
// copy all or what's left
if (q - r > 0 && c > (q - r)) {
do {
s.window[q++] = s.window[r++];
} while (--c !== 0);
} else {
s.window.set(s.window.subarray(r, r + c), q);
q += c;
r += c;
c = 0;
}
break;
} else if ((e & 64) === 0) {
t += tp[tp_index_t_3 + 2];
t += (b & inflate_mask[e]);
tp_index_t_3 = (tp_index + t) * 3;
e = tp[tp_index_t_3];
} else {
z.msg = "invalid distance code";
c = z.avail_in - n;
c = (k >> 3) < c ? k >> 3 : c;
n += c;
p -= c;
k -= c << 3;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return Z_DATA_ERROR;
}
} while (true);
break;
}
if ((e & 64) === 0) {
t += tp[tp_index_t_3 + 2];
t += (b & inflate_mask[e]);
tp_index_t_3 = (tp_index + t) * 3;
if ((e = tp[tp_index_t_3]) === 0) {
b >>= (tp[tp_index_t_3 + 1]);
k -= (tp[tp_index_t_3 + 1]);
s.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];
m--;
break;
}
} else if ((e & 32) !== 0) {
c = z.avail_in - n;
c = (k >> 3) < c ? k >> 3 : c;
n += c;
p -= c;
k -= c << 3;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return Z_STREAM_END;
} else {
z.msg = "invalid literal/length code";
c = z.avail_in - n;
c = (k >> 3) < c ? k >> 3 : c;
n += c;
p -= c;
k -= c << 3;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return Z_DATA_ERROR;
}
} while (true);
} while (m >= 258 && n >= 10);
// not enough input or output--restore pointers and return
c = z.avail_in - n;
c = (k >> 3) < c ? k >> 3 : c;
n += c;
p -= c;
k -= c << 3;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return Z_OK;
}
that.init = function(bl, bd, tl, tl_index, td, td_index) {
mode = START;
lbits = /* (byte) */bl;
dbits = /* (byte) */bd;
ltree = tl;
ltree_index = tl_index;
dtree = td;
dtree_index = td_index;
tree = null;
};
that.proc = function(s, z, r) {
var j; // temporary storage
var tindex; // temporary pointer
var e; // extra bits or operation
var b = 0; // bit buffer
var k = 0; // bits in bit buffer
var p = 0; // input data pointer
var n; // bytes available there
var q; // output window write pointer
var m; // bytes to end of window or read pointer
var f; // pointer to copy strings from
// copy input/output information to locals (UPDATE macro restores)
p = z.next_in_index;
n = z.avail_in;
b = s.bitb;
k = s.bitk;
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
// process input and output based on current state
while (true) {
switch (mode) {
// waiting for "i:"=input, "o:"=output, "x:"=nothing
case START: // x: set up for LEN
if (m >= 258 && n >= 10) {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);
p = z.next_in_index;
n = z.avail_in;
b = s.bitb;
k = s.bitk;
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
if (r != Z_OK) {
mode = r == Z_STREAM_END ? WASH : BADCODE;
break;
}
}
need = lbits;
tree = ltree;
tree_index = ltree_index;
mode = LEN;
/* falls through */
case LEN: // i: get length/literal/eob next
j = need;
while (k < (j)) {
if (n !== 0)
r = Z_OK;
else {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
tindex = (tree_index + (b & inflate_mask[j])) * 3;
b >>>= (tree[tindex + 1]);
k -= (tree[tindex + 1]);
e = tree[tindex];
if (e === 0) { // literal
lit = tree[tindex + 2];
mode = LIT;
break;
}
if ((e & 16) !== 0) { // length
get = e & 15;
len = tree[tindex + 2];
mode = LENEXT;
break;
}
if ((e & 64) === 0) { // next table
need = e;
tree_index = tindex / 3 + tree[tindex + 2];
break;
}
if ((e & 32) !== 0) { // end of block
mode = WASH;
break;
}
mode = BADCODE; // invalid code
z.msg = "invalid literal/length code";
r = Z_DATA_ERROR;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
case LENEXT: // i: getting length extra (have base)
j = get;
while (k < (j)) {
if (n !== 0)
r = Z_OK;
else {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
len += (b & inflate_mask[j]);
b >>= j;
k -= j;
need = dbits;
tree = dtree;
tree_index = dtree_index;
mode = DIST;
/* falls through */
case DIST: // i: get distance next
j = need;
while (k < (j)) {
if (n !== 0)
r = Z_OK;
else {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
tindex = (tree_index + (b & inflate_mask[j])) * 3;
b >>= tree[tindex + 1];
k -= tree[tindex + 1];
e = (tree[tindex]);
if ((e & 16) !== 0) { // distance
get = e & 15;
dist = tree[tindex + 2];
mode = DISTEXT;
break;
}
if ((e & 64) === 0) { // next table
need = e;
tree_index = tindex / 3 + tree[tindex + 2];
break;
}
mode = BADCODE; // invalid code
z.msg = "invalid distance code";
r = Z_DATA_ERROR;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
case DISTEXT: // i: getting distance extra
j = get;
while (k < (j)) {
if (n !== 0)
r = Z_OK;
else {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
dist += (b & inflate_mask[j]);
b >>= j;
k -= j;
mode = COPY;
/* falls through */
case COPY: // o: copying bytes in window, waiting for space
f = q - dist;
while (f < 0) { // modulo window size-"while" instead
f += s.end; // of "if" handles invalid distances
}
while (len !== 0) {
if (m === 0) {
if (q == s.end && s.read !== 0) {
q = 0;
m = q < s.read ? s.read - q - 1 : s.end - q;
}
if (m === 0) {
s.write = q;
r = s.inflate_flush(z, r);
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
if (q == s.end && s.read !== 0) {
q = 0;
m = q < s.read ? s.read - q - 1 : s.end - q;
}
if (m === 0) {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
}
}
s.window[q++] = s.window[f++];
m--;
if (f == s.end)
f = 0;
len--;
}
mode = START;
break;
case LIT: // o: got literal, waiting for output space
if (m === 0) {
if (q == s.end && s.read !== 0) {
q = 0;
m = q < s.read ? s.read - q - 1 : s.end - q;
}
if (m === 0) {
s.write = q;
r = s.inflate_flush(z, r);
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
if (q == s.end && s.read !== 0) {
q = 0;
m = q < s.read ? s.read - q - 1 : s.end - q;
}
if (m === 0) {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
}
}
r = Z_OK;
s.window[q++] = /* (byte) */lit;
m--;
mode = START;
break;
case WASH: // o: got eob, possibly more output
if (k > 7) { // return unused byte, if any
k -= 8;
n++;
p--; // can always return one
}
s.write = q;
r = s.inflate_flush(z, r);
q = s.write;
m = q < s.read ? s.read - q - 1 : s.end - q;
if (s.read != s.write) {
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
mode = END;
/* falls through */
case END:
r = Z_STREAM_END;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
case BADCODE: // x: got error
r = Z_DATA_ERROR;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
default:
r = Z_STREAM_ERROR;
s.bitb = b;
s.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
s.write = q;
return s.inflate_flush(z, r);
}
}
};
that.free = function() {
// ZFREE(z, c);
};
}
// InfBlocks
// Table for deflate from PKZIP's appnote.txt.
var border = [ // Order of the bit length code lengths
16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
var TYPE = 0; // get type bits (3, including end bit)
var LENS = 1; // get lengths for stored
var STORED = 2;// processing stored block
var TABLE = 3; // get table lengths
var BTREE = 4; // get bit lengths tree for a dynamic
// block
var DTREE = 5; // get length, distance trees for a
// dynamic block
var CODES = 6; // processing fixed or dynamic block
var DRY = 7; // output remaining window bytes
var DONELOCKS = 8; // finished last block, done
var BADBLOCKS = 9; // ot a data error--stuck here
function InfBlocks(z, w) {
var that = this;
var mode = TYPE; // current inflate_block mode
var left = 0; // if STORED, bytes left to copy
var table = 0; // table lengths (14 bits)
var index = 0; // index into blens (or border)
var blens; // bit lengths of codes
var bb = [ 0 ]; // bit length tree depth
var tb = [ 0 ]; // bit length decoding tree
var codes = new InfCodes(); // if CODES, current state
var last = 0; // true if this block is the last block
var hufts = new Int32Array(MANY * 3); // single malloc for tree space
var check = 0; // check on output
var inftree = new InfTree();
that.bitk = 0; // bits in bit buffer
that.bitb = 0; // bit buffer
that.window = new Uint8Array(w); // sliding window
that.end = w; // one byte after sliding window
that.read = 0; // window read pointer
that.write = 0; // window write pointer
that.reset = function(z, c) {
if (c)
c[0] = check;
// if (mode == BTREE || mode == DTREE) {
// }
if (mode == CODES) {
codes.free(z);
}
mode = TYPE;
that.bitk = 0;
that.bitb = 0;
that.read = that.write = 0;
};
that.reset(z, null);
// copy as much as possible from the sliding window to the output area
that.inflate_flush = function(z, r) {
var n;
var p;
var q;
// local copies of source and destination pointers
p = z.next_out_index;
q = that.read;
// compute number of bytes to copy as far as end of window
n = /* (int) */((q <= that.write ? that.write : that.end) - q);
if (n > z.avail_out)
n = z.avail_out;
if (n !== 0 && r == Z_BUF_ERROR)
r = Z_OK;
// update counters
z.avail_out -= n;
z.total_out += n;
// copy as far as end of window
z.next_out.set(that.window.subarray(q, q + n), p);
p += n;
q += n;
// see if more to copy at beginning of window
if (q == that.end) {
// wrap pointers
q = 0;
if (that.write == that.end)
that.write = 0;
// compute bytes to copy
n = that.write - q;
if (n > z.avail_out)
n = z.avail_out;
if (n !== 0 && r == Z_BUF_ERROR)
r = Z_OK;
// update counters
z.avail_out -= n;
z.total_out += n;
// copy
z.next_out.set(that.window.subarray(q, q + n), p);
p += n;
q += n;
}
// update pointers
z.next_out_index = p;
that.read = q;
// done
return r;
};
that.proc = function(z, r) {
var t; // temporary storage
var b; // bit buffer
var k; // bits in bit buffer
var p; // input data pointer
var n; // bytes available there
var q; // output window write pointer
var m; // bytes to end of window or read pointer
var i;
// copy input/output information to locals (UPDATE macro restores)
// {
p = z.next_in_index;
n = z.avail_in;
b = that.bitb;
k = that.bitk;
// }
// {
q = that.write;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
// }
// process input based on current state
// DEBUG dtree
while (true) {
switch (mode) {
case TYPE:
while (k < (3)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
t = /* (int) */(b & 7);
last = t & 1;
switch (t >>> 1) {
case 0: // stored
// {
b >>>= (3);
k -= (3);
// }
t = k & 7; // go to byte boundary
// {
b >>>= (t);
k -= (t);
// }
mode = LENS; // get length of stored block
break;
case 1: // fixed
// {
var bl = []; // new Array(1);
var bd = []; // new Array(1);
var tl = [ [] ]; // new Array(1);
var td = [ [] ]; // new Array(1);
InfTree.inflate_trees_fixed(bl, bd, tl, td);
codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);
// }
// {
b >>>= (3);
k -= (3);
// }
mode = CODES;
break;
case 2: // dynamic
// {
b >>>= (3);
k -= (3);
// }
mode = TABLE;
break;
case 3: // illegal
// {
b >>>= (3);
k -= (3);
// }
mode = BADBLOCKS;
z.msg = "invalid block type";
r = Z_DATA_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
break;
case LENS:
while (k < (32)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
if ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {
mode = BADBLOCKS;
z.msg = "invalid stored block lengths";
r = Z_DATA_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
left = (b & 0xffff);
b = k = 0; // dump bits
mode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);
break;
case STORED:
if (n === 0) {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
if (m === 0) {
if (q == that.end && that.read !== 0) {
q = 0;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
}
if (m === 0) {
that.write = q;
r = that.inflate_flush(z, r);
q = that.write;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
if (q == that.end && that.read !== 0) {
q = 0;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
}
if (m === 0) {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
}
}
r = Z_OK;
t = left;
if (t > n)
t = n;
if (t > m)
t = m;
that.window.set(z.read_buf(p, t), q);
p += t;
n -= t;
q += t;
m -= t;
if ((left -= t) !== 0)
break;
mode = last !== 0 ? DRY : TYPE;
break;
case TABLE:
while (k < (14)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
table = t = (b & 0x3fff);
if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {
mode = BADBLOCKS;
z.msg = "too many length or distance symbols";
r = Z_DATA_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);
if (!blens || blens.length < t) {
blens = []; // new Array(t);
} else {
for (i = 0; i < t; i++) {
blens[i] = 0;
}
}
// {
b >>>= (14);
k -= (14);
// }
index = 0;
mode = BTREE;
/* falls through */
case BTREE:
while (index < 4 + (table >>> 10)) {
while (k < (3)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
blens[border[index++]] = b & 7;
// {
b >>>= (3);
k -= (3);
// }
}
while (index < 19) {
blens[border[index++]] = 0;
}
bb[0] = 7;
t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);
if (t != Z_OK) {
r = t;
if (r == Z_DATA_ERROR) {
blens = null;
mode = BADBLOCKS;
}
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
index = 0;
mode = DTREE;
/* falls through */
case DTREE:
while (true) {
t = table;
if (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {
break;
}
var j, c;
t = bb[0];
while (k < (t)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
// if (tb[0] == -1) {
// System.err.println("null...");
// }
t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];
c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];
if (c < 16) {
b >>>= (t);
k -= (t);
blens[index++] = c;
} else { // c == 16..18
i = c == 18 ? 7 : c - 14;
j = c == 18 ? 11 : 3;
while (k < (t + i)) {
if (n !== 0) {
r = Z_OK;
} else {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
n--;
b |= (z.read_byte(p++) & 0xff) << k;
k += 8;
}
b >>>= (t);
k -= (t);
j += (b & inflate_mask[i]);
b >>>= (i);
k -= (i);
i = index;
t = table;
if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {
blens = null;
mode = BADBLOCKS;
z.msg = "invalid bit length repeat";
r = Z_DATA_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
c = c == 16 ? blens[i - 1] : 0;
do {
blens[i++] = c;
} while (--j !== 0);
index = i;
}
}
tb[0] = -1;
// {
var bl_ = []; // new Array(1);
var bd_ = []; // new Array(1);
var tl_ = []; // new Array(1);
var td_ = []; // new Array(1);
bl_[0] = 9; // must be <= 9 for lookahead assumptions
bd_[0] = 6; // must be <= 9 for lookahead assumptions
t = table;
t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);
if (t != Z_OK) {
if (t == Z_DATA_ERROR) {
blens = null;
mode = BADBLOCKS;
}
r = t;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);
// }
mode = CODES;
/* falls through */
case CODES:
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
if ((r = codes.proc(that, z, r)) != Z_STREAM_END) {
return that.inflate_flush(z, r);
}
r = Z_OK;
codes.free(z);
p = z.next_in_index;
n = z.avail_in;
b = that.bitb;
k = that.bitk;
q = that.write;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
if (last === 0) {
mode = TYPE;
break;
}
mode = DRY;
/* falls through */
case DRY:
that.write = q;
r = that.inflate_flush(z, r);
q = that.write;
m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
if (that.read != that.write) {
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
mode = DONELOCKS;
/* falls through */
case DONELOCKS:
r = Z_STREAM_END;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
case BADBLOCKS:
r = Z_DATA_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
default:
r = Z_STREAM_ERROR;
that.bitb = b;
that.bitk = k;
z.avail_in = n;
z.total_in += p - z.next_in_index;
z.next_in_index = p;
that.write = q;
return that.inflate_flush(z, r);
}
}
};
that.free = function(z) {
that.reset(z, null);
that.window = null;
hufts = null;
// ZFREE(z, s);
};
that.set_dictionary = function(d, start, n) {
that.window.set(d.subarray(start, start + n), 0);
that.read = that.write = n;
};
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH.
that.sync_point = function() {
return mode == LENS ? 1 : 0;
};
}
// Inflate
// preset dictionary flag in zlib header
var PRESET_DICT = 0x20;
var Z_DEFLATED = 8;
var METHOD = 0; // waiting for method byte
var FLAG = 1; // waiting for flag byte
var DICT4 = 2; // four dictionary check bytes to go
var DICT3 = 3; // three dictionary check bytes to go
var DICT2 = 4; // two dictionary check bytes to go
var DICT1 = 5; // one dictionary check byte to go
var DICT0 = 6; // waiting for inflateSetDictionary
var BLOCKS = 7; // decompressing blocks
var DONE = 12; // finished check, done
var BAD = 13; // got an error--stay here
var mark = [ 0, 0, 0xff, 0xff ];
function Inflate() {
var that = this;
that.mode = 0; // current inflate mode
// mode dependent information
that.method = 0; // if FLAGS, method byte
// if CHECK, check values to compare
that.was = [ 0 ]; // new Array(1); // computed check value
that.need = 0; // stream check value
// if BAD, inflateSync's marker bytes count
that.marker = 0;
// mode independent information
that.wbits = 0; // log2(window size) (8..15, defaults to 15)
// this.blocks; // current inflate_blocks state
function inflateReset(z) {
if (!z || !z.istate)
return Z_STREAM_ERROR;
z.total_in = z.total_out = 0;
z.msg = null;
z.istate.mode = BLOCKS;
z.istate.blocks.reset(z, null);
return Z_OK;
}
that.inflateEnd = function(z) {
if (that.blocks)
that.blocks.free(z);
that.blocks = null;
// ZFREE(z, z->state);
return Z_OK;
};
that.inflateInit = function(z, w) {
z.msg = null;
that.blocks = null;
// set window size
if (w < 8 || w > 15) {
that.inflateEnd(z);
return Z_STREAM_ERROR;
}
that.wbits = w;
z.istate.blocks = new InfBlocks(z, 1 << w);
// reset state
inflateReset(z);
return Z_OK;
};
that.inflate = function(z, f) {
var r;
var b;
if (!z || !z.istate || !z.next_in)
return Z_STREAM_ERROR;
f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;
r = Z_BUF_ERROR;
while (true) {
// System.out.println("mode: "+z.istate.mode);
switch (z.istate.mode) {
case METHOD:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
if (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {
z.istate.mode = BAD;
z.msg = "unknown compression method";
z.istate.marker = 5; // can't try inflateSync
break;
}
if ((z.istate.method >> 4) + 8 > z.istate.wbits) {
z.istate.mode = BAD;
z.msg = "invalid window size";
z.istate.marker = 5; // can't try inflateSync
break;
}
z.istate.mode = FLAG;
/* falls through */
case FLAG:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
b = (z.read_byte(z.next_in_index++)) & 0xff;
if ((((z.istate.method << 8) + b) % 31) !== 0) {
z.istate.mode = BAD;
z.msg = "incorrect header check";
z.istate.marker = 5; // can't try inflateSync
break;
}
if ((b & PRESET_DICT) === 0) {
z.istate.mode = BLOCKS;
break;
}
z.istate.mode = DICT4;
/* falls through */
case DICT4:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
z.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;
z.istate.mode = DICT3;
/* falls through */
case DICT3:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
z.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;
z.istate.mode = DICT2;
/* falls through */
case DICT2:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
z.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;
z.istate.mode = DICT1;
/* falls through */
case DICT1:
if (z.avail_in === 0)
return r;
r = f;
z.avail_in--;
z.total_in++;
z.istate.need += (z.read_byte(z.next_in_index++) & 0xff);
z.istate.mode = DICT0;
return Z_NEED_DICT;
case DICT0:
z.istate.mode = BAD;
z.msg = "need dictionary";
z.istate.marker = 0; // can try inflateSync
return Z_STREAM_ERROR;
case BLOCKS:
r = z.istate.blocks.proc(z, r);
if (r == Z_DATA_ERROR) {
z.istate.mode = BAD;
z.istate.marker = 0; // can try inflateSync
break;
}
if (r == Z_OK) {
r = f;
}
if (r != Z_STREAM_END) {
return r;
}
r = f;
z.istate.blocks.reset(z, z.istate.was);
z.istate.mode = DONE;
/* falls through */
case DONE:
return Z_STREAM_END;
case BAD:
return Z_DATA_ERROR;
default:
return Z_STREAM_ERROR;
}
}
};
that.inflateSetDictionary = function(z, dictionary, dictLength) {
var index = 0;
var length = dictLength;
if (!z || !z.istate || z.istate.mode != DICT0)
return Z_STREAM_ERROR;
if (length >= (1 << z.istate.wbits)) {
length = (1 << z.istate.wbits) - 1;
index = dictLength - length;
}
z.istate.blocks.set_dictionary(dictionary, index, length);
z.istate.mode = BLOCKS;
return Z_OK;
};
that.inflateSync = function(z) {
var n; // number of bytes to look at
var p; // pointer to bytes
var m; // number of marker bytes found in a row
var r, w; // temporaries to save total_in and total_out
// set up
if (!z || !z.istate)
return Z_STREAM_ERROR;
if (z.istate.mode != BAD) {
z.istate.mode = BAD;
z.istate.marker = 0;
}
if ((n = z.avail_in) === 0)
return Z_BUF_ERROR;
p = z.next_in_index;
m = z.istate.marker;
// search
while (n !== 0 && m < 4) {
if (z.read_byte(p) == mark[m]) {
m++;
} else if (z.read_byte(p) !== 0) {
m = 0;
} else {
m = 4 - m;
}
p++;
n--;
}
// restore
z.total_in += p - z.next_in_index;
z.next_in_index = p;
z.avail_in = n;
z.istate.marker = m;
// return no joy or set up to restart on a new block
if (m != 4) {
return Z_DATA_ERROR;
}
r = z.total_in;
w = z.total_out;
inflateReset(z);
z.total_in = r;
z.total_out = w;
z.istate.mode = BLOCKS;
return Z_OK;
};
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
// implementation to provide an additional safety check. PPP uses
// Z_SYNC_FLUSH
// but removes the length bytes of the resulting empty stored block. When
// decompressing, PPP checks that at the end of input packet, inflate is
// waiting for these length bytes.
that.inflateSyncPoint = function(z) {
if (!z || !z.istate || !z.istate.blocks)
return Z_STREAM_ERROR;
return z.istate.blocks.sync_point();
};
}
// ZStream
function ZStream() {
}
ZStream.prototype = {
inflateInit : function(bits) {
var that = this;
that.istate = new Inflate();
if (!bits)
bits = MAX_BITS;
return that.istate.inflateInit(that, bits);
},
inflate : function(f) {
var that = this;
if (!that.istate)
return Z_STREAM_ERROR;
return that.istate.inflate(that, f);
},
inflateEnd : function() {
var that = this;
if (!that.istate)
return Z_STREAM_ERROR;
var ret = that.istate.inflateEnd(that);
that.istate = null;
return ret;
},
inflateSync : function() {
var that = this;
if (!that.istate)
return Z_STREAM_ERROR;
return that.istate.inflateSync(that);
},
inflateSetDictionary : function(dictionary, dictLength) {
var that = this;
if (!that.istate)
return Z_STREAM_ERROR;
return that.istate.inflateSetDictionary(that, dictionary, dictLength);
},
read_byte : function(start) {
var that = this;
return that.next_in.subarray(start, start + 1)[0];
},
read_buf : function(start, size) {
var that = this;
return that.next_in.subarray(start, start + size);
}
};
// Inflater
function Inflater() {
var that = this;
var z = new ZStream();
var bufsize = 512;
var flush = Z_NO_FLUSH;
var buf = new Uint8Array(bufsize);
var nomoreinput = false;
z.inflateInit();
z.next_out = buf;
that.append = function(data, onprogress) {
var err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;
if (data.length === 0)
return;
z.next_in_index = 0;
z.next_in = data;
z.avail_in = data.length;
do {
z.next_out_index = 0;
z.avail_out = bufsize;
if ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it
z.next_in_index = 0;
nomoreinput = true;
}
err = z.inflate(flush);
if (nomoreinput && (err === Z_BUF_ERROR)) {
if (z.avail_in !== 0)
throw new Error("inflating: bad input");
} else if (err !== Z_OK && err !== Z_STREAM_END)
throw new Error("inflating: " + z.msg);
if ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))
throw new Error("inflating: bad input");
if (z.next_out_index)
if (z.next_out_index === bufsize)
buffers.push(new Uint8Array(buf));
else
buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));
bufferSize += z.next_out_index;
if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
onprogress(z.next_in_index);
lastIndex = z.next_in_index;
}
} while (z.avail_in > 0 || z.avail_out === 0);
array = new Uint8Array(bufferSize);
buffers.forEach(function(chunk) {
array.set(chunk, bufferIndex);
bufferIndex += chunk.length;
});
return array;
};
that.flush = function() {
z.inflateEnd();
};
}
// 'zip' may not be defined in z-worker and some tests
var env = global.zip || global;
env.Inflater = env._jzlib_Inflater = Inflater;
})(this);
// -------- FourCC.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var FourCC, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Maths");
FourCC = (function() {
var _i2s, _s2i;
//-----------
class FourCC {
//-----------
constructor() {
throw "FourCC cannot be instantiated.";
}
//----------
// No "Instance" members.
// All members are "Static".
//   4cc String (ASCII characters) -> 4cc integer (little-endian).
//   If necessary, the string is padded with NUL characters; any
//   characters beyond the 4th are ignored.
static fourCCInt(str4) {
var cc0, cc1, cc2, cc3, has4, s;
//---------
has4 = 4 <= str4.length;
s = has4 ? str4 : str4 + String.fromCharCode(0, 0, 0, 0);
cc0 = s.charCodeAt(0) & 0xFF;
cc1 = s.charCodeAt(1) & 0xFF;
cc2 = s.charCodeAt(2) & 0xFF;
cc3 = s.charCodeAt(3) & 0xFF;
return (((((cc3 << 8) | cc2) << 8) | cc1) << 8) | cc0;
}
//   4cc integer -> 4cc String (ASCII characters, little-endian).
//   The presence of trailing NUL characters reduces the string
//   length by the number of such characters.  So the string
//   length is in the range 0 to 4 inclusive.
static fourCCStr(id4cc) {
var cc0, cc1, cc2, cc3, chs, chvec, i;
//---------
chs = id4cc;
cc0 = chs & 0xFF;
chs >>= 8;
cc1 = chs & 0xFF;
chs >>= 8;
cc2 = chs & 0xFF;
chs >>= 8;
cc3 = chs & 0xFF;
if (cc3 !== 0) {
return String.fromCharCode(cc0, cc1, cc2, cc3);
} else {
// Uncommon case, so there''s a low premium on speed,
// efficiency, or even on elegance.
// Retain all characters before the first NUL.
chvec = [cc0, cc1, cc2, cc3];
i = 0;
while (chvec[i]) {
++i;
}
return String.fromCharCode(...chvec.slice(0, i));
}
}
//   Returns an array of 4cc integers corresponding to the given
//   array of 4cc strings.
static fourCCStrsToInts(fccss) {
return fccss.map(_s2i);
}
//----------------
//   Returns an array of 4cc strings corresponding to the given
//   array of 4cc integers.
static fourCCIntsToStrs(fccis) {
return fccis.map(_i2s);
}
//---------------
//   4cc integer to string conversion, the result being padded with
//   spaces if necessary, ensuring that the result length is 4.
static fourCCStrPadded(id4cc) {
var s;
//---------------
s = this.fourCCStr(id4cc);
while (s.length !== 4) {
s += " ";
}
return s;
}
};
//   _s2i, _i2s are private helper functions.
_s2i = function(fccs, ix, vec) {
return FourCC.fourCCInt(fccs);
};
_i2s = function(fcci, ix, vec) {
return FourCC.fourCCStr(fcci);
};
return FourCC;
}).call(this);
// Export
cwaenv.add(FourCC, "FourCC");
// (End FourCC.coffee)
}).call(this);
// -------- pretty-data-fix.js --------
/**
* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.
*  
* Version - 0.40.0
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/pretty-data/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*	pd.xml(data ) - pretty print XML;
*	pd.json(data) - pretty print JSON;
*	pd.css(data ) - pretty print CSS;
*	pd.sql(data)  - pretty print SQL;
*
*	pd.xmlmin(data [, preserveComments] ) - minify XML; 
*	pd.jsonmin(data)                      - minify JSON; 
*	pd.cssmin(data [, preserveComments] ) - minify CSS; 
*	pd.sqlmin(data)                       - minify SQL; 
*
* PARAMETERS:
*
*	@data  			- String; XML, JSON, CSS or SQL text to beautify;
* 	@preserveComments	- Bool (optional, used in minxml and mincss only); 
*				  Set this flag to true to prevent removing comments from @text; 
*	@Return 		- String;
*	
* USAGE:
*	
*	var pd  = require('pretty-data').pd;
*
*	var xml_pp   = pd.xml(xml_text);
*	var xml_min  = pd.xmlmin(xml_text [,true]);
*	var json_pp  = pd.json(json_text);
*	var json_min = pd.jsonmin(json_text);
*	var css_pp   = pd.css(css_text);
*	var css_min  = pd.cssmin(css_text [, true]);
*	var sql_pp   = pd.sql(sql_text);
*	var sql_min  = pd.sqlmin(sql_text);
*
* TEST:
*	comp-name:pretty-data$ node ./test/test_xml
*	comp-name:pretty-data$ node ./test/test_json
*	comp-name:pretty-data$ node ./test/test_css
*	comp-name:pretty-data$ node ./test/test_sql
*/
function pp() {
this.shift = ['\n']; // array of shifts
this.step = '  '; // 2 spaces
var maxdeep = 100, // nesting level
ix = 0;
// initialize array with shifts //
for(ix=0;ix<maxdeep;ix++){
this.shift.push(this.shift[ix]+this.step); 
}
};	
// ----------------------- XML section ----------------------------------------------------
pp.prototype.xml = function(text, preserveComments) {
var strg = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
var ar = strg.replace(/>\s{0,}</g,"><")
.replace(/</g,"~::~<")
.replace(/xmlns\:/g,"~::~xmlns:")
.replace(/xmlns\=/g,"~::~xmlns=")
.split('~::~'),
len = ar.length,
inComment = false,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
// start comment or <![CDATA[...]]> or <!DOCTYPE //
if(ar[ix].search(/<!/) > -1) { 
str += this.shift[deep]+ar[ix];
inComment = true; 
// end comment  or <![CDATA[...]]> //
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
inComment = false; 
}
} else 
// end comment  or <![CDATA[...]]> //    find --> or ]>
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
str += ar[ix];
inComment = false; 
} else 
// <elm></elm> //    find prev <tag and this <\tag    but now not prev \>
if( ar[ix-1] != null && ar[ix-1].search(/\/>/) == -1 && /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
// Omits indentation
// str += ar[ix];
// No longer omits indentation: For compatibility with Java PP routine
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
// if(!inComment) deep--;
} else
// <elm> //
//    find <tag but not </ or />
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
str = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];
} else 
// <elm>...</elm> //    find <tag and </    not sure how both can be on one line
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// </elm> //    find </
if(ar[ix].search(/<\//) > -1) { 
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
} else 
// <elm/> //    find />
if(ar[ix].search(/\/>/) > -1 ) { 
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// <? xml ... ?> //
if(ar[ix].search(/<\?/) > -1) { 
str += this.shift[deep]+ar[ix];
} else 
// xmlns //
if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
str += this.shift[deep]+ar[ix];
} 
else {
str += ar[ix];
}
}
return  (str[0] == '\n') ? str.slice(1) : str;
}
// ----------------------- JSON section ----------------------------------------------------
pp.prototype.json = function(text) {
if ( typeof text === "string" ) {
return JSON.stringify(JSON.parse(text), null, this.step);
}
if ( typeof text === "object" ) {
return JSON.stringify(text, null, this.step);
}
return null;
}
// ----------------------- CSS section ----------------------------------------------------
pp.prototype.css = function(text) {
var ar = text.replace(/\s{1,}/g,' ')
.replace(/\{/g,"{~::~")
.replace(/\}/g,"~::~}~::~")
.replace(/\;/g,";~::~")
.replace(/\/\*/g,"~::~/*")
.replace(/\*\//g,"*/~::~")
.replace(/~::~\s{0,}~::~/g,"~::~")
.split('~::~'),
len = ar.length,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if( /\{/.exec(ar[ix]))  { 
str += this.shift[deep++]+ar[ix];
} else 
if( /\}/.exec(ar[ix]))  { 
str += this.shift[--deep]+ar[ix];
} else
if( /\*\\/.exec(ar[ix]))  { 
str += this.shift[deep]+ar[ix];
}
else {
str += this.shift[deep]+ar[ix];
}
}
return str.replace(/^\n{1,}/,'');
}
// ----------------------- SQL section ----------------------------------------------------
function isSubquery(str, parenthesisLevel) {
return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}
function split_sql(str, tab) {
return str.replace(/\s{1,}/g," ")
.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
.replace(/ CASE /ig,"~::~"+tab+"CASE ")
.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
.replace(/ END /ig,"~::~"+tab+"END ")
.replace(/ FROM /ig,"~::~FROM ")
.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
.replace(/ HAVING /ig,"~::~HAVING ")
//.replace(/ IN /ig,"~::~"+tab+"IN ")
.replace(/ IN /ig," IN ")
.replace(/ JOIN /ig,"~::~JOIN ")
.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
.replace(/ ON /ig,"~::~"+tab+"ON ")
.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
.replace(/ OVER /ig,"~::~"+tab+"OVER ")
.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
.replace(/ THEN /ig," THEN~::~"+tab+"")
.replace(/ UNION /ig,"~::~UNION~::~")
.replace(/ USING /ig,"~::~USING ")
.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
.replace(/ WHERE /ig,"~::~WHERE ")
.replace(/ WITH /ig,"~::~WITH ")
//.replace(/\,\s{0,}\(/ig,",~::~( ")
//.replace(/\,/ig,",~::~"+tab+tab+"")
.replace(/ ALL /ig," ALL ")
.replace(/ AS /ig," AS ")
.replace(/ ASC /ig," ASC ") 
.replace(/ DESC /ig," DESC ") 
.replace(/ DISTINCT /ig," DISTINCT ")
.replace(/ EXISTS /ig," EXISTS ")
.replace(/ NOT /ig," NOT ")
.replace(/ NULL /ig," NULL ")
.replace(/ LIKE /ig," LIKE ")
.replace(/\s{0,}SELECT /ig,"SELECT ")
.replace(/~::~{1,}/g,"~::~")
.split('~::~');
}
pp.prototype.sql = function(text) {
var ar_by_quote = text.replace(/\s{1,}/g," ")
.replace(/\'/ig,"~::~\'")
.split('~::~'),
len = ar_by_quote.length,
ar = [],
deep = 0,
tab = this.step,//+this.step,
inComment = true,
inQuote = false,
parenthesisLevel = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if(ix%2) {
ar = ar.concat(ar_by_quote[ix]);
} else {
ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
}
}
len = ar.length;
for(ix=0;ix<len;ix++) {
parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);
if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
} 
if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
deep++;
str += this.shift[deep]+ar[ix];
} else 
if( /\'/.exec(ar[ix]) )  { 
if(parenthesisLevel<1 && deep) {
deep--;
}
str += ar[ix];
}
else  { 
str += this.shift[deep]+ar[ix];
if(parenthesisLevel<1 && deep) {
deep--;
}
} 
}
str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
return str;
}
// ----------------------- min section ----------------------------------------------------
pp.prototype.xmlmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
return  str.replace(/>\s{0,}</g,"><"); 
}
pp.prototype.jsonmin = function(text) {
return  text.replace(/\s{0,}\{\s{0,}/g,"{")
.replace(/\s{0,}\[$/g,"[")
.replace(/\[\s{0,}/g,"[")
.replace(/:\s{0,}\[/g,':[')
.replace(/\s{0,}\}\s{0,}/g,"}")
.replace(/\s{0,}\]\s{0,}/g,"]")
.replace(/\"\s{0,}\,/g,'",')
.replace(/\,\s{0,}\"/g,',"')
.replace(/\"\s{0,}:/g,'":')
.replace(/:\s{0,}\"/g,':"')
.replace(/:\s{0,}\[/g,':[')
.replace(/\,\s{0,}\[/g,',[')
.replace(/\,\s{2,}/g,', ')
.replace(/\]\s{0,},\s{0,}\[/g,'],[');   
}
pp.prototype.cssmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;
return str.replace(/\s{1,}/g,' ')
.replace(/\{\s{1,}/g,"{")
.replace(/\}\s{1,}/g,"}")
.replace(/\;\s{1,}/g,";")
.replace(/\/\*\s{1,}/g,"/*")
.replace(/\*\/\s{1,}/g,"*/");
}	
pp.prototype.sqlmin = function(text) {
return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}
// --------------------------------------------------------------------------------------------
// this.Pretty = new pp;	
this.getCWAEnv().add(new pp, "Pretty");
// -------- Access.XHR.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Access.XHR.coffee
//   Data transfers using XHR
var Access, DOMParse, Env, Logger, Pretty, XMLSerialize, cwaenv, document, lggr;
cwaenv = this.getCWAEnv();
document = this.document;
XMLSerialize = new XMLSerializer();
DOMParse = new DOMParser();
Env = cwaenv.get("CWAEnv");
Pretty = cwaenv.get("Pretty");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
Access = class Access {
// Static
// Convert XML text to DOM
static toDOM(theXML, errCB = null) {
var doc, errMsg, i, justText, len, pErr, pErrs;
// Strip XML tags (from error report)
justText = function(el) {
var i, len, nd, ref, res;
res = "";
ref = el.childNodes;
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
if (nd.nodeType === Node.ELEMENT_NODE) {
res += Access._justText(nd);
} else if (nd.nodeType === Node.TEXT_NODE) {
res += nd.nodeValue;
}
}
return res;
};
doc = DOMParse.parseFromString(theXML, "text/xml");
pErrs = doc.getElementsByTagName("parsererror");
if (pErrs.length > 0) {
errMsg = "";
for (i = 0, len = pErrs.length; i < len; i++) {
pErr = pErrs[i];
errMsg += justText(pErr);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Access.XHR: ${errMsg}`);
}
if (errCB) {
errCB("error", errMsg);
}
return null;
} else {
return doc;
}
}
};
// Export
cwaenv.add(Access, "Access");
cwaenv.add(XMLSerialize, "XMLSerialize");
cwaenv.add(Node, "Node");
// (End Access.XHR.coffee)
}).call(this);
// -------- Data.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Data.coffee
// Common data access and manipulation routines building on Access class
// JRWG Plan to add a cache (with clear routine to recover space)
var Access, Data, Env, Logger, Pretty, XMLSerialize, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Env = cwaenv.get("CWAEnv"); // Just while integrating Node
Access = cwaenv.get("Access");
Pretty = cwaenv.get("Pretty");
XMLSerialize = cwaenv.get("XMLSerialize");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
Data = (function() {
var ref;
class Data {
// Construct return value
static result(val, errCount, errText, partVal) {
return {
value: val,
errCount: errCount,
errText: errText,
partVal: partVal
};
}
// Parse to JSON safely
static parseJSON(jstr) {
if (typeof lggr.trace === "function") {
lggr.trace(`JSON.parse for \"${jstr.substring(0, 100)}\"`);
}
if ((jstr != null) && jstr.length > 0) {
return JSON.parse(jstr);
} else {
lggr.warn(`JSON.parse failed for \"${jstr}\"`);
return null;
}
}
// Chain callbacks
static tee(cbA, cbB) {
return () => {
cbA();
return cbB();
};
}
// ---------- Pretty Print routines -------------- #
// Pretty.json expects string or object and calls JSON.stringify and JSON.parse
// Pretty.jsonmin expects string and performs string replacements
// Might later create recoevrable representation for circular objects
// Parse string to JSON object as necessary
static obJSON(theJSON) {
var err;
if (typeof theJSON === 'string') {
try {
return JSON.parse(theJSON);
} catch (error) {
err = error;
if (typeof lggr.debug === "function") {
lggr.debug(`obJSON: Cannot parse \'${theJSON}\'`);
}
return theJSON;
}
} else {
return theJSON;
}
}
// Stringify JSON and Pretty Print object or text handling cycles
static ppJSON(obj, step = 2) {
var cache, chk, cyclic, str;
cache = [];
cyclic = false;
chk = (key, value) => {
if ((typeof value === 'object') && (value !== null)) {
if (cache.includes(value)) {
value = '[*]';
cyclic = true;
} else {
cache.push(value);
}
}
return value;
};
str = JSON.stringify(Data.obJSON(obj), chk, step);
cache = null;
if (cyclic) {
if (typeof lggr.trace === "function") {
lggr.trace(`txJSON: Cyclic \'${str}\'`);
}
}
return str;
}
// Minimal JSON object or text 
static mnJSON(theJSON) {
return Pretty.jsonmin(Data.ppJSON(theJSON, 0));
}
// Pretty Print XML text
static ppXML(theXML, pres = true) {
return Pretty.xml(theXML, pres);
}
// Minimal XML from XML text
static mnXML(theXML, pres = false) {
return Pretty.xmlmin(theXML, pres);
}
// Pretty Print XML from DOM
static ppDOM(theDOM, pres = true) {
return Pretty.xml(XMLSerialize.serializeToString(theDOM), pres);
}
// Minimal XML from DOM
static mnDOM(theDOM, pres = false) {
return Pretty.xmlmin(XMLSerialize.serializeToString(theDOM), pres);
}
// ---------- URI normalisation routines --------- #
// Splits a URI into components
// JRWG Could use the built in URI package
static splitURI(uri) {
var matches, pattern;
// lggr.trace? "Splitting #{uri}"
pattern = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
matches = uri.match(pattern);
return {
scheme: matches[2],
authority: matches[4],
path: matches[5],
query: matches[7],
fragment: matches[9]
};
}
// Rebuild absolute URI string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
// Omit scheme and authority if not given
static stringURI(uriobj) {
var res;
res = uriobj.path;
if (uriobj != null ? uriobj.authority : void 0) {
res = "//" + uriobj.authority + res;
}
if (uriobj != null ? uriobj.scheme : void 0) {
res = uriobj.scheme + ":" + res;
}
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
// Rebuild URI path string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
static stringURIPath(uriobj) {
var res;
res = uriobj.path;
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
static absoluteSplitURI(uri, base) {
var basedir, baseobj, ref, uriobj;
uriobj = Data.splitURI(uri);
baseobj = Data.splitURI(base);
basedir = baseobj.path.substr(0, (baseobj.path.lastIndexOf("/")) + 1);
return {
scheme: uriobj.scheme || baseobj.scheme,
authority: uriobj.authority || baseobj.authority,
path: ((ref = uriobj.path) != null ? ref.charAt(0) : void 0) === "/" ? uriobj.path : basedir + uriobj.path,
query: uriobj.query || baseobj.query,
fragment: uriobj.fragment || baseobj.fragment
};
}
static absoluteURI(uri, base) {
if (typeof lggr.trace === "function") {
lggr.trace(`uri = ${uri} = ${JSON.stringify(Data.splitURI(uri))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`base = ${base} = ${JSON.stringify(Data.splitURI(base))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`res = ${Data.stringURI(Data.absoluteSplitURI(uri, base))} ${JSON.stringify(Data.absoluteSplitURI(uri, base))}`);
}
return Data.stringURI(Data.absoluteSplitURI(uri, base));
}
static asDir(uri) {
if (uri.endsWith("/")) {
return uri;
} else {
return uri + "/";
}
}
// Tests whether the given URL is a "data:" URL
static isDataURL(url) {
if (url) {
return url.startsWith('data:');
} else {
return false;
}
}
// Tests whether the given URL is a "file:" URL or stdin
static isFileURL(theURI) {
return (theURI.startsWith('file:')) || (theURI === '-');
}
// Use Fetch API. Handles POST forms
static fetchBase(theURI, form = null) {
var parms;
parms = null;
if (form != null) {
parms = {
method: 'POST',
body: form
};
if (typeof lggr.debug === "function") {
lggr.debug(`fetchBase for ${theURI}: Processing form data`);
}
}
return fetch(theURI, parms).catch((err) => {
var newerr;
if (typeof lggr.debug === "function") {
lggr.debug(`fetchBase for ${theURI}: catch (${JSON.stringify(err)}). Type: ${typeof err}. Keys: ${Object.keys(err)}`);
}
newerr = {
errNum: Logger.errNum('EINVAL'),
errMsg: 'Invalid request',
errRef: theURI
};
if (typeof lggr.debug === "function") {
lggr.debug(`fetchBase for ${theURI}: throw ${JSON.stringify(newerr)}`);
}
throw newerr;
}).then((res) => {
var newerr;
if (typeof lggr.debug === "function") {
lggr.debug(`fetchBase for ${theURI}: status ${res.status} statusText ${res.statusText}`);
}
if (res.status !== 200) {
newerr = {
errMsg: res.statusText,
errRef: theURI
};
if (res.status === 403) {
// Includes blocked access to directories
newerr.errNum = Logger.errNum('EACCES');
} else if (res.status === 404) {
newerr.errNum = Logger.errNum('ENOENT');
} else {
newerr.errNum = Logger.errNum('UNKNOWN');
}
if (typeof lggr.debug === "function") {
lggr.debug(`fetchBase for ${theURI}: throw ${JSON.stringify(newerr)}`);
}
throw newerr;
}
// Promise which should return the data
// JRWG Need to handle (successful) access to directories
return res.text();
});
}
// Handle file URLs in Node
static fetchData(theURI, form) {
var base1;
if (form != null) {
Data._fetchCache[theURI] = null;
}
return (base1 = Data._fetchCache)[theURI] != null ? base1[theURI] : base1[theURI] = (Data.isFileURL(theURI) ? Data.fetchFile : Data.fetchBase)(theURI, form);
}
// Return a Promise for a fetched URI as Text
static fetchText(theURI, form) {
if (typeof lggr.debug === "function") {
lggr.debug(`fetchText for ${theURI}`);
}
return Data.fetchData(theURI, form).then(function(res) {
return (res.replace(/\r\n/g, '\n')).replace(/\r/g, '\n');
});
}
// Return a Promise for a fetched URI as JSON
static fetchJSON(theURI, form) {
if (typeof lggr.debug === "function") {
lggr.debug(`fetchJSON for ${theURI}`);
}
return Data.fetchData(theURI, form).then(function(res) {
var err;
try {
return JSON.parse(res);
} catch (error) {
err = error;
throw {
errNum: Logger.errNum('EPERM'),
errMsg: 'Invalid JSON text',
errRef: theURI,
errDoc: res
};
}
});
}
};
//---------
// Might need a constructor for some configuration uses
// "Static" members.
// ---------- Utility routines ------------------- #
// Linked to Access for now
Data.toDOM = Access.toDOM;
// ---------- Promise based Data fetching routines using fetch ------------- #
// On Node will use fs routines to read files
Data.fetchFile = (ref = Access.fetchFile) != null ? ref : Data.fetchBase;
Data._fetchCache = {};
return Data;
}).call(this);
// Export
cwaenv.add(Data, "Data");
// cwaenv.add Sync, "Sync"
// (End Data.coffee)
}).call(this);
// -------- AsyncQueue.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AsyncQueue, Logger, console, cwaenv, qlgr;
cwaenv = this.getCWAEnv();
console = this.console;
// Queue of Promises for Puts and Callbacks for Gets
// Promises are used so the gets may not be handled in sequence
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
qlgr = Logger.get("Queue"); //, "trace"
AsyncQueue = class AsyncQueue {
// Constructor for PromQueue
constructor(qName = "[anon]") {
this.qName = qName;
// Initially ready for a put or a get
this.putLoc = this.getLoc = {};
this.putLen = this.getLen = 0;
if (typeof qlgr.debug === "function") {
qlgr.debug(`${this.qName}: Queue created`);
}
}
// If there is a get waiting then satisfy it
// Otherwise, add value, or promise of value, to queue
put(val) {
var getFn, putLen, putPr;
putPr = Promise.resolve(val);
getFn = this.putLoc.getFn;
if (getFn != null) {
// There is a get we can match with and there should be a next in the chain
putLen = this.putLen;
if (typeof qlgr.trace === "function") {
qlgr.trace(`${this.qName}: Put ${putLen} matched`);
}
putPr.then(qlgr.debug != null ? ((val) => {
qlgr.debug(`${this.qName}: Put ${putLen} resolved`);
return getFn(val);
}) : getFn);
} else {
if (typeof qlgr.trace === "function") {
qlgr.trace(`${this.qName}: Put ${this.putLen} added`);
}
this.putLoc.putPr = putPr;
this.putLoc.next = {};
}
// Always step on to next location for a put
this.putLoc = this.putLoc.next;
return this.putLen++;
}
// If there is a put waiting then get the value
// Otrherwise, add callback function to queue
get(getFn) {
var getLen, putPr;
putPr = this.getLoc.putPr;
if (putPr != null) {
// There is put we can match with and there should be a next in the chain
getLen = this.getLen;
if (typeof qlgr.trace === "function") {
qlgr.trace(`${this.qName}: Get ${getLen} matched`);
}
putPr.then(qlgr.debug != null ? ((val) => {
qlgr.debug(`${this.qName}: Get ${getLen} resolved`);
return getFn(val);
}) : getFn);
} else {
if (typeof qlgr.trace === "function") {
qlgr.trace(`${this.qName}: Get ${this.getLen} added`);
}
this.getLoc.getFn = getFn;
this.getLoc.next = {};
}
// Always step on to next location for a get
this.getLoc = this.getLoc.next;
return this.getLen++;
}
};
cwaenv.add(AsyncQueue, "AsyncQueue");
// (End AsyncQueue.coffee)
}).call(this);
// -------- Config.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Config, Data, Logger, cwaenv, document, lggr, location, setTimeout, zip;
cwaenv = this.getCWAEnv();
document = this.document;
location = this.location;
zip = this.zip;
setTimeout = this.setTimeout;
Data = cwaenv.get("Data");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Config");
Config = (function() {
class Config {
// Apply defaults to missing configuration fields
// Needs special treatment for avSettings perhaps JRWG
static updateObj(theObj, defVals) {
var key, results, val;
results = [];
for (key in defVals) {
val = defVals[key];
if (typeof lggr.trace === "function") {
lggr.trace(`Key ${key} is ${val}. Object.hasOwnProperty is ${theObj.hasOwnProperty(key)}`);
}
if (!theObj.hasOwnProperty(key)) {
results.push(theObj[key] = val);
} else {
results.push(void 0);
}
}
return results;
}
// Apply defaults to missing configuration fields
static updateConfig(defVals) {
var cAv, cIx, conLen, dAv, dIx, defAvSettings, defLen, hadAvSettings, i, j, len, len1, ref, ref1, results;
//lggr.info? "Before @updateConfig:\n#{Data.ppJSON @theConfig}"
//lggr.info? "defVals:\n#{Data.ppJSON defVals}"
hadAvSettings = Config.theConfig.hasOwnProperty("avSettings");
defAvSettings = defVals.hasOwnProperty("avSettings");
// Ensure default avSettings are an array
if (defAvSettings && !(Array.isArray(defVals.avSettings))) {
defVals.avSettings = [defVals.avSettings];
}
// Will set avSettings if in defaults but not current config
Config.updateObj(Config.theConfig, defVals);
// Merge avSettings if required
if (hadAvSettings && defAvSettings) {
conLen = Config.theConfig.avSettings.length;
defLen = defVals.avSettings.length;
ref = Config.theConfig.avSettings;
// Merge existing settings
for (cIx = i = 0, len = ref.length; i < len; cIx = ++i) {
cAv = ref[cIx];
Config.updateObj(Config.theConfig.avSettings[cIx], defVals.avSettings[cIx % defLen]);
}
ref1 = defVals.avSettings;
// Add extra settings
results = [];
for (dIx = j = 0, len1 = ref1.length; j < len1; dIx = ++j) {
dAv = ref1[dIx];
if (dIx >= conLen) {
results.push(Config.theConfig.avSettings[dIx] = dAv);
} else {
results.push(void 0);
}
}
return results;
}
}
//lggr.info? "After @updateConfig:\n#{Data.ppJSON @theConfig}"
// Load theConfig from initial values and JSON configuration files at clientBase (if provided) and jasBase
static load(CB, path, initCfg) {
var clientURI, cwaConfigLoad, cwaConfigLoadDone;
if (typeof lggr.debug === "function") {
lggr.debug(`loadConfig called with ${path}`);
}
cwaConfigLoadDone = () => {
var base, defaultAv, defaults, i, key, len, ref, ref1, ref2, ref3, ref4;
if (typeof lggr.debug === "function") {
lggr.debug("cwaConfigLoadDone called");
}
// Default avatar panel settings: background set to null defaults to transparent
defaultAv = {
width: 384,
height: 320,
avList: "avs",
initAv: "anna",
background: null,
initCamera: [0, 0.23, 3.24, 5, 18, 30, -1, -1],
initSpeed: 0,
rateSpeed: 5,
allowFrameSteps: true,
initSiGMLURL: "iTakeMug.sigml",
allowSiGMLText: true
};
// Final config settings: The jasBase and cwaBase will be set already
defaults = {
jasVersionTag: (ref = typeof CWASA !== "undefined" && CWASA !== null ? CWASA.version : void 0) != null ? ref : "loc2025",
sigmlBase: "sigml",
avJARBase: "avatars",
avJSONBase: "avjson",
useAvatarJARs: true,
animgenFPS: 30,
avs: ["anna", "marc", "francoise"],
avSettings: [defaultAv],
ambMode: "full",
ambIdle: true,
ambSign: false
};
this.updateConfig(defaults);
if ((base = this.theConfig).avBase == null) {
base.avBase = this.theConfig.useAvatarJARs ? this.theConfig.avJARBase : this.theConfig.avJSONBase;
}
ref1 = ["sigmlBase", "avJARBase", "avJSONBase", "avBase"];
// Ensure valid directory bases
for (i = 0, len = ref1.length; i < len; i++) {
key = ref1[i];
if (typeof lggr.trace === "function") {
lggr.trace(`Old ${key}: ${this.theConfig[key]}`);
}
this.theConfig[key] = Data.absoluteURI(Data.asDir(this.theConfig[key]), this.theConfig.jasBase);
if (typeof lggr.trace === "function") {
lggr.trace(`New ${key}: ${this.theConfig[key]}`);
}
}
// Handle avatar panel setting: JRWG redundant now
if (!(Array.isArray(this.theConfig.avSettings))) {
this.theConfig.avSettings = [this.theConfig.avSettings];
}
// Inherit general ambMode and ambient choices
this.updateObj(defaultAv, {
ambMode: this.theConfig.ambMode,
ambIdle: this.theConfig.ambIdle,
ambSign: this.theConfig.ambSign
});
this.updateConfig({
avSettings: defaultAv
});
// After adding defaults
this._fixReferences();
// No longer using Workers
zip.useWebWorkers = false;
// Initial Animgen processor: Default is "Client"
if ((ref2 = this.theConfig) != null ? (ref3 = ref2.animgenServer) != null ? ref3.startsWith("stoca:") : void 0 : void 0) {
this.theConfig.animgenProc = "Applet";
} else if (((ref4 = this.theConfig) != null ? ref4.animgenServer : void 0) != null) {
this.theConfig.animgenProc = "Server";
}
if (typeof lggr.debug === "function") {
lggr.debug(`Final Config: ${Data.ppJSON(this.theConfig)}`);
}
return CB();
};
cwaConfigLoad = () => {
var cwaURI;
if (typeof lggr.debug === "function") {
lggr.debug("cwaConfigLoad called");
}
// Provide defaults for jasBase and cwaBase if needed
if (this.theConfig.jasBase == null) {
if (typeof lggr.info === "function") {
lggr.info("Installation base \"http://localhost/jas/loc2025/\" used for jasBase");
}
}
this.theConfig.jasBase = Data.asDir(this.theConfig.jasBase || "http://localhost/jas/loc2025/");
this.theConfig.cwaBase = Data.absoluteURI(Data.asDir(this.theConfig.cwaBase || "cwa"), this.theConfig.jasBase);
// Load cwacfg by default
this.updateConfig({
useCwaConfig: true
});
if (this.theConfig.useCwaConfig) {
cwaURI = Data.absoluteURI(Config._INSTALL_CFG, this.theConfig.cwaBase);
return this._loadJSON(cwaConfigLoadDone, cwaURI);
} else {
return cwaConfigLoadDone();
}
};
// Apply any initial configuration
if (initCfg != null) {
this.updateConfig(initCfg);
}
// If there is an initial configuration, suppress clientcfg unless explicitly enabled
this.updateConfig({
useClientConfig: initCfg == null
});
if (typeof lggr.trace === "function") {
lggr.trace(`Initial Config:\n${Data.ppJSON(this.theConfig)}`);
}
if (this.theConfig.useClientConfig) {
clientURI = Data.absoluteURI(path, this.theConfig.clientBase);
this._loadJSON(cwaConfigLoad, clientURI);
} else {
cwaConfigLoad();
}
// Return config though will not be completed yet
return this.theConfig;
}
// Load a JSON config file and merge with main config
static _loadJSON(CB, uri) {
if (typeof lggr.debug === "function") {
lggr.debug(`loadJSON called for ${uri}`);
}
return Data.fetchJSON(uri).then((json) => {
if (typeof lggr.trace === "function") {
lggr.trace(`loadJSON for ${uri} returns:\n${Data.ppJSON(json)}`);
}
this.updateConfig(json);
return CB();
}).catch((err) => {
lggr.warn(`For \"${uri}\": Error ${Data.mnJSON(err)}`);
// Try to continue
return CB();
});
}
static _fixReferences() {
var allavs, i, len, newall, ref, stg, theAvList;
if (typeof lggr.trace === "function") {
lggr.trace(`Config for fixReferences:\n${Data.ppJSON(this.theConfig)}`);
}
// Build list of all avatars mentioned
allavs = this.theConfig.allavs || [];
ref = this.theConfig.avSettings;
// Allow the use of named avatar lists in avatar panel settings.
for (i = 0, len = ref.length; i < len; i++) {
stg = ref[i];
if (!(typeof stg.avList === "string")) {
continue;
}
// stg.avList is the key of the entry containing the actual
// List of avatars (i.e. of avatar names).
theAvList = stg.avList;
stg.avList = this.theConfig[theAvList];
// Catch missing avtar list
if (!stg.avList) {
lggr.warn(`Found no avatar list named \"${theAvList}\"`);
stg.avList = [];
}
if ((stg.avList.indexOf(stg.initAv)) < 0) {
// Ensure initial avatar is present
stg.avList.push(stg.initAv);
}
newall = allavs.concat(stg.avList.filter((function(itm) {
return (allavs.indexOf(itm)) < 0;
})));
allavs = newall;
}
this.theConfig.allavs = allavs;
return typeof lggr.info === "function" ? lggr.info(`List of all avatars for SToCA: ${allavs}`) : void 0;
}
static getAvBase(av) {
var b;
b = Data.asDir(this.theConfig.avBase);
if (this.theConfig.useAvatarJARs) {
return this.theConfig.avBase;
} else {
return `${this.theConfig.avBase}${av}/`;
}
}
};
//   Config is a singleton class.  Static variable theConfig holds
//   the config parameters for the current CWA client HTML page.
//   Typically, this will be created by merging the installation
//   config settings into the client specific settings.
//   "Static"
//   Path for the CWA installation's config settings.
Config._INSTALL_CFG = "cwacfg.json";
//   Accumulated config information
//   Initialize with reliable values from the start
Config.theConfig = {
clientBase: Data.absoluteURI("", location.toString()),
animgenProc: "Client"
};
return Config;
}).call(this);
// Export
cwaenv.add(Config, "Config");
// (end)
}).call(this);
// -------- SToCAObj.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Config, Env, Logger, SToCAObj, alert, cwaenv, document, lggr, navigator, setTimeout, status, theSToCA;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
navigator = this.navigator;
status = this.status;
alert = this.alert;
Env = cwaenv.get("CWAEnv");
Config = cwaenv.get("Config");
Logger = cwaenv.get("Logger");
lggr = Logger.get("AvatarGUI");
//-------------
SToCAObj = class SToCAObj {
//-------------
//   NB This class is a singleton.  Its one instance, theSToCA, is
//   created as soon as this class is loaded (see the end of this
//   source file) and thus _before_ the SToC applet for which it acts
//   as a wrapper has been created and initialised.  The necessary
//   binding of wrapper to applet is established, possibly
//   asynchronously, through the wrapper's initialise() method.
constructor() {
var ref;
this.stat = this.stat.bind(this);
//----------
this.RETURN_CHAR = 13;
this.sLimit = 0;
this.fLimit = 0;
this.sign = -1;
this.gloss = "";
this.signMsg = "";
this.curAvatar = "anna";
this.curFPS = (ref = Config.theConfig.animgenFPS) != null ? ref : 25; // Should use configuration parameter to match applet's "animgen.fps" <param> value
this.stocCB = {};
this.stocStatus = "loading"; // or "live" or "dead"
this.stocApplet = null;
}
stat(msg) {
return Logger.callHook("status", msg);
}
// ASSUME: this.appletLoadIsStable();
findSToCA() {
var ref;
return (ref = document.getElementsByClassName("stocApplet")) != null ? ref[0] : void 0;
}
//--------
appletLoadIsStable() {
var appini, applet;
//-----------------
// In the days when the required applet was a subapplet of the JNLP Applet Launcher,
// this was a tricky test. Now it's more straightforward.
// Applet support is declining so various earlier tests no longer apply.
applet = this.findSToCA();
appini = applet != null ? applet.init : void 0;
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: appletLoadIsStable: applet=${typeof applet} applet.init=${typeof (applet != null ? applet.init : void 0)}`);
}
return ((typeof applet) !== "undefined") && ((typeof applet.init) !== "undefined");
}
setSToCA(stoca, source) {
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: setSToCA() source: ${source}`);
}
this.stocApplet = stoca;
return this.stocStatus = "live";
}
//----  HTML start/finish handlers  ----
initialise() {
//---------
// Environment tags should have been set in CWAEnv
this.synchronousInit();
if (Env.hasJava) {
// Test for Java should be sufficient
this.initSToCApplet();
}
return void 0;
}
synchronousInit() {
//--------------
return this.resetSToCAData();
}
// @stat "SToCA: HTML synchronous initialisation done"
initSToCApplet() {
//-------------
if (this.appletLoadIsStable()) {
return this.setSToCA(this.findSToCA(), "initSToCApplet()");
} else {
return this.asynchGetSToCA();
}
}
asynchGetSToCA() {
var done, fail, stoca, tryFindSToCA;
//-------------
stoca = void 0;
tryFindSToCA = () => {
if (this.appletLoadIsStable()) {
stoca = this.findSToCA();
return this.setSToCA(stoca, "asynchGetSToCA()");
}
};
done = () => {
return Boolean(stoca);
};
fail = () => {
return this.stocStatus = "dead";
};
// Repeat every 200ms for 30s
return this.asynchRepeat(tryFindSToCA, done, fail, "asynchGetSToCA(): ", 200, 30000);
}
terminate() {
var stoca;
//--------
// do (do @getSToCA)?.terminate
stoca = this.getSToCA();
if (stoca != null) {
stoca.terminate();
}
return this.stat("SToCA: SiGML-to-CAS Applet terminated");
}
//----  SiGML Player (Sub)Applet Access  ----
getSToCA() {
var abt;
//-------
if (this.stocStatus === "loading") {
if (typeof lggr.debug === "function") {
lggr.debug("SToCAObj: Late attempt to find SToCA ...");
}
if (this.appletLoadIsStable()) {
this.setSToCA(this.findSToCA(), "getSToCA()");
} else {
// In practice, we will probably never reach this point:
// if things go awry with Chrome/Mac OS X, it is likely to
// be because the appletLoadIsStable() call hangs up.
lggr.warn("SToCAObj: getSToCA(): catastrophe -- cannot get SToCA!.");
}
}
// Test again and check
if (this.stocStatus === "live") {
try {
// Liveness test
abt = this.stocApplet.about();
if (typeof lggr.trace === "function") {
lggr.trace(`SToCAObj: Called SToCA.about returns \"${abt}\"`);
}
} catch (error) {
if (typeof lggr.trace === "function") {
lggr.trace("SToCAObj: Failed SToCA.about");
}
this.stocStatus = "dead";
this.stocApplet = null;
}
}
return this.stocApplet;
}
statusIs(targ) {
//--------
// Check for liveness
this.getSToCA();
return this.stocStatus === targ;
}
//----  Utility methods  ----
//   Asynchronously makes repeated calls, one every ms, to the body
//   function until the ok function succeeds, i.e. returns a true result.
//   On completion, if tag is defined then concludes by logging the tag
//   and repetition count.
asynchRepeat(body, ok, fail, tag, delay, maxdelay) {
var closedARFun, n;
//-----------
n = 0;
closedARFun = function() {
body();
if (ok()) {
if (tag) {
return typeof lggr.trace === "function" ? lggr.trace(`SToCAObj: ${tag} completed delay=${n}`) : void 0;
}
} else {
n += delay;
if (n < maxdelay) {
return setTimeout(closedARFun, delay);
} else {
if (typeof lggr.trace === "function") {
lggr.trace(`SToCAObj: ${tag} abandoned delay=${n}`);
}
return fail();
}
}
};
return closedARFun();
}
resetSignData() {
//------------
this.sLimit = this.fLimit = 0;
this.sign = -1;
this.gloss = "";
return this.signMsg = "";
}
resetSToCAData() {
//-------------
this.resetSignData();
this.curAvatar = "anna";
return this.curFPS = Config.theConfig.animgenFPS;
}
htmlEls(elid) {
return document.getElementsByClassName(elid);
}
//-----
//----  SiGML-Player-Applet event/callout handlers  ----
framesGenEH(ekind, nf, ns) {
var ekinds, msg, prevFLimit;
//----------
// The events handled here:
//   LOAD_FRAMES_START
//   LOADED_NEXT_SIGN
//   LOAD_FRAMES_DONE_OK
//   LOAD_FRAMES_DONE_BAD
msg = "No frames generated from URL.";
ekinds = String(ekind);
prevFLimit = -1;
//---- LOAD_FRAMES_START ----
if (ekinds === "LOAD_FRAMES_START") {
this.resetSignData();
msg = "Loading of frames has started.";
//---- LOADED_NEXT_SIGN ----
} else if (ekinds === "LOADED_NEXT_SIGN") {
prevFLimit = this.fLimit;
this.fLimit = nf;
this.sLimit = ns;
if (prevFLimit === 0 && this.fLimit !== 0) {
// For this animation these are the
// first frames that we know of.
this.setButtonsForPlaying();
msg = `${ns} sign(s) now ready to play.`;
}
//---- LOAD_FRAMES_DONE_OK ----
} else if (ekinds === "LOAD_FRAMES_DONE_OK") {
prevFLimit = this.fLimit;
this.fLimit = nf;
this.sLimit = ns;
if (this.fLimit === 0) {
// Load failed to generate any frames.
this.setButtonsForIdling(); // And use default message.
} else if (prevFLimit === 0) {
// Now there are frames, and they''re the first we know of.
msg = "Ready to play.";
} else {
// We are already playing frames from streamed load.
msg = `All frames loaded: ${this.sLimit} signs, ${this.fLimit} frames.`;
}
//---- LOAD_FRAMES_DONE_BAD ----
} else if (ekinds === "LOAD_FRAMES_DONE_BAD") {
} else {
// There are no frames -- use default message.
//---- (chaos) ----
msg = `unknown frames-gen event: ${ekind}.`;
alert(msg);
}
// If animation is in progress, or is about to be so, then this
// message will be swamped, but there should be no harm in trying.
return this.stat(msg);
}
//----  HTML button/input handlers  ----
setAvatar(av) {
return this.curAvatar = String(av);
}
//--------
setFPS(fps) {
return this.curFPS = String(fps);
}
//-----
doSiGMLTextToCAS(rqstid, stxt, av, casfmt, cascb) {
var SToCA, checkLive;
//---------------
if (SToCA = this.getSToCA()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: typeof SToCA=\"${typeof SToCA}\"`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: typeof SToCA.doSiGMLTextToCAS=\"${typeof SToCA.doSiGMLTextToCAS}\"`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: SToCA.doSiGMLTextToCAS?=\"${SToCA.doSiGMLTextToCAS != null}\"`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: 'doSiGMLTextToCAS' of SToCA=\"${'doSiGMLTextToCAS' in SToCA}\"`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: SToCA keys=\"${Object.keys(SToCA)}\"`);
}
// Asynchronous request: result is returned via returnCAS() below.
this.stocCB[rqstid] = cascb;
if (typeof lggr.info === "function") {
lggr.info("SToCAObj: Calling SToCA.doSiGMLTextToCAS");
}
try {
// May still not be able to call method
SToCA.doSiGMLTextToCAS(rqstid, stxt, av, casfmt);
if (typeof lggr.info === "function") {
lggr.info("SToCAObj: Called  SToCA.doSiGMLTextToCAS");
}
checkLive = () => {
//log "Checking alive for #{rqstid}"
if (this.stocCB[rqstid]) {
// Potentially alive
if (this.statusIs("dead")) {
if (typeof lggr.warn === "function") {
lggr.warn(`SToCAObj: Applet died for ${rqstid}`);
}
// Force end of sequence
return cascb("{}");
} else {
return setTimeout(checkLive, 500);
}
} else {
return typeof lggr.debug === "function" ? lggr.debug(`SToCAObj: Sequence ended normally for ${rqstid}`) : void 0;
}
};
setTimeout(checkLive, 500);
return true;
} catch (error) {
if (typeof lggr.info === "function") {
lggr.info("SToCAObj: Failed  SToCA.doSiGMLTextToCAS");
}
// Cancel request
SToCA.setDoneSiGMLToCASRequest(rqstid);
return false;
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug("SToCAObj: Cannot  SToCA.doSiGMLTextToCAS");
}
return false;
}
}
returnCAS(rqstid, cas) {
var cascb, err;
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj:  SToCA returnCAS ${rqstid}`);
}
cascb = this.stocCB[rqstid];
if (!cascb) {
if (typeof lggr.debug === "function") {
lggr.debug(`SToCAObj: SToCA.returnCAS(), id=${rqstid}: call-back is missing.`);
}
} else {
try {
// Make sure that an exception on the browser/JS side does
// not get back to the applet/Java side.
cascb(cas);
} catch (error) {
err = error;
lggr.warn("SToCAObj: " + (err.stack || err.stacktrace || err));
}
}
// 2012-03
// Now this method may be invoked several times per request -- because
// the CAS data is returned as a stream of chunks.  So now we rely on
// an explicit request from the client -- setDoneSiGMLToCASRequest(),
// below -- to delete the stored callback.
//delete @stocCB[rqstid]
return void 0;
}
setDoneSiGMLToCASRequest(rqstid) {
//-----------------------
if (this.stocCB[rqstid]) {
return delete this.stocCB[rqstid];
} else {
return typeof lggr.debug === "function" ? lggr.debug(`SToCAObj: SToCA.setDoneSiGMLToCASRequest(), id ${rqstid} is invalid.`) : void 0;
}
}
setLogFlag(lstr) {
var logstr, ref;
//---------
logstr = lstr || "true";
return (ref = this.getSToCA()) != null ? ref.switchLogEnabled(logstr) : void 0;
}
};
// Export
// In deference to tradition we create the singleton SToCAObj at this
// early stage, but it should be OK, and would be more consistent, to
// let CWASA create it later.  If we create it here, there's no need
// to add the SToCAObj class to the cwaenv.
theSToCA = new SToCAObj();
cwaenv.add(theSToCA, "theSToCA");
// Callbacks from Java
this.stocaFramesGenEvent = function(ekind, nf, ns) {
return theSToCA.framesGenEH(ekind, nf, ns);
};
this.stocaReturnCAS = function(rqstid, cas) {
return theSToCA.returnCAS(rqstid, cas);
};
this.spaSetSToCApplet = function(spa) {
return typeof lggr.debug === "function" ? lggr.debug(`SToCAObj: spaSetSToCApplet called with spa=${spa}`) : void 0;
};
// (End SToCAObj.coffee)
}).call(this);
// -------- Shader.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, Shader, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
//-----------
Shader = class Shader {
//-----------
// GL context, vertex and fragment shader URLs.
constructor(gl, vsPath, fsPath, vsSource, fsSource, vsSubs, fsSubs) {
var a, i, j, k, ref, ref1, shprog, sz, u, vsfsStr;
this.gl = gl;
this.vsPath = vsPath;
this.fsPath = fsPath;
this.vsSource = vsSource;
this.fsSource = fsSource;
this.vsSubs = vsSubs;
this.fsSubs = fsSubs;
//----------
this._prog = null; // WebGL program.
this._vs = null; // WebGL vertex shader.
this._fs = null; // WebGL fragment shader.
this._nUniforms = -1; // Number of uniforms.
this._uniforms = {}; // Uniform locations.
this._nAttributes = -1; // Number of attributes.
this._attributes = {}; // Attribute locations.
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: Max Vert Uniforms:     ${this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS)}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: Max Frag Uniforms:     ${this.gl.getParameter(this.gl.MAX_FRAGMENT_UNIFORM_VECTORS)}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: Vert source: ${this.vsSource}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: Frag source: ${this.fsSource}`);
}
//   Load vertex and fragment shaders, performing substitutions if any.
this._vs = this._loadShader(this.vsPath, this.vsSource, this.vsSubs);
this._fs = this._loadShader(this.fsPath, this.fsSource, this.fsSubs);
//   Create and link the program
shprog = this.gl.createProgram();
if (this._vs && this._fs) {
this.gl.attachShader(shprog, this._vs);
if (this._fs) {
this.gl.attachShader(shprog, this._fs);
}
// Keep Chrome happy
this.gl.bindAttribLocation(shprog, 0, "BindPos");
this.gl.linkProgram(shprog);
}
vsfsStr = `VrtxS=${this.vsPath} FragS=${this.fsPath}`;
if (this.gl.getProgramParameter(shprog, this.gl.LINK_STATUS)) {
if (typeof lggr.info === "function") {
lggr.info(`Shader: Program using: ${vsfsStr} created`);
}
this._prog = shprog;
} else {
lggr.warn(`Shader: Program using: ${vsfsStr} failed to link: ${this.gl.getProgramInfoLog(shprog)}`);
this.gl.deleteProgram(shprog);
this._vs = this._fs = null;
}
if (this._prog) {
//   Grab uniforms.
this._nUniforms = this.gl.getProgramParameter(this._prog, this.gl.ACTIVE_UNIFORMS);
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: ${this._nUniforms} Uniform Variables used  ####`);
}
sz = 0;
for (i = j = 0, ref = this._nUniforms; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
u = this.gl.getActiveUniform(this._prog, i);
this._uniforms[u.name] = this.gl.getUniformLocation(this._prog, u.name);
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: ${u.name} size ${(this.gl.getActiveUniform(this._prog, i)).size}`);
}
sz += (this.gl.getActiveUniform(this._prog, i)).size;
}
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: ${sz} Shader Uniforms used  ####`);
}
//   Grab attributes.
this._nAttributes = this.gl.getProgramParameter(this._prog, this.gl.ACTIVE_ATTRIBUTES);
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: ${this._nAttributes} Active Attributes`);
}
for (i = k = 0, ref1 = this._nAttributes; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {
a = this.gl.getActiveAttrib(this._prog, i);
this._attributes[a.name] = this.gl.getAttribLocation(this._prog, a.name);
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: ${a.name}: ${this._attributes[a.name]}`);
}
}
}
this.DO_CHECK_LOC_NAME = false;
}
/*  Accessors  */
// Was: isValid: -> @_prog isnt null
isValid() {
if (this._prog === void 0) {
return false;
} else {
return this._prog !== null;
}
}
//--------
getHandle() {
return this._prog;
}
//--------
getUniformLocation(uName) {
var ul;
//-----------------
ul = this._uniforms[uName];
if (ul === void 0 && this.DO_CHECK_LOC_NAME) {
lggr.warn(`Shader: ERROR: missing GL uniform '${uName}'`);
}
return ul;
}
getAttributeLocation(aName) {
var al;
//-------------------
al = this._attributes[aName];
if (al === void 0 && this.DO_CHECK_LOC_NAME) {
`ERROR: missing GL attribute '${aName}'`;
}
return al;
}
/*  Private helper methods.  */
_loadShader(spath, source, subs) {
var shader, ssource, strEndsWith;
//----------
strEndsWith = function(s, sfx) {
var dif;
dif = s.length - sfx.length;
return 0 <= dif && (String(sfx)) === s.substring(dif);
};
//   Create GL shader of the appropriate kind
shader = strEndsWith(spath, ".vert") ? this.gl.createShader(this.gl.VERTEX_SHADER) : strEndsWith(spath, ".frag") ? this.gl.createShader(this.gl.FRAGMENT_SHADER) : (lggr.warn(`Shader: Unrecognised shader URL suffix: ${spath}.`), null);
if (shader != null) {
// Load, perform substitutions, compile and check for errors.
// Source provided as parameter
// source = @_loadShaderSource spath
ssource = subs ? this._applySubs(source, subs) : source;
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: Source:\n${ssource}`);
}
this.gl.shaderSource(shader, ssource);
this.gl.compileShader(shader);
if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
lggr.warn(`Shader: failed: ${spath}: ${this.gl.getShaderInfoLog(shader)}`);
if (typeof lggr.debug === "function") {
lggr.debug("================================================");
}
if (typeof lggr.debug === "function") {
lggr.debug(ssource);
}
if (typeof lggr.debug === "function") {
lggr.debug("================================================");
}
shader = null;
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`Shader: loaded: ${spath}`);
}
}
}
return shader;
}
_applySubs(txt, subs) {
var j, len, repl, stxt, tag, tagpat;
//---------
stxt = txt;
for (j = 0, len = subs.length; j < len; j++) {
[tag, repl] = subs[j];
tagpat = `___${tag}___`;
// RE flags: global, multiline.
stxt = stxt.replace(new RegExp(tagpat, "gm"), repl);
if (typeof lggr.trace === "function") {
lggr.trace(`Shader: text substitution: \"${tagpat}\" --> \"${repl}\"`);
}
}
return stxt;
}
};
// Export
cwaenv.add(Shader, "Shader");
// (End Shader.coffee)
}).call(this);
// -------- AvImage.DOM.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvImage, Logger, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
//   Thin wrapper for DOM Image
AvImage = class AvImage {
constructor() {
this.image = new Image();
this.DOMImage = true;
if (typeof lggr.debug === "function") {
lggr.debug("New AvImage for DOM");
}
}
setSrc(theSrc) {
this.src = theSrc;
this.image.src = theSrc;
return typeof lggr.debug === "function" ? lggr.debug(`AvImage: Src ${theSrc.substr(0, 50)}`) : void 0;
}
setOnLoad(theOnLoad) {
return this.image.onload = theOnLoad;
}
};
// Export
cwaenv.add(AvImage, "AvImage");
// (End AvImage.DOM.coffee)
}).call(this);
// -------- Texture.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvImage, Data, Logger, Texture, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
Data = cwaenv.get("Data");
AvImage = cwaenv.get("AvImage");
//------------
Texture = class Texture {
//------------
//   The Texture constructor's second argument is no longer the texture
//   URL itself but a generator function for this URL.  This generator
//   function takes a single argument: a handler function for the URL,
//   which the generator will invoke when the URL is generated.
//   This mechanism allows us to use either an asynchronously generated
//   literal data URL or a conventional image file URL as the texture
//   image source.
//   @_textureImage previously added to @_texture as @_texture.image
//   @_textureImage now an AvImage which simply wraps Image [For now. JRWG]
constructor(_gl, _tURLGen, _mustFlip) {
this._gl = _gl;
this._tURLGen = _tURLGen;
this._mustFlip = _mustFlip;
//----------
this._texture = this._gl.createTexture();
this._textureState = "loading";
this._textureImage = new AvImage();
this._textureImage.setOnLoad((() => {
return this._buildTexture();
}));
this._tURLGen(this._getTextureURLHandler());
}
isValid() {
return this._textureState === "bound";
}
//------
getHandle() {
return this._texture;
}
//--------
// Returns a handler for the texture URL when it's generated: the
// handler simply attaches the generated URL (assuming it's non-null)
// as the GL texture image source.
// Again, looks like an unnecessary level of function call in constructor. JRWG
_getTextureURLHandler() {
//--------------------
return (turl) => {
if (typeof lggr.debug === "function") {
lggr.debug(`Texture: Handler for URL ${turl != null ? turl.substr(0, 50) : void 0}...`);
}
if (turl) {
return this._textureImage.setSrc(turl);
} else {
return typeof lggr.debug === "function" ? lggr.debug("Texture: URL is null.") : void 0;
}
};
}
_buildTexture() {
var doBind, imgSrc, srcDesc;
//------------
imgSrc = this._textureImage.src;
if (typeof lggr.trace === "function") {
lggr.trace(`Texture: _buildTexture: Image source ${imgSrc != null ? imgSrc.substr(0, 50) : void 0}...`);
}
srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
if (typeof lggr.info === "function") {
lggr.info(`Texture: loaded from source ${srcDesc}`);
}
doBind = this._textureState === "binding";
this._textureState = "loaded";
if (doBind) {
return this.bind();
}
}
bind() {
var ex, imgSrc, srcDesc;
//---
imgSrc = this._textureImage.src;
if (typeof lggr.trace === "function") {
lggr.trace(`Texture: bind: Image source ${imgSrc != null ? imgSrc.substr(0, 50) : void 0}...`);
}
srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
switch (this._textureState) {
case "loading":
if (typeof lggr.debug === "function") {
lggr.debug(`Texture: set for binding while loading source ${srcDesc}`);
}
return this._textureState = "binding";
case "loaded":
this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture);
if (typeof lggr.trace === "function") {
lggr.trace(`Texture FLIP_Y: ${this._mustFlip}`);
}
this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, this._mustFlip);
try {
this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._textureImage.image);
} catch (error) {
ex = error;
// FIXME: what do we really need here?
lggr.warn(`Caught error building texture: ${ex}`);
}
this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);
this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR_MIPMAP_LINEAR);
this._gl.generateMipmap(this._gl.TEXTURE_2D);
this._gl.bindTexture(this._gl.TEXTURE_2D, null);
if (typeof lggr.info === "function") {
lggr.info(`Texture: bound for source ${srcDesc}`);
}
return this._textureState = "bound";
default:
return lggr.warn(`Texture: unexpected state ${this._textureState} for binding source ${srcDesc}`);
}
}
release() {
var imgSrc, srcDesc;
//------
imgSrc = this._textureImage.src;
if (typeof lggr.trace === "function") {
lggr.trace(`Texture: release: Image source ${imgSrc != null ? imgSrc.substr(0, 50) : void 0}...`);
}
srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
switch (this._textureState) {
case "binding":
return this._textureState = "loading";
case "bound":
return this._textureState = "loaded";
default:
return lggr.warn(`Texture: unexpected state ${this._textureState} for releasing source ${srcDesc}`);
}
}
};
// Export
cwaenv.add(Texture, "Texture");
// (End Texture.coffee)
}).call(this);
// -------- VBO.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, VBO, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("WebGL");
//--------
VBO = class VBO {
//--------
// GL      :   WebGL context.
// elSize  :   Number of values per vertex (element)Vertex -- e.g.
//             3 for position (x, y, z).
// (data)  :   Source data array for this buffer -- typically a
//             Float32Array for vertex data,
//             or a Uint16Array for index data.
// mode    :   GL primitives mode associated with this VBO for draw
//             operations, e.g. GL.TRIANGLE_STRIP, or null if there is
//             no associated mode.
// attrLoc :   Shader attribute location associated with this VBO,
//             or null if this is not an attribute VBO.
// itemType:   GL type for each value in this VBO
// glTarget:   GL target to which this buffer should be bound  -- most
//             commonly GL.ARRAY_BUFFER.
// usage   :   GL usage pattern hint for this buffer -- most commonly
//             GL.STATIC_DRAW.
constructor(GL, elSize1, data, mode1, attrLoc, itemType, glTarget, usage1) {
//----------
this.GL = GL;
this.elSize = elSize1;
this.mode = mode1;
this.attrLoc = attrLoc;
this.itemType = itemType;
this.glTarget = glTarget;
this.usage = usage1;
//   Private members
this._buffer = this.GL.createBuffer();
this._nVertices = data.length / this.elSize;
if (typeof lggr.trace === "function") {
lggr.trace(`VBO: elSize=${this.elSize} length=${data.length} verts=${this._nVertices}`);
}
//   Create and initialise the buffer.
this.GL.bindBuffer(this.glTarget, this._buffer);
this.GL.bufferData(this.glTarget, data, this.usage);
this.GL.bindBuffer(this.glTarget, null);
}
static _make(gl, elSize, buf, mode, aLoc, iType, isEl, isDyn) {
var target, usage;
//-----
target = isEl ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;
usage = isDyn ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
return new VBO(gl, elSize, buf, mode, aLoc, iType, target, usage);
}
static makeStd(gl, elSize, buf, aLoc) {
//-------
return this._make(gl, elSize, buf, null, aLoc, gl.FLOAT, false, false);
}
static makeDyn(gl, elSize, buf, aLoc) {
//-------
return this._make(gl, elSize, buf, null, aLoc, gl.FLOAT, false, true);
}
static makeEls(gl, elSize, buf, mode, isByte) {
var iType;
//-------
iType = isByte ? gl.UNSIGNED_BYTE : gl.UNSIGNED_SHORT;
return this._make(gl, elSize, buf, mode, null, iType, true, false);
}
_valueSize() {
var gl, type;
//---------
// NB  We only deal with the types we know about, i.e. those defined
// via the @make*() methods above.  For any other type we return -1.
gl = this.GL;
type = this.itemType;
if (type === gl.FLOAT) {
return 4;
} else if (type === gl.UNSIGNED_BYTE) {
return 1;
} else if (type === gl.UNSIGNED_SHORT) {
return 2;
} else {
return -1;
}
}
//	Returns the WebGL handle for the buffer.
getHandle() {
return this._buffer;
}
//--------
//	Returns the number of values per vertex (element) -- e.g. 3 for
// the (x,y,z) of a position.
getElementSize() {
return this.elSize;
}
//-------------
//	Returns the number of vertices.
getNumVertices() {
return this._nVertices;
}
//-------------
uploadPartialData(baseEl, data) {
var byteOffset;
//----------------
byteOffset = baseEl * this.elSize * (this._valueSize());
this.GL.bindBuffer(this.glTarget, this._buffer);
this.GL.bufferSubData(this.glTarget, byteOffset, data);
return this.GL.bindBuffer(this.glTarget, null);
}
uploadNewData(data) {
return this.uploadPartialData(0, data);
}
//------------
enableAttrib() {
//-----------
this.GL.enableVertexAttribArray(this.attrLoc);
this.GL.bindBuffer(this.glTarget, this._buffer);
this.GL.vertexAttribPointer(this.attrLoc, this.elSize, this.itemType, false, 0, 0);
return this.GL.bindBuffer(this.glTarget, null);
}
disableAttrib() {
//------------
return this.GL.disableVertexAttribArray(this.attrLoc);
}
drawElements() {
//-----------
this.GL.bindBuffer(this.glTarget, this._buffer);
this.GL.drawElements(this.mode, this._nVertices, this.itemType, 0);
return this.GL.bindBuffer(this.glTarget, null);
}
};
// Export
cwaenv.add(VBO, "VBO");
// (End VBO.coffee)
}).call(this);
// -------- E3Vec.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var E3Vec, Logger, RQ, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Maths");
//   E3Vec and RotQuat are mutually dependent, so E3Vec must
//   depend on RotQuat to fix this forward reference, via
//   E3Vec.setRotQuat() below.
RQ = void 0; // Forward reference, to be fixed by RotQuat.
E3Vec = (function() {
//----------
class E3Vec {
//----------
constructor(x, y, z) {
this.xyz = new Float32Array([x, y, z]);
}
//----------
// Fix forward reference.
static setRotQuat(rq) {
return RQ = rq;
}
//----------
//========  String representations.  ========
//   Returns a string for (float) x with n fractional digits.
static fStr(x, n) {
return x.toFixed(n);
}
//----
//   Returns a string for (float) x with 3 fractional digits.
static fStr3(x) {
return this.fStr(x, 3);
}
//-----
//   Returns a string for the given XYZ vector, with the given
//   number of fractional digits for each component.
static vStr(xyz, n) {
var t, xs, ys, zs;
//----
[xs, ys, zs] = (function() {
var i, len1, results;
results = [];
for (i = 0, len1 = xyz.length; i < len1; i++) {
t = xyz[i];
results.push(this.fStr(t, n));
}
return results;
}).call(this);
return `<${xs} ${ys} ${zs}>`;
}
//========  XYZ vector operations.  ========
//   Returns a new 3-vector of floats (Float32Array), initially all zero.
static make3Vec() {
return new Float32Array(3);
}
//------
//   Returns a new 4-vector of floats (Float32Array), initially all zero.
static make4Vec() {
return new Float32Array(4);
}
//------
//   Returns a new XYZ vector created from the given x,y,z values.
static makeV3(x, y, z) {
return new Float32Array([x, y, z]);
}
//------
//   Returns a new copy of the given XYZ vector.
static copyOfV3(xyz) {
return new Float32Array(xyz);
}
//--------
//   Copies the given values to the given XYZ vector, and returns
//   the vector itself.
static setV3_xyz(xyz, x, y, z) {
xyz[0] = x;
xyz[1] = y;
xyz[2] = z;
return xyz;
}
//---------
//   Copies the second (RHS) XYZ vector to the first (LHS), and
//   returns the latter.
static setV3(xyz, xyzb) {
var xb, yb, zb;
//-----
[xb, yb, zb] = xyzb;
xyz[0] = xb;
xyz[1] = yb;
xyz[2] = zb;
return xyz;
}
//   Adds the second (LHS) XYZ vector to the first (RHS), and returns
//   the first.
static setAddV3(xyz, xyzb) {
var xb, yb, zb;
//--------
[xb, yb, zb] = xyzb;
xyz[0] += xb;
xyz[1] += yb;
xyz[2] += zb;
return xyz;
}
//   Returns the sum of the given pair XYZ vectors as a new XYZ vector.
static addV3(xyza, xyzb) {
return this.setAddV3(this.copyOfV3(xyza), xyzb);
}
//-----
//   Subtracts the second (LHS) XYZ vector from the first (RHS), and
//   returns the first.
static setSubtractV3(xyz, xyzb) {
var xb, yb, zb;
//-------------
[xb, yb, zb] = xyzb;
xyz[0] -= xb;
xyz[1] -= yb;
xyz[2] -= zb;
return xyz;
}
//   Returns the difference between the given pair of XYZ vectors
//   (i.e. second subtracted from first) as a new XYZ vector.
static subtractV3(xyza, xyzb) {
return this.setSubtractV3(this.copyOfV3(xyza), xyzb);
}
//----------
//   Returns the inner product of given pair of XYZ vectors.
static dotProductV3(xyza, xyzb) {
var xa, xb, ya, yb, za, zb;
//------------
[xa, ya, za] = xyza;
[xb, yb, zb] = xyzb;
return xa * xb + ya * yb + za * zb;
}
//   Returns the square of the given XYZ vector's length (in E3 space).
static squaredLengthV3(xyz) {
return this.dotProductV3(xyz, xyz);
}
//--------------
//   Returns the given XYZ vector's length (in E3 space).
static lengthV3(xyz) {
return Math.sqrt(this.squaredLengthV3(xyz));
}
//--------
static projectionV3(xyza, xyzb) {
//------------
return (this.dotProductV3(xyza, xyzb)) / (this.lengthV3(xyzb));
}
//   Multiplies the given XYZ vector by the given scalar, and returns
//   the vector itself.
static setScaleV3(xyz, s) {
xyz[0] *= s;
xyz[1] *= s;
xyz[2] *= s;
return xyz;
}
//----------
//   Divides the given XYZ vector by the given scalar, and returns
//   the vector itself.
static setInverseScaleV3(xyz, s) {
xyz[0] /= s;
xyz[1] /= s;
xyz[2] /= s;
return xyz;
}
//-----------------
//   Negates the given XYZ vector, and returns the vector itself.
static setNegateV3(xyz) {
var x, y, z;
[x, y, z] = xyz;
return this.setV3_xyz(xyz, -x, -y, -z);
}
//-----------
//   Normalizes this XYZ vector, that is, scales it to unit length --
//   unless it is approximately zero, in which case it is left unchanged
//   -- and returns the vector itself.
static setNormalizeV3(xyz) {
var len;
//--------------
len = this.lengthV3(xyz);
if (1e-5 <= len) {
return this.setInverseScaleV3(xyz, len);
} else {
return xyz;
}
}
//   Returns a normalized copy of the given XYZ vector -- unless it
//   it is approximately zero, in which case an exact copy is returned.
static normalizeV3(xyza) {
return this.setNormalizeV3(this.copyOfV3(xyza));
}
//-----------
//   Computes the cross product of the first XYZ vector with the second,
//   updates the first with this product, and returns the first vector
//   itself.
static setCrossProductV3(xyz, xyzb) {
var xa, xb, ya, yb, za, zb;
//----------
[xa, ya, za] = xyz;
[xb, yb, zb] = xyzb;
return this.setV3_xyz(xyz, ya * zb - za * yb, za * xb - xa * zb, xa * yb - ya * xb);
}
//   Returns a new XYZ vector containing the vector product of the
//   given pair of XYZ vectors.
static crossProductV3(xyza, xyzb) {
//--------------
return this.setCrossProductV3(this.copyOfV3(xyza), xyzb);
}
//   Sets the first of the given XYZ vectors to be the cross product of
//   that vector with the second, scaled to unit length -- unless the
//   vectors are approximately parallel, in which case the scaling is
//   omitted.
static setUnitCrossProductV3(xyz, xyzb) {
//---------------------
return this.setNormalizeV3(this.setCrossProductV3(xyz, xyzb));
}
//   Returns a new unit XYZ vector containing the vector product of the
//   given pair of XYZ vectors, scaled to unit length.
static unitCrossProductV3(xyza, xyzb) {
//------------------
return this.setUnitCrossProductV3(this.copyOfV3(xyza), xyzb);
}
static setRotateV3(xyz, qv) {
return RQ.rotateV3(xyz, xyz, qv);
}
//-----------
//========  3D vector creation/generation.  ========
//   Returns a new 3D vector with the given component values.
static from_xyz(x, y, z) {
return new E3Vec(x, y, z);
}
//--------
//   Returns a new 3D vector, copied from the given XYZ vector.
static fromV3(xyz) {
var x, y, z;
[x, y, z] = xyz;
return new E3Vec(x, y, z);
}
//------
//   Returns a new 3D vector, copied from the given one.
static fromE3V(e3v) {
return this.fromV3(e3v.xyz);
}
//-------
static fromVec(xyz) {
return this.fromV3(xyz);
}
//-------
static create() {
return new E3Vec(0, 0, 0);
}
//----
//========  XYZ vector accessors.  ========
x() {
return this.xyz[0];
}
y() {
return this.xyz[1];
}
z() {
return this.xyz[2];
}
//   Returns a new XYZ vector (Float32Array) containing a copy of this
//   3D vector.
copyXYZ() {
return E3Vec.copyOfV3(this.xyz);
}
//------
//   Copies this 3D vector to the given XYZ vector.
toXYZ(xyz) {
return E3Vec.setV3(xyz, this.xyz);
}
//----
//   Copies this 3D vector to the given XYZ vector.
toV3(xyz) {
return E3Vec.setV3(xyz, this.xyz);
}
//---
//   Returns a string representation for this 3D vector.
toStr() {
return this.asString();
}
//----
//   Returns a string representation for this 3D vector.
asString() {
var x, y, z;
[x, y, z] = this.xyz;
return `<${x} ${y} ${z}>`;
}
//-------
//   Returns a string representation for this 3D vector, with fraction
//   lengths limited to n.
asString_n(n) {
return E3Vec.vStr(this.xyz, n);
}
//---------
//   Returns a string representation for this 3D vector, with fraction
//   lengths limited to 4.
asString4() {
return this.asString_n(4);
}
//--------
//   Copies the given component values to this 3D vector, and returns
//   this vector itself.
set_xyz(x, y, z) {
E3Vec.setV3_xyz(this.xyz, x, y, z);
return this;
}
//------
//   Copies the given XYZ vector to this 3D vector, and returns this
//   vector itself.
setVec(xyz) {
E3Vec.setV3(this.xyz, xyz);
return this;
}
//-----
//   Copies the given 3D vector to this one, and returns this vector itself.
setFromE3V(e3v) {
E3Vec.setV3(this.xyz, e3v.xyz);
return this;
}
//---------
//========  Algebraic operations, not changing this 3D vector [UNUSED ? ].  ========
//   Returns a new 3D vector obtained by adding the given XYZ vector to
//   this 3D vector.
//   Was addVec()
addXYZ(xyz) {
return E3Vec.fromV3(E3Vec.setAddV3(E3Vec.copyOfV3(this.xyz), xyz));
}
//-----
//   Returns a new 3D vector obtained by adding the given one to this one.
add(e3v) {
return this.addXYZ(e3v.xyz);
}
//--
dotProduct(e3v) {
return E3Vec.dotProductV3(this.xyz, e3v.xyz);
}
//---------
//========  Algebraic operations modifying this 3D vector.  ========
//   Negates this 3D vector, and returns the vector itself.
setNegate() {
E3Vec.setNegateV3(this.xyz);
return this;
}
//--------
//   Adds the given 3D vector to this one, and returns this one. -- UNUSED
setAdd(e3v) {
E3Vec.setAddV3(this.xyz, e3v.xyz);
return this;
}
//-----
//   Sets this 3D vector to be the vector product of itself with the
//   given 3D vector, and returns (thus modified) this vector itself.
setCrossProduct(e3v) {
E3Vec.setCrossProductV3(this.xyz, e3v.xyz);
return this;
}
//-----------
//   Sets this 3D vector to be the vector product of itself with the
//   given 3D vector, scaled to unit length, and returns (thus modified)
//   this vector itself.
setUnitCrossProduct(e3v) {
//---------------
E3Vec.setUnitCrossProductV3(this.xyz, e3v.xyz);
return this;
}
//   Applies the given rotation quaternion to this 3D vector, and
//   returns this vector itself.
setRotate(rq) {
E3Vec.setRotateV3(this.xyz, rq.xyzw);
return this;
}
//--------
//   Returns the length of the projection of this 3D vector on the
//   given one.
projectionOn(e3v) {
return E3Vec.projectionV3(this.xyz, e3v.xyz);
}
//-----------
//   Returns the length (in E3 space) of this 3D vector.
xyzLength() {
return E3Vec.lengthV3(this.xyz);
}
//--------
//   Returns the square of the length (in E3 space) of this 3D vector.
squaredLength() {
return E3Vec.squaredLengthV3(this.xyz);
}
};
//------
//========  Standard/useful fixed XYZ vector.  Unused ========
E3Vec.ZERO = new E3Vec(0, 0, 0);
return E3Vec;
}).call(this);
//------------
// Export
cwaenv.add(E3Vec, "E3Vec");
// (End E3Vec.coffee)
}).call(this);
// -------- RotQuat.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, RotQuat, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Maths");
V3 = cwaenv.get("E3Vec");
RotQuat = (function() {
var RQ;
//------------
class RotQuat {
//------------
//   Constructs a new rotation quaternion, initially representing
//   the identity rotation.
constructor() {
this.xyzw = new Float32Array(4);
this.xyzw[3] = 1;
}
//========  String representations.  ========
//   Returns a string for (float) x with n fractional digits.
static fStr(x, n) {
return x.toFixed(n);
}
//----
//   Returns a string for (float) x with 3 fractional digits.
static fStr3(x) {
return this.fStr(x, 3);
}
//-----
//   Returns a string for the given quaternion vector, with the given
//   number of fractional digits for each component.
static qStr(qv, n) {
var t, w, x, y, z;
//----
[x, y, z, w] = (function() {
var j, len, results;
results = [];
for (j = 0, len = qv.length; j < len; j++) {
t = qv[j];
results.push(this.fStr(t, n));
}
return results;
}).call(this);
return `<${x} ${y} ${z}; ${w}>`;
}
//========  Quaternion vector operations.  ========
//   Returns a new quaternion vector created from the given x,y,z,w values.
static makeQV(x, y, z, w) {
return new Float32Array([x, y, z, w]);
}
//------
//   Returns a new copy of the given quaternion vector.
static copyOfQV(qv) {
return new Float32Array(qv);
}
//--------
//   Copies the given values to the given quaternion vector, and returns
//   the vector itself.
static setQV_xyzw(qv, x, y, z, w) {
qv[0] = x;
qv[1] = y;
qv[2] = z;
qv[3] = w;
return qv;
}
//----------
//   Copies the second (RHS) quaternion vector to the first (LHS), and
//   returns the latter.
static setQV(qv, qq) {
var w, x, y, z;
//-------
[x, y, z, w] = qq;
qv[0] = x;
qv[1] = y;
qv[2] = z;
qv[3] = w;
return qv;
}
//   Sets the given quaternion vector to represent a rotation on the
//   given unit vector axis by the given angle, and returns the
//   quaternion vector itelf.
static setAxisAngleQV(qv, xyz, angle) {
var halfA, sinHA, ux, uy, uz;
//--------------
// The quaternion representing the rotation is
//   q = cos(A/2) + sin(A/2)*(x*i + y*j + z*k)
// ASSERT: xyz.length() == 1;
[ux, uy, uz] = xyz;
halfA = 0.5 * angle;
sinHA = Math.sin(halfA);
return this.setQV_xyzw(qv, sinHA * ux, sinHA * uy, sinHA * uz, Math.cos(halfA));
}
//   Scales the given quaternion vector by the given number, and returns
//   the vector itself.
static setScaleQV(qv, s) {
qv[0] *= s;
qv[1] *= s;
qv[2] *= s;
qv[3] *= s;
return qv;
}
//----------
//   Returns a new quaternion vector containing the given one scaled
//   by the given number.
static scaleQV(q, s) {
var qv;
qv = this.copyOfQV(q);
return this.setScaleQV(qv, s);
}
//-------
//   Negates the given quaternion vector, and returns the vector itself.
static setNegateQV(qv) {
//-----------
qv[0] = -qv[0];
qv[1] = -qv[1];
qv[2] = -qv[2];
qv[3] = -qv[3];
return qv;
}
//   Returns a new quaternion vector containing the negation of the
//   given one.
static negateQV(q) {
var qv;
qv = this.copyOfQV(q);
return this.setNegateQV(qv);
}
//--------
//   Adds the second (RHS) quaternion vector to the first (LHS), and
//   returns the first vector.
static setAddQV(qv, qq) {
//--------
qv[0] += qq[0];
qv[1] += qq[1];
qv[2] += qq[2];
qv[3] += qq[3];
return qv;
}
//   Returns a new quaternion vector containing the sum of the given
//   pair.
static addQV(qa, qb) {
var qv;
qv = this.copyOfQV(qa);
return this.setAddQV(qv, qb);
}
//-----
//   Subtracts the second (RHS) quaternion vector from the first (LHS),
//   and returns the first vector.
static setSubtractQV(qv, qq) {
//-------------
qv[0] -= qq[0];
qv[1] -= qq[1];
qv[2] -= qq[2];
qv[3] -= qq[3];
return qv;
}
//   Returns a new quaternion vector containing the difference between
//   the first and the second of the given pair.
static subtractQV(qa, qb) {
var qv;
qv = this.copyOfQV(qa);
return this.setSubtractQV(qv, qb);
}
//----------
//   Sets this quaternion vector to be its own conjugate, and returns
//   the vector itself.
static setConjugateQV(qv) {
V3.setNegateV3(qv);
return qv;
}
//--------------
//   Returns a new quaternion vector containing the conjugate of this one.
static conjugateQV(qa) {
var qv;
qv = this.copyOfQV(qa);
return this.setConjugateQV(qv);
}
//-----------
//   Returns the inner product of the given pair of quaternion vectors.
static innerProductQV(qa, qb) {
//--------------
return qa[0] * qb[0] + qa[1] * qb[1] + qa[2] * qb[2] + qa[3] * qb[3];
}
//   Computes the quaternion product of the second and third of the
//   given quaternions, and assigns the result to the first.
//   This is the (non-commutative) product defined by:
//      <a;U> * <b;V>  =  <ab - U.V; aV + bU + U x V>
//   where a, b are scalars, U, V are 3-vectors, . denotes
//   inner product, and x denotes cross-product.
static setProductQV(qv, qa, qb) {
var aw, ax, ay, az, bw_, bx_, by_, bz_;
//------------
// The underscores are irritating but they avoid having the CS
// compiler see the "by" keyword instead of a variable name.
ax = qa[0];
ay = qa[1];
az = qa[2];
aw = qa[3];
bx_ = qb[0];
by_ = qb[1];
bz_ = qb[2];
bw_ = qb[3];
return this.setQV_xyzw(qv, aw * bx_ + ax * bw_ + ay * bz_ - az * by_, aw * by_ + ay * bw_ + az * bx_ - ax * bz_, aw * bz_ + az * bw_ + ax * by_ - ay * bx_, aw * bw_ - ax * bx_ - ay * by_ - az * bz_);
}
//   Returns the length of the given quaternion vector.
static lengthQV(qv) {
return Math.sqrt(this.innerProductQV(qv, qv));
}
//--------
//   Normalises the given quaternion vector, unless its length is close
//   to zero in which case it is left unchanged.
static setNormalizeQV(qv) {
var lensq;
//--------------
// Do nothing if qv is too close to zero.
lensq = this.innerProductQV(qv, qv);
if (1e-12 < lensq) {
return setScaleQV(qv, 1 / Math.sqrt(lensq));
} else {
return qv;
}
}
//   Computes the SLerp (spherical linear interpolation) with the given
//   fraction T of the second and third of the given rotation
//   quaternion vectors, and assigns the result to the first of the
//   given vectors.
static slerpQV(qv, qa, qb, T) {
var ONE, T_COMP, cosOmega, doLinear, omega, qb_, sA, sB, sinOmega, sinSqOmega;
//-------
ONE = 1;
T_COMP = ONE - T;
// Omega is the angle of the interval (on the unit hypersphere)
// over which we are to interpolate.
cosOmega = this.innerProductQV(qa, qb);
// Adjust if necessary to ensure |omega| < PI / 2.
// (There is no loss of generality in this, since, for any
// quaternion q: q and -q represent the same 3D rotation.)
qb_ = qb;
if (cosOmega < 0) {
(cosOmega = -cosOmega, qb_ = this.negateQV(qb));
}
// Compute the interpolation weights.
// When qa, qb are very close, we need to avoid numerical instability
// when sinOmega is at or close to zero: in that case just do linear
// interpolation (with subsequent re-normalization -- see below).
doLinear = ONE - cosOmega < 1e-5;
if (doLinear) {
sA = T_COMP;
sB = T;
} else {
sinSqOmega = 1 - cosOmega * cosOmega;
sinOmega = sinSqOmega / Math.sqrt(sinSqOmega);
omega = Math.atan2(sinOmega, cosOmega);
sA = (Math.sin(omega * T_COMP)) / sinOmega;
sB = (Math.sin(omega * T)) / sinOmega;
}
// Assign the weighted sum for the interpolation to qq.
this.setQV_xyzw(qv, qa[0] * sA + qb_[0] * sB, qa[1] * sA + qb_[1] * sB, qa[2] * sA + qb_[2] * sB, qa[3] * sA + qb_[3] * sB);
if (doLinear) {
// Re-normalize the result if we did linear scaling above.
return RotQuat.setNormaliseQV(qv);
}
}
static rotateV3(v3r, v3, qv) {
var _u, _uX_uXv, _uXv, _v, udotv, w;
//--------
//  q v q* = < 0; (u.v)u + (w^2)v + 2w(u x v) + u x (u x v) >
//  where qv = q = <w;u> and x denotes cross product.
//  v3r is result vector, v3 is operand (v).
_v = V3.copyOfV3(v3);
_u = qv;
w = qv[3];
udotv = V3.dotProductV3(_u, _v);
_uXv = V3.setCrossProductV3(V3.copyOfV3(_u), _v);
_uX_uXv = V3.setCrossProductV3(V3.copyOfV3(_u), _uXv);
V3.setV3(v3r, _u);
V3.setScaleV3(v3r, udotv);
V3.setScaleV3(_v, w * w);
V3.setAddV3(v3r, _v);
V3.setScaleV3(_uXv, 2 * w);
V3.setAddV3(v3r, _uXv);
return V3.setAddV3(v3r, _uX_uXv);
}
static rotateV3_(vr, v, q) {
var ab, c, cx, cy, cz, d, i, j, results, ux, uy, uz, vx, vy, vz, w, w2, ww;
//---------
[vx, vy, vz] = v;
[ux, uy, uz, w] = q;
ww = w * w;
w2 = w + w;
//a=  [ux*ux*vx, uy*uy*vy, uz*uz*vz]           # (u.v)u
//b=  [ww*vx, ww*vy, ww*vz]                    # (w^2)v
ab = ab = [(ux * ux + ww) * vx, (uy * uy + ww) * vy, (uz * uz + ww) * vz];
[cx, cy, cz] = c = [
uy * vz - uz * vy,
uz * vx - ux * vz,
ux * vy - uy * vx // u x v
];
c[0] *= w2;
c[1] *= w2;
c[2] *= w2;
d = [
uy * cz - uz * cy,
uz * cx - ux * cz,
ux * cy - uy * cx // u x (u x v)
];
results = [];
for (i = j = 0; j < 3; i = ++j) {
results.push(vr[i] = ab[i] + c[i] + d[i]);
}
return results;
}
//========  Quaternion vector to matrix conversions.  ========
//   Populates the given 4x4 (column major) TR matrix so that it
//   represents the same rotation as the given quaternion vector,
//   with a zero transform -- so the final (T) column is set to
//   [0,0,0,1], but the bottom-left 3-vector is left untouched.
static setTRMat4x4FromQV(m, qv) {
return this._setTRMatFromQV(m, qv, true, false, true);
}
//-----------------
//   Populates the given 4x4 (column major) TR matrix so that it
//   represents the same rotation as the given quaternion vector --
//   leaving its final (T) column and bottom row untouched.
static setRotMat4x4FromQV(m, qv) {
return this._setTRMatFromQV(m, qv, true, false, false);
}
//------------------
//   Populates the given 3x3 (column major) rotation matrix so that it
//   represents the same rotation as the given quaternion vector.
static setRotMat3x3FromQV(m, qv) {
return this._setTRMatFromQV(m, qv, true, true);
}
//------------------
//   Populates the first three rows of the given 4x4 (row major) TR
//   matrix so that it represents the same rotation as the given
//   quaternion vector, with a zero transform -- so the final (T)
//   column 3-vector is set to [0,0,0], and the entire bottom row is
//   left untouched.
//   Populates the upper right 3x3 submatrix the given 4x4 (row major)
//   TR matrix so that it represents the same rotation as the given
//   quaternion vector, leaving the final row and final column entirely
//   untouched.
static setRotMatRows3x4FromQV(m, qv) {
//----------------------
return this._setTRMatFromQV(m, qv, false, false, false);
}
static setRotMat4x4TransposeFromQV(m, qv) {
//---------------------------
this._setTRMatFromQV(m, qv, false, false, true);
m[12] = m[13] = m[14] = 0;
return m;
}
//   Internal helper method.
static _setTRMatFromQV(m, qv, m_is_col_maj, m_is_3x3, do_t_4x4) {
var WX_2, WY_2, WZ_2, XX_2, XY_2, XZ_2, X_2, YY_2, YZ_2, Y_2, ZZ_2, Z_2, m00, m01, m02, m10, m11, m12, m20, m21, m22, ww, xx, yy, zz;
//---------------
// Build products, with 2, and with other fields.
[xx, yy, zz, ww] = qv;
X_2 = xx + xx;
Y_2 = yy + yy;
Z_2 = zz + zz;
WX_2 = ww * X_2;
WY_2 = ww * Y_2;
WZ_2 = ww * Z_2;
XX_2 = xx * X_2;
XY_2 = xx * Y_2;
XZ_2 = xx * Z_2;
YY_2 = yy * Y_2;
YZ_2 = yy * Z_2;
ZZ_2 = zz * Z_2;
// Define fields of 3 x 3 matrix (pre-multiply)
// ---- First row ----
m00 = 1 - YY_2 - ZZ_2;
m01 = XY_2 - WZ_2;
m02 = XZ_2 + WY_2;
// ---- Second row ----
m10 = XY_2 + WZ_2;
m11 = 1 - XX_2 - ZZ_2;
m12 = YZ_2 - WX_2;
// ---- Third row ----
m20 = XZ_2 - WY_2;
m21 = YZ_2 + WX_2;
m22 = 1 - XX_2 - YY_2;
if (m_is_col_maj) {
if (m_is_3x3) {
// Column-major 3x3 matrix (each line is one column).
m[0] = m00;
m[1] = m10;
m[2] = m20;
m[3] = m01;
m[4] = m11;
m[5] = m21;
m[6] = m02;
m[7] = m12;
m[8] = m22;
} else {
// Column-major 4x4 matrix (each line is [start of] one column).
m[0] = m00;
m[1] = m10;
m[2] = m20;
m[4] = m01;
m[5] = m11;
m[6] = m21;
m[8] = m02;
m[9] = m12;
m[10] = m22;
if (do_t_4x4) { //== Note the guard. ==
(m[12] = m[13] = m[14] = 0, m[15] = 1);
}
}
} else {
// Row-major 4x4 matrix (each line is one row).
// ... and leave m3[012] untouched.
m[0] = m00;
m[1] = m01;
m[2] = m02; // m[ 3]
m[4] = m10;
m[5] = m11;
m[6] = m12; // m[ 7]
m[8] = m20;
m[9] = m21;
m[10] = m22; // m[11]
if (do_t_4x4) { //== Note the guard. ==
(m[3] = m[7] = m[11] = 0, m[15] = 1);
}
}
// ... and leave m3[012] untouched.
return m;
}
//========  Rotation quaternion creation/generation.  ========
//   Returns a new rotation quaternion with the given component values.
static from_xyzw(x, y, z, w) {
var q;
q = new RQ();
this.setQV_xyzw(q.xyzw, x, y, z, w);
return q;
}
//---------
//   Returns a new rotation quaternion, copied from the given
//   quaternion vector.
static fromQV(qv) {
var q;
q = new RQ();
this.setQV(q.xyzw, qv);
return q;
}
//------
//   Returns a new rotation quaternion, copied from the given one.
static fromRQ(q) {
return this.fromQV(q.xyzw);
}
//------
//   Returns a new rotation quaternion representing the rotation
//   on the given unit vector axis by the given angle (in radians).
static fromRot(axis, angle) {
var q;
//-------
q = new RQ();
q.setFromAxisAngle(axis, angle);
return q;
}
//   Creates and returns a new identity rotation quaternion.
static create() {
return this.from_xyzw(0, 0, 0, 1);
}
//------
//   Returns a new rotation quaternion representing the rotation
//   defined by the given "Euler angle" values -- that is, roll, pitch,
//   yaw -- in degrees.
static fromRPY(roll, pitch, yaw) {
var q;
//-------
q = new RQ();
q.setFromAxisRotations(roll, pitch, yaw);
return q;
}
//   Updates the first of the given rotation quaternions with the
//   result of a SLerp (spherical linear interpolation) operation, with
//   the given fraction T, between the second and third of the given
//   rotation quaternions.
static slerp(q, qa, qb, T) {
return this.slerpQV(q.xyzw, qa.xyzw, qb.xyzw, T);
}
//--------------------
//========  Rotation quaternion accessors.  ========
//   Returns a new Float32Array [x,y,z,w] containing a copy of this
//   rotation quaternion.
copyXYZW() {
return RQ.copyOfQV(this.xyzw);
}
//-------
//   Copies the components of this rotation quaternion into the given
//   [x,y,z,w] array.
toQV(xyzw) {
return RQ.setQV(xyzw, this.xyzw);
}
//---
//   Returns a string representation for this rotation quaternion.
asString() {
var w, x, y, z;
[x, y, z, w] = this.xyzw;
return `<${x} ${y} ${z}; ${w}>`;
}
//-------
//   Returns a string representation for this rotation quaternion, with
//   fraction lengths limited to n.
asString_n(n) {
return RQ.qStr(this.xyzw, n);
}
//-------
//   Returns a string representation for this rotation quaternion, with
//   fraction lengths limited to 4.
asString4() {
return this.asString_n(4);
}
//--------
//   Copies the given component values to this rotation quaternion, and
//   returns this rotation quaternion.
set_xyzw(x, y, z, w) {
RQ.setQV_xyzw(this.xyzw, x, y, z, w);
return this;
}
//-------
//   Copies the given quaternion vector to this rotation quaternion, and
//   returns this rotation quaternion.
setVec(qv) {
RQ.setQV(this.xyzw, qv);
return this;
}
//-----
//   Copies the given rotation quaternion vector to this one, and
//   returns this one.
setFromRQ(q) {
RQ.setQV(this.xyzw, q.xyzw);
return this;
}
//--------
//   Sets this to be a rotation on the given unit vector axis by the
//   given angle, and returns this rotation quaternion.
setFromAxisAngle(xyz, angle) {
//---------------
RQ.setAxisAngleQV(this.xyzw, xyz, angle);
return this;
}
//========  Rotating a 3D vector.  ========
//   Applies this rotation to the given 3D vector, and returns the
//   (thus modified) vector.
rotate(e3v) {
RQ.rotateV3(e3v.xyz, e3v.xyz, this.xyzw);
return e3v;
}
//-----
rotate_(e3v) {
RQ.rotateV3_(e3v.xyz, e3v.xyz, this.xyzw);
return e3v;
}
//-----
//========  Algebraic operations, not changing this rotation.  ========
/*  [UNUSED]
*   Returns the sum of this quaternion and the given one.
add: (q) -> RQ.addQV @xyzw, q.xyzw
#--
*   Returns the result of subtracting the given quaternion from this one.
subtract: (q) -> RQ.subtractQV @xyzw, q.xyzw
#-------
*   Returns the inner product of this rotation quaternion with the
*   given one.
innerProduct: (q) -> innerProductQV @xyzw, q.xyzw
#-----------
*/
postMultiply(q) {
var qp;
//-----------
//   Returns the quaternion product of this quaternion with the given one.
qp = new RQ();
RQ.setProductQV(qp.xyzw, this.xyzw, q.xyzw);
return qp;
}
//   Returns the quaternion product of the given quaternion with this one.
preMultiply(q) {
var qp;
//-----------
qp = new RQ();
RQ.setProductQV(qp.xyzw, q.xyzw, this.xyzw);
return qp;
}
//========  Algebraic operations modifying this rotation.  ========
//   Negates this rotation, and returns the rotation itself.
setNegate() {
RQ.setNegateQV(this.xyzw);
return this;
}
//--------
//   Inverts this rotation, and returns the rotation itself.
setInvert() {
RQ.setConjugateQV(this.xyzw);
return this;
}
//--------
//   Post-multiplies this rotation by the given one, and returns this one.
setPostMultiply(q) {
RQ.setProductQV(this.xyzw, this.xyzw, q.xyzw);
return this;
}
//--------------
//   Pre-multiplies this rotation by the given one, and returns this one.
setPreMultiply(q) {
RQ.setProductQV(this.xyzw, q.xyzw, this.xyzw);
return this;
}
//-------------
//   Scales this rotation by the specified fraction, and returns this
//   rotation.
setScaleRot(T) {
var RQID;
//----------
// Make two common cases fast.
RQID = RQ.IDENTITY;
if (T === 0) {
this.setFromRQ(RQID);
} else if (T !== 1) {
RQ.slerp(this, RQID, this, T);
} else {
}
return this;
}
//========  Special operations for x-axis rotations.  ========
//   Decomposes this rotation into a product of the form q'*q_x,
//   where q_x is a rotation on the x-axis, that is, a roll (and q'
//   is a rotation on some axis in the yz-plane), and then sets
//   this rotation quaternion to be q_x.
setExtractRotX() {
var c, d, s;
//-------------
s = this.xyzw[0];
c = this.xyzw[3];
d = Math.sqrt(s * s + c * c);
return this.set_xyzw(s / d, 0, 0, c / d);
}
//   Assuming this is a rotation on the x-axis, that is, this is
//   of the form <w;xyz> = <cos A/2; (sin A/2) 0 0>, this method
//   updates this rotation by scaling its angle by the given factor.
setScaleXRotationAngle(scale) {
var scA;
//---------------------
// ASSERT:  0.0 <= scale <= 1.0  AND  this.y == this.z == 0
scA = scale * (Math.atan2(this.xyzw[0], this.xyzw[3]));
this.xyzw[0] = Math.sin(scA);
return this.xyzw[3] = Math.cos(scA);
}
//   Negates the X-component of this rotation.  On the assumption
//   that is a rotation on the x-axis, this amounts to setting this
//   rotation to its own inverse.
setInvertX() {
return this.xyzw[0] = -this.xyzw[0];
}
//---------
//========  Rotation matrix conversions.  ========
//   Sets this rotation quaternion to represent the rotation defined by
//   the given orthonormal 3x3 (column major) matrix.
setFromRotMat3x3(m) {
var DIV_4W, EPS, SQRT_T, T, dorotx, doroty, dorotz, tx, ty, tz;
//---------------
// The given matrix is :
//    m[0]  m[3]  m[6]        m00  m01  m02
//    m[1]  m[4]  m[7]   ==   m10  m11  m12
//    m[2]  m[5]  m[8]        m20  m21  m22
EPS = 1e-4;
[tx, ty, tz] = [m[0], m[4], m[8]];
T = tx + ty + tz + 1;
if (1 <= T + EPS) {
// Normal case: 1 <= T
SQRT_T = Math.sqrt(T);
DIV_4W = 0.5 / SQRT_T;
this.set_xyzw((m[5] - m[7]) * DIV_4W, (m[6] - m[2]) * DIV_4W, (m[1] - m[3]) * DIV_4W, 0.5 * SQRT_T); // m21 - m12 // m02 - m20 // m10 - m01
} else {
// To avoid instability, we need to adjust both the matrix
// m and the quaternion (this) by introducing a prior
// rotation by PI about one of the three axes (X, Y or Z).
// First, decide which axis by finding the one with the
// largest t-value:
dorotx = doroty = dorotz = false;
if (tz <= ty) {
if (ty <= tx) {
dorotx = true;
} else {
doroty = true;
}
} else {
if (tz <= tx) {
dorotx = true;
} else {
dorotz = true;
}
}
if (dorotx) {
this._setFromMatWithXRot(m);
} else if (doroty) {
this._setFromMatWithYRot(m);
} else if (dorotz) {
this._setFromMatWithZRot(m);
}
}
return this;
}
//   Support for @setFromRotMat3x3 -- for the case where there is a
//   prior rotation by PI on the X-axis.
_setFromMatWithXRot(m) {
var DIV_4Wx, SQRT_Tx, Tx, tx, ty, tz;
//------------------
[tx, ty, tz] = [m[0], m[4], m[8]];
// Pre-rotate by PI around X: M_x is m  but with columns 1 and 2
// negated.
Tx = tx - ty - tz + 1; // 1 <= Tx
SQRT_Tx = Math.sqrt(Tx);
DIV_4Wx = 0.5 / SQRT_Tx;
// If Q_x = <w';x'y'z'> is the rotation quaternion obtained from
// M_x then the final result is
//     <w;xyz> = Q_x * <0;100> = <-x';w'z'-y'>
return this.set_xyzw(0.5 * SQRT_Tx, (m[1] + m[3]) * DIV_4Wx, (m[6] + m[2]) * DIV_4Wx, (m[5] - m[7]) * DIV_4Wx); //              (x) // m10 + m01    (y) // m02 + m20    (z) // m21 - m12    (w)
}
//   Support for @setFromRotMat3x3 -- for the case where there is a
//   prior rotation by PI on the Y-axis.
_setFromMatWithYRot(m) {
var DIV_4Wy, SQRT_Ty, Ty, tx, ty, tz;
//------------------
[tx, ty, tz] = [m[0], m[4], m[8]];
// Pre-rotate by PI around Y: M_y is m  but with columns 0 and 2
// negated.
Ty = -tx + ty - tz + 1; // 1 <= Ty
SQRT_Ty = Math.sqrt(Ty);
DIV_4Wy = 0.5 / SQRT_Ty;
// If Q_y = <w';x'y'z'> is the rotation quaternion obtained from
// M_y then the final result is
//     <w;xyz> = Q_y * <0;010> = <-y';-z'w'x'>
return this.set_xyzw((m[1] + m[3]) * DIV_4Wy, 0.5 * SQRT_Ty, (m[5] + m[7]) * DIV_4Wy, (m[6] - m[2]) * DIV_4Wy); // m10 + m01    (x) //              (y) // m21 + m12    (z) // m02 - m20    (w)
}
//   Support for @setFromRotMat3x3 -- for the case where there is a
//   prior rotation by PI on the Z-axis.
_setFromMatWithZRot(m) {
var DIV_4Wz, SQRT_Tz, Tz, tx, ty, tz;
//------------------
[tx, ty, tz] = [m[0], m[4], m[8]];
// Pre-rotate by PI around Z: M_z is m  but with columns 0 and 1
// negated.
Tz = -tx - ty + tz + 1; // 1 <= Tz
SQRT_Tz = Math.sqrt(Tz);
DIV_4Wz = 0.5 / SQRT_Tz;
// If Q_z = <w';x'y'z'> is the rotation quaternion obtained from
// M_z then the final result is
//     <w;xyz> = Q_z * <0;001> = <-z';y'-x'w'>
// Multiply result by Q_z (defined by <w;xyz>=<0;001>).
return this.set_xyzw((m[6] + m[2]) * DIV_4Wz, (m[5] + m[7]) * DIV_4Wz, 0.5 * SQRT_Tz, (m[1] - m[3]) * DIV_4Wz); // m02 + m20    (x) // m21 + m12    (y) //              (z) // m10 - m01    (w)
}
//   Populates the given 4x4 (column major) TR matrix so that it
//   represents the same rotation as this, with a zero transform --
//   so the final (T) column is set to [0,0,0,1], but the bottom-left
//   3-vector is left untouched.
toTRMat4x4(m) {
return RQ.setTRMat4x4FromQV(m, this.xyzw, true, false, true);
}
//---------
//   Populates the given 4x4 (column major) TR matrix so that it
//   represents the same rotation as this -- leaving its final (T)
//   column and bottom row untouched.
toRotMat4x4(m) {
return RQ.setRotMat4x4FromQV(m, this.xyzw, true, false, false);
}
//----------
//   Populates the given 3x3 (column major) rotation matrix so that it
//   represents the same rotation as this.
toRotMat3x3(m) {
return RQ.setRotMat3x3FromQV(m, this.xyzw, true, true);
}
//----------
//   Populates the upper right 3x3 submatrix the given 4x4 (row major)
//   TR matrix so that it represents the same rotation as this,
//   leaving the final row and final column entirely untouched.
toRotMatRows3x4(m) {
//--------------
return RQ.setRotMatRows3x4FromQV(m, this.xyzw, false, false, false);
}
//   Internal support method for rotation matrix generation.
//_toRotMat: (m, m_is_col_maj, m_is_3x3, do_t_4x4) ->
//--------
//  RQ._setTRMatFromQV m, @xyzw, m_is_col_maj, m_is_3x3, do_t_4x4
//========  "Euler angle" (RPY = Roll-Pitch-Yaw) conversions.  ========
//   Sets this rotation to be that defined by the given triple of
//   "Euler angle" angle values -- that is, roll, pitch, yaw -- in
//   degrees.
setFromAxisRotations(roll, pitch, yaw) {
var D2R_BY2, RPY_by2, cp, cr, cy, cycp, cysp, rpy, rpyb2, sp, sr, sy, sycp, sysp;
//-------------------
//  The Euler-angle-to-axis bindings,and the order in which
//  the Euler angle rotations are applied are:
//          X-roll ; Y-pitch ; Z-yaw .
//  [See note below on the orientation of the notional craft.]
//  Hence to get the required quaternion components, we
//  compute the quaternion product:
//         Q-yaw  x  Q-pitch  x  Q-roll .
//  NB
//  These axis bindings assume a notional craft lying in
//  the XY-plane, with its body lying along the X-axis
//  (facing +X), with +Y on its right/starboard side, and
//  with +Z _below_ it.
//  For a craft with this orientation, an increase in ROLL
//  (from 0) dips the right/starboard wing, an increase in
//  PITCH raises the nose, and an increase in YAW turns the
//  nose to the right/starboard.
D2R_BY2 = RQ.DEGS_TO_RADS / 2;
// Angles of rotation by 2 (i.e quaternion angles) in radians, and
// the cosines and sines of these half-angles.
RPY_by2 = (function() {
var j, len, ref, results;
ref = [roll, pitch, yaw];
results = [];
for (j = 0, len = ref.length; j < len; j++) {
rpy = ref[j];
results.push(rpy * D2R_BY2);
}
return results;
})();
[cr, cp, cy] = (function() {
var j, len, results;
results = [];
for (j = 0, len = RPY_by2.length; j < len; j++) {
rpyb2 = RPY_by2[j];
results.push(Math.cos(rpyb2));
}
return results;
})();
[sr, sp, sy] = (function() {
var j, len, results;
results = [];
for (j = 0, len = RPY_by2.length; j < len; j++) {
rpyb2 = RPY_by2[j];
results.push(Math.sin(rpyb2));
}
return results;
})();
// Compute components of Q-yaw (Z) x Q-pitch (Y)
[cycp, sysp, sycp, cysp] = [cy * cp, sy * sp, sy * cp, cy * sp];
// Finally, compute the product of the three axis-rotation quaternions:
//     (cy;  0  0 sy)  *  (cp;  0 sp  0)  *  (cr; sr  0  0)
return this.set_xyzw(cycp * sr - sysp * cr, cysp * cr + sycp * sr, sycp * cr - cysp * sr, cycp * cr + sysp * sr);
}
//   Computes a set of "Euler angle" values in degrees -- that is,
//   a sequence of rotations, R, P, Y about the axes -- equivalent to
//   this rotation, returning these results in the given array.
toAxisRotations(rpyVec) {
var CP_CR, CP_SQ, CP_SR, CY, CY_CP, R2D, SP_NEG, SY_CP, SY_NEG, WW, W_SQ, XX, X_SQ, YY, Y_SQ, ZZ, Z_SQ, i, j, qv, rpy;
//--------------
// Compute squares of this quaternion''s components.
qv = this.xyzw;
XX = qv[0];
YY = qv[1];
ZZ = qv[2];
WW = qv[3];
[X_SQ, Y_SQ, Z_SQ, W_SQ] = [XX * XX, YY * YY, ZZ * ZZ, WW * WW];
//  Extract axis-rotations from the rotation matrix components
//  corresponding to this quaternion.  The three Euler angles
//  are theta-roll (X), theta-pitch (Y), and theta-yaw (Z).
//  If cR = cos(theta-roll), sR = sin(theta-roll), etc., then the
//  relevant rotation-matrix elements are:
//      M_00 = cY*cP
//      M_10 = sP*cP
//      M_20 = -sP      M_21 = cP*sR    M_22 = cP*cR
//  but if cp = 0, i.e. if |p| = PI/2, then without loss of
//  generality we can take theta-roll = 0, and for accurate
//  computation of yaw we need to use instead:
//                      M_01 = -sY
//                      M_11 =  cY
//  which is valid in this case only.
//  [See the previous method for details of the
//   XYZ <--> ROLL-PITCH-YAW mapping.
//   But NB:
//   Here cY,sY etc. refer to the whole angles, whereas
//   in the previous method cy, sy etc. refer to the half angles
//   used in rotation quaternions,
//   i.e. cy there !== cY here, etc.]
CY_CP = W_SQ + X_SQ - Y_SQ - Z_SQ;
SY_CP = 2 * (XX * YY + WW * ZZ);
SP_NEG = 2 * (XX * ZZ - WW * YY);
CP_SQ = CY_CP * CY_CP + SY_CP * SY_CP;
R2D = RQ.RADS_TO_DEGS;
// Partial result -- to be adjusted below.
rpy = [0, R2D * (Math.asin(-SP_NEG)), 0];
for (i = j = 0; j < 3; i = ++j) {
rpyVec[i] = rpy[i];
}
// Test for the special case, cos theta-pitch === 0 (approx.).
if ((-1e-10 <= CP_SQ && CP_SQ <= 1e-10)) {
// Special case: CP = 0, i.e. |P| = PI / 2 (and r = 0);
SY_NEG = 2 * (XX * YY - WW * ZZ);
CY = W_SQ - X_SQ + Y_SQ - Z_SQ;
return rpyVec[2] = R2D * Math.atan2(-SY_NEG, CY);
} else {
// Normal case: use column 0 and row 2 of M to get R and Y.
CP_CR = W_SQ - X_SQ - Y_SQ + Z_SQ;
CP_SR = 2 * (YY * ZZ + WW * XX);
rpyVec[0] = R2D * Math.atan2(CP_SR, CP_CR);
return rpyVec[2] = R2D * Math.atan2(SY_CP, CY_CP);
}
}
};
//----------
RQ = RotQuat;
//-----
//========  Standard/useful fixed rotation quaternion values.  ========
//   Conversion factor: degrees to radians.
RotQuat.DEGS_TO_RADS = Math.PI / 180;
//------------
//   Conversion factor: radians to degrees.
RotQuat.RADS_TO_DEGS = 180 / Math.PI;
//------------
//   The zero quaternion.
RotQuat.ZERO = RotQuat.from_xyzw(0, 0, 0, 0);
//----
//   The identity rotation quaternion -- i.e. the quaternion with
//   <w;xyz> = <1;000>.
RotQuat.IDENTITY = new RQ();
//--------
//   The quaternion defining the quarter rotation on the z-axis that
//   takes the y-axis to the x-axis.
RotQuat.ROT_NEG_PI_BY_2_ON_Z = RotQuat.from_xyzw(0, 0, -Math.SQRT1_2, Math.SQRT1_2);
return RotQuat;
}).call(this);
// Export
cwaenv.add(RotQuat, "RotQuat");
cwaenv.fixRef("E3Vec", "RotQuat");
// (End RotQuat.coffee)
}).call(this);
// -------- Mat4.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, Mat4, RQ, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Maths");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
Mat4 = (function() {
//---------
class Mat4 {
//---------
constructor() {
throw "Mat4: cannot be instantiated.";
}
//   Returns a new 4x4 matrix of floats (Float32Array), initially all zero.
static makeMat4() {
return new Float32Array(16);
}
//------
//   Returns a new 4x4 identity matrix of floats (Float32Array).
static makeIdMat4() {
var m;
//----------
m = new Float32Array(16);
m[0] = m[5] = m[10] = m[15] = 1;
return m;
}
static setTrans(m, xyz) {
//--------
m[0] = m[5] = m[10] = m[15] = 1;
m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = 0;
[m[12], m[13], m[14]] = xyz;
return m;
}
static setTRComposeT(m, mtr, tx, ty, tz) {
var r00, r01, r02, r10, r11, r12, r20, r21, r22;
//-------------
// Copy (and cache) 3x3 rotation matrix.
m[0] = r00 = mtr[0];
m[1] = r10 = mtr[1];
m[2] = r20 = mtr[2];
m[4] = r01 = mtr[4];
m[5] = r11 = mtr[5];
m[6] = r21 = mtr[6];
m[8] = r02 = mtr[8];
m[9] = r12 = mtr[9];
m[10] = r22 = mtr[10];
// Apply given rotation to given translation, and accumulate
// into new translation vector
m[12] = mtr[12] + r00 * tx + r01 * ty + r02 * tz;
m[13] = mtr[13] + r10 * tx + r11 * ty + r12 * tz;
m[14] = mtr[14] + r20 * tx + r21 * ty + r22 * tz;
// Bottom row is standard.
m[3] = m[7] = m[11] = 0;
m[15] = 1;
return m;
}
static setProduct(m, ma, mb) {
var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23, b30, b31, b32, b33;
//----------
// (Column major, so each line is one column ...)
a00 = ma[0];
a10 = ma[1];
a20 = ma[2];
a30 = ma[3];
a01 = ma[4];
a11 = ma[5];
a21 = ma[6];
a31 = ma[7];
a02 = ma[8];
a12 = ma[9];
a22 = ma[10];
a32 = ma[11];
a03 = ma[12];
a13 = ma[13];
a23 = ma[14];
a33 = ma[15];
b00 = mb[0];
b10 = mb[1];
b20 = mb[2];
b30 = mb[3];
b01 = mb[4];
b11 = mb[5];
b21 = mb[6];
b31 = mb[7];
b02 = mb[8];
b12 = mb[9];
b22 = mb[10];
b32 = mb[11];
b03 = mb[12];
b13 = mb[13];
b23 = mb[14];
b33 = mb[15];
m[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
m[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
m[2] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
m[3] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
m[4] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
m[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
m[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
m[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
m[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
m[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
m[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
m[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
m[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
m[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
m[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
m[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
return m;
}
static setFrustum(m, xlo, xhi, ylo, yhi, near, far) {
var xlen, ylen, zlen;
//----------
xlen = xhi - xlo;
ylen = yhi - ylo;
zlen = far - near;
m[0] = 2 * near / xlen;
m[1] = m[2] = m[3] = 0;
m[5] = 2 * near / ylen;
m[4] = m[6] = m[7] = 0;
m[8] = (xhi + xlo) / xlen;
m[9] = (yhi + ylo) / ylen;
m[10] = -(far + near) / zlen;
m[11] = -1;
m[14] = -2 * far * near / zlen;
m[12] = m[13] = m[15] = 0;
return m;
}
static setPerspective(m, fovy, aspect, near, far) {
var xhi, yhi;
//--------------
yhi = near * (Math.tan(0.5 * fovy * RQ.DEGS_TO_RADS));
xhi = aspect * yhi;
return this.setFrustum(m, -xhi, xhi, -yhi, yhi, near, far);
}
static setLookAt(m, eye, cor, upu) {
var ce, laxu, layu, lazu;
//---------
ce = V3.subtractV3(eye, cor);
lazu = V3.normalizeV3(ce);
laxu = V3.unitCrossProductV3(upu, lazu);
layu = V3.crossProductV3(lazu, laxu);
[m[0], m[4], m[8]] = laxu;
m[12] = -(V3.dotProductV3(laxu, eye));
[m[1], m[5], m[9]] = layu;
m[13] = -(V3.dotProductV3(layu, eye));
[m[2], m[6], m[10]] = lazu;
m[14] = -(V3.dotProductV3(lazu, eye));
m[3] = m[7] = m[11] = 0;
m[15] = 1;
return m;
}
};
//----------
//========  Mat4 Operations.  ========
Mat4._nchk = 0;
return Mat4;
}).call(this);
// Export
cwaenv.add(Mat4, "Mat4");
// (End Mat4.coffee)
}).call(this);
// -------- TRXform.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, RQ, TRXform, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Maths");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
TRXform = (function() {
var TRX;
//------------
class TRXform {
//------------
//   Argument _t is an E3Vec, _r is a RotQuat.
//   This constructor does not copy the given objects but retains them
//   as its own members.
constructor(_t, _r) {
this._t = _t;
this._r = _r;
}
//================  "Static" creation methods.  ================
//   Returns a completely new TR transform, copied from the given one.
static fromTRX(trx) {
return this.fromTR(trx._t, trx._r);
}
//-------
//   Returns a completely new TR transform, built from copies of the
//   given components, a 3D vector and a rotation quaternion.
static fromTR(t, r) {
return this.fromTRV(t.xyz, r.xyzw);
}
//------
//   Returns a completely new TR transform, built from copies of the
//   given vector components.
static fromTRV(tv, rv) {
var r, t;
//-------
[t, r] = [V3.fromV3(tv), RQ.fromQV(rv)];
return new TRX(t, r);
}
//   Returns a newly created identity TR transform
static create() {
return new TRX(V3.create(), new RQ());
}
//------
//================  TR matrix generation.  ================
//   Populates the top-left 3 x 3 region of the given column major
//   matrix so that it represents the same rotation as the given
//   rotation quaternion.  The bottom row and the right column are left
//   untouched.
static setMat4x4Rot(m, r) {
return r.toRotMat4x4(m);
}
//------------
static setMat4x4Trans(m, t) {
var x, y, z;
//--------------
[x, y, z] = t.xyz;
m[12] = x;
m[13] = y;
m[14] = z;
m[15] = 1;
return m;
}
static setRowsMat3x4Rot(m, r) {
return r.toRotMatRows3x4(m);
}
//----------------
static setRowsMat3x4Trans(m, t) {
var x, y, z;
//--------------
// Non-existent m[15] = 1 is left implicit.
[x, y, z] = t.xyz;
m[3] = x;
m[7] = y;
m[11] = z;
return m;
}
//================  "Instance" methods -- getters.  ================
//   Returns this TR transform's translation -- as an 3D vector, to be
//   treated as read-only.
trans() {
return this._t;
}
//----
//   Returns this TR transform's rotation -- as a rotation quaternion,
//   to be treated as read-only.
rot() {
return this._r;
}
//--
//   Returns a string representation of this TR transform
toStr() {
return `trans=${this._t.asString4()}  rot=${this._r.asString4()}`;
}
//----
//   Returns a string representation of this TR transform
asStr() {
return this.toStr();
}
//----
//================  "Instance" methods -- setters.  ================
//   Replaces both this TR transform's components with the given ones.
setTR(t, r) {
this._t = t;
this._r = r;
return this;
}
//----
//   Replaces this TR transform's translation with the given one.
setT(t) {
this._t = t;
return this;
}
//---
//   Replaces this TR transform's rotation with the given one.
setR(r) {
this._r = r;
return this;
}
//---
copyTRX(trx) {
return this.copyTR(trx._t, trx._r);
}
//------
//   Sets this TR transform to match the given translation and rotation,
//   by copying them to its own components.
copyTR(t, r) {
this._t.setFromE3V(t);
this._r.setFromRQ(r);
return this;
}
//-----
//   Updates this TR transform's translation by copying the given one
//   to it.
copyT(t) {
this._t.setFromE3V(t);
return this;
}
//----
//   Updates this TR transform's rotation by copying the given one
//   to it.
copyR(rv) {
this._r.setFromRQ(r);
return this;
}
//----
//   Sets this TR transform to match the given translation and rotation
//   vectors, by copying them into its own components.
copyTRV(tv, rv) {
V3.setV3(this._t.xyz, tv);
RQ.setQV(this._r.xyzw, rv);
return this;
}
//------
//   Updates this TR transform's translation by copying the given vector
//   into it.
copyTV(tv) {
V3.setV3(this._t.xyz, tv);
return this;
}
//-----
//   Updates this TR transform's rotation by copying the given vector
//   into it.
copyRV(rv) {
RQ.setQV(this._r.xyzw, rv);
return this;
}
//-----
//================  Composition, inversion, transformation.  ================
//   Sets this TR transform to its post-composition with the given one.
setPostStar(trx) {
//----------
// (ta,ra) * (tb,rb) = (ta + ra(tb), ra*rb)
// ... with (ta,ra) = this and (tb,rb) = trx
this._t.setAdd(this._r.rotate(V3.fromE3V(trx._t)));
this._r.setPostMultiply(trx._r);
return this;
}
//   Sets this TR transform to its pre-composition with the given one.
setPreStar(trx) {
//---------
// (ta,ra) * (tb,rb) = (ta + ra(tb), ra*rb)
// ... with (ta,ra) = trx and (tb,rb) = this
(this._t.setRotate(trx._r)).setAdd(trx._t);
this._r.setPreMultiply(trx._r);
return this;
}
//   Sets this TR transform to its post-composition with one consisting
//   of a zero translation with the given rotation.
setPostStarRot(rq) {
this._r.setPostMultiply(rq);
return this;
}
//-------------
//   Sets this TR transform to its pre-composition with one consisting
//   of a zero translation with the given rotation.
setPreStarRot(rq) {
this._t.setRotate(rq);
this._r.setPreMultiply(rq);
return this;
}
//------------
//   Sets this TR transform to its own inverse.
setInvert() {
//--------
// (t,r) := (-Rot(r*,t),r*) = (Rot(r*,-t),r*)
this._r.setInvert();
(this._t.setNegate()).setRotate(this._r);
return this;
}
//   Returns a new TR transform representing the inverse of this one.
inverse() {
return (TRX.fromTRX(this)).setInvert();
}
//------
//   Applies this TR transform to the given 3D vector.
transform(e3v) {
return (this._r.rotate(e3v)).setAdd(this._t);
}
//--------
//================  Conversion to matrix form.  ================
//   Sets the given (column major) 4x4 TR matrix to represent this
//   TR transform.
convertToMat4x4(m) {
//--------------
m[3] = m[7] = m[11] = 0;
TRX.setMat4x4Trans(m, this._t);
return TRX.setMat4x4Rot(m, this._r);
}
convertToRowsMat3x4(m) {
//------------------
TRX.setRowsMat3x4Trans(m, this._t);
return TRX.setRowsMat3x4Rot(m, this._r);
}
//   Returns a new (column major) 4x4 TR matrix representing this TR
//   transform.
makeMat4x4() {
var m;
m = new Float32Array(16);
return this.convertToMat4x4(m);
}
};
//----------
TRX = TRXform;
return TRXform;
}).call(this);
//---------
// Export
cwaenv.add(TRXform, "TRXform");
// (End TRXform.coffee)
}).call(this);
// -------- animgen.js --------
var Module=typeof Module!="undefined"?Module:{};var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof WorkerGlobalScope!="undefined";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string"&&process.type!="renderer";if(ENVIRONMENT_IS_NODE){}var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var readAsync,readBinary;if(ENVIRONMENT_IS_NODE){var fs=require("fs");var nodePath=require("path");scriptDirectory=__dirname+"/";readBinary=filename=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename);var ret=fs.readFileSync(filename);return ret};readAsync=(filename,binary=true)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename);return new Promise((resolve,reject)=>{fs.readFile(filename,binary?undefined:"utf8",(err,data)=>{if(err)reject(err);else resolve(binary?data.buffer:data)})})};if(!Module["thisProgram"]&&process.argv.length>1){thisProgram=process.argv[1].replace(/\\/g,"/")}arguments_=process.argv.slice(2);if(typeof module!="undefined"){module["exports"]=Module}quit_=(status,toThrow)=>{process.exitCode=status;throw toThrow}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.startsWith("blob:")){scriptDirectory=""}else{scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}{if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=url=>{if(isFileURI(url)){return new Promise((resolve,reject)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){resolve(xhr.response);return}reject(xhr.status)};xhr.onerror=reject;xhr.send(null)})}return fetch(url,{credentials:"same-origin"}).then(response=>{if(response.ok){return response.arrayBuffer()}return Promise.reject(new Error(response.status+" : "+response.url))})}}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];var wasmBinary=Module["wasmBinary"];var WebAssembly={Memory:function(opts){this.buffer=new ArrayBuffer(opts["initial"]*65536)},Module:function(binary){},Instance:function(module,info){this.exports=(
// EMSCRIPTEN_START_ASM
function instantiate(Ua){function c(d){d.set=function(a,b){this[a]=b};d.get=function(a){return this[a]};return d}var e;var f=new Uint8Array(123);for(var a=25;a>=0;--a){f[48+a]=52+a;f[65+a]=a;f[97+a]=26+a}f[43]=62;f[47]=63;function l(m,n,o){var g,h,a=0,i=n,j=o.length,k=n+(j*3>>2)-(o[j-2]=="=")-(o[j-1]=="=");for(;a<j;a+=4){g=f[o.charCodeAt(a+1)];h=f[o.charCodeAt(a+2)];m[i++]=f[o.charCodeAt(a)]<<2|g>>4;if(i<k)m[i++]=g<<4|h>>2;if(i<k)m[i++]=h<<6|f[o.charCodeAt(a+3)]}}function p(q){l(e,1024,"Tm8gZXJyb3IgaW5mb3JtYXRpb24ASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgZG93bgBIb3N0IGlzIHVucmVhY2hhYmxlAEFkZHJlc3MgaW4gdXNlAEJyb2tlbiBwaXBlAEkvTyBlcnJvcgBObyBzdWNoIGRldmljZSBvciBhZGRyZXNzAEJsb2NrIGRldmljZSByZXF1aXJlZABObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAERldmljZSBub3QgYSBzdHJlYW0ATm8gZGF0YSBhdmFpbGFibGUARGV2aWNlIHRpbWVvdXQAT3V0IG9mIHN0cmVhbXMgcmVzb3VyY2VzAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBGaWxlIGRlc2NyaXB0b3IgaW4gYmFkIHN0YXRlAE5vdCBhIHNvY2tldABEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkAE1lc3NhZ2UgdG9vIGxhcmdlAFByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldABQcm90b2NvbCBub3QgYXZhaWxhYmxlAFByb3RvY29sIG5vdCBzdXBwb3J0ZWQAU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAFByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAENhbm5vdCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93bgBPcGVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcwBPcGVyYXRpb24gaW4gcHJvZ3Jlc3MAU3RhbGUgZmlsZSBoYW5kbGUAUmVtb3RlIEkvTyBlcnJvcgBRdW90YSBleGNlZWRlZABObyBtZWRpdW0gZm91bmQAV3JvbmcgbWVkaXVtIHR5cGUATXVsdGlob3AgYXR0ZW1wdGVkAFJlcXVpcmVkIGtleSBub3QgYXZhaWxhYmxlAEtleSBoYXMgZXhwaXJlZABLZXkgaGFzIGJlZW4gcmV2b2tlZABLZXkgd2FzIHJlamVjdGVkIGJ5IHNlcnZpY2U=");l(e,2946,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB");l(e,3144,"IQQAAAAAAAAAAC8C");l(e,3176,"NQRHBFYE");l(e,3198,"oAQ=");l(e,3218,"");l(e,31552,"Hy8AAPIvAACXMQAAai4AAHYt");l(e,31584,"BAAAAAIAAAAAAAAAAQAAAAMAAABMUlVFTC1JT0ZCAAAPAAAADQAAAAwAAAAtUERSVQAAAKgyAAB5MgAARjIAAJYwAACRMAAAAgAAAAMAAAAE");l(e,31686,"gD8AAIC/");l(e,31726,"gD8AAIC/CgAAAAkAAAAI");l(e,31752,"CtcjPAAAAAAUAAAAFQAAABYAAAAXAAAAAwAAAAUAAAAFAAAABAAAAAUAAAAFAAAAAAAAALx2AAD1AAAA9gAAAPcAAAD4AAAAdWZtcw==");l(e,31840,"gCIAAMoZAADSHwAABCAAAMQZ");l(e,31872,"9hYAAOwSAAAiEwAA6BIAAB4T");l(e,31904,"gCIAADghAAASJQAA5x4AABMaAAAfIAAATBQAAAIAAAABAAAABAAAAAMAAAAAAAAAiCwAAFYPAAAiJwAAciEAAEQO");l(e,31988,"AQAAAAIAAAAAAAAACQAAAAkAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAAAAAAAFyCAAD5AAAA+gAAAPsAAAD8AAAA/QAAAP4AAAD/AAAAAAEAAAEBAAACAQAAAwEAAAQBAAAFAQAABgEAAAAAAAAkggAABwEAAAgBAAAJAQAACgEAAAsBAAAMAQAADQEAAA4BAAAPAQAAEAEAABEBAAASAQAAEwEAABQBAAAVAQAAFgEAABcBAAAYAQAAGQEAABoBAAAJAQAAGwEAAL4YAAAxHwAAIx8AAOwSAAAiEwAAniAAAAAAAAA0gwAAHAEAAB0BAAAeAQAAHwEAACABAAAAAAAAUIMAAAcBAAAhAQAAIgEAACMBAAAkAQAAJQEAACYBAAAOAQAADwEAABABAAARAQAAEgEAABMBAAAnAQAAFQEAACgBAAAXAQAAGAEAACkBAAAaAQAAKgEAACsBAAAAAAAAcIMAACwBAAAtAQAALgEAAC8BAAAwAQAAMQEAAA0BAAAOAQAADwEAABABAAARAQAAMgEAABMBAAAzAQAAFQEAADQBAAAXAQAAGAEAADUBAAAaAQAANgEAADcBAAAAAAAAkIMAAAcBAAA4AQAAOQEAAAoBAAA6AQAAOwEAAA0BAAAOAQAADwEAABABAAA8AQAAEgEAABMBAAAUAQAAFQEAABYBAAAXAQAAGAEAAD0BAAAaAQAAPgEAAD8BAAAAAAAArIMAAAcBAABAAQAAQQEAAAoBAABCAQAAQwEAAA0BAAAOAQAADwEAABABAAARAQAARAEAABMBAABFAQAAFQEAAEYBAAAXAQAAGAEAAEcBAAAaAQAASAEAAEkBAAAAAAAAyIMAAAcBAABKAQAASwEAAAoBAABMAQAATQEAAA0BAAAOAQAADwEAABABAAARAQAATgEAABMBAABPAQAAFQEAAFABAAAXAQAAGAEAAFEBAAAaAQAAUgEAAFMBAAAAAAAA7IMAAFQBAABVAQAAVgEAAFcBAABYAQAAWQEAAFoBAABbAQAAXAEAAF0BAAARAQAAEgEAABMBAAAUAQAAFQEAAF4BAABfAQAAGAEAAGABAAAaAQAAYQEAAGIBAAAAAAAAgIQAAGMBAABkAQAAZQEAAGYBAABnAQAAaAEAAGkBAAAOAQAAagEAAGsBAAARAQAAEgEAABMBAAAUAQAAFQEAAGwBAAAXAQAAGAEAAG0BAAAaAQAAbgEAAG8BAAAAAAAADIQAAHABAABxAQAAcgEAAHMBAAB0AQAAdQEAAHYBAAB3AQAAeAEAAHkBAAARAQAAegEAABMBAAB7AQAAFQEAAHwBAAB9AQAAGAEAAH4BAAAaAQAAfwEAAIABAAAAAAAASIQAAIEBAACCAQAAgwEAAIQBAACFAQAAhgEAAIcBAACIAQAAiQEAAIoBAACLAQAAjAEAABMBAACNAQAAFQEAAI4BAACPAQAAGAEAAJABAACRAQAAkgEAAJMBAAAAAAAAZIQAAJQBAACVAQAAlgEAAJcBAAALAQAAmAEAAJkBAACaAQAAmwEAAJwBAACdAQAAngEAABMBAACfAQAAFQEAAKABAAChAQAAGAEAAKIBAAAaAQAAowEAAKQBAAAAAAAAKIQAAHABAAClAQAACQEAAAoBAAALAQAADAEAAA0BAAAOAQAADwEAABABAAARAQAAEgEAABMBAAAUAQAAFQEAABYBAAAXAQAAGAEAABkBAAAaAQAACQEAABsBAACsoQAALIIAADEzQmFzaWNNb3ZlbWVudACsoQAARIIAADE4QWJzdHJhY3RUaW1lZE1vcnBoAAAAAPChAABoggAAPIIAADE2QXRvbWljVGltZWRNb3JwaAAAAAAAALyCAACmAQAApwEAAKgBAACpAQAAqgEAAP4AAACrAQAArAEAAK0BAACuAQAArwEAALABAAAFAQAABgEAAPChAADIggAAPIIAADEzUGFyVGltZWRNb3JwaAAAAAAAGIMAALEBAACyAQAAswEAALQBAAC1AQAA/gAAALYBAAC3AQAArQEAALgBAAC5AQAAugEAAAUBAAAGAQAA8KEAACSDAAA8ggAAMTNTZXFUaW1lZE1vcnBoAKyhAAA8gwAAMTdOb25tYW51YWxNb3ZlbWVudADwoQAAXIMAACSCAAAxNkRpcmVjdGVkTW92ZW1lbnQAAPChAAB8gwAAJIIAADE2Q2lyY3VsYXJNb3ZlbWVudAAA8KEAAJyDAAAkggAAMTBOb01vdmVtZW50AAAAAPChAAC4gwAAJIIAADEzV3Jpc3RNb3ZlbWVudADwoQAA1IMAACSCAAAxOEZpbmdlclBsYXlNb3ZlbWVudAAAAADwoQAA+IMAACSCAAAxNFJlcGVhdE1vdmVtZW50AAAAAPChAAAYhAAAKIQAADExUGFyTW92ZW1lbnQAAADwoQAANIQAACSCAAAxNkNvbXBvdW5kTW92ZW1lbnQAAPChAABUhAAAKIQAADExU2VxTW92ZW1lbnQAAADwoQAAcIQAACSCAAAxM1NwbGl0TW92ZW1lbnQA8KEAAIyEAAAkggAAMTdUYXJnZXR0ZWRNb3ZlbWVudAADAAIAAwACAAIAAgABAAEAAQABAAEAAAABAAAAAQAAAAIAAAAD");l(e,34e3,"ojIAAHMyAAA7MgAAJTIAABQyAAAAAAAAFIUAALsBAAC8AQAACQEAAAkBAAAAAAAALIUAAL0BAAC+AQAAvwEAAMABAACsoQAAHIUAADEwWE1MV3JhcHBlcgAAAADwoQAAOIUAABSFAAAxMkV4cGF0V3JhcHBlcgAAXVUAAM5rAAB3bAAAaWkAcGlpAGlwAGlpaQBpcGlpAGlpaWRkAGlwZABpcGRkZGRkZGQAaQBwAACsoQAAiIUAADEyQW5pbWdlbkVycm9yAACsoQAAoIUAADEyR2VuZXJhbEVycm9yAHZlcnNpb24=");l(e,34240,"eG1sPWh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZQ==");l(e,34292,"JA4AAJcXAAAIKQAArDkAALseAABNGAAAViIAAO8kAAAZEgAA8ycAALANAABEKAAA9wwAAPUYAADcDAAAxSQAAIENAAC4IQAAMBMAACMdAAAWKAAA3yUAACwQAAAxDQAAlxMAAOcbAAC5DgAAnw4AAAsNAABmKgAARSoAALIpAADIKgAAsyoAAN4pAACQKgAAVQ0AAB0mAAAKKgAATxYAAENEQVRBAElEAElEUkVGAElEUkVGUwBFTlRJVFkARU5USVRJRVMATk1UT0tFTgBOTVRPS0VOUwAAAAAAAGh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZQ==");l(e,34560,"aHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8ARE9DVFlQRQBTWVNURU0AUFVCTElDAEVOVElUWQBBVFRMSVNUAEVMRU1FTlQATk9UQVRJT04ATkRBVEEAAAAAAAAAgIcAAIaHAACJhwAAj4cAADSHAACWhwAAn4cAAKeHAABDREFUQQBJRABJRFJFRgBJRFJFRlMARU5USVRJRVMATk1UT0tFTgBOTVRPS0VOUwBJTVBMSUVEAFJFUVVJUkVEAEZJWEVEAEVNUFRZAEFOWQBQQ0RBVEE=");l(e,34816,"//////////////////////////////////////////8AAAAAAAAABP7//4f+//8HAAAAAAAAAAD//3////9///////////N//v3//////3///////////w/g/////zH8////AAAAAAAAAP//////////////AQD4Aw==");l(e,34960,"QNf///v/////f39U/f8PAP7f///////////+3/////8DAP///////58Z////zz8DAAAAAAAA/v///38C/v///38=");l(e,35034,"////BwcAAAAAAP7//wf+BwAAAAD+//////////98/38vAGAAAADg////////IwAAAP8DAAAA4J/5///9xQMAAACwAwADAOCH+f///W0DAAAAXgAAHADgr/v///3tIwAAAAABAAAA4J/5///9zSMAAACwAwAAAODHPdYYx78DAAAAAAAAAADg3/3///3vAwAAAAADAAAA4N/9///97wMAAABAAwAAAODf/f///f8DAAAAAAM=");l(e,35232,"/v////9/DQA/AAAAAAAAAJYl8P6ubA0gHw==");l(e,35272,"//7///8D");l(e,35316,"/////z8A/////38A7doHAAAAAFABUDGCq2IsAAAAAEAAyYD1BwAAAAAIAQL/////////////////////////D///////////////A///Pz//////Pz//qv///z/////////fX9wfzw//H9wfAAAAAEBM");l(e,35440,"Bw==");l(e,35456,"gAAAAP4DAAD+////////////HwD+/////////////wfg/////x8=");l(e,35520,"//////////////////////////8/");l(e,35552,"//////////////////////////8P");l(e,35589,"YP8H/v//h/7//wcAAAAAAACAAP//f////3//////AAAAAAAAAP//////////////AQD4AwADAAAAAAD//////////z8AAAADAAAAwNf///v/////f39U/f8PAP7f///////////+3/////97AP///////58Z////zz8DAAAAAAAA/v///38C/v///38A/v/7//+7FgD///8HBwAAAAAA/v//B///BwD/A////////////3z/f+///z3/A+7////////z/z8e/8//AADun/n///3F0585gLDP/wMA5If5///9bdOHOQBewP8fAO6v+////e3zvzsAAMH/AADun/n///3N8485wLDD/wAA7Mc91hjHv8PHPYAAgP8AAO7f/f///e/D3z1gAMP/AADs3/3///3vw989YEDD/wAA7N/9///9/8PPPYAAw/8=");l(e,35936,"/v////9//wf/f/8DAAAAAJYl8P6ubP87Xz//AwAAAAAAAAAD/wOgwv/+////A/7/3w+//v8//gI=");l(e,36026,"/x8CAAAAoAAAAP7/PgD+////////////H2b+/////////////3fBAQAAwgEAAMMBAADEAQAAxQEAAMYBAADHAQAAyAEAAMkBAADKAQAAywEAAMwBAADNAQAAzgEAAM8BAADQAQAAAQ==");l(e,36145,"FQoAAAk=");l(e,36168,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");l(e,36432,"AgMEBQYHCAAACQoLDA0ODxAR");l(e,36462,"EhMAFA==");l(e,36480,"FRY=");l(e,36510,"AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBFw==");l(e,36604,"AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBARg=");l(e,36688,"GQMaGxwdHgAAHyAhIiMkJRAR");l(e,36718,"EhMmFA==");l(e,36736,"JxY=");l(e,36766,"AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBFw==");l(e,36860,"AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBARg=");l(e,36944,"wQEAAMIBAADDAQAAxAEAAMUBAADGAQAAxwEAAMgBAADJAQAAygEAAMsBAADMAQAAzQEAAM4BAADRAQAA0gEAAAEAAAAB");l(e,37025,"FQoAABU=");l(e,37048,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBgYGBgYGBgYGBgYGBgYGBgcHBwcH");l(e,37270,"AQHTAQAA1AEAANUBAADWAQAA1wEAANUBAADYAQAA2QEAANoBAABDREFUQVs=");l(e,37328,"6JEAAPORAAD8kQAAApIAAAmSAAASkgAASVNPLTg4NTktMQBVUy1BU0NJSQBVVEYtOABVVEYtMTYAVVRGLTE2QkUAVVRGLTE2TEUAAAAAAADgjAAAPJIAAKiTAAAUlQAAFJUAAICWAACokwAAwQEAAMIBAADDAQAAxAEAAMUBAADGAQAAxwEAAMgBAADJAQAAygEAAMsBAADMAQAAzQEAAM4BAADbAQAA0AEAAAEAAAAB");l(e,37517,"FQoAAAk=");l(e,37540,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwc");l(e,37800,"wQEAAMIBAADDAQAAxAEAAMUBAADGAQAAxwEAAMgBAADJAQAAygEAAMsBAADMAQAAzQEAAM4BAADRAQAA0gEAAAEAAAAB");l(e,37881,"FQoAAAk=");l(e,37904,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBgYGBgYGBgYGBgYGBgYGBgcHBwcH");l(e,38126,"AQHTAQAA1AEAANUBAADWAQAA1wEAANUBAADYAQAA2QEAANoBAADcAQAA3QEAAN4BAADfAQAA4AEAAOEBAADiAQAA4wEAAOQBAADlAQAA5gEAAOcBAADoAQAA6QEAAOoBAADrAQAAAg==");l(e,38245,"FQoAAAk=");l(e,38268,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");l(e,38528,"7AEAAO0BAADuAQAA7wEAAPABAADxAQAA8gEAAPMBAAD0AQAA9QEAAPYBAAD3AQAA+AEAAPkBAAD6AQAA+wEAAAI=");l(e,38609,"FQoAAAk=");l(e,38632,"FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");l(e,38892,"ZW5jb2RpbmcAc3RhbmRhbG9uZQB5ZXMAbm8=");l(e,38932,"gN4oAIDITQAAp3YAADSeAIASxwCAn+4AAH4XAYBcQAGA6WcBAMiQAQBVuAFTdW4ATW9uAFR1ZQBXZWQAVGh1AEZyaQBTYXQAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkASmFuAEZlYgBNYXIAQXByAE1heQBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMASmFudWFyeQBGZWJydWFyeQBNYXJjaABBcHJpbABNYXkASnVuZQBKdWx5AEF1Z3VzdABTZXB0ZW1iZXIAT2N0b2JlcgBOb3ZlbWJlcgBEZWNlbWJlcgBBTQBQTQAlYSAlYiAlZSAlVCAlWQAlbS8lZC8leQAlSDolTTolUwAlSTolTTolUyAlcAAAACVtLyVkLyV5ADAxMjM0NTY3ODkAJWEgJWIgJWUgJVQgJVkAJUg6JU06JVMAAAAAABkACwAZGRkAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAGQAKChkZGQMKBwABAAkLGAAACQYLAAALAAYZAAAAGRkZ");l(e,39377,"DgAAAAAAAAAAGQALDRkZGQANAAACAAkOAAAACQAOAAAO");l(e,39435,"DA==");l(e,39447,"EwAAAAATAAAAAAkMAAAAAAAMAAAM");l(e,39493,"EA==");l(e,39505,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");l(e,39551,"Eg==");l(e,39563,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");l(e,39618,"GgAAABoaGgAAAAAAAAk=");l(e,39667,"FA==");l(e,39679,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU");l(e,39725,"Fg==");l(e,39737,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG");l(e,39812,"XQ==");l(e,39852,"//////////8=");l(e,39920,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAADRdJ4AV529KoBwUg///z4nCgAAAGQAAADoAwAAECcAAKCGAQBAQg8AgJaYAADh9QUYAAAANQAAAHEAAABr////zvv//5K///8AAAAAqJ0AAP4BAAD/AQAAAAIAAAECAAACAgAAAwIAAAQCAAAAAAAAgJ0AAGMAAAAFAgAABgIAAPChAACMnQAA0J4AAE5TdDNfXzI4aW9zX2Jhc2U3ZmFpbHVyZUUAAADwoQAAtJ0AAPSeAABOU3QzX18yMTlfX2lvc3RyZWFtX2NhdGVnb3J5RQBOU3QzX18yMTRlcnJvcl9jYXRlZ29yeUUAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAA0J4AAAcCAAAIAgAABgIAAPChAADcngAAaKEAAE5TdDNfXzIxMnN5c3RlbV9lcnJvckUAAPChAAAAnwAAGJ8AAE5TdDNfXzIxMl9fZG9fbWVzc2FnZUUAAKyhAADSnQAAAAAAAPChAAAwnwAAnKEAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAPChAABgnwAAJJ8AAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAPChAACQnwAAJJ8AAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAPChAADAnwAAhJ8AAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAPChAADwnwAAVJ8AAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAAAAAAAAQKAAAAoCAAALAgAADAIAAA0CAAAOAgAADwIAABACAAARAgAA8KEAAEygAABUnwAATjEwX19jeHhhYml2MTIxX192bWlfY2xhc3NfdHlwZV9pbmZvRQAAAAAAAADUoAAAAQAAABICAAATAgAAAAAAAKygAAABAAAAFAIAABUCAABTdDlleGNlcHRpb24AAAAA8KEAALigAADUoAAAU3QyMGJhZF9hcnJheV9uZXdfbGVuZ3RoAAAAAPChAADgoAAAHKIAAFN0OWJhZF9hbGxvYwAAAAAAAAAAGKEAAAIAAAAWAgAAFwIAAAAAAABooQAAGAIAABkCAAAGAgAA8KEAACShAAAcogAAU3QxMWxvZ2ljX2Vycm9yAAAAAABIoQAAAgAAABoCAAAXAgAA8KEAAFShAAAYoQAAU3QxMmxlbmd0aF9lcnJvcgAAAADwoQAAdKEAAByiAABTdDEzcnVudGltZV9lcnJvcgAAAAAAAADcoQAAXwAAABsCAAAcAgAArKEAAMyhAAAAAAAAVJ8AAAoCAAAdAgAADAIAAA0CAAAOAgAAHgIAAB8CAAAgAgAAU3Q5dHlwZV9pbmZvAAAAAPChAAAQogAAHKIAAAAAAADknwAACgIAACECAAAMAgAADQIAAA4CAAAiAgAAIwIAACQCAABTdDhiYWRfY2FzdACsoQAAnKAAAAAAAAAcogAAAQAAACUCAAAmAg==");l(e,41536,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");l(e,44323,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIzT7thBWes3T8YLURU+yHpP5v2gdILc+8/GC1EVPsh+T/iZS8ifyt6PAdcFDMmpoE8vcvweogHcDwHXBQzJqaRPNsPST/bD0m/5MsWQOTLFsAAAAAAAAAAgNsPSUDbD0nAGC1EVPsh6T8YLURU+yHpv9IhM3982QJA0iEzf3zZAsA=");l(e,44559,"gBgtRFT7IQlAGC1EVPshCcAAAAAAJwIAACcCAAAoAgAAKAIAACgCAAAoAgAAKAIAACgCAAAnAgAAJwIAACgCAAAnAgAAJwIAACcCAAAnAg==");l(e,44672,"KAIAACgCAAAnAgAAJwIAAAAAAAAnAgAAAAAAACgC");l(e,44848,"0O4E");l(e,44868,"j8L1vQAAAAApXI89exQuPg==");l(e,44900,"PQpXPgAAAABcj0K+pHC9vgAAgD8=");l(e,44932,"HwAsACQA//8AAAAALAAeACQA//8AAAAAAwBDAEAA//8AAAAABAADAEEA//8AAAAAAwBAAEEA//8AAAAABABBAAUA//8AAAAAQQBCAAUA//8AAAAABQBCAEQA//8AAAAADAAPADcA//8AAAAADwAOADcA//8AAAAADgA1ADcA//8AAAAADQA1AA4A//8AAAAACwA1AA0A//8DAAAARQBGAEcASAD//0kASgBLAEwA//8DAAAAUQBSAFMAVAD//00ATgBPAFAA//8CAAAARQAKACMAJgBGAP//AgAAAE0ATgAlACIACQD//wIAAAAoACQAHgAiACUA//8CAAAAKQAmACMAHwAkAP//AgAAAAgAAQAHAAAAPgABAP//AgAAAAIAHgAsAB8AGwAdADcANAAzADUAHAAaAB4A//8AAAAAMQAzADQAMgD//wIAAAA7ADUAMwAxADgANQD//wIAAAA8ADcAOgAyADQANwD//wIAAAA2ADUAOAAxADIAOgA3AP//AgAAACEANwAdABsAHwAjAAoA//8CAAAAIAAJACIAHgAaABwANQD//wIAAAAvAC4ABwABAEgARwBGACYAKwAnAC4A//8CAAAALQAuACcAKgAlAE4ATwBQAAAABwAuAP//AgAAAAoARQBJAEoASwBMAEgA//8CAAAACQBQAFQAUwBSAFEATQD//wIAAAA+AAAAQwADAAQABQBEAAEA//8CAAAACgBIACEA//8CAAAACQAgAFAA//8CAAAADAA3AFUARABCABIA//8CAAAAVQA3ACEASAABAEQA//8CAAAACwAQAEAAQwBWADUA//8CAAAAVgBDAAAAUAAgADUA//8CAAAAEQASAEIAQQBAABAA//8CAAAABgAkACgAJQAqACcAKwAmACkAJAD//wMAAQAMABUAFAATAAsA//8PAA4ADQD//wMAAQASABEAEAD//wwAGAAXABYACwD/////AACAP+gDAABSuH4/AAAAAAAAwD/NzIw/zczMPwAAAADD9cg/16PwP65HoT8AAAAAexTOPx+F6z97FK4/AAAAAMP1yD/2KNw/hevRPwAAAADD9cg/w/XIP8P1yD8=");l(e,45776,"zcxMPc3MzD0K16M9AAAAAM3MTD3NzMw9CtejPQAAAADNzEw9zczMPQrXoz0AAAAAzcxMPc3MzD0K16M9AAAAAAAAAAAzMzM/MzMzvwIAAAAK1yM9AAAAAAU=");l(e,45876,"XA==");l(e,45900,"WgAAAFkAAAA05w==");l(e,45924,"Ag==");l(e,45940,"//////////8=");l(e,46008,"KLMAAAAAAAAF");l(e,46028,"/AE=");l(e,46052,"WgAAAP0BAABI5wAAAAQ=");l(e,46076,"AQ==");l(e,46092,"/////wo=");l(e,46160,"wLMAAFCdAAAJAg==")}var r=new ArrayBuffer(16);var s=new Int32Array(r);var t=new Float32Array(r);var u=new Float64Array(r);function v(w){return s[w]}function x(w,y){s[w]=y}function z(){return u[0]}function A(y){u[0]=y}function B(){throw new Error("abort")}function C(y){t[2]=y}function D(){return t[2]}function Ta(q){var E=new ArrayBuffer(17104896);var F=new Int8Array(E);var G=new Int16Array(E);var H=new Int32Array(E);var I=new Uint8Array(E);var J=new Uint16Array(E);var K=new Uint32Array(E);var L=new Float32Array(E);var M=new Float64Array(E);var N=Math.imul;var O=Math.fround;var P=Math.abs;var Q=Math.clz32;var R=Math.min;var S=Math.max;var T=Math.floor;var U=Math.ceil;var V=Math.trunc;var W=Math.sqrt;var X=q.a;var Y=X.a;var Z=X.b;var _=X.c;var $=X.d;var aa=X.e;var ba=X.f;var ca=X.g;var da=X.h;var ea=X.i;var fa=X.j;var ga=X.k;var ha=X.l;var ia=X.m;var ja=X.n;var ka=X.o;var la=X.p;var ma=X.q;var na=X.r;var oa=X.s;var pa=X.t;var qa=X.u;var ra=X.v;var sa=X.w;var ta=X.x;var ua=X.y;var va=X.z;var wa=X.A;var xa=X.B;var ya=X.C;var za=X.D;var Aa=X.E;var Ba=X.F;var Ca=X.G;var Da=X.H;var Ea=X.I;var Fa=X.J;var Ga=X.K;var Ha=323280;var Ia=0;var Ja=0;var Ka=0;
// EMSCRIPTEN_START_FUNCS
function Fr(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=O(0),l=0,m=0,n=O(0),o=0,p=O(0),q=0,r=0,s=O(0),t=0,u=O(0),v=0,w=0,x=0,y=0,z=O(0),A=O(0),C=0,D=0,E=O(0),Q=0,S=0,V=O(0),X=O(0),_=O(0),$=O(0),aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=O(0),na=O(0),oa=0,pa=0,qa=O(0),ra=O(0),sa=0,ta=O(0),ua=O(0),va=O(0),wa=O(0),xa=O(0),za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ia=0,Ja=0,Ka=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=O(0),Za=0,_a=0,$a=0,bb=0,cb=O(0);D=Ha-96|0;Ha=D;H[D+84>>2]=b;H[D+80>>2]=1;Y(47852,34139,D+80|0)|0;H[D+64>>2]=b;da=H[14689];g=I[58752];Y(47173,34173,D- -64|0)|0;a:{b:{if(da?!(g&1)|a:1){H[D>>2]=b;Y(47285,34173,D|0)|0;break b}H[D+52>>2]=H[da+40>>2];H[D+48>>2]=b;H[D+56>>2]=1;Y(47421,34135,D+48|0)|0;a=H[da+40>>2];if((a|0)!=1){H[D+40>>2]=1;H[D+36>>2]=a;H[D+32>>2]=b;Y(47576,34135,D+32|0)|0;break b}_a=da,$a=qb(b),H[_a+16>>2]=$a;j=Xa(20);H[j+16>>2]=0;_a=j,$a=qb(c),H[_a>>2]=$a;_a=j,$a=qb(d),H[_a+4>>2]=$a;_a=j,$a=qb(e),H[_a+8>>2]=$a;_a=j,$a=qb(f),H[_a+12>>2]=$a;H[da+20>>2]=j;d=H[da>>2];e=I[da+4|0];f=I[da+5|0];g=Ha-8e3|0;Ha=g;ga=H[da+16>>2];H[g+7312>>2]=ga;Y(48716,34173,g+7312|0)|0;a=ib(26);H[12762]=a;H[g+7296>>2]=7882;H[g+7300>>2]=12997;H[g+7304>>2]=12843;jc(a,26,14753,g+7296|0);F[H[12762]+25|0]=0;_a=51052,$a=ib(40),H[_a>>2]=$a;ea=+ha()/1e3;c:{if(P(ea)<0x8000000000000000){a=~~ea>>>0;if(P(ea)>=1){c=~~(ea>0?R(T(ea*2.3283064365386963e-10),4294967295):U((ea-+(~~ea>>>0>>>0))*2.3283064365386963e-10))>>>0}else{c=0}break c}a=0;c=-2147483648}H[g+7664>>2]=a;H[g+7668>>2]=c;iq(g+7664|0);ik(H[12763],11532);F[H[12763]+39|0]=0;H[14705]=0;if(M[7365]==0){_a=58920,bb=+ha(),M[_a>>3]=bb}+ha();a=Xa(12);c=Xa(28);H[c+20>>2]=-1;Ec(c,50);H[a>>2]=c;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+4>>2]=c;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+8>>2]=c;H[14706]=a;H[g+7280>>2]=ga;Y(48826,34173,g+7280|0)|0;H[g+7264>>2]=6758;H[g+7268>>2]=12741;H[g+7272>>2]=0;a=H[14706];Kb(a,2,0,14601,g+7264|0);H[g+7252>>2]=0;H[g+7248>>2]=6497;Kb(a,3,1,13794,g+7248|0);H[g+7236>>2]=0;H[g+7232>>2]=10433;Kb(a,3,1,14381,g+7232|0);H[g+7220>>2]=0;H[g+7216>>2]=9642;Kb(a,0,1,14370,g+7216|0);H[g+7204>>2]=0;H[g+7200>>2]=4028;Kb(a,0,1,14553,g+7200|0);H[g+7188>>2]=0;H[g+7184>>2]=8772;Kb(a,2,1,14249,g+7184|0);H[g+7172>>2]=0;H[g+7168>>2]=6109;Kb(a,1,1,13844,g+7168|0);H[g+7156>>2]=0;H[g+7152>>2]=6117;Kb(a,1,1,13487,g+7152|0);H[g+7140>>2]=0;H[g+7136>>2]=6102;Kb(a,1,1,14621,g+7136|0);H[g+7124>>2]=0;H[g+7120>>2]=6127;Kb(a,0,1,13031,g+7120|0);H[g+7108>>2]=0;H[g+7104>>2]=6837;Kb(a,0,1,13124,g+7104|0);H[g+7092>>2]=0;H[g+7088>>2]=4742;Kb(a,0,1,13718,g+7088|0);H[g+7076>>2]=0;H[g+7072>>2]=4907;Kb(a,1,1,13661,g+7072|0);H[g+7064>>2]=0;H[g+7060>>2]=12517;H[g+7056>>2]=6898;Kb(a,0,1,14154,g+7056|0);H[g+7044>>2]=0;H[g+7040>>2]=9888;Kb(a,1,1,13204,g+7040|0);H[g+7028>>2]=0;H[g+7024>>2]=4107;Kb(a,1,1,13544,g+7024|0);H[g+7016>>2]=0;H[g+7012>>2]=34173;H[g+7008>>2]=4082;Kb(a,1,1,14093,g+7008|0);H[g+6996>>2]=0;H[g+6992>>2]=8018;Kb(a,0,1,14300,g+6992|0);H[g+6980>>2]=0;H[g+6976>>2]=10547;Kb(a,1,1,13084,g+6976|0);H[g+6964>>2]=0;H[g+6960>>2]=10467;Kb(a,2,1,13810,g+6960|0);H[g+6948>>2]=0;H[g+6944>>2]=8033;Kb(a,2,1,13915,g+6944|0);H[g+6936>>2]=0;H[g+6932>>2]=5409;H[g+6928>>2]=9722;Kb(a,2,1,13988,g+6928|0);H[g+6916>>2]=0;H[g+6912>>2]=7832;Kb(a,1,1,13329,g+6912|0);H[g+6900>>2]=0;H[g+6896>>2]=6860;Kb(a,2,1,14451,g+6896|0);H[g+6884>>2]=0;H[g+6880>>2]=6850;Kb(a,2,1,14397,g+6880|0);H[g+6868>>2]=0;H[g+6864>>2]=3548;Kb(a,2,1,13747,g+6864|0);H[g+6852>>2]=0;H[g+6848>>2]=5948;Kb(a,0,0,13004,g+6848|0);H[g+6836>>2]=0;H[g+6832>>2]=5955;Kb(a,0,0,14566,g+6832|0);H[g+6820>>2]=0;H[g+6816>>2]=4903;Kb(a,0,0,14041,g+6816|0);H[g+6804>>2]=0;H[g+6800>>2]=5696;Kb(a,0,0,13573,g+6800|0);H[g+6788>>2]=0;H[g+6784>>2]=6679;Kb(a,0,0,13162,g+6784|0);H[g+6772>>2]=0;H[g+6768>>2]=8208;Kb(a,0,0,14504,g+6768|0);H[g+6756>>2]=0;H[g+6752>>2]=8280;Kb(a,0,0,13948,g+6752|0);H[14707]=j;H[g+7360>>2]=0;H[g+7352>>2]=0;H[g+7356>>2]=0;H[g+7348>>2]=d;H[g+7344>>2]=12516;H[g+7340>>2]=11606;H[g+7336>>2]=10432;H[g+7332>>2]=ga;H[g+7328>>2]=6496;if(e){H[g+7352>>2]=5954;a=g+7356|0}else{a=g+7352|0}if(f){H[a>>2]=5947}H[g+6736>>2]=ga;Y(48940,34173,g+6736|0)|0;sp(H[14706],g+7328|0);H[g+6720>>2]=ga;Y(49053,34173,g+6720|0)|0;a=H[14706];_a=58844,$a=qg(H[a>>2],H[a+8>>2],5948)?0:45864,H[_a>>2]=$a;H[g+6704>>2]=11606;H[g+6708>>2]=3;H[g+6712>>2]=12002;H[g+6716>>2]=0;_a=58848,$a=sf(1,g+6704|0),H[_a>>2]=$a;c=qb(dp(H[a>>2],H[a+8>>2],12517));H[14713]=c;if(!(!c|!H[14711])){_a=58844,$a=mf(c,qg(H[a>>2],H[a+8>>2],5955)?11461:4026),H[_a>>2]=$a;db();c=H[14711];H[g+6688>>2]=H[(c?51048:58852)>>2];Wa(c?29355:25253,g+6688|0)}c=H[a>>2];a=H[a+8>>2];_a=58856,$a=dp(c,a,6497),H[_a>>2]=$a;_a=58860,$a=qg(c,a,6679),F[_a|0]=$a;_a=58861,$a=qg(c,a,8208),F[_a|0]=$a;d:{e:{f:{g:{if(H[14705]){break g}H[g+6672>>2]=ga;Y(49169,34173,g+6672|0)|0;Y(49519,40736,0)|0;H[13204]=0;H[13205]=0;a=H[13227];H[13207]=H[13226];H[13208]=a;H[13209]=H[13228];c=H[13230];a=H[13229];H[13210]=a;H[13211]=c;d=H[13231];H[13212]=d;e=H[14681];H[13213]=H[14680];H[13214]=e;H[13215]=H[14682];H[13216]=a;H[13217]=c;H[13218]=d;H[13221]=d;H[13219]=a;H[13220]=c;H[13206]=0;a=g+6656|0;H[a>>2]=12;H[a+4>>2]=0;H[g+6652>>2]=4585;H[g+6648>>2]=11;H[g+6644>>2]=4553;H[g+6640>>2]=10;H[g+6636>>2]=4542;H[g+6632>>2]=9;H[g+6628>>2]=4598;H[g+6624>>2]=8;H[g+6620>>2]=4486;H[g+6616>>2]=7;H[g+6612>>2]=4472;H[g+6608>>2]=6;H[g+6604>>2]=4530;H[g+6600>>2]=5;H[g+6596>>2]=4518;H[g+6592>>2]=4;H[g+6588>>2]=4439;H[g+6584>>2]=3;H[g+6580>>2]=4458;H[g+6576>>2]=2;H[g+6572>>2]=4501;H[g+6568>>2]=1;H[g+6564>>2]=4616;H[g+6560>>2]=0;_a=52888,$a=Dc(4571,g+6560|0),H[_a>>2]=$a;Y(49611,40736,0)|0;a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[14676]=a;H[14674]=a;a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[14677]=a;H[14675]=a;H[g+6528>>2]=3;H[g+6532>>2]=7820;H[g+6536>>2]=4;H[g+6540>>2]=7778;H[g+6544>>2]=5;H[g+6548>>2]=4358;a=g+6552|0;H[a>>2]=6;H[a+4>>2]=0;H[g+6512>>2]=1;H[g+6516>>2]=7789;H[g+6520>>2]=2;H[g+6524>>2]=7800;_a=58372,$a=vb(6497,g+6512|0),H[_a>>2]=$a;H[g+6496>>2]=1;H[g+6500>>2]=8543;H[g+6504>>2]=2;H[g+6508>>2]=0;_a=58384,$a=Dc(8532,g+6496|0),H[_a>>2]=$a;H[g+6480>>2]=1;H[g+6484>>2]=3287;H[g+6488>>2]=2;H[g+6492>>2]=0;_a=58388,$a=Dc(8783,g+6480|0),H[_a>>2]=$a;H[g+6416>>2]=3980;H[g+6420>>2]=6;H[g+6424>>2]=9496;H[g+6428>>2]=7;H[g+6432>>2]=4096;H[g+6436>>2]=8;H[g+6440>>2]=4756;H[g+6444>>2]=1;H[g+6448>>2]=3938;H[g+6452>>2]=9;H[g+6456>>2]=4963;H[g+6460>>2]=10;H[g+6464>>2]=4975;H[g+6468>>2]=11;H[g+6472>>2]=6679;H[g+6476>>2]=0;H[g+6400>>2]=10708;H[g+6404>>2]=4;H[g+6408>>2]=4121;H[g+6412>>2]=5;_a=58392,$a=sf(3,g+6400|0),H[_a>>2]=$a;H[g+6384>>2]=3;H[g+6388>>2]=8779;a=g+6392|0;H[a>>2]=4;H[a+4>>2]=0;H[g+6368>>2]=1;H[g+6372>>2]=8051;H[g+6376>>2]=2;H[g+6380>>2]=7911;_a=58396,$a=Dc(8047,g+6368|0),H[_a>>2]=$a;H[g+6320>>2]=3;H[g+6324>>2]=7978;H[g+6328>>2]=7;H[g+6332>>2]=9395;H[g+6336>>2]=5;H[g+6340>>2]=8179;H[g+6344>>2]=6;H[g+6348>>2]=9475;H[g+6352>>2]=4;H[g+6356>>2]=6845;a=g+6360|0;H[a>>2]=8;H[a+4>>2]=0;H[g+6304>>2]=1;H[g+6308>>2]=8161;H[g+6312>>2]=2;H[g+6316>>2]=6890;_a=58400,$a=Dc(4191,g+6304|0),H[_a>>2]=$a;H[g+6272>>2]=3;H[g+6276>>2]=4013;H[g+6280>>2]=4;H[g+6284>>2]=4020;a=g+6288|0;H[a>>2]=5;H[a+4>>2]=0;H[g+6256>>2]=1;H[g+6260>>2]=8623;H[g+6264>>2]=2;H[g+6268>>2]=8523;_a=58404,$a=Dc(8673,g+6256|0),H[_a>>2]=$a;H[g+6240>>2]=1;H[g+6244>>2]=10025;H[g+6248>>2]=2;H[g+6252>>2]=0;_a=58408,$a=vb(9962,g+6240|0),H[_a>>2]=$a;Y(46611,40736,0)|0;H[g+6232>>2]=2;H[g+6236>>2]=0;H[g+6228>>2]=11035;H[g+6224>>2]=1;_a=58420,$a=Hj(3713,g+6224|0),H[_a>>2]=$a;H[g+6208>>2]=1;H[g+6212>>2]=9630;H[g+6216>>2]=2;H[g+6220>>2]=0;_a=58424,$a=vb(6342,g+6208|0),H[_a>>2]=$a;H[g+5872>>2]=7;H[g+5876>>2]=7698;H[g+5880>>2]=6;H[g+5884>>2]=7432;H[g+5888>>2]=8;H[g+5892>>2]=6239;H[g+5896>>2]=9;H[g+5900>>2]=7385;H[g+5904>>2]=5;H[g+5908>>2]=9266;H[g+5912>>2]=16;H[g+5916>>2]=6487;H[g+5920>>2]=15;H[g+5924>>2]=6460;H[g+5928>>2]=17;H[g+5932>>2]=9234;H[g+5936>>2]=18;H[g+5940>>2]=4873;H[g+5944>>2]=19;H[g+5948>>2]=9195;H[g+5952>>2]=20;H[g+5956>>2]=6441;H[g+5960>>2]=21;H[g+5964>>2]=9210;H[g+5968>>2]=22;H[g+5972>>2]=5510;H[g+5976>>2]=23;H[g+5980>>2]=5117;H[g+5984>>2]=24;H[g+5988>>2]=9323;H[g+5992>>2]=26;H[g+5996>>2]=7501;H[g+6e3>>2]=27;H[g+6004>>2]=9303;H[g+6008>>2]=28;H[g+6012>>2]=9259;H[g+6016>>2]=29;H[g+6020>>2]=5110;H[g+6024>>2]=25;H[g+6028>>2]=9280;H[g+6032>>2]=30;H[g+6036>>2]=10566;H[g+6040>>2]=33;H[g+6044>>2]=4195;H[g+6048>>2]=34;H[g+6052>>2]=6480;H[g+6056>>2]=31;H[g+6060>>2]=9847;H[g+6064>>2]=32;H[g+6068>>2]=5517;H[g+6072>>2]=35;H[g+6076>>2]=5196;H[g+6080>>2]=36;H[g+6084>>2]=7519;H[g+6088>>2]=37;H[g+6092>>2]=9354;H[g+6096>>2]=38;H[g+6100>>2]=7526;H[g+6104>>2]=39;H[g+6108>>2]=9292;H[g+6112>>2]=40;H[g+6116>>2]=9316;H[g+6120>>2]=41;H[g+6124>>2]=7425;H[g+6128>>2]=42;H[g+6132>>2]=4121;H[g+6136>>2]=10;H[g+6140>>2]=3980;H[g+6144>>2]=11;H[g+6148>>2]=9496;H[g+6152>>2]=12;H[g+6156>>2]=4096;H[g+6160>>2]=13;H[g+6164>>2]=4756;H[g+6168>>2]=14;H[g+6172>>2]=7603;H[g+6176>>2]=43;H[g+6180>>2]=10033;H[g+6184>>2]=44;H[g+6188>>2]=10913;a=g+6192|0;H[a>>2]=45;H[a+4>>2]=0;H[g+5856>>2]=2;H[g+5860>>2]=8681;H[g+5864>>2]=1;H[g+5868>>2]=7439;_a=58380,$a=vb(10734,g+5856|0),H[_a>>2]=$a;H[g+5408>>2]=3;H[g+5412>>2]=7800;H[g+5416>>2]=4;H[g+5420>>2]=7820;H[g+5424>>2]=5;H[g+5428>>2]=7778;H[g+5432>>2]=6;H[g+5436>>2]=4358;H[g+5440>>2]=7;H[g+5444>>2]=8134;H[g+5448>>2]=8;H[g+5452>>2]=8768;H[g+5456>>2]=9;H[g+5460>>2]=8762;H[g+5464>>2]=10;H[g+5468>>2]=7730;H[g+5472>>2]=11;H[g+5476>>2]=10570;H[g+5480>>2]=12;H[g+5484>>2]=7918;H[g+5488>>2]=13;H[g+5492>>2]=9745;H[g+5496>>2]=14;H[g+5500>>2]=7683;H[g+5504>>2]=15;H[g+5508>>2]=7612;H[g+5512>>2]=16;H[g+5516>>2]=7361;H[g+5520>>2]=18;H[g+5524>>2]=7396;H[g+5528>>2]=19;H[g+5532>>2]=7407;H[g+5536>>2]=20;H[g+5540>>2]=7374;H[g+5544>>2]=21;H[g+5548>>2]=7350;H[g+5552>>2]=22;H[g+5556>>2]=8746;H[g+5560>>2]=17;H[g+5564>>2]=7335;H[g+5568>>2]=23;H[g+5572>>2]=7311;H[g+5576>>2]=24;H[g+5580>>2]=7287;H[g+5584>>2]=25;H[g+5588>>2]=7299;H[g+5592>>2]=26;H[g+5596>>2]=3702;H[g+5600>>2]=27;H[g+5604>>2]=9568;H[g+5608>>2]=28;H[g+5612>>2]=7418;H[g+5616>>2]=29;H[g+5620>>2]=7326;H[g+5624>>2]=30;H[g+5628>>2]=8119;H[g+5632>>2]=31;H[g+5636>>2]=6272;H[g+5640>>2]=32;H[g+5644>>2]=6529;H[g+5648>>2]=39;H[g+5652>>2]=4392;H[g+5656>>2]=46;H[g+5660>>2]=6246;H[g+5664>>2]=33;H[g+5668>>2]=6504;H[g+5672>>2]=40;H[g+5676>>2]=4378;H[g+5680>>2]=47;H[g+5684>>2]=6313;H[g+5688>>2]=34;H[g+5692>>2]=6577;H[g+5696>>2]=41;H[g+5700>>2]=4410;H[g+5704>>2]=48;H[g+5708>>2]=6300;H[g+5712>>2]=35;H[g+5716>>2]=6569;H[g+5720>>2]=42;H[g+5724>>2]=9328;H[g+5728>>2]=49;H[g+5732>>2]=5100;H[g+5736>>2]=50;H[g+5740>>2]=5869;H[g+5744>>2]=51;H[g+5748>>2]=6256;H[g+5752>>2]=36;H[g+5756>>2]=6513;H[g+5760>>2]=43;H[g+5764>>2]=9485;H[g+5768>>2]=52;H[g+5772>>2]=6286;H[g+5776>>2]=37;H[g+5780>>2]=6556;H[g+5784>>2]=44;H[g+5788>>2]=9594;H[g+5792>>2]=53;H[g+5796>>2]=9608;H[g+5800>>2]=54;H[g+5804>>2]=11420;H[g+5808>>2]=55;H[g+5812>>2]=6323;H[g+5816>>2]=38;H[g+5820>>2]=6586;H[g+5824>>2]=45;H[g+5828>>2]=4424;H[g+5832>>2]=58;H[g+5836>>2]=8153;H[g+5840>>2]=56;H[g+5844>>2]=8451;a=g+5848|0;H[a>>2]=57;H[a+4>>2]=0;H[g+5392>>2]=1;H[g+5396>>2]=6497;H[g+5400>>2]=2;H[g+5404>>2]=7789;_a=58376,$a=Dc(8041,g+5392|0),H[_a>>2]=$a;a=ib(13);H[14020]=a;H[g+5296>>2]=1;H[g+5300>>2]=3;H[g+5304>>2]=0;H[g+5308>>2]=4;H[g+5312>>2]=0;H[g+5316>>2]=5;H[g+5320>>2]=0;H[g+5324>>2]=6;H[g+5328>>2]=1;H[g+5332>>2]=8;H[g+5336>>2]=0;H[g+5340>>2]=7;H[g+5344>>2]=0;H[g+5348>>2]=9;H[g+5352>>2]=0;H[g+5356>>2]=11;H[g+5360>>2]=0;H[g+5364>>2]=10;H[g+5368>>2]=0;H[g+5372>>2]=12;H[g+5376>>2]=0;H[g+5380>>2]=-1;H[g+5280>>2]=0;H[g+5284>>2]=1;H[g+5288>>2]=1;H[g+5292>>2]=2;d=0;c=g+5280|0;H[(Ha-16|0)+8>>2]=c;while(1){F[a+d|0]=H[c>>2]!=0;d=H[c+4>>2];c=c+8|0;if((d|0)>=0){continue}break}a=ib(52);H[14021]=a;H[g+5200>>2]=11;H[g+5204>>2]=3;H[g+5208>>2]=11;H[g+5212>>2]=4;H[g+5216>>2]=11;H[g+5220>>2]=5;H[g+5224>>2]=11;H[g+5228>>2]=6;H[g+5232>>2]=11;H[g+5236>>2]=7;H[g+5240>>2]=11;H[g+5244>>2]=8;H[g+5248>>2]=11;H[g+5252>>2]=9;H[g+5256>>2]=3;H[g+5260>>2]=10;H[g+5264>>2]=11;H[g+5268>>2]=-1;H[g+5184>>2]=0;H[g+5188>>2]=1;H[g+5192>>2]=3;H[g+5196>>2]=2;d=0;c=g+5184|0;H[(Ha-16|0)+8>>2]=c;while(1){H[a+(d<<2)>>2]=H[c>>2];d=H[c+4>>2];c=c+8|0;if((d|0)>=0){continue}break}_a=56088,$a=ib(52),H[_a>>2]=$a;c=Pd(12889);d=Pd(12945);e=Pd(12945);a=H[14022];G[a>>1]=J[29356];f=I[58714];F[a+32|0]=8;F[a+25|0]=0;F[a+26|0]=16;F[a+24|0]=1;c=c<<7&3968|4096;F[a+21|0]=c;l=c>>>8|0;F[a+22|0]=l;F[a+20|0]=7;F[a+17|0]=c;F[a+18|0]=l;F[a+16|0]=7;F[a+13|0]=0;F[a+14|0]=17;F[a+12|0]=7;F[a+9|0]=0;F[a+10|0]=16;F[a+8|0]=1;F[a+5|0]=0;F[a+6|0]=16;F[a+4|0]=1;F[a+44|0]=7;F[a+36|0]=8;F[a+28|0]=8;F[a+2|0]=f;c=d<<7&3968|4096;F[a+45|0]=c;F[a+46|0]=c>>>8;d=e<<7&3968|4128;F[a+33|0]=d;e=d>>>8|0;F[a+34|0]=e;F[a+37|0]=d;F[a+38|0]=e;F[a+29|0]=d;F[a+30|0]=e;F[a+49|0]=c;F[a+50|0]=c>>>8;F[a+48|0]=7;F[a+41|0]=c;F[a+42|0]=c>>>8;F[a+40|0]=7;_a=56092,$a=ib(28),H[_a>>2]=$a;Y(46674,40736,0)|0;a=g+5088|0;H[a>>2]=0;H[a+4>>2]=0;H[g+5096>>2]=6;a=g+5104|0;H[a>>2]=0;H[a+4>>2]=0;H[g+5112>>2]=1;a=g+5120|0;H[a>>2]=0;H[a+4>>2]=0;H[g+5128>>2]=2;a=g+5136|0;H[a>>2]=0;H[a+4>>2]=1071644672;H[g+5144>>2]=3;a=g+5152|0;H[a>>2]=0;H[a+4>>2]=1072693248;H[g+5160>>2]=4;a=g+5168|0;H[a>>2]=0;H[a+4>>2]=1073741824;H[g+5176>>2]=-1;H[g+5072>>2]=0;H[g+5076>>2]=0;H[g+5080>>2]=5;d=H[14023];a=0;c=g+5072|0;H[(Ha-16|0)+12>>2]=c;while(1){e=d+(a<<16>>14)|0;a=c+7&-8;L[e>>2]=M[a>>3];c=a+12|0;a=H[a+8>>2];if(!(a&32768)){continue}break}Y(46734,40736,0)|0;H[g+5060>>2]=0;H[g+5056>>2]=3;H[g+5052>>2]=10570;H[g+5048>>2]=2;H[g+5044>>2]=7918;H[g+5040>>2]=1;_a=56096,$a=Hj(7730,g+5040|0),H[_a>>2]=$a;Y(46787,40736,0)|0;H[g+5036>>2]=0;H[g+5032>>2]=44;H[g+5028>>2]=8738;H[g+5024>>2]=43;H[g+5020>>2]=8217;H[g+5016>>2]=42;H[g+5012>>2]=10445;H[g+5008>>2]=41;H[g+5004>>2]=6704;H[g+5e3>>2]=40;H[g+4996>>2]=7741;H[g+4992>>2]=39;H[g+4988>>2]=7753;H[g+4984>>2]=38;H[g+4980>>2]=8378;H[g+4976>>2]=37;H[g+4972>>2]=8391;H[g+4968>>2]=36;H[g+4964>>2]=8404;H[g+4960>>2]=35;H[g+4956>>2]=9406;H[g+4952>>2]=34;H[g+4948>>2]=6793;H[g+4944>>2]=33;H[g+4940>>2]=6804;H[g+4936>>2]=32;H[g+4932>>2]=5404;H[g+4928>>2]=31;H[g+4924>>2]=5501;H[g+4920>>2]=30;H[g+4916>>2]=9485;H[g+4912>>2]=29;H[g+4908>>2]=10644;H[g+4904>>2]=28;H[g+4900>>2]=10658;H[g+4896>>2]=27;H[g+4892>>2]=5633;H[g+4888>>2]=26;H[g+4884>>2]=5091;H[g+4880>>2]=25;H[g+4876>>2]=11026;H[g+4872>>2]=16;H[g+4868>>2]=6750;H[g+4864>>2]=24;H[g+4860>>2]=8484;H[g+4856>>2]=23;H[g+4852>>2]=8510;H[g+4848>>2]=22;H[g+4844>>2]=8515;H[g+4840>>2]=21;H[g+4836>>2]=4101;H[g+4832>>2]=20;H[g+4828>>2]=5392;H[g+4824>>2]=19;H[g+4820>>2]=6736;H[g+4816>>2]=18;H[g+4812>>2]=8235;H[g+4808>>2]=17;H[g+4804>>2]=11051;H[g+4800>>2]=15;H[g+4796>>2]=7944;H[g+4792>>2]=14;H[g+4788>>2]=10158;H[g+4784>>2]=13;H[g+4780>>2]=4007;H[g+4776>>2]=12;H[g+4772>>2]=7935;H[g+4768>>2]=11;H[g+4764>>2]=10222;H[g+4760>>2]=10;H[g+4756>>2]=9563;H[g+4752>>2]=9;H[g+4748>>2]=4305;H[g+4744>>2]=8;H[g+4740>>2]=8083;H[g+4736>>2]=7;H[g+4732>>2]=6787;H[g+4728>>2]=5;H[g+4724>>2]=10132;H[g+4720>>2]=4;H[g+4716>>2]=10205;H[g+4712>>2]=3;H[g+4708>>2]=8256;H[g+4704>>2]=1;H[g+4700>>2]=8013;H[g+4696>>2]=2;H[g+4692>>2]=8073;H[g+4688>>2]=6;_a=56100,$a=Dc(8246,g+4688|0),H[_a>>2]=$a;Y(46841,40736,0)|0;H[g+4684>>2]=0;H[g+4680>>2]=3;H[g+4676>>2]=10180;H[g+4672>>2]=4;H[g+4668>>2]=10193;H[g+4664>>2]=1;H[g+4660>>2]=5072;H[g+4656>>2]=2;_a=56104,$a=vb(5081,g+4656|0),H[_a>>2]=$a;Y(46903,40736,0)|0;H[g+4652>>2]=0;H[g+4648>>2]=4;H[g+4644>>2]=10180;H[g+4640>>2]=3;H[g+4636>>2]=10193;H[g+4632>>2]=4;H[g+4628>>2]=5072;H[g+4624>>2]=3;H[g+4620>>2]=5081;H[g+4616>>2]=4;H[g+4612>>2]=6596;H[g+4608>>2]=3;H[g+4604>>2]=8196;H[g+4600>>2]=2;H[g+4596>>2]=8146;H[g+4592>>2]=1;H[g+4588>>2]=6602;H[g+4584>>2]=2;H[g+4580>>2]=8260;H[g+4576>>2]=1;_a=56108,$a=vb(4281,g+4576|0),H[_a>>2]=$a;H[g+4512>>2]=1;H[g+4516>>2]=8146;H[g+4520>>2]=2;H[g+4524>>2]=8196;H[g+4528>>2]=3;H[g+4532>>2]=6596;H[g+4536>>2]=4;H[g+4540>>2]=5081;H[g+4544>>2]=4;H[g+4548>>2]=5072;H[g+4552>>2]=3;H[g+4556>>2]=10193;H[g+4560>>2]=4;H[g+4564>>2]=10180;H[g+4568>>2]=3;H[g+4572>>2]=0;H[g+4496>>2]=1;H[g+4500>>2]=8260;H[g+4504>>2]=2;H[g+4508>>2]=6602;_a=56112,$a=vb(4281,g+4496|0),H[_a>>2]=$a;c=ib(180);H[14029]=c;a=0;h:{while(1){if((a|0)==45){i:{H[c+36>>2]=2;H[c+40>>2]=2;H[c+28>>2]=1;H[c+32>>2]=2;a=g+4488|0;H[a>>2]=4;H[a+4>>2]=0;H[g+4484>>2]=10919;H[g+4480>>2]=3;H[g+4476>>2]=7911;H[g+4472>>2]=2;H[g+4468>>2]=9490;H[g+4464>>2]=1;H[g+4460>>2]=8504;H[g+4456>>2]=6;H[g+4452>>2]=5196;H[g+4448>>2]=5;_a=56120,$a=Dc(8223,g+4448|0),H[_a>>2]=$a;H[g+4432>>2]=1;H[g+4436>>2]=9508;H[g+4440>>2]=0;H[g+4444>>2]=0;_a=56124,$a=vb(9360,g+4432|0),H[_a>>2]=$a;H[g+4400>>2]=9568;H[g+4404>>2]=7326;H[g+4408>>2]=7396;H[g+4412>>2]=7407;H[g+4416>>2]=7361;H[g+4420>>2]=7350;H[g+4424>>2]=7374;H[g+4428>>2]=0;H[g+4384>>2]=7311;H[g+4388>>2]=7287;H[g+4392>>2]=7299;H[g+4396>>2]=3702;e=Ha-16|0;Ha=e;d=g+4384|0;H[e+12>>2]=d;h=7335;a=d;f=1;while(1){if(h){c=a+4|0;H[e+12>>2]=c;f=f+1|0;h=H[a>>2];a=c;continue}break}c=Xa(28);H[c+20>>2]=0;Ec(c,N(f,3)|1);H[e+12>>2]=d;a=7335;while(1){if(a){ob(c,a,1);a=H[e+12>>2];H[e+12>>2]=a+4;a=H[a>>2];continue}break}Ha=e+16|0;H[14032]=c;H[g+4336>>2]=3;H[g+4340>>2]=10889;H[g+4344>>2]=4;H[g+4348>>2]=4678;H[g+4352>>2]=5;H[g+4356>>2]=10886;H[g+4360>>2]=6;H[g+4364>>2]=4686;a=g+4368|0;H[a>>2]=7;H[a+4>>2]=0;H[g+4320>>2]=1;H[g+4324>>2]=4700;H[g+4328>>2]=2;H[g+4332>>2]=10498;_a=56132,$a=Dc(4850,g+4320|0),H[_a>>2]=$a;H[g+4288>>2]=3;H[g+4292>>2]=10740;H[g+4296>>2]=4;H[g+4300>>2]=4695;a=g+4304|0;H[a>>2]=5;H[a+4>>2]=0;H[g+4272>>2]=1;H[g+4276>>2]=4040;H[g+4280>>2]=2;H[g+4284>>2]=5195;_a=56136,$a=Dc(10170,g+4272|0),H[_a>>2]=$a;H[g+4192>>2]=3;H[g+4196>>2]=12883;H[g+4200>>2]=4;H[g+4204>>2]=10981;H[g+4208>>2]=5;H[g+4212>>2]=12826;H[g+4216>>2]=6;H[g+4220>>2]=12934;H[g+4224>>2]=8;H[g+4228>>2]=8057;H[g+4232>>2]=7;H[g+4236>>2]=7837;H[g+4240>>2]=9;H[g+4244>>2]=12942;H[g+4248>>2]=11;H[g+4252>>2]=8066;H[g+4256>>2]=10;H[g+4260>>2]=7849;a=g+4264|0;H[a>>2]=12;H[a+4>>2]=0;H[g+4176>>2]=1;H[g+4180>>2]=5067;H[g+4184>>2]=2;H[g+4188>>2]=12892;_a=58352,$a=Dc(4091,g+4176|0),H[_a>>2]=$a;H[g+4144>>2]=5;H[g+4148>>2]=8057;H[g+4152>>2]=4;H[g+4156>>2]=12942;H[g+4160>>2]=7;H[g+4164>>2]=8066;a=g+4168|0;H[a>>2]=6;H[a+4>>2]=0;H[g+4128>>2]=1;H[g+4132>>2]=5067;H[g+4136>>2]=2;H[g+4140>>2]=12934;_a=58356,$a=vb(4091,g+4128|0),H[_a>>2]=$a;H[g+4112>>2]=1;H[g+4116>>2]=8240;H[g+4120>>2]=2;H[g+4124>>2]=0;_a=58360,$a=Dc(4834,g+4112|0),H[_a>>2]=$a;H[g+4096>>2]=1;H[g+4100>>2]=3644;H[g+4104>>2]=2;H[g+4108>>2]=0;_a=58364,$a=Dc(11276,g+4096|0),H[_a>>2]=$a;a=Xa(264);H[a+256>>2]=-1027080192;H[a+260>>2]=-1027080192;H[a+248>>2]=-1027080192;H[a+252>>2]=-1027080192;H[a+240>>2]=-1027080192;H[a+244>>2]=-1027080192;H[a+232>>2]=-1027080192;H[a+236>>2]=-1027080192;H[a+224>>2]=-1027080192;H[a+228>>2]=-1027080192;H[a+216>>2]=-1027080192;H[a+220>>2]=-1027080192;H[a+208>>2]=-1027080192;H[a+212>>2]=-1027080192;H[a+200>>2]=-1027080192;H[a+204>>2]=-1027080192;H[a+192>>2]=-1027080192;H[a+196>>2]=-1027080192;H[a+184>>2]=-1027080192;H[a+188>>2]=-1027080192;H[a+176>>2]=-1027080192;H[a+180>>2]=-1027080192;H[a+168>>2]=-1027080192;H[a+172>>2]=-1027080192;H[a+160>>2]=-1027080192;H[a+164>>2]=-1027080192;H[a+152>>2]=-1027080192;H[a+156>>2]=-1027080192;H[a+144>>2]=-1027080192;H[a+148>>2]=-1027080192;H[a+136>>2]=-1027080192;H[a+140>>2]=-1027080192;H[a+128>>2]=-1027080192;H[a+132>>2]=-1027080192;H[a+120>>2]=-1027080192;H[a+124>>2]=-1027080192;H[a+112>>2]=-1027080192;H[a+116>>2]=-1027080192;H[a+104>>2]=-1027080192;H[a+108>>2]=-1027080192;H[a+96>>2]=-1027080192;H[a+100>>2]=-1027080192;H[a+88>>2]=-1027080192;H[a+92>>2]=-1027080192;H[a+80>>2]=-1027080192;H[a+84>>2]=-1027080192;H[a+72>>2]=-1027080192;H[a+76>>2]=-1027080192;H[a+64>>2]=-1027080192;H[a+68>>2]=-1027080192;H[a+56>>2]=-1027080192;H[a+60>>2]=-1027080192;H[a+48>>2]=-1027080192;H[a+52>>2]=-1027080192;H[a+40>>2]=-1027080192;H[a+44>>2]=-1027080192;H[a+32>>2]=-1027080192;H[a+36>>2]=-1027080192;H[a+24>>2]=-1027080192;H[a+28>>2]=-1027080192;H[a+16>>2]=-1027080192;H[a+20>>2]=-1027080192;H[a+8>>2]=-1027080192;H[a+12>>2]=-1027080192;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;H[14592]=a;H[g+3680>>2]=1;H[g+3684>>2]=8119;H[g+3688>>2]=1;H[g+3692>>2]=9328;H[g+3696>>2]=0;H[g+3700>>2]=7820;H[g+3704>>2]=1;H[g+3708>>2]=3702;H[g+3712>>2]=0;H[g+3716>>2]=7789;H[g+3720>>2]=1;H[g+3724>>2]=6569;H[g+3728>>2]=0;H[g+3732>>2]=6529;H[g+3736>>2]=0;H[g+3740>>2]=7800;H[g+3744>>2]=0;H[g+3748>>2]=7350;H[g+3752>>2]=1;H[g+3756>>2]=7361;H[g+3760>>2]=1;H[g+3764>>2]=8134;H[g+3768>>2]=1;H[g+3772>>2]=5869;H[g+3776>>2]=0;H[g+3780>>2]=5100;H[g+3784>>2]=1;H[g+3788>>2]=6513;H[g+3792>>2]=0;H[g+3796>>2]=9568;H[g+3800>>2]=1;H[g+3804>>2]=4392;H[g+3808>>2]=0;H[g+3812>>2]=7575;H[g+3816>>2]=0;H[g+3820>>2]=7374;H[g+3824>>2]=1;H[g+3828>>2]=7683;H[g+3832>>2]=1;H[g+3836>>2]=8153;H[g+3840>>2]=0;H[g+3844>>2]=11420;H[g+3848>>2]=0;H[g+3852>>2]=6272;H[g+3856>>2]=0;H[g+3860>>2]=8746;H[g+3864>>2]=1;H[g+3868>>2]=4358;H[g+3872>>2]=0;H[g+3876>>2]=4410;H[g+3880>>2]=0;H[g+3884>>2]=7311;H[g+3888>>2]=1;H[g+3892>>2]=8762;H[g+3896>>2]=1;H[g+3900>>2]=6246;H[g+3904>>2]=0;H[g+3908>>2]=9485;H[g+3912>>2]=0;H[g+3916>>2]=7612;H[g+3920>>2]=1;H[g+3924>>2]=7396;H[g+3928>>2]=1;H[g+3932>>2]=7326;H[g+3936>>2]=1;H[g+3940>>2]=9608;H[g+3944>>2]=0;H[g+3948>>2]=6556;H[g+3952>>2]=0;H[g+3956>>2]=8768;H[g+3960>>2]=1;H[g+3964>>2]=6300;H[g+3968>>2]=0;H[g+3972>>2]=6504;H[g+3976>>2]=0;H[g+3980>>2]=8041;H[g+3984>>2]=1;H[g+3988>>2]=6313;H[g+3992>>2]=0;H[g+3996>>2]=7299;H[g+4e3>>2]=0;H[g+4004>>2]=7335;H[g+4008>>2]=1;H[g+4012>>2]=6286;H[g+4016>>2]=0;H[g+4020>>2]=6577;H[g+4024>>2]=0;H[g+4028>>2]=4378;H[g+4032>>2]=0;H[g+4036>>2]=6256;H[g+4040>>2]=1;H[g+4044>>2]=6323;H[g+4048>>2]=1;H[g+4052>>2]=6586;H[g+4056>>2]=1;H[g+4060>>2]=6497;H[g+4064>>2]=0;H[g+4068>>2]=10570;H[g+4072>>2]=1;H[g+4076>>2]=7407;H[g+4080>>2]=1;H[g+4084>>2]=9594;a=g+4088|0;H[a>>2]=0;H[a+4>>2]=0;H[g+3664>>2]=1;H[g+3668>>2]=7918;H[g+3672>>2]=1;H[g+3676>>2]=7778;_a=58412,$a=vb(7730,g+3664|0),H[_a>>2]=$a;H[g+3568>>2]=1;H[g+3572>>2]=10118;H[g+3576>>2]=1;H[g+3580>>2]=7667;H[g+3584>>2]=0;H[g+3588>>2]=7723;H[g+3592>>2]=1;H[g+3596>>2]=10215;H[g+3600>>2]=1;H[g+3604>>2]=10142;H[g+3608>>2]=1;H[g+3612>>2]=10111;H[g+3616>>2]=1;H[g+3620>>2]=7716;H[g+3624>>2]=0;H[g+3628>>2]=10540;H[g+3632>>2]=0;H[g+3636>>2]=5007;H[g+3640>>2]=1;H[g+3644>>2]=5e3;a=g+3648|0;H[a>>2]=1;H[a+4>>2]=0;H[g+3552>>2]=1;H[g+3556>>2]=10222;H[g+3560>>2]=1;H[g+3564>>2]=10149;_a=58428,$a=vb(7730,g+3552|0),H[_a>>2]=$a;H[g+3536>>2]=1;H[g+3540>>2]=10056;a=g+3544|0;H[a>>2]=1;H[a+4>>2]=0;H[g+3520>>2]=1;H[g+3524>>2]=10913;H[g+3528>>2]=0;H[g+3532>>2]=10071;_a=58432,$a=vb(5202,g+3520|0),H[_a>>2]=$a;_a=58436,$a=vc(0),H[_a>>2]=$a;H[g+3504>>2]=0;H[g+3508>>2]=0;_a=58440,$a=vb(7526,g+3504|0),H[_a>>2]=$a;H[g+3488>>2]=1;H[g+3492>>2]=10056;a=g+3496|0;H[a>>2]=1;H[a+4>>2]=0;H[g+3472>>2]=1;H[g+3476>>2]=10913;H[g+3480>>2]=0;H[g+3484>>2]=10071;_a=58444,$a=vb(5202,g+3472|0),H[_a>>2]=$a;H[g+3440>>2]=0;H[g+3444>>2]=6239;H[g+3448>>2]=0;H[g+3452>>2]=7385;a=g+3456|0;H[a>>2]=0;H[a+4>>2]=0;H[g+3424>>2]=0;H[g+3428>>2]=8681;H[g+3432>>2]=0;H[g+3436>>2]=8614;_a=58448,$a=vb(10734,g+3424|0),H[_a>>2]=$a;H[g+3392>>2]=0;H[g+3396>>2]=10071;H[g+3400>>2]=1;H[g+3404>>2]=10056;a=g+3408|0;H[a>>2]=1;H[a+4>>2]=0;H[g+3376>>2]=1;H[g+3380>>2]=10913;H[g+3384>>2]=0;H[g+3388>>2]=8285;_a=58452,$a=vb(5202,g+3376|0),H[_a>>2]=$a;_a=58456,$a=vc(0),H[_a>>2]=$a;_a=58460,$a=vc(0),H[_a>>2]=$a;H[g+3344>>2]=0;H[g+3348>>2]=10071;H[g+3352>>2]=1;H[g+3356>>2]=10056;a=g+3360|0;H[a>>2]=1;H[a+4>>2]=0;H[g+3328>>2]=1;H[g+3332>>2]=8310;H[g+3336>>2]=0;H[g+3340>>2]=10913;_a=58464,$a=vb(5202,g+3328|0),H[_a>>2]=$a;H[g+3280>>2]=1;H[g+3284>>2]=8614;H[g+3288>>2]=0;H[g+3292>>2]=7432;H[g+3296>>2]=1;H[g+3300>>2]=6239;H[g+3304>>2]=0;H[g+3308>>2]=7385;a=g+3312|0;H[a>>2]=0;H[a+4>>2]=0;H[g+3264>>2]=0;H[g+3268>>2]=8681;H[g+3272>>2]=0;H[g+3276>>2]=7439;_a=58468,$a=vb(10734,g+3264|0),H[_a>>2]=$a;H[g+3232>>2]=0;H[g+3236>>2]=6239;H[g+3240>>2]=0;H[g+3244>>2]=7385;H[g+3248>>2]=0;H[g+3252>>2]=0;H[g+3216>>2]=0;H[g+3220>>2]=8681;H[g+3224>>2]=0;H[g+3228>>2]=8614;_a=58472,$a=vb(10734,g+3216|0),H[_a>>2]=$a;H[g+3184>>2]=1;H[g+3188>>2]=5858;H[g+3192>>2]=1;H[g+3196>>2]=9541;H[g+3200>>2]=0;H[g+3204>>2]=7997;H[g+3208>>2]=1;H[g+3212>>2]=0;H[g+3168>>2]=1;H[g+3172>>2]=10409;H[g+3176>>2]=0;H[g+3180>>2]=8005;_a=58476,$a=vb(7989,g+3168|0),H[_a>>2]=$a;H[g+3152>>2]=0;H[g+3156>>2]=0;_a=58480,$a=vb(4430,g+3152|0),H[_a>>2]=$a;H[g+3136>>2]=1;H[g+3140>>2]=0;_a=58484,$a=vb(4430,g+3136|0),H[_a>>2]=$a;_a=58488,$a=vc(0),H[_a>>2]=$a;_a=58492,$a=vc(0),H[_a>>2]=$a;_a=58496,$a=vc(0),H[_a>>2]=$a;H[g+3088>>2]=0;H[g+3092>>2]=6239;H[g+3096>>2]=0;H[g+3100>>2]=6487;H[g+3104>>2]=0;H[g+3108>>2]=9502;H[g+3112>>2]=0;H[g+3116>>2]=10734;H[g+3120>>2]=0;H[g+3124>>2]=7385;H[g+3128>>2]=0;H[g+3132>>2]=0;H[g+3072>>2]=0;H[g+3076>>2]=8614;H[g+3080>>2]=0;H[g+3084>>2]=9266;_a=58500,$a=vb(8681,g+3072|0),H[_a>>2]=$a;H[g+3040>>2]=0;H[g+3044>>2]=6239;H[g+3048>>2]=0;H[g+3052>>2]=7385;H[g+3056>>2]=0;H[g+3060>>2]=0;H[g+3024>>2]=0;H[g+3028>>2]=8681;H[g+3032>>2]=0;H[g+3036>>2]=8614;_a=58504,$a=vb(10734,g+3024|0),H[_a>>2]=$a;_a=58508,$a=vc(0),H[_a>>2]=$a;_a=58512,$a=vc(0),H[_a>>2]=$a;H[g+3008>>2]=0;H[g+3012>>2]=0;_a=58516,$a=vb(9651,g+3008|0),H[_a>>2]=$a;H[g+2992>>2]=0;H[g+2996>>2]=7556;H[g+3e3>>2]=0;H[g+3004>>2]=0;_a=58520,$a=vb(7536,g+2992|0),H[_a>>2]=$a;_a=58524,$a=vc(0),H[_a>>2]=$a;H[g+2976>>2]=1;H[g+2980>>2]=0;H[g+2960>>2]=0;H[g+2964>>2]=10071;H[g+2968>>2]=1;H[g+2972>>2]=10056;_a=58528,$a=vb(10913,g+2960|0),H[_a>>2]=$a;H[g+2944>>2]=0;H[g+2948>>2]=0;_a=58532,$a=vb(4430,g+2944|0),H[_a>>2]=$a;H[g+2800>>2]=0;H[g+2804>>2]=9266;H[g+2808>>2]=0;H[g+2812>>2]=6239;H[g+2816>>2]=0;H[g+2820>>2]=6487;H[g+2824>>2]=0;H[g+2828>>2]=10734;H[g+2832>>2]=0;H[g+2836>>2]=5117;H[g+2840>>2]=1;H[g+2844>>2]=9323;H[g+2848>>2]=1;H[g+2852>>2]=7501;H[g+2856>>2]=1;H[g+2860>>2]=9303;H[g+2864>>2]=1;H[g+2868>>2]=9259;H[g+2872>>2]=0;H[g+2876>>2]=5110;H[g+2880>>2]=1;H[g+2884>>2]=9280;H[g+2888>>2]=0;H[g+2892>>2]=10566;H[g+2896>>2]=1;H[g+2900>>2]=4195;H[g+2904>>2]=1;H[g+2908>>2]=6480;H[g+2912>>2]=0;H[g+2916>>2]=9847;H[g+2920>>2]=0;H[g+2924>>2]=5517;H[g+2928>>2]=1;H[g+2932>>2]=7385;H[g+2936>>2]=0;H[g+2940>>2]=0;H[g+2784>>2]=1;H[g+2788>>2]=8681;H[g+2792>>2]=0;H[g+2796>>2]=8614;_a=58536,$a=vb(5510,g+2784|0),H[_a>>2]=$a;_a=58540,$a=vc(0),H[_a>>2]=$a;H[g+2768>>2]=0;H[g+2772>>2]=7556;H[g+2776>>2]=0;H[g+2780>>2]=0;_a=58544,$a=vb(7536,g+2768|0),H[_a>>2]=$a;H[g+2752>>2]=0;H[g+2756>>2]=0;_a=58548,$a=vb(4430,g+2752|0),H[_a>>2]=$a;H[g+2736>>2]=1;H[g+2740>>2]=0;_a=58552,$a=vb(5007,g+2736|0),H[_a>>2]=$a;H[g+2704>>2]=0;H[g+2708>>2]=6239;H[g+2712>>2]=0;H[g+2716>>2]=7385;H[g+2720>>2]=0;H[g+2724>>2]=0;H[g+2688>>2]=0;H[g+2692>>2]=8681;H[g+2696>>2]=0;H[g+2700>>2]=8614;_a=58556,$a=vb(10734,g+2688|0),H[_a>>2]=$a;_a=58560,$a=vc(0),H[_a>>2]=$a;H[g+2672>>2]=0;H[g+2676>>2]=0;_a=58564,$a=vb(9614,g+2672|0),H[_a>>2]=$a;_a=58568,$a=vc(0),H[_a>>2]=$a;H[g+2368>>2]=0;H[g+2372>>2]=10222;H[g+2376>>2]=1;H[g+2380>>2]=10149;H[g+2384>>2]=1;H[g+2388>>2]=4201;H[g+2392>>2]=1;H[g+2396>>2]=9745;H[g+2400>>2]=0;H[g+2404>>2]=10748;H[g+2408>>2]=0;H[g+2412>>2]=9733;H[g+2416>>2]=0;H[g+2420>>2]=6077;H[g+2424>>2]=0;H[g+2428>>2]=5166;H[g+2432>>2]=1;H[g+2436>>2]=9682;H[g+2440>>2]=1;H[g+2444>>2]=6052;H[g+2448>>2]=0;H[g+2452>>2]=4987;H[g+2456>>2]=0;H[g+2460>>2]=9672;H[g+2464>>2]=1;H[g+2468>>2]=9665;H[g+2472>>2]=1;H[g+2476>>2]=5429;H[g+2480>>2]=1;H[g+2484>>2]=5422;H[g+2488>>2]=1;H[g+2492>>2]=8574;H[g+2496>>2]=0;H[g+2500>>2]=8567;H[g+2504>>2]=0;H[g+2508>>2]=10561;H[g+2512>>2]=1;H[g+2516>>2]=10554;H[g+2520>>2]=1;H[g+2524>>2]=6135;H[g+2528>>2]=0;H[g+2532>>2]=12962;H[g+2536>>2]=1;H[g+2540>>2]=3696;H[g+2544>>2]=0;H[g+2548>>2]=5308;H[g+2552>>2]=1;H[g+2556>>2]=12915;H[g+2560>>2]=1;H[g+2564>>2]=12859;H[g+2568>>2]=1;H[g+2572>>2]=12837;H[g+2576>>2]=1;H[g+2580>>2]=12820;H[g+2584>>2]=1;H[g+2588>>2]=6184;H[g+2592>>2]=1;H[g+2596>>2]=6177;H[g+2600>>2]=1;H[g+2604>>2]=6151;H[g+2608>>2]=0;H[g+2612>>2]=6066;H[g+2616>>2]=0;H[g+2620>>2]=7890;H[g+2624>>2]=1;H[g+2628>>2]=10521;H[g+2632>>2]=0;H[g+2636>>2]=6193;H[g+2640>>2]=0;H[g+2644>>2]=10528;H[g+2648>>2]=0;H[g+2652>>2]=6200;H[g+2656>>2]=0;H[g+2660>>2]=0;H[g+2352>>2]=1;H[g+2356>>2]=6088;H[g+2360>>2]=1;H[g+2364>>2]=6164;_a=58572,$a=vb(6095,g+2352|0),H[_a>>2]=$a;H[g+2336>>2]=0;H[g+2340>>2]=7556;H[g+2344>>2]=0;H[g+2348>>2]=0;_a=58576,$a=vb(7536,g+2336|0),H[_a>>2]=$a;_a=58580,$a=vc(0),H[_a>>2]=$a;_a=58584,$a=vc(0),H[_a>>2]=$a;H[g+2320>>2]=0;H[g+2324>>2]=7556;H[g+2328>>2]=0;H[g+2332>>2]=0;_a=58588,$a=vb(7536,g+2320|0),H[_a>>2]=$a;H[g+2288>>2]=0;H[g+2292>>2]=6239;H[g+2296>>2]=0;H[g+2300>>2]=5196;H[g+2304>>2]=0;H[g+2308>>2]=7385;H[g+2312>>2]=0;H[g+2316>>2]=0;H[g+2272>>2]=0;H[g+2276>>2]=8681;H[g+2280>>2]=0;H[g+2284>>2]=8614;_a=58592,$a=vb(10734,g+2272|0),H[_a>>2]=$a;H[g+2160>>2]=1;H[g+2164>>2]=8614;H[g+2168>>2]=0;H[g+2172>>2]=6239;H[g+2176>>2]=0;H[g+2180>>2]=9280;H[g+2184>>2]=0;H[g+2188>>2]=10734;H[g+2192>>2]=0;H[g+2196>>2]=9354;H[g+2200>>2]=1;H[g+2204>>2]=7526;H[g+2208>>2]=1;H[g+2212>>2]=9323;H[g+2216>>2]=1;H[g+2220>>2]=9847;H[g+2224>>2]=0;H[g+2228>>2]=6480;H[g+2232>>2]=0;H[g+2236>>2]=7501;H[g+2240>>2]=1;H[g+2244>>2]=7385;H[g+2248>>2]=0;H[g+2252>>2]=9292;H[g+2256>>2]=1;H[g+2260>>2]=9316;H[g+2264>>2]=1;H[g+2268>>2]=0;H[g+2144>>2]=0;H[g+2148>>2]=9259;H[g+2152>>2]=0;H[g+2156>>2]=7519;_a=58596,$a=vb(8681,g+2144|0),H[_a>>2]=$a;H[g+2128>>2]=0;H[g+2132>>2]=0;H[g+2112>>2]=0;H[g+2116>>2]=7536;H[g+2120>>2]=0;H[g+2124>>2]=7556;_a=58600,$a=vb(8100,g+2112|0),H[_a>>2]=$a;_a=58604,$a=vc(-1),H[_a>>2]=$a;H[g+2096>>2]=0;H[g+2100>>2]=0;_a=58608,$a=vb(4430,g+2096|0),H[_a>>2]=$a;H[g+2080>>2]=0;H[g+2084>>2]=7556;H[g+2088>>2]=0;H[g+2092>>2]=0;_a=58612,$a=vb(7536,g+2080|0),H[_a>>2]=$a;H[g+2064>>2]=0;H[g+2068>>2]=9832;H[g+2072>>2]=0;H[g+2076>>2]=0;_a=58616,$a=vb(8295,g+2064|0),H[_a>>2]=$a;H[g+2032>>2]=0;H[g+2036>>2]=6239;H[g+2040>>2]=0;H[g+2044>>2]=7385;H[g+2048>>2]=0;H[g+2052>>2]=0;H[g+2016>>2]=0;H[g+2020>>2]=8681;H[g+2024>>2]=0;H[g+2028>>2]=8614;_a=58620,$a=vb(10734,g+2016|0),H[_a>>2]=$a;H[g+2e3>>2]=0;H[g+2004>>2]=0;c=vb(4430,g+2e3|0);H[14656]=c;a=H[14607];d=H[14608];e=H[14609];f=H[14610];h=H[14611];j=H[14612];l=H[14613];m=H[14614];i=H[14615];o=H[14616];q=H[14617];t=H[14618];r=H[14619];v=H[14620];w=H[14621];aa=H[14622];Q=H[14623];x=H[14624];y=H[14625];C=H[14626];oa=H[14627];ia=H[14628];ja=H[14629];ka=H[14630];la=H[14631];S=H[14632];ba=H[14633];pa=H[14634];fa=H[14635];ca=H[14636];sa=H[14637];Aa=H[14638];Ba=H[14639];Ca=H[14640];Da=H[14641];Ea=H[14642];Fa=H[14643];Ga=H[14644];Ia=H[14645];Ja=H[14646];Ka=H[14647];Ma=H[14648];Na=H[14649];Oa=H[14650];Pa=H[14651];Qa=H[14652];Ra=H[14653];Sa=H[14654];Ta=H[14655];H[g+1996>>2]=0;H[g+1992>>2]=c;H[g+1988>>2]=9594;H[g+1984>>2]=Ta;H[g+1980>>2]=7407;H[g+1976>>2]=Sa;H[g+1972>>2]=6497;H[g+1968>>2]=Ra;H[g+1964>>2]=6256;H[g+1960>>2]=Qa;H[g+1956>>2]=4378;H[g+1952>>2]=Pa;H[g+1948>>2]=6577;H[g+1944>>2]=Oa;H[g+1940>>2]=6286;H[g+1936>>2]=Na;H[g+1932>>2]=7335;H[g+1928>>2]=Ma;H[g+1924>>2]=7299;H[g+1920>>2]=Ka;H[g+1916>>2]=6313;H[g+1912>>2]=Ja;H[g+1908>>2]=8041;H[g+1904>>2]=Ia;H[g+1900>>2]=6504;H[g+1896>>2]=Ga;H[g+1892>>2]=6300;H[g+1888>>2]=Fa;H[g+1884>>2]=8768;H[g+1880>>2]=Ea;H[g+1876>>2]=6556;H[g+1872>>2]=Da;H[g+1868>>2]=9608;H[g+1864>>2]=Ca;H[g+1860>>2]=7326;H[g+1856>>2]=Ba;H[g+1852>>2]=7396;H[g+1848>>2]=Aa;H[g+1844>>2]=7612;H[g+1840>>2]=sa;H[g+1836>>2]=9485;H[g+1832>>2]=ca;H[g+1828>>2]=6246;H[g+1824>>2]=fa;H[g+1820>>2]=8762;H[g+1816>>2]=pa;H[g+1812>>2]=7311;H[g+1808>>2]=ba;H[g+1804>>2]=4410;H[g+1800>>2]=S;H[g+1796>>2]=4358;H[g+1792>>2]=la;H[g+1788>>2]=8746;H[g+1784>>2]=ka;H[g+1780>>2]=6272;H[g+1776>>2]=ja;H[g+1772>>2]=11420;H[g+1768>>2]=ia;H[g+1764>>2]=8153;H[g+1760>>2]=oa;H[g+1756>>2]=7683;H[g+1752>>2]=C;H[g+1748>>2]=7374;H[g+1744>>2]=y;H[g+1740>>2]=7575;H[g+1736>>2]=x;H[g+1732>>2]=4392;H[g+1728>>2]=Q;H[g+1724>>2]=9568;H[g+1720>>2]=aa;H[g+1716>>2]=6513;H[g+1712>>2]=w;H[g+1708>>2]=5100;H[g+1704>>2]=v;H[g+1700>>2]=5869;H[g+1696>>2]=r;H[g+1692>>2]=8134;H[g+1688>>2]=t;H[g+1684>>2]=7361;H[g+1680>>2]=q;H[g+1676>>2]=7350;H[g+1672>>2]=o;H[g+1668>>2]=7800;H[g+1664>>2]=i;H[g+1660>>2]=6529;H[g+1656>>2]=m;H[g+1652>>2]=6569;H[g+1648>>2]=l;H[g+1644>>2]=7789;H[g+1640>>2]=j;H[g+1636>>2]=3702;H[g+1632>>2]=h;H[g+1628>>2]=7820;H[g+1624>>2]=f;H[g+1620>>2]=9328;H[g+1616>>2]=e;H[g+1612>>2]=8119;H[g+1608>>2]=d;H[g+1604>>2]=7778;H[g+1600>>2]=a;H[g+1596>>2]=10570;H[g+1592>>2]=a;H[g+1588>>2]=7918;H[g+1584>>2]=a;d=Ha-32|0;Ha=d;e=g+1584|0;H[d+20>>2]=e;H[d+28>>2]=e;H[d+24>>2]=e;a=1;while(1){c=a;a=a+1|0;f=H[e+4>>2];e=e+8|0;if(f){continue}break}H[d+28>>2]=e;a=Xa(28);H[a+24>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;H[a+8>>2]=0;c=N(c,3)|1;H[a+12>>2]=c;f=ib(c<<3);H[a>>2]=f;j:{if(f){H[a+4>>2]=c;e=0;while(1){if((c|0)!=(e|0)){h=f+(e<<3)|0;G[h+4>>1]=0;H[h>>2]=0;e=e+1|0;continue}break}c=H[d+24>>2];H[d+28>>2]=c+4;ob(a,7730,H[c>>2]);while(1){c=H[d+28>>2];H[d+28>>2]=c+4;e=H[c>>2];if(e){H[d+28>>2]=c+8;ob(a,e,H[c+4>>2]);continue}break}Ha=d+32|0;break j}H[a+4>>2]=0;H[d+4>>2]=8;H[d>>2]=c;Wa(24709,d);break a}H[14604]=a;Y(46965,40736,0)|0;H[g+1580>>2]=0;H[g+1576>>2]=17;H[g+1572>>2]=11679;H[g+1568>>2]=16;H[g+1564>>2]=11552;H[g+1560>>2]=15;H[g+1556>>2]=11683;H[g+1552>>2]=14;H[g+1548>>2]=11556;H[g+1544>>2]=13;H[g+1540>>2]=12364;H[g+1536>>2]=12;H[g+1532>>2]=11619;H[g+1528>>2]=11;H[g+1524>>2]=11900;H[g+1520>>2]=10;H[g+1516>>2]=12375;H[g+1512>>2]=9;H[g+1508>>2]=11623;H[g+1504>>2]=8;H[g+1500>>2]=11905;H[g+1496>>2]=7;H[g+1492>>2]=12397;H[g+1488>>2]=6;H[g+1484>>2]=11646;H[g+1480>>2]=5;H[g+1476>>2]=11632;H[g+1472>>2]=4;H[g+1468>>2]=11547;H[g+1464>>2]=3;H[g+1460>>2]=12368;H[g+1456>>2]=2;H[g+1452>>2]=12392;H[g+1448>>2]=1;H[g+1444>>2]=11641;H[g+1440>>2]=0;_a=58628,$a=kd(11627,g+1440|0),H[_a>>2]=$a;c=ib(52);H[14658]=c;a=0;while(1)if((a|0)==13){a=g+1424|0;H[a>>2]=7;H[a+4>>2]=0;a=g+1416|0;H[a>>2]=6;H[a+4>>2]=38;a=g+1408|0;H[a>>2]=5;H[a+4>>2]=37;a=g+1400|0;H[a>>2]=4;H[a+4>>2]=36;a=g+1392|0;H[a>>2]=3;H[a+4>>2]=35;H[g+1384>>2]=2;H[g+1388>>2]=34;H[g+1376>>2]=1;H[g+1380>>2]=33;r=0;_a=58636,$a=Mj(32,g+1376|0),H[_a>>2]=$a;q=Xa(16);a=q;H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[14660]=a;c=0;f=0;h=0;d=0;l=0;j=0;e=0;i=0;o=0;t=H[14594];m=H[t+8>>2];a=0;if((m|0)<33){break h}a=H[t+4>>2];d=H[a+128>>2];k:{if((m|0)!=33){h=H[a+132>>2];if((m|0)>=35){break k}}break i}l=H[a+136>>2];if((m|0)==35){break i}j=H[a+140>>2];if((m|0)<37){break i}f=H[a+144>>2];if((m|0)==37){i=H[a+144>>2];a=f;break h}i=H[a+144>>2];c=H[a+148>>2];if((m|0)<39){e=c;a=f;break h}o=H[a+152>>2];e=c;a=f;break h}else{H[c+(a<<2)>>2]=0;a=a+1|0;continue}}}else{H[c+(a<<2)>>2]=0;a=a+1|0;continue}break}a=0}H[g+1360>>2]=-1;m=g+1352|0;H[m>>2]=0;H[m+4>>2]=0;H[g+1348>>2]=o;H[g+1344>>2]=12;H[g+1340>>2]=i;H[g+1336>>2]=11;H[g+1332>>2]=c;H[g+1328>>2]=10;H[g+1324>>2]=c;H[g+1320>>2]=9;H[g+1316>>2]=e;H[g+1312>>2]=8;H[g+1308>>2]=a;H[g+1304>>2]=7;H[g+1300>>2]=f;H[g+1296>>2]=6;H[g+1292>>2]=f;H[g+1288>>2]=5;H[g+1284>>2]=j;H[g+1280>>2]=4;H[g+1276>>2]=l;H[g+1272>>2]=3;H[g+1268>>2]=h;H[g+1264>>2]=2;a=Ha-16|0;Ha=a;Xc(q,1,d);H[a+12>>2]=g+1264;while(1){c=H[a+12>>2];H[a+12>>2]=c+4;d=H[c>>2];if((d|0)>=0){H[a+12>>2]=c+8;Xc(q,d,H[c+4>>2]);continue}break}Ha=a+16|0;d=Xa(16);a=d;H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[14662]=a;H[g+1168>>2]=4;H[g+1172>>2]=7526;H[g+1176>>2]=5;H[g+1180>>2]=4430;H[g+1184>>2]=6;H[g+1188>>2]=4430;H[g+1192>>2]=7;H[g+1196>>2]=4430;H[g+1200>>2]=8;H[g+1204>>2]=4430;H[g+1208>>2]=9;H[g+1212>>2]=9614;H[g+1216>>2]=10;H[g+1220>>2]=9651;H[g+1224>>2]=11;H[g+1228>>2]=4430;H[g+1232>>2]=12;H[g+1236>>2]=4430;H[g+1240>>2]=0;a=g+1244|0;H[a>>2]=0;H[a+4>>2]=-1;H[g+1152>>2]=2;H[g+1156>>2]=4430;H[g+1160>>2]=3;H[g+1164>>2]=4430;a=Ha-16|0;Ha=a;Ld(d,1,4430);H[a+12>>2]=g+1152;while(1){c=H[a+12>>2];H[a+12>>2]=c+4;e=H[c>>2];if((e|0)>=0){H[a+12>>2]=c+8;Ld(d,e,H[c+4>>2]);continue}break}Ha=a+16|0;l:{m:{n:{o:{p:{q:{a=H[14594];q=H[a+8>>2];r:{if((q|0)<47){f=0;h=0;d=0;l=0;a=0;break r}t=H[a+4>>2];l=H[t+184>>2];if((q|0)==47){f=0;h=0;d=0;a=0;break r}d=H[t+188>>2];if((q|0)>=49){break q}f=0;h=0;a=0}c=0;j=0;break p}j=H[t+192>>2];if((q|0)==49){a=0;f=0;c=0;h=0;break p}m=H[t+196>>2];if((q|0)<51){a=0;f=0;c=0;h=0;break o}h=H[t+200>>2];if((q|0)==51){a=0;f=0;c=0;break o}c=H[t+204>>2];if((q|0)<53){a=0;f=0;break o}e=H[t+208>>2];if((q|0)==53){a=0;f=0;break n}i=H[t+212>>2];if((q|0)<55){a=0;f=0;break m}f=H[t+216>>2];if((q|0)==55){a=0;break m}a=H[t+220>>2];if((q|0)<58){break m}o=H[t+228>>2];if((q|0)==58){break l}r=H[t+232>>2];break l}m=0}e=0}i=0}o=0}H[g+1148>>2]=0;H[g+1144>>2]=r;H[g+1140>>2]=12;H[g+1136>>2]=o;H[g+1132>>2]=11;H[g+1128>>2]=a;H[g+1124>>2]=10;H[g+1120>>2]=f;H[g+1116>>2]=9;H[g+1112>>2]=i;H[g+1108>>2]=8;H[g+1104>>2]=e;H[g+1100>>2]=7;H[g+1096>>2]=c;H[g+1092>>2]=6;H[g+1088>>2]=h;H[g+1084>>2]=5;H[g+1080>>2]=m;H[g+1076>>2]=4;H[g+1072>>2]=j;H[g+1068>>2]=3;H[g+1064>>2]=d;H[g+1060>>2]=2;H[g+1056>>2]=l;_a=58652,$a=sf(1,g+1056|0),H[_a>>2]=$a;a=0;f=0;c=0;h=0;d=0;l=0;m=H[14594];e=H[m+8>>2];j=0;s:{if((e|0)<33){break s}j=H[m+4>>2];h=H[j+128>>2];t:{u:{if((e|0)!=33){c=H[j+132>>2];if((e|0)>=35){break u}}break t}d=H[j+136>>2];if((e|0)==35){break t}l=H[j+140>>2];if((e|0)<37){break t}f=H[j+144>>2];if((e|0)==37){break t}a=H[j+148>>2];if((e|0)<39){break t}j=H[j+152>>2];break s}j=0}H[g+1044>>2]=0;H[g+1040>>2]=j;H[g+1036>>2]=7;H[g+1032>>2]=a;H[g+1028>>2]=6;H[g+1024>>2]=f;H[g+1020>>2]=5;H[g+1016>>2]=l;H[g+1012>>2]=4;H[g+1008>>2]=d;H[g+1004>>2]=3;H[g+1e3>>2]=c;c=2;H[g+996>>2]=2;H[g+992>>2]=h;_a=58644,$a=sf(1,g+992|0),H[_a>>2]=$a;H[g+912>>2]=3;H[g+916>>2]=49;H[g+920>>2]=4;H[g+924>>2]=50;H[g+928>>2]=5;H[g+932>>2]=51;H[g+936>>2]=6;H[g+940>>2]=52;H[g+944>>2]=7;H[g+948>>2]=53;H[g+952>>2]=8;H[g+956>>2]=54;H[g+960>>2]=9;H[g+964>>2]=55;H[g+968>>2]=10;H[g+972>>2]=57;H[g+976>>2]=11;H[g+980>>2]=58;H[g+984>>2]=12;H[g+988>>2]=0;H[g+896>>2]=1;H[g+900>>2]=47;H[g+904>>2]=2;H[g+908>>2]=48;_a=58656,$a=Mj(46,g+896|0),H[_a>>2]=$a;a=kd(0,0);H[14665]=a;H[H[14658]+4>>2]=a;a=kd(0,0);H[14666]=a;H[H[14658]+8>>2]=a;a=kd(0,0);H[14667]=a;H[H[14658]+12>>2]=a;a=kd(0,0);H[14668]=a;H[H[14658]+16>>2]=a;a=kd(0,0);H[14669]=a;H[H[14658]+20>>2]=a;a=kd(0,0);H[14670]=a;H[H[14658]+24>>2]=a;a=kd(0,0);H[14671]=a;H[H[14658]+28>>2]=a;a=kd(0,0);H[14672]=a;H[H[14658]+32>>2]=a;a=kd(0,0);H[14673]=a;H[H[14658]+48>>2]=a;Y(47031,40736,0)|0;Y(49700,40736,0)|0;e=Xa(28);H[e+24>>2]=0;H[e+16>>2]=0;H[e+20>>2]=0;H[e+8>>2]=0;H[e+12>>2]=2;a=ib(16);H[e>>2]=a;v:{if(a){H[e+4>>2]=2;a=0;while(1){if((a|0)<(c|0)){c=a<<3;H[c+H[e>>2]>>2]=0;G[(c+H[e>>2]|0)+4>>1]=0;a=a+1|0;c=H[e+4>>2];continue}break}H[13176]=e;H[g+880>>2]=30;H[g+884>>2]=4;H[g+888>>2]=31;H[g+892>>2]=0;H[g+864>>2]=32;H[g+868>>2]=6;H[g+872>>2]=33;H[g+876>>2]=3;f=Ha-16|0;Ha=f;H[f+12>>2]=g+864;c=5;while(1){w:{if(!c){break w}a=H[f+12>>2];H[f+12>>2]=a+4;a=H[a>>2];if(!a){break w}x:{y:{z:{A:{h=H[e>>2]+((c>>>0)%K[e+4>>2]<<3)|0;switch(J[h+4>>1]){case 1:break z;case 0:break A;default:break y}}d=Xa(12);H[d+8>>2]=0;H[d+4>>2]=a;H[d>>2]=c;H[h>>2]=d;H[e+12>>2]=H[e+12>>2]-1;a=16;break x}H[e+16>>2]=H[e+16>>2]-1}j=H[h>>2];d=Xa(12);H[d+8>>2]=H[j+8>>2];H[d>>2]=c;H[d+4>>2]=a;H[j+8>>2]=d;a=8}a=a+e|0;H[a>>2]=H[a>>2]+1;G[h+4>>1]=J[h+4>>1]+1;H[e+24>>2]=H[e+24>>2]+1;a=H[f+12>>2];H[f+12>>2]=a+4;c=H[a>>2];continue}break}Ha=f+16|0;Y(49791,40736,0)|0;H[g+856>>2]=7;H[g+860>>2]=0;H[g+852>>2]=9496;H[g+848>>2]=6;H[g+844>>2]=4975;H[g+840>>2]=5;H[g+836>>2]=4963;H[g+832>>2]=4;H[g+828>>2]=6725;H[g+824>>2]=8;H[g+820>>2]=3938;H[g+816>>2]=3;H[g+812>>2]=3971;H[g+808>>2]=2;H[g+804>>2]=4112;H[g+800>>2]=1;_a=52656,$a=vb(10708,g+800|0),H[_a>>2]=$a;d=ib(280);H[13165]=d;a=0;while(1){if((a|0)!=10){c=d+N(a,28)|0;H[c+24>>2]=0;H[c+16>>2]=981668463;H[c+20>>2]=1065185444;H[c+8>>2]=0;H[c+12>>2]=0;H[c>>2]=0;H[c+4>>2]=0;a=a+1|0;continue}break}H[g+792>>2]=6;H[g+796>>2]=0;H[g+788>>2]=7949;H[g+784>>2]=5;H[g+780>>2]=4076;H[g+776>>2]=4;H[g+772>>2]=9672;H[g+768>>2]=3;H[g+764>>2]=4251;H[g+760>>2]=2;H[g+756>>2]=11151;H[g+752>>2]=1;_a=51440,$a=vb(8079,g+752|0),H[_a>>2]=$a;c=ib(112);H[12859]=c;a=0;while(1){if((a|0)!=7){H[c+(a<<4)>>2]=0;a=a+1|0;continue}break}a=Xa(28);H[a+20>>2]=0;Ec(a,30);H[13136]=a;ob(a,11560,6833);ob(H[13136],12924,7859);ob(H[13136],12865,4101);ob(H[13136],12981,8235);ob(H[13136],12519,11051);ob(H[13136],11656,6667);ob(H[13136],12736,6434);ob(H[13136],12726,7962);ob(H[13136],12307,10590);ob(H[13136],11651,6659);ob(H[13136],12731,6427);ob(H[13136],12721,7953);ob(H[13136],12302,10584);ob(H[13136],12350,8497);ob(H[13136],12407,7764);ob(H[13136],11570,4245);ob(H[13136],12345,8490);ob(H[13136],12402,7758);ob(H[13136],11565,4239);a=Yh(Xa(136));H[13121]=a;F[a+132|0]=0;H[a+128>>2]=5898;H[a+124>>2]=5898;H[a+88>>2]=6779;H[a+84>>2]=12890;H[a+80>>2]=12946;H[a+76>>2]=12995;H[a+72>>2]=3652;H[a+68>>2]=8562;H[a+64>>2]=10018;H[a+60>>2]=3926;H[a+56>>2]=11400;H[a+52>>2]=6715;H[a+48>>2]=8206;H[a+12>>2]=4314;H[a+8>>2]=4336;H[a+4>>2]=9552;H[a>>2]=4220;H[a+112>>2]=9860;H[a+108>>2]=9874;H[a+104>>2]=10085;H[a+100>>2]=10098;H[a+96>>2]=6813;H[a+92>>2]=6825;H[a+44>>2]=4054;H[a+40>>2]=3985;H[a+36>>2]=6355;H[a+32>>2]=6609;H[a+28>>2]=4068;H[a+24>>2]=3999;H[a+20>>2]=6372;H[a+16>>2]=6634;a=Yh(Xa(136));H[13122]=a;F[a+132|0]=0;H[a+128>>2]=5891;H[a+124>>2]=5891;H[a+88>>2]=6786;H[a+84>>2]=12890;H[a+80>>2]=12946;H[a+76>>2]=12995;H[a+72>>2]=3658;H[a+68>>2]=8731;H[a+64>>2]=10670;H[a+60>>2]=3932;H[a+56>>2]=11406;H[a+52>>2]=6715;H[a+48>>2]=8206;H[a+12>>2]=9337;H[a+8>>2]=9346;H[a+4>>2]=11051;H[a>>2]=6833;H[a+44>>2]=10584;H[a+40>>2]=7953;H[a+36>>2]=6427;H[a+32>>2]=6659;H[a+28>>2]=10590;H[a+24>>2]=7962;H[a+20>>2]=6434;H[a+16>>2]=6667;a=Yh(Xa(136));H[13123]=a;H[a+120>>2]=12550;H[a+116>>2]=12312;H[a+4>>2]=12519;H[a>>2]=11560;F[a+132|0]=1;H[a+128>>2]=5931;H[a+124>>2]=5891;H[a+88>>2]=11896;H[a+84>>2]=12890;H[a+80>>2]=12946;H[a+76>>2]=12995;H[a+72>>2]=12382;H[a+68>>2]=12379;H[a+64>>2]=12389;H[a+60>>2]=12412;H[a+56>>2]=12342;H[a+52>>2]=11882;H[a+48>>2]=12274;H[a+12>>2]=12433;H[a+8>>2]=12438;H[a+112>>2]=11565;H[a+108>>2]=11570;H[a+104>>2]=11992;H[a+100>>2]=11997;H[a+96>>2]=12345;H[a+92>>2]=12350;H[a+44>>2]=12302;H[a+40>>2]=12721;H[a+36>>2]=12731;H[a+32>>2]=11651;H[a+28>>2]=12307;H[a+24>>2]=12726;H[a+20>>2]=12736;H[a+16>>2]=11656;a=Xa(28);H[a+20>>2]=H[14678];Vh(a);H[13128]=a;a=Xa(28);H[a+20>>2]=H[14678];Vh(a);H[13129]=a;a=Xa(28);H[a+20>>2]=H[14678];Vh(a);H[13130]=a;ob(H[13128],qb(8088),1048598);ob(H[13128],qb(6763),1048592);ob(H[13128],qb(7208),1048615);c=0;B:while(1){if((c|0)!=2){d=(c<<2)+31528|0;a=0;while(1)if((a|0)==5){c=c+1|0;continue B}else{ag(H[13121],c,a,3);e=H[d>>2];ob(H[13128],qb(52384),(e&15|128<<a&3968)<<8|1048583);a=a+1|0;continue}}break}l=0;C:while(1){if((l|0)!=5){a=l<<2;c=a+31584|0;d=H[a+31552>>2];a=0;while(1)if((a|0)==4){l=l+1|0;continue C}else{H[g+736>>2]=d;H[g+740>>2]=F[a+31536|0];e=g+7664|0;jc(e,11,11166,g+736|0);f=H[c>>2];h=I[(a<<2)+31760|0];ob(H[13130],qb(e),h|f<<8&3840|1048576);a=a+1|0;continue}}break}Ym(8736,44,0);Ub(6748,16,1,0);Ub(11024,25,1,1);Ub(5089,26,1,1);Ub(11454,27,0,1);Ub(5631,27,1,1);Ub(10656,28,0,1);Ub(10642,29,0,1);Ub(9483,30,1,1);Ub(5499,31,1,1);Ub(5402,32,1,1);Ub(6802,33,1,1);Ub(6791,34,1,1);Ub(9404,35,1,0);Ub(8402,36,1,0);Ub(8389,37,1,0);Ub(8376,38,1,0);Ub(7751,39,1,1);Ub(7739,40,1,0);Ub(6702,41,0,1);Ub(10443,42,0,1);Ub(8215,43,0,1);Ym(8233,18,1);i=0;while(1){if((i|0)==2){break v}f=(i<<2)+31528|0;d=F[i+31604|0];e=1;while(1){if((e|0)!=5){h=e<<4&112;j=h|4096;c=F[e+31609|0];a=0;while(1){if((a|0)==3){D:{H[g+712>>2]=c;H[g+708>>2]=87;H[g+704>>2]=d;c=g+7664|0;jc(c,11,11199,g+704|0);a=0;j=h|J[f>>1]&15|4096;h=j<<8;ob(H[13130],qb(c),h|6);l=F[e+31628|0];H[g+692>>2]=l;H[g+688>>2]=d;jc(c,11,11208,g+688|0);ob(H[13130],qb(c),h|1);E:while(1){if((a|0)==5){break D}c=a+1|0;h=(j|1<<a<<7&3968)<<8;a=0;while(1)if((a|0)==3){a=c;continue E}else{H[g+684>>2]=l;H[g+676>>2]=c;H[g+672>>2]=d;m=a<<2;H[g+680>>2]=H[m+31636>>2];o=g+7664|0;jc(o,11,11235,g+672|0);m=I[m+31732|0];ob(H[13130],qb(o),h|m);a=a+1|0;continue}}}}else{H[g+728>>2]=c;H[g+720>>2]=d;H[g+724>>2]=F[a+31606|0];l=g+7664|0;jc(l,11,11199,g+720|0);m=J[f>>1];o=I[(a<<2)+31616|0];ob(H[13130],qb(l),o|(j|m&15)<<8);a=a+1|0;continue}break}e=e+1|0;continue}break}a=0;while(1){if((a|0)!=5){H[g+656>>2]=d;c=a+1|0;H[g+660>>2]=c;e=g+7664|0;jc(e,11,11889,g+656|0);h=H[f>>2];ob(H[13130],qb(e),(h&15|128<<a&3968)<<8|1048583);a=c;continue}break}i=i+1|0;continue}}H[e+4>>2]=0;H[g>>2]=2;H[g+4>>2]=8;Wa(24709,g);break a}e=Xa(28);H[e+24>>2]=0;H[e+16>>2]=0;H[e+20>>2]=0;H[e+8>>2]=0;H[e+12>>2]=13;a=ib(104);H[e>>2]=a;F:{G:{H:{I:{J:{K:{if(a){c=13;H[e+4>>2]=13;a=0;while(1){if((a|0)<(c|0)){c=a<<3;H[c+H[e>>2]>>2]=0;G[(c+H[e>>2]|0)+4>>1]=0;a=a+1|0;c=H[e+4>>2];continue}break}d=0;H[13095]=e;ob(e,H[H[13121]>>2],1);ob(H[13095],H[H[13122]>>2],2);ob(H[13095],H[H[13123]>>2],3);H[13125]=H[13121];H[13126]=H[13122];H[13127]=H[13123];H[13133]=H[13128];H[13134]=H[13129];H[13135]=H[13130];Y(49884,40736,0)|0;e=zq(Xa(16),2);Wc(e,H[H[14707]>>2]);Wc(e,H[H[14707]+4>>2]);c=H[e+12>>2];L:{M:{if(c){a=0;while(1){f=a<<16>>16;if((f|0)<(c|0)){c=Pg((f|0)>=0?H[H[e>>2]+(f<<2)>>2]:0);N:{if(!c){break N}if(!d){d=c;break N}vj(d,c);Va(Gc(c))}a=a+1|0;c=H[e+12>>2];continue}break}H[14716]=d;if((c|0)<=1){break M}a=c-2|0;break L}H[14716]=0}a=0}H[e+12>>2]=a;Xd(e);nb(e);Va(e);a=H[14716];if(!a){break K}c=H[yb(H[a+8>>2],34223)+4>>2];a=Bb(c,10634);if(!a){break J}if(Hb(12809,a)){break I}a=Bb(c,10626);O:{if(!a){db();H[g+608>>2]=12809;Wa(28980,g+608|0);break O}if(!Hb(12809,a)){break O}db();H[g+628>>2]=12809;H[g+624>>2]=a;Wa(29048,g+624|0)}e=0;j=H[14716];a=yb(H[j+8>>2],3576);if(!a){break F}a=H[a+8>>2];c=yb(a,3561);if(!c){break F}d=yb(a,5146);if(!d){break F}a=H[c+8>>2];H[g+7676>>2]=-1;H[g+7680>>2]=0;H[g+7672>>2]=3558;H[g+7668>>2]=a;H[g+7664>>2]=0;while(1){if(Vm(g+7664|0)){a=H[g+7680>>2];c=Um(H[a+4>>2],G[g+7676>>1]);f=H[a+4>>2];a=Bb(f,10222);if(a){a=Hb(a,4844)}else{a=1}_a=(N(!a,20)+(c<<2)|0)+51616|0,cb=ab(f,6953,O(1)),L[_a>>2]=cb;continue}break}a=H[d+8>>2];H[g+7676>>2]=-1;H[g+7680>>2]=0;H[g+7672>>2]=5143;H[g+7668>>2]=a;H[g+7664>>2]=0;while(1){if(Vm(g+7664|0)){a=H[g+7680>>2];d=H[g+7676>>2];f=Um(H[a+4>>2],d<<16>>16);c=f<<4;_a=c+45680|0,cb=ab(H[a+4>>2],9563,L[12899]),L[_a>>2]=cb;_a=c+45684|0,cb=ab(H[a+4>>2],4305,L[12899]),L[_a>>2]=cb;_a=c+45688|0,cb=ab(H[a+4>>2],4296,L[12899]),L[_a>>2]=cb;_a=c+45760|0,cb=ab(H[a+4>>2],6934,O(0)),L[_a>>2]=cb;_a=c+45764|0,cb=ab(H[a+4>>2],6921,O(0)),L[_a>>2]=cb;_a=c+45768|0,cb=ab(H[a+4>>2],6908,O(0)),L[_a>>2]=cb;c=f<<2;_a=c+52768|0,cb=ab(H[a+4>>2],3693,O(-.30000001192092896)),L[_a>>2]=cb;_a=c+52736|0,cb=ab(H[a+4>>2],3664,O(.30000001192092896)),L[_a>>2]=cb;f=c+44896|0;P:{if(!d){H[c+44864>>2]=0;H[c+51664>>2]=0;k=O(0);break P}_a=c+44864|0,cb=ab(H[a+4>>2],3683,O(0)),L[_a>>2]=cb;_a=c+51664|0,cb=ab(H[a+4>>2],3673,O(0)),L[_a>>2]=cb;k=ab(H[a+4>>2],4044,O(0))}L[f>>2]=k;continue}break}a=yb(H[j+8>>2],8585);_a=53768,cb=ab(H[a+4>>2],12487,O(.5)),L[_a>>2]=cb;_a=53772,cb=ab(H[a+4>>2],12496,O(1)),L[_a>>2]=cb;_a=53776,cb=ab(H[a+4>>2],12355,O(3.5)),L[_a>>2]=cb;_a=53780,cb=ab(H[a+4>>2],11594,O(3)),L[_a>>2]=cb;_a=53784,cb=ab(H[a+4>>2],12475,O(.699999988079071)),L[_a>>2]=cb;_a=53788,cb=ab(H[a+4>>2],12503,O(.6000000238418579)),L[_a>>2]=cb;_a=53792,cb=ab(H[a+4>>2],11910,O(.30000001192092896)),L[_a>>2]=cb;_a=53796,cb=ab(H[a+4>>2],11919,O(2.5999999046325684)),L[_a>>2]=cb;_a=53800,cb=ab(H[a+4>>2],11575,O(.5)),L[_a>>2]=cb;k=ab(H[a+4>>2],11013,O(0));L[13452]=k<O(-.9990000128746033)?O(-.9990000128746033):k>O(.9990000128746033)?O(.9990000128746033):k;k=ab(H[a+4>>2],10996,O(0));L[13453]=k<O(-.9990000128746033)?O(-.9990000128746033):k>O(.9990000128746033)?O(.9990000128746033):k;_a=53868,cb=ab(H[a+4>>2],12455,O(1.0499999523162842)),L[_a>>2]=cb;_a=53872,cb=ab(H[a+4>>2],12443,O(1.100000023841858)),L[_a>>2]=cb;_a=53876,cb=ab(H[a+4>>2],12466,O(1.2000000476837158)),L[_a>>2]=cb;h=yb(H[j+8>>2],3591);a=yb(H[h+8>>2],5450);Q:{if(a){n=ab(H[a+4>>2],4040,O(10));p=ab(H[a+4>>2],7775,O(80));u=ab(H[a+4>>2],6722,O(80));s=ab(H[a+4>>2],7115,O(20));A=ab(H[a+4>>2],10476,O(20));z=ab(H[a+4>>2],6948,O(20));V=ab(H[a+4>>2],4035,n);X=ab(H[a+4>>2],7770,p);_=ab(H[a+4>>2],6717,u);E=ab(H[a+4>>2],7110,s);$=ab(H[a+4>>2],10471,A);ma=ab(H[a+4>>2],6943,z);k=O(L[13143]/O(180));ff(51684,O(k*O(-p)),O(k*O(-n)),O(k*O(-u)),O(k*O(-s)),O(k*O(-A)),O(k*O(-z)));k=O(L[13143]/O(180));ff(52024,O(V*k),O(X*k),O(_*k),O(E*k),O($*k),O(ma*k));break Q}k=O(L[13143]/O(180));n=O(k*O(-80));p=O(k*O(-10));k=O(k*O(-20));ff(51684,n,p,n,k,k,k);k=O(L[13143]/O(180));n=O(k*O(80));p=O(k*O(10));k=O(k*O(20));ff(52024,p,n,n,k,k,k)}l=0;_a=52976,cb=ab(H[h+4>>2],10361,O(.10000000149011612)),L[_a>>2]=cb;_a=52980,cb=ab(H[h+4>>2],10349,O(.10000000149011612)),L[_a>>2]=cb;_a=52984,cb=ab(H[h+4>>2],10374,O(.10000000149011612)),L[_a>>2]=cb;_a=52988,cb=ab(H[h+4>>2],10335,O(.10000000149011612)),L[_a>>2]=cb;_a=52992,cb=ab(H[h+4>>2],9914,O(.5)),L[_a>>2]=cb;_a=52996,cb=ab(H[h+4>>2],9901,O(.5)),L[_a>>2]=cb;_a=53e3,cb=ab(H[h+4>>2],7021,O(.800000011920929)),L[_a>>2]=cb;_a=53004,cb=ab(H[h+4>>2],6962,O(.5)),L[_a>>2]=cb;_a=53008,cb=ab(H[h+4>>2],7034,O(2)),L[_a>>2]=cb;_a=53012,cb=O(ab(H[h+4>>2],9530,O(15))*O(L[13143]/O(180))),L[_a>>2]=cb;_a=53252,cb=ab(H[yb(H[j+8>>2],10043)+4>>2],10387,O(0)),L[_a>>2]=cb;a=yb(H[h+8>>2],3702);_a=53448,cb=ab(H[a+4>>2],12951,O(.5)),L[_a>>2]=cb;_a=53452,cb=ab(H[a+4>>2],12904,O(-.10000000149011612)),L[_a>>2]=cb;_a=53456,cb=ab(H[a+4>>2],5788,O(3)),L[_a>>2]=cb;_a=53460,cb=ab(H[a+4>>2],7603,O(1)),L[_a>>2]=cb;_a=53464,cb=ab(H[a+4>>2],9914,O(1.5)),L[_a>>2]=cb;_a=53468,cb=ab(H[a+4>>2],9901,O(1.5)),L[_a>>2]=cb;c=yb(H[h+8>>2],8599);a=0;R:{if(!c){break R}d=H[c+8>>2];a=0;if(!d){break R}a=H[d+12>>2];if(a<<16){break H}a=d}db();d=a;H[g+596>>2]=a;H[g+592>>2]=c;Wa(18908,g+592|0);break G}H[e+4>>2]=0;H[g+16>>2]=13;H[g+20>>2]=8;Wa(24709,g+16|0);break a}db();Wa(24766,0);c=Eb(4);H[c>>2]=10;break e}db();H[g+32>>2]=12809;Wa(26375,g+32|0);break f}db();H[g+644>>2]=12809;H[g+640>>2]=a;Wa(26448,g+640|0);break f}l=a<<16>>16}c=0;S:{T:{while(1){a=c<<16>>16;if((a|0)>=(l|0)){U:{Sc(yb(H[h+8>>2],5561),53016);Sc(yb(H[h+8>>2],5775),53036);Sc(yb(H[h+8>>2],5798),53056);Sc(yb(H[h+8>>2],5466),53076);Sc(yb(H[h+8>>2],8324),53096);Sc(yb(H[h+8>>2],5482),53116);Sc(yb(H[h+8>>2],5600),53136);Sc(yb(H[h+8>>2],5585),53156);Sc(yb(H[h+8>>2],5522),53176);Sc(yb(H[h+8>>2],5613),53196);Sc(yb(H[h+8>>2],5541),53228);c=I[58861];if(c){H[13283]=1065353216;H[13281]=1065353216;H[13282]=1065353216;H[13279]=1065353216;H[13280]=1065353216;H[13273]=1065353216;H[13271]=1065353216;H[13272]=1065353216;H[13269]=1065353216;H[13270]=1065353216}a=yb(H[h+8>>2],5576);if(!a){break U}_a=53216,cb=ab(H[a+4>>2],8832,O(1)),L[_a>>2]=cb;_a=53220,cb=ab(H[a+4>>2],8832,O(1.7000000476837158)),L[_a>>2]=cb;_a=53224,cb=ab(H[a+4>>2],8832,O(.6000000238418579)),L[_a>>2]=cb;if(!(F[58861]&1)){break T}break S}}else{f=0;f=(a|0)<0|(a|0)>=H[d+12>>2]?f:H[H[d>>2]+(a<<2)>>2];a=H[f>>2];m=fb(H[H[14601]>>2],a);V:{if(!m){H[g+576>>2]=a;Wa(28548,g+576|0);break V}a=N(m,24);_a=a+53304|0,cb=ab(H[f+4>>2],12951,O(0)),L[_a>>2]=cb;_a=a+53308|0,cb=ab(H[f+4>>2],12904,O(0)),L[_a>>2]=cb;_a=a+53312|0,cb=ab(H[f+4>>2],5788,O(0)),L[_a>>2]=cb;_a=a+53316|0,cb=ab(H[f+4>>2],7603,O(0)),L[_a>>2]=cb;_a=a+53320|0,cb=ab(H[f+4>>2],9914,O(0)),L[_a>>2]=cb;_a=a+53324|0,cb=ab(H[f+4>>2],9901,O(0)),L[_a>>2]=cb}c=c+1|0;continue}break}if(c){break S}}a=yb(H[j+8>>2],5679);H[13456]=0;_a=53828,cb=ab(H[a+4>>2],10708,O(1)),L[_a>>2]=cb;_a=53832,cb=ab(H[a+4>>2],4121,O(.550000011920929)),L[_a>>2]=cb;_a=53836,cb=ab(H[a+4>>2],3980,O(1.6699999570846558)),L[_a>>2]=cb;_a=53840,cb=ab(H[a+4>>2],9496,O(2.299999952316284)),L[_a>>2]=cb;_a=53844,cb=ab(H[a+4>>2],4096,O(2)),L[_a>>2]=cb;_a=53848,cb=ab(H[a+4>>2],4756,O(1)),L[_a>>2]=cb;_a=53820,cb=ab(H[a+4>>2],3938,O(1.2000000476837158)),L[_a>>2]=cb;_a=53852,cb=ab(H[a+4>>2],4963,O(1.100000023841858)),L[_a>>2]=cb;_a=53856,cb=ab(H[a+4>>2],4975,O(.550000011920929)),L[_a>>2]=cb;_a=53860,cb=ab(H[a+4>>2],6679,O(1)),L[_a>>2]=cb;L[13472]=L[13458];k=L[13459];H[13458]=1065353216;H[13459]=1065353216;L[13474]=k;a=yb(H[j+8>>2],5691);_a=53904,cb=ab(H[a+4>>2],4121,O(.6000000238418579)),L[_a>>2]=cb;_a=53908,cb=ab(H[a+4>>2],7911,O(1)),L[_a>>2]=cb;_a=53912,cb=ab(H[a+4>>2],3980,O(2)),L[_a>>2]=cb}m=0;W:{X:{q=yb(H[H[14716]+8>>2],3576);Y:{if(!q){break Y}c=H[q+8>>2];a=yb(c,5638);c=yb(c,5668);m=a?H[a+8>>2]:m;if(!c|!m){break Y}r=H[c+8>>2];if(r){break X}}db();Wa(25310,0);break W}j=0;a=H[m+12>>2];f=(a|0)>0?a:0;Z:while(1){_:{if((f|0)==(j|0)){a=H[r+12>>2];oa=(a|0)>0?a:0;j=g+7796|0;l=g+7776|0;m=g+7756|0;i=g+7736|0;o=g+7716|0;t=g+7680|0;c=0;while(1){if((c|0)==(oa|0)){break _}a=0;a=H[r+12>>2]>(c|0)?H[H[r>>2]+(c<<2)>>2]:a;w=fb(H[H[14588]>>2],H[a>>2]);d=H[a+4>>2];v=fb(H[14589],Bb(d,5283));d=Kc(g+7632|0,Bb(d,5845));f=Kc(g+7376|0,Bb(H[a+4>>2],5831));ia=g+7600|0;h=N(v,120);H[ia>>2]=H[h+57268>>2];Q=h+57260|0;x=H[Q+4>>2];aa=g+7592|0;H[aa>>2]=H[Q>>2];H[aa+4>>2]=x;Q=h+57252|0;x=H[Q+4>>2];H[g+7584>>2]=H[Q>>2];H[g+7588>>2]=x;ja=g+7552|0;H[ja>>2]=H[h+57288>>2];x=h+57280|0;y=H[x+4>>2];Q=g+7544|0;H[Q>>2]=H[x>>2];H[Q+4>>2]=y;x=h+57272|0;y=H[x+4>>2];H[g+7536>>2]=H[x>>2];H[g+7540>>2]=y;ka=g+7504|0;H[ka>>2]=H[h+57308>>2];y=h+57300|0;C=H[y+4>>2];x=g+7496|0;H[x>>2]=H[y>>2];H[x+4>>2]=C;y=h+57292|0;C=H[y+4>>2];H[g+7488>>2]=H[y>>2];H[g+7492>>2]=C;la=g+7456|0;H[la>>2]=H[h+57328>>2];C=h+57320|0;S=H[C+4>>2];y=g+7448|0;H[y>>2]=H[C>>2];H[y+4>>2]=S;C=h+57312|0;S=H[C+4>>2];H[g+7440>>2]=H[C>>2];H[g+7444>>2]=S;S=h+57340|0;ba=H[S+4>>2];C=g+7400|0;H[C>>2]=H[S>>2];H[C+4>>2]=ba;S=g+7408|0;H[S>>2]=H[h+57348>>2];h=h+57332|0;ba=H[h+4>>2];H[g+7392>>2]=H[h>>2];H[g+7396>>2]=ba;h=Pd(Bb(H[a+4>>2],5352));a=d;d=H[a+12>>2];ba=g+7672|0;H[ba>>2]=H[a+8>>2];H[ba+4>>2]=d;d=H[a+4>>2];H[g+7664>>2]=H[a>>2];H[g+7668>>2]=d;a=f;d=H[a+12>>2];H[t+8>>2]=H[a+8>>2];H[t+12>>2]=d;d=H[a+4>>2];H[t>>2]=H[a>>2];H[t+4>>2]=d;a=32;while(1){f=g+7664|0;d=f+a|0;H[d+16>>2]=-1027080192;H[d+8>>2]=-1027080192;H[d+12>>2]=-1027080192;H[d>>2]=-1027080192;H[d+4>>2]=-1027080192;a=a+20|0;if((a|0)!=152){continue}break}G[g+7816>>1]=h;H[g+7820>>2]=v;a=H[g+7588>>2];H[o>>2]=H[g+7584>>2];H[o+4>>2]=a;H[o+16>>2]=H[ia>>2];a=H[aa+4>>2];H[o+8>>2]=H[aa>>2];H[o+12>>2]=a;H[i+16>>2]=H[ja>>2];a=H[Q+4>>2];H[i+8>>2]=H[Q>>2];H[i+12>>2]=a;a=H[g+7540>>2];H[i>>2]=H[g+7536>>2];H[i+4>>2]=a;H[m+16>>2]=H[ka>>2];a=H[x+4>>2];H[m+8>>2]=H[x>>2];H[m+12>>2]=a;a=H[g+7492>>2];H[m>>2]=H[g+7488>>2];H[m+4>>2]=a;H[l+16>>2]=H[la>>2];a=H[y+4>>2];H[l+8>>2]=H[y>>2];H[l+12>>2]=a;a=H[g+7444>>2];H[l>>2]=H[g+7440>>2];H[l+4>>2]=a;H[j+16>>2]=H[S>>2];a=H[C+4>>2];H[j+8>>2]=H[C>>2];H[j+12>>2]=a;a=H[g+7396>>2];H[j>>2]=H[g+7392>>2];H[j+4>>2]=a;jb(N(w,160)+54e3|0,f,160);H[(w<<2)+57168>>2]=(v<<7)+56144;c=c+1|0;continue}}a=0;h=0;h=H[m+12>>2]>(j|0)?H[H[m>>2]+(j<<2)>>2]:h;l=fb(H[14589],H[h>>2]);i=l<<7;while(1)if((a|0)==8){a=0;while(1)if((a|0)==6){j=j+1|0;continue Z}else{c=0;d=H[14034];if(H[d+8>>2]>(a|0)){c=H[H[d+4>>2]+(a<<2)>>2]}c=vd(g+7664|0,Bb(H[h+4>>2],c));o=H[c+4>>2];d=N(l,120)+N(a,20)|0;i=d+57232|0;H[i>>2]=H[c>>2];H[i+4>>2]=o;H[d+57248>>2]=H[c+16>>2];i=H[c+12>>2];d=d+57240|0;H[d>>2]=H[c+8>>2];H[d+4>>2]=i;a=a+1|0;continue}}else{d=g+7664|0;o=H[h+4>>2];c=H[14033];if(H[c+8>>2]>(a|0)){c=H[H[c+4>>2]+(a<<2)>>2]}else{c=0}c=Kc(d,Bb(o,c));t=H[c+4>>2];o=i+(a<<4)|0;d=o+56144|0;H[d>>2]=H[c>>2];H[d+4>>2]=t;d=o+56152|0;o=H[c+12>>2];H[d>>2]=H[c+8>>2];H[d+4>>2]=o;a=a+1|0;continue}}break}a=H[q+8>>2];f=yb(a,8649);if(f){a=0;while(1){if((a|0)!=8){c=0;d=H[14033];if(H[d+8>>2]>(a|0)){c=H[H[d+4>>2]+(a<<2)>>2]}c=vd(g+7664|0,Bb(H[f+4>>2],c));j=H[c+4>>2];d=N(a,20);h=d+58192|0;H[h>>2]=H[c>>2];H[h+4>>2]=j;H[d+58208>>2]=H[c+16>>2];h=H[c+12>>2];d=d+58200|0;H[d>>2]=H[c+8>>2];H[d+4>>2]=h;a=a+1|0;continue}break}a=H[q+8>>2]}d=yb(a,5341);if(d){a=1;while(1){if((a|0)!=3){f=H[d+4>>2];c=a<<2;l=c+45840|0;j=H[14590];if(H[j+8>>2]>(a|0)){c=H[c+H[j+4>>2]>>2]}else{c=0}ic(f,l,c);a=a+1|0;continue}break}a=H[q+8>>2]}a=yb(a,5655);if(!a){break W}c=g+7664|0;d=Kc(c,Bb(H[a+4>>2],3784));h=H[d+4>>2];f=H[14592];H[f>>2]=H[d>>2];H[f+4>>2]=h;h=H[d+12>>2];H[f+8>>2]=H[d+8>>2];H[f+12>>2]=h;d=Kc(c,Bb(H[a+4>>2],9970));h=H[d+4>>2];f=H[14592];H[f+16>>2]=H[d>>2];H[f+20>>2]=h;h=H[d+12>>2];H[f+24>>2]=H[d+8>>2];H[f+28>>2]=h;d=vd(c,Bb(H[a+4>>2],11290));h=H[d+4>>2];f=H[14592];H[f+32>>2]=H[d>>2];H[f+36>>2]=h;H[f+48>>2]=H[d+16>>2];h=H[d+12>>2];H[f+40>>2]=H[d+8>>2];H[f+44>>2]=h;d=Kc(c,Bb(H[a+4>>2],3838));h=H[d+4>>2];f=H[14592];H[f+52>>2]=H[d>>2];H[f+56>>2]=h;h=H[d+12>>2];H[f+60>>2]=H[d+8>>2];H[f+64>>2]=h;d=Kc(c,Bb(H[a+4>>2],1e4));h=H[d+4>>2];f=H[14592];H[f+68>>2]=H[d>>2];H[f+72>>2]=h;h=H[d+12>>2];H[f+76>>2]=H[d+8>>2];H[f+80>>2]=h;d=vd(c,Bb(H[a+4>>2],11369));h=H[d+4>>2];f=H[14592];H[f+84>>2]=H[d>>2];H[f+88>>2]=h;H[f+100>>2]=H[d+16>>2];h=H[d+12>>2];H[f+92>>2]=H[d+8>>2];H[f+96>>2]=h;d=Kc(c,Bb(H[a+4>>2],5368));h=H[d+4>>2];f=H[14592];H[f+104>>2]=H[d>>2];H[f+108>>2]=h;h=H[d+12>>2];H[f+112>>2]=H[d+8>>2];H[f+116>>2]=h;d=vd(c,Bb(H[a+4>>2],11314));h=H[d+4>>2];f=H[14592];H[f+120>>2]=H[d>>2];H[f+124>>2]=h;H[f+136>>2]=H[d+16>>2];h=H[d+12>>2];H[f+128>>2]=H[d+8>>2];H[f+132>>2]=h;d=Kc(c,Bb(H[a+4>>2],3862));h=H[d+4>>2];f=H[14592];H[f+140>>2]=H[d>>2];H[f+144>>2]=h;h=H[d+12>>2];H[f+148>>2]=H[d+8>>2];H[f+152>>2]=h;d=vd(c,Bb(H[a+4>>2],11391));h=H[d+4>>2];f=H[14592];H[f+156>>2]=H[d>>2];H[f+160>>2]=h;H[f+172>>2]=H[d+16>>2];h=H[d+12>>2];H[f+164>>2]=H[d+8>>2];H[f+168>>2]=h;d=Kc(c,Bb(H[a+4>>2],3917));h=H[d+4>>2];f=H[14592];H[f+176>>2]=H[d>>2];H[f+180>>2]=h;h=H[d+12>>2];H[f+184>>2]=H[d+8>>2];H[f+188>>2]=h;d=vd(c,Bb(H[a+4>>2],11343));h=H[d+4>>2];f=H[14592];H[f+192>>2]=H[d>>2];H[f+196>>2]=h;H[f+208>>2]=H[d+16>>2];h=H[d+12>>2];H[f+200>>2]=H[d+8>>2];H[f+204>>2]=h;d=Kc(c,Bb(H[a+4>>2],3891));h=H[d+4>>2];f=H[14592];H[f+212>>2]=H[d>>2];H[f+216>>2]=h;h=H[d+12>>2];H[f+220>>2]=H[d+8>>2];H[f+224>>2]=h;d=vd(c,Bb(H[a+4>>2],11251));h=H[d+4>>2];f=H[14592];H[f+228>>2]=H[d>>2];H[f+232>>2]=h;H[f+244>>2]=H[d+16>>2];h=H[d+12>>2];H[f+236>>2]=H[d+8>>2];H[f+240>>2]=h;a=Kc(c,Bb(H[a+4>>2],3813));d=H[a+4>>2];c=H[14592];H[c+248>>2]=H[a>>2];H[c+252>>2]=d;d=H[a+12>>2];H[c+256>>2]=H[a+8>>2];H[c+260>>2]=d}j=H[14716]}a=yb(H[j+8>>2],5818);_a=45672,cb=ab(H[a+4>>2],4287,O(.9950000047683716)),L[_a>>2]=cb;_a=45668,$a=Th(H[a+4>>2],5413,1e3),H[_a>>2]=$a;d=H[a+8>>2];if(d){e=H[d+12>>2]}e=(e|0)>0?e:0;a=0;while(1){if((a|0)!=(e|0)){f=0;f=H[d+12>>2]>(a|0)?H[H[d>>2]+(a<<2)>>2]:f;c=fb(H[13164],H[f>>2]);$:{if(c){k=ab(H[f+4>>2],4705,O(0));c=N(c,28);L[c+H[13165]>>2]=k;k=ab(H[f+4>>2],4718,O(0));L[(c+H[13165]|0)+4>>2]=k;k=ab(H[f+4>>2],6882,O(0));L[(c+H[13165]|0)+8>>2]=k;k=ab(H[f+4>>2],4210,O(0));L[(c+H[13165]|0)+12>>2]=k;k=ab(H[f+4>>2],4287,L[11418]);L[(c+H[13165]|0)+20>>2]=k;k=ab(H[f+4>>2],7135,O(0));L[(c+H[13165]|0)+24>>2]=k;break $}db();H[g+560>>2]=H[f>>2];Wa(26559,g+560|0)}a=a+1|0;continue}break}aa:{ba:{a=yb(H[H[14716]+8>>2],5289);if(!a){break ba}h=H[a+8>>2];if(!h){break ba}a=H[h+12>>2];break aa}h=0;a=0}d=(a|0)>0?a:0;a=0;while(1){if((a|0)!=(d|0)){f=0;f=H[h+12>>2]>(a|0)?H[H[h>>2]+(a<<2)>>2]:f;c=fb(H[12860],H[f>>2]);ca:{if(c){k=ab(H[f+4>>2],4705,O(0));c=c<<4;L[c+H[12859]>>2]=k;k=ab(H[f+4>>2],4718,O(0));L[(c+H[12859]|0)+4>>2]=k;k=ab(H[f+4>>2],6882,O(0));L[(c+H[12859]|0)+8>>2]=k;k=ab(H[f+4>>2],4210,O(0));L[(c+H[12859]|0)+12>>2]=k;break ca}db();H[g+544>>2]=H[f>>2];Wa(26559,g+544|0)}a=a+1|0;continue}break}a=0;Y(49969,40736,0)|0;c=yb(H[H[14716]+8>>2],5438);_a=45664,cb=ab(H[c+4>>2],7188,O(1)),L[_a>>2]=cb;_a=52596,cb=ab(H[c+4>>2],9365,O(.4000000059604645)),L[_a>>2]=cb;_a=52600,cb=ab(H[c+4>>2],9384,O(-.10000000149011612)),L[_a>>2]=cb;while(1){if((a|0)!=9){Fm(N(a,24)+53536|0);a=a+1|0;continue}break}a=0;c=ym(Xa(32));H[13155]=c;d=H[11417];e=(d|0)>0?d:0;k=O(d|0);while(1){if((a|0)!=(e|0)){L[H[c+28>>2]+(a<<2)>>2]=O(a>>>0)/k;a=a+1|0;continue}break}a=0;h=ym(Xa(32));H[13154]=h;while(1){if((a|0)==(e|0)){da:{ea:{if(I[58860]){H[13157]=c;H[13156]=c;H[13158]=c;H[13159]=c;H[13160]=c;H[13161]=c;H[13162]=c;l=c;j=c;m=c;a=c;f=a;d=a;break ea}_a=52624,$a=xd(1),H[_a>>2]=$a;_a=52628,$a=xd(2),H[_a>>2]=$a;_a=52632,$a=xd(3),H[_a>>2]=$a;_a=52636,$a=xd(7),H[_a>>2]=$a;_a=52640,$a=xd(4),H[_a>>2]=$a;_a=52644,$a=xd(5),H[_a>>2]=$a;_a=52648,$a=xd(6),H[_a>>2]=$a;f=xd(8);h=H[13154];c=H[13155];l=H[13161];j=H[13160];m=H[13159];a=H[13156];d=H[13162]}H[13378]=d;H[13377]=l;H[13376]=j;H[13375]=a;H[13374]=m;H[13371]=a;H[13370]=h;H[13368]=a;H[13163]=f;H[13379]=c;H[13369]=f;e=Pg(H[H[14707]+12>>2]);a=Xa(16);H[a+12>>2]=0;H[a+4>>2]=10;H[a+8>>2]=100;c=ib(400);H[a>>2]=c;if(c){c=100;ud(a,0,100);H[13224]=a;d=Xa(28);H[d+24>>2]=0;H[d+16>>2]=0;H[d+20>>2]=0;H[d+8>>2]=0;H[d+12>>2]=100;a=ib(800);H[d>>2]=a;if(a){H[d+4>>2]=100;a=0;while(1){if((a|0)<(c|0)){c=a<<3;H[c+H[d>>2]>>2]=0;G[(c+H[d>>2]|0)+4>>1]=0;a=a+1|0;c=H[d+4>>2];continue}break}H[13223]=d;a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[13225]=a;if(!e){db();H[g+480>>2]=14803;Wa(23022,g+480|0);Wa(26520,0);break da}j=H[e+8>>2];if(!j){Va(Gc(e));break da}a=H[j+12>>2];q=(a|0)>0?a:0;m=0;while(1){fa:{ga:{ha:{if((m|0)!=(q|0)){a=0;a=H[j+12>>2]>(m|0)?H[H[j>>2]+(m<<2)>>2]:a;c=H[a>>2];if(!Hb(c,11448)){d=Bp(Bb(H[a+4>>2],5702));if(d){if(H[d+12>>2]<=0){db();Wa(22494,0);break ha}a=ch(a);if(!a){break ha}t=0;f=0;c=H[13223];while(1)if(H[d+12>>2]<=(f|0)){c=H[13225];Dk(c,H[c+12>>2],a);break ga}else{ia:{ja:{ka:{la:{i=H[H[d>>2]+(f<<2)>>2];h=H[c>>2]+((de(i)>>>0)%K[c+4>>2]<<3)|0;switch(J[h+4>>1]){case 1:break ka;case 0:break la;default:break ja}}l=Xa(12);H[l+8>>2]=0;H[l+4>>2]=a;H[l>>2]=i;H[h>>2]=l;H[c+12>>2]=H[c+12>>2]-1;l=16;break ia}H[c+16>>2]=H[c+16>>2]-1}o=H[h>>2];l=Xa(12);H[l+8>>2]=H[o+8>>2];H[l>>2]=i|t;H[l+4>>2]=a;H[o+8>>2]=l;l=8}l=l+c|0;H[l>>2]=H[l>>2]+1;G[h+4>>1]=J[h+4>>1]+1;H[c+24>>2]=H[c+24>>2]+1;f=f+1|0;continue}}db();Wa(22494,0);break fa}d=Mf(H[14664],fb(H[H[14594]>>2],c))<<16;if(!d){db();H[g+500>>2]=14803;H[g+496>>2]=c;Wa(22959,g+496|0);break fa}f=H[H[14658]+(d>>14)>>2];d=Bb(H[a+4>>2],9837);if(!d){db();H[g+520>>2]=9837;H[g+516>>2]=14803;H[g+512>>2]=c;Wa(26852,g+512|0);break fa}if((fb(H[f>>2],d)&65535)==65535){c=H[13479];H[13479]=c+1;c=c<<16>>16;Zi(f,c,d);a=ch(a);if(!a){break fa}Dk(H[13224],c,a);break fa}db();H[g+536>>2]=d;H[g+532>>2]=9837;H[g+528>>2]=c;Wa(26631,g+528|0);break fa}Va(Gc(e));break da}Xd(d)}nb(d);Va(d)}m=m+1|0;continue}}H[d+4>>2]=0;H[g+64>>2]=100;H[g+68>>2]=8;Wa(24709,g- -64|0);break a}H[g+48>>2]=100;Wa(24301,g+48|0);H[a+8>>2]=0;break a}}else{H[H[h+28>>2]+(a<<2)>>2]=1065353216;a=a+1|0;continue}break}H[g+464>>2]=ga;Y(49282,34173,g+464|0)|0;o=Xa(40);a=H[H[14707]+8>>2];H[o>>2]=-1;t=zb(o+4|0,0,36);ma:{c=Pg(a);if(c){a=c;na:{while(1){if(a){d=H[a+8>>2];if(!Hb(H[a>>2],11431)){break na}a=0;if(H[d+12>>2]<=0){continue}a=H[H[d>>2]>>2];continue}break}Va(Gc(c));H[g+96>>2]=14803;Wa(23696,g+96|0);H[g+80>>2]=14803;Y(46172,34173,g+80|0)|0;break f}e=yb(d,6497);if(e){d=yb(H[e+8>>2],7226);if(d){h=yb(H[d+8>>2],4352);if(h){_a=44916,cb=ab(H[d+4>>2],10037,O(1)),L[_a>>2]=cb;f=-1;_a=o,$a=_i(Xa(16)),H[_a+12>>2]=$a;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[o+16>>2]=d;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[o+20>>2]=d;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[o+24>>2]=d;_a=o,$a=_i(Xa(16)),H[_a+28>>2]=$a;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[o+32>>2]=d;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[o+36>>2]=d;_a=o,$a=Th(H[a+4>>2],34223,-1),H[_a>>2]=$a;_a=o,$a=qb(Bb(H[e+4>>2],34223)),H[_a+4>>2]=$a;_a=o,$a=qb(Bb(H[e+4>>2],9832)),H[_a+8>>2]=$a;gn(o,h,-1,L[11229]);Va(Gc(c));d=H[o+32>>2];h=H[d+12>>2];l=H[H[o+28>>2]>>2];a=fb(l,11884);if(!((a|0)<0|(a|0)>=(h|0))){f=G[H[d>>2]+(a<<1)>>1]}if((fb(H[H[o+12>>2]>>2],12976)|0)==(f|0)){d=g+7584|0;c=H[o+20>>2];mb(d,H[c>>2],H[c+12>>2],f);e=g+7664|0;c=H[o+24>>2];bg(e,H[c>>2],H[c+12>>2],f);c=g+7536|0;h=H[o+36>>2];mb(c,H[h>>2],H[h+12>>2],a);H[g+448>>2]=f;Wa(15444,g+448|0);tb(d,H[14711],6);H[g+432>>2]=f;Wa(15225,g+432|0);Id(e,H[14711]);H[g+416>>2]=a;Wa(15424,g+416|0);tb(c,H[14711],6);Xb(e,c);lb(c,d);H[g+400>>2]=a;Wa(15409,g+400|0);tb(c,H[14711],6);Lb();l=H[H[o+28>>2]>>2];d=H[o+32>>2];h=H[d+12>>2]}a=-1;c=fb(l,11661);if(!((c|0)<0|(c|0)>=(h|0))){a=G[H[d>>2]+(c<<1)>>1]}d=H[H[o+12>>2]>>2];if((fb(d,12929)|0)==(a|0)){e=g+7536|0;f=H[o+20>>2];h=H[f>>2];f=H[f+12>>2];mb(e,h,f,a);j=g+7664|0;l=H[o+24>>2];m=H[l>>2];l=H[l+12>>2];bg(j,m,l,a);a=g+7488|0;i=H[o+36>>2];mb(a,H[i>>2],H[i+12>>2],c);Xb(j,a);lb(a,e);c=g+7440|0;d=fb(d,12971);mb(c,h,f,d);e=g+7584|0;bg(e,m,l,d);Xb(e,a);lb(a,c)}h=Xa(492);j=0;d=0;i=Ha-768|0;Ha=i;H[h+4>>2]=0;H[h+8>>2]=0;F[h|0]=1;H[h+32>>2]=0;H[h+36>>2]=0;F[h+28|0]=1;H[h+80>>2]=0;H[h+84>>2]=0;H[h+56>>2]=0;H[h+60>>2]=0;H[h+136>>2]=-1;H[h+12>>2]=0;H[h+16>>2]=0;H[h+20>>2]=0;H[h+24>>2]=0;H[h+40>>2]=0;H[h+44>>2]=0;H[h+48>>2]=0;H[h+52>>2]=0;H[h+88>>2]=0;H[h+92>>2]=0;H[h+96>>2]=0;a=h+116|0;Ec(a,171);H[h+164>>2]=-1;e=341;q=h+144|0;Ec(q,341);H[h+196>>2]=0;H[h+188>>2]=0;H[h+192>>2]=0;H[h+180>>2]=0;H[h+184>>2]=341;c=ib(2728);H[h+172>>2]=c;oa:{if(c){r=h+172|0;H[h+176>>2]=341;while(1){if((e|0)>(j|0)){c=j<<3;H[c+H[h+172>>2]>>2]=0;G[(c+H[h+172>>2]|0)+4>>1]=0;j=j+1|0;e=H[h+176>>2];continue}break}H[h+220>>2]=-1;aa=h+200|0;Ec(aa,171);H[h+228>>2]=0;f=hn(h+232|0);H[h+484>>2]=990057071;H[h+476>>2]=1066611507;H[h+480>>2]=1008981770;H[h+468>>2]=1022739087;H[h+472>>2]=1065353216;H[h+460>>2]=1066192077;H[h+464>>2]=1017370378;H[h+452>>2]=1073741824;H[h+456>>2]=1000593162;H[h+444>>2]=1066192077;H[h+448>>2]=1056964608;H[h+436>>2]=1008981770;H[h+440>>2]=1017370378;H[h+428>>2]=998445679;H[h+432>>2]=1066611507;H[h+420>>2]=1003814388;H[h+424>>2]=990057071;H[h+412>>2]=1000593162;H[h+416>>2]=1003814388;H[h+404>>2]=1053609165;H[h+408>>2]=992204554;H[h+396>>2]=1053609165;H[h+400>>2]=1054280253;H[h+388>>2]=1035489772;H[h+392>>2]=1015759766;H[h+380>>2]=1028443341;H[h+384>>2]=1072064102;e=H[o+8>>2];c=0;pa:{if(I[e|0]!=65){break pa}c=0;if(I[e+1|0]!=82){break pa}c=I[e+2|0]==80}F[52365]=c;_a=h,$a=qb(e),H[_a+56>>2]=$a;_a=h,$a=qb(H[o+4>>2]),H[_a+60>>2]=$a;H[i+416>>2]=1020269481;H[i+420>>2]=1011880873;H[i+408>>2]=1011880873;H[i+412>>2]=1020269481;H[i+400>>2]=1020269481;H[i+404>>2]=-1127214167;H[i+392>>2]=0;H[i+396>>2]=1060437492;H[i+384>>2]=0;H[i+388>>2]=-1087046156;H[i+376>>2]=0;H[i+380>>2]=1060437492;H[i+368>>2]=0;H[i+372>>2]=-1087046156;H[h+100>>2]=0;H[h+76>>2]=0;H[h+68>>2]=0;H[h+72>>2]=0;H[h+64>>2]=12873;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[h+104>>2]=c;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[h+108>>2]=c;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[h+488>>2]=0;H[h+112>>2]=c;jb(f,53768,148);H[h+96>>2]=52024;H[h+92>>2]=51684;H[h+88>>2]=52024;H[h+84>>2]=51684;c=H[H[o+12>>2]+4>>2];if(c){d=H[c+12>>2]}l=(d|0)>0?d:0;j=0;while(1)if((j|0)==(l|0)){f=d;if(!I[52365]){break oa}j=0;c=d;while(1)if((j|0)==2){f=c&65535;break oa}else{e=H[(j<<2)+31648>>2];if((fb(a,e)|0)==H[h+136>>2]){f=c<<16>>16;m=Mn(Xa(104),qb(e),f);Ld(H[h+104>>2],f,m);ob(a,e,f);c=c+1|0}j=j+1|0;continue}}else{c=H[H[o+12>>2]+4>>2];if(H[c+12>>2]>(j|0)){c=H[H[c>>2]+(j<<2)>>2]}else{c=0}c=qb(c);e=Mn(Xa(104),c,j);Ld(H[h+104>>2],j,e);ob(a,c,j);j=j+1|0;continue}}H[h+176>>2]=0;H[i>>2]=341;H[i+4>>2]=8;Wa(24709,i);break a}j=0;while(1){if((j|0)==(l|0)){qa:{if(!I[52365]){break qa}j=0;c=d;while(1){if((j|0)==2){break qa}e=c<<16>>16;ra:{if((e|0)<0){break ra}l=H[h+104>>2];m=H[l+12>>2];if((m|0)<=(e|0)){break ra}v=H[l>>2];e=H[v+(e<<2)>>2];if(!e){break ra}l=fb(a,12519);sa:{if((l|0)<0|(l|0)>=(m|0)){break sa}l=H[v+(l<<2)>>2];if(!l){break sa}H[e+8>>2]=l;Ln(l,e)}uo(e+40|0,(i+400|0)+N(j,12)|0,(i+368|0)+(j<<4)|0);c=c+1|0}j=j+1|0;continue}}}else{e=0;m=H[h+104>>2];v=H[m+12>>2];if((v|0)>(j|0)){e=H[H[m>>2]+(j<<2)>>2]}c=H[o+16>>2];ta:{if(H[c+12>>2]<=(j|0)){break ta}c=G[H[c>>2]+(j<<1)>>1];if((c|0)==-1){break ta}ua:{if(!((c|0)<0|(c|0)>=(v|0))){c=H[H[m>>2]+(c<<2)>>2];if(c){break ua}}db();c=H[e>>2];H[i+228>>2]=j;H[i+224>>2]=c;Wa(21981,i+224|0);break ta}H[e+8>>2]=c;Ln(c,e)}c=i+756|0;m=H[o+20>>2];mb(c,H[m>>2],H[m+12>>2],j);m=i+240|0;v=H[o+24>>2];bg(m,H[v>>2],H[v+12>>2],j);uo(e+40|0,c,m);j=j+1|0;continue}break}va:{wa:{xa:{ya:{a=fb(a,11560);if((a|0)>=0){c=H[h+104>>2];if((a|0)<H[c+12>>2]){break ya}}H[h+100>>2]=0;break xa}c=H[H[c>>2]+(a<<2)>>2];H[h+100>>2]=c;if(!c){break xa}Gn(c);j=0;a=H[H[o+28>>2]+4>>2];if(a){j=H[a+12>>2]}l=(j|0)>0?j:0;e=0;while(1){if((e|0)==(l|0)){za:{Tm(h,12362,11944,12697,12290);Tm(h,12373,11950,12703,12296);a=H[h+100>>2];if(!a){break za}Aa:{Ba:{c=H[a>>2];a=H[13121];if(!Hb(c,H[a>>2])){break Ba}a=H[13122];if(!Hb(c,H[a>>2])){break Ba}a=H[13123];if(!Hb(c,H[a>>2])){break Ba}a=H[h+68>>2];if(a){break Aa}Wa(25216,0);break wa}H[h+68>>2]=a}m=Xa(268);c=m;H[c+236>>2]=0;H[c+240>>2]=10;H[c+244>>2]=0;H[c+248>>2]=0;H[c+260>>2]=0;H[c+264>>2]=0;H[c+252>>2]=0;H[c+256>>2]=10;c=Ad(h,H[a>>2]);H[m>>2]=c;if(!c){H[i+192>>2]=H[a>>2];Wa(22846,i+192|0)}e=Ad(h,H[a+4>>2]);H[m+8>>2]=e;if(e){l=!c}else{H[i+176>>2]=H[a+4>>2];Wa(22846,i+176|0);l=1}q=m+252|0;r=m+236|0;v=m+8|0;Q=m+52|0;x=m+172|0;y=m+20|0;C=a+16|0;oa=m+228|0;ia=a+108|0;ja=m+220|0;ka=a+100|0;la=m+212|0;S=a+92|0;ba=m+12|0;pa=a+8|0;c=0;Ca:{Da:while(1){Ea:{if((c|0)==2){j=H[H[m+20>>2]+8>>2];H[m+4>>2]=j;if(l&1){break Ea}while(1){a=H[v>>2];if(!a|(a|0)==(j|0)){break Ca}Wc(q,a);v=a+8|0;continue}}e=c<<2;w=e+pa|0;j=Ad(h,H[w>>2]);H[e+ba>>2]=j;if(!j){H[i+160>>2]=H[w>>2];Wa(22846,i+160|0);l=1}_a=e+la|0,$a=Ad(h,H[e+S>>2]),H[_a>>2]=$a;_a=e+ja|0,$a=Ad(h,H[e+ka>>2]),H[_a>>2]=$a;_a=e+oa|0,$a=Ad(h,H[e+ia>>2]),H[_a>>2]=$a;e=0;j=0;while(1){if((j|0)!=4){ca=j<<2;fa=c<<4;sa=ca+(fa+C|0)|0;w=Ad(h,H[sa>>2]);H[ca+(y+fa|0)>>2]=w;if(!w){H[i+144>>2]=H[sa>>2];Wa(22846,i+144|0);l=1}j=j+1|0;continue}break}Fa:while(1){if((e|0)==5){c=c+1|0;continue Da}ag(a,c,e,3);j=Wb(h,52384);H[(x+N(c,20)|0)+(e<<2)>>2]=j;if(!j){H[i+128>>2]=52384;Wa(22901,i+128|0);l=1}j=0;w=Q+N(c,60)|0;while(1)if((j|0)==3){e=e+1|0;continue Fa}else{ag(a,c,e,j);fa=(w+N(e,12)|0)+(j<<2)|0;ca=Ad(h,52384);H[fa>>2]=ca;Ga:{if(ca){break Ga}H[i+112>>2]=52384;Wa(22846,i+112|0);l=1;if(H[fa>>2]){break Ga}H[i+96>>2]=52384;Wa(22846,i+96|0)}j=j+1|0;continue}}}break}break wa}while(1){c=H[m>>2];if(!(!j|(c|0)==(j|0))){Wc(r,j);j=H[j+8>>2];continue}break}H[h+72>>2]=m;v=Xa(132);a=v;H[a+100>>2]=0;H[a+104>>2]=10;H[a+108>>2]=0;H[a+112>>2]=0;H[a+124>>2]=0;H[a+128>>2]=0;H[a+116>>2]=0;H[a+120>>2]=10;G[a>>1]=H[c+4>>2];G[a+2>>1]=H[H[m+4>>2]+4>>2];G[a+4>>1]=H[H[m+8>>2]+4>>2];w=m+52|0;Q=m+20|0;x=m+228|0;y=m+220|0;C=m+212|0;oa=m+12|0;ia=a+26|0;ja=a+10|0;ka=a+94|0;la=a+90|0;S=a+86|0;ba=a+6|0;pa=a+116|0;fa=a+100|0;l=0;a=0;Ha:while(1){if((a|0)==2){while(1){if(H[m+264>>2]<=(l|0)){Ia:{j=0;while(1){if(H[m+248>>2]<=(j|0)){break Ia}cn(fa,H[H[r>>2]+(j<<2)>>2]+4|0);j=j+1|0;continue}}}else{cn(pa,H[H[q>>2]+(l<<2)>>2]+4|0);l=l+1|0;continue}break}H[h+76>>2]=v;break za}c=a<<1;e=a<<2;G[c+ba>>1]=H[H[e+oa>>2]+4>>2];ca=c+S|0;j=H[e+C>>2];if(j){j=H[j+4>>2]}else{j=65535}G[ca>>1]=j;ca=c+la|0;j=H[e+y>>2];if(j){j=H[j+4>>2]}else{j=65535}G[ca>>1]=j;j=c+ka|0;c=H[e+x>>2];if(c){c=H[c+4>>2]}else{c=65535}G[j>>1]=c;e=0;j=0;while(1){if((j|0)!=4){G[(ja+(a<<3)|0)+(j<<1)>>1]=H[H[(Q+(a<<4)|0)+(j<<2)>>2]+4>>2];j=j+1|0;continue}break}while(1){j=0;if((e|0)==5){a=a+1|0;continue Ha}else{while(1){if((j|0)!=3){G[((ia+N(a,30)|0)+N(e,6)|0)+(j<<1)>>1]=H[H[((w+N(a,60)|0)+N(e,12)|0)+(j<<2)>>2]+4>>2];j=j+1|0;continue}break}e=e+1|0;continue}}}}}else{a=H[H[o+28>>2]+4>>2];if(H[a+12>>2]>(e|0)){a=H[H[a>>2]+(e<<2)>>2]}else{a=0}j=qb(a);a=Xa(56);H[a+28>>2]=0;H[a+32>>2]=0;H[a+4>>2]=e;H[a>>2]=j;H[a+36>>2]=0;H[a+40>>2]=0;H[a+44>>2]=0;H[a+48>>2]=0;G[a+12>>1]=J[29356];F[a+14|0]=I[58714];H[a+24>>2]=0;H[a+8>>2]=0;H[a+52>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;c=-1;m=H[o+32>>2];if(H[m+12>>2]>(e|0)){c=G[H[m>>2]+(e<<1)>>1]}Ja:{Ka:{La:{if((c|0)<0){break La}m=H[h+104>>2];if(H[m+12>>2]<=(c|0)){break La}c=H[H[m>>2]+(c<<2)>>2];if(c){break Ka}}db();H[i+208>>2]=j;Wa(27156,i+208|0);Va(kn(a));break Ja}Sm(i+240|0,H[13130],j);F[a+14|0]=I[i+242|0];G[a+12>>1]=J[i+240>>1];H[a+8>>2]=(H[a+12>>2]&16777215)==(H[14678]&16777215)?3:1;Xc(H[h+108>>2],e,a);ob(q,j,e);j=H[a+12>>2];if((j&16777215)!=(H[14678]&16777215)){$f(r,j,a)}hi(c,a);H[a+16>>2]=c;c=i+240|0;j=H[o+36>>2];mb(c,H[j>>2],H[j+12>>2],e);cg(a,c);H[a+20>>2]=1028443341}e=e+1|0;continue}break}c=0;while(1)if((c|0)==2){a=(I[52365]?f:d)<<16>>16;v=(a|0)>0?a:0;j=0;while(1)if((j|0)==(v|0)){c=yb(H[H[14716]+8>>2],3607);_a=h,$a=rn(Xa(16),100),H[_a+488>>2]=$a;a=Wb(h,12146);d=Wb(h,11754);if(!(!a|!d)){e=i+756|0;Ya(e,a+40|0);a=i+744|0;Ya(a,d+40|0);H[i+740>>2]=0;H[i+732>>2]=0;H[i+736>>2]=0;dc(i+732|0,e,a);L[h+380>>2]=O(L[i+756>>2]-L[i+744>>2])*O(2.5);sb(h,12421,36);sb(h,12174,37);sb(h,11782,38);sb(h,12709,39);sb(h,12066,40);sb(h,11666,41);sb(h,12079,42);sb(h,11687,43);sb(h,12661,7);sb(h,12661,46);sb(h,12645,8);sb(h,12263,34);sb(h,11871,35);sb(h,12684,44);sb(h,12212,0);sb(h,11820,1);sb(h,12575,2);sb(h,12636,4);sb(h,12223,3);sb(h,11831,5);sb(h,12622,62);sb(h,12560,65);a=i+720|0;e=H[h+488>>2];d=H[e>>2];e=H[e+12>>2];mb(a,d,e,3);k=L[i+720>>2];f=i+708|0;mb(f,d,e,5);n=L[i+708>>2];mb(a,d,e,62);k=O(O(k-n)*O(.5));_f(h,61,63,a,O(k*O(.8999999761581421)));d=H[h+488>>2];mb(a,H[d>>2],H[d+12>>2],65);_f(h,64,66,a,k);sb(h,12584,6);sb(h,12155,9);sb(h,11763,10);sb(h,12675,48);sb(h,12242,53);sb(h,11850,55);d=H[h+488>>2];e=H[d>>2];d=H[d+12>>2];mb(a,e,d,53);mb(f,e,d,55);k=L[i+708>>2];n=L[i+720>>2];p=ab(H[c+4>>2],8410,O(.25));d=i+696|0;e=H[h+488>>2];j=H[e>>2];l=H[e+12>>2];mb(d,j,l,48);e=i+684|0;mb(e,j,l,2);H[i+680>>2]=0;H[i+672>>2]=0;H[i+676>>2]=0;j=i+672|0;dc(j,d,e);H[i+668>>2]=0;H[i+660>>2]=0;H[i+664>>2]=0;l=i+660|0;Nb(l,d,e);wb(l,O(.20000000298023224));lb(j,l);k=O(p*O(O(n-k)*O(.5)));_f(h,49,50,d,k);_f(h,51,52,j,O(k*O(.5)));H[i+656>>2]=0;H[i+648>>2]=0;H[i+652>>2]=0;d=i+648|0;dc(d,a,f);Ib(H[h+488>>2],54,d);p=ab(H[c+4>>2],7630,O(.10000000149011612));k=ab(H[c+4>>2],4661,O(.44999998807907104));n=ab(H[c+4>>2],8337,O(.05000000074505806));H[i+644>>2]=0;H[i+636>>2]=0;H[i+640>>2]=0;H[i+632>>2]=0;H[i+624>>2]=0;H[i+628>>2]=0;a=i+612|0;l=H[h+488>>2];e=H[l>>2];f=H[l+12>>2];mb(a,e,f,53);c=i+600|0;mb(c,e,f,49);j=i+624|0;dc(j,a,c);mb(a,e,f,54);p=O(-p);Ud(j,a,p);mb(a,e,f,53);mb(c,e,f,54);d=i+636|0;dc(d,a,c);mb(a,e,f,49);Ud(d,a,k);mb(a,e,f,2);Ud(d,a,n);Ib(l,56,d);Ib(H[h+488>>2],59,j);l=H[h+488>>2];e=H[l>>2];f=H[l+12>>2];mb(a,e,f,55);mb(c,e,f,50);dc(j,a,c);mb(a,e,f,54);Ud(j,a,p);mb(a,e,f,55);mb(c,e,f,54);dc(d,a,c);mb(a,e,f,50);Ud(d,a,k);mb(a,e,f,2);Ud(d,a,n);Ib(l,58,d);Ib(H[h+488>>2],60,j);e=H[h+488>>2];f=H[e>>2];j=H[e+12>>2];mb(a,f,j,48);mb(c,f,j,54);dc(d,a,c);Ib(e,57,d);f=a;a=H[h+488>>2];d=H[a>>2];e=H[a+12>>2];mb(f,d,e,3);mb(c,d,e,5);mb(i+588|0,d,e,54);n=L[i+600>>2];p=L[i+612>>2];c=Wb(h,12137);F[52364]=!c;k=O(p-n);Ma:{if(c){sb(h,12137,11);sb(h,11745,12);sb(h,12199,13);sb(h,12609,14);sb(h,11807,15);sb(h,12186,16);sb(h,12596,17);sb(h,11794,18);break Ma}u=L[i+592>>2];s=L[i+604>>2];A=L[i+616>>2];n=O(O(p+n)*O(.5));L[i+576>>2]=k+n;p=L[i+596>>2];L[i+584>>2]=O(p+O(p+O(L[i+620>>2]+L[i+608>>2])))*O(.25);L[i+580>>2]=O(u+O(u+O(A+s)))*O(.25);c=a;a=i+576|0;Ib(c,11,a);L[i+576>>2]=n-k;Ib(H[h+488>>2],12,a);L[i+576>>2]=n;u=L[h+416>>2];s=L[h+424>>2];p=L[h+428>>2];A=O(p+L[h+420>>2]);L[i+572>>2]=A;n=O(k*O(.5));L[i+564>>2]=n;z=u;u=O(s*O(.5));s=O(z+u);L[i+568>>2]=s;c=i+564|0;Zf(h,13,14,15,a,c);L[i+572>>2]=A;L[i+568>>2]=-s;L[i+564>>2]=n;Zf(h,16,17,18,a,c);L[i+572>>2]=p;L[i+568>>2]=u;L[i+564>>2]=n;Zf(h,19,20,21,a,c);L[i+572>>2]=p;L[i+568>>2]=-u;L[i+564>>2]=n;Zf(h,22,23,24,a,c)}k=O(k*O(.6000000238418579));Sd(h,1048612,k);Sd(h,1048613,k);Sd(h,1048614,k);d=i+576|0;e=H[h+488>>2];c=H[e>>2];f=H[e+12>>2];mb(d,c,f,14);a=i+564|0;mb(a,c,f,17);H[i+560>>2]=0;H[i+552>>2]=0;H[i+556>>2]=0;c=i+552|0;dc(c,d,a);Ib(e,25,c);n=L[h+416>>2];k=L[h+420>>2];H[i+576>>2]=0;L[i+584>>2]=-k;L[i+580>>2]=-n;H[i+572>>2]=0;H[i+564>>2]=0;H[i+568>>2]=0;e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],13);Vb(a,d,c);Ib(e,19,a);e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],14);Vb(a,d,c);Ib(e,20,a);e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],15);Vb(a,d,c);Ib(e,21,a);L[i+584>>2]=k;e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],16);Vb(a,d,c);Ib(e,22,a);e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],17);Vb(a,d,c);Ib(e,23,a);e=H[h+488>>2];mb(c,H[e>>2],H[e+12>>2],18);Vb(a,d,c);Ib(e,24,a);Ib(H[h+488>>2],26,i+756|0);Ib(H[h+488>>2],27,i+744|0);Na:{if(Wb(h,12092)){sb(h,12092,28);sb(h,11700,29);sb(h,12122,30);sb(h,11730,31);sb(h,12107,32);sb(h,11715,33);break Na}db();Wa(22560,0);H[i+584>>2]=0;H[i+576>>2]=0;H[i+580>>2]=0;H[i+572>>2]=1008981770;H[i+564>>2]=0;H[i+568>>2]=-1138501878;a=i+576|0;d=i+756|0;c=i+564|0;Vb(a,d,c);Ib(H[h+488>>2],28,a);H[i+572>>2]=1008981770;H[i+564>>2]=0;H[i+568>>2]=-1138501878;e=i+744|0;Vb(a,e,c);Ib(H[h+488>>2],29,a);H[i+572>>2]=1008981770;H[i+564>>2]=0;H[i+568>>2]=1008981770;Vb(a,d,c);Ib(H[h+488>>2],30,a);H[i+572>>2]=1008981770;H[i+564>>2]=0;H[i+568>>2]=1008981770;Vb(a,e,c);Ib(H[h+488>>2],31,a);H[i+572>>2]=0;H[i+564>>2]=1017370378;H[i+568>>2]=0;Vb(a,d,c);Ib(H[h+488>>2],32,a);H[i+572>>2]=0;H[i+564>>2]=-1130113270;H[i+568>>2]=0;Vb(a,e,c);Ib(H[h+488>>2],33,a)}a=H[h+488>>2];c=H[a>>2];d=H[a+12>>2];mb(i+576|0,c,d,9);mb(i+564|0,c,d,10);e=i+552|0;mb(e,c,d,46);A=L[i+576>>2];ea=+L[i+552>>2]*.707;k=L[i+556>>2];z=L[i+584>>2];za=+L[i+560>>2]*.707;cc(a,45,O(+A*.707+ea),k,O(+z*.707+za));V=L[i+564>>2];X=L[i+572>>2];cc(H[h+488>>2],47,O(+V*.707+ea),k,O(+X*.707+za));d=H[h+488>>2];a=H[d>>2];c=H[d+12>>2];mb(e,a,c,3);f=i+540|0;mb(f,a,c,5);mb(i+528|0,a,c,4);mb(i+516|0,a,c,65);k=L[i+520>>2];n=L[i+524>>2];p=L[i+536>>2];cc(d,64,L[i+552>>2],k,O(O(L[i+560>>2]+n)-p));cc(H[h+488>>2],66,L[i+540>>2],k,O(O(n+L[i+548>>2])-p));d=i+504|0;a=H[h+488>>2];c=H[a>>2];j=H[a+12>>2];mb(d,c,j,0);l=i+492|0;mb(l,c,j,1);c=i+480|0;Ya(c,e);Fd(c,d);Ib(a,67,c);a=i+468|0;Ya(a,f);Fd(a,l);Ib(H[h+488>>2],68,a);a=I[52364];sb(h,11859,76);sb(h,12251,84);Oa:{if(!a){sb(h,11771,73);sb(h,12163,81);break Oa}a=i+456|0;e=H[h+488>>2];d=H[e>>2];f=H[e+12>>2];mb(a,d,f,84);c=i+444|0;mb(c,d,f,9);H[i+440>>2]=0;H[i+432>>2]=0;H[i+436>>2]=0;d=i+432|0;mc(d,c,a,O(-1));Ib(e,81,d);e=H[h+488>>2];f=H[e>>2];j=H[e+12>>2];mb(a,f,j,76);mb(c,f,j,10);H[i+440>>2]=0;H[i+432>>2]=0;H[i+436>>2]=0;mc(d,c,a,O(-1));Ib(e,73,d)}n=L[h+480>>2];k=L[h+484>>2];c=i+456|0;a=H[h+488>>2];d=H[a>>2];e=H[a+12>>2];mb(c,d,e,73);f=i+444|0;mb(f,d,e,76);_=L[h+476>>2];p=L[i+568>>2];s=O(k+L[i+456>>2]);u=L[i+460>>2];E=L[i+464>>2];cc(a,69,s,u,E);_=O(_*O(u-p));E=O(E-O(_*O(.6000000238418579)));cc(H[h+488>>2],70,s,u,E);cc(H[h+488>>2],74,O(s-n),u,E);u=O(k+V);s=O(X-_);cc(H[h+488>>2],71,u,p,s);cc(H[h+488>>2],75,O(u-n),p,s);cc(H[h+488>>2],72,O(k+L[i+444>>2]),L[i+448>>2],L[i+452>>2]);e=c;a=H[h+488>>2];c=H[a>>2];d=H[a+12>>2];mb(e,c,d,81);mb(f,c,d,84);V=L[h+476>>2];p=L[i+580>>2];s=O(L[i+456>>2]-k);u=L[i+460>>2];X=L[i+464>>2];cc(a,77,s,u,X);V=O(V*O(u-p));X=O(X-O(V*O(.6000000238418579)));cc(H[h+488>>2],78,s,u,X);cc(H[h+488>>2],82,O(n+s),u,X);u=O(A-k);s=O(z-V);cc(H[h+488>>2],79,u,p,s);cc(H[h+488>>2],83,O(n+u),p,s);cc(H[h+488>>2],80,O(L[i+444>>2]-k),L[i+448>>2],L[i+452>>2]);sb(h,12232,86);sb(h,11840,85);e=0;q=on(Xa(16),600);Pa:while(1){a=J[(e<<16>>16<<1)+44928>>1];if((a|0)!=65535){d=e;e=d+2|0;c=e;Qa:{switch(a|0){case 0:while(1){c=(e<<16>>16<<1)+44928|0;if(J[c>>1]!=65535){Gb(q,c);a=a+1|0;e=e+1|0;continue}break};G[i+756>>1]=65535;Gb(q,i+756|0);a=a<<16>>16;if((a|0)<=2){H[i+32>>2]=a;Wa(24021,i+32|0)}e=e+1|0;continue;case 1:a=e<<16>>16<<1;Gb(q,a+44928|0);c=a+44930|0;Gb(q,c);e=a+44932|0;Gb(q,e);G[i+756>>1]=65535;f=i+756|0;Gb(q,f);Gb(q,a+44934|0);Gb(q,e);Gb(q,c);G[i+756>>1]=65535;Gb(q,f);e=d+7|0;continue;case 2:G[i+756>>1]=J[(e<<16>>16<<1)+44928>>1];e=d+4|0;while(1){a=e<<16>>16<<1;c=a+44928|0;if(J[c>>1]!=65535){Gb(q,i+756|0);Gb(q,a+44926|0);Gb(q,c);G[i+744>>1]=65535;Gb(q,i+744|0);e=e+1|0;continue}break};e=e+1|0;continue;case 3:break Qa;default:continue}}while(1){f=c;c=c+1|0;if(J[(f<<16>>16<<1)+44928>>1]!=65535){continue}break}a=c;while(1){m=a;a=a+1|0;if(J[(m<<16>>16<<1)+44928>>1]!=65535){continue}break}l=c<<16>>16;j=e<<16>>16;m=m-c<<16>>16;e=f-e|0;c=e<<16>>16;Ra:{if((c|0)==(m+2|0)){f=j<<1;Gb(q,f+44928|0);Gb(q,(l<<1)+44928|0);Gb(q,f+44930|0);G[i+756>>1]=65535;f=i+756|0;Gb(q,f);c=c+j<<1;Gb(q,c+44926|0);Gb(q,c+44924|0);Gb(q,(l+m<<1)+44926|0);G[i+756>>1]=65535;Gb(q,f);j=d+3<<16>>16;c=e-2<<16>>16;break Ra}if((m-2|0)!=(c|0)){break Ra}d=l<<1;Gb(q,d+44928|0);Gb(q,d+44930|0);Gb(q,(j<<1)+44928|0);G[i+756>>1]=65535;d=i+756|0;Gb(q,d);e=l+m<<1;Gb(q,e+44926|0);Gb(q,(c+j<<1)+44926|0);Gb(q,e+44924|0);G[i+756>>1]=65535;Gb(q,d);l=f+2<<16>>16}e=1;c=(c|0)<=1?1:c;d=l-1|0;f=j-1|0;while(1)if((c|0)==(e|0)){e=a;continue Pa}else{Gb(q,(e+f<<1)+44928|0);Gb(q,(d+e<<1)+44928|0);Gb(q,(e+l<<1)+44928|0);Gb(q,(e+j<<1)+44928|0);G[i+756>>1]=65535;Gb(q,i+756|0);e=e+1|0;continue}}break}a=Xa(16);H[a+8>>2]=0;H[a+12>>2]=0;c=H[h+488>>2];H[a+4>>2]=q;H[a>>2]=c;c=H[H[H[h+72>>2]+8>>2]+20>>2];if(c){H[c+16>>2]=a;a=0;c=0;Sa:while(1){if((c|0)==2){while(1){if((a|0)==2){a=Xa(104);H[a+52>>2]=0;H[a+56>>2]=0;H[a+68>>2]=0;H[a+72>>2]=0;H[a+60>>2]=0;H[a+64>>2]=0;H[a+76>>2]=0;H[a+80>>2]=0;c=yb(H[H[14716]+8>>2],5127);if(!c){Wa(22667,0)}_a=a,cb=ab(H[c+4>>2],5208,O(.5)),L[_a>>2]=cb;_a=a,cb=ab(H[c+4>>2],9514,O(1.600000023841858)),L[_a+4>>2]=cb;_a=a,cb=ab(H[c+4>>2],9926,O(.30000001192092896)),L[_a+8>>2]=cb;_a=a,cb=ab(H[c+4>>2],7254,O(.5)),L[_a+12>>2]=cb;_a=a,cb=ab(H[c+4>>2],6869,O(.699999988079071)),L[_a+16>>2]=cb;_a=a,cb=ab(H[c+4>>2],7120,O(.20000000298023224)),L[_a+20>>2]=cb;_a=a,cb=ab(H[c+4>>2],10453,O(.699999988079071)),L[_a+24>>2]=cb;_a=a,cb=ab(H[c+4>>2],8265,O(.699999988079071)),L[_a+28>>2]=cb;_a=a,cb=ab(H[c+4>>2],6708,O(.800000011920929)),L[_a+32>>2]=cb;_a=a,cb=ab(H[c+4>>2],10484,O(.20000000298023224)),L[_a+36>>2]=cb;_a=a,cb=ab(H[c+4>>2],4859,O(2)),L[_a+40>>2]=cb;_a=a,cb=ab(H[c+4>>2],7092,O(.5)),L[_a+44>>2]=cb;_a=a,cb=ab(H[c+4>>2],7073,O(.5)),L[_a+48>>2]=cb;_a=a,cb=ab(H[c+4>>2],9952,O(.6000000238418579)),L[_a+84>>2]=cb;_a=a,cb=ab(H[c+4>>2],4811,O(1.5700000524520874)),L[_a+88>>2]=cb;_a=a,cb=ab(H[c+4>>2],4761,O(1.5700000524520874)),L[_a+92>>2]=cb;_a=a,cb=ab(H[c+4>>2],4794,O(1.5700000524520874)),L[_a+96>>2]=cb;_a=a,cb=ab(H[c+4>>2],4777,O(1.5700000524520874)),L[_a+100>>2]=cb;k=ab(H[c+4>>2],9942,O(1.9500000476837158));L[a+64>>2]=k;L[a+80>>2]=k;H[i+764>>2]=1065353216;H[i+756>>2]=-1077936128;H[i+760>>2]=1065353216;r=a+68|0;d=i+756|0;Qm(H[c+4>>2],r,5972,d);H[i+764>>2]=1065353216;H[i+756>>2]=1069547520;H[i+760>>2]=1065353216;v=a+52|0;Qm(H[c+4>>2],v,5988,d);H[h+228>>2]=a;c=Wb(h,12525);d=Wb(h,12532);w=Wb(h,12555);e=Wb(h,12545);f=Wb(h,12538);j=Wb(h,11931);l=Wb(h,12277);m=Wb(h,11938);q=Wb(h,12284);Ta:{if(q?!c|!d|(!w|!e)|(!f|!j|(!l|!m)):1){db();Db(12745);if(!c){Db(12524)}if(!d){Db(12531)}if(!w){Db(12554)}if(!e){Db(12544)}if(!f){Db(12537)}if(!j){Db(11930)}if(!l){Db(12276)}if(!m){Db(11937)}if(!q){Db(12283)}Db(21880);break Ta}w=yb(H[H[14716]+8>>2],5127);if(w){k=ab(H[w+4>>2],7235,O(0))}else{k=O(0)}H[i+756>>2]=0;x=r;r=i+756|0;w=H[h+72>>2];aa=H[w+40>>2]+68|0;y=c+40|0;c=d+40|0;d=e+40|0;ko(x,r,aa,y,c,d);e=j+40|0;_a=a,cb=O(O(Ci(O(O(Tc(e,l+40|0)*O(.5))/Tc(e,aa)))*k)+L[i+756>>2]),L[_a+80>>2]=cb;e=H[w+24>>2]+68|0;ko(v,r,e,f+40|0,d,c);c=a;a=m+40|0;_a=c,cb=O(O(Ci(O(O(Tc(a,q+40|0)*O(.5))/Tc(a,e)))*k)+L[i+756>>2]),L[_a+64>>2]=cb}Ha=i+768|0;break va}c=H[H[(H[h+72>>2]+(a<<2)|0)+12>>2]+20>>2];if(c){H[c+12>>2]=3}a=a+1|0;continue}}e=N(c,60);j=0;while(1){if((j|0)==5){c=c+1|0;continue Sa}d=H[H[((e+H[h+72>>2]|0)+N(j,12)|0)+60>>2]+20>>2];if(d){ag(H[h+68>>2],c,j,3);f=Wb(h,52384);H[d+12>>2]=2;H[d+20>>2]=f}j=j+1|0;continue}}}db();Wa(22037,0);break wa}Wa(25610,0);a=Eb(4);H[a>>2]=15;Z(a|0,34176,0);B()}else{a=H[h+104>>2];Ua:{if(H[a+12>>2]<=(j|0)){break Ua}w=j<<2;f=H[w+H[a>>2]>>2];if(!f){break Ua}H[i+64>>2]=H[f>>2];a=i+240|0;jc(a,100,5924,i- -64|0);q=qb(a);l=Xa(48);a=l;H[a+16>>2]=0;H[a+20>>2]=0;H[a+8>>2]=0;H[a+12>>2]=1;H[a+4>>2]=j;H[a>>2]=q;H[a+44>>2]=51548;H[a+24>>2]=0;H[a+28>>2]=0;H[a+32>>2]=0;H[a+36>>2]=0;H[a+40>>2]=0;H[12890]=H[12890]+1;d=H[h+112>>2];a=H[d+8>>2];Va:{if((a|0)>(j|0)){break Va}c=H[d+4>>2];c=(c|0)>(j|0)?c:((j>>>1|0)+j|0)+1|0;if((c|0)==(a|0)){break Va}r=ib(c<<2);if(!r){if((a|0)>=(c|0)){break Va}H[i+52>>2]=c;H[i+48>>2]=a;Wa(24414,i+48|0);break a}e=0;a=H[d+12>>2];if((c|0)<(a|0)){H[d+12>>2]=c;a=c}Q=(a|0)>0?a:0;m=H[d>>2];while(1){if((e|0)==(Q|0)){if(m){Va(m);a=H[d+12>>2]}H[d>>2]=r;e=0;m=c-a|0;m=(m|0)>0?m:0;while(1){if((e|0)!=(m|0)){H[(H[d>>2]+(a<<2)|0)+(e<<2)>>2]=0;e=e+1|0;continue}break}H[d+8>>2]=c}else{x=e<<2;H[x+r>>2]=H[m+x>>2];e=e+1|0;continue}break}}if(H[d+12>>2]<=(j|0)){H[d+12>>2]=j+1}H[w+H[d>>2]>>2]=l;ob(aa,q,j);H[l+8>>2]=f;H[f+20>>2]=l}j=j+1|0;continue}}else{F[i+364|0]=6;a=J[(c<<2)+31528>>1]&15;e=a|4096;F[i+365|0]=e;F[i+366|0]=e>>>8;H[i+92>>2]=H[i+364>>2];Yf(h,i+92|0);a=a<<8;j=e<<8;Rd(h,a|1052673,j|1);Rd(h,a|1056769,j|3);j=0;while(1){if((j|0)==3){Wa:{F[i+357|0]=e;F[i+358|0]=e>>>8;F[i+356|0]=6;H[i+84>>2]=H[i+356>>2];Yf(h,i+84|0);a=0;Xa:while(1){if((a|0)==5){break Wa}l=e|1<<a<<7&3968;j=0;while(1)if((j|0)==3){a=a+1|0;continue Xa}else{F[i+353|0]=l;F[i+354|0]=l>>>8;F[i+352|0]=H[(j<<2)+31732>>2];H[i+80>>2]=H[i+352>>2];Yf(h,i+80|0);j=j+1|0;continue}}}}else{F[i+361|0]=e;F[i+362|0]=e>>>8;F[i+360|0]=H[(j<<2)+31616>>2];H[i+88>>2]=H[i+360>>2];Yf(h,i+88|0);j=j+1|0;continue}break}c=c+1|0;continue}}H[i+16>>2]=a;Wa(30286,i+16|0);ya(1);B()}a=Eb(4);H[a>>2]=14;Z(a|0,34176,0);B()}H[14709]=h;a=H[o+8>>2];if(a){Va(a);H[o+8>>2]=0}a=H[t>>2];if(a){Va(a);H[t>>2]=0}a=H[o+12>>2];if(a){Va(Nc(a));H[o+12>>2]=0}a=H[o+16>>2];if(a){nb(a);Va(a);H[o+16>>2]=0}a=H[o+20>>2];if(a){nb(a);Va(a);H[o+20>>2]=0}a=H[o+24>>2];if(a){c=H[a>>2];if(c){Va(c);H[a>>2]=0}H[a+8>>2]=0;H[a+12>>2]=0;Va(a);H[o+24>>2]=0}a=H[o+28>>2];if(a){Va(Nc(a));H[o+28>>2]=0}a=H[o+32>>2];if(a){nb(a);Va(a);H[o+32>>2]=0}a=H[o+36>>2];if(a){nb(a);Va(a);H[o+36>>2]=0}Va(o);d=H[14709];ab(H[yb(H[H[14716]+8>>2],3576)+4>>2],7482,O(1.100000023841858));c=0;Ya:while(1){if((c|0)==2){break ma}a=H[d+72>>2]+(c<<4)|0;we(H[a+24>>2],H[a+28>>2]+40|0);we(H[a+28>>2],H[a+32>>2]+40|0);e=N(c,60);we(H[a+32>>2],H[(e+H[d+72>>2]|0)+76>>2]+40|0);e=e+H[d+72>>2]|0;f=H[e- -64>>2];h=H[e+88>>2];H[g+7400>>2]=0;H[g+7392>>2]=0;j=g+7392|0;Nb(j,f+68|0,h+68|0);H[g+7396>>2]=0;Cn(H[a+32>>2],j,52904);e=e+52|0;a=1;while(1)if((a|0)==5){h=H[e+8>>2];j=H[e+4>>2];e=H[e>>2];H[g+7640>>2]=0;H[g+7632>>2]=0;H[g+7636>>2]=0;f=g+7632|0;a=j+68|0;l=e+68|0;Nb(f,a,l);m=g+7664|0;k=L[g+7632>>2];n=L[g+7640>>2];p=O(-kb(k,n));Ab(m,58720,k==O(0)?n==O(0)?O(-0):p:p,1);xe(e,m);Nb(f,a,l);f=g+7584|0;k=L[g+7636>>2];n=L[g+7640>>2];if(k==O(0)&n==O(0)){k=O(0)}else{k=kb(n,O(-k))}Ab(f,52916,k,1);xe(e,f);m=g+7632|0;Nb(m,a,l);H[g+7384>>2]=0;H[g+7376>>2]=0;H[g+7380>>2]=0;i=g+7376|0;f=h+68|0;Nb(i,f,a);H[g+7544>>2]=0;H[g+7548>>2]=1065353216;H[g+7536>>2]=0;H[g+7540>>2]=0;o=g+7536|0;Ae(o,i,m);H[g+7996>>2]=0;H[g+7988>>2]=0;H[g+7992>>2]=0;m=g+7988|0;Bo(o,m,g+7952|0);H[g+7984>>2]=0;H[g+7976>>2]=0;H[g+7980>>2]=0;i=g+7976|0;Bo(h+52|0,i,g+7940|0);Xb(j+80|0,i);i=g+7488|0;k=L[g+7988>>2];p=L[g+7996>>2];if(k==O(0)&p==O(0)){k=O(0)}else{if(p<O(0)){so(m);p=L[g+7996>>2];k=L[g+7988>>2]}k=kb(k,p)}Ab(i,52560,k,1);xe(e,i);m=g+7632|0;Nb(m,a,l);e=g+7376|0;Nb(e,f,a);l=g+7536|0;Ae(l,e,m);xe(j,l);Nb(e,f,a);H[g+7972>>2]=0;H[g+7964>>2]=0;H[g+7968>>2]=0;a=g+7964|0;j=H[(H[d+72>>2]+N(c,20)|0)+172>>2]+40|0;Nb(a,j,f);H[g+7448>>2]=0;H[g+7452>>2]=1065353216;H[g+7440>>2]=0;H[g+7444>>2]=0;l=g+7440|0;Ae(l,a,e);xe(h,l);Nb(a,j,f);c=c+1|0;continue Ya}else{f=e+N(a,12)|0;we(H[f>>2],H[f+4>>2]+40|0);we(H[f+4>>2],H[f+8>>2]+40|0);we(H[f+8>>2],H[((H[d+72>>2]+N(c,20)|0)+(a<<2)|0)+172>>2]+28|0);a=a+1|0;continue}}}Va(Gc(c));H[g+192>>2]=14803;Wa(23443,g+192|0);H[g+176>>2]=14803;Y(46505,34173,g+176|0)|0;break f}Va(Gc(c));H[g+160>>2]=14803;Wa(23610,g+160|0);H[g+144>>2]=14803;Y(46396,34173,g+144|0)|0;break f}Va(Gc(c));H[g+128>>2]=14803;Wa(23526,g+128|0);H[g+112>>2]=14803;Y(46289,34173,g+112|0)|0;break f}Wa(23790,0);break f}Hm(d,0,d);Hm(d+28|0,1,d);c=H[14709];e=0;while(1)if((e|0)==2){l=0;Za:while(1){if((l|0)!=2){k=(l|0)==1?O(1):O(-1);f=0;e=N(l,60);while(1)if((f|0)==3){l=l+1|0;continue Za}else{d=f<<2;a=H[(d+(e+H[c+72>>2]|0)|0)+52>>2];H[a+24>>2]=H[d+31788>>2];eg(a);a=H[a+36>>2];_a:{if(!f){H[g+7672>>2]=0;H[g+7664>>2]=-1082130432;H[g+7668>>2]=0;d=g+7664|0;La[H[H[a>>2]+56>>2]](a,d);H[g+7672>>2]=0;L[g+7668>>2]=k;H[g+7664>>2]=0;La[H[H[a>>2]+52>>2]](a,d);H[g+7672>>2]=0;L[g+7668>>2]=k;H[g+7664>>2]=0;La[H[H[a>>2]+60>>2]](a,d);n=L[12899];L[a+64>>2]=n;L[a+60>>2]=n;L[a+56>>2]=n;break _a}L[g+7672>>2]=k;H[g+7664>>2]=0;H[g+7668>>2]=0;La[H[H[a>>2]+52>>2]](a,g+7664|0)}f=f+1|0;continue}}break}a=0;c=H[14709];gd(c,16,6,58720);gd(c,25,44,52904);H[g+7672>>2]=1065353216;H[g+7664>>2]=1065353216;H[g+7668>>2]=0;e=g+7664|0;Mc(c,25,40,41,e);Mc(c,26,30,31,52904);gd(c,27,2,52904);H[g+7672>>2]=1065353216;H[g+7664>>2]=1065353216;H[g+7668>>2]=0;Mc(c,27,32,33,e);Mc(c,28,30,31,52904);Mc(c,29,28,29,52904);gd(c,30,48,52904);Mc(c,30,53,55,52904);H[g+7672>>2]=1036831949;H[g+7664>>2]=0;H[g+7668>>2]=-1082130432;gd(c,31,57,e);gd(c,32,25,52904);H[g+7672>>2]=1065353216;H[g+7664>>2]=1050253722;H[g+7668>>2]=0;Mc(c,32,11,12,e);gd(c,33,14,52904);gd(c,34,17,52904);f=H[c+488>>2];d=H[f>>2];f=H[f+12>>2];mb(e,d,f,11);k=L[g+7664>>2];h=g+7584|0;mb(h,d,f,12);n=L[g+7584>>2];mb(e,d,f,25);L[g+7672>>2]=L[g+7672>>2]+O(-.009999999776482582);Wf(c,36,e);k=O(O(O(k-n)*O(.5))*O(.6000000238418579));Sd(c,1048612,k);n=O(L[g+7668>>2]+O(.004999999888241291));L[g+7668>>2]=n;Wf(c,37,e);Sd(c,1048613,k);L[g+7668>>2]=n+O(-.009999999776482582);Wf(c,38,e);Sd(c,1048614,k);Ya(h,e);L[g+7592>>2]=L[g+7592>>2]+O(-.007000000216066837);Wf(c,35,h);Sd(c,1048611,O(k*O(.800000011920929)));gd(c,39,4,52904);Mc(c,39,3,5,52904);H[g+7544>>2]=1065353216;H[g+7536>>2]=0;H[g+7540>>2]=-1073741824;d=g+7536|0;gd(c,40,62,d);H[g+7544>>2]=1065353216;H[g+7536>>2]=1065353216;H[g+7540>>2]=-1073741824;Mc(c,40,61,63,d);Mc(c,41,9,10,52916);Mc(c,42,80,72,52916);H[g+7544>>2]=1065353216;H[g+7536>>2]=1077936128;H[g+7540>>2]=0;Mc(c,43,86,85,d);c=H[14709];f=yb(H[H[14716]+8>>2],10419);V=ab(H[f+4>>2],9163,O(0));k=ab(H[f+4>>2],8690,O(0));ma=ab(H[f+4>>2],8718,O(0));ta=ab(H[f+4>>2],8704,O(0));ua=ab(H[f+4>>2],7907,O(0));X=ab(H[f+4>>2],9354,O(0));va=ab(H[f+4>>2],3634,O(0));j=H[c+72>>2];d=H[j+4>>2];h=H[j+40>>2];j=H[j+24>>2];_=O(L[j+28>>2]*O(.5));L[g+7964>>2]=_;E=O(L[h+28>>2]*O(.5));L[g+7968>>2]=E;n=L[h+68>>2];p=L[j+68>>2];qa=ab(H[f+4>>2],9177,O(0));f=H[c+72>>2];wa=L[H[f+16>>2]+72>>2];na=L[H[f+12>>2]+72>>2];u=O(O(L[j+68>>2]+L[h+68>>2])*O(.5));L[g+7640>>2]=u;A=O(O(p-n)*O(.5));k=O(k*A);n=O(u-k);L[g+7644>>2]=n;L[g+7648>>2]=n-k;n=O(k+u);L[g+7636>>2]=n;ra=O(k+n);L[g+7632>>2]=ra;z=L[j+72>>2];$=L[h+72>>2];p=L[H[f+48>>2]+72>>2];s=L[H[f+32>>2]+72>>2];f=e;e=H[c+488>>2];mb(f,H[e>>2],H[e+12>>2],6);L[g+7616>>2]=p<s?s:p;L[g+7588>>2]=O(O(na+wa)*O(.5))+O(-.019999999552965164);L[g+7584>>2]=L[g+7668>>2];n=O(O(z+$)*O(.5));L[g+7600>>2]=n;$=O(O(O(z-s)+O($-p))*O(.5));p=O(ma*$);L[g+7612>>2]=n-O(p*O(3));L[g+7608>>2]=n-O(p+p);L[g+7604>>2]=n-p;n=O(n+O(p/O(3)));L[g+7596>>2]=n;z=O(n+O(.029999999329447746));L[g+7592>>2]=z;f=h+68|0;h=j+68|0;while(1)if((a|0)==9){H[g+7496>>2]=0;H[g+7500>>2]=0;H[g+7488>>2]=0;H[g+7492>>2]=0;L[g+7504>>2]=A;n=O(O(A+O(O(_+E)*O(-.5)))*O(.800000011920929));L[g+7520>>2]=n;L[g+7516>>2]=n;L[g+7512>>2]=n;L[g+7508>>2]=n;j=0;zb(g+7440|0,0,36);H[g+7464>>2]=1042737529;H[g+7468>>2]=1042536202;H[g+7456>>2]=1033208070;H[g+7460>>2]=1042401985;zb(g+7392|0,0,36);H[g+7416>>2]=1042737529;H[g+7420>>2]=1042536202;H[g+7408>>2]=1033208070;H[g+7412>>2]=1042401985;e=g+7376|0;Ya(e,h);a=g+7664|0;Ya(a,f);Fd(e,a);Ya(a,52916);H[g+7684>>2]=1065353216;H[g+7676>>2]=1065353216;H[g+7680>>2]=0;Ya(g+7688|0,52904);H[g+7708>>2]=1065353216;H[g+7700>>2]=-1082130432;H[g+7704>>2]=0;Ya(g+7712|0,53752);ma=O(qa*k);p=L[g+7384>>2];while(1){if((j|0)==9){n=O(0);f=1}else{$a:{e=j<<2;k=L[e+(g+7488|0)>>2];if(!(k>O(0))){break $a}s=O(u+k);A=O(u-k);l=I[e+(g+7536|0)|0]|1048576;qa=L[e+(g+7584|0)>>2];a=0;while(1){if((a|0)==5){break $a}k=L[e+((a|0)==2?g+7440|0:g+7392|0)>>2];ab:{bb:{cb:{db:{eb:{fb:{m=H[(a<<2)+31584>>2];switch(m-1|0){case 0:break cb;case 1:break db;case 2:break eb;case 3:break fb;default:break bb}}n=p;k=O(L[h>>2]-_);break ab}n=p;k=O(E+L[f>>2]);break ab}n=O(O(k+p)+O(0));k=s;break ab}n=O(O(k+p)+O(0));k=A;break ab}n=O(O(k+p)+O(0));k=u}L[g+7996>>2]=n;L[g+7992>>2]=qa;L[g+7988>>2]=k;qc(c,l|m<<8&3840,d,g+7988|0,V,(g+7664|0)+N(a,12)|0,ma);a=a+1|0;continue}}j=j+1|0;continue}break}a=0;while(1){if((a|0)!=4){H[g+7976>>2]=0;H[g+7672>>2]=0;H[g+7664>>2]=0;H[g+7668>>2]=0;e=I[(a<<2)+31760|0]|1048576;H[g+7952>>2]=e;H[g+396>>2]=e;rc(c,1,g+396|0,g+7664|0,g+7988|0,g+7976|0);k=L[g+7672>>2];n=a?f&1?k:k>n?k:n:k;a=a+1|0;f=0;continue}break}n=O(O($*va)+n);L[g+7664>>2]=n;k=O(ta*$);p=O(k+n);L[g+7668>>2]=p;L[g+7672>>2]=k+p;A=O(ra-u);m=0;gb:while(1){hb:{if((m|0)==5){a=0;while(1){if((a|0)==2){break hb}e=g+7664|0;f=H[(H[c+72>>2]+(a<<4)|0)+24>>2];Ya(e,f+68|0);h=a<<2;L[g+7668>>2]=L[h+(g+7964|0)>>2]+L[g+7668>>2];qc(c,H[h+31528>>2]<<8&3840|1048595,d,e,L[f+28>>2],58720,V);a=a+1|0;continue}}a=m<<2;f=H[a+31584>>2]&15;_=L[a+(g+7632|0)>>2];E=O(_-u);j=0;ib:while(1){if((j|0)==9){m=m+1|0;continue gb}e=j<<2;p=L[e+(g+7584|0)>>2];a=0;H[g+7996>>2]=0;H[g+7988>>2]=0;H[g+7992>>2]=0;h=I[e+(g+7536|0)|0];while(1)if((a|0)==3){j=j+1|0;continue ib}else{e=a<<2;k=L[e+(g+7664|0)>>2];H[g+7984>>2]=0;H[g+7976>>2]=0;H[g+7980>>2]=0;l=f|H[e+31656>>2]<<12&28672;$=O(k-n);s=O(_+O(O(E*O(ua*$))/A));jb:{if(!a){L[g+7996>>2]=k;L[g+7992>>2]=p;L[g+7988>>2]=s;Ya(g+7976|0,g+7988|0);break jb}L[g+7984>>2]=k;L[g+7980>>2]=p;L[g+7976>>2]=s;if(X==O(0)){break jb}e=g+7976|0;i=g+7988|0;xb(e,i);k=_b(e);Gd(e,O(O(X*O($-k))+k));lb(e,i)}e=h|l<<8;H[g+392>>2]=e;H[g+7940>>2]=e;yd(c,g+392|0,d,g+7976|0,ma);a=a+1|0;continue}}}break}a=H[H[c+72>>2]+8>>2];k=L[d+76>>2];n=L[d+68>>2];L[g+7668>>2]=z;L[g+7664>>2]=n;L[g+7672>>2]=k+O(.07999999821186066);e=g+7664|0;qc(c,1048594,a,e,O(.07999999821186066),52904,O(.07999999821186066));k=L[d+68>>2];n=L[d+76>>2];L[g+7668>>2]=z;L[g+7672>>2]=n+O(.05655999854207039);L[g+7664>>2]=k+O(.05655999854207039);H[g+7592>>2]=1060437492;H[g+7584>>2]=1060437492;H[g+7588>>2]=0;f=g+7584|0;qc(c,1049106,a,e,O(.07999999821186066),f,O(.07999999821186066));k=L[d+68>>2];n=L[d+76>>2];L[g+7668>>2]=z;L[g+7672>>2]=n+O(.05655999854207039);L[g+7664>>2]=k+O(-.05655999854207039);H[g+7592>>2]=1060437492;H[g+7584>>2]=-1087046156;H[g+7588>>2]=0;qc(c,1048850,a,e,O(.07999999821186066),f,O(.07999999821186066));k=L[d+68>>2];L[g+7672>>2]=L[d+76>>2];L[g+7668>>2]=z;L[g+7664>>2]=k+O(.07999999821186066);qc(c,1049618,a,e,O(.07999999821186066),52916,O(.07999999821186066));k=L[d+68>>2];L[g+7672>>2]=L[d+76>>2];L[g+7668>>2]=z;L[g+7664>>2]=k+O(-.07999999821186066);qc(c,1049362,a,e,O(.07999999821186066),53752,O(.07999999821186066));d=H[14709];e=yb(H[H[14716]+8>>2],3576);a=e;X=ab(H[a+4>>2],9153,O(.05400000140070915));u=ab(H[a+4>>2],3530,O(1.2999999523162842));A=ab(H[a+4>>2],5266,O(.027000000700354576));h=0;kb:while(1){if((h|0)==2){z=O(ab(H[e+4>>2],5249,O(.0820000022649765))*O(.5));V=O(ab(H[e+4>>2],5231,O(.10999999940395355))*O(.5));_=O(u+u);i=0;lb:while(1){if((i|0)==2){o=0;mb:while(1){nb:{if((o|0)==2){c=0;ob:while(1){if((c|0)==2){break nb}e=H[(c<<2)+31528>>2]&15;f=e|4096;a=0;h=N(c,20);while(1)if((a|0)==5){a=e<<8;Km(d,a|1060865,52904);Km(d,a|1064961,52548);c=c+1|0;continue ob}else{k=L[(h+(a<<2)|0)+51616>>2];j=(H[d+72>>2]+N(c,60)|0)+N(a,12)|0;n=L[H[j+60>>2]+72>>2];p=L[H[j+56>>2]+72>>2];H[g+7672>>2]=0;H[g+7664>>2]=0;L[g+7668>>2]=O(p-n)*O(-k);Lm(d,(f|1<<a<<7&3968)<<8|7,g+7664|0,L[13244]);a=a+1|0;continue}}}a=o<<2;f=a+31528|0;j=H[a+58704>>2];e=0;l=N(o,60);pb:while(1){if((e|0)==5){a=(J[f>>1]&15)<<8;Rd(d,a|1085450,a|1048578);Rd(d,a|1126410,a|1048580);Rd(d,a|1589258,a|1048581);o=o+1|0;continue mb}m=((l+H[d+72>>2]|0)+N(e,12)|0)+52|0;i=128<<e&3968|4096;h=0;qb:while(1){if((h|0)==3){e=e+1|0;continue pb}a=h<<2;c=H[a+m>>2];k=L[c+28>>2];n=k==O(0)?A:k;k=O(n*O(.5));q=a+31744|0;t=a+31732|0;a=0;while(1)if((a|0)==5){h=h+1|0;continue qb}else{r=a<<2;L[g+7672>>2]=L[r+31712>>2];p=L[r+31680>>2];L[g+7664>>2]=(o|0)==1?p:O(-p);H[g+7668>>2]=0;r=g+7664|0;sc(r);p=L[c+72>>2];u=L[c+76>>2];L[g+7584>>2]=O(k*L[g+7664>>2])+L[c+68>>2];L[g+7592>>2]=O(k*L[g+7672>>2])+O(u+O(0));L[g+7588>>2]=O(k*L[g+7668>>2])+O(p-L[q>>2]);v=(i|(a<<4&112|H[f>>2]&15))<<8;w=v|I[t|0];r=qc(d,w,c,g+7584|0,n,r,L[13244]);rb:{sb:{tb:{ub:{switch(h|0){case 1:if(!e&(a|0)==3|(a|0)==2){break tb}break sb;case 0:break ub;default:break rb}}if((e|0)==4&(a|0)==4){break tb}if(!((a|0)==3&e>>>0<2)){break rb}}Pb(j,r);if((h|0)!=1){break rb}}Rd(d,w,v|11)}a=a+1|0;continue}}}}break}a=H[14709];ac(a,25);ac(a,26);ac(a,27);ac(a,28);ac(a,29);ac(a,30);ac(a,31);ac(a,32);ac(a,33);ac(a,34);ac(a,35);ac(a,36);ac(a,37);ac(a,38);ac(a,39);ac(a,40);ac(a,41);ac(a,42);ac(a,43);c=H[14709];Xf(c,12329);Xf(c,12316);Xf(c,11969);Xf(c,11956);vb:{d=H[H[H[c+72>>2]>>2]+20>>2];if(d){e=Xa(16);a=e;H[a>>2]=0;H[a+4>>2]=0;H[a+8>>2]=0;H[a+12>>2]=0;H[d+16>>2]=a;a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[e>>2]=a;a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[e+4>>2]=a;a=0;while(1){d=(g+7664|0)+a|0;H[d+8>>2]=0;H[d>>2]=0;H[d+4>>2]=0;a=a+12|0;if((a|0)!=240){continue}break}m=0;wb:while(1){if((m|0)==4){break vb}d=H[(m<<2)+31760>>2];a=0;f=(g+7664|0)+N(m,60)|0;while(1){if((a|0)==5){m=m+1|0;continue wb}H[g+7584>>2]=0;F[g+7488|0]=d;h=J[(a<<2)+31584>>1]&15|4096;F[g+7489|0]=h;F[g+7490|0]=h>>>8;H[g+7536>>2]=0;H[g+384>>2]=H[g+7488>>2];h=f+N(a,12)|0;rc(c,1,g+384|0,h,g+7584|0,g+7536|0);j=H[g+7584>>2];if(j){lb(h,j+68|0)}a=a+1|0;continue}}}db();Wa(22009,0);c=Eb(4);H[c>>2]=14;break e}d=Xa(12);G[d+4>>1]=4;H[d>>2]=31808;_a=d,$a=Xa(16),H[_a+8>>2]=$a;a=0;while(1){if((a|0)!=4){H[H[d+8>>2]+(a<<2)>>2]=0;a=a+1|0;continue}break}H[c+80>>2]=d;a=0;while(1)if((a|0)==4){d=0;xb:while(1){a=0;if((d|0)==4){d=H[e+4>>2];m=0;yb:while(1){if((m|0)!=3){c=N(m,41);e=c+1|0;f=c+42|0;h=c+41|0;a=0;while(1)if((a|0)==40){m=m+1|0;continue yb}else{H[g+368>>2]=-1;H[g+364>>2]=a+e;H[g+360>>2]=a+f;H[g+356>>2]=a+h;H[g+352>>2]=a+c;$h(d,5,g+352|0);a=a+1|0;continue}}break}d=0;zb:{h=H[14709];a=H[h+104>>2];if(!a){break zb}while(1){if(H[a+12>>2]<=(d|0)){break zb}c=H[H[a>>2]+(d<<2)>>2];if(L[c+28>>2]==O(0)){e=c+68|0;p=O(0);n=O(0);Ab:{f=H[c+12>>2];if(!f){break Ab}a=0;j=H[f+12>>2];j=(j|0)>0?j:0;while(1){if((a|0)==(j|0)){break Ab}k=jg(e,H[H[f>>2]+(a<<2)>>2]+68|0);n=k<n?k:n;a=a+1|0;continue}}Bb:{f=H[c+16>>2];if(!f){break Bb}a=0;j=H[f+12>>2];j=(j|0)>0?j:0;while(1){if((a|0)==(j|0)){break Bb}k=jg(e,H[H[f>>2]+(a<<2)>>2]+40|0);p=k<p?k:p;a=a+1|0;continue}}k=O(O(W(n<p?n:p))*O(.30000001192092896));L[c+28>>2]=k==O(0)?O(.019999999552965164):k;a=H[h+104>>2]}d=d+1|0;continue}}d=Xa(28);H[d+24>>2]=0;H[d+16>>2]=0;H[d+20>>2]=0;H[d+8>>2]=0;H[d+12>>2]=10;a=ib(80);H[d>>2]=a;if(a){c=10;H[d+4>>2]=10;a=0;while(1){if((a|0)<(c|0)){c=a<<3;H[c+H[d>>2]>>2]=0;G[(c+H[d>>2]|0)+4>>1]=0;a=a+1|0;c=H[d+4>>2];continue}break}H[14708]=d;H[g+336>>2]=ga;Y(49400,34173,g+336|0)|0;a=yb(H[yb(H[H[14716]+8>>2],9582)+8>>2],7820);H[g+7680>>2]=H[14709];H[g+7672>>2]=0;H[g+7676>>2]=0;H[g+7668>>2]=H[14708];H[g+7664>>2]=0;Cb:{if(a){Pl(g+7664|0,a);a=H[g+7664>>2];H[14717]=a;break Cb}a=H[14717]}if(!a){h=0;Wa(24656,0);H[14705]=8;H[14719]=0;H[14720]=0;H[14721]=0;H[14722]=0;H[14723]=0;H[14724]=0;H[14725]=0;H[14726]=0;F[52604]=0;F[52605]=0;F[52606]=0;break g}h=0;c=Zn(Xa(224));H[14718]=c;lm(a,c);nm(a,c);H[14719]=0;H[14720]=0;H[14721]=0;H[14722]=0;H[14723]=0;H[14724]=0;H[14725]=0;H[14726]=0;F[52604]=0;F[52605]=0;F[52606]=0;if(H[14705]){break g}e=Xa(352);a=e;H[a>>2]=0;H[a+4>>2]=0;F[a+24|0]=1;H[a+16>>2]=0;H[a+20>>2]=0;H[a+8>>2]=0;H[a+12>>2]=0;d=zb(a+28|0,0,53);F[a+92|0]=0;H[a+84>>2]=0;H[a+88>>2]=0;H[a+96>>2]=0;H[a+100>>2]=0;H[a+104>>2]=0;H[a+108>>2]=0;H[a+112>>2]=0;H[a+116>>2]=-1;H[a+316>>2]=0;H[a+320>>2]=0;H[a+308>>2]=0;H[a+312>>2]=10;H[a+332>>2]=0;H[a+336>>2]=0;H[a+324>>2]=0;H[a+328>>2]=10;f=a+288|0;l=a+280|0;j=a+272|0;m=a+152|0;o=a+324|0;q=a+308|0;i=a+120|0;Db:while(1){Eb:{a=0;if((h|0)==2){break Eb}while(1){c=0;if((a|0)!=4){H[(i+(h<<4)|0)+(a<<2)>>2]=0;a=a+1|0;continue}break}while(1){a=0;if((c|0)==5){a=h<<2;H[a+j>>2]=0;H[a+l>>2]=0;H[a+f>>2]=0;h=h+1|0;continue Db}else{while(1){if((a|0)!=3){H[((m+N(h,60)|0)+N(c,12)|0)+(a<<2)>>2]=0;a=a+1|0;continue}break}c=c+1|0;continue}}}break}H[e+340>>2]=0;H[e+304>>2]=0;_a=e,$a=Pn(),H[_a+344>>2]=$a;c=Pn();F[e+83|0]=0;F[e+81|0]=1;F[e+82|0]=2;H[e+348>>2]=c;Fb:{h=H[e+344>>2];if(!h){break Fb}l=H[14657];while(1){c=H[l+4>>2];if(c){r=H[c+12>>2]}else{r=0}c=a<<16>>16;if((r|0)<=(c|0)){break Fb}H[h+(c<<2)>>2]=1065353216;a=a+1|0;continue}}l=0;H[14704]=e;H[e>>2]=0;c=H[14709];H[e+12>>2]=0;H[e+4>>2]=c;a=d;H[a+16>>2]=0;H[a+20>>2]=0;H[a+8>>2]=0;H[a+12>>2]=0;H[a>>2]=0;H[a+4>>2]=0;a=Xa(7352);d=H[14718];H[a+12>>2]=c;H[a>>2]=0;H[a+4>>2]=0;jo(a+16|0,d,c);jo(a+3572|0,d+112|0,c);Zn(a+7128|0);H[e+100>>2]=a;_a=e,$a=ef(H[H[H[e+4>>2]+72>>2]>>2]),H[_a+304>>2]=$a;c=e+296|0;Gb:while(1){Hb:{if((l|0)==2){a=0;c=G[H[H[e+4>>2]+72>>2]+264>>1];d=(c|0)>0?c:0;break Hb}if(I[e+80|0]==1){a=l<<2;_a=a+f|0,$a=df(H[(a+H[H[e+4>>2]+72>>2]|0)+228>>2]),H[_a>>2]=$a;_a=a+j|0,$a=df(H[(a+H[H[e+4>>2]+72>>2]|0)+212>>2]),H[_a>>2]=$a}a=l<<2;_a=a+c|0,$a=df(H[(a+H[H[e+4>>2]+72>>2]|0)+12>>2]),H[_a>>2]=$a;a=H[e+100>>2]+((l|0)==1?16:3572)|0;h=a+16|0;t=H[a+12>>2];d=0;a=0;while(1){if((a|0)!=4){r=a<<2;H[r+(i+(l<<4)|0)>>2]=H[h+r>>2];a=a+1|0;continue}break}while(1){a=0;if((d|0)==5){l=l+1|0;continue Gb}else{while(1){if((a|0)!=3){r=a<<2;h=N(d,12);H[r+(h+(m+N(l,60)|0)|0)>>2]=H[r+(h+t|0)>>2];a=a+1|0;continue}break}d=d+1|0;continue}}}break}while(1){c=H[H[e+4>>2]+72>>2];if((a|0)!=(d|0)){On(o,a,df(H[H[c+252>>2]+(a<<2)>>2]));a=a+1|0;continue}break}a=0;c=G[c+248>>1];c=(c|0)>0?c:0;while(1)if((a|0)==(c|0)){c=Xa(48);d=H[e+4>>2];H[c+44>>2]=d;a=0;H[c+8>>2]=0;H[c>>2]=0;H[c+4>>2]=0;f=c+12|0;while(1){if((a|0)!=8){_a=f+(a<<2)|0,$a=ig(Xa(108)),H[_a>>2]=$a;a=a+1|0;continue}break}H[e+104>>2]=c;h=1;Ib:{if(I[e+80|0]!=1){break Ib}a=H[d+72>>2];c=H[a+228>>2];if(!c){break Ib}d=H[a+232>>2];if(!d){break Ib}l=H[a+212>>2];if(!l){break Ib}m=H[a+216>>2];if(!m){break Ib}H[g+7984>>2]=0;H[g+7976>>2]=0;H[g+7980>>2]=0;H[g+7972>>2]=0;H[g+7964>>2]=0;H[g+7968>>2]=0;H[g+7592>>2]=0;H[g+7596>>2]=1065353216;H[g+7584>>2]=0;H[g+7588>>2]=0;H[g+7544>>2]=0;H[g+7548>>2]=1065353216;H[g+7536>>2]=0;H[g+7540>>2]=0;H[g+7496>>2]=0;H[g+7500>>2]=1065353216;H[g+7488>>2]=0;H[g+7492>>2]=0;H[g+7448>>2]=0;H[g+7452>>2]=1065353216;H[g+7440>>2]=0;H[g+7444>>2]=0;H[g+7400>>2]=0;H[g+7404>>2]=1065353216;H[g+7392>>2]=0;H[g+7396>>2]=0;f=g+7952|0;Ya(f,c+68|0);j=g+7940|0;Ya(j,d+68|0);c=g+7928|0;Ya(c,l+68|0);d=g+7916|0;Ya(d,m+68|0);o=g+7904|0;Ya(o,H[a>>2]+68|0);Wa(16120,0);tb(f,H[14711],6);Wa(16114,0);tb(j,H[14711],6);Wa(16099,0);tb(c,H[14711],6);Wa(16093,0);tb(d,H[14711],6);H[g+320>>2]=0;H[g+324>>2]=0;H[g+312>>2]=0;H[g+316>>2]=0;H[g+304>>2]=-1610612736;H[g+308>>2]=1069128089;Wa(29558,g+304|0);l=g+7664|0;Ab(l,58720,O(.10000000149011612),1);H[g+7640>>2]=0;H[g+7632>>2]=0;H[g+7636>>2]=0;a=g+7632|0;t=g+7976|0;m=g+7584|0;i=g+7488|0;Po(f,c,o,l,a,t,m,i);v=o;r=g+7964|0;o=g+7536|0;q=g+7440|0;Po(j,d,v,l,a,r,o,q);k=Tc(d,c);n=Tc(r,t);M[g+296>>3]=k;M[g+272>>3]=O(n-k);n=O(L[g+7980>>2]-L[g+7932>>2]);p=O(L[g+7968>>2]-L[g+7920>>2]);u=O(n-p);M[g+288>>3]=u;k=kb(u,k);M[g+280>>3]=k;M[g+256>>3]=n;M[g+264>>3]=p;Wa(29590,g+256|0);a=g+7392|0;Ab(a,52904,k,1);tc(a,l);Wa(15247,0);Id(a,H[14711]);Lb();wi(i,a);Wa(15277,0);Id(i,H[14711]);Lb();Wa(15310,0);Id(m,H[14711]);Lb();Qb(q,a);Wa(15258,0);Id(q,H[14711]);Lb();Wa(15295,0);Id(o,H[14711]);Lb();H[g+7384>>2]=0;H[g+7376>>2]=0;H[g+7380>>2]=0;l=g+7376|0;Ya(l,c);Co(m,f,l);Wa(15693,0);tb(l,H[14711],6);Lb();Wa(15681,0);tb(t,H[14711],6);Lb();H[g+7996>>2]=0;H[g+7988>>2]=0;H[g+7992>>2]=0;c=g+7988|0;Ya(c,d);Co(o,j,c);Wa(15666,0);tb(c,H[14711],6);Lb();Wa(15653,0);tb(r,H[14711],6);Lb();H[g+240>>2]=0;H[g+244>>2]=0;H[g+224>>2]=-1610612736;H[g+228>>2]=1069128089;H[g+232>>2]=0;H[g+236>>2]=0;Wa(29366,g+224|0);Wa(15736,0);lg(H[H[H[e+4>>2]+72>>2]+228>>2]+68|0,H[14711]);Lb();Wa(15722,0);lg(H[H[H[e+4>>2]+72>>2]+228>>2]+40|0,H[14711]);Lb();bf(H[H[H[e+4>>2]+72>>2]+228>>2],m);Wa(15736,0);lg(H[H[H[e+4>>2]+72>>2]+228>>2]+68|0,H[14711]);Lb();Wa(15722,0);lg(H[H[H[e+4>>2]+72>>2]+228>>2]+40|0,H[14711]);Lb();bf(H[H[H[e+4>>2]+72>>2]+232>>2],o);bf(H[H[H[e+4>>2]+72>>2]+212>>2],i);bf(H[H[H[e+4>>2]+72>>2]+216>>2],q);bf(H[H[H[e+4>>2]+72>>2]>>2],a)}H[H[14704]+20>>2]=5;F[58840]=1;break g}else{On(q,a,df(H[H[H[H[e+4>>2]+72>>2]+236>>2]+(a<<2)>>2]));a=a+1|0;continue}}H[d+4>>2]=0;H[g+208>>2]=10;H[g+212>>2]=8;Wa(24709,g+208|0);break a}while(1){h=a&65535;if(h>>>0>=41){d=d+1|0;continue xb}else{H[g+7592>>2]=0;H[g+7584>>2]=0;H[g+7588>>2]=0;f=H[H[H[c+80>>2]+8>>2]+(d<<2)>>2];k=O(O(h>>>0)/O(40));k=O((k>O(1)?O(1):k)*O(4));Jb:{if(k<=O(1)){pg(f,0,0,k,g+7584|0);break Jb}if(k<=O(2)){pg(f,0,1,O(k+O(-1)),g+7584|0);break Jb}if(k<=O(3)){pg(f,1,1,O(k+O(-2)),g+7584|0);break Jb}pg(f,1,0,O(k+O(-3)),g+7584|0)}ai(H[e>>2],g+7584|0);a=a+1|0;continue}}}}else{d=(g+7664|0)+N(a,60)|0;d=To(Xa(136),d,d+12|0,d+24|0,d+36|0,d+48|0);H[H[H[c+80>>2]+8>>2]+(a<<2)>>2]=d;a=a+1|0;continue}}h=i<<2;j=H[h+58704>>2];c=H[d+72>>2]+(i<<4)|0;l=H[c+24>>2];a=H[c+32>>2];c=H[c+28>>2];H[g+7672>>2]=0;H[g+7664>>2]=0;H[g+7668>>2]=0;f=g+7584|0;m=c+68|0;Ya(f,m);e=g+7536|0;o=a+68|0;Ya(e,o);dc(g+7664|0,f,e);H[g+7592>>2]=0;H[g+7584>>2]=0;H[g+7588>>2]=0;q=l+68|0;Ya(e,q);t=g+7488|0;Ya(t,m);dc(f,e,t);n=L[a+28>>2];k=L[a+68>>2];f=H[a+76>>2];H[g+7540>>2]=H[a+72>>2];H[g+7544>>2]=f;f=1;s=k;p=n==O(0)?X:n;E=O(p/_);k=(i|0)==1?O(1):O(-1);L[g+7536>>2]=s+O(E*k);H[g+7492>>2]=0;H[g+7496>>2]=0;L[g+7488>>2]=k;v=H[h+31528>>2]&15;w=v|4096;h=w<<8;qc(d,h|6,a,e,n,t,L[13244]);$=O(O(u*p)*O(.5));ma=L[g+7592>>2];ta=L[g+7588>>2];ua=L[g+7584>>2];va=L[g+7672>>2];qa=L[g+7668>>2];wa=L[g+7664>>2];while(1){if((f|0)==5){Rd(d,v<<8|1052685,h|14);f=H[(H[d+72>>2]+N(i,60)|0)+76>>2];H[g+7536>>2]=0;H[g+7540>>2]=0;H[g+7544>>2]=0;c=g+7488|0;Ya(c,o);e=g+7440|0;Ya(e,f+68|0);l=g+7536|0;mc(l,c,e,O(.6000000238418579));n=L[f+28>>2];p=L[g+7544>>2];L[g+7496>>2]=p;s=L[g+7540>>2];L[g+7492>>2]=s;n=O(O(O((n==O(0)?A:n)*O(1.2000000476837158))*O(.5))*k);E=L[g+7536>>2];L[g+7488>>2]=n+E;$=L[a+28>>2];H[g+7444>>2]=0;H[g+7448>>2]=0;L[g+7440>>2]=k;Pb(j,qc(d,h|1,a,c,$,e,L[13244]));L[g+7496>>2]=p;L[g+7492>>2]=s;L[g+7488>>2]=E-n;n=L[a+28>>2];H[g+7444>>2]=0;H[g+7448>>2]=0;L[g+7440>>2]=-k;Pb(j,qc(d,h|3,a,c,n,e,L[13244]));Ya(c,q);k=Tc(m,c);Ya(c,m);n=Tc(o,c);Ya(c,o);p=Tc(l,c);Ya(c,q);L[g+7492>>2]=L[g+7492>>2]-O(p+O(k+n));k=L[13244];qc(d,h|44,H[H[d+72>>2]+4>>2],c,k,52560,k);i=i+1|0;continue lb}p=L[a+68>>2];n=L[a+76>>2];L[g+7540>>2]=L[a+72>>2];s=n;e=f<<2;n=L[e+31712>>2];L[g+7544>>2]=s+O($*n);s=p;p=L[e+31680>>2];L[g+7536>>2]=s+O(O(E*p)*k);na=L[a+28>>2];L[g+7496>>2]=n;s=O(k*p);L[g+7488>>2]=s;H[g+7492>>2]=0;e=(w|f<<4&112)<<8;t=qc(d,e|6,a,g+7536|0,na,g+7488|0,L[13244]);if(f>>>0<=2){Pb(j,t)}L[g+7540>>2]=qa;na=O(z*n);L[g+7544>>2]=na+va;ra=O(O(z*p)*k);L[g+7536>>2]=ra+wa;xa=L[c+28>>2];L[g+7496>>2]=n;H[g+7492>>2]=0;L[g+7488>>2]=s;t=g+7536|0;r=g+7488|0;qc(d,e|12,c,t,xa,r,L[13245]);xa=L[c+68>>2];Ua=L[c+76>>2];L[g+7540>>2]=L[c+72>>2];L[g+7544>>2]=na+Ua;L[g+7536>>2]=ra+xa;na=L[c+28>>2];L[g+7496>>2]=n;H[g+7492>>2]=0;L[g+7488>>2]=s;qc(d,e|13,c,t,na,r,L[13245]);L[g+7544>>2]=O(V*n)+ma;L[g+7540>>2]=ta;L[g+7536>>2]=O(O(V*p)*k)+ua;p=L[l+28>>2];L[g+7496>>2]=n;H[g+7492>>2]=0;L[g+7488>>2]=s;qc(d,e|15,l,t,p,r,L[13245]);f=f+1|0;continue}}}a=h<<2;f=H[a+31528>>2]&15|4096;j=H[a+58704>>2];a=0;l=N(h,20);while(1)if((a|0)==5){h=h+1|0;continue kb}else{m=(H[d+72>>2]+N(h,60)|0)+N(a,12)|0;c=H[m+60>>2];k=L[c+72>>2];p=O(O(L[H[m+56>>2]+72>>2]-k)*L[(l+(a<<2)|0)+51616>>2]);n=O(0);if(!a){n=O(p/L[12900]);p=n}m=(f|128<<a&3968)<<8|7;H[g+7392>>2]=m;s=L[c+76>>2];z=L[c+68>>2];L[g+7668>>2]=k-p;L[g+7664>>2]=z;L[g+7672>>2]=n+s;k=L[c+28>>2];H[g+388>>2]=m;Pb(j,yd(d,g+388|0,c,g+7664|0,O(k*O(.25))));a=a+1|0;continue}}}else{H[(g+7536|0)+(a<<2)>>2]=a|16;a=a+1|0;continue}}else{a=H[(H[c+72>>2]+(e<<4)|0)+28>>2];H[a+24>>2]=2;eg(a);d=H[a+36>>2];H[g+7672>>2]=0;H[g+7664>>2]=-1082130432;H[g+7668>>2]=0;f=g+7664|0;La[H[H[d>>2]+52>>2]](d,f);a=H[a+36>>2];H[g+7672>>2]=0;H[g+7664>>2]=0;H[g+7668>>2]=1065353216;La[H[H[a>>2]+56>>2]](a,f);r=1;k=(e|0)==1?O(1):O(-1);h=N(e,60);Kb:while(1){if((r|0)!=5){a=r<<2;j=a+44896|0;l=a+51664|0;m=a+44864|0;i=a+52736|0;o=a+52768|0;f=0;q=N(r,12);while(1)if((f|0)==3){r=r+1|0;continue Kb}else{d=f<<2;a=H[(d+(q+(h+H[c+72>>2]|0)|0)|0)+52>>2];H[a+24>>2]=H[d+31776>>2];eg(a);a=H[a+36>>2];Lb:{if(!f){L[g+7672>>2]=k;H[g+7664>>2]=0;H[g+7668>>2]=0;d=g+7664|0;La[H[H[a>>2]+52>>2]](a,d);H[g+7672>>2]=0;H[g+7664>>2]=-1082130432;H[g+7668>>2]=0;La[H[H[a>>2]+56>>2]](a,d);H[g+7672>>2]=0;L[g+7668>>2]=k;H[g+7664>>2]=0;La[H[H[a>>2]+60>>2]](a,d);L[a+52>>2]=L[o>>2];L[a+56>>2]=L[i>>2];L[a+60>>2]=L[m>>2];L[a+64>>2]=L[l>>2];L[a+68>>2]=L[j>>2];break Lb}L[g+7672>>2]=k;H[g+7664>>2]=0;H[g+7668>>2]=0;La[H[H[a>>2]+52>>2]](a,g+7664|0)}f=f+1|0;continue}}break}e=e+1|0;continue}}Ha=g+8e3|0;break d}c=Eb(4);H[c>>2]=11}Z(c|0,34176,0);B()}H[D+16>>2]=b;Y(47738,34173,D+16|0)|0;if(!h){break b}H[da+40>>2]=2;Za=1}Ha=D+96|0;return Za|0}a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}function wc(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,w=0,y=0,B=0,D=0,E=0,J=0,L=0,P=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0;$=Ha-16|0;Ha=$;H[$+12>>2]=c;e=Ha-144|0;Ha=e;f=zb(e,0,144);H[f+76>>2]=-1;H[f+44>>2]=a;H[f+32>>2]=94;H[f+84>>2]=a;W=c;p=Ha-304|0;Ha=p;a:{b:{if(!H[f+4>>2]){Xi(f);if(!H[f+4>>2]){break b}}c=I[b|0];if(!c){break a}c:{d:{while(1){e:{a=c&255;f:{if(Kd(a)){while(1){c=b;b=b+1|0;if(Kd(I[c+1|0])){continue}break}jd(f,0,0);while(1){a=H[f+4>>2];g:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break g}a=Cb(f)}if(Kd(a)){continue}break}b=H[f+4>>2];a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){b=b-1|0;H[f+4>>2]=b}a=b-H[f+44>>2]|0;b=a;k=U+H[f+124>>2]|0;e=a>>31;a=B+H[f+120>>2]|0;g=e+(a>>>0<B>>>0?k+1|0:k)|0;B=a+b|0;U=B>>>0<a>>>0?g+1|0:g;break f}h:{i:{j:{if((a|0)==37){a=I[b+1|0];if((a|0)==42){break j}if((a|0)!=37){break i}}jd(f,0,0);k:{if(I[b|0]==37){while(1){a=H[f+4>>2];l:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;c=I[a|0];break l}c=Cb(f)}if(Kd(c)){continue}break}b=b+1|0;break k}a=H[f+4>>2];if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;c=I[a|0];break k}c=Cb(f)}if(I[b|0]!=(c|0)){a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}if((c|0)>=0|V){break a}break b}a=H[f+4>>2]-H[f+44>>2]|0;e=a;g=U+H[f+124>>2]|0;c=B+H[f+120>>2]|0;a=(a>>31)+(c>>>0<B>>>0?g+1|0:g)|0;B=c+e|0;U=B>>>0<c>>>0?a+1|0:a;c=b;break f}w=0;c=b+2|0;break h}a=a-48|0;if(!(I[b+2|0]!=36|a>>>0>9)){c=Ha-16|0;H[c+12>>2]=W;a=a>>>0>1?((a<<2)+W|0)-4|0:W;H[c+8>>2]=a+4;w=H[a>>2];c=b+3|0;break h}w=H[W>>2];W=W+4|0;c=b+1|0}T=0;h=0;b=I[c|0];if(b-48>>>0<=9){while(1){h=(N(h,10)+b|0)-48|0;b=I[c+1|0];c=c+1|0;if(b-48>>>0<10){continue}break}}if((b|0)==109){P=0;T=(w|0)!=0;b=I[c+1|0];S=0;c=c+1|0}e=c;c=e+1|0;a=3;m:{n:{switch((b&255)-65|0){case 39:a=I[e+1|0]==104;c=a?e+2|0:c;a=a?-2:-1;break m;case 43:a=I[e+1|0]==108;c=a?e+2|0:c;a=a?3:1;break m;case 51:case 57:a=1;break m;case 11:a=2;break m;case 41:break m;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break n;default:break d}}a=0;c=e}e=a;a=I[c|0];b=(a&47)==3;X=b?1:e;r=b?a|32:a;o:{if((r|0)==91){break o}p:{if((r|0)!=110){if((r|0)!=99){break p}h=(h|0)<=1?1:h;break o}Xp(w,X,B,U);break f}jd(f,0,0);while(1){a=H[f+4>>2];q:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break q}a=Cb(f)}if(Kd(a)){continue}break}b=H[f+4>>2];a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){b=b-1|0;H[f+4>>2]=b}a=b-H[f+44>>2]|0;b=a;k=U+H[f+124>>2]|0;e=a>>31;a=B+H[f+120>>2]|0;l=e+(a>>>0<B>>>0?k+1|0:k)|0;B=a+b|0;U=B>>>0<a>>>0?l+1|0:l}k=h;l=h>>31;jd(f,h,l);a=H[f+4>>2];r:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;break r}if((Cb(f)|0)<0){break d}}a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}b=16;s:{t:{u:{v:{w:{x:{y:{switch(r-88|0){default:a=r-65|0;if(a>>>0>6|!(1<<a&113)){break s}case 9:case 13:case 14:case 15:b=0;j=0;k=0;s=Ha-48|0;Ha=s;z:{A:{if(X>>>0>2){break A}e=X<<2;a=H[e+40252>>2];D=H[e+40240>>2];while(1){e=H[f+4>>2];B:{if((e|0)!=H[f+104>>2]){H[f+4>>2]=e+1;h=I[e|0];break B}h=Cb(f)}if(Kd(h)){continue}break}o=1;C:{D:{switch(h-43|0){case 0:case 2:break D;default:break C}}o=(h|0)==45?-1:1;e=H[f+4>>2];if((e|0)!=H[f+104>>2]){H[f+4>>2]=e+1;h=I[e|0];break C}h=Cb(f)}E:{F:{G:{H:{I:{e=h&-33;if((e|0)==78){while(1){if((b|0)==2){break H}e=H[f+4>>2];J:{if((e|0)!=H[f+104>>2]){H[f+4>>2]=e+1;h=I[e|0];break J}h=Cb(f)}e=b+7904|0;b=b+1|0;if(F[e|0]==(h|32)){continue}break I}}if((e|0)!=73){break G}K:{while(1){e=b;if((b|0)==7){break K}b=H[f+4>>2];L:{if((b|0)!=H[f+104>>2]){H[f+4>>2]=b+1;h=I[b|0];break L}h=Cb(f)}b=e+1|0;if(F[e+3522|0]==(h|32)){continue}break}if((e|0)==7){break K}if((e|0)!=2){break I}if(H[f+116>>2]<0){break K}H[f+4>>2]=H[f+4>>2]-1}e=0;g=0;h=Ha-16|0;Ha=h;r=(C(O(O(o|0)*O(Infinity))),v(2));a=r&8388607;b=r>>>23|0;n=b&255;M:{if(n){if((n|0)!=255){e=a<<25;g=a>>>7|0;b=(b&255)+16256|0;break M}e=a<<25;g=a>>>7|0;b=32767;break M}b=0;if(!a){break M}b=a;a=Q(a);lc(h,b,0,0,0,a+81|0);e=H[h+8>>2];g=H[h+12>>2]^65536;j=H[h>>2];k=H[h+4>>2];b=16265-a|0}H[s+32>>2]=j;H[s+36>>2]=k;H[s+40>>2]=e;H[s+44>>2]=g|(r&-2147483648|b<<16);Ha=h+16|0;e=H[s+40>>2];g=H[s+44>>2];j=H[s+32>>2];k=H[s+36>>2];break z}switch(b|0){case 0:break G;case 3:break H;default:break F}}a=H[f+4>>2];N:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break N}a=Cb(f)}if((a|0)!=40){break E}while(1){a=H[f+4>>2];O:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break O}a=Cb(f)}if(a-48>>>0<10|a-65>>>0<26|((a|0)==95|a-97>>>0<26)){continue}break}e=0;g=2147450880;if((a|0)==41){break z}break F}P:{if((h|0)!=48){break P}b=H[f+4>>2];Q:{if((b|0)!=H[f+104>>2]){H[f+4>>2]=b+1;b=I[b|0];break Q}b=Cb(f)}if((b&-33)==88){q=a;b=0;m=0;e=0;g=0;r=0;E=0;n=0;t=0;d=0;y=0;R=0;l=0;u=0;J=0;Y=0;L=0;i=Ha-432|0;Ha=i;a=H[f+4>>2];R:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break R}a=Cb(f)}S:{T:{while(1){if((a|0)!=48){U:{if((a|0)!=46){break S}a=H[f+4>>2];if((a|0)==H[f+104>>2]){break U}H[f+4>>2]=a+1;a=I[a|0];break T}}else{a=H[f+4>>2];if((a|0)!=H[f+104>>2]){l=1;H[f+4>>2]=a+1;a=I[a|0]}else{l=1;a=Cb(f)}continue}break}a=Cb(f)}if((a|0)!=48){u=1;break S}while(1){a=n;n=a-1|0;t=t-!a|0;a=H[f+4>>2];V:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break V}a=Cb(f)}if((a|0)==48){continue}break}u=1;l=1}k=1073676288;W:{while(1){X:{h=a;Y:{Z:{Z=a-48|0;if(Z>>>0<10){break Z}_=(a|0)!=46;h=a|32;if(_&h-97>>>0>5){break W}if(_){break Z}if(u){break X}u=1;n=e;t=g;break Y}a=(a|0)>57?h-87|0:Z;_:{if((g|0)<=0&e>>>0<=7|(g|0)<0){d=a+(d<<4)|0;break _}if(!g&e>>>0<=28){Ac(i+48|0,a);Jb(i+32|0,y,R,j,k,0,0,0,1073414144);y=H[i+32>>2];R=H[i+36>>2];j=H[i+40>>2];k=H[i+44>>2];Jb(i+16|0,H[i+48>>2],H[i+52>>2],H[i+56>>2],H[i+60>>2],y,R,j,k);xc(i,H[i+16>>2],H[i+20>>2],H[i+24>>2],H[i+28>>2],b,m,r,E);r=H[i+8>>2];E=H[i+12>>2];b=H[i>>2];m=H[i+4>>2];break _}if(!a|L){break _}Jb(i+80|0,y,R,j,k,0,0,0,1073610752);xc(i- -64|0,H[i+80>>2],H[i+84>>2],H[i+88>>2],H[i+92>>2],b,m,r,E);r=H[i+72>>2];E=H[i+76>>2];L=1;b=H[i+64>>2];m=H[i+68>>2]}e=e+1|0;g=e?g:g+1|0;l=1}a=H[f+4>>2];if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0]}else{a=Cb(f)}continue}break}a=46}$:{if(!l){a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}jd(f,0,0);A(0);a=v(1)|0;e=v(0)|0;A(+(o|0));b=v(1)|0;v(0)|0;x(0,e|0);x(1,a&2147483647|b&-2147483648);hd(i+96|0,+z());b=H[i+96>>2];m=H[i+100>>2];e=H[i+108>>2];a=H[i+104>>2];break $}if((g|0)<=0&e>>>0<=7|(g|0)<0){j=e;k=g;while(1){d=d<<4;j=j+1|0;l=j?k:k+1|0;k=l;if((j|0)!=8|k){continue}break}}aa:{if((a&-33)==80){j=Wp(f);a=Ka;k=a;if(j|(a|0)!=-2147483648){break aa}b=0;m=0;jd(f,0,0);e=0;a=0;break $}j=0;k=0;if(H[f+116>>2]<0){break aa}H[f+4>>2]=H[f+4>>2]-1}if(!d){A(0);a=v(1)|0;e=v(0)|0;A(+(o|0));b=v(1)|0;v(0)|0;x(0,e|0);x(1,a&2147483647|b&-2147483648);hd(i+112|0,+z());b=H[i+112>>2];m=H[i+116>>2];e=H[i+124>>2];a=H[i+120>>2];break $}e=u?n:e;a=(u?t:g)<<2|e>>>30;g=j+(e<<2)|0;n=a+k|0;e=g-32|0;a=0-q|0;g=(g>>>0<j>>>0?n+1|0:n)-(g>>>0<32)|0;if((g|0)>0){a=1}else{a=a>>>0<e>>>0&(g|0)>=0}if(a){H[12604]=68;Ac(i+160|0,o);Jb(i+144|0,H[i+160>>2],H[i+164>>2],H[i+168>>2],H[i+172>>2],-1,-1,-1,2147418111);Jb(i+128|0,H[i+144>>2],H[i+148>>2],H[i+152>>2],H[i+156>>2],-1,-1,-1,2147418111);b=H[i+128>>2];m=H[i+132>>2];e=H[i+140>>2];a=H[i+136>>2];break $}a=q-226|0;j=a>>31;if((g|0)>=(j|0)&a>>>0<=e>>>0|(g|0)>(j|0)){if((d|0)>=0){while(1){xc(i+416|0,b,m,r,E,0,0,0,-1073807360);a=wo(b,m,r,E,1073610752);a=(a|0)>=0;xc(i+400|0,b,m,r,E,a?H[i+416>>2]:b,a?H[i+420>>2]:m,a?H[i+424>>2]:r,a?H[i+428>>2]:E);j=d<<1;d=j|a;a=e;e=a-1|0;g=g-!a|0;r=H[i+408>>2];E=H[i+412>>2];b=H[i+400>>2];m=H[i+404>>2];if((j|0)>=0){continue}break}}a=32-q|0;h=a;a=a+e|0;l=h>>>0>a>>>0?g+1|0:g;g=a>>>0<D>>>0&(l|0)<=0|(l|0)<0?(a|0)>0?a:0:D;ba:{if(g>>>0>=113){Ac(i+384|0,o);n=H[i+392>>2];t=H[i+396>>2];y=H[i+384>>2];R=H[i+388>>2];h=0;a=0;break ba}hd(i+352|0,be(1,144-g|0));Ac(i+336|0,o);y=H[i+336>>2];R=H[i+340>>2];n=H[i+344>>2];t=H[i+348>>2];Vp(i+368|0,H[i+352>>2],H[i+356>>2],H[i+360>>2],H[i+364>>2],t);J=H[i+376>>2];Y=H[i+380>>2];h=H[i+372>>2];a=H[i+368>>2]}j=!(d&1)&((Vd(b,m,r,E,0,0,0,0)|0)!=0&g>>>0<32);ue(i+320|0,j|d);Jb(i+304|0,y,R,n,t,H[i+320>>2],H[i+324>>2],H[i+328>>2],H[i+332>>2]);g=a;xc(i+272|0,H[i+304>>2],H[i+308>>2],H[i+312>>2],H[i+316>>2],a,h,J,Y);a=j;Jb(i+288|0,y,R,n,t,a?0:b,a?0:m,a?0:r,a?0:E);xc(i+256|0,H[i+288>>2],H[i+292>>2],H[i+296>>2],H[i+300>>2],H[i+272>>2],H[i+276>>2],H[i+280>>2],H[i+284>>2]);di(i+240|0,H[i+256>>2],H[i+260>>2],H[i+264>>2],H[i+268>>2],g,h,J,Y);a=H[i+240>>2];g=H[i+244>>2];b=H[i+248>>2];j=H[i+252>>2];if(!Vd(a,g,b,j,0,0,0,0)){H[12604]=68}Up(i+224|0,a,g,b,j,e);b=H[i+224>>2];m=H[i+228>>2];e=H[i+236>>2];a=H[i+232>>2];break $}H[12604]=68;Ac(i+208|0,o);Jb(i+192|0,H[i+208>>2],H[i+212>>2],H[i+216>>2],H[i+220>>2],0,0,0,65536);Jb(i+176|0,H[i+192>>2],H[i+196>>2],H[i+200>>2],H[i+204>>2],0,0,0,65536);b=H[i+176>>2];m=H[i+180>>2];e=H[i+188>>2];a=H[i+184>>2]}H[s>>2]=b;H[s+4>>2]=m;H[s+8>>2]=a;H[s+12>>2]=e;Ha=i+432|0;e=H[s+8>>2];g=H[s+12>>2];j=H[s>>2];k=H[s+4>>2];break z}if(H[f+116>>2]<0){break P}H[f+4>>2]=H[f+4>>2]-1}l=h;J=o;e=0;g=0;h=0;q=0;o=0;m=0;u=0;n=0;t=0;r=0;E=0;y=0;R=0;d=Ha-8976|0;Ha=d;i=a;L=0-a|0;Y=L-D|0;ca:{da:{while(1){if((l|0)!=48){ea:{if((l|0)!=46){break ca}a=H[f+4>>2];if((a|0)==H[f+104>>2]){break ea}H[f+4>>2]=a+1;l=I[a|0];break da}}else{a=H[f+4>>2];if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;l=I[a|0]}else{l=Cb(f)}h=1;continue}break}l=Cb(f)}if((l|0)==48){while(1){a=e;e=a-1|0;g=g-!a|0;a=H[f+4>>2];fa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;l=I[a|0];break fa}l=Cb(f)}if((l|0)==48){continue}break}h=1}m=1}H[d+784>>2]=0;ga:{ha:{ia:{ja:{a=(l|0)==46;b=l-48|0;ka:{la:{if(a|b>>>0<=9){while(1){ma:{if(a&1){if(!m){e=j;g=k;m=1;break ma}a=!h;break la}j=j+1|0;k=j?k:k+1|0;if((o|0)<=2044){u=(l|0)==48?u:j;a=(d+784|0)+(o<<2)|0;if(q){b=(N(H[a>>2],10)+l|0)-48|0}H[a>>2]=b;h=1;b=q+1|0;a=(b|0)==9;q=a?0:b;o=a+o|0;break ma}if((l|0)==48){break ma}H[d+8960>>2]=H[d+8960>>2]|1;u=18396}a=H[f+4>>2];na:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;l=I[a|0];break na}l=Cb(f)}a=(l|0)==46;b=l-48|0;if(a|b>>>0<10){continue}break}}e=m?e:j;g=m?g:k;if(!(!h|(l&-33)!=69)){b=Wp(f);a=Ka;if(b|(a|0)!=-2147483648){break ja}break ha}a=!h;if((l|0)<0){break ka}}if(H[f+116>>2]<0){break ka}H[f+4>>2]=H[f+4>>2]-1}if(!a){break ia}H[12604]=28;break ha}a=a+g|0;e=b+e|0;g=e>>>0<b>>>0?a+1|0:a}a=H[d+784>>2];if(!a){A(0);a=v(1)|0;e=v(0)|0;A(+(J|0));b=v(1)|0;v(0)|0;x(0,e|0);x(1,a&2147483647|b&-2147483648);hd(d,+z());e=H[d>>2];g=H[d+4>>2];b=H[d+12>>2];a=H[d+8>>2];break ga}if(!((e|0)!=(j|0)|(g|0)!=(k|0)|(j>>>0>9&(k|0)>=0|(k|0)>0)|(a>>>D|0?D>>>0<=30:0))){Ac(d+48|0,J);ue(d+32|0,a);Jb(d+16|0,H[d+48>>2],H[d+52>>2],H[d+56>>2],H[d+60>>2],H[d+32>>2],H[d+36>>2],H[d+40>>2],H[d+44>>2]);e=H[d+16>>2];g=H[d+20>>2];b=H[d+28>>2];a=H[d+24>>2];break ga}a=L>>>1|0;if(a>>>0<e>>>0&(g|0)>=0|(g|0)>0){H[12604]=68;Ac(d+96|0,J);Jb(d+80|0,H[d+96>>2],H[d+100>>2],H[d+104>>2],H[d+108>>2],-1,-1,-1,2147418111);Jb(d- -64|0,H[d+80>>2],H[d+84>>2],H[d+88>>2],H[d+92>>2],-1,-1,-1,2147418111);e=H[d+64>>2];g=H[d+68>>2];b=H[d+76>>2];a=H[d+72>>2];break ga}a=i-226|0;b=e>>>0<a>>>0;a=a>>31;if(b&(g|0)<=(a|0)|(a|0)>(g|0)){H[12604]=68;Ac(d+144|0,J);Jb(d+128|0,H[d+144>>2],H[d+148>>2],H[d+152>>2],H[d+156>>2],0,0,0,65536);Jb(d+112|0,H[d+128>>2],H[d+132>>2],H[d+136>>2],H[d+140>>2],0,0,0,65536);e=H[d+112>>2];g=H[d+116>>2];b=H[d+124>>2];a=H[d+120>>2];break ga}if(q){if((q|0)<=8){a=(d+784|0)+(o<<2)|0;m=H[a>>2];while(1){m=N(m,10);q=q+1|0;if((q|0)!=9){continue}break}H[a>>2]=m}o=o+1|0}q=e;oa:{if(e>>>0>17&(g|0)>=0|(g|0)>0|(u|0)>=9|(e|0)<(u|0)){break oa}if(!g&(e|0)==9){Ac(d+192|0,J);ue(d+176|0,H[d+784>>2]);Jb(d+160|0,H[d+192>>2],H[d+196>>2],H[d+200>>2],H[d+204>>2],H[d+176>>2],H[d+180>>2],H[d+184>>2],H[d+188>>2]);e=H[d+160>>2];g=H[d+164>>2];b=H[d+172>>2];a=H[d+168>>2];break ga}if((g|0)<=0&e>>>0<=8|(g|0)<0){Ac(d+272|0,J);ue(d+256|0,H[d+784>>2]);Jb(d+240|0,H[d+272>>2],H[d+276>>2],H[d+280>>2],H[d+284>>2],H[d+256>>2],H[d+260>>2],H[d+264>>2],H[d+268>>2]);Ac(d+224|0,H[(0-q<<2)+40240>>2]);mo(d+208|0,H[d+240>>2],H[d+244>>2],H[d+248>>2],H[d+252>>2],H[d+224>>2],H[d+228>>2],H[d+232>>2],H[d+236>>2]);e=H[d+208>>2];g=H[d+212>>2];b=H[d+220>>2];a=H[d+216>>2];break ga}a=(D+N(q,-3)|0)+27|0;b=H[d+784>>2];if(b>>>a|0?(a|0)<=30:0){break oa}Ac(d+352|0,J);ue(d+336|0,b);Jb(d+320|0,H[d+352>>2],H[d+356>>2],H[d+360>>2],H[d+364>>2],H[d+336>>2],H[d+340>>2],H[d+344>>2],H[d+348>>2]);Ac(d+304|0,H[(q<<2)+40168>>2]);Jb(d+288|0,H[d+320>>2],H[d+324>>2],H[d+328>>2],H[d+332>>2],H[d+304>>2],H[d+308>>2],H[d+312>>2],H[d+316>>2]);e=H[d+288>>2];g=H[d+292>>2];b=H[d+300>>2];a=H[d+296>>2];break ga}while(1){a=o;o=a-1|0;if(!H[(d+784|0)+(o<<2)>>2]){continue}break}u=0;b=(q|0)%9|0;pa:{if(!b){b=0;break pa}e=(g|0)<0?b+9|0:b;qa:{if(!a){b=0;a=0;break qa}g=H[(0-e<<2)+40240>>2];h=1e9/(g|0)|0;l=0;m=0;b=0;while(1){j=l;k=d+784|0;l=k+(m<<2)|0;o=H[l>>2];L=(o>>>0)/(g>>>0)|0;j=j+L|0;H[l>>2]=j;j=!j&(b|0)==(m|0);b=j?b+1&2047:b;q=j?q-9|0:q;l=N(h,o-N(g,L)|0);m=m+1|0;if((m|0)!=(a|0)){continue}break}if(!l){break qa}H[k+(a<<2)>>2]=l;a=a+1|0}q=(q-e|0)+9|0}while(1){l=(d+784|0)+(b<<2)|0;m=(q|0)<36;ra:{while(1){sa:{if(m){break sa}if((q|0)!=36){break ra}if(K[l>>2]<=10384592){break sa}q=36;break ra}o=a+2047|0;h=0;while(1){j=a;k=o&2047;o=(d+784|0)+(k<<2)|0;e=H[o>>2];a=e>>>3|0;g=h;h=e<<29;e=g+h|0;g=e>>>0<h>>>0?a+1|0:a;if(!g&e>>>0<1000000001){h=0}else{h=jy(e,g,1e9);a=gy(h,Ka,-1e9,-1);g=g+Ka|0;_=e;e=a+e|0;g=_>>>0>e>>>0?g+1|0:g}H[o>>2]=e;a=(b|0)==(k|0)?j:e|g?j:k;e=j-1&2047;a=(e|0)!=(k|0)?j:a;o=k-1|0;if((b|0)!=(k|0)){continue}break}u=u-29|0;a=j;if(!h){continue}break}b=b-1&2047;if((b|0)==(a|0)){l=(a+2046&2047)<<2;a=d+784|0;g=l+a|0;H[g>>2]=H[g>>2]|H[a+(e<<2)>>2];a=e}q=q+9|0;H[(d+784|0)+(b<<2)>>2]=h;continue}break}ta:{ua:while(1){e=a+1&2047;j=(d+784|0)+((a-1&2047)<<2)|0;while(1){g=(q|0)>45?9:1;k=(q|0)!=36;va:{while(1){h=b;m=0;wa:{while(1){xa:{b=h+m&2047;if((b|0)==(a|0)){break xa}b=H[(d+784|0)+(b<<2)>>2];l=H[(m<<2)+40192>>2];if(b>>>0<l>>>0){break xa}if(b>>>0>l>>>0){break wa}m=m+1|0;if((m|0)!=4){continue}}break}if(k){break wa}m=0;e=0;g=0;j=0;k=0;while(1){b=h+m&2047;if((b|0)==(a|0)){a=a+1&2047;H[(d+(a<<2)|0)+780>>2]=0}ue(d+768|0,H[(d+784|0)+(b<<2)>>2]);Jb(d+752|0,e,g,j,k,0,0,1342177280,1075633366);xc(d+736|0,H[d+752>>2],H[d+756>>2],H[d+760>>2],H[d+764>>2],H[d+768>>2],H[d+772>>2],H[d+776>>2],H[d+780>>2]);j=H[d+744>>2];k=H[d+748>>2];e=H[d+736>>2];g=H[d+740>>2];m=m+1|0;if((m|0)!=4){continue}break}Ac(d+720|0,J);Jb(d+704|0,e,g,j,k,H[d+720>>2],H[d+724>>2],H[d+728>>2],H[d+732>>2]);j=H[d+712>>2];k=H[d+716>>2];e=0;g=0;b=H[d+704>>2];m=H[d+708>>2];L=u+113|0;o=L-i|0;q=(o|0)<(D|0);l=q?(o|0)>0?o:0:D;if(l>>>0<=112){break va}break ta}u=g+u|0;b=a;if((h|0)==(a|0)){continue}break}l=1e9>>>g|0;o=-1<<g^-1;m=0;b=h;while(1){k=m;L=d+784|0;m=L+(h<<2)|0;Z=H[m>>2];k=k+(Z>>>g|0)|0;H[m>>2]=k;k=!k&(b|0)==(h|0);b=k?b+1&2047:b;q=k?q-9|0:q;m=N(l,o&Z);h=h+1&2047;if((h|0)!=(a|0)){continue}break}if(!m){continue}if((b|0)!=(e|0)){H[L+(a<<2)>>2]=m;a=e;continue ua}H[j>>2]=H[j>>2]|1;continue}break}break}hd(d+656|0,be(1,225-l|0));Vp(d+688|0,H[d+656>>2],H[d+660>>2],H[d+664>>2],H[d+668>>2],k);r=H[d+696>>2];E=H[d+700>>2];y=H[d+688>>2];R=H[d+692>>2];hd(d+640|0,be(1,113-l|0));tp(d+672|0,b,m,j,k,H[d+640>>2],H[d+644>>2],H[d+648>>2],H[d+652>>2]);e=H[d+672>>2];g=H[d+676>>2];n=H[d+680>>2];t=H[d+684>>2];di(d+624|0,b,m,j,k,e,g,n,t);xc(d+608|0,y,R,r,E,H[d+624>>2],H[d+628>>2],H[d+632>>2],H[d+636>>2]);j=H[d+616>>2];k=H[d+620>>2];b=H[d+608>>2];m=H[d+612>>2]}D=h+4&2047;ya:{if((D|0)==(a|0)){break ya}D=H[(d+784|0)+(D<<2)>>2];za:{if(D>>>0<=499999999){if(!D&(h+5&2047)==(a|0)){break za}hd(d+496|0,+(J|0)*.25);xc(d+480|0,e,g,n,t,H[d+496>>2],H[d+500>>2],H[d+504>>2],H[d+508>>2]);n=H[d+488>>2];t=H[d+492>>2];e=H[d+480>>2];g=H[d+484>>2];break za}if((D|0)!=5e8){hd(d+592|0,+(J|0)*.75);xc(d+576|0,e,g,n,t,H[d+592>>2],H[d+596>>2],H[d+600>>2],H[d+604>>2]);n=H[d+584>>2];t=H[d+588>>2];e=H[d+576>>2];g=H[d+580>>2];break za}aa=+(J|0);if((h+5&2047)==(a|0)){hd(d+528|0,aa*.5);xc(d+512|0,e,g,n,t,H[d+528>>2],H[d+532>>2],H[d+536>>2],H[d+540>>2]);n=H[d+520>>2];t=H[d+524>>2];e=H[d+512>>2];g=H[d+516>>2];break za}hd(d+560|0,aa*.75);xc(d+544|0,e,g,n,t,H[d+560>>2],H[d+564>>2],H[d+568>>2],H[d+572>>2]);n=H[d+552>>2];t=H[d+556>>2];e=H[d+544>>2];g=H[d+548>>2]}if(l>>>0>111){break ya}tp(d+464|0,e,g,n,t,0,0,0,1073676288);if(Vd(H[d+464>>2],H[d+468>>2],H[d+472>>2],H[d+476>>2],0,0,0,0)){break ya}xc(d+448|0,e,g,n,t,0,0,0,1073676288);n=H[d+456>>2];t=H[d+460>>2];e=H[d+448>>2];g=H[d+452>>2]}xc(d+432|0,b,m,j,k,e,g,n,t);di(d+416|0,H[d+432>>2],H[d+436>>2],H[d+440>>2],H[d+444>>2],y,R,r,E);j=H[d+424>>2];k=H[d+428>>2];b=H[d+416>>2];m=H[d+420>>2];Aa:{if((Y-2|0)>=(L&2147483647)){break Aa}H[d+408>>2]=j;H[d+412>>2]=k&2147483647;H[d+400>>2]=b;H[d+404>>2]=m;Jb(d+384|0,b,m,j,k,0,0,0,1073610752);h=wo(H[d+400>>2],H[d+404>>2],H[d+408>>2],H[d+412>>2],1081081856);a=(h|0)>=0;j=a?H[d+392>>2]:j;k=a?H[d+396>>2]:k;b=a?H[d+384>>2]:b;m=a?H[d+388>>2]:m;u=a+u|0;if(!(q&((l|0)!=(o|0)|(h|0)<0)&(Vd(e,g,n,t,0,0,0,0)|0)!=0)&(u+110|0)<=(Y|0)){break Aa}H[12604]=68}Up(d+368|0,b,m,j,k,u);e=H[d+368>>2];g=H[d+372>>2];b=H[d+380>>2];a=H[d+376>>2];break ga}e=0;g=0;jd(f,0,0);b=0;a=0}H[s+24>>2]=a;H[s+28>>2]=b;H[s+16>>2]=e;H[s+20>>2]=g;Ha=d+8976|0;e=H[s+24>>2];g=H[s+28>>2];j=H[s+16>>2];k=H[s+20>>2];break z}a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}H[12604]=28;jd(f,0,0);break A}e=0;g=2147450880;if(H[f+116>>2]<0){break z}H[f+4>>2]=H[f+4>>2]-1;break z}e=0;g=0}H[p+8>>2]=j;H[p+12>>2]=k;H[p+16>>2]=e;H[p+20>>2]=g;Ha=s+48|0;a=H[f+4>>2]-H[f+44>>2]|0;if(H[f+120>>2]==(0-a|0)&H[f+124>>2]==(0-((a>>31)+((a|0)!=0)|0)|0)){break c}if(!w){break s}e=H[p+16>>2];j=H[p+20>>2];g=H[p+8>>2];h=H[p+12>>2];switch(X|0){case 2:break u;case 1:break v;case 0:break w;default:break s};case 3:case 11:case 27:if((r|16)==115){zb(p+32|0,-1,257);F[p+32|0]=0;if((r|0)!=115){break t}F[p+65|0]=0;F[p+46|0]=0;G[p+42>>1]=0;G[p+44>>1]=0;break t}b=I[c+1|0];e=(b|0)==94;zb(p+32|0,e,257);F[p+32|0]=0;a=e?c+2|0:c+1|0;Ba:{Ca:{Da:{c=I[(e?2:1)+c|0];if((c|0)!=45){if((c|0)==93){break Da}j=(b|0)!=94;break Ba}j=(b|0)!=94;F[p+78|0]=j;break Ca}j=(b|0)!=94;F[p+126|0]=j}a=a+1|0}c=a;while(1){a=I[c|0];Ea:{if((a|0)!=45){if(!a){break d}if((a|0)==93){break t}break Ea}a=45;e=I[c+1|0];if(!e|(e|0)==93){break Ea}g=c+1|0;b=I[c-1|0];Fa:{if(e>>>0<=b>>>0){a=e;break Fa}while(1){b=b+1|0;F[b+(p+32|0)|0]=j;a=I[g|0];if(b>>>0<a>>>0){continue}break}}c=g}F[(a+p|0)+33|0]=j;c=c+1|0;continue};case 23:b=8;break x;case 12:case 29:b=10;break x;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break s;case 0:case 24:case 32:break x;case 17:break y}}b=0}e=0;g=0;h=0;j=0;o=0;l=Ha-16|0;Ha=l;Ga:{if((b|0)==1){H[12604]=28;break Ga}while(1){a=H[f+4>>2];Ha:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Ha}a=Cb(f)}if(Kd(a)){continue}break}Ia:{Ja:{switch(a-43|0){case 0:case 2:break Ja;default:break Ia}}o=(a|0)==45?-1:0;a=H[f+4>>2];if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Ia}a=Cb(f)}Ka:{La:{Ma:{Na:{if(!((b|0)!=0&(b|0)!=16|(a|0)!=48)){a=H[f+4>>2];Oa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Oa}a=Cb(f)}if((a&-33)==88){b=16;a=H[f+4>>2];Pa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Pa}a=Cb(f)}if(I[a+39921|0]<16){break Ma}a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}jd(f,0,0);break Ga}if(b){break Na}b=8;break Ma}b=b?b:10;if(b>>>0>I[a+39921|0]){break Na}a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}jd(f,0,0);H[12604]=28;break Ga}if((b|0)!=10){break Ma}h=a-48|0;if(h>>>0<=9){a=0;while(1){a=N(a,10)+h|0;e=a>>>0<429496729;b=H[f+4>>2];Qa:{if((b|0)!=H[f+104>>2]){H[f+4>>2]=b+1;b=I[b|0];break Qa}b=Cb(f)}h=b-48|0;if(e&h>>>0<=9){continue}break}e=a}if(h>>>0>9){break Ka}j=gy(e,0,10,0);k=Ka;n=h;while(1){Ra:{g=k;e=j+n|0;g=e>>>0<n>>>0?g+1|0:g;h=(g|0)==429496729&e>>>0<2576980378|g>>>0<429496729;a=H[f+4>>2];Sa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Sa}a=Cb(f)}b=a-48|0;if(!(h&b>>>0<=9)){if(b>>>0<=9){break Ra}break Ka}j=gy(e,g,10,0);k=Ka;h=k;n=b;if((h|0)==-1&(b^-1)>>>0>=j>>>0|(h|0)!=-1){continue}}break}b=10;break La}if(b-1&b){j=I[a+39921|0];if(j>>>0<b>>>0){while(1){h=N(b,h)+j|0;e=h>>>0<119304647;a=H[f+4>>2];Ta:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Ta}a=Cb(f)}j=I[a+39921|0];if(e&j>>>0<b>>>0){continue}break}e=h}if(b>>>0<=j>>>0){break La}while(1){h=gy(e,g,b,0);n=Ka;j=j&255;if((n|0)==-1&(j^-1)>>>0<h>>>0){break La}g=n;e=h+j|0;g=e>>>0<j>>>0?g+1|0:g;a=H[f+4>>2];Ua:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Ua}a=Cb(f)}j=I[a+39921|0];if(b>>>0<=j>>>0){break La}kc(l,b,0,0,0,e,g,0,0);if(!(H[l+8>>2]|H[l+12>>2])){continue}break}break La}n=F[(N(b,23)>>>5&7)+40177|0];h=I[a+39921|0];if(h>>>0<b>>>0){while(1){a=j<<n;j=a|h;e=a>>>0<134217728;a=H[f+4>>2];Va:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Va}a=Cb(f)}h=I[a+39921|0];if(e&h>>>0<b>>>0){continue}break}e=j}if(b>>>0<=h>>>0){break La}j=n;k=j&31;if((j&63)>>>0>=32){n=0;k=-1>>>k|0}else{n=-1>>>k|0;k=n|(1<<k)-1<<32-k}if(!n&e>>>0>k>>>0){break La}while(1){q=h&255;h=e;a=j&31;if((j&63)>>>0>=32){g=e<<a;a=0}else{g=(1<<a)-1&h>>>32-a|g<<a;a=h<<a}e=q|a;a=H[f+4>>2];Wa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Wa}a=Cb(f)}h=I[a+39921|0];if(b>>>0<=h>>>0){break La}if((g|0)==(n|0)&e>>>0<=k>>>0|g>>>0<n>>>0){continue}break}}if(I[a+39921|0]>=b>>>0){break Ka}while(1){a=H[f+4>>2];Xa:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break Xa}a=Cb(f)}if(I[a+39921|0]<b>>>0){continue}break}H[12604]=68;e=-1;g=-1;o=0}a=H[f+116>>2];if((a|0)>0){a=1}else{a=(a|0)>=0}if(a){H[f+4>>2]=H[f+4>>2]-1}a=e^o;e=a-o|0;b=o>>31;g=(b^g)-((a>>>0<o>>>0)+b|0)|0}Ha=l+16|0;a=H[f+4>>2]-H[f+44>>2]|0;if(H[f+120>>2]==(0-a|0)&H[f+124>>2]==(0-((a>>31)+((a|0)!=0)|0)|0)){break c}if(!(!w|(r|0)!=112)){H[w>>2]=e;break s}Xp(w,X,e,g);break s}n=Ha-32|0;Ha=n;a=j&65535;b=0;k=j>>>16&32767;Ya:{if(k-16257>>>0<=253){b=(a&33554431)<<7|e>>>25;l=0;a=e&33554431;Za:{if(!(!l&(a|0)==16777216?!(g|h):!l&a>>>0<16777216)){b=b+1|0;break Za}if(a^16777216|g|(h|l)){break Za}b=(b&1)+b|0}a=b>>>0>8388607;b=a?0:b;h=k+(a?-16255:-16256)|0;break Ya}if(!(!(e|g|(a|h))|((k|0)!=32767|(b|0)!=0))){b=(a&33554431)<<7|e>>>25|4194304;h=255;break Ya}if(k>>>0>16510){h=255;break Ya}l=!(b|k);y=l?16256:16257;r=y-k|0;if((r|0)>112){h=0;break Ya}b=e;a=l?a:a|65536;lc(n+16|0,g,h,b,a,128-r|0);Td(n,g,h,b,a,r);a=H[n+8>>2];b=(H[n+12>>2]&33554431)<<7|a>>>25;g=H[n>>2]|(k|0)!=(y|0)&(H[n+16>>2]|H[n+24>>2]|(H[n+20>>2]|H[n+28>>2]))!=0;h=H[n+4>>2];e=0;a=a&33554431;_a:{if(!(!e&(a|0)==16777216?!(g|h):!e&a>>>0<16777216)){b=b+1|0;break _a}if(a^16777216|g|(e|h)){break _a}b=(b&1)+b|0}h=b>>>0>8388607;b=h?b^8388608:b}Ha=n+32|0;H[w>>2]=j&-2147483648|h<<23|b;break s}ba=w,ca=yn(g,h,e,j),M[ba>>3]=ca;break s}H[w>>2]=g;H[w+4>>2]=h;H[w+8>>2]=e;H[w+12>>2]=j;break s}y=(r|0)!=99;j=y?31:h+1|0;$a:{if((X|0)==1){h=w;if(T){h=ib(j<<2);if(!h){break e}}H[p+296>>2]=0;H[p+300>>2]=0;b=0;ab:{bb:{while(1){a=h;while(1){e=H[f+4>>2];cb:{if((e|0)!=H[f+104>>2]){H[f+4>>2]=e+1;e=I[e|0];break cb}e=Cb(f)}if(!I[(e+p|0)+33|0]){break bb}db:{eb:{fb:{g=H[p+296>>2];if(!g){g=e<<24>>24;if((g|0)>=0){e=e&255;H[p+28>>2]=e;e=(e|0)!=0;break db}if(!H[H[14786]>>2]){H[p+28>>2]=g&57343;e=1;break db}e=(e&255)-194|0;if(e>>>0>50){break fb}h=H[(e<<2)+40432>>2];break eb}h=e>>>3&31;if((h-16|h+(g>>26))>>>0>7){break fb}h=(e&255)-128|g<<6;if((h|0)<0){break eb}H[p+296>>2]=0;H[p+28>>2]=h;e=1;break db}H[p+296>>2]=0;H[12604]=25;e=-1;break db}H[p+296>>2]=h;e=-2}if((e|0)==-2){continue}if((e|0)==-1){P=0;break ab}if(a){H[(b<<2)+a>>2]=H[p+28>>2];b=b+1|0}if(!T|(b|0)!=(j|0)){continue}break}b=j;j=b<<1|1;h=zi(a,j<<2);if(h){continue}break}P=0;S=a;T=1;break d}P=0;S=a;if(!H[p+296>>2]){break $a}}S=a;break d}if(T){b=0;h=ib(j);if(!h){break e}while(1){a=h;while(1){e=H[f+4>>2];gb:{if((e|0)!=H[f+104>>2]){H[f+4>>2]=e+1;e=I[e|0];break gb}e=Cb(f)}if(!I[(e+p|0)+33|0]){P=a;S=0;break $a}F[a+b|0]=e;b=b+1|0;if((j|0)!=(b|0)){continue}break}b=j;j=b<<1|1;h=zi(a,j);if(h){continue}break}S=0;P=a;T=1;break d}b=0;if(w){while(1){a=H[f+4>>2];hb:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break hb}a=Cb(f)}if(I[(a+p|0)+33|0]){F[b+w|0]=a;b=b+1|0;continue}else{a=w;P=a;S=0;break $a}}}while(1){a=H[f+4>>2];ib:{if((a|0)!=H[f+104>>2]){H[f+4>>2]=a+1;a=I[a|0];break ib}a=Cb(f)}if(I[(a+p|0)+33|0]){continue}break}a=0;P=0;S=0}h=H[f+4>>2];e=H[f+116>>2];if((e|0)>0){e=1}else{e=(e|0)>=0}if(e){h=h-1|0;H[f+4>>2]=h}g=h-H[f+44>>2]|0;e=g+H[f+120>>2]|0;n=H[f+124>>2]+(g>>31)|0;n=e>>>0<g>>>0?n+1|0:n;if(!(n|e)|!(y|(e|0)==(k|0)&(l|0)==(n|0))){break c}if(T){H[w>>2]=a}if((r|0)==99){break s}if(S){H[(b<<2)+S>>2]=0}if(!P){P=0;break s}F[b+P|0]=0}a=H[f+4>>2]-H[f+44>>2]|0;e=a;g=a>>31;a=U+H[f+124>>2]|0;b=B+H[f+120>>2]|0;l=(b>>>0<B>>>0?a+1|0:a)+g|0;B=b+e|0;U=B>>>0<b>>>0?l+1|0:l;V=((w|0)!=0)+V|0}b=c+1|0;c=I[c+1|0];if(c){continue}break a}break}T=1;P=0;S=0}V=V?V:-1}if(!T){break a}Va(P);Va(S);break a}V=-1}Ha=p+304|0;Ha=f+144|0;Ha=$+16|0;return V}function qj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;h=Ha-176|0;Ha=h;H[h+4>>2]=b;e=H[a+144>>2];e=La[H[e>>2]](e,b,c,h+4|0)|0;f=I[a+468|0];i=H[a+144>>2];k=H[h+4>>2];H[h+8>>2]=k;p=a+424|0;m=a+400|0;t=a+252|0;n=a+272|0;j=H[a+340>>2];q=j+80|0;v=h+159|0;w=f;a:{b:{c:{while(1){d:{H[a+276>>2]=k;H[a+272>>2]=b;e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{F:{G:{H:{I:{J:{K:{L:{M:{N:{O:{P:{Q:{R:{S:{T:{U:{V:{W:{X:{Y:{Z:{_:{if((e|0)<=0){if(!(!e|w)){H[d>>2]=b;f=0;break a}f=5;$:{switch(e+4|0){case 4:H[n>>2]=k;f=4;break a;case 3:break a;case 2:break Z;case 0:break _;default:break $}}H[h+8>>2]=c;k=c;e=0-e|0}g=1;f=0;aa:{ba:{ca:{da:{ea:{fa:{ga:{ha:{ia:{ja:{ka:{la:{ma:{na:{oa:{pa:{qa:{ra:{sa:{ta:{ua:{va:{wa:{k=La[H[t>>2]](t,e,b,k,i)|0;switch(k+1|0){case 6:break n;case 14:break o;case 16:break p;case 17:break q;case 11:break r;case 10:break s;case 19:break t;case 22:break u;case 20:break w;case 21:break x;case 0:break y;case 45:break z;case 51:break C;case 50:break D;case 58:break E;case 41:break F;case 42:case 43:break G;case 44:break H;case 54:break J;case 53:break K;case 55:break L;case 52:break M;case 46:break N;case 48:break O;case 47:break P;case 49:break Q;case 56:break R;case 57:break S;case 1:break T;case 4:break U;case 12:break V;case 18:break W;case 34:break X;case 40:break Y;case 13:break aa;case 38:case 39:break ba;case 36:case 37:break ca;case 32:case 33:break da;case 31:break fa;case 30:break ga;case 29:break ha;case 28:break ia;case 27:break ja;case 26:break ka;case 25:break la;case 24:break ma;case 23:break na;case 35:break oa;case 3:break pa;case 9:break qa;case 15:break sa;case 7:break ta;case 8:break ua;case 5:break va;case 2:break wa;default:break i}}i=H[a+144>>2];r=H[h+8>>2];H[h+20>>2]=0;H[h+16>>2]=0;H[h+12>>2]=0;e=H[i+64>>2];f=N(e,5)+b|0;H[h+24>>2]=f;s=f;o=r-(e<<1)|0;f=h+16|0;g=h+12|0;k=h+20|0;l=h+24|0;if(!Ig(i,s,o,f,g,k,l)){break c}e=H[h+16>>2];if(!e){break c}if(!(La[H[i+24>>2]](i,e,H[h+12>>2],34223)|0)){break b}s=H[h+20>>2];u=H[h+24>>2];if(!Ig(i,u,o,f,g,k,l)){break c}e=H[h+16>>2];if(!e){f=0;g=0;break g}k=H[h+12>>2];xa:{if(!(La[H[i+24>>2]](i,e,k,38892)|0)){f=0;g=0;break xa}g=H[h+20>>2];if((td(i,g,o)&-33)-65>>>0>25){e=g;break b}e=H[i+64>>2];k=H[h+24>>2];H[h+172>>2]=g;f=h+32|0;H[h+28>>2]=f;l=k-e|0;La[H[i+56>>2]](i,h+172|0,l,h+28|0,v);e=0;ya:{if((l|0)!=H[h+172>>2]){break ya}F[H[h+28>>2]]=0;if(pj(f,37378)){e=i;if(H[e+64>>2]==2){break ya}}f=oj(h+32|0);e=0;if((f|0)==-1){break ya}e=H[(f<<2)+37408>>2]}f=e;if(!Ig(i,k,o,h+16|0,h+12|0,h+20|0,h+24|0)){break c}e=H[h+16>>2];if(!e){break g}k=H[h+12>>2]}if(!(La[H[i+24>>2]](i,e,k,38901)|0)){break b}e=H[h+20>>2];l=H[h+24>>2];if(La[H[i+24>>2]](i,e,l-H[i+64>>2]|0,38912)|0){k=1}else{if(!(La[H[i+24>>2]](i,e,l-H[i+64>>2]|0,38916)|0)){break b}k=0}e=l;while(1){l=td(i,e,o)-9|0;if(!(l>>>0>23|!(1<<l&8388627))){e=H[i+64>>2]+e|0;continue}break}if((e|0)!=(o|0)){break b}if(!k){break f}F[H[a+340>>2]+130|0]=1;break f}if(H[a+84>>2]){e=Tb(m,i,b,H[h+8>>2]);H[a+304>>2]=e;if(!e){break d}H[a+312>>2]=0;H[a+416>>2]=H[a+412>>2];e=0}else{e=1}H[a+308>>2]=0;break j}e=H[a+84>>2];if(!e){break i}La[e|0](H[a+4>>2],H[a+304>>2],H[a+308>>2],H[a+312>>2],1);H[a+304>>2]=0;Oc(m);break e}F[j+129|0]=1;if(!H[a+84>>2]){break sa}if(!(La[H[i+52>>2]](i,b,H[h+8>>2],n)|0)){break h}e=H[i+64>>2];e=Tb(m,i,e+b|0,H[h+8>>2]-e|0);H[a+312>>2]=e;if(!e){break d}Hg(e);H[a+416>>2]=H[a+412>>2];e=0;break ra}e=1;if(!(La[H[i+52>>2]](i,b,H[h+8>>2],n)|0)){break h}}if(!I[j+128|0]|!H[a+300>>2]){break j}f=H[i+64>>2];f=Tb(q,i,f+b|0,H[h+8>>2]-f|0);if(!f){break d}Hg(f);H[H[a+300>>2]+24>>2]=f;H[j+96>>2]=H[j+92>>2];if(!H[a+136>>2]){break j}break e}e=H[a+304>>2];if(e){La[H[a+84>>2]](H[a+4>>2],e,H[a+308>>2],H[a+312>>2],0);Oc(m);e=0}else{e=1}f=H[a+88>>2];if(!f){break j}La[f|0](H[a+4>>2]);break e}H[a+264>>2]=42;f=Gg(a,b,c,d);break a}e=Fg(a,i,b,H[h+8>>2]);H[a+328>>2]=e;if(!e){break d}break ea}e=nj(a,i,b,H[h+8>>2]);H[a+332>>2]=e;if(!e){break d}H[a+316>>2]=0;G[a+336>>1]=0;break ea}H[a+316>>2]=34452;F[a+336|0]=1;break ea}H[a+316>>2]=34458;F[a+337|0]=1;break ea}H[a+316>>2]=34461;break ea}H[a+316>>2]=34467;break ea}H[a+316>>2]=34474;break ea}H[a+316>>2]=34481;break ea}H[a+316>>2]=34490;break ea}H[a+316>>2]=34498}if(!I[j+128|0]|!H[a+132>>2]){break i}break e}if(!I[j+128|0]|!H[a+132>>2]){break i}k=H[a+316>>2]?3285:(k|0)==32?14950:14958;while(1){f=I[k|0];if(f){e=H[a+412>>2];if((e|0)==H[a+408>>2]){if(!Fb(m)){break d}e=H[a+412>>2]}H[a+412>>2]=e+1;F[e|0]=f;k=k+1|0;continue}break}f=1;if(!H[a+416>>2]){break a}if(!tf(m,i,b,H[h+8>>2])){break a}H[a+316>>2]=H[a+416>>2];break e}if(!I[j+128|0]){break i}f=1;if(!mj(H[a+328>>2],H[a+332>>2],I[a+336|0],I[a+337|0],0,a)){break a}g=H[a+132>>2];if(!g){break i}e=H[a+316>>2];if(!e){break i}l=I[e|0];if(!((l|0)!=40&((l|0)!=78|I[e+1|0]!=79))){e=H[a+412>>2];if((e|0)==H[a+408>>2]){if(!Fb(m)){break a}e=H[a+412>>2]}H[a+412>>2]=e+1;F[e|0]=41;e=H[a+412>>2];if((e|0)==H[a+408>>2]){if(!Fb(m)){break a}e=H[a+412>>2]}H[a+412>>2]=e+1;F[e|0]=0;e=H[a+416>>2];H[a+316>>2]=e;H[a+416>>2]=H[a+412>>2];g=H[a+132>>2]}H[a+276>>2]=b;La[g|0](H[a+4>>2],H[H[a+328>>2]>>2],H[H[a+332>>2]>>2],e,0,(k|0)==36);Oc(m);break e}if(!I[j+128|0]){break i}e=H[i+64>>2];f=lj(a,i,I[a+336|0],e+b|0,H[h+8>>2]-e|0,q);if(f){break a}e=H[j+96>>2];H[j+96>>2]=H[j+92>>2];f=1;if(!mj(H[a+328>>2],H[a+332>>2],I[a+336|0],0,e,a)){break a}l=H[a+132>>2];if(!l){break i}g=H[a+316>>2];if(!g){break i}o=I[g|0];if(!((o|0)!=40&((o|0)!=78|I[g+1|0]!=79))){g=H[a+412>>2];if((g|0)==H[a+408>>2]){if(!Fb(m)){break a}g=H[a+412>>2]}H[a+412>>2]=g+1;F[g|0]=41;g=H[a+412>>2];if((g|0)==H[a+408>>2]){if(!Fb(m)){break a}g=H[a+412>>2]}H[a+412>>2]=g+1;F[g|0]=0;g=H[a+416>>2];H[a+316>>2]=g;H[a+416>>2]=H[a+412>>2];l=H[a+132>>2]}H[a+276>>2]=b;La[l|0](H[a+4>>2],H[H[a+328>>2]>>2],H[H[a+332>>2]>>2],g,e,(k|0)==38);Oc(m);break e}if(!I[j+128|0]){break i}k=H[a+340>>2];l=k+104|0;e=H[i+64>>2];f=H[h+8>>2];if(!H[k+104>>2]){if(!Fb(l)){break l}}o=f-e|0;g=b+e|0;while(1){f=0;za:{Aa:{Ba:{Ca:{Da:{Ea:{Fa:{Ga:{Ha:{Ia:{e=La[H[i+16>>2]](i,g,o,h+32|0)|0;switch(e+4|0){case 2:case 5:case 6:case 7:case 8:case 9:case 12:break Ba;case 4:break Ca;case 3:break Da;case 14:break Ea;case 11:break Fa;case 1:break Ga;case 10:case 13:break Ha;case 0:break k;default:break Ia}}if((e|0)!=28){break Ba}H[n>>2]=g;f=10;break k}if(!tf(l,i,g,H[h+32>>2])){break l}break za}H[h+32>>2]=H[i+64>>2]+g}e=H[k+116>>2];if((e|0)==H[k+112>>2]){if(!Fb(l)){break l}e=H[k+116>>2]}H[k+116>>2]=e+1;F[e|0]=10;break za}Ja:{f=La[H[i+40>>2]](i,g)|0;Ka:{La:{if((f|0)<0){if(H[a+144>>2]==(i|0)){break La}break Ka}e=0;r=Je(f,h+172|0);if(r){break Ja}if(H[a+144>>2]!=(i|0)){break Ka}}H[n>>2]=g}f=14;break k}while(1){if((e|0)==(r|0)){break za}f=H[k+116>>2];if((f|0)==H[k+112>>2]){if(!Fb(l)){break l}f=H[k+116>>2]}g=I[(h+172|0)+e|0];H[k+116>>2]=f+1;F[f|0]=g;e=e+1|0;continue}}if(H[a+144>>2]!=(i|0)){break Aa}H[n>>2]=g;break Aa}if(H[a+144>>2]!=(i|0)){break Aa}H[n>>2]=H[h+32>>2];break Aa}f=23;if(H[a+144>>2]!=(i|0)){break k}H[n>>2]=g;break k}f=4;break k}g=H[h+32>>2];continue}}f=3;break a}f=6;break a}if(!H[a+128>>2]){break i}break e}if(!I[j+128|0]|!H[a+132>>2]){break i}break e}if(!H[a+96>>2]){break i}break e}if(!I[j+128|0]|!H[a+136>>2]){break i}break e}if(!H[a+84>>2]){break i}break e}if((e|0)!=14){break i}break e}if(!Eg(a,i,b,H[h+8>>2])){break d}break e}if(!Dg(a,i,b,H[h+8>>2])){break d}break e}f=3;break N}f=2;break N}f=1}if(!I[j+140|0]){break i}g=H[a+128>>2];e=H[j+160>>2]-1|0;H[j+160>>2]=e;H[(H[j+144>>2]+N(H[H[j+164>>2]+(e<<2)>>2],28)|0)+4>>2]=f;e=!g;if(H[j+160>>2]){break j}if(g){g=H[a+340>>2];f=La[H[a+12>>2]](N(H[g+156>>2],20)+H[g+148>>2]|0)|0;if(!f){break d}g=H[g+156>>2];H[h+32>>2]=f+20;H[h+172>>2]=f+N(g,20);jj(a,0,f,h+32|0,h+172|0);H[a+276>>2]=b;La[H[a+128>>2]](H[a+4>>2],H[H[a+328>>2]>>2],f)}H[j+148>>2]=0;F[j+140|0]=0;break j}if(!I[j+140|0]){break i}g=0;e=H[h+8>>2];break I}g=3;break J}g=2}if(!I[j+140|0]){break i}e=H[h+8>>2]-H[i+64>>2]|0}f=1;k=ij(a);if((k|0)<0){break a}k=N(k,28);H[k+H[j+144>>2]>>2]=4;H[(k+H[j+144>>2]|0)+4>>2]=g;e=Fg(a,i,b,e);if(!e){break a}f=H[e>>2];H[(k+H[j+144>>2]|0)+8>>2]=f;e=0;while(1){g=e+f|0;e=e+1|0;if(I[g|0]){continue}break}H[j+148>>2]=H[j+148>>2]+e;if(!H[a+128>>2]){break i}break e}if(!I[j+140|0]){break i}H[H[j+144>>2]+N(H[(H[j+164>>2]+(H[j+160>>2]<<2)|0)-4>>2],28)>>2]=3;if(!H[a+128>>2]){break i}break e}if(!I[j+140|0]){break i}if(H[a+128>>2]){e=La[H[a+12>>2]](20)|0;if(!e){break d}H[e+4>>2]=0;H[e+8>>2]=0;H[e+12>>2]=0;H[e+16>>2]=0;H[e>>2]=(k|0)==41?2:1;H[a+276>>2]=b;La[H[a+128>>2]](H[a+4>>2],H[H[a+328>>2]>>2],e);e=0}else{e=1}F[j+140|0]=0;break j}if(!H[a+128>>2]){break i}b=Fg(a,i,b,H[h+8>>2]);H[a+328>>2]=b;if(!b){break d}H[j+156>>2]=0;H[j+160>>2]=0;F[j+140|0]=1;break e}if(I[j+130|0]){break i}e=H[a+108>>2];if(!e){break i}if(!(La[e|0](H[a+4>>2])|0)){break m}break i}f=H[a+256>>2];k=H[a+448>>2];g=I[f+k|0];if((g|0)==44){break B}e=1;Ma:{if(!I[j+140|0]|g){break Ma}g=H[j+144>>2]+N(H[(H[j+164>>2]+(H[j+160>>2]<<2)|0)-4>>2],28)|0;if(H[g>>2]==3){break Ma}H[g>>2]=5;f=H[a+256>>2];k=H[a+448>>2];e=!H[a+128>>2]}F[f+k|0]=124;break j}e=H[a+448>>2]+H[a+256>>2]|0;if(I[e|0]!=124){break A}}f=2;break a}F[e|0]=44;if(!I[j+140|0]|!H[a+128>>2]){break i}break e}e=H[a+452>>2];Na:{if(e>>>0>K[a+256>>2]){break Na}if(e){f=1;e=e<<1;H[a+452>>2]=e;e=La[H[a+16>>2]](H[a+448>>2],e)|0;if(!e){break a}H[a+448>>2]=e;e=H[j+164>>2];if(!e){break Na}e=La[H[a+16>>2]](e,H[a+452>>2]<<2)|0;if(!e){break a}H[j+164>>2]=e;break Na}H[a+452>>2]=32;e=La[H[a+12>>2]](32)|0;H[a+448>>2]=e;if(!e){break d}}F[H[a+448>>2]+H[a+256>>2]|0]=0;if(!I[j+140|0]){break i}e=ij(a);if((e|0)<0){break d}H[H[j+164>>2]+(H[j+160>>2]<<2)>>2]=e;H[j+160>>2]=H[j+160>>2]+1;H[H[j+144>>2]+N(e,28)>>2]=6;if(!H[a+128>>2]){break i}break e}f=(e|0)==28?10:(e|0)==12?17:2;break a}e=1;f=H[a+324>>2];if(!f){break v}g=H[a+96>>2];if(!g){break v}H[a+276>>2]=b;e=0;La[g|0](H[a+4>>2],H[a+320>>2],H[a+344>>2],0,f);break v}e=1;if(!H[a+320>>2]|!H[a+96>>2]){break v}e=H[i+64>>2];e=Tb(m,i,e+b|0,H[h+8>>2]-e|0);if(!e){break d}H[a+276>>2]=b;La[H[a+96>>2]](H[a+4>>2],H[a+320>>2],H[a+344>>2],e,H[a+324>>2]);e=0}Oc(m);break j}if(!(La[H[i+52>>2]](i,b,H[h+8>>2],n)|0)){break h}if(!H[a+320>>2]){break i}e=b;b=H[i+64>>2];b=Tb(m,i,e+b|0,H[h+8>>2]-b|0);if(!b){break d}Hg(b);H[a+324>>2]=b;H[a+416>>2]=H[a+412>>2];break e}H[a+320>>2]=0;H[a+324>>2]=0;if(!H[a+96>>2]){break i}b=Tb(m,i,b,H[h+8>>2]);H[a+320>>2]=b;if(!b){break d}H[a+416>>2]=H[a+412>>2];break e}if(La[H[i+44>>2]](i,b,H[h+8>>2])|0){break r}Oa:{if(!I[j+128|0]){break Oa}f=1;e=Tb(q,i,b,H[h+8>>2]);if(!e){break a}g=Fc(j,e,36);H[a+300>>2]=g;if(!g){break a}if((e|0)!=H[g>>2]){break Oa}H[j+96>>2]=H[j+92>>2];H[H[a+300>>2]+24>>2]=0;F[H[a+300>>2]+33|0]=0;F[H[a+300>>2]+34|0]=!(H[a+460>>2]?1:H[a+284>>2]);if(!H[a+136>>2]){break i}break e}H[j+92>>2]=H[j+96>>2]}H[a+300>>2]=0;break i}if(!I[j+128|0]|!H[a+300>>2]){break i}e=Tb(q,i,b,H[h+8>>2]);H[H[a+300>>2]+28>>2]=e;if(!H[H[a+300>>2]+28>>2]){break d}H[j+96>>2]=H[j+92>>2];e=H[a+92>>2];if(e){H[a+276>>2]=b;b=H[a+300>>2];La[e|0](H[a+4>>2],H[b>>2],H[b+20>>2],H[b+16>>2],H[b+24>>2],H[b+28>>2]);break e}e=H[a+136>>2];if(!e){break i}H[a+276>>2]=b;b=H[a+300>>2];La[e|0](H[a+4>>2],H[b>>2],0,0,0,H[b+20>>2],H[b+16>>2],H[b+24>>2],H[b+28>>2]);break e}if(!I[j+128|0]){break i}e=H[a+300>>2];if(!e){break i}f=H[a+136>>2];if(!f){break i}H[a+276>>2]=b;La[f|0](H[a+4>>2],H[e>>2],I[e+33|0],0,0,H[e+20>>2],H[e+16>>2],H[e+24>>2],0);break e}if(!I[j+128|0]|!H[a+300>>2]){break i}e=H[i+64>>2];e=Tb(q,i,e+b|0,H[h+8>>2]-e|0);H[H[a+300>>2]+16>>2]=e;e=H[a+300>>2];if(!H[e+16>>2]){break d}H[e+20>>2]=H[a+344>>2];H[j+96>>2]=H[j+92>>2];if(!H[a+136>>2]){break i}break e}e=1;F[j+129|0]=1;if(H[a+84>>2]){e=H[i+64>>2];e=Tb(m,i,e+b|0,H[h+8>>2]-e|0);H[a+308>>2]=e;if(!e){break d}H[a+416>>2]=H[a+412>>2];e=0}if(I[j+130|0]){break j}f=H[a+108>>2];if(!f){break j}if(La[f|0](H[a+4>>2])|0){break j}}f=22;break a}f=1}e=H[j+120>>2];g=H[a+300>>2];Pa:{Qa:{if(g){H[g+4>>2]=e;H[H[a+300>>2]+8>>2]=H[j+116>>2]-e;H[j+120>>2]=H[j+116>>2];g=H[a+136>>2];if(!g){break Qa}H[a+276>>2]=b;e=H[a+300>>2];La[g|0](H[a+4>>2],H[e>>2],I[e+33|0],H[e+4>>2],H[e+8>>2],H[a+344>>2],0,0,0);e=0;break Pa}H[j+116>>2]=e}e=1}if(f){break a}}if(!e){break e}}if(!H[a+80>>2]){break e}Rb(a,i,b,H[h+8>>2]);break e}f=32;break a}k=-1}Ra:{if(H[a+140>>2]){e=0;b=0;if(g){b=H[a+144>>2];b=Tb(p,b,g,(La[H[b+28>>2]](b,g)|0)+g|0);if(!b){break d}H[a+440>>2]=H[a+436>>2]}if(s){e=H[a+144>>2];e=Tb(p,e,s,u-H[e+64>>2]|0);if(!e){break d}}La[H[a+140>>2]](H[a+4>>2],e,b,k);e=(e|0)!=0;break Ra}if(H[a+80>>2]){Rb(a,H[a+144>>2],b,r)}b=0;e=0}Sa:{Ta:{if(H[a+228>>2]){break Ta}Ua:{if(f){if(H[f+64>>2]==H[H[a+144>>2]+64>>2]){break Ua}H[n>>2]=g;f=19;break a}if(!g){break Ta}if(!b){b=H[a+144>>2];b=Tb(p,b,g,(La[H[b+28>>2]](b,g)|0)+g|0);if(!b){break d}}f=rj(a,b);Oc(p);if(!f){break Sa}if((f|0)!=18){break a}H[n>>2]=g;f=18;break a}H[a+144>>2]=f}if(!b&(e^1)){break Sa}Oc(p)}i=H[a+144>>2]}f=35;Va:{switch(H[a+464>>2]-2|0){case 1:H[d>>2]=H[h+8>>2];f=0;break a;case 0:break a;default:break Va}}b=H[h+8>>2];e=La[H[i>>2]](i,b,c,h+8|0)|0;k=H[h+8>>2];continue}break}f=1;break a}e=H[h+24>>2]}H[n>>2]=e;f=30}Ha=h+176|0;return f|0}function Ar(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;j=a?0:F[58752]&1?H[14689]:0;a:{if(!j){break a}i=Ha-16|0;Ha=i;db();H[i>>2]=H[12762];Wa(27498,i);c=H[13176];if(c){b=H[c>>2];if(b){while(1){if(H[c+4>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){yl(f+8|0);Va(f);H[e+H[c>>2]>>2]=0;b=H[c>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c>>2];continue}break}}H[14727]=H[14727]+H[c+8>>2];H[14728]=H[14728]+H[c+24>>2];Va(c);H[13176]=0}b=H[14712];if(b){Va(gc(b));H[14712]=0}b:{b=H[14704];if(!b){break b}d=H[12878];if(d){La[H[H[d>>2]+4>>2]](d);H[12878]=0}d=H[b+100>>2];if(d){H[d+7184>>2]=0;H[d+7296>>2]=0;$n(d+3572|0);$n(d+16|0);Va(d);H[b+100>>2]=0}c=H[b+104>>2];if(c){f=c+12|0;d=0;while(1){if((d|0)!=8){g=f+(d<<2)|0;e=H[g>>2];if(e){La[H[H[e>>2]+4>>2]](e);H[g>>2]=0}d=d+1|0;continue}break}H[c+44>>2]=0;H[c+8>>2]=0;Va(c);H[b+104>>2]=0}f=b+296|0;g=b+272|0;k=b+288|0;d=0;while(1){if((d|0)==2){d=H[b+304>>2];if(d){La[H[H[d>>2]+4>>2]](d);H[b+304>>2]=0}d=H[b+340>>2];if(d){Va(d);H[b+340>>2]=0}d=b+324|0;Dd(d);c=b+308|0;Dd(c);e=H[b+344>>2];if(e){Va(e);H[b+344>>2]=0}e=H[b+348>>2];if(e){Va(e);H[b+348>>2]=0}e=H[b+88>>2];if(e){Va(e);H[b+88>>2]=0}nb(d);nb(c);Va(b);H[14704]=0;break b}c=d<<2;h=c+k|0;e=H[h>>2];if(e){La[H[H[e>>2]+4>>2]](e);H[h>>2]=0}h=c+g|0;e=H[h>>2];if(e){La[H[H[e>>2]+4>>2]](e);H[h>>2]=0}e=c+f|0;c=H[e>>2];if(c){La[H[H[c>>2]+4>>2]](c);H[e>>2]=0}d=d+1|0;continue}}b=H[14713];if(b){Va(b);H[14713]=0}c=H[14706];if(c){b=H[c+8>>2];c:{if(!b){break c}d:{if(!H[b>>2]){break d}d=0;while(1){if(H[b+12>>2]>(d|0)){g=d<<2;e=H[g+H[b>>2]>>2];if(e){f=H[e+12>>2];e:{if(!f){break e}Xd(f);f=H[e+12>>2];if(!f){break e}nb(f);Va(f);H[e+12>>2]=0}f=H[e+8>>2];if(f){Va(f);H[e+8>>2]=0}Va(e);H[g+H[b>>2]>>2]=0}d=d+1|0;continue}break}b=H[c+8>>2];if(!b){break c}d=H[b>>2];if(!d){break d}Va(d);H[b>>2]=0}H[b+8>>2]=0;H[b+12>>2]=0;Va(b);H[c+8>>2]=0}b=H[c+4>>2];f:{if(!b){break f}Xd(b);b=H[c+4>>2];if(!b){break f}nb(b);Va(b);H[c+4>>2]=0}b=H[c>>2];if(b){Va(hb(b));H[c>>2]=0}Va(c);H[14706]=0}b=H[14718];if(b){H[b+56>>2]=0;H[b+168>>2]=0;Va(b);H[14718]=0}b=0;H[14717]=0;e=H[14708];g:{if(!e){break g}while(1){if(H[e+4>>2]>(b|0)){d=H[e>>2]+(b<<3)|0;while(1){d=H[d>>2];if(d){f=H[d+4>>2];c=H[e+20>>2];if((f|0)!=(c|0)){if(f){Va(qm(f));c=H[e+20>>2]}H[d+4>>2]=c}d=d+8|0;continue}break}b=b+1|0;continue}break}c=H[14708];if(!c){break g}b=H[c>>2];if(b){d=0;while(1){if(H[c+4>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){sj(f+8|0);Va(f);H[e+H[c>>2]>>2]=0;b=H[c>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c>>2];continue}break}}H[14727]=H[14727]+H[c+8>>2];H[14728]=H[14728]+H[c+24>>2];Va(c);H[14708]=0}c=H[14709];if(c){b=H[c+56>>2];if(b){Va(b);H[c+56>>2]=0}b=H[c+60>>2];if(b){Va(b);H[c+60>>2]=0}b=H[c+228>>2];if(b){Va(b);H[c+228>>2]=0}b=H[c+80>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[c+80>>2]=0}b=H[c+72>>2];h:{i:{if(!b){break i}b=H[b+8>>2];if(!b){break i}b=H[b+20>>2];if(!b){break i}if(H[b+16>>2]){break h}}b=H[c+488>>2];if(!b){break h}nb(b);Va(b);H[c+488>>2]=0}b=H[c+76>>2];if(b){nb(b+116|0);nb(b+100|0);Va(b);H[c+76>>2]=0}e=H[c+72>>2];if(e){H[e>>2]=0;H[e+4>>2]=0;g=e+100|0;k=e+188|0;h=e+20|0;l=e+12|0;b=0;j:while(1){if((b|0)!=2){d=0;H[(b<<2)+l>>2]=0;while(1)if((d|0)==4){f=g+N(b,60)|0;m=k+N(b,20)|0;d=0;while(1)if((d|0)==5){H[f+4>>2]=0;b=b+1|0;continue j}else{H[m>>2]=0;H[f+8>>2]=0;H[f>>2]=0;d=d+1|0;continue}}else{H[(h+(b<<4)|0)+(d<<2)>>2]=0;d=d+1|0;continue}}break}nb(e+252|0);nb(e+236|0);Va(e);H[c+72>>2]=0}b=H[c+104>>2];k:{if(!b){break k}d=H[b+12>>2];while(1){if((d|0)<0){if(!b){break k}nb(b);Va(b);H[c+104>>2]=0}else{l:{if(H[b+12>>2]<=(d|0)){break l}e=H[H[b>>2]+(d<<2)>>2];if(!e){break l}b=H[e>>2];if(b){Va(b);H[e>>2]=0}b=H[e+12>>2];if(b){nb(b);Va(b);H[e+12>>2]=0}b=H[e+16>>2];if(b){nb(b);Va(b);H[e+16>>2]=0}b=H[e+100>>2];if(b){Va(b);H[e+100>>2]=0}b=H[e+36>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[e+36>>2]=0}H[e+20>>2]=0;H[e+24>>2]=0;H[e+8>>2]=0;Va(e);b=H[c+104>>2]}d=d-1|0;continue}break}}m:{b=H[c+108>>2];if(!b){break m}d=H[b+12>>2];while(1){if((d|0)<=0){if(!b){break m}nb(b);Va(b);H[c+108>>2]=0;break m}e=H[b+12>>2]<(d|0);d=d-1|0;if(e){continue}e=H[H[b>>2]+(d<<2)>>2];if(!e){continue}Va(kn(e));b=H[c+108>>2];continue}}n:{b=H[c+112>>2];if(!b){break n}d=H[b+12>>2];while(1){if((d|0)<=0){if(!b){break n}d=H[b>>2];if(d){Va(d);H[b>>2]=0}H[b+8>>2]=0;H[b+12>>2]=0;Va(b);H[c+112>>2]=0;break n}e=H[b+12>>2]<(d|0);d=d-1|0;if(e){continue}e=H[H[b>>2]+(d<<2)>>2];if(!e){continue}b=H[e+16>>2];if(b){f=H[b>>2];if(f){nb(f);Va(f);H[b>>2]=0}f=H[b+4>>2];if(f){nb(f);Va(f);H[b+4>>2]=0}f=H[b+8>>2];if(f){nb(f);Va(f);H[b+8>>2]=0}f=H[b+12>>2];if(f){nb(f);Va(f);H[b+12>>2]=0}Va(b);H[e+16>>2]=0}b=H[e>>2];if(b){Va(b);H[e>>2]=0}H[e+20>>2]=0;H[e+8>>2]=0;H[e+12>>2]=-1;H[12890]=H[12890]-1;Va(e);b=H[c+112>>2];continue}}H[c+84>>2]=0;H[c+88>>2]=0;H[c+92>>2]=0;H[c+96>>2]=0;hb(c+200|0);b=H[c+172>>2];if(b){d=0;while(1){if(H[c+176>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){Nm(f+8|0);Va(f);H[e+H[c+172>>2]>>2]=0;b=H[c+172>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c+172>>2];continue}break}}H[14727]=H[14727]+H[c+180>>2];H[14728]=H[14728]+H[c+196>>2];hb(c+144|0);hb(c+116|0);Va(c);H[14709]=0}b=H[13224];o:{if(!b){break o}Dd(b);b=H[13224];if(!b){break o}nb(b);Va(b);H[13224]=0}b=0;p:{c=H[13223];if(!c){break p}while(1){q:{if(H[c+4>>2]>(b|0)){d=H[c>>2]+(b<<3)|0;while(1){d=H[d>>2];if(!d){break q}Va(H[d>>2]);d=d+8|0;continue}}c=H[13223];if(!c){break p}b=H[c>>2];if(b){d=0;while(1){if(H[c+4>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){Ek(f+8|0);Va(f);H[e+H[c>>2]>>2]=0;b=H[c>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c>>2];continue}break}}H[14727]=H[14727]+H[c+8>>2];H[14728]=H[14728]+H[c+24>>2];Va(c);H[13223]=0;break p}b=b+1|0;continue}}b=H[13225];r:{if(!b){break r}Dd(b);b=H[13225];if(!b){break r}nb(b);Va(b);H[13225]=0}xh();b=H[13154];if(b){Va(ed(b));H[13154]=0}b=H[13155];if(b){Va(ed(b));H[13155]=0}s:{if(I[58860]){break s}b=H[13156];if(b){Va(ed(b));H[13156]=0}b=H[13157];if(b){Va(ed(b));H[13157]=0}b=H[13158];if(b){Va(ed(b));H[13158]=0}b=H[13159];if(b){Va(ed(b));H[13159]=0}b=H[13160];if(b){Va(ed(b));H[13160]=0}b=H[13161];if(b){Va(ed(b));H[13161]=0}b=H[13162];if(b){Va(ed(b));H[13162]=0}b=H[13163];if(!b){break s}Va(ed(b));H[13163]=0}b=H[14716];if(b){Va(Gc(b));H[14716]=0}b=H[13136];if(b){Va(bn(b));H[13136]=0}b=H[13123];if(b){Va(b);H[13123]=0}b=H[13122];if(b){Va(b);H[13122]=0}b=H[13121];if(b){Va(b);H[13121]=0}b=H[13128];t:{if(!b){break t}Xh(b);b=H[13128];if(!b){break t}Va(Wh(b));H[13128]=0}b=H[13129];u:{if(!b){break u}Xh(b);b=H[13129];if(!b){break u}Va(Wh(b));H[13129]=0}b=H[13130];v:{if(!b){break v}Xh(b);b=H[13130];if(!b){break v}Va(Wh(b));H[13130]=0}c=H[13095];if(c){b=H[c>>2];if(b){d=0;while(1){if(H[c+4>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){_m(f+8|0);Va(f);H[e+H[c>>2]>>2]=0;b=H[c>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c>>2];continue}break}}H[14727]=H[14727]+H[c+8>>2];H[14728]=H[14728]+H[c+24>>2];Va(c);H[13095]=0}b=H[12859];if(b){Va(b);H[12859]=0}b=H[12860];if(b){Va(hb(b));H[12860]=0}b=H[13165];if(b){Va(b);H[13165]=0}b=H[13164];if(b){Va(hb(b));H[13164]=0}b=H[14657];if(b){Va(Nc(b));H[14657]=0}b=H[14658];if(b){Va(b);H[14658]=0}b=H[14659];if(b){Va(Kj(b));H[14659]=0}b=H[14660];if(b){nb(b);Va(b);H[14660]=0}b=H[14661];if(b){Va(gc(b));H[14661]=0}b=H[14662];if(b){nb(b);Va(b);H[14662]=0}b=H[14663];if(b){Va(gc(b));H[14663]=0}b=H[14664];if(b){Va(Kj(b));H[14664]=0}b=H[14665];if(b){Va(Nc(b));H[14665]=0}b=H[14666];if(b){Va(Nc(b));H[14666]=0}b=H[14667];if(b){Va(Nc(b));H[14667]=0}b=H[14668];if(b){Va(Nc(b));H[14668]=0}b=H[14669];if(b){Va(Nc(b));H[14669]=0}b=H[14670];if(b){Va(Nc(b));H[14670]=0}b=H[14671];if(b){Va(Nc(b));H[14671]=0}b=H[14672];if(b){Va(Nc(b));H[14672]=0}b=H[14673];if(b){Va(Nc(b));H[14673]=0}b=H[14603];if(b){Va(hb(b));H[14603]=0}c=H[14604];if(c){b=H[c>>2];if(b){d=0;while(1){if(H[c+4>>2]<=(d|0)){Va(b)}else{e=d<<3;f=H[e+b>>2];if(f){Ij(f+8|0);Va(f);H[e+H[c>>2]>>2]=0;b=H[c>>2]}G[(b+e|0)+4>>1]=0;d=d+1|0;b=H[c>>2];continue}break}}H[14727]=H[14727]+H[c+8>>2];H[14728]=H[14728]+H[c+24>>2];Va(c);H[14604]=0}b=H[14607];if(b){Va(hb(b));H[14607]=0}b=H[14608];if(b){Va(hb(b));H[14608]=0}b=H[14609];if(b){Va(hb(b));H[14609]=0}b=H[14610];if(b){Va(hb(b));H[14610]=0}b=H[14611];if(b){Va(hb(b));H[14611]=0}b=H[14612];if(b){Va(hb(b));H[14612]=0}b=H[14613];if(b){Va(hb(b));H[14613]=0}b=H[14614];if(b){Va(hb(b));H[14614]=0}b=H[14615];if(b){Va(hb(b));H[14615]=0}b=H[14616];if(b){Va(hb(b));H[14616]=0}b=H[14617];if(b){Va(hb(b));H[14617]=0}b=H[14618];if(b){Va(hb(b));H[14618]=0}b=H[14619];if(b){Va(hb(b));H[14619]=0}b=H[14620];if(b){Va(hb(b));H[14620]=0}b=H[14621];if(b){Va(hb(b));H[14621]=0}b=H[14622];if(b){Va(hb(b));H[14622]=0}b=H[14623];if(b){Va(hb(b));H[14623]=0}b=H[14624];if(b){Va(hb(b));H[14624]=0}b=H[14625];if(b){Va(hb(b));H[14625]=0}b=H[14626];if(b){Va(hb(b));H[14626]=0}b=H[14627];if(b){Va(hb(b));H[14627]=0}b=H[14628];if(b){Va(hb(b));H[14628]=0}b=H[14629];if(b){Va(hb(b));H[14629]=0}b=H[14630];if(b){Va(hb(b));H[14630]=0}b=H[14631];if(b){Va(hb(b));H[14631]=0}b=H[14632];if(b){Va(hb(b));H[14632]=0}b=H[14633];if(b){Va(hb(b));H[14633]=0}b=H[14634];if(b){Va(hb(b));H[14634]=0}b=H[14635];if(b){Va(hb(b));H[14635]=0}b=H[14636];if(b){Va(hb(b));H[14636]=0}b=H[14637];if(b){Va(hb(b));H[14637]=0}b=H[14638];if(b){Va(hb(b));H[14638]=0}b=H[14639];if(b){Va(hb(b));H[14639]=0}b=H[14640];if(b){Va(hb(b));H[14640]=0}b=H[14641];if(b){Va(hb(b));H[14641]=0}b=H[14642];if(b){Va(hb(b));H[14642]=0}b=H[14643];if(b){Va(hb(b));H[14643]=0}b=H[14644];if(b){Va(hb(b));H[14644]=0}b=H[14645];if(b){Va(hb(b));H[14645]=0}b=H[14646];if(b){Va(hb(b));H[14646]=0}b=H[14647];if(b){Va(hb(b));H[14647]=0}b=H[14648];if(b){Va(hb(b));H[14648]=0}b=H[14649];if(b){Va(hb(b));H[14649]=0}b=H[14650];if(b){Va(hb(b));H[14650]=0}b=H[14651];if(b){Va(hb(b));H[14651]=0}b=H[14652];if(b){Va(hb(b));H[14652]=0}b=H[14653];if(b){Va(hb(b));H[14653]=0}b=H[14654];if(b){Va(hb(b));H[14654]=0}b=H[14655];if(b){Va(hb(b));H[14655]=0}b=H[14656];if(b){Va(hb(b));H[14656]=0}b=H[14020];if(b){Va(b);H[14020]=0}b=H[14021];if(b){Va(b);H[14021]=0}b=H[14022];if(b){Va(b);H[14022]=0}b=H[14023];if(b){Va(b);H[14023]=0}b=H[14024];if(b){Va(hb(b));H[14024]=0}b=H[14025];if(b){Va(gc(b));H[14025]=0}b=H[14026];if(b){Va(hb(b));H[14026]=0}b=H[14027];if(b){Va(hb(b));H[14027]=0}b=H[14028];if(b){Va(hb(b));H[14028]=0}b=H[14029];if(b){Va(b);H[14029]=0}b=H[14030];if(b){Va(gc(b));H[14030]=0}b=H[14031];if(b){Va(hb(b));H[14031]=0}b=H[14032];if(b){Va(hb(b));H[14032]=0}b=H[14033];if(b){Va(gc(b));H[14033]=0}b=H[14034];if(b){Va(gc(b));H[14034]=0}b=H[14588];if(b){Va(gc(b));H[14588]=0}b=H[14589];if(b){Va(hb(b));H[14589]=0}b=H[14590];if(b){Va(gc(b));H[14590]=0}b=H[14591];if(b){Va(gc(b));H[14591]=0}b=H[14592];if(b){Va(b);H[14592]=0}b=H[14593];if(b){Va(hb(b));H[14593]=0}b=H[14596];if(b){Va(gc(b));H[14596]=0}b=H[14597];if(b){Va(gc(b));H[14597]=0}b=H[14598];if(b){Va(gc(b));H[14598]=0}b=H[14599];if(b){Va(gc(b));H[14599]=0}b=H[14600];if(b){Va(gc(b));H[14600]=0}b=H[14601];if(b){Va(gc(b));H[14601]=0}b=H[14602];if(b){Va(hb(b));H[14602]=0}b=H[14605];if(b){Va(hb(b));H[14605]=0}b=H[14606];if(b){Va(hb(b));H[14606]=0}b=H[14595];if(b){Va(hb(b));H[14595]=0}b=H[14594];if(b){Va(gc(b));H[14594]=0}b=H[14674];if(b){nb(b);Va(b);H[14674]=0}H[14676]=0;b=H[14675];if(b){nb(b);Va(b);H[14675]=0}H[14677]=0;b=H[13222];if(b){Va(gc(b));H[13222]=0}b=H[12762];if(b){Va(b);H[12762]=0}b=H[12763];if(b){Va(b);H[12763]=0}b=H[14711];if(!(!b|(b|0)==45864)){ce(b);rf(H[14711])}H[14707]=0;Ha=i+16|0;a=(a<<2)+58756|0;b=H[a>>2];if(b){Va(b);H[a>>2]=0}a=H[j+12>>2];if(!a){break a}rf(a)}return(j|0)!=0|0}function Is(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=O(0),t=O(0),u=0;f=Ha-96|0;Ha=f;a:{b:{e=H[a+8>>2];switch(e-3|0){case 0:case 2:break b;default:break a}}Qk(a+508|0,H[H[a+528>>2]+28>>2]);e=H[a+8>>2]}if((e&-2)==4){Qk(a+510|0,H[H[a+528>>2]+32>>2])}$b(a+60|0,b);d=H[a+528>>2];e=H[d+28>>2];c:{if(!e){break c}h=I[d+13|0];if(!((h&64?4:8)&h)){break c}fk(e,b)}e=H[d+32>>2];d:{if(!e){break d}d=I[d+13|0];if(!((d&64?8:4)&d)){break d}fk(e,b+44|0)}$b(a+284|0,b);m=I[a+532|0];n=H[a+528>>2];b=H[n+40>>2];if(b){Va(b);H[n+40>>2]=0}d=Xa(68);b=H[n+36>>2];jb(f+12|0,b,52);Ya(f- -64|0,b+52|0);H[f+92>>2]=H[b+80>>2];e=H[b+76>>2];H[f+84>>2]=H[b+72>>2];H[f+88>>2]=e;e=H[b+68>>2];H[f+76>>2]=H[b+64>>2];H[f+80>>2]=e;i=J[n+14>>1];p=I[n+13|0];F[d+41|0]=0;F[d+42|0]=0;F[d+40|0]=0;F[d+37|0]=0;F[d+38|0]=0;F[d+36|0]=0;H[d+32>>2]=1056964608;F[d+29|0]=0;F[d+30|0]=0;F[d+28|0]=0;F[d+25|0]=0;F[d+26|0]=0;F[d+24|0]=0;H[d+20>>2]=1056964608;F[d+17|0]=0;F[d+18|0]=0;F[d+16|0]=0;F[d+13|0]=0;F[d+14|0]=0;F[d+12|0]=0;H[d+8>>2]=1056964608;F[d+5|0]=0;F[d+6|0]=0;F[d+4|0]=0;F[d+1|0]=0;F[d+2|0]=0;F[d|0]=0;F[d+57|0]=0;F[d+58|0]=0;F[d+59|0]=0;F[d+60|0]=0;F[d+61|0]=0;F[d+62|0]=0;F[d+63|0]=0;F[d+64|0]=0;H[d+52>>2]=0;H[d+56>>2]=0;H[d+44>>2]=0;H[d+48>>2]=0;b=p&8;o=p&4?b?5:1:b>>>2|0;e:{f:{g:{b=H[14678];if((H[f+80>>2]&16777215)==(b&16777215)){break g}h:{switch(o-2|0){case 0:case 3:break g;default:break h}}Wa(21819,0);F[f+14|0]=I[f+82|0];G[f+12>>1]=J[f+80>>1];F[f+81|0]=0;F[f+82|0]=0;F[f+80|0]=0;F[f+17|0]=0;F[f+18|0]=0;F[f+16|0]=0;F[f+26|0]=I[f+78|0];G[f+24>>1]=J[f+76>>1];F[f+76|0]=0;b=f+77|0;break f}if((o&3)==1|(H[f+76>>2]&16777215)==(b&16777215)){break e}Wa(21782,0);F[f+14|0]=I[f+78|0];G[f+12>>1]=J[f+76>>1];F[f+17|0]=0;F[f+18|0]=0;F[f+16|0]=0;F[f+26|0]=I[f+82|0];G[f+24>>1]=J[f+80>>1];F[f+80|0]=0;F[f+77|0]=0;F[f+78|0]=0;F[f+76|0]=0;b=f+81|0}F[b|0]=0;F[b+1|0]=0;b=H[d+44>>2];if(b){b=b<<12&28672;e=b|(I[f+13|0]|I[f+14|0]<<8)&36863;F[f+13|0]=e;F[f+14|0]=e>>>8;b=b|(I[f+25|0]|I[f+26|0]<<8)&36863;F[f+25|0]=b;F[f+26|0]=b>>>8;H[d+44>>2]=0}b=H[14678];if(!I[53764]|(H[f+84>>2]&16777215)==(b&16777215)){break e}Wa(16258,0);rd(f+84|0,H[14711]);Lb();b=H[14678]}j=d+36|0;e=H[f+84>>2];if((e&16777215)!=(b&16777215)){e=H[f+88>>2];H[d>>2]=H[f+84>>2];H[d+4>>2]=e;H[d+8>>2]=H[f+92>>2];e=b}q=H[f+76>>2];if((e&16777215)!=(q&16777215)){G[j>>1]=J[f+76>>1];F[j+2|0]=I[f+78|0]}k=d+40|0;h=e&16777215;r=H[f+80>>2];if((h|0)!=(r&16777215)){G[k>>1]=J[f+80>>1];F[k+2|0]=I[f+82|0]}e=0;i:{if((h|0)==(H[f+28>>2]&16777215)){break i}e=H[f+32>>2];H[d+12>>2]=H[f+28>>2];H[d+16>>2]=e;H[d+20>>2]=H[f+36>>2];F[j+2|0]=I[f+54|0];G[j>>1]=J[f+52>>1];h=I[d+13|0]|I[d+14|0]<<8;e=0;if(!pc(I[d+12|0],h)){break i}g=h>>>12&7;e=1}l=b&16777215;j:{if((l|0)==(H[f+40>>2]&16777215)){break j}h=H[f+44>>2];H[d+24>>2]=H[f+40>>2];H[d+28>>2]=h;H[d+32>>2]=H[f+48>>2];F[k+2|0]=I[f+58|0];G[k>>1]=J[f+56>>1];h=I[d+25|0]|I[d+26|0]<<8;if((pc(I[d+24|0],h)&e)!=1){break j}e=h&36863|4096;F[d+25|0]=e;F[d+26|0]=e>>>8;e=(I[d+13|0]|I[d+14|0]<<8)&36863|4096;F[d+13|0]=e;F[d+14|0]=e>>>8;e=h>>>12&7;e=e>>>0<g>>>0?g:e;H[d+44>>2]=e?e:3}h=p&64;e=H[f+12>>2];k:{if((l|0)==(e&16777215)){break k}if(i&15){if(pc(e,e>>>8|0)){e=b&16777215;l:{if((e|0)!=(H[f+24>>2]&16777215)){b=H[f+16>>2];H[d+12>>2]=H[f+12>>2];H[d+16>>2]=b;H[d+20>>2]=H[f+20>>2];F[j+2|0]=I[f+26|0];G[j>>1]=J[f+24>>1];g=(I[d+37|0]|I[d+38|0]<<8)&-16|(h?1:2);F[d+37|0]=g;F[d+38|0]=g>>>8;b=I[d+13|0]|I[d+14|0]<<8;i=b&36863|4096;F[d+13|0]=i;F[d+14|0]=i>>>8;b=b>>>12&7;H[d+44>>2]=b;i=H[d+16>>2];if((e|0)==(i&16777215)){break l}e=i>>>8&36863|4096;F[d+17|0]=e;F[d+18|0]=e>>>8;break l}G[j>>1]=J[f+12>>1];F[j+2|0]=I[f+14|0];g=(I[d+37|0]|I[d+38|0]<<8)&-16|(h?1:2);F[d+37|0]=g;F[d+38|0]=g>>>8;F[k+2|0]=I[f+14|0];G[k>>1]=J[f+12>>1];b=(I[d+41|0]|I[d+42|0]<<8)&65520|(h?2:1);F[d+41|0]=b;F[d+42|0]=b>>>8;b=H[d+44>>2]}e=g>>>12&7;if((e|0)>(b|0)){H[d+44>>2]=e}else{e=b}b=(I[d+41|0]|I[d+42|0]<<8)>>>12&7;if(e>>>0>=b>>>0){break k}H[d+44>>2]=b;break k}e=H[f+16>>2];H[d+12>>2]=H[f+12>>2];H[d+16>>2]=e;H[d+20>>2]=H[f+20>>2];H[d+32>>2]=H[f+20>>2];e=H[f+16>>2];H[d+24>>2]=H[f+12>>2];H[d+28>>2]=e;g=I[d+25|0]|I[d+26|0]<<8;e=g&15;i=e-1|0;if(i>>>0<=3){e=H[(i<<2)+31932>>2]&15}e=g&65520|e;F[d+25|0]=e;F[d+26|0]=e>>>8;g=I[d+29|0]|I[d+30|0]<<8;e=g&15;i=e-1|0;if(i>>>0<=3){e=H[(i<<2)+31932>>2]&15}e=g&65520|e;F[d+29|0]=e;F[d+30|0]=e>>>8;F[j+2|0]=I[f+26|0];G[j>>1]=J[f+24>>1];b=b&16777215;if((b|0)==(H[d+36>>2]&16777215)){G[j>>1]=J[f+76>>1];F[j+2|0]=I[f+78|0]}G[k>>1]=J[f+24>>1];F[k+2|0]=I[f+26|0];e=H[k>>2];m:{if((b|0)!=(e&16777215)){b=e>>>8|0;break m}G[k>>1]=J[f+80>>1];F[k+2|0]=I[f+82|0];b=I[d+41|0]|I[d+42|0]<<8}if(!(b&15)){break k}b=b&65520|(h?2:1);F[d+41|0]=b;F[d+42|0]=b>>>8;break k}if((o|0)==2){e=H[f+16>>2];H[d+24>>2]=H[f+12>>2];H[d+28>>2]=e;H[d+32>>2]=H[f+20>>2];if((H[f+24>>2]&16777215)!=(b&16777215)){G[k>>1]=J[f+24>>1];F[k+2|0]=I[f+26|0];e=(I[d+41|0]|I[d+42|0]<<8)&65520|(h?2:1);F[d+41|0]=e;F[d+42|0]=e>>>8}e=I[d+25|0]|I[d+26|0]<<8;if(!pc(I[d+24|0],e)){break k}g=e&36863|4096;F[d+25|0]=g;F[d+26|0]=g>>>8;H[d+44>>2]=e>>>12&7;e=H[d+28>>2];if((e&16777215)==(b&16777215)){break k}b=e>>>8&36863|4096;F[d+29|0]=b;F[d+30|0]=b>>>8;break k}e=H[f+16>>2];H[d+12>>2]=H[f+12>>2];H[d+16>>2]=e;H[d+20>>2]=H[f+20>>2];if((H[f+24>>2]&16777215)!=(b&16777215)){G[j>>1]=J[f+24>>1];F[j+2|0]=I[f+26|0];e=(I[d+37|0]|I[d+38|0]<<8)&65520|(h?1:2);F[d+37|0]=e;F[d+38|0]=e>>>8}e=I[d+13|0]|I[d+14|0]<<8;if(!pc(I[d+12|0],e)){break k}g=e&36863|4096;F[d+13|0]=g;F[d+14|0]=g>>>8;H[d+44>>2]=e>>>12&7;e=H[d+16>>2];if((e&16777215)==(b&16777215)){break k}b=e>>>8&36863|4096;F[d+17|0]=b;F[d+18|0]=b>>>8}b=H[f+60>>2];if(b){H[d+44>>2]=b}vm(j,(h|0)!=0);vm(k,!h);e=1;h=H[d+12>>2]&16777215;l=H[14678];g=l&16777215;b=1;n:{if((h|0)!=(g|0)){break n}b=0;if((h|0)==(H[d>>2]&16777215)){break n}b=(o&3)==1}F[d+60|0]=b;o:{if((g|0)!=(H[d+24>>2]&16777215)){break o}e=0;if((H[d>>2]&16777215)==(l&16777215)){break o}e=(o|0)==2|(o|0)==5}F[d+61|0]=e;g=H[d+44>>2];F[d+62|0]=(g|0)!=0;p:{if(!m){break p}e=m?c:0;b=H[e+36>>2];um(j,b,b>>>8|0);b=H[e+40>>2];um(k,b,b>>>8|0);b=l&16777215;g=H[d>>2];if(!((b|0)!=(H[d+12>>2]&16777215)|((b|0)!=(H[d+24>>2]&16777215)|(b|0)!=(g&16777215)))){h=H[e+16>>2];H[d+12>>2]=H[e+12>>2];H[d+16>>2]=h;H[d+20>>2]=H[e+20>>2];H[d+32>>2]=H[e+32>>2];h=H[e+28>>2];H[d+24>>2]=H[e+24>>2];H[d+28>>2]=h;H[d+8>>2]=H[e+8>>2];h=H[e+4>>2];g=H[e>>2];H[d>>2]=g;H[d+4>>2]=h}q:{if((b|0)==(g&16777215)){break q}b=l&16777215;if((b|0)==(H[d+12>>2]&16777215)){h=H[d+4>>2];H[d+12>>2]=H[d>>2];H[d+16>>2]=h;H[d+20>>2]=H[d+8>>2]}if((b|0)!=(H[d+24>>2]&16777215)){break q}b=H[d+4>>2];H[d+24>>2]=H[d>>2];H[d+28>>2]=b;H[d+32>>2]=H[d+8>>2]}h=l&16777215;b=H[d+12>>2];if((h|0)==(b&16777215)){g=H[e+16>>2];b=H[e+12>>2];H[d+12>>2]=b;H[d+16>>2]=g;H[d+20>>2]=H[e+20>>2]}if((h|0)==(b&16777215)){b=H[e+4>>2];H[d+12>>2]=H[e>>2];H[d+16>>2]=b;H[d+20>>2]=H[e+8>>2]}h=l&16777215;b=H[d+24>>2];if((h|0)==(b&16777215)){g=H[e+28>>2];b=H[e+24>>2];H[d+24>>2]=b;H[d+28>>2]=g;H[d+32>>2]=H[e+32>>2]}if((h|0)==(b&16777215)){b=H[e+4>>2];H[d+24>>2]=H[e>>2];H[d+28>>2]=b;H[d+32>>2]=H[e+8>>2]}g=H[d+44>>2];if(g){break p}g=H[e+44>>2];H[d+44>>2]=g}r:{s:{e=H[d+12>>2];m=H[d+24>>2];b=H[d+16>>2];i=H[d+28>>2];s=L[d+32>>2];t=L[d+20>>2];if(!((e&16777215)!=(m&16777215)|(b&16777215)!=(i&16777215)|s!=t)){h=l&16777215;if((h|0)==(e&16777215)&(p&12)!=12|(h|0)!=(H[d>>2]&16777215)){break s}b=H[d+16>>2];H[d>>2]=H[d+12>>2];H[d+4>>2]=b;H[d+8>>2]=H[d+20>>2];if(!g){g=e>>>20&7;H[d+44>>2]=g}F[d+29|0]=0;F[d+30|0]=0;F[d+28|0]=0;F[d+17|0]=0;F[d+18|0]=0;F[d+16|0]=0;F[d+25|0]=0;F[d+26|0]=0;F[d+24|0]=0;F[d+13|0]=0;F[d+14|0]=0;F[d+12|0]=0;i=H[d+28>>2];m=H[d+24>>2];e=H[d+12>>2];b=H[d+16>>2]}h=m;break r}i=b;h=e}u=e>>>8|0;if(!(!(!((e&16777215)!=(h&16777215)|(b&16777215)!=(i&16777215))&s==t)&(H[d>>2]&16777215)==(l&16777215)|((o|0)!=5|g))){H[d+44>>2]=3;g=3}t:{if(!pc(e,u)){break t}b=m>>>8|0;if(!pc(m,b)){break t}e=u>>>12&7;b=b>>>12&7;b=b>>>0<e>>>0?e:b;g=(b|0)>(g|0)?b:g;H[d+44>>2]=g;F[j+2|0]=I[d+26|0];G[j>>1]=J[d+24>>1];e=l&16777215;b=H[j>>2];if((e|0)!=(b&16777215)){b=b>>>8&36863|4096;F[d+37|0]=b;F[d+38|0]=b>>>8}G[k>>1]=J[d+12>>1];F[k+2|0]=I[d+14|0];b=H[k>>2];if((e|0)!=(b&16777215)){b=b>>>8&36863|4096;F[d+41|0]=b;F[d+42|0]=b>>>8}F[d+14|0]=I[58714];G[d+12>>1]=J[29356];F[d+18|0]=I[58714];G[d+16>>1]=J[29356];F[d+26|0]=I[58714];G[d+24>>1]=J[29356];F[d+30|0]=I[58714];G[d+28>>1]=J[29356]}u:{v:{if(!(!g|(p&12)==12)){if((o&3)==1){b=l&16777215;if(!((b|0)==(q&16777215)|(b|0)==(r&16777215))){G[d+12>>1]=J[f+80>>1];F[d+14|0]=I[f+82|0];F[d+16|0]=0;F[d+17|0]=0;F[d+18|0]=0;F[j+2|0]=I[f+78|0];G[j>>1]=J[f+76>>1];break v}e=H[d+12>>2];if((b|0)!=(e&16777215)){b=e>>>8&36863|g<<12&28672;F[d+13|0]=b;F[d+14|0]=b>>>8}b=H[d+16>>2];if((b&16777215)==(l&16777215)){break v}b=b>>>8&36863|g<<12&28672;F[d+17|0]=b;F[d+18|0]=b>>>8;break v}if((o|0)!=2){break v}b=l&16777215;if(!((b|0)==(q&16777215)|(b|0)==(r&16777215))){G[d+24>>1]=J[f+76>>1];F[d+26|0]=I[f+78|0];F[d+28|0]=0;F[d+29|0]=0;F[d+30|0]=0;F[k+2|0]=I[f+82|0];G[k>>1]=J[f+80>>1];break v}e=H[d+24>>2];if((b|0)!=(e&16777215)){b=e>>>8&36863|g<<12&28672;F[d+25|0]=b;F[d+26|0]=b>>>8}b=H[d+28>>2];if((b&16777215)==(l&16777215)){break v}b=b>>>8&36863|g<<12&28672;F[d+29|0]=b;F[d+30|0]=b>>>8;break v}if(!g|(o|0)!=5){break u}if(pc(I[d+12|0],I[d+13|0]|I[d+14|0]<<8)){break v}if(!pc(I[d+24|0],I[d+25|0]|I[d+26|0]<<8)){break u}}H[d+44>>2]=0}H[n+40>>2]=d;b=H[n+20>>2];if(!(!b|!(I[n+13|0]&4)|(H[H[b+56>>2]>>2]!=1|I[j|0]!=1))){F[d+36|0]=9;b=(I[d+37|0]|I[d+38|0]<<8)&61455|544;F[d+37|0]=b;F[d+38|0]=b>>>8}b=H[n+24>>2];if(!(!b|!(I[n+13|0]&8)|(H[H[b+56>>2]>>2]!=1|I[k|0]!=1))){F[d+40|0]=9;b=(I[d+41|0]|I[d+42|0]<<8)&61455|544;F[d+41|0]=b;F[d+42|0]=b>>>8}w:{if(I[a+532|0]==1){b=H[a+528>>2];e=I[b+13|0]&64;d=H[b+40>>2];h=I[d+61|0];g=I[d+60|0];x:{y:{m=H[a+8>>2];switch(m-3|0){case 0:case 2:break y;default:break x}}i=J[a+508>>1]&-3|((e?g:h)&1?2:0);G[a+508>>1]=i;i=i&-9|I[d+62|0]<<3&8;G[a+508>>1]=i;G[a+508>>1]=i&65531|I[d+62|0]<<2&4}if((m&-2)!=4){break w}e=J[a+510>>1]&-3|((e?h:g)&1?2:0);G[a+510>>1]=e;e=e&-9|I[d+62|0]<<3&8;G[a+510>>1]=e;G[a+510>>1]=e&65531|I[d+62|0]<<2&4;break w}G[a+508>>1]=J[a+508>>1]&63488|122;G[a+510>>1]=J[a+510>>1]&63488|122;b=H[a+528>>2]}jb(c,H[b+40>>2],65);Ha=f+96|0}function ib(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;k=Ha-16|0;Ha=k;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{if(a>>>0<=244){e=H[12605];g=a>>>0<11?16:a+11&504;a=g>>>3|0;b=e>>>a|0;if(b&3){c=a+((b^-1)&1)|0;b=c<<3;a=b+50460|0;b=H[b+50468>>2];d=H[b+8>>2];k:{if((a|0)==(d|0)){m=50420,n=ky(-2,c)&e,H[m>>2]=n;break k}H[d+12>>2]=a;H[a+8>>2]=d}a=b+8|0;c=c<<3;H[b+4>>2]=c|3;b=b+c|0;H[b+4>>2]=H[b+4>>2]|1;break a}i=H[12607];if(i>>>0>=g>>>0){break j}if(b){c=2<<a;a=fy((0-c|c)&b<<a);c=a<<3;b=c+50460|0;c=H[c+50468>>2];d=H[c+8>>2];l:{if((b|0)==(d|0)){e=ky(-2,a)&e;H[12605]=e;break l}H[d+12>>2]=b;H[b+8>>2]=d}H[c+4>>2]=g|3;h=c+g|0;a=a<<3;f=a-g|0;H[h+4>>2]=f|1;H[a+c>>2]=f;if(i){a=(i&-8)+50460|0;d=H[12610];b=1<<(i>>>3);m:{if(!(b&e)){H[12605]=b|e;b=a;break m}b=H[a+8>>2]}H[a+8>>2]=d;H[b+12>>2]=d;H[d+12>>2]=a;H[d+8>>2]=b}a=c+8|0;H[12610]=h;H[12607]=f;break a}l=H[12606];if(!l){break j}c=H[(fy(l)<<2)+50724>>2];f=(H[c+4>>2]&-8)-g|0;b=c;while(1){n:{a=H[b+16>>2];if(!a){a=H[b+20>>2];if(!a){break n}}d=(H[a+4>>2]&-8)-g|0;b=d>>>0<f>>>0;f=b?d:f;c=b?a:c;b=a;continue}break}j=H[c+24>>2];a=H[c+12>>2];if((c|0)!=(a|0)){b=H[c+8>>2];H[b+12>>2]=a;H[a+8>>2]=b;break b}b=H[c+20>>2];if(b){d=c+20|0}else{b=H[c+16>>2];if(!b){break i}d=c+16|0}while(1){h=d;a=b;d=a+20|0;b=H[a+20>>2];if(b){continue}d=a+16|0;b=H[a+16>>2];if(b){continue}break}H[h>>2]=0;break b}g=-1;if(a>>>0>4294967231){break j}b=a+11|0;g=b&-8;h=H[12606];if(!h){break j}i=31;f=0-g|0;if(a>>>0<=16777204){a=Q(b>>>8|0);i=((g>>>38-a&1)-(a<<1)|0)+62|0}b=H[(i<<2)+50724>>2];o:{p:{q:{if(!b){a=0;break q}a=0;c=g<<((i|0)!=31?25-(i>>>1|0)|0:0);while(1){r:{e=(H[b+4>>2]&-8)-g|0;if(e>>>0>=f>>>0){break r}d=b;f=e;if(f){break r}f=0;a=b;break p}e=H[b+20>>2];b=H[((c>>>29&4)+b|0)+16>>2];a=e?(e|0)==(b|0)?a:e:a;c=c<<1;if(b){continue}break}}if(!(a|d)){d=0;a=2<<i;a=(0-a|a)&h;if(!a){break j}a=H[(fy(a)<<2)+50724>>2]}if(!a){break o}}while(1){c=(H[a+4>>2]&-8)-g|0;b=c>>>0<f>>>0;f=b?c:f;d=b?a:d;b=H[a+16>>2];if(b){a=b}else{a=H[a+20>>2]}if(a){continue}break}}if(!d|H[12607]-g>>>0<=f>>>0){break j}i=H[d+24>>2];a=H[d+12>>2];if((d|0)!=(a|0)){b=H[d+8>>2];H[b+12>>2]=a;H[a+8>>2]=b;break c}b=H[d+20>>2];if(b){c=d+20|0}else{b=H[d+16>>2];if(!b){break h}c=d+16|0}while(1){e=c;a=b;c=a+20|0;b=H[a+20>>2];if(b){continue}c=a+16|0;b=H[a+16>>2];if(b){continue}break}H[e>>2]=0;break c}d=H[12607];if(d>>>0>=g>>>0){a=H[12610];b=d-g|0;s:{if(b>>>0>=16){c=a+g|0;H[c+4>>2]=b|1;H[a+d>>2]=b;H[a+4>>2]=g|3;break s}H[a+4>>2]=d|3;b=a+d|0;H[b+4>>2]=H[b+4>>2]|1;c=0;b=0}H[12607]=b;H[12610]=c;a=a+8|0;break a}c=H[12608];if(c>>>0>g>>>0){b=c-g|0;H[12608]=b;a=H[12611];c=a+g|0;H[12611]=c;H[c+4>>2]=b|1;H[a+4>>2]=g|3;a=a+8|0;break a}a=0;f=g+47|0;if(H[12723]){b=H[12725]}else{H[12726]=-1;H[12727]=-1;H[12724]=4096;H[12725]=4096;H[12723]=k+12&-16^1431655768;H[12728]=0;H[12716]=0;b=4096}e=f+b|0;h=0-b|0;b=e&h;if(b>>>0<=g>>>0){break a}i=H[12715];if(i){j=H[12713];d=j+b|0;if(d>>>0<=j>>>0|d>>>0>i>>>0){break a}}t:{if(!(I[50864]&4)){u:{v:{w:{x:{d=H[12611];if(d){a=50868;while(1){i=H[a>>2];if(i>>>0<=d>>>0&d>>>0<i+H[a+4>>2]>>>0){break x}a=H[a+8>>2];if(a){continue}break}}c=Be(0);if((c|0)==-1){break u}e=b;a=H[12724];d=a-1|0;if(d&c){e=(b-c|0)+(c+d&0-a)|0}if(e>>>0<=g>>>0){break u}d=H[12715];if(d){h=H[12713];a=h+e|0;if(a>>>0<=h>>>0|a>>>0>d>>>0){break u}}a=Be(e);if((c|0)!=(a|0)){break w}break t}e=h&e-c;c=Be(e);if((c|0)==(H[a>>2]+H[a+4>>2]|0)){break v}a=c}if((a|0)==-1){break u}if(g+48>>>0<=e>>>0){c=a;break t}c=H[12725];c=c+(f-e|0)&0-c;if((Be(c)|0)==-1){break u}e=c+e|0;c=a;break t}if((c|0)!=-1){break t}}H[12716]=H[12716]|4}c=Be(b);a=Be(0);if((c|0)==-1|(a|0)==-1|a>>>0<=c>>>0){break e}e=a-c|0;if(e>>>0<=g+40>>>0){break e}}a=H[12713]+e|0;H[12713]=a;if(a>>>0>K[12714]){H[12714]=a}y:{f=H[12611];if(f){a=50868;while(1){b=H[a>>2];d=H[a+4>>2];if((b+d|0)==(c|0)){break y}a=H[a+8>>2];if(a){continue}break}break g}a=H[12609];if(!(a>>>0<=c>>>0?a:0)){H[12609]=c}a=0;H[12718]=e;H[12717]=c;H[12613]=-1;H[12614]=H[12723];H[12720]=0;while(1){b=a<<3;d=b+50460|0;H[b+50468>>2]=d;H[b+50472>>2]=d;a=a+1|0;if((a|0)!=32){continue}break}a=e-40|0;b=-8-c&7;d=a-b|0;H[12608]=d;b=b+c|0;H[12611]=b;H[b+4>>2]=d|1;H[(a+c|0)+4>>2]=40;H[12612]=H[12727];break f}if(H[a+12>>2]&8|(c>>>0<=f>>>0|b>>>0>f>>>0)){break g}H[a+4>>2]=d+e;a=-8-f&7;b=a+f|0;H[12611]=b;c=H[12608]+e|0;a=c-a|0;H[12608]=a;H[b+4>>2]=a|1;H[(c+f|0)+4>>2]=40;H[12612]=H[12727];break f}a=0;break b}a=0;break c}if(K[12609]>c>>>0){H[12609]=c}d=c+e|0;a=50868;z:{while(1){b=H[a>>2];if((b|0)!=(d|0)){a=H[a+8>>2];if(a){continue}break z}break}if(!(I[a+12|0]&8)){break d}}a=50868;while(1){A:{b=H[a>>2];if(b>>>0<=f>>>0){d=b+H[a+4>>2]|0;if(d>>>0>f>>>0){break A}}a=H[a+8>>2];continue}break}a=e-40|0;b=-8-c&7;h=a-b|0;H[12608]=h;b=b+c|0;H[12611]=b;H[b+4>>2]=h|1;H[(a+c|0)+4>>2]=40;H[12612]=H[12727];a=(d+(39-d&7)|0)-47|0;b=a>>>0<f+16>>>0?f:a;H[b+4>>2]=27;a=H[12720];H[b+16>>2]=H[12719];H[b+20>>2]=a;a=H[12718];H[b+8>>2]=H[12717];H[b+12>>2]=a;H[12719]=b+8;H[12718]=e;H[12717]=c;H[12720]=0;a=b+24|0;while(1){H[a+4>>2]=7;c=a+8|0;a=a+4|0;if(c>>>0<d>>>0){continue}break}if((b|0)==(f|0)){break f}H[b+4>>2]=H[b+4>>2]&-2;c=b-f|0;H[f+4>>2]=c|1;H[b>>2]=c;B:{if(c>>>0<=255){a=(c&-8)+50460|0;b=H[12605];c=1<<(c>>>3);C:{if(!(b&c)){H[12605]=b|c;b=a;break C}b=H[a+8>>2]}H[a+8>>2]=f;H[b+12>>2]=f;d=8;c=12;break B}a=31;if(c>>>0<=16777215){a=Q(c>>>8|0);a=((c>>>38-a&1)-(a<<1)|0)+62|0}H[f+28>>2]=a;H[f+16>>2]=0;H[f+20>>2]=0;b=(a<<2)+50724|0;D:{d=H[12606];e=1<<a;E:{if(!(d&e)){H[12606]=d|e;H[b>>2]=f;break E}a=c<<((a|0)!=31?25-(a>>>1|0)|0:0);d=H[b>>2];while(1){b=d;if((c|0)==(H[b+4>>2]&-8)){break D}d=a>>>29|0;a=a<<1;e=(d&4)+b|0;d=H[e+16>>2];if(d){continue}break}H[e+16>>2]=f}H[f+24>>2]=b;b=f;a=b;d=12;c=8;break B}a=H[b+8>>2];H[a+12>>2]=f;H[b+8>>2]=f;H[f+8>>2]=a;a=0;d=12;c=24}H[d+f>>2]=b;H[c+f>>2]=a}a=H[12608];if(a>>>0<=g>>>0){break e}b=a-g|0;H[12608]=b;a=H[12611];c=a+g|0;H[12611]=c;H[c+4>>2]=b|1;H[a+4>>2]=g|3;a=a+8|0;break a}H[12604]=48;a=0;break a}H[a>>2]=c;H[a+4>>2]=H[a+4>>2]+e;i=(-8-c&7)+c|0;H[i+4>>2]=g|3;e=b+(-8-b&7)|0;f=g+i|0;h=e-f|0;F:{if(H[12611]==(e|0)){H[12611]=f;a=H[12608]+h|0;H[12608]=a;H[f+4>>2]=a|1;break F}if(H[12610]==(e|0)){H[12610]=f;a=H[12607]+h|0;H[12607]=a;H[f+4>>2]=a|1;H[a+f>>2]=a;break F}a=H[e+4>>2];if((a&3)==1){j=a&-8;c=H[e+12>>2];G:{if(a>>>0<=255){b=H[e+8>>2];if((b|0)==(c|0)){m=50420,n=H[12605]&ky(-2,a>>>3|0),H[m>>2]=n;break G}H[b+12>>2]=c;H[c+8>>2]=b;break G}g=H[e+24>>2];H:{if((c|0)!=(e|0)){a=H[e+8>>2];H[a+12>>2]=c;H[c+8>>2]=a;break H}I:{a=H[e+20>>2];if(a){b=e+20|0}else{a=H[e+16>>2];if(!a){break I}b=e+16|0}while(1){d=b;c=a;b=a+20|0;a=H[a+20>>2];if(a){continue}b=c+16|0;a=H[c+16>>2];if(a){continue}break}H[d>>2]=0;break H}c=0}if(!g){break G}a=H[e+28>>2];b=(a<<2)+50724|0;J:{if(H[b>>2]==(e|0)){H[b>>2]=c;if(c){break J}m=50424,n=H[12606]&ky(-2,a),H[m>>2]=n;break G}K:{if(H[g+16>>2]==(e|0)){H[g+16>>2]=c;break K}H[g+20>>2]=c}if(!c){break G}}H[c+24>>2]=g;a=H[e+16>>2];if(a){H[c+16>>2]=a;H[a+24>>2]=c}a=H[e+20>>2];if(!a){break G}H[c+20>>2]=a;H[a+24>>2]=c}h=h+j|0;e=e+j|0;a=H[e+4>>2]}H[e+4>>2]=a&-2;H[f+4>>2]=h|1;H[f+h>>2]=h;if(h>>>0<=255){a=(h&-8)+50460|0;b=H[12605];c=1<<(h>>>3);L:{if(!(b&c)){H[12605]=b|c;b=a;break L}b=H[a+8>>2]}H[a+8>>2]=f;H[b+12>>2]=f;H[f+12>>2]=a;H[f+8>>2]=b;break F}c=31;if(h>>>0<=16777215){a=Q(h>>>8|0);c=((h>>>38-a&1)-(a<<1)|0)+62|0}H[f+28>>2]=c;H[f+16>>2]=0;H[f+20>>2]=0;a=(c<<2)+50724|0;M:{b=H[12606];d=1<<c;N:{if(!(b&d)){H[12606]=b|d;H[a>>2]=f;break N}c=h<<((c|0)!=31?25-(c>>>1|0)|0:0);b=H[a>>2];while(1){a=b;if((H[a+4>>2]&-8)==(h|0)){break M}b=c>>>29|0;c=c<<1;d=(b&4)+a|0;b=H[d+16>>2];if(b){continue}break}H[d+16>>2]=f}H[f+24>>2]=a;H[f+12>>2]=f;H[f+8>>2]=f;break F}b=H[a+8>>2];H[b+12>>2]=f;H[a+8>>2]=f;H[f+24>>2]=0;H[f+12>>2]=a;H[f+8>>2]=b}a=i+8|0;break a}O:{if(!i){break O}b=H[d+28>>2];c=(b<<2)+50724|0;P:{if(H[c>>2]==(d|0)){H[c>>2]=a;if(a){break P}h=ky(-2,b)&h;H[12606]=h;break O}Q:{if(H[i+16>>2]==(d|0)){H[i+16>>2]=a;break Q}H[i+20>>2]=a}if(!a){break O}}H[a+24>>2]=i;b=H[d+16>>2];if(b){H[a+16>>2]=b;H[b+24>>2]=a}b=H[d+20>>2];if(!b){break O}H[a+20>>2]=b;H[b+24>>2]=a}R:{if(f>>>0<=15){a=f+g|0;H[d+4>>2]=a|3;a=a+d|0;H[a+4>>2]=H[a+4>>2]|1;break R}H[d+4>>2]=g|3;e=d+g|0;H[e+4>>2]=f|1;H[f+e>>2]=f;if(f>>>0<=255){a=(f&-8)+50460|0;b=H[12605];c=1<<(f>>>3);S:{if(!(b&c)){H[12605]=b|c;b=a;break S}b=H[a+8>>2]}H[a+8>>2]=e;H[b+12>>2]=e;H[e+12>>2]=a;H[e+8>>2]=b;break R}a=31;if(f>>>0<=16777215){a=Q(f>>>8|0);a=((f>>>38-a&1)-(a<<1)|0)+62|0}H[e+28>>2]=a;H[e+16>>2]=0;H[e+20>>2]=0;b=(a<<2)+50724|0;T:{c=1<<a;U:{if(!(c&h)){H[12606]=c|h;H[b>>2]=e;H[e+24>>2]=b;break U}a=f<<((a|0)!=31?25-(a>>>1|0)|0:0);b=H[b>>2];while(1){c=b;if((H[b+4>>2]&-8)==(f|0)){break T}h=a>>>29|0;a=a<<1;h=b+(h&4)|0;b=H[h+16>>2];if(b){continue}break}H[h+16>>2]=e;H[e+24>>2]=c}H[e+12>>2]=e;H[e+8>>2]=e;break R}a=H[c+8>>2];H[a+12>>2]=e;H[c+8>>2]=e;H[e+24>>2]=0;H[e+12>>2]=c;H[e+8>>2]=a}a=d+8|0;break a}V:{if(!j){break V}b=H[c+28>>2];d=(b<<2)+50724|0;W:{if(H[d>>2]==(c|0)){H[d>>2]=a;if(a){break W}m=50424,n=ky(-2,b)&l,H[m>>2]=n;break V}X:{if(H[j+16>>2]==(c|0)){H[j+16>>2]=a;break X}H[j+20>>2]=a}if(!a){break V}}H[a+24>>2]=j;b=H[c+16>>2];if(b){H[a+16>>2]=b;H[b+24>>2]=a}b=H[c+20>>2];if(!b){break V}H[a+20>>2]=b;H[b+24>>2]=a}Y:{if(f>>>0<=15){a=f+g|0;H[c+4>>2]=a|3;a=a+c|0;H[a+4>>2]=H[a+4>>2]|1;break Y}H[c+4>>2]=g|3;h=c+g|0;H[h+4>>2]=f|1;H[f+h>>2]=f;if(i){a=(i&-8)+50460|0;d=H[12610];b=1<<(i>>>3);Z:{if(!(b&e)){H[12605]=b|e;b=a;break Z}b=H[a+8>>2]}H[a+8>>2]=d;H[b+12>>2]=d;H[d+12>>2]=a;H[d+8>>2]=b}H[12610]=h;H[12607]=f}a=c+8|0}Ha=k+16|0;return a|0}function Br(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=O(0),g=0,h=0,i=0,j=0,k=0,l=0,m=O(0),n=0,o=O(0),p=O(0),q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,C=0,D=0,E=0,J=0,K=0,M=0,Q=0;g=Ha-80|0;Ha=g;a:{if(!(F[58752]&1)|a){break a}j=H[14689];if(!j|H[j+40>>2]!=3){break a}H[j+32>>2]=0;H[j+40>>2]=4;F[j+28|0]=1;t=qb(b);a=H[14704];f=L[a+56>>2];m=L[a+60>>2];H[14705]=0;b:{c:{d:{e:{f:{if(I[58840]){if(t){break f}a=6}else{a=7}H[14705]=a;Ng(j,a,0);Wa(20255,0);break e}a=Xa(16);H[a>>2]=0;H[a+4>>2]=10;H[a+8>>2]=0;H[a+12>>2]=0;H[g+76>>2]=H[14709];H[g+72>>2]=a;H[g+68>>2]=0;H[g+64>>2]=H[14708];H[g+60>>2]=0;b=Rl(g+60|0);c=La[H[H[b>>2]+12>>2]](b,t)|0;d=H[b+16>>2];if(d){Va(d)}La[H[H[b>>2]+4>>2]](b);if(H[a+12>>2]?c:1){H[14705]=5;Ng(j,5,0);break d}H[14705]=0;f=O(O(hm(a)-O(m-f))/L[11464]);g:{if(O(P(f))<O(2147483648)){c=~~f;break g}c=-2147483648}if(!Ng(j,0,c+1|0)){H[14705]=2;break d}if(!H[a+12>>2]|H[14705]==2){break d}d=H[14704];H[d+76>>2]=j;H[d+72>>2]=34;H[d+68>>2]=35;H[d+64>>2]=36;H[d>>2]=a;h:{if(!H[a+12>>2]){break h}f=hm(a);L[d+112>>2]=f;if(f==O(0)){break h}f=O(f/L[d+8>>2]);i:{if(O(P(f))<O(2147483648)){c=~~f;break i}c=-2147483648}H[d+116>>2]=c+1;if((c|0)<=0){break h}j:{if(H[12878]){break j}b=I[d+24|0];k=H[d+4>>2];a=Xa(44);H[a+4>>2]=0;H[a+8>>2]=0;H[a>>2]=3260;H[a+12>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;H[a+24>>2]=0;H[a+28>>2]=0;H[a+32>>2]=0;M=a,Q=Xa(312),H[M+36>>2]=Q;c=0;while(1){if((c|0)!=78){H[H[a+36>>2]+(c<<2)>>2]=0;c=c+1|0;continue}break}H[a+40>>2]=0;H[12878]=a;if(!(b&1)){b=0;k:while(1){if((b|0)==2){break j}e=(H[k+72>>2]+(b<<4)|0)+20|0;a=0;c=0;while(1){if((c|0)!=4){ii(H[12878],H[e+(c<<2)>>2]);c=c+1|0;continue}break}while(1){c=0;if((a|0)==5){b=b+1|0;continue k}else{while(1){if((c|0)!=3){ii(H[12878],H[(((H[k+72>>2]+N(b,60)|0)+N(a,12)|0)+(c<<2)|0)+52>>2]);c=c+1|0;continue}break}a=a+1|0;continue}}}}e=G[H[k+104>>2]+12>>1];a=0;while(1){c=a<<16>>16;if((c|0)>=(e|0)){break j}b=0;l:{if((c|0)<0){break l}n=H[k+104>>2];if((c|0)>=H[n+12>>2]){break l}b=H[H[n>>2]+(c<<2)>>2]}ii(H[12878],b);a=a+1|0;continue}}a=H[d+12>>2];m:{if(!a|H[d+20>>2]==5){break m}a=mf(a,11248);H[d+96>>2]=a;if(!a){H[g>>2]=H[d+12>>2];Wa(22923,g);break m}n:{switch(H[d+20>>2]-2|0){case 1:b=H[d+116>>2];c=H[H[d+4>>2]+56>>2];$a(21379,a);H[g+32>>2]=c;eb(a,21449,g+32|0);H[g+16>>2]=b;eb(a,21485,g+16|0);break m;case 0:break n;default:break m}}H[g+48>>2]=H[d+116>>2];eb(a,30306,g+48|0)}H[d+52>>2]=0;z=d+288|0;A=d+280|0;C=d+272|0;k=d+324|0;n=d+308|0;u=d+296|0;D=d+152|0;r=d+120|0;x=H[H[d>>2]+12>>2];E=x-1|0;a=0;o:while(1){if((a|0)<(x|0)){c=0;p:{if((a|0)<0){break p}b=H[d>>2];if(H[b+12>>2]<=(a|0)){break p}c=H[H[b>>2]+(a<<2)>>2]}b=H[d+64>>2];if(b){La[b|0](H[d+76>>2],H[c+8>>2],a,H[d+108>>2]);a=H[d+52>>2]}e=H[c+44>>2];f=L[e+40>>2];m=L[d+56>>2];h=H[c+48>>2];b=H[d+100>>2];c=H[b>>2];if(c){L[b+4>>2]=L[c+40>>2]+L[b+4>>2]}La[H[H[e>>2]+40>>2]](e,c?b+7128|0:H[14718]);H[b+3572>>2]=e;H[b+16>>2]=e;H[b>>2]=e;H[H[d+104>>2]+8>>2]=h;b=H[d+108>>2];o=L[d+8>>2];p=O(L[d+56>>2]/o);q:{if(O(P(p))<O(2147483648)){c=~~p;break q}c=-2147483648}if((b|0)<(c|0)){H[d+108>>2]=c;b=c}p=O(m+f);m=O(o*O(b|0));L[d+60>>2]=m;c=1;J=(a|0)==(E|0);while(1){r:{s:{if(!(m<=p)){break s}b=0;if(!(c&1)){break s}t:while(1){c=0;if((b|0)==2){a=H[d+304>>2];if(!a){break r}La[H[H[a>>2]+12>>2]](a);break r}while(1){if((c|0)==4){a=b<<2;c=H[a+C>>2];if(c){La[H[H[c>>2]+12>>2]](c)}c=H[a+A>>2];if(c){La[H[H[c>>2]+12>>2]](c)}c=H[a+z>>2];if(c){La[H[H[c>>2]+12>>2]](c)}a=H[a+u>>2];if(a){La[H[H[a>>2]+12>>2]](a)}b=b+1|0;continue t}a=H[((b<<4)+r|0)+(c<<2)>>2];if(a){La[H[H[a>>2]+12>>2]](a)}c=c+1|0;continue}}}L[d+56>>2]=p;a=H[d+52>>2]+1|0;H[d+52>>2]=a;continue o}a=0;while(1){if(H[d+320>>2]>(a|0)){b=H[H[n>>2]+(a<<2)>>2];if(b){La[H[H[b>>2]+12>>2]](b)}a=a+1|0;continue}break}while(1){if(H[d+336>>2]>(c|0)){a=H[H[k>>2]+(c<<2)>>2];if(a){La[H[H[a>>2]+12>>2]](a)}c=c+1|0;continue}break}m=O(L[d+8>>2]*O(H[d+108>>2]+1|0));o=O(L[d+60>>2]-L[d+56>>2]);u:{a=H[d+348>>2];if(!a){break u}b=H[d+104>>2];c=0;e=H[14657];while(1){h=H[e+4>>2];if(h){i=H[h+12>>2]}else{i=0}h=c<<16>>16;if((i|0)>(h|0)){H[a+(h<<2)>>2]=0;c=c+1|0;continue}break}c=0;if(!H[b+8>>2]){break u}h=m>p&J;while(1){if((c|0)==8){break u}e=H[H[b+8>>2]+(c<<2)>>2];v:{if(!e){break v}e=H[e+20>>2];if(!e){break v}La[H[H[e>>2]+16>>2]](e,o,a,h)}c=c+1|0;continue}}c=0;while(1){if((c|0)!=18){a=c<<2;f=L[a+H[d+348>>2]>>2];w:{if(L[a+H[d+344>>2]>>2]==O(0)&f==O(0)){break w}x:{switch(c|0){case 0:Cd(52560,f,f,k);break w;case 1:Cd(52904,f,O(f*O(.5999999642372131)),k);break w;case 2:Cd(52916,f,O(f*O(.5999999642372131)),k);break w;case 3:Cd(52916,O(0),f,k);break w;case 4:Cd(53752,f,O(-f),k);break w;case 5:Cd(52560,f,f,n);break w;case 6:Cd(52904,f,O(f*O(.5999999642372131)),n);break w;case 7:Cd(52916,f,O(f*O(.5999999642372131)),n);break w;case 8:a=g+60|0;Ab(a,52916,f,1);b=H[r>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 9:a=g+60|0;Ab(a,52904,f,1);b=H[r>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 10:a=g+60|0;Ab(a,52560,f,1);b=H[r>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 11:a=g+60|0;Ab(a,52916,f,1);b=H[d+136>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 12:a=g+60|0;Ab(a,52548,f,1);b=H[d+136>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 13:a=g+60|0;Ab(a,58720,f,1);b=H[d+136>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 14:a=g+60|0;Ab(a,53752,f,1);b=H[u>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 15:a=g+60|0;Ab(a,52560,f,1);b=H[u>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 16:a=g+60|0;Ab(a,53752,f,1);b=H[d+300>>2];La[H[H[b>>2]+20>>2]](b,a);break w;case 17:break x;default:break w}}a=g+60|0;Ab(a,52560,f,1);b=H[d+300>>2];La[H[H[b>>2]+20>>2]](b,a)}c=c+1|0;continue}break}f=o;a=H[d+100>>2];o=L[a+4>>2];f=O(f+o);L[a+8>>2]=f;b=H[a>>2];c=a+7128|0;La[H[H[b>>2]+60>>2]](b,c,O(f-o),1);_n(a+16|0,c);_n(a+3572|0,a+7240|0);y:{b=H[12878];if(!b){break y}h=I[d+24|0];y=H[d+348>>2];K=H[d+344>>2];f=L[d+60>>2];L[b+32>>2]=L[d+8>>2];L[b+28>>2]=f;e=0;G[g+60>>1]=0;z:while(1){c=0;if((e|0)==2){e=G[d+320>>1];a=0;while(1){c=a<<16>>16;if((c|0)>=(e|0)){e=G[d+336>>1];a=0;while(1){c=a<<16>>16;if((c|0)>=(e|0)){if(!y){break y}h=0;a=H[14657];q=18;A:{while(1){c=H[a+4>>2];if(c){i=H[c+12>>2]}else{i=0}e=q<<16>>16;if((i|0)<=(e|0)){h=h<<16>>16;c=h;a=H[b+16>>2];i=H[b+20>>2]-a>>2;if(c>>>0>=i>>>0){break y}while(1)if((c|0)==(i|0)){a=(h<<2)+a|0;if((a|0)==H[b+20>>2]){break y}H[b+20>>2]=a;break y}else{q=c<<2;e=H[q+a>>2];if(e){La[H[H[e>>2]+4>>2]](e);a=H[b+16>>2]}H[a+q>>2]=0;c=c+1|0;a=H[b+16>>2];continue}}B:{i=e<<2;f=L[i+y>>2];if(!(f==O(0)&L[i+K>>2]==O(0))){a=(e|0)<0|(e|0)>=H[c+12>>2]?0:H[i+H[c>>2]>>2];i=Xa(16);F[i+8|0]=0;H[i>>2]=30332;he(i+4|0,a,4);L[i+12>>2]=f;w=h<<16>>16;c=H[b+20>>2];a=H[b+16>>2];v=c-a|0;l=v>>2;if((w|0)>=(l|0)){e=w+1|0;C:{if(e>>>0>l>>>0){l=e-l|0;s=H[b+24>>2];if(l>>>0<=s-c>>2>>>0){a=(l<<2)+c|0;while(1){if((a|0)!=(c|0)){H[c>>2]=0;c=c+4|0;continue}break}H[b+20>>2]=a;break C}if(e>>>0>=1073741824){break B}a=s-a|0;c=a>>1;a=a>>>0>=2147483644?1073741823:c>>>0>e>>>0?c:e;if(a>>>0>=1073741824){break A}s=a<<2;l=Xa(s);e=l+(e<<2)|0;a=l+v|0;c=a;while(1){if((c|0)!=(e|0)){H[c>>2]=0;c=c+4|0;continue}break}v=H[b+16>>2];c=H[b+20>>2];while(1){if((c|0)!=(v|0)){a=a-4|0;c=c-4|0;H[a>>2]=H[c>>2];continue}break}H[b+20>>2]=e;c=H[b+16>>2];H[b+16>>2]=a;H[b+24>>2]=l+s;if(!c){break C}Va(c);break C}if(e>>>0>=l>>>0){break C}H[b+20>>2]=(e<<2)+a}a=H[b+16>>2]}h=h+1|0;c=w<<2;e=H[c+a>>2];if(e){La[H[H[e>>2]+4>>2]](e);H[c+H[b+16>>2]>>2]=0;a=H[b+16>>2]}H[a+c>>2]=i;a=H[14657]}q=q+1|0;continue}break}dn();B()}Rm();B()}else{cf(b,(c|0)<0|(c|0)>=H[d+336>>2]?0:H[H[k>>2]+(c<<2)>>2],h&1,g+60|0);a=a+1|0;continue}}}else{cf(b,(c|0)<0|(c|0)>=H[d+320>>2]?0:H[H[n>>2]+(c<<2)>>2],h&1,g+60|0);a=a+1|0;continue}}}while(1){a=0;if((c|0)!=4){cf(b,H[((e<<4)+r|0)+(c<<2)>>2],h&1,g+60|0);c=c+1|0;continue}break}while(1){c=0;if((a|0)==5){cf(b,H[(e<<2)+u>>2],h&1,g+60|0);e=e+1|0;continue z}else{while(1){if((c|0)!=3){cf(b,H[((N(e,60)+D|0)+N(a,12)|0)+(c<<2)>>2],h&1,g+60|0);c=c+1|0;continue}break}a=a+1|0;continue}}}}a=H[d+68>>2];if(a){c=La[a|0](H[d+76>>2],H[12878])|0}else{c=1}L[d+60>>2]=m;H[d+108>>2]=H[d+108>>2]+1;Ka=H[d+344>>2];H[d+344>>2]=H[d+348>>2];H[d+348>>2]=Ka;continue}}break}a=H[d+96>>2];if(a){if(H[d+20>>2]==3){$a(21360,a);$a(21371,a);a=H[d+96>>2]}rf(a);H[d+96>>2]=0}c=H[12878];if(!c){break h}La[H[H[c>>2]+4>>2]](c);H[12878]=0}L[14724]=L[H[14704]+60>>2];H[14725]=H[14705];tj(j,c);a=H[14711];if(!a){break e}ce(a)}H[j+40>>2]=3;if(!t){break b}break c}H[j+40>>2]=3}Va(t)}c=!H[j+32>>2]}Ha=g+80|0;return c|0}function Ie(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;i=Ha-48|0;Ha=i;H[i+44>>2]=d;r=H[a+340>>2];a:{if(H[a+144>>2]==(c|0)){n=a+272|0;s=a+276|0;break a}n=H[a+284>>2];s=n+4|0}H[n>>2]=d;t=r+80|0;m=a+400|0;b:{c:{d:{while(1){d=H[i+44>>2];H[i+40>>2]=d;j=La[H[c+4>>2]](c,d,e,i+40|0)|0;d=H[i+40>>2];H[s>>2]=d;h=17;e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{switch(j+5|0){case 2:if(g){H[f>>2]=H[i+44>>2];h=0;break b}H[s>>2]=e;d=H[a+60>>2];p:{if(d){F[i+12|0]=10;La[d|0](H[a+4>>2],i+12|0,1);break p}if(!H[a+80>>2]){break p}Rb(a,c,H[i+44>>2],e)}if(!b){break c}if(H[a+296>>2]==(b|0)){break n}break d;case 1:if(g){H[f>>2]=H[i+44>>2];h=0;break b}if((b|0)<=0){break c}if(H[a+296>>2]!=(b|0)){break d}H[f>>2]=H[i+44>>2];h=0;break b;case 4:if(!g){h=5;break b}H[f>>2]=H[i+44>>2];h=0;break b;case 3:if(!g){h=6;break b}H[f>>2]=H[i+44>>2];h=0;break b;case 14:h=H[c+64>>2];d=La[H[c+44>>2]](c,h+H[i+44>>2]|0,d-h|0)|0;F[i+36|0]=d;if(d&255){d=H[a+60>>2];if(d){La[d|0](H[a+4>>2],i+36|0,1);break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],H[i+40>>2]);break e}h=1;d=H[c+64>>2];d=Tb(t,c,d+H[i+44>>2]|0,H[i+40>>2]-d|0);if(!d){break b}k=Fc(r,d,0);H[r+92>>2]=H[r+96>>2];q:{if(!(I[r+130|0]?0:I[r+129|0])){if(!k){h=11;break b}if(I[k+34|0]){break q}h=24;break b}if(k){break q}h=H[a+120>>2];if(h){La[h|0](H[a+4>>2],d,0);break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],H[i+40>>2]);break e}if(I[k+32|0]){h=12;break b}if(H[k+28>>2]){h=15;break b}if(H[k+4>>2]){if(!I[a+292|0]){d=H[a+120>>2];if(d){La[d|0](H[a+4>>2],H[k>>2],0);break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],H[i+40>>2]);break e}d=H[a+288>>2];if(d){H[a+288>>2]=H[d+8>>2];break f}d=La[H[a+12>>2]](24)|0;if(d){break f}break g}r:{if(H[a+112>>2]){F[k+32|0]=1;s:{o=H[a+340>>2];l=H[o+136>>2];if(!l){break s}d=H[a+412>>2];if((d|0)==H[a+408>>2]){if(!Fb(m)){break r}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=61;d=0;j=H[H[o+136>>2]+20>>2]-(I[a+456|0]!=0)|0;p=(j|0)>0?j:0;while(1){if((d|0)==(p|0)){break s}j=H[a+412>>2];if((j|0)==H[a+408>>2]){if(!Fb(m)){break r}j=H[a+412>>2]}q=I[H[H[o+136>>2]+16>>2]+d|0];H[a+412>>2]=j+1;F[j|0]=q;d=d+1|0;continue}}j=!l;d=H[o+60>>2];H[i+12>>2]=d;H[i+16>>2]=d+(H[o+68>>2]<<2);t:while(1){p=Lg(i+12|0);if(p){if(!H[p+4>>2]){continue}if(!j){d=H[a+412>>2];if((d|0)==H[a+408>>2]){if(!Fb(m)){break r}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=12}l=H[p>>2];while(1){u:{j=H[a+408>>2];d=H[a+412>>2];q=I[l|0];if(!q){break u}if((d|0)==(j|0)){if(!Fb(m)){break r}q=I[l|0];d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=q;l=l+1|0;continue}break}if((d|0)==(j|0)){if(!Fb(m)){break r}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=61;j=0;d=H[H[p+4>>2]+20>>2]-(I[a+456|0]!=0)|0;q=(d|0)>0?d:0;d=0;while(1){if((d|0)==(q|0)){continue t}l=H[a+412>>2];if((l|0)==H[a+408>>2]){if(!Fb(m)){break r}l=H[a+412>>2]}u=I[H[H[p+4>>2]+16>>2]+d|0];H[a+412>>2]=l+1;F[l|0]=u;d=d+1|0;continue}}break}d=H[o>>2];H[i+12>>2]=d;H[i+16>>2]=d+(H[o+8>>2]<<2);v:while(1){d=Lg(i+12|0);if(d){if(!I[d+32|0]){continue}if(!j){j=H[a+412>>2];if((j|0)==H[a+408>>2]){if(!Fb(m)){break r}j=H[a+412>>2]}H[a+412>>2]=j+1;F[j|0]=12}d=H[d>>2];while(1){l=I[d|0];if(!l){j=0;continue v}j=H[a+412>>2];if((j|0)==H[a+408>>2]){if(!Fb(m)){break r}l=I[d|0];j=H[a+412>>2]}H[a+412>>2]=j+1;F[j|0]=l;d=d+1|0;continue}}break}d=H[a+412>>2];if((d|0)==H[a+408>>2]){if(!Fb(m)){break r}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=0;d=H[a+416>>2];F[k+32|0]=0;if(!d){break b}if(!(La[H[a+112>>2]](H[a+116>>2],d,H[k+20>>2],H[k+16>>2],H[k+24>>2])|0)){h=21;break b}H[a+412>>2]=H[a+416>>2];break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],H[i+40>>2]);break e}F[k+32|0]=0;break b;case 6:case 7:d=H[a+352>>2];w:{if(d){H[a+352>>2]=H[d>>2];break w}h=1;d=La[H[a+12>>2]](48)|0;if(!d){break b}j=La[H[a+12>>2]](32)|0;H[d+36>>2]=j;if(!j){La[H[a+20>>2]](d);break b}H[d+40>>2]=j+32}H[d+44>>2]=0;H[d>>2]=H[a+348>>2];H[a+348>>2]=d;H[d+16>>2]=0;H[d+20>>2]=0;h=H[i+44>>2]+H[c+64>>2]|0;H[d+4>>2]=h;v=d,w=La[H[c+28>>2]](c,h)|0,H[v+8>>2]=w;H[a+296>>2]=H[a+296>>2]+1;h=H[d+8>>2];k=H[d+4>>2];H[i+36>>2]=k;j=d+12|0;p=d+44|0;k=h+k|0;l=H[d+40>>2];h=H[d+36>>2];while(1){x:{H[i+12>>2]=h;La[H[c+56>>2]](c,i+36|0,k,i+12|0,l-1|0);l=H[i+12>>2];h=H[d+36>>2];o=l-h|0;if((k|0)==H[i+36>>2]){break x}l=H[d+40>>2]-h<<1;h=La[H[a+16>>2]](h,l)|0;if(!h){break g}H[d+36>>2]=h;l=h+l|0;H[d+40>>2]=l;h=h+o|0;continue}break};H[d+24>>2]=o;H[d+12>>2]=h;F[l|0]=0;h=dj(a,c,H[i+44>>2],j,p);if(h){break b}d=H[a+52>>2];if(d){La[d|0](H[a+4>>2],H[j>>2],H[a+376>>2]);break h}if(!H[a+80>>2]){break h}Rb(a,c,H[i+44>>2],H[i+40>>2]);break h;case 8:case 9:d=H[c+64>>2];h=H[i+44>>2];H[i+36>>2]=0;d=d+h|0;d=Tb(m,c,d,(La[H[c+28>>2]](c,d)|0)+d|0);H[i+12>>2]=d;if(!d){break g}H[a+416>>2]=H[a+412>>2];h=dj(a,c,H[i+44>>2],i+12|0,i+36|0);if(h){break b}H[a+416>>2]=H[a+412>>2];y:{z:{d=H[a+52>>2];A:{if(!d){d=H[a+56>>2];if(!d){break z}h=H[i+12>>2];break A}h=H[i+12>>2];La[d|0](H[a+4>>2],h,H[a+376>>2]);d=H[a+56>>2];if(!d){break y}if(!H[a+52>>2]){break A}H[n>>2]=H[s>>2];d=H[a+56>>2]}La[d|0](H[a+4>>2],h);break y}if(!H[a+80>>2]){break y}Rb(a,c,H[i+44>>2],H[i+40>>2])}Oc(m);d=H[i+36>>2];while(1){if(d){h=H[a+104>>2];if(h){La[h|0](H[a+4>>2],H[H[d>>2]>>2])}h=H[d+4>>2];H[d+4>>2]=H[a+360>>2];H[a+360>>2]=d;H[H[d>>2]+4>>2]=H[d+8>>2];d=h;continue}break};if(H[a+296>>2]){break e}h=Cg(a,H[i+40>>2],e,f);break b;case 10:if(H[a+296>>2]==(b|0)){break d}h=H[a+348>>2];H[a+348>>2]=H[h>>2];H[h>>2]=H[a+352>>2];H[a+352>>2]=h;d=H[i+44>>2]+(H[c+64>>2]<<1)|0;j=La[H[c+28>>2]](c,d)|0;B:{if((j|0)==H[h+8>>2]){if(!Nn(H[h+4>>2],d,j)){break B}}H[n>>2]=d;h=7;break b}H[a+296>>2]=H[a+296>>2]-1;d=H[a+56>>2];C:{if(d){D:{if(!I[a+232|0]){break D}j=H[h+16>>2];if(!j){break D}d=H[h+12>>2]+H[h+28>>2]|0;while(1){k=I[j|0];if(k){F[d|0]=k;d=d+1|0;j=j+1|0;continue}break}E:{if(!I[a+233|0]){break E}j=H[h+20>>2];if(!j){break E}F[d|0]=I[a+456|0];while(1){d=d+1|0;k=I[j|0];if(!k){break E}F[d|0]=k;j=j+1|0;continue}}F[d|0]=0;d=H[a+56>>2]}La[d|0](H[a+4>>2],H[h+12>>2]);break C}if(!H[a+80>>2]){break C}Rb(a,c,H[i+44>>2],H[i+40>>2])}while(1){d=H[h+44>>2];if(d){j=H[a+104>>2];if(j){La[j|0](H[a+4>>2],H[H[d>>2]>>2]);j=H[h+44>>2]}else{j=d}H[h+44>>2]=H[j+4>>2];H[d+4>>2]=H[a+360>>2];H[a+360>>2]=d;H[H[d>>2]+4>>2]=H[d+8>>2];continue}break};if(H[a+296>>2]){break e}h=Cg(a,H[i+40>>2],e,f);break b;case 15:d=La[H[c+40>>2]](c,H[i+44>>2])|0;if((d|0)<0){h=14;break b}h=H[a+60>>2];if(h){j=i+12|0;La[h|0](H[a+4>>2],j,Je(d,j));break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],H[i+40>>2]);break e;case 12:h=H[a+60>>2];if(h){F[i+12|0]=10;La[h|0](H[a+4>>2],i+12|0,1);break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],d);break e;case 13:h=H[a+72>>2];F:{if(h){La[h|0](H[a+4>>2]);break F}if(!H[a+80>>2]){break F}Rb(a,c,H[i+44>>2],d)}h=cj(a,c,i+40|0,e,f,g);if(h){break b}if(H[i+40>>2]){break e}H[a+264>>2]=43;h=0;break b;case 5:break i;case 18:break k;case 16:break l;case 11:break m;case 0:break o;case 17:break b;default:break j}}if(g){H[f>>2]=H[i+44>>2];h=0;break b}d=H[a+60>>2];G:{if(d){if(!I[c+68|0]){H[i+12>>2]=H[a+44>>2];La[H[c+56>>2]](c,i+44|0,e,i+12|0,H[a+48>>2]);c=H[a+44>>2];La[H[a+60>>2]](H[a+4>>2],c,H[i+12>>2]-c|0);break G}c=H[i+44>>2];La[d|0](H[a+4>>2],c,e-c|0);break G}if(!H[a+80>>2]){break G}Rb(a,c,H[i+44>>2],e)}if(!b){H[n>>2]=e;break c}if(H[a+296>>2]==(b|0)){break n}H[n>>2]=e;break d}H[f>>2]=e;h=0;break b}h=H[a+60>>2];if(h){if(!I[c+68|0]){while(1){H[i+12>>2]=H[a+44>>2];La[H[c+56>>2]](c,i+44|0,d,i+12|0,H[a+48>>2]);H[s>>2]=H[i+44>>2];d=H[a+44>>2];La[h|0](H[a+4>>2],d,H[i+12>>2]-d|0);d=H[i+44>>2];if((d|0)==H[i+40>>2]){break e}H[n>>2]=d;d=H[i+40>>2];continue}}j=H[i+44>>2];La[h|0](H[a+4>>2],j,d-j|0);break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],d);break e}if(!Dg(a,c,H[i+44>>2],d)){break g}break e}if(!Eg(a,c,H[i+44>>2],d)){break g}break e}if(!H[a+80>>2]){break e}Rb(a,c,H[i+44>>2],d);break e}H[n>>2]=d;h=4;break b}Oc(m);break e}h=1;break b}H[k+12>>2]=0;F[k+32|0]=1;H[d+8>>2]=H[a+284>>2];H[a+284>>2]=d;H[d+12>>2]=k;h=H[a+296>>2];F[d+20|0]=0;H[d+16>>2]=h;H[d>>2]=0;H[d+4>>2]=0;j=H[k+4>>2];l=j+H[k+8>>2]|0;h=Ie(a,H[a+296>>2],H[a+224>>2],j,l,i+12|0,0);if(h){break b}h=H[i+12>>2];if(!((h|0)==(l|0)|H[a+464>>2]!=3)){H[k+12>>2]=h-j;H[a+264>>2]=44;break e}F[k+32|0]=0;H[a+284>>2]=H[d+8>>2];H[d+8>>2]=H[a+288>>2];H[a+288>>2]=d}d=H[i+40>>2];H[i+44>>2]=d;H[n>>2]=d;h=35;H:{switch(H[a+464>>2]-2|0){case 1:break H;case 0:break b;default:continue}}break}H[f>>2]=d;h=0;break b}h=13;break b}h=3}Ha=i+48|0;return h}function gx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=Ha-16|0;Ha=j;a:{if((b|0)==(c|0)){h=-4;break a}b:{c:{d:{e:{f:{g:{h:{i:{j:{e=c-b|0;if(e&1){c=e&-2;if(!c){break j}c=b+c|0}k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{e=F[b|0];if(e){e=cb(e,F[b+1|0])}else{e=I[(I[b+1|0]+a|0)+72|0]}switch(e&255){case 3:break s;case 9:break t;case 10:break u;case 4:break w;case 5:break x;case 6:break y;case 7:break z;case 0:case 1:case 8:break A;case 2:break C;default:break B}}h=-1;e=b+2|0;if((e|0)==(c|0)){break j}D:{E:{F:{G:{H:{I:{J:{K:{L:{g=I[e|0];M:{if(!g){i=I[b+3|0];f=I[(i+a|0)+72|0];break M}i=F[b+3|0];f=cb(g<<24>>24,i)}f=f&255;switch(f-5|0){case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 13:case 14:case 15:case 16:case 18:break b;case 17:case 19:break E;case 12:break F;case 10:break G;case 11:break H;case 2:break I;case 1:break J;case 0:break K;default:break L}}if((f|0)!=29){break b}if(H[(i>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>i&1){break E}break b}if((c-e|0)>=2){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=4){break b}break c}f=b+4|0;if((f|0)==(c|0)){break a}N:{e=F[b+4|0];if(e){e=cb(e,F[b+5|0])}else{e=I[(I[b+5|0]+a|0)+72|0]}e=e&255;if((e|0)!=20){if((e|0)!=27){break N}h=qq(a,b+6|0,c,d);break a}e=b+6|0;if((c-e|0)<12){break a}c=b+18|0;b=0;while(1){if((b|0)==6){h=8;break d}h=0;if(I[e|0]|I[e+1|0]!=I[b+37308|0]){break e}e=e+2|0;b=b+1|0;continue}}H[d>>2]=f;h=0;break a}h=pq(a,b+4|0,c,d);break a}e=b+4|0;if((e|0)==(c|0)){break j}h=0;O:{f=I[e|0];P:{if(!f){i=I[b+5|0];b=I[(i+a|0)+72|0];break P}i=F[b+5|0];b=cb(f<<24>>24,i)}b=b&255;switch(b-5|0){case 2:break i;case 0:break g;case 1:break h;default:break O}}Q:{switch(b-22|0){default:if(!(H[(i>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>i&1)|(b|0)!=29){break f}break;case 0:case 2:break Q;case 1:break f}}i=a+72|0;R:{S:{T:{U:{while(1){a=e;e=e+2|0;if((e|0)==(c|0)){break j}g=I[a+3|0];V:{W:{f=I[a+2|0];if(f){b=cb(f<<24>>24,g<<24>>24)}else{b=I[g+i|0]}switch((b&255)-5|0){case 6:break R;case 4:case 5:case 16:break S;case 2:break T;case 1:break U;case 17:case 19:case 20:case 21:case 22:continue;case 0:break V;case 24:break W;default:break f}}if(H[(g>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>g&1){continue}break f}break}if((c-e|0)<2){break c}break f}if((c-e|0)<3){break c}break f}if((c-e|0)<4){break c}break f}e=a+4|0;while(1){if((c|0)==(e|0)){break j}b=I[e+1|0];X:{Y:{a=F[e|0];if(a){a=cb(a,b<<24>>24)}else{a=I[b+i|0]}a=a&255;switch(a-9|0){case 2:break D;case 0:case 1:break X;default:break Y}}if((a|0)!=21){break f}}e=e+2|0;continue}}e=a+4|0;break k}k=a+72|0;Z:{_:{$:{while(1){b=e;e=b+2|0;if((e|0)==(c|0)){break a}g=I[b+3|0];aa:{ba:{i=I[b+2|0];if(i){f=cb(i<<24>>24,g<<24>>24)}else{f=I[g+k|0]}switch((f&255)-5|0){case 6:break q;case 12:break r;case 4:case 5:case 16:break Z;case 2:break _;case 1:break $;case 17:case 19:case 20:case 21:case 22:continue;case 0:break aa;case 24:break ba;default:break b}}if(!(H[(g>>>3&28|I[i+36688|0]<<5)+34784>>2]>>>g&1)){break b}continue}break}if((c-e|0)>=2){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=4){break b}break c}e=b+4|0;while(1){if((c|0)==(e|0)){break a}i=I[e+1|0];ca:{da:{ea:{f=I[e|0];if(f){b=cb(f<<24>>24,i<<24>>24)}else{b=I[i+k|0]}switch((b&255)-5|0){case 0:break n;case 1:break o;case 2:break p;case 6:break q;case 12:break r;case 4:case 5:case 16:break ca;case 17:case 19:break da;case 24:break ea;default:break b}}if(!(H[(i>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>i&1)){break b}}b=e+2|0;fa:while(1){H[j+12>>2]=b;if((b|0)==(c|0)){break a}g=I[b+1|0];i=0;ga:{ha:{ia:{ja:{ka:{la:{ma:{f=I[b|0];if(f){e=cb(f<<24>>24,g<<24>>24)}else{e=I[g+k|0]}switch((e&255)-5|0){case 9:break ga;case 4:case 5:case 16:break ha;case 2:break ia;case 1:break ja;case 0:break ka;case 17:case 19:case 20:case 21:case 22:break la;case 24:break ma;default:break l}}if(!(H[(g>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>g&1)){break l}}b=b+2|0;continue}if((c-b|0)<2){break c}break l}if((c-b|0)<3){break c}break l}if((c-b|0)<4){break c}break l}na:{while(1){e=b+2|0;if((e|0)==(c|0)){break a}f=I[b+3|0];b=F[b+2|0];if(b){f=cb(b,f<<24>>24)}else{f=I[f+k|0]}if((f|0)==14){break na}if((f&255)>>>0<=21){b=e;if(1<<f&2098688){continue}}break}b=e;break l}H[j+12>>2]=e;b=e}while(1){e=b+2|0;if((e|0)==(c|0)){break a}g=I[b+3|0];f=F[b+2|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+k|0]}if((f&254)!=12){if((f&255)>>>0>21){break m}b=e;if(1<<f&2098688){continue}break m}break}while(1){b=b+4|0;oa:{pa:{qa:while(1){H[j+12>>2]=b;while(1){if((b|0)==(c|0)){break a}g=I[b+1|0];e=F[b|0];if(e){e=cb(e,g<<24>>24)}else{e=I[g+k|0]}if((e|0)==(f|0)){break pa}ra:{switch(e|0){case 5:if((c-b|0)<2){break c}default:b=b+2|0;continue qa;case 6:if((c-b|0)<3){break c}b=b+3|0;continue qa;case 7:break oa;case 3:break ra;case 0:case 1:case 2:case 8:break l}}b=zg(a,b+2|0,c,j+12|0);if((b|0)>0){b=H[j+12>>2];continue}break}break}h=b;if(b){break a}b=H[j+12>>2];break l}f=b+2|0;H[j+12>>2]=f;if((c|0)==(f|0)){break a}g=I[b+3|0];e=F[b+2|0];if(e){g=cb(e,g<<24>>24)}else{g=I[g+k|0]}e=b;b=f;sa:{ta:{ua:{va:{f=g&255;switch(f-9|0){case 8:break sa;case 2:break ta;case 0:case 1:break ua;case 3:case 4:case 5:case 6:case 7:break l;default:break va}}if((f|0)==21){break ua}break l}wa:{xa:{ya:{za:{Aa:{while(1){e=b;b=b+2|0;if((c|0)==(b|0)){break a}f=I[e+3|0];Ba:{g=I[e+2|0];if(g){f=cb(g<<24>>24,f<<24>>24)}else{f=I[f+k|0]}switch((f&255)-5|0){case 12:break sa;case 6:break ta;case 2:break wa;case 1:break xa;case 0:break ya;case 17:case 19:break Aa;case 4:case 5:case 16:continue;case 24:break Ba;default:break l}}break}H[j+12>>2]=b;f=I[e+3|0];if(H[(f>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>f&1){break za}break l}H[j+12>>2]=b}b=e+4|0;continue fa}if((c-b|0)<2){break c}break l}if((c-b|0)<3){break c}break l}if((c-b|0)<4){break c}break l}b=e+4|0;i=1;break l}a=b+2|0;H[j+12>>2]=a;if((a|0)==(c|0)){break a}if(I[a|0]){b=a;break l}c=a;a=I[b+3|0]==62;b=a?b+4|0:c;i=a?3:0;break l}if((c-b|0)>=4){continue}break}break}break c}e=e+2|0;continue}}e=e+2|0;break k}e=b+2|0;break v}H[d>>2]=b;break a}if((c-b|0)<4){break c}e=b+4|0;break v}if((c-b|0)<3){break c}e=b+3|0;break v}if((c-b|0)<2){break c}e=b+2|0;break v}h=-5;e=b+2|0;if((e|0)==(c|0)){break a}if(I[e|0]|I[b+3|0]!=93){break v}f=b+4|0;if((f|0)==(c|0)){break a}if(I[b+4|0]|I[b+5|0]!=62){break v}H[d>>2]=f;h=0;break a}h=a+72|0;Ca:{while(1){a=e;if((c|0)==(e|0)){break Ca}f=I[e+1|0];Da:{Ea:{Fa:{Ga:{Ha:{b=F[e|0];if(b){b=cb(b,f<<24>>24)}else{b=I[f+h|0]}switch(b&255){case 0:case 1:case 2:case 3:case 8:case 9:case 10:break Ca;case 4:break Da;case 7:break Ea;case 6:break Fa;case 5:break Ha;default:break Ga}}if((c-a|0)<=1){break Ca}}e=a+2|0;continue}if((c-a|0)<=2){break Ca}e=a+3|0;continue}if((c-a|0)<=3){break Ca}e=a+4|0;continue}e=a+2|0;if((e|0)==(c|0)){break Ca}if(I[e|0]|I[a+3|0]!=93){continue}b=a+4|0;if((b|0)==(c|0)){break Ca}if(I[a+4|0]|I[a+5|0]!=62){continue}break}H[d>>2]=b;h=0;break a}H[d>>2]=a;h=6;break a}H[d>>2]=b+2;h=7;break a}e=c;c=b+2|0;if((e|0)==(c|0)){h=-3;break a}f=b+4|0;e=F[c|0];if(e){a=cb(e,F[b+3|0])}else{a=I[(I[b+3|0]+a|0)+72|0]}H[d>>2]=(a|0)==10?f:c;h=7;break a}h=zg(a,b+2|0,c,d);break a}a=e+2|0;if((a|0)==(c|0)){break a}if(!(!I[e+2|0]&I[e+3|0]==62)){H[d>>2]=a;h=0;break a}h=4;H[d>>2]=e+4;break a}h=2;H[d>>2]=e+2;break a}if((c-e|0)>=4){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=2){break b}break c}b=e}H[d>>2]=b;h=i;break a}h=5;break f}h=-1;break a}if((c-e|0)<4){break c}break f}if((c-e|0)<3){break c}break f}if((c-e|0)<2){break c}}H[d>>2]=e;break a}c=e}H[d>>2]=c;break a}h=-2;break a}H[d>>2]=e;h=0}Ha=j+16|0;return h|0}function wx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=Ha-16|0;Ha=j;a:{if((b|0)==(c|0)){h=-4;break a}b:{c:{d:{e:{f:{g:{h:{i:{j:{e=c-b|0;if(e&1){c=e&-2;if(!c){break j}c=b+c|0}k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{e=F[b+1|0];if(e){e=cb(e,F[b|0])}else{e=I[(I[b|0]+a|0)+72|0]}switch(e&255){case 3:break s;case 9:break t;case 10:break u;case 4:break w;case 5:break x;case 6:break y;case 7:break z;case 0:case 1:case 8:break A;case 2:break C;default:break B}}h=-1;e=b+2|0;if((e|0)==(c|0)){break j}D:{E:{F:{G:{H:{I:{J:{K:{L:{g=I[b+3|0];M:{if(!g){i=I[e|0];f=I[(i+a|0)+72|0];break M}i=F[e|0];f=cb(g<<24>>24,i)}f=f&255;switch(f-5|0){case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 13:case 14:case 15:case 16:case 18:break b;case 17:case 19:break E;case 12:break F;case 10:break G;case 11:break H;case 2:break I;case 1:break J;case 0:break K;default:break L}}if((f|0)!=29){break b}if(H[(i>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>i&1){break E}break b}if((c-e|0)>=2){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=4){break b}break c}f=b+4|0;if((f|0)==(c|0)){break a}N:{e=F[b+5|0];if(e){e=cb(e,F[b+4|0])}else{e=I[(I[b+4|0]+a|0)+72|0]}e=e&255;if((e|0)!=20){if((e|0)!=27){break N}h=vq(a,b+6|0,c,d);break a}e=b+6|0;if((c-e|0)<12){break a}c=b+18|0;b=0;while(1){if((b|0)==6){h=8;break d}h=0;if(I[e+1|0]|I[e|0]!=I[b+37308|0]){break e}e=e+2|0;b=b+1|0;continue}}H[d>>2]=f;h=0;break a}h=uq(a,b+4|0,c,d);break a}e=b+4|0;if((e|0)==(c|0)){break j}h=0;O:{f=I[b+5|0];P:{if(!f){i=I[e|0];b=I[(i+a|0)+72|0];break P}i=F[e|0];b=cb(f<<24>>24,i)}b=b&255;switch(b-5|0){case 2:break i;case 0:break g;case 1:break h;default:break O}}Q:{switch(b-22|0){default:if(!(H[(i>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>i&1)|(b|0)!=29){break f}break;case 0:case 2:break Q;case 1:break f}}i=a+72|0;R:{S:{T:{U:{while(1){a=e;e=e+2|0;if((e|0)==(c|0)){break j}g=I[a+2|0];V:{W:{f=I[a+3|0];if(f){b=cb(f<<24>>24,g<<24>>24)}else{b=I[g+i|0]}switch((b&255)-5|0){case 6:break R;case 4:case 5:case 16:break S;case 2:break T;case 1:break U;case 17:case 19:case 20:case 21:case 22:continue;case 0:break V;case 24:break W;default:break f}}if(H[(g>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>g&1){continue}break f}break}if((c-e|0)<2){break c}break f}if((c-e|0)<3){break c}break f}if((c-e|0)<4){break c}break f}e=a+4|0;while(1){if((c|0)==(e|0)){break j}b=I[e|0];X:{Y:{a=F[e+1|0];if(a){a=cb(a,b<<24>>24)}else{a=I[b+i|0]}a=a&255;switch(a-9|0){case 2:break D;case 0:case 1:break X;default:break Y}}if((a|0)!=21){break f}}e=e+2|0;continue}}e=a+4|0;break k}k=a+72|0;Z:{_:{$:{while(1){b=e;e=b+2|0;if((e|0)==(c|0)){break a}g=I[b+2|0];aa:{ba:{i=I[b+3|0];if(i){f=cb(i<<24>>24,g<<24>>24)}else{f=I[g+k|0]}switch((f&255)-5|0){case 6:break q;case 12:break r;case 4:case 5:case 16:break Z;case 2:break _;case 1:break $;case 17:case 19:case 20:case 21:case 22:continue;case 0:break aa;case 24:break ba;default:break b}}if(!(H[(g>>>3&28|I[i+36688|0]<<5)+34784>>2]>>>g&1)){break b}continue}break}if((c-e|0)>=2){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=4){break b}break c}e=b+4|0;while(1){if((c|0)==(e|0)){break a}i=I[e|0];ca:{da:{ea:{f=I[e+1|0];if(f){b=cb(f<<24>>24,i<<24>>24)}else{b=I[i+k|0]}switch((b&255)-5|0){case 0:break n;case 1:break o;case 2:break p;case 6:break q;case 12:break r;case 4:case 5:case 16:break ca;case 17:case 19:break da;case 24:break ea;default:break b}}if(!(H[(i>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>i&1)){break b}}b=e+2|0;fa:while(1){H[j+12>>2]=b;if((b|0)==(c|0)){break a}g=I[b|0];i=0;ga:{ha:{ia:{ja:{ka:{la:{ma:{f=I[b+1|0];if(f){e=cb(f<<24>>24,g<<24>>24)}else{e=I[g+k|0]}switch((e&255)-5|0){case 9:break ga;case 4:case 5:case 16:break ha;case 2:break ia;case 1:break ja;case 0:break ka;case 17:case 19:case 20:case 21:case 22:break la;case 24:break ma;default:break l}}if(!(H[(g>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>g&1)){break l}}b=b+2|0;continue}if((c-b|0)<2){break c}break l}if((c-b|0)<3){break c}break l}if((c-b|0)<4){break c}break l}na:{while(1){e=b+2|0;if((e|0)==(c|0)){break a}f=I[b+2|0];b=F[b+3|0];if(b){f=cb(b,f<<24>>24)}else{f=I[f+k|0]}if((f|0)==14){break na}if((f&255)>>>0<=21){b=e;if(1<<f&2098688){continue}}break}b=e;break l}H[j+12>>2]=e;b=e}while(1){e=b+2|0;if((e|0)==(c|0)){break a}g=I[b+2|0];f=F[b+3|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+k|0]}if((f&254)!=12){if((f&255)>>>0>21){break m}b=e;if(1<<f&2098688){continue}break m}break}while(1){b=b+4|0;oa:{pa:{qa:while(1){H[j+12>>2]=b;while(1){if((b|0)==(c|0)){break a}g=I[b|0];e=F[b+1|0];if(e){e=cb(e,g<<24>>24)}else{e=I[g+k|0]}if((e|0)==(f|0)){break pa}ra:{switch(e|0){case 5:if((c-b|0)<2){break c}default:b=b+2|0;continue qa;case 6:if((c-b|0)<3){break c}b=b+3|0;continue qa;case 7:break oa;case 3:break ra;case 0:case 1:case 2:case 8:break l}}b=Ag(a,b+2|0,c,j+12|0);if((b|0)>0){b=H[j+12>>2];continue}break}break}h=b;if(b){break a}b=H[j+12>>2];break l}f=b+2|0;H[j+12>>2]=f;if((c|0)==(f|0)){break a}g=I[b+2|0];e=F[b+3|0];if(e){g=cb(e,g<<24>>24)}else{g=I[g+k|0]}e=b;b=f;sa:{ta:{ua:{va:{f=g&255;switch(f-9|0){case 8:break sa;case 2:break ta;case 0:case 1:break ua;case 3:case 4:case 5:case 6:case 7:break l;default:break va}}if((f|0)==21){break ua}break l}wa:{xa:{ya:{za:{Aa:{while(1){e=b;b=b+2|0;if((c|0)==(b|0)){break a}g=I[e+2|0];Ba:{f=F[e+3|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+k|0]}switch((f&255)-5|0){case 12:break sa;case 6:break ta;case 2:break wa;case 1:break xa;case 0:break ya;case 17:case 19:break Aa;case 4:case 5:case 16:continue;case 24:break Ba;default:break l}}break}H[j+12>>2]=b;f=I[e+2|0];if(H[(f>>>3&28|I[I[e+3|0]+36432|0]<<5)+34784>>2]>>>f&1){break za}break l}H[j+12>>2]=b}b=e+4|0;continue fa}if((c-b|0)<2){break c}break l}if((c-b|0)<3){break c}break l}if((c-b|0)<4){break c}break l}b=e+4|0;i=1;break l}a=b+2|0;H[j+12>>2]=a;if((a|0)==(c|0)){break a}if(I[b+3|0]){b=a;break l}c=a;a=I[b+2|0]==62;b=a?b+4|0:c;i=a?3:0;break l}if((c-b|0)>=4){continue}break}break}break c}e=e+2|0;continue}}e=e+2|0;break k}e=b+2|0;break v}H[d>>2]=b;break a}if((c-b|0)<4){break c}e=b+4|0;break v}if((c-b|0)<3){break c}e=b+3|0;break v}if((c-b|0)<2){break c}e=b+2|0;break v}h=-5;e=b+2|0;if((e|0)==(c|0)){break a}if(I[b+3|0]|I[e|0]!=93){break v}f=b+4|0;if((f|0)==(c|0)){break a}if(I[b+5|0]|I[b+4|0]!=62){break v}H[d>>2]=f;h=0;break a}h=a+72|0;Ca:{while(1){a=e;if((c|0)==(e|0)){break Ca}f=I[e|0];Da:{Ea:{Fa:{Ga:{Ha:{b=F[e+1|0];if(b){b=cb(b,f<<24>>24)}else{b=I[f+h|0]}switch(b&255){case 0:case 1:case 2:case 3:case 8:case 9:case 10:break Ca;case 4:break Da;case 7:break Ea;case 6:break Fa;case 5:break Ha;default:break Ga}}if((c-a|0)<=1){break Ca}}e=a+2|0;continue}if((c-a|0)<=2){break Ca}e=a+3|0;continue}if((c-a|0)<=3){break Ca}e=a+4|0;continue}e=a+2|0;if((e|0)==(c|0)){break Ca}if(I[a+3|0]|I[e|0]!=93){continue}b=a+4|0;if((b|0)==(c|0)){break Ca}if(I[a+5|0]|I[a+4|0]!=62){continue}break}H[d>>2]=b;h=0;break a}H[d>>2]=a;h=6;break a}H[d>>2]=b+2;h=7;break a}e=c;c=b+2|0;if((e|0)==(c|0)){h=-3;break a}e=b+4|0;b=F[b+3|0];if(b){a=cb(b,F[c|0])}else{a=I[(I[c|0]+a|0)+72|0]}H[d>>2]=(a|0)==10?e:c;h=7;break a}h=Ag(a,b+2|0,c,d);break a}a=e+2|0;if((a|0)==(c|0)){break a}if(!(!I[e+3|0]&I[e+2|0]==62)){H[d>>2]=a;h=0;break a}h=4;H[d>>2]=e+4;break a}h=2;H[d>>2]=e+2;break a}if((c-e|0)>=4){break b}break c}if((c-e|0)>=3){break b}break c}if((c-e|0)>=2){break b}break c}b=e}H[d>>2]=b;h=i;break a}h=5;break f}h=-1;break a}if((c-e|0)<4){break c}break f}if((c-e|0)<3){break c}break f}if((c-e|0)<2){break c}}H[d>>2]=e;break a}c=e}H[d>>2]=c;break a}h=-2;break a}H[d>>2]=e;h=0}Ha=j+16|0;return h|0}function aj(){var a=0,b=O(0),c=0,d=0,e=0,f=0,g=O(0);a=Ha-16|0;Ha=a;a:{if(Ba(a+12|0,a+8|0)|0){break a}c=ib((H[a+12>>2]<<2)+4|0);H[15103]=c;if(!c){break a}c=ib(H[a+8>>2]);if(c){d=H[15103];H[d+(H[a+12>>2]<<2)>>2]=0;if(!(Aa(d|0,c|0)|0)){break a}}H[15103]=0}Ha=a+16|0;H[12732]=1068827891;f=50924,g=kb(O(1),O(0)),L[f>>2]=g;H[12734]=1068827891;f=50932,g=kb(O(1),O(0)),L[f>>2]=g;H[12736]=1068827891;F[52728]=1;F[53764]=1;b=kb(O(1),O(0));L[12735]=b;b=O(b+b);L[12738]=b;L[12737]=b+b;H[12751]=1068827891;f=51e3,g=kb(O(1),O(0)),L[f>>2]=g;H[12753]=1068827891;f=51008,g=kb(O(1),O(0)),L[f>>2]=g;H[12755]=1068827891;f=51016,g=kb(O(1),O(0)),L[f>>2]=g;H[12757]=1068827891;f=51024,g=kb(O(1),O(0)),L[f>>2]=g;H[12759]=1068827891;f=51032,g=kb(O(1),O(0)),L[f>>2]=g;H[12761]=1068827891;f=51040,g=kb(O(1),O(0)),L[f>>2]=g;H[12765]=1068827891;f=51056,g=kb(O(1),O(0)),L[f>>2]=g;H[12767]=1068827891;f=51064,g=kb(O(1),O(0)),L[f>>2]=g;a=Ha+-64|0;Ha=a;H[12769]=1068827891;b=kb(O(1),O(0));L[12768]=b;L[12804]=b+b;H[a+60>>2]=0;H[a+52>>2]=1073741824;H[a+56>>2]=0;H[a+48>>2]=1061158912;H[a+40>>2]=1069547520;H[a+44>>2]=0;H[a+36>>2]=1065353216;H[a+28>>2]=0;H[a+32>>2]=0;H[a+24>>2]=1061158912;H[a+16>>2]=-1077936128;H[a+20>>2]=0;H[a+12>>2]=0;H[a+4>>2]=-1073741824;H[a+8>>2]=0;To(51080,a+52|0,a+40|0,a+28|0,a+16|0,a+4|0);Ha=a- -64|0;H[12806]=1068827891;f=51220,g=kb(O(1),O(0)),L[f>>2]=g;H[12808]=1068827891;H[12816]=1060439283;H[12809]=1060439283;H[12812]=0;H[12813]=1065353216;H[12810]=0;H[12811]=0;b=kb(O(1),O(0));L[12807]=b;b=O(b+b);L[12814]=b;L[12815]=b+b;H[12818]=1068827891;f=51268,g=kb(O(1),O(0)),L[f>>2]=g;H[12820]=1068827891;b=kb(O(1),O(0));L[12819]=b;L[12821]=b+b;H[12823]=1068827891;f=51288,g=kb(O(1),O(0)),L[f>>2]=g;H[12825]=1068827891;H[12828]=1065353216;H[12829]=0;H[12826]=0;H[12827]=0;b=kb(O(1),O(0));L[12824]=b;L[12830]=b+b;H[12832]=1068827891;H[12833]=0;H[12834]=0;H[13229]=1065353216;H[13230]=0;H[14680]=0;H[14681]=1065353216;H[13228]=1065353216;H[13226]=0;H[13227]=0;H[13438]=-1082130432;H[13439]=0;H[13140]=0;H[13141]=-1082130432;H[13139]=-1082130432;H[13137]=0;H[13138]=0;f=51324,g=kb(O(1),O(0)),L[f>>2]=g;H[12835]=0;H[13231]=0;H[14682]=0;H[13440]=0;H[13142]=0;Ya(51376,52916);Ya(51388,58720);Ya(51400,52904);H[12837]=1068827891;H[12842]=0;H[12843]=2;H[12840]=0;H[12841]=1;H[12838]=0;H[12839]=0;b=kb(O(1),O(0));L[12836]=b;L[12853]=b+b;H[12855]=1068827891;H[12856]=0;H[12857]=0;b=kb(O(1),O(0));L[12854]=b;b=O(b+b);L[12862]=b;L[12861]=b+b;H[12858]=0;H[12864]=1068827891;b=kb(O(1),O(0));L[12863]=b;L[12865]=b+b;H[12869]=1068827891;H[12870]=0;H[12871]=0;f=51472,g=kb(O(1),O(0)),L[f>>2]=g;H[12872]=0;H[12874]=1068827891;H[12875]=0;H[12876]=0;b=kb(O(1),O(0));L[12873]=b;L[12879]=b+b;H[12877]=0;H[12881]=1068827891;f=51520,g=kb(O(1),O(0)),L[f>>2]=g;H[12883]=1068827891;b=kb(O(1),O(0));L[12882]=b;L[12884]=b+b;H[12886]=1068827891;H[12889]=1048576e3;H[12887]=1065353216;H[12888]=1061997773;b=kb(O(1),O(0));L[12885]=b;L[12893]=b+b;H[12895]=1068827891;H[12896]=0;H[12897]=0;f=51576,g=kb(O(1),O(0)),L[f>>2]=g;H[12898]=0;d=0;H[12900]=1068827891;H[12901]=0;H[12902]=0;b=kb(O(1),O(0));L[12899]=b;L[13143]=b+b;H[12903]=0;hn(53768);b:while(1){c:{c=0;if((d|0)==2){break c}while(1)if((c|0)==5){d=d+1|0;continue b}else{H[(N(d,20)+(c<<2)|0)+51616>>2]=1065353216;c=c+1|0;continue}}break}H[13250]=0;H[13251]=0;H[13248]=0;H[13249]=0;H[13246]=0;H[13247]=0;H[13244]=0;H[13245]=0;H[13312]=0;H[13313]=0;H[13252]=1065353216;H[13253]=0;c=328;while(1){a=c+52984|0;H[a>>2]=0;H[a+4>>2]=1065353216;a=c+52976|0;H[a>>2]=0;H[a+4>>2]=0;c=c+24|0;if((c|0)!=472){continue}break}H[13364]=0;H[13365]=1065353216;H[13362]=0;H[13363]=0;d=0;while(1){if((d|0)!=5){a=d<<2;H[a+53016>>2]=0;H[a+53036>>2]=0;H[a+53056>>2]=0;H[a+53076>>2]=0;H[a+53096>>2]=0;H[a+53116>>2]=0;H[a+53136>>2]=0;H[a+53156>>2]=0;H[a+53176>>2]=0;H[a+53196>>2]=0;H[a+53228>>2]=0;d=d+1|0;continue}break}H[13304]=0;H[13305]=0;H[13306]=0;c=0;while(1){if((c|0)!=12){H[(c<<2)+53256>>2]=0;c=c+1|0;continue}break}f=52752,g=O(Bd(1.5,6.8)),L[f>>2]=g;b=O(Bd(1.1,7.5));L[13187]=b;L[13186]=b;f=52740,g=O(Bd(2.1,4.5)),L[f>>2]=g;f=52736,g=O(Bd(4.5,2.4)),L[f>>2]=g;f=52784,g=O(Bd(-2.7,2.1)),L[f>>2]=g;f=52780,g=O(Bd(-2,3.8)),L[f>>2]=g;f=52776,g=O(Bd(-1.8,6.1)),L[f>>2]=g;f=52772,g=O(Bd(-2.3,5.2)),L[f>>2]=g;H[13192]=0;vo(51684);vo(52024);H[13094]=-1114678231;H[13092]=0;H[13093]=-1120382484;H[13145]=1068827891;H[13146]=0;H[13147]=0;H[13432]=1;H[13426]=16777219;F[53684]=1;H[13420]=16777219;F[53660]=1;H[13414]=16777218;H[13408]=65537;H[13402]=2;H[13396]=16777219;H[13390]=16777218;H[13384]=1;f=52576,g=kb(O(1),O(0)),L[f>>2]=g;H[13148]=0;F[53732]=0;F[53708]=0;F[53636]=0;F[53612]=0;F[53588]=0;F[53564]=0;F[53540]=0;F[53522]=I[53522]&240;F[53520]=I[53520]&240|2;F[52604]=0;F[52605]=0;F[52606]=0;F[58713]=0;F[58714]=0;F[58712]=0;H[13153]=1068827891;f=52608,g=kb(O(1),O(0)),L[f>>2]=g;H[13167]=1068827891;H[13168]=0;H[13169]=0;f=52664,g=kb(O(1),O(0)),L[f>>2]=g;H[13170]=0;H[13172]=1068827891;H[13173]=0;H[13174]=0;f=52684,g=kb(O(1),O(0)),L[f>>2]=g;H[13175]=0;H[13178]=1068827891;H[13179]=0;H[13180]=0;f=52708,g=kb(O(1),O(0)),L[f>>2]=g;H[13181]=0;c=0;H[13198]=1068827891;H[13237]=1060439283;H[13199]=0;H[13200]=0;b=kb(O(1),O(0));L[13197]=b;b=O(b+b);L[13382]=b;L[13381]=b+b;H[13201]=0;while(1){H[c+52824>>2]=0;a=c+52816|0;H[a>>2]=0;H[a+4>>2]=0;c=c+12|0;if((c|0)!=72){continue}break}H[13238]=1065269400;H[13239]=1036809590;H[13235]=1032884992;H[13236]=1060380016;H[13233]=-1087103632;H[13234]=1032884992;H[13242]=-1114598656;H[13243]=1060380016;H[13240]=-1087103632;H[13241]=-1114598656;L[13480]=b/O(10);L[13481]=b/O(30);H[13483]=1068827891;H[13484]=0;H[13485]=0;f=53928,g=kb(O(1),O(0)),L[f>>2]=g;H[13486]=0;d=0;H[13488]=1068827891;H[13496]=1060439283;H[13489]=0;H[13490]=0;H[13494]=0;H[13495]=1060439283;H[13492]=-1087044365;H[13493]=0;b=kb(O(1),O(0));L[13487]=b;L[14679]=b+b;H[13491]=0;while(1){a=d+54024|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;a=d+54016|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;a=d+54008|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;e=d+54e3|0;a=e;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;c=32;while(1){a=c+e|0;H[a+16>>2]=-1027080192;H[a+8>>2]=-1027080192;H[a+12>>2]=-1027080192;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;c=c+20|0;if((c|0)!=152){continue}break}c=0;H[d+54156>>2]=0;G[d+54152>>1]=0;d=d+160|0;if((d|0)!=2080){continue}break}while(1){a=c+56152|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;a=c+56144|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;c=c+16|0;if((c|0)!=1024){continue}break}c=0;while(1){H[c+57248>>2]=-1027080192;a=c+57240|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;a=c+57232|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;c=c+20|0;if((c|0)!=960){continue}break}c=0;while(1){H[c+58208>>2]=-1027080192;a=c+58200|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;a=c+58192|0;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;c=c+20|0;if((c|0)!=160){continue}break}H[14684]=1068827891;f=58732,g=kb(O(1),O(0)),L[f>>2]=g;H[14687]=1068827891;f=58744,g=kb(O(1),O(0)),L[f>>2]=g;H[14691]=1068827891;f=58760,g=kb(O(1),O(0)),L[f>>2]=g;H[14693]=1068827891;H[14694]=0;H[14695]=0;f=58768,g=kb(O(1),O(0)),L[f>>2]=g;H[14696]=0;H[14698]=1068827891;f=58788,g=kb(O(1),O(0)),L[f>>2]=g;H[14700]=1068827891;H[14701]=0;H[14702]=0;f=58796,g=kb(O(1),O(0)),L[f>>2]=g;H[14703]=0;H[14768]=42;H[14786]=60448}function mo(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,I=0,J=0,L=0,M=0,N=0,O=0,P=0,R=0,S=0;k=Ha-336|0;Ha=k;m=h;n=i&65535;o=d;p=e&65535;s=(e^i)&-2147483648;x=i>>>16&32767;u=e>>>16&32767;a:{b:{if(x-32767>>>0>4294934529&u-32767>>>0>=4294934530){break b}j=e&2147483647;if(!(!d&(j|0)==2147418112?!(b|c):j>>>0<2147418112)){r=d;s=e|32768;break a}e=i&2147483647;if(!(!h&(e|0)==2147418112?!(f|g):e>>>0<2147418112)){r=h;s=i|32768;b=f;c=g;break a}if(!(b|d|(j^2147418112|c))){if(!(f|h|(e^2147418112|g))){b=0;c=0;s=2147450880;break a}s=s|2147418112;b=0;c=0;break a}if(!(f|h|(e^2147418112|g))){b=0;c=0;break a}if(!(b|d|(c|j))){b=!(f|h|(e|g));r=b?0:r;s=b?2147450880:s;b=0;c=0;break a}if(!(f|h|(e|g))){s=s|2147418112;b=0;c=0;break a}if((j|0)==65535|j>>>0<65535){d=!(o|p);i=d;j=d?b:o;d=d<<6;i=Q(i?c:p);d=d+((i|0)==32?Q(j)+32|0:i)|0;lc(k+320|0,b,c,o,p,d-15|0);q=16-d|0;o=H[k+328>>2];p=H[k+332>>2];c=H[k+324>>2];b=H[k+320>>2]}if(e>>>0>65535){break b}d=!(n|m);h=d;i=d?f:m;d=d<<6;h=Q(h?g:n);d=d+((h|0)==32?Q(i)+32|0:h)|0;lc(k+304|0,f,g,m,n,d-15|0);q=(d+q|0)-16|0;m=H[k+312>>2];n=H[k+316>>2];f=H[k+304>>2];g=H[k+308>>2]}e=n|65536;y=e;z=m;d=m;j=e<<15|d>>>17;e=d<<15|g>>>17;d=e;i=0-d|0;h=j;j=1963258675-(j+((d|0)!=0)|0)|0;kc(k+288|0,d,h,0,0,i,j,0,0);d=H[k+296>>2];kc(k+272|0,0-d|0,0-(H[k+300>>2]+((d|0)!=0)|0)|0,0,0,i,j,0,0);d=H[k+280>>2];i=d<<1|H[k+276>>2]>>>31;d=H[k+284>>2]<<1|d>>>31;kc(k+256|0,i,d,0,0,e,h,0,0);j=H[k+264>>2];kc(k+240|0,i,d,0,0,0-j|0,0-(H[k+268>>2]+((j|0)!=0)|0)|0,0,0);i=H[k+248>>2];j=i<<1|H[k+244>>2]>>>31;d=H[k+252>>2]<<1|i>>>31;kc(k+224|0,j,d,0,0,e,h,0,0);i=H[k+232>>2];kc(k+208|0,j,d,0,0,0-i|0,0-(H[k+236>>2]+((i|0)!=0)|0)|0,0,0);d=H[k+216>>2];i=d<<1|H[k+212>>2]>>>31;d=H[k+220>>2]<<1|d>>>31;kc(k+192|0,i,d,0,0,e,h,0,0);j=H[k+200>>2];kc(k+176|0,i,d,0,0,0-j|0,0-(H[k+204>>2]+((j|0)!=0)|0)|0,0,0);i=e;e=H[k+184>>2];d=h;m=e<<1|H[k+180>>2]>>>31;h=m-1|0;e=(H[k+188>>2]<<1|e>>>31)-!m|0;kc(k+160|0,i,d,0,0,h,e,0,0);d=h;kc(k+144|0,f<<15,g<<15|f>>>17,0,0,d,e,0,0);v=k+112|0;A=H[k+168>>2];h=H[k+172>>2];m=H[k+160>>2];i=H[k+152>>2];l=m+i|0;n=H[k+164>>2];j=n+H[k+156>>2]|0;j=i>>>0>l>>>0?j+1|0:j;i=j;j=(n|0)==(j|0)&l>>>0<m>>>0|j>>>0<n>>>0;n=j+A|0;j=j>>>0>n>>>0?h+1|0:h;m=!i&l>>>0>1|(i|0)!=0;h=n+m|0;j=m>>>0>h>>>0?j+1|0:j;kc(v,d,e,0,0,0-h|0,0-(((h|0)!=0)+j|0)|0,0,0);kc(k+128|0,1-l|0,0-((l>>>0>1)+i|0)|0,0,0,d,e,0,0);L=(u-x|0)+q|0;e=H[k+116>>2];u=e;d=H[k+112>>2];j=e<<1|d>>>31;i=d<<1;n=j;d=j;h=H[k+140>>2];w=h;e=H[k+136>>2];j=h<<1|e>>>31;l=e<<1|H[k+132>>2]>>>31;h=l+i|0;d=d+j|0;d=h>>>0<l>>>0?d+1|0:d;e=d;d=d-(h>>>0<13927)|0;t=d;v=d;l=0;j=p|65536;M=j;N=o;d=o;j=j<<1|d>>>31;P=d<<1;R=j;E=j;d=gy(t,l,j,0);j=Ka;B=d;C=j;G=b<<1;d=c<<1|b>>>31;x=d;A=d;j=0;q=j;m=h-13927|0;t=(e|0)==(t|0)&m>>>0<h>>>0|e>>>0>t>>>0;e=(e|0)==(n|0)&h>>>0<i>>>0|e>>>0<n>>>0;d=H[k+120>>2];h=H[k+124>>2]<<1|d>>>31;d=d<<1|u>>>31;l=w>>>31|0;d=l+d|0;j=h;j=d>>>0<l>>>0?j+1|0:j;h=d;d=d+e|0;j=h>>>0>d>>>0?j+1|0:j;e=d;d=d+t|0;l=e>>>0>d>>>0?j+1|0:j;e=d-1|0;D=l-!d|0;w=0;i=gy(A,q,D,w);d=i+B|0;h=Ka+C|0;h=d>>>0<i>>>0?h+1|0:h;n=(C|0)==(h|0)&d>>>0<B>>>0|h>>>0<C>>>0;B=e;O=c>>>31|0;F=O|o<<1;t=0;e=gy(e,0,F,t);o=e+d|0;j=Ka+h|0;l=0;j=e>>>0>o>>>0?j+1|0:j;p=j;d=(j|0)==(h|0)&d>>>0>o>>>0|h>>>0>j>>>0;e=d;d=d+n|0;l=e>>>0>d>>>0?1:l;e=gy(E,q,D,w);d=e+d|0;j=Ka+l|0;n=d;d=d>>>0<e>>>0?j+1|0:j;e=gy(E,q,B,t);l=Ka;h=e;e=gy(F,t,D,w);i=h+e|0;j=Ka+l|0;j=e>>>0>i>>>0?j+1|0:j;e=j;j=(l|0)==(j|0)&h>>>0>i>>>0|j>>>0<l>>>0;l=n+e|0;d=d+j|0;d=l>>>0<e>>>0?d+1|0:d;n=l;l=d;e=0;d=e+o|0;j=i+p|0;j=d>>>0<e>>>0?j+1|0:j;e=j;h=(j|0)==(p|0)&d>>>0<o>>>0|j>>>0<p>>>0;j=l;i=h;h=h+n|0;j=i>>>0>h>>>0?j+1|0:j;u=h;l=j;o=d;C=m;d=gy(m,0,F,t);i=Ka;h=d;m=gy(v,r,A,r);d=d+m|0;j=Ka+i|0;j=d>>>0<m>>>0?j+1|0:j;m=(i|0)==(j|0)&d>>>0<h>>>0|i>>>0>j>>>0;h=j;I=G&-2;i=gy(B,t,I,0);p=i+d|0;j=Ka+j|0;j=i>>>0>p>>>0?j+1|0:j;i=j;d=(j|0)==(h|0)&d>>>0>p>>>0|h>>>0>j>>>0;h=0;j=d+m|0;d=(j>>>0<d>>>0?1:h)+e|0;n=j+o|0;d=n>>>0<j>>>0?d+1|0:d;j=l;m=d;d=(d|0)==(e|0)&n>>>0<o>>>0|d>>>0<e>>>0;e=d;d=d+u|0;j=e>>>0>d>>>0?j+1|0:j;S=d;u=j;d=gy(E,q,C,r);J=Ka;E=d;e=gy(D,w,I,r);d=d+e|0;j=Ka+J|0;j=d>>>0<e>>>0?j+1|0:j;o=d;l=gy(v,r,F,t);e=d+l|0;h=j;d=j+Ka|0;d=e>>>0<l>>>0?d+1|0:d;q=e;j=gy(A,r,B,t);e=e+j|0;l=Ka+d|0;l=e>>>0<j>>>0?l+1|0:l;D=(d|0)==(l|0)&e>>>0<q>>>0|d>>>0>l>>>0;j=(h|0)==(J|0)&o>>>0<E>>>0|h>>>0<J>>>0;d=(d|0)==(h|0)&o>>>0>q>>>0|d>>>0<h>>>0;d=d+j|0;d=d+D|0;h=l;q=h+n|0;j=(d|w)+m|0;j=h>>>0>q>>>0?j+1|0:j;o=j;d=(m|0)==(j|0)&n>>>0>q>>>0|j>>>0<m>>>0;j=u;h=d;d=d+S|0;j=h>>>0>d>>>0?j+1|0:j;w=d;m=j;d=gy(v,r,I,r);v=Ka;n=d;h=gy(A,r,C,r);d=d+h|0;j=Ka+v|0;j=d>>>0<h>>>0?j+1|0:j;u=0;h=(j|0)==(v|0)&d>>>0<n>>>0|j>>>0<v>>>0;n=j;d=j+p|0;j=(h|u)+i|0;j=d>>>0<n>>>0?j+1|0:j;i=(i|0)==(j|0)&d>>>0<p>>>0|i>>>0>j>>>0;h=j;j=e;p=0;e=p+d|0;l=h+j|0;j=0;l=e>>>0<p>>>0?l+1|0:l;d=(h|0)==(l|0)&d>>>0>e>>>0|h>>>0>l>>>0;e=d;d=d+i|0;j=(e>>>0>d>>>0?1:j)+o|0;l=m;e=d;d=d+q|0;j=e>>>0>d>>>0?j+1|0:j;e=j;h=(o|0)==(j|0)&d>>>0<q>>>0|j>>>0<o>>>0;i=h;h=h+w|0;l=i>>>0>h>>>0?l+1|0:l;i=l;c:{if((l|0)==131071|l>>>0<131071){N=P|O;M=t|R;kc(k+80|0,d,j,h,l,f,g,z,y);l=H[k+84>>2];q=l;j=b<<17;o=0;p=H[k+88>>2];c=o-p|0;b=H[k+80>>2];l=(l|b)!=0;m=c-l|0;n=(j-(H[k+92>>2]+(o>>>0<p>>>0)|0)|0)-(c>>>0<l>>>0)|0;p=0-(((b|0)!=0)+q|0)|0;q=L+16382|0;o=0-b|0;break c}d=(e&1)<<31|d>>>1;e=h<<31|e>>>1;h=(i&1)<<31|h>>>1;i=i>>>1|0;kc(k+96|0,d,e,h,i,f,g,z,y);m=H[k+100>>2];x=m;n=0;q=H[k+104>>2];o=n-q|0;l=H[k+96>>2];p=(m|l)!=0;m=o-p|0;n=((b<<16)-(H[k+108>>2]+(n>>>0<q>>>0)|0)|0)-(o>>>0<p>>>0)|0;p=0-(((l|0)!=0)+x|0)|0;G=b;x=c;q=L+16383|0;o=0-l|0}if((q|0)>=32767){s=s|2147418112;b=0;c=0;break a}d:{if((q|0)>0){b=m<<1|p>>>31;c=n<<1|m>>>31;m=h;n=i&65535|q<<16;l=p<<1|o>>>31;h=o<<1;break d}if((q|0)<=-113){b=0;c=0;break a}Td(k- -64|0,d,e,h,i,1-q|0);lc(k+48|0,G,x,N,M,q+112|0);d=H[k+64>>2];e=H[k+68>>2];m=H[k+72>>2];n=H[k+76>>2];kc(k+32|0,f,g,z,y,d,e,m,n);b=H[k+40>>2];c=H[k+56>>2];i=H[k+36>>2];p=b<<1|i>>>31;l=c-p|0;p=H[k+60>>2]-((H[k+44>>2]<<1|b>>>31)+(c>>>0<p>>>0)|0)|0;c=H[k+52>>2];q=c;b=H[k+32>>2];h=i<<1|b>>>31;o=b<<1;b=o;j=H[k+48>>2];c=(c|0)==(h|0)&b>>>0>j>>>0|c>>>0<h>>>0;b=l-c|0;c=p-(c>>>0>l>>>0)|0;l=q-((j>>>0<o>>>0)+h|0)|0;h=j-o|0}kc(k+16|0,f,g,z,y,3,0,0,0);kc(k,f,g,z,y,5,0,0,0);o=d;p=d&1;i=p;d=h+i|0;j=0;h=j+l|0;h=d>>>0<i>>>0?h+1|0:h;i=d;g=(g|0)==(h|0)&d>>>0>f>>>0|g>>>0<h>>>0;l=c;d=(h|0)==(j|0)&d>>>0<p>>>0|h>>>0<j>>>0;f=b+d|0;l=d>>>0>f>>>0?l+1|0:l;j=e;b=(l|0)==(y|0);b=b&(f|0)==(z|0)?g:b&f>>>0>z>>>0|l>>>0>y>>>0;c=b;b=b+o|0;j=c>>>0>b>>>0?j+1|0:j;c=j;d=(e|0)==(j|0)&b>>>0<o>>>0|e>>>0>j>>>0;j=n;e=d;d=d+m|0;j=e>>>0>d>>>0?j+1|0:j;g=d;e=H[k+20>>2];m=(e|0)==(h|0)&K[k+16>>2]<i>>>0|e>>>0<h>>>0;e=H[k+28>>2];d=H[k+24>>2];e=j>>>0<2147418112&((d|0)==(f|0)&(e|0)==(l|0)?m:(e|0)==(l|0)&d>>>0<f>>>0|e>>>0<l>>>0);d=c;m=e;e=b+e|0;d=m>>>0>e>>>0?d+1|0:d;b=(c|0)==(d|0)&b>>>0>e>>>0|c>>>0>d>>>0;c=b;b=b+g|0;j=c>>>0>b>>>0?j+1|0:j;g=b;c=H[k+4>>2];h=(c|0)==(h|0)&K[k>>2]<i>>>0|c>>>0<h>>>0;c=H[k+12>>2];b=H[k+8>>2];b=j>>>0<2147418112&((b|0)==(f|0)&(c|0)==(l|0)?h:(c|0)==(l|0)&b>>>0<f>>>0|c>>>0<l>>>0);c=b;b=b+e|0;l=c>>>0>b>>>0?d+1|0:d;c=l;e=(d|0)==(l|0)&b>>>0<e>>>0|d>>>0>l>>>0;d=j;f=e;e=e+g|0;d=f>>>0>e>>>0?d+1|0:d;r=e|r;s=d|s}H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=r;H[a+12>>2]=s;Ha=k+336|0}function Yx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=Ha-16|0;Ha=i;a:{if((b|0)==(c|0)){f=-4;break a}b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{h=a+72|0;switch(I[h+I[b|0]|0]){case 3:break j;case 9:break k;case 10:break l;case 4:break n;case 0:case 1:case 8:break p;case 5:break q;case 6:break r;case 7:break s;case 2:break u;default:break t}}f=-1;e=b+1|0;if((e|0)==(c|0)){break b}v:{switch(I[I[e|0]+h|0]-5|0){case 0:if((c-e|0)<2){break d}if(!(La[H[a+340>>2]](a,e)|0)){break c}b=b+3|0;break h;case 1:if((c-e|0)<3){break d}if(!(La[H[a+344>>2]](a,e)|0)){break c}b=b+4|0;break h;case 2:if((c-e|0)<4){break d}if(!(La[H[a+348>>2]](a,e)|0)){break c}b=b+5|0;break h;case 17:case 19:break i;case 11:break v;case 10:break f;case 12:break g;default:break c}}e=b+2|0;if((e|0)==(c|0)){break a}f=I[I[b+2|0]+h|0];if((f|0)!=20){if((f|0)!=27){break e}f=Eq(a,b+3|0,c,d);break a}f=-1;a=b+3|0;if((c-a|0)<6){break a}b=b+9|0;c=0;while(1){w:{if((c|0)==6){f=8}else{if(I[a|0]==I[c+37308|0]){break w}b=a;f=0}H[d>>2]=b;break a}a=a+1|0;c=c+1|0;continue}}e=b+1|0;break m}if((c-b|0)<4){break d}if(La[H[a+360>>2]](a,b)|0){break p}e=b+4|0;break m}if((c-b|0)<3){break d}if(La[H[a+356>>2]](a,b)|0){break p}e=b+3|0;break m}if((c-b|0)<2){break d}if(!(La[H[a+352>>2]](a,b)|0)){break o}}H[d>>2]=b;break a}e=b+2|0;break m}f=-5;e=b+1|0;if((e|0)==(c|0)){break a}if(I[e|0]!=93){break m}g=b+2|0;if((g|0)==(c|0)){break a}if(I[b+2|0]!=62){break m}H[d>>2]=g;f=0;break a}while(1){x:{b=e;if((b|0)==(c|0)){break x}y:{switch(I[I[b|0]+h|0]){case 5:if((c-b|0)<2){break x}if(La[H[a+352>>2]](a,b)|0){break x}e=b+2|0;continue;case 6:if((c-b|0)<3){break x}if(La[H[a+356>>2]](a,b)|0){break x}e=b+3|0;continue;case 7:if((c-b|0)<4){break x}if(La[H[a+360>>2]](a,b)|0){break x}e=b+4|0;continue;case 4:e=b+1|0;if((e|0)==(c|0)){break x}if(I[e|0]!=93){continue}f=b+2|0;if((f|0)==(c|0)){break x}if(I[b+2|0]!=62){continue}H[d>>2]=f;f=0;break a;case 0:case 1:case 2:case 3:case 8:case 9:case 10:break x;default:break y}}e=b+1|0;continue}break}H[d>>2]=b;f=6;break a}H[d>>2]=b+1;f=7;break a}a=b+1|0;if((a|0)==(c|0)){f=-3;break a}H[d>>2]=I[I[b+1|0]+h|0]==10?b+2|0:a;f=7;break a}f=Bg(a,b+1|0,c,d);break a}b=b+2|0}while(1){if((b|0)==(c|0)){break a}e=1;z:{A:{B:{C:{D:{E:{F:{switch(I[I[b|0]+h|0]-5|0){case 0:if((c-b|0)<2){break d}if(!(La[H[a+328>>2]](a,b)|0)){break C}e=2;break z;case 1:if((c-b|0)<3){break d}if(!(La[H[a+332>>2]](a,b)|0)){break C}e=3;break z;case 2:if((c-b|0)<4){break d}if(!(La[H[a+336>>2]](a,b)|0)){break C}e=4;break z;case 17:case 19:case 20:case 21:case 22:break z;case 12:break D;case 6:break E;case 4:case 5:case 16:break F;default:break C}}G:{H:{I:{while(1){e=b;b=b+1|0;if((c|0)==(b|0)){break a}g=2;J:{switch(I[I[b|0]+h|0]-5|0){case 12:break D;case 6:break E;case 17:case 19:break G;case 2:break H;case 1:break I;case 4:case 5:case 16:continue;case 0:break J;default:break C}}break}if((c-b|0)<2){break d}if(!(La[H[a+340>>2]](a,b)|0)){break C}g=3;break G}if((c-b|0)<3){break d}if(!(La[H[a+344>>2]](a,b)|0)){break C}g=4;break G}if((c-b|0)<4){break d}if(!(La[H[a+348>>2]](a,b)|0)){break C}g=5}b=e+g|0;H[i+12>>2]=b;while(1){if((b|0)==(c|0)){break a}K:{L:{M:{switch(I[I[b|0]+h|0]-5|0){case 0:if((c-b|0)<2){break d}if(!(La[H[a+328>>2]](a,b)|0)){break A}b=b+2|0;break L;case 1:if((c-b|0)<3){break d}if(!(La[H[a+332>>2]](a,b)|0)){break A}b=b+3|0;break L;case 2:if((c-b|0)<4){break d}if(!(La[H[a+336>>2]](a,b)|0)){break A}b=b+4|0;break L;case 4:case 5:case 16:while(1){b=b+1|0;if((c|0)==(b|0)){break a}N:{O:{e=I[I[b|0]+h|0];switch(e-9|0){case 2:case 3:case 4:break A;case 0:case 1:continue;case 5:break N;default:break O}}if((e|0)!=21){break A}continue}break};H[i+12>>2]=b;case 9:while(1){e=b+1|0;if((e|0)==(c|0)){break a}g=I[I[e|0]+h|0];if((g&254)!=12){if(g>>>0>21){break B}b=e;if(1<<g&2098688){continue}break B}break};P:while(1){b=b+2|0;Q:while(1){H[i+12>>2]=b;R:{S:{while(1){if((b|0)==(c|0)){break a}e=I[I[b|0]+h|0];if((e|0)==(g|0)){break R}T:{switch(e|0){case 5:if((c-b|0)<2){break d}if(!(La[H[a+352>>2]](a,b)|0)){continue P}break A;case 6:if((c-b|0)<3){break d}if(La[H[a+356>>2]](a,b)|0){break A}b=b+3|0;continue Q;case 7:if((c-b|0)<4){break d}if(La[H[a+360>>2]](a,b)|0){break A}b=b+4|0;continue Q;case 0:case 1:case 2:case 8:break A;case 3:break T;default:break S}}b=Bg(a,b+1|0,c,i+12|0);if((b|0)>0){b=H[i+12>>2];continue}break}f=b;if(b){break a}b=H[i+12>>2];break A}b=b+1|0;continue}break}break};g=b+1|0;H[i+12>>2]=g;if((c|0)==(g|0)){break a}e=b;U:{V:{W:{b=g;g=I[I[b|0]+h|0];switch(g-9|0){case 3:case 4:case 5:case 6:case 7:break A;case 2:break K;case 8:break U;case 0:case 1:break V;default:break W}}if((g|0)==21){break V}break A}X:{Y:{Z:{while(1){e=b;b=b+1|0;if((c|0)==(b|0)){break a}_:{switch(I[I[b|0]+h|0]-5|0){case 6:break K;case 12:break U;case 2:break X;case 1:break Y;case 0:break Z;case 4:case 5:case 16:continue;case 17:case 19:break _;default:break A}}break}b=e+2|0;break L}if((c-b|0)<2){break d}if(!(La[H[a+340>>2]](a,b)|0)){break A}b=e+3|0;break L}if((c-b|0)<3){break d}if(!(La[H[a+344>>2]](a,b)|0)){break A}b=e+4|0;break L}if((c-b|0)<4){break d}if(!(La[H[a+348>>2]](a,b)|0)){break A}b=e+5|0;break L}a=b+1|0;H[i+12>>2]=a;if((a|0)==(c|0)){break a}c=a;a=I[b+1|0]==62;b=a?b+2|0:c;j=a?3:0;break A;case 17:case 19:case 20:case 21:case 22:break M;default:break A}}b=b+1|0}H[i+12>>2]=b;continue}break}b=e+2|0;j=1;break A}H[d>>2]=b+1;f=2;break a}a=b+1|0;if((a|0)==(c|0)){break a}if(I[b+1|0]!=62){H[d>>2]=a;f=0;break a}H[d>>2]=b+2;f=4;break a}H[d>>2]=b;f=0;break a}b=e}H[d>>2]=b;f=j;break a}b=b+e|0;continue}}e=b+2|0;if((e|0)==(c|0)){break b}f=0;$:{aa:{ba:{ca:{da:{ea:{g=I[I[e|0]+h|0];switch(g-5|0){case 2:break ba;case 1:break ca;case 0:break da;default:break ea}}fa:{switch(g-22|0){case 0:case 2:break fa;default:break $}}e=b+3|0;break aa}if((c-e|0)<2){break d}if(!(La[H[a+340>>2]](a,e)|0)){break $}e=b+4|0;break aa}if((c-e|0)<3){break d}if(!(La[H[a+344>>2]](a,e)|0)){break $}e=b+5|0;break aa}if((c-e|0)<4){break d}if(!(La[H[a+348>>2]](a,e)|0)){break $}e=b+6|0}while(1){if((c|0)==(e|0)){break b}b=1;ga:{ha:{ia:{ja:{switch(I[I[e|0]+h|0]-5|0){case 0:if((c-e|0)<2){break d}if(!(La[H[a+328>>2]](a,e)|0)){break $}b=2;break ga;case 1:if((c-e|0)<3){break d}if(!(La[H[a+332>>2]](a,e)|0)){break $}b=3;break ga;case 2:if((c-e|0)<4){break d}if(!(La[H[a+336>>2]](a,e)|0)){break $}b=4;break ga;case 4:case 5:case 16:while(1){a=e;e=a+1|0;if((e|0)==(c|0)){break b}ka:{b=I[I[e|0]+h|0];switch(b-9|0){case 0:case 1:continue;case 2:break ia;default:break ka}}if((b|0)==21){continue}break};break $;case 6:break ja;case 17:case 19:case 20:case 21:case 22:break ga;default:break $}}e=e+1|0;break ha}e=a+2|0}f=5;break $}e=b+e|0;continue}}H[d>>2]=e;break a}f=Dq(a,b+2|0,c,d);break a}H[d>>2]=e;f=0;break a}f=-2;break a}H[d>>2]=e;f=0;break a}f=-1}Ha=i+16|0;return f|0}function fq(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=Ha-128|0;Ha=j;a:{while(1){b:{e=I[c|0];c:{if((e|0)!=37){d=m;if(!e){break a}F[a+d|0]=e;m=d+1|0;break c}o=0;e=1;d:{e:{f:{g=I[c+1|0];switch(g-45|0){case 1:case 2:break d;case 0:case 3:break e;default:break f}}if((g|0)!=95){break d}}o=g;g=I[c+2|0];e=2}s=0;t=g&255;l=(c+e|0)+((t|0)==43)|0;g:{if(F[l|0]-48>>>0<=9){d=0;f=0;p=0;g=0;n=0;e=l;c=I[e|0];h:{if(!c){break h}i:{while(1){if(!Kd(c<<24>>24)){break i}c=I[e+1|0];e=e+1|0;if(c){continue}break}break h}j:{c=c&255;switch(c-43|0){case 0:case 2:break j;default:break h}}p=(c|0)==45?-1:0;e=e+1|0}k:{l:{while(1){i=I[e|0]-48|0;if((i&255)>>>0>=10){m:{H[j+12>>2]=n?e:l;if(!g){break m}H[12604]=68;p=0;c=-1;break l}}else{c=1;n:{if((f|0)==429496729&d>>>0>2576980377|f>>>0>429496729){break n}h=gy(d,f,10,0);k=Ka;i=i&255;if((k|0)==-1&(i^-1)>>>0<h>>>0){break n}f=k;d=h+i|0;f=d>>>0<i>>>0?f+1|0:f;n=1;c=g}e=e+1|0;g=c;continue}break}c=-1;if(!f&(d|0)!=-1){c=d;break l}if(!f&(d|0)==-1){break l}H[12604]=68;e=-1;break k}e=(c^p)-p|0}p=H[j+12>>2];break g}H[j+12>>2]=l;e=0;p=l}g=I[p|0];c=g-67|0;o:{if(c>>>0>22|!(1<<c&4194329)){break o}s=e;if(e){break o}s=(l|0)!=(p|0)}p:{if((g|0)!=79){c=p;if((g|0)!=69){break p}}g=I[p+1|0];c=p+1|0}l=j+16|0;e=0;q=0;i=Ha-80|0;Ha=i;d=3726;u=48;n=131112;q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{F:{G:{H:{I:{J:{K:{L:{M:{N:{O:{P:{Q:{R:{S:{T:{U:{V:{W:{X:{Y:{Z:{_:{$:{aa:{ba:{ca:{da:{ea:{fa:{ga:{ha:{h=g<<24>>24;switch(h-37|0){case 31:break w;case 62:break x;case 77:break y;case 0:break C;case 53:break D;case 85:break E;case 52:break F;case 84:break G;case 51:break H;case 83:break I;case 82:break K;case 49:break L;case 50:break M;case 48:break N;case 80:break O;case 47:break P;case 79:break Q;case 46:break R;case 78:break S;case 45:break T;case 75:break U;case 73:break V;case 40:break W;case 72:break X;case 69:break Y;case 36:break Z;case 35:break _;case 34:case 66:break $;case 33:break aa;case 63:break ba;case 64:break ca;case 30:break da;case 29:break ea;case 61:case 67:break fa;case 28:break ga;case 60:break ha;default:break q}}d=H[14738];if(d>>>0<=6){break A}break s}d=H[14738];if(d>>>0>6){break s}e=d+131079|0;break z}d=H[14736];if(d>>>0>11){break s}e=d+131086|0;break z}d=H[14736];if(d>>>0>11){break s}e=d+131098|0;break z}d=H[14737];f=d>>31;d=d+1900|0;f=d>>>0<1900?f+1|0:f;d=hy(d,f,100);f=Ka;break v}u=95}d=H[14735];f=d>>31;break v}d=11074;break w}g=H[14737];e=g>>31;d=g+1900|0;f=d>>>0<1900?e+1|0:e;k=H[14739];ia:{if((k|0)<=2){g=g+1899|0;e=g>>>0<1899?e+1|0:e;k=g;g=(Wi()|0)==1;d=g?d:k;f=g?f:e;break ia}if(k>>>0<361){break ia}g=g+1901|0;e=g>>>0<1901?e+1|0:e;k=g;g=(Wi()|0)==1;d=g?k:d;f=g?e:f}if((h|0)==103){break B}break u}d=H[14734];f=d>>31;break v}e=2;f=H[14734];if(!f){d=12;f=0;break t}h=(f|0)>12;d=h?f-12|0:f;g=f>>31;f=h?g-(f>>>0<12)|0:g;break t}d=H[14739]+1|0;f=d>>31;e=3;break t}d=H[14736]+1|0;f=d>>31;break v}d=H[14733];f=d>>31;break v}H[j+124>>2]=1;e=30320;break q}e=H[14734]>11?131111:131110;break z}d=11986;break w}e=Ha-16|0;Ha=e;d=H[14737];f=d>>31;g=H[14736];if(g>>>0>=12){k=(g|0)/12|0;h=N(k,-12)+g|0;g=(h|0)<0?h+12|0:h;h=k+(h>>31)|0;f=f+(h>>31)|0;k=d;d=d+h|0;f=k>>>0>d>>>0?f+1|0:f}ja:{if((d>>>0<2|0)==(f|0)&d-2>>>0<=136){f=!(d&3);H[e+12>>2]=f;d=(N(d,31536e3)+N((d-68>>>2|0)-f|0,86400)|0)+2087447296|0;f=d>>31;break ja}h=d-100|0;d=f-(d>>>0<100)|0;r=d;k=hy(h,d,400);d=gy(k,Ka,-400,-1);f=r+Ka|0;d=d+h|0;f=d>>>0<h>>>0?f+1|0:f;k=k+(f>>31)|0;d=(f|0)<0?d+400|0:d;ka:{if(!d){n=0;f=1;break ka}la:{if((d|0)>=200){if(d>>>0>=300){n=3;d=d-300|0;break la}n=2;d=d-200|0;break la}n=(d|0)>99;d=n?d-100|0:d}f=0;if(!d){break ka}q=d>>>2|0;f=!(d&3)}H[e+12>>2]=f;h=gy(h,r,31536e3,0);r=Ka;v=h;d=((N(n,24)+N(k,97)|0)+q|0)-f|0;h=gy(d,d>>31,86400,0);d=v+h|0;f=Ka+r|0;f=d>>>0<h>>>0?f+1|0:f;d=d+946771200|0;f=d>>>0<946771200?f+1|0:f}r=H[14735];k=H[14734];n=H[14733];Ha=e+16|0;h=H[14732];q=H[(g<<2)+38928>>2];e=(g|0)>1?H[e+12>>2]?q+86400|0:q:q;f=(e>>31)+f|0;g=e;e=d+e|0;f=g>>>0>e>>>0?f+1|0:f;d=r-1|0;g=gy(d,d>>31,86400,0);d=g+e|0;e=Ka+f|0;e=d>>>0<g>>>0?e+1|0:e;g=gy(k,k>>31,3600,0);d=g+d|0;f=Ka+e|0;f=d>>>0<g>>>0?f+1|0:f;e=gy(n,n>>31,60,0);d=e+d|0;f=Ka+f|0;f=(d>>>0<e>>>0?f+1|0:f)+(h>>31)|0;e=d+h|0;f=e>>>0<d>>>0?f+1|0:f;g=H[14741];d=e-g|0;f=f-((g>>31)+(e>>>0<g>>>0)|0)|0;break J}d=H[14732];f=d>>31;break v}H[j+124>>2]=1;e=30322;break q}d=11610;break w}d=H[14738];d=d?d:7;f=d>>31;break J}d=((H[14739]-H[14738]|0)+7>>>0)/7|0;f=0;break v}d=((H[14739]-((H[14738]+6>>>0)%7|0)|0)+7>>>0)/7|0;f=0;break v}d=Wi();f=0;break v}d=H[14738];f=d>>31}e=1;break t}n=131113;break x}n=131114;break x}d=H[14737];e=d>>31;d=d+1900|0;e=d>>>0<1900?e+1|0:e;e=iy(d,e);d=Ka;h=d;f=d>>31;d=e;e=f;g=d^e;d=g-e|0;f=(e^h)-((e>>>0>g>>>0)+e|0)|0;break v}d=H[14737];f=d>>31;g=d;e=f;d=d+1900|0;f=d>>>0<1900?e+1|0:e;if(g>>>0<8100&(e|0)<=0|(e|0)<0){break u}H[i+48>>2]=d;H[i+52>>2]=f;w=j,x=jc(l,100,10609,i+48|0),H[w+124>>2]=x;e=l;break q}if(H[14740]<0){H[j+124>>2]=0;e=40736;break q}d=H[14741];e=(d|0)/3600|0;H[i+64>>2]=N(e,100)+((d+N(e,61936)<<16>>16)/60<<16>>16);w=j,x=jc(l,100,10615,i- -64|0),H[w+124>>2]=x;e=l;break q}if(H[14740]<0){H[j+124>>2]=0;e=40736;break q}e=H[14742];hq();break r}H[j+124>>2]=1;e=14960;break q}d=iy(d,f);f=Ka;break v}e=d|131072}e=gq(e);break r}n=131115}d=gq(n)}d=fq(l,100,d);H[j+124>>2]=d;e=d?l:0;break q}e=2;break t}e=4}ma:{g=o?o:u;if((g|0)!=95){if((g|0)!=45){break ma}H[i+16>>2]=d;H[i+20>>2]=f;w=j,x=jc(l,100,10610,i+16|0),H[w+124>>2]=x;e=l;break q}H[i+40>>2]=d;H[i+44>>2]=f;H[i+32>>2]=e;w=j,x=jc(l,100,10603,i+32|0),H[w+124>>2]=x;e=l;break q}H[i+8>>2]=d;H[i+12>>2]=f;H[i>>2]=e;w=j,x=jc(l,100,10596,i),H[w+124>>2]=x;e=l;break q}e=14710}w=j,x=Yb(e),H[w+124>>2]=x}Ha=i+80|0;o=e;if(!e){break b}na:{if(!s){e=H[j+124>>2];break na}oa:{pa:{qa:{g=I[o|0];switch(g-43|0){case 0:case 2:break pa;default:break qa}}e=H[j+124>>2];break oa}g=I[o+1|0];o=o+1|0;e=H[j+124>>2]-1|0}ra:{if((g&255)!=48){break ra}while(1){d=F[o+1|0];if(d-48>>>0>9){break ra}o=o+1|0;e=e-1|0;if((d|0)==48){continue}break}}H[j+124>>2]=e;g=0;while(1){d=g;g=d+1|0;if(F[d+o|0]-48>>>0<10){continue}break}g=e>>>0<s>>>0?s:e;f=a+m|0;sa:{if(H[14737]<-1900){d=45}else{if((t|0)!=43|d+(g-e|0)>>>0<(I[p|0]==67?3:5)>>>0){break sa}d=43}F[f|0]=d;g=g-1|0;m=m+1|0}if(b>>>0<=m>>>0|e>>>0>=g>>>0){break na}while(1){F[a+m|0]=48;m=m+1|0;g=g-1|0;if(g>>>0<=e>>>0){break na}if(b>>>0>m>>>0){continue}break}}d=b-m|0;d=d>>>0>e>>>0?e:d;H[j+124>>2]=d;jb(a+m|0,o,d);m=H[j+124>>2]+m|0}c=c+1|0;if(b>>>0>m>>>0){continue}}break}m=(b|0)==(m|0)?b-1|0:m;d=0}F[a+m|0]=0;Ha=j+128|0;return d}function nu(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=O(0),j=0,k=0,l=O(0),m=0,n=0,o=0,p=0,q=O(0),r=O(0),s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,C=0;e=Ha-160|0;Ha=e;o=wh(H[b+4>>2]);g=H[b+8>>2];if(g){c=H[g+12>>2]}f=(c|0)>0?c:0;c=0;a:{while(1){if((c|0)==(f|0)){b:{c:{if(!d){break c}g=H[d+8>>2];if(!g|H[g+12>>2]<=0){break c}if(Hb(H[H[H[g>>2]>>2]>>2],8134)){break c}h=Xa(16);H[h>>2]=0;H[h+4>>2]=10;H[h+8>>2]=0;H[h+12>>2]=0;Nl(o,H[a+16>>2],h,d);d=H[a+16>>2];c=1;c=H[h+12>>2]?(I[H[H[h>>2]>>2]+13|0]&64)>>>6|0:c;m=Nh(Xa(52),o,d,c);j=ke(Xa(580),5);H[m+44>>2]=j;p=j+528|0;g=0;d=0;while(1){d:{c=H[h+12>>2];if((g|0)>=(c|0)){d=0;if(H[j+540>>2]>0){g=H[j+528>>2];jb(j+60|0,H[g>>2]+60|0,224);jb(j+284|0,H[(g+(c<<2)|0)-4>>2]+284|0,224)}break d}f=H[H[H[h>>2]+(g<<2)>>2]+44>>2];Hc(p,f);L[j+40>>2]=L[f+40>>2]+L[j+40>>2];if(d){La[H[H[f>>2]+40>>2]](f,d+284|0)}g=g+1|0;d=f;continue}break}while(1){e:{if((c|0)>(d|0)){c=H[H[h>>2]+(d<<2)>>2];g=H[c+44>>2];while(1){f=g;if(!f){break e}f:{switch(H[f+4>>2]-5|0){case 0:case 1:g=0;if(H[f+540>>2]<=0){continue}g=H[H[f+528>>2]>>2];continue;case 2:g=H[f+528>>2];continue;case 4:F[f+532|0]=1;g=0;H[c+44>>2]=0;continue;default:break f}}db();g=H[m+8>>2];H[e+100>>2]=H[f+4>>2];H[e+96>>2]=g;Wa(20286,e+96|0);g=0;continue}}H[a>>2]=m;d=H[h>>2];if(d){Va(d);H[h>>2]=0}H[h+8>>2]=0;H[h+12>>2]=0;Va(h);g=H[a>>2];break b}d=d+1|0;c=H[h+12>>2];continue}}g=cm(o,H[a+16>>2],d);H[a>>2]=g}Ml(b,g);g:{h:{i:{j:{k:{if(!k){break k}v=H[k+8>>2];l=ab(H[k+4>>2],4274,O(1));Sl(g);w=H[g+48>>2];m=0;while(1){if(H[v+12>>2]<=(m|0)){if(l==O(1)){break k}c=0;while(1){if((c|0)==8){break k}d=H[(c<<2)+w>>2];if(d){Ll(H[d+4>>2],l)}c=c+1|0;continue}}p=H[H[v>>2]+(m<<2)>>2];d=H[p>>2];f=Mf(H[14659],dd(d));l:{if(!f){db();f=H[g+8>>2];H[e+8>>2]=H[k>>2];H[e+4>>2]=d;H[e>>2]=f;Wa(27883,e);F[52606]=1;break l}x=(f<<2)+w|0;if(H[x>>2]){db();f=H[g+8>>2];H[e+88>>2]=H[k>>2];H[e+84>>2]=d;H[e+80>>2]=f;Wa(27963,e+80|0);F[52605]=1;break l}y=H[p+4>>2];z=H[p+8>>2];f=Xa(16);H[f+12>>2]=0;H[f+4>>2]=10;H[f+8>>2]=1;d=ib(4);H[f>>2]=d;if(!d){break j}h=0;ud(f,0,1);m:{while(1){n:{if(H[z+12>>2]<=(h|0)){if(H[f+12>>2]){break n}Kl(f);nb(f);Va(f);c=0;break m}j=H[H[z>>2]+(h<<2)>>2];d=dd(H[j>>2]);c=d-39|0;o:{if(c>>>0<=19){p:{q:{c=1<<c;if(!(c&917376)){if(!(c&127)){break o}t=H[j+8>>2];if(!H[t+12>>2]){break o}d=Xa(16);c=H[t+12>>2];H[d+12>>2]=0;H[d+4>>2]=10;if(c){break q}H[d+8>>2]=0;H[d>>2]=0;break p}H[e+144>>2]=1065353216;H[e+148>>2]=1065353216;H[e+136>>2]=-1082130432;H[e+140>>2]=1065353216;H[e+132>>2]=0;G[e+128>>1]=65535;H[e+124>>2]=0;c=e+124|0;Jl(c,Mf(H[14664],d),j);if(!H[e+124>>2]&J[e+128>>1]==65535){break o}d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;Il(d,c);Hl(f,d);break o}H[d+8>>2]=c;n=ib(N(c,28));H[d>>2]=n;if(!n){break i}Gl(d,0,c)}c=0;while(1){if(H[t+12>>2]<=(c|0)){if(H[d+12>>2]>0){i=ab(H[j+4>>2],4274,O(1));if(i!=O(1)){Fl(d,i)}Hl(f,d);break o}}else{n=H[H[t>>2]+(c<<2)>>2];u=dd(H[n>>2]);s=u-46|0;r:{if(!(s>>>0>12|(s|0)==10)){H[e+144>>2]=1065353216;H[e+148>>2]=1065353216;H[e+136>>2]=-1082130432;H[e+140>>2]=1065353216;H[e+132>>2]=0;G[e+128>>1]=65535;H[e+124>>2]=0;s=e+124|0;Jl(s,Mf(H[14664],u),n);if(!H[e+124>>2]&J[e+128>>1]==65535){break r}Il(d,s);break r}db();n=H[n>>2];H[e+56>>2]=H[j>>2];H[e+52>>2]=u;H[e+48>>2]=n;Wa(28036,e+48|0);F[52605]=1}c=c+1|0;continue}break}nb(d);Va(d);break o}db();c=H[j>>2];H[e+40>>2]=H[p>>2];H[e+36>>2]=d;H[e+32>>2]=c;Wa(28036,e+32|0);F[52605]=1}h=h+1|0;continue}break}i=ab(H[p+4>>2],4274,O(1));if(i!=O(1)){Ll(f,i)}c=Xa(28);H[c+20>>2]=0;H[c+24>>2]=0;H[c>>2]=32240;F[c+16|0]=0;A=c,C=Ve(H[14605],fb(y,7556)),H[A+8>>2]=C;d=Ve(H[14606],fb(y,7536));H[c+4>>2]=f;H[c+12>>2]=d}H[x>>2]=c}m=m+1|0;continue}}if(!H[g+48>>2]){break g}l=O(0);d=0;while(1){if((d|0)==8){s:{H[e+124>>2]=-1082130432;if(!H[g+48>>2]){break s}f=!ic(H[b+4>>2],e+124|0,7603);i=L[e+124>>2];if(!(f|!(i>O(0)))){H[e+156>>2]=1065353216;H[e+152>>2]=1065353216;t:{if(!ic(H[b+4>>2],e+156|0,10913)){break t}q=L[e+156>>2];if(!(q>O(0))|q==O(1)){break t}i=O(i/q)}b=ic(H[b+4>>2],e+152|0,10033);q=L[e+152>>2];i=b?q>O(0)?O(q*i):i:i}if(!(i>O(0))){break s}c=0;while(1){if((c|0)==8){break g}b=H[H[g+48>>2]+(c<<2)>>2];if(b){d=H[b+20>>2];if(d){La[H[H[d>>2]+20>>2]](d,O(O(i*L[d+16>>2])/L[b+24>>2]))}L[b+24>>2]=i}c=c+1|0;continue}}}else{f=H[H[g+48>>2]+(d<<2)>>2];u:{if(!f){break u}h=H[f+20>>2];if(h){La[H[H[h>>2]+4>>2]](h);H[f+20>>2]=0}v:{w:{x:{y:{z:{k=H[f+4>>2];A:{if(!k){break A}B:{switch(H[k+12>>2]){case 1:break z;case 0:break A;default:break B}}c=0;h=Lf(Xa(28));C:{while(1){j=c<<16>>16;if((j|0)>=H[k+12>>2]){D:{c=H[h+24>>2];switch(H[c+12>>2]){case 0:break C;case 1:break D;default:break x}}}else{j=El((j|0)>=0?H[H[k>>2]+(j<<2)>>2]:0);if(j){Pb(H[h+24>>2],j)}c=c+1|0;continue}break}k=H[H[c>>2]>>2];Xc(c,0,0);La[H[H[h>>2]+4>>2]](h);break y}La[H[H[h>>2]+4>>2]](h)}c=0;H[f+20>>2]=0;i=O(0);break v}k=El(H[H[k>>2]>>2])}h=k;H[f+20>>2]=h;if(h){break w}c=0;i=O(0);break v}H[f+20>>2]=h}La[H[H[h>>2]+12>>2]](h,O(0));c=H[f+20>>2];i=L[c+16>>2]}L[f+24>>2]=i;r=i<r?r:i;if(!c){break u}i=L[c+8>>2];if(l==O(0)){l=i;break u}l=i>l?l:i}d=d+1|0;continue}break}c=H[g+44>>2];l=O(Kf(c)-l);if(!(l>O(0))){break h}c=0;while(1){if((c|0)==8){r=O(r+l);c=H[g+44>>2];break h}b=H[H[g+48>>2]+(c<<2)>>2];if(b){d=H[b+20>>2];if(d){La[H[H[d>>2]+36>>2]](d,l)}L[b+24>>2]=l+L[b+24>>2]}c=c+1|0;continue}}H[e+16>>2]=1;Wa(24301,e+16|0);H[f+8>>2]=0;break a}H[e+64>>2]=c;Wa(24301,e- -64|0);H[d+8>>2]=0;break a}if(!(L[c+40>>2]<r)){break g}La[H[H[c>>2]+64>>2]](c,r,0)}Vl(g);d=H[a+4>>2];if(d){E:{F:{G:{H:{f=H[d>>2]+((de(o)>>>0)%K[d+4>>2]<<3)|0;switch(J[f+4>>1]){case 1:break G;case 0:break H;default:break F}}b=Xa(12);H[b+8>>2]=0;H[b+4>>2]=g;H[b>>2]=o;H[f>>2]=b;H[d+12>>2]=H[d+12>>2]-1;b=16;break E}H[d+16>>2]=H[d+16>>2]-1}h=H[f>>2];b=Xa(12);H[b+8>>2]=H[h+8>>2];H[b>>2]=o;H[b+4>>2]=g;H[h+8>>2]=b;b=8}b=b+d|0;H[b>>2]=H[b>>2]+1;G[f+4>>1]=J[f+4>>1]+1;H[d+24>>2]=H[d+24>>2]+1}Dl(H[a+12>>2],g);Ha=e+160|0}else{g=H[H[H[b+8>>2]>>2]+(c<<2)>>2];h=H[g>>2];I:{J:{if(!Hb(h,8134)){if(!d){d=g;break I}g=29180;break J}if(Hb(h,8119)){break I}if(!k){k=g;break I}g=29115}db();h=H[b>>2];H[e+116>>2]=o;H[e+112>>2]=h;Wa(g,e+112|0);F[52605]=1}c=c+1|0;continue}break}return}a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}function Nw(a,b,c,d,e,f){a=a|0;b=+b;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,w=0,x=0,y=0,z=0;n=Ha-560|0;Ha=n;H[n+44>>2]=0;A(+b);h=v(1)|0;v(0)|0;a:{if((h|0)<0){t=1;y=3952;b=-b;A(+b);h=v(1)|0;v(0)|0;break a}if(e&2048){t=1;y=3955;break a}t=e&1;y=t?3958:3953;z=!t}b:{if((h&2146435072)==2146435072){h=t+3|0;nc(a,32,c,h,e&-65537);fc(a,y,t);d=f&32;fc(a,b!=b?d?7903:11982:d?8805:12385,3);nc(a,32,c,h,e^8192);m=(c|0)>(h|0)?c:h;break b}w=n+16|0;c:{d:{e:{b=_p(b,n+44|0);b=b+b;if(b!=0){h=H[n+44>>2];H[n+44>>2]=h-1;x=f|32;if((x|0)!=97){break e}break c}x=f|32;if((x|0)==97){break c}l=H[n+44>>2];k=(d|0)<0?6:d;break d}l=h-29|0;H[n+44>>2]=l;b=b*268435456;k=(d|0)<0?6:d}o=(n+48|0)+((l|0)>=0?288:0)|0;h=o;while(1){if(b<4294967296&b>=0){d=~~b>>>0}else{d=0}H[h>>2]=d;h=h+4|0;b=(b-+(d>>>0))*1e9;if(b!=0){continue}break}f:{if((l|0)<=0){i=l;g=h;j=o;break f}j=o;i=l;while(1){p=i>>>0>=29?29:i;g=h-4|0;g:{if(j>>>0>g>>>0){break g}q=0;while(1){r=0;d=H[g>>2];i=p&31;m=q;if((p&63)>>>0>=32){q=d<<i;d=0}else{q=(1<<i)-1&d>>>32-i;d=d<<i}i=m+d|0;r=q+r|0;r=d>>>0>i>>>0?r+1|0:r;q=jy(i,r,1e9);m=gy(q,Ka,-1e9,0);d=r;r=i+m|0;H[g>>2]=r;g=g-4|0;if(j>>>0<=g>>>0){continue}break}if(!d&i>>>0<1e9){break g}j=j-4|0;H[j>>2]=q}while(1){g=h;if(j>>>0<g>>>0){h=g-4|0;if(!H[h>>2]){continue}}break}i=H[n+44>>2]-p|0;H[n+44>>2]=i;h=g;if((i|0)>0){continue}break}}if((i|0)<0){u=((k+25>>>0)/9|0)+1|0;q=(x|0)==102;while(1){d=0-i|0;m=d>>>0>=9?9:d;h:{if(g>>>0<=j>>>0){h=!H[j>>2]<<2;break h}r=1e9>>>m|0;p=-1<<m^-1;i=0;h=j;while(1){d=H[h>>2];H[h>>2]=(d>>>m|0)+i;i=N(r,d&p);h=h+4|0;if(h>>>0<g>>>0){continue}break}h=!H[j>>2]<<2;if(!i){break h}H[g>>2]=i;g=g+4|0}i=m+H[n+44>>2]|0;H[n+44>>2]=i;j=h+j|0;d=q?o:j;g=g-d>>2>(u|0)?d+(u<<2)|0:g;if((i|0)<0){continue}break}}i=0;i:{if(g>>>0<=j>>>0){break i}i=N(o-j>>2,9);h=10;d=H[j>>2];if(d>>>0<10){break i}while(1){i=i+1|0;h=N(h,10);if(d>>>0>=h>>>0){continue}break}}d=(k-((x|0)!=102?i:0)|0)-((x|0)==103&(k|0)!=0)|0;if((d|0)<(N(g-o>>2,9)-9|0)){h=(n+48|0)+((l|0)<0?-4092:-3804)|0;l=d+9216|0;d=(l|0)/9|0;m=h+(d<<2)|0;h=10;d=l+N(d,-9)|0;if((d|0)<=7){while(1){h=N(h,10);d=d+1|0;if((d|0)!=8){continue}break}}l=H[m>>2];u=(l>>>0)/(h>>>0)|0;p=N(u,h);d=m+4|0;j:{if((l|0)==(p|0)&(d|0)==(g|0)){break j}l=l-p|0;k:{if(!(u&1)){b=9007199254740992;if(!(F[m-4|0]&1)|((h|0)!=1e9|j>>>0>=m>>>0)){break k}}b=9007199254740994}s=(d|0)==(g|0)?1:1.5;d=h>>>1|0;s=d>>>0>l>>>0?.5:(d|0)==(l|0)?s:1.5;if(!(I[y|0]!=45|z)){s=-s;b=-b}H[m>>2]=p;if(b+s==b){break j}d=h+p|0;H[m>>2]=d;if(d>>>0>=1e9){while(1){H[m>>2]=0;m=m-4|0;if(m>>>0<j>>>0){j=j-4|0;H[j>>2]=0}d=H[m>>2]+1|0;H[m>>2]=d;if(d>>>0>999999999){continue}break}}i=N(o-j>>2,9);h=10;d=H[j>>2];if(d>>>0<10){break j}while(1){i=i+1|0;h=N(h,10);if(d>>>0>=h>>>0){continue}break}}d=m+4|0;g=d>>>0<g>>>0?d:g}while(1){l=g;p=g>>>0<=j>>>0;if(!p){g=g-4|0;if(!H[g>>2]){continue}}break}l:{if((x|0)!=103){q=e&8;break l}h=k?k:1;d=(h|0)>(i|0)&(i|0)>-5;k=(d?i^-1:-1)+h|0;f=(d?-1:-2)+f|0;q=e&8;if(q){break l}g=-9;m:{if(p){break m}p=H[l-4>>2];if(!p){break m}d=10;g=0;if((p>>>0)%10|0){break m}while(1){h=g;g=g+1|0;d=N(d,10);if(!((p>>>0)%(d>>>0)|0)){continue}break}g=h^-1}d=N(l-o>>2,9);if((f&-33)==70){q=0;d=(d+g|0)-9|0;d=(d|0)>0?d:0;k=(d|0)>(k|0)?k:d;break l}q=0;d=((d+i|0)+g|0)-9|0;d=(d|0)>0?d:0;k=(d|0)>(k|0)?k:d}m=-1;p=k|q;if(((p?2147483645:2147483646)|0)<(k|0)){break b}r=(((p|0)!=0)+k|0)+1|0;h=f&-33;n:{if((h|0)==70){if((r^2147483647)<(i|0)){break b}g=(i|0)>0?i:0;break n}d=i>>31;g=Fe((d^i)-d|0,0,w);if((w-g|0)<=1){while(1){g=g-1|0;F[g|0]=48;if((w-g|0)<2){continue}break}}u=g-2|0;F[u|0]=f;F[g-1|0]=(i|0)<0?45:43;g=w-u|0;if((g|0)>(r^2147483647)){break b}}d=g+r|0;if((d|0)>(t^2147483647)){break b}i=d+t|0;nc(a,32,c,i,e);fc(a,y,t);nc(a,48,c,i,e^65536);o:{p:{q:{if((h|0)==70){h=n+16|9;f=j>>>0>o>>>0?o:j;j=f;while(1){g=Fe(H[j>>2],0,h);r:{if((f|0)!=(j|0)){if(n+16>>>0>=g>>>0){break r}while(1){g=g-1|0;F[g|0]=48;if(n+16>>>0<g>>>0){continue}break}break r}if((g|0)!=(h|0)){break r}g=g-1|0;F[g|0]=48}fc(a,g,h-g|0);j=j+4|0;if(o>>>0>=j>>>0){continue}break}if(p){fc(a,14708,1)}if((k|0)<=0|j>>>0>=l>>>0){break q}while(1){g=Fe(H[j>>2],0,h);if(g>>>0>n+16>>>0){while(1){g=g-1|0;F[g|0]=48;if(n+16>>>0<g>>>0){continue}break}}fc(a,g,(k|0)>=9?9:k);g=k-9|0;j=j+4|0;if(l>>>0<=j>>>0){break p}d=(k|0)>9;k=g;if(d){continue}break}break p}s:{if((k|0)<0){break s}f=j>>>0<l>>>0?l:j+4|0;l=n+16|9;h=j;while(1){g=Fe(H[h>>2],0,l);if((l|0)==(g|0)){g=g-1|0;F[g|0]=48}t:{if((h|0)!=(j|0)){if(n+16>>>0>=g>>>0){break t}while(1){g=g-1|0;F[g|0]=48;if(n+16>>>0<g>>>0){continue}break}break t}fc(a,g,1);g=g+1|0;if(!(k|q)){break t}fc(a,14708,1)}d=l-g|0;fc(a,g,(d|0)<(k|0)?d:k);k=k-d|0;h=h+4|0;if(f>>>0<=h>>>0){break s}if((k|0)>=0){continue}break}}nc(a,48,k+18|0,18,0);fc(a,u,w-u|0);break o}g=k}nc(a,48,g+9|0,9,0)}nc(a,32,c,i,e^8192);m=(c|0)>(i|0)?c:i;break b}i=(f<<26>>31&9)+y|0;u:{if(d>>>0>11){break u}g=12-d|0;s=16;while(1){s=s*16;g=g-1|0;if(g){continue}break}if(I[i|0]==45){b=-(s+(-b-s));break u}b=b+s-s}o=H[n+44>>2];h=o>>31;g=Fe((h^o)-h|0,0,w);if((w|0)==(g|0)){g=g-1|0;F[g|0]=48}l=t|2;j=f&32;k=g-2|0;F[k|0]=f+15;F[g-1|0]=(o|0)<0?45:43;g=!(e&8)&(d|0)<=0;h=n+16|0;while(1){f=h;if(P(b)<2147483648){o=~~b}else{o=-2147483648}F[h|0]=j|I[o+39760|0];b=(b-+(o|0))*16;h=f+1|0;if(!(g&b==0|(h-(n+16|0)|0)!=1)){F[f+1|0]=46;h=f+2|0}if(b!=0){continue}break}m=-1;g=w-k|0;f=g+l|0;if((2147483645-f|0)<(d|0)){break b}o=f;f=n+16|0;j=h-f|0;d=d?(j-2|0)<(d|0)?d+2|0:j:j;h=o+d|0;nc(a,32,c,h,e);fc(a,i,l);nc(a,48,c,h,e^65536);fc(a,f,j);nc(a,48,d-j|0,0,0);fc(a,k,g);nc(a,32,c,h,e^8192);m=(c|0)>(h|0)?c:h}Ha=n+560|0;return m|0}function tl(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=O(0),n=O(0),o=0,p=0,q=0,r=O(0),s=O(0),t=O(0),u=O(0),v=O(0),w=O(0);e=Ha-80|0;Ha=e;g=H[a+180>>2];c=H[a+184>>2];a:{if(!(!((g|0)==2&(c|0)==1)&((g|0)!=1|(c|0)!=2))){if(ad(a+96|0)){H[a+104>>2]=0;H[a+108>>2]=-1073741824;H[a+96>>2]=1060320051;H[a+100>>2]=0}if(!ad(a+112|0)){break a}H[a+120>>2]=1065353216;H[a+124>>2]=-1073741824;H[a+112>>2]=-1102263091;H[a+116>>2]=1065353216;break a}if(!(!(!g&(c|0)==2|!c&(g|0)==2)|H[a+68>>2]!=2)){if(Ue(a+160|0)){if(I[52728]){db();Db(24912)}H[a+176>>2]=0;H[a+168>>2]=1056964608;H[a+172>>2]=1061997773;H[a+160>>2]=1080033280;H[a+164>>2]=1048576e3}b=a+96|0;if(ad(b)){if(I[52728]){db();Db(24845)}H[b>>2]=0;H[b+4>>2]=0;H[b+8>>2]=0;H[b+12>>2]=0}if(!ad(a+112|0)){break a}if(I[52728]){db();Db(24878)}H[a+120>>2]=0;H[a+124>>2]=0;H[a+112>>2]=1074790400;H[a+116>>2]=0;break a}h=H[a>>2];if(!(!(F[a+216|0]&1)|(h|0)!=1)){if(Ue(a+160|0)){if(I[52728]){db();Db(24912)}H[a+176>>2]=1070386381;H[a+168>>2]=1072064102;H[a+172>>2]=1073741824;H[a+160>>2]=1077097267;H[a+164>>2]=1060320051}h=a+80|0;c=G[a+54>>1];f=1;while(1){if((f|0)==5){break a}b=h+(f<<4)|0;if(!(!ad(b)|c>>>f&1)){H[b+8>>2]=1080033280;H[b+12>>2]=0;H[b>>2]=1080033280;H[b+4>>2]=1080033280}f=f+1|0;continue}}b:{c:{if((h&-2)==8){b=J[a+52>>1];if(!(!(!g&(c|0)==2|!c&(g|0)==2)|(!b|b&2)|H[a+8>>2]!=2)){if(Ue(a+160|0)){if(I[52728]){db();Db(24912)}H[a+176>>2]=0;H[a+168>>2]=1056964608;H[a+172>>2]=1067869798;H[a+160>>2]=1077936128;H[a+164>>2]=1056964608}b=a+96|0;if(!ad(b)){break a}if(I[52728]){db();Db(24845)}H[b>>2]=0;H[b+4>>2]=0;H[b+8>>2]=0;H[b+12>>2]=0;break a}b=J[a+52>>1];if(!b){break b}if(!(b&2)){break c}break b}if(!(I[a+54|0]&2)|(h|0)!=7){break b}}if(H[a+8>>2]==2){break b}if(Ue(a+160|0)){if(I[52728]){db();Db(24912)}H[a+176>>2]=1072902963;H[a+168>>2]=1073741824;H[a+172>>2]=1068708659;H[a+160>>2]=1082130432;H[a+164>>2]=1077936128}b=a+96|0;if(!ad(b)){break a}if(I[52728]){db();Db(24845)}H[b>>2]=0;H[b+4>>2]=0;H[b+8>>2]=0;H[b+12>>2]=0;break a}d:{e:{if(!g){b=1;if((c|0)==1){break e}}b=!c&(g|0)==1}f:{if(H[a+204>>2]==8?b:0){break f}c=H[a+188>>2];b=H[a+192>>2];if(!(!c&(b|0)==1)){if(b|(c|0)!=1){break d}if(H[a+208>>2]==8){break f}break d}if(H[a+208>>2]!=8){break d}}if(Ue(a+160|0)){if(I[52728]){db();Db(24912)}H[a+176>>2]=0;H[a+168>>2]=0;H[a+172>>2]=1073741824;H[a+160>>2]=1082130432;H[a+164>>2]=1065353216}if(!ad(a+96|0)){break a}if(I[52728]){db();Db(24845)}H[a+104>>2]=0;H[a+108>>2]=0;H[a+96>>2]=1080033280;H[a+100>>2]=1073741824;break a}if((h|0)!=1|H[a+196>>2]!=1|H[a+200>>2]!=2){break a}c=H[14592];b=H[c+232>>2];H[a+160>>2]=H[c+228>>2];H[a+164>>2]=b;H[a+176>>2]=H[c+244>>2];b=H[c+240>>2];H[a+168>>2]=H[c+236>>2];H[a+172>>2]=b;b=H[c+252>>2];H[a+96>>2]=H[c+248>>2];H[a+100>>2]=b;b=H[c+260>>2];H[a+104>>2]=H[c+256>>2];H[a+108>>2]=b}g:{j=H[a>>2];if(!j){break g}f=0;H[e- -64>>2]=0;H[e+56>>2]=0;H[e+60>>2]=0;H[e+48>>2]=0;H[e+52>>2]=0;p=a+60|0;i=a+160|0;q=a+80|0;h=G[a+54>>1];b=J[a+52>>1];if(!b){b=G[N(j<<16>>16,160)+54152>>1]}c=b<<16>>16;h:{i:{while(1){j:{k:{l:{m:{n:{o:{if(f){if((f|0)!=5){break o}if(Lc(i)){break h}f=3;switch(H[a+48>>2]-1|0){case 0:break i;case 1:break j;default:break h}}if(!Lc(i)){break n}break m}if(zc((f<<4)+q|0)){break m}}g=f<<2;if(!H[g+p>>2]){break l}}H[(e+48|0)+(f<<2)>>2]=4;break k}b=1<<f;if(b&h){H[g+(e+48|0)>>2]=1;break k}g=g+(e+48|0)|0;if(b&c){H[g>>2]=2;break k}H[g>>2]=3}f=f+1|0;continue}break}f=4}H[a+28>>2]=f}g=H[a+8>>2];b=H[a+24>>2];H[e+40>>2]=H[a+20>>2];H[e+44>>2]=b;b=H[a+16>>2];H[e+32>>2]=H[a+12>>2];H[e+36>>2]=b;h=H[a+60>>2];H[e+24>>2]=H[i+16>>2];b=H[i+12>>2];H[e+16>>2]=H[i+8>>2];H[e+20>>2]=b;b=H[i+4>>2];H[e+8>>2]=H[i>>2];H[e+12>>2]=b;c=H[e+48>>2];p:{if(Lc(i)){break p}b=H[a+28>>2];b=b>>>0<=1?1:b;q:{r:{switch(c-1|0){case 3:if(Lc(e+8|0)){break p}sl(i,j,b,h);break p;case 0:case 2:break q;case 1:break r;default:break p}}m=L[e+36>>2];n=L[e+40>>2];if(!(!(L[e+32>>2]!=O(-100)|m!=O(-100)|n!=O(-100))&L[e+44>>2]==O(-100))){Wa(16708,0);Hf(e+32|0,H[14711]);Wa(18818,0);uh(i,H[14711]);Lb();L[a+176>>2]=n;L[a+172>>2]=m;Db(18821);uh(i,H[14711]);Lb();break p}if(g){break q}h=N(j<<16>>16,160)+N(b,20)|0;H[i+16>>2]=H[h+54048>>2];c=h+54040|0;b=H[c+4>>2];H[i+8>>2]=H[c>>2];H[i+12>>2]=b;c=h+54032|0;b=H[c+4>>2];H[i>>2]=H[c>>2];H[i+4>>2]=b;break p}sl(i,j,b,g)}r=L[a+12>>2];s=L[a+16>>2];t=L[a+20>>2];u=L[a+24>>2];g=r!=O(-100)|s!=O(-100)|t!=O(-100)|u!=O(-100);o=H[a+48>>2];f=(o<<2)+45840|0;b=H[a>>2];i=N(b,160)+54156|0;b=N(b<<16>>16,160);k=b+54e3|0;b=b+54016|0;j=H[a+8>>2];l=1;while(1){if((l|0)==5){break g}d=(l<<4)+q|0;v=L[d+12>>2];w=L[d+8>>2];m=L[d+4>>2];n=L[d>>2];c=l<<2;a=H[c+p>>2];s:{if(zc(d)){break s}t:{switch(H[c+(e+48|0)>>2]-1|0){case 3:if(n!=O(-100)|m!=O(-100)|(w!=O(-100)|v!=O(-100))){break s}h=(H[i>>2]<<7)+(a<<4)|0;c=h+56152|0;a=H[c+4>>2];H[d+8>>2]=H[c>>2];H[d+12>>2]=a;c=h+56144|0;a=H[c+4>>2];H[d>>2]=H[c>>2];H[d+4>>2]=a;break s;case 0:a=H[k+4>>2];H[d>>2]=H[k>>2];H[d+4>>2]=a;a=H[k+12>>2];H[d+8>>2]=H[k+8>>2];H[d+12>>2]=a;if(!o){break s}L[d>>2]=L[f>>2]+L[d>>2];break s;case 1:if(g){L[d+12>>2]=u;L[d+8>>2]=t;L[d+4>>2]=s;L[d>>2]=r;break s}if(!j){a=H[k+4>>2];H[d>>2]=H[k>>2];H[d+4>>2]=a;a=H[k+12>>2];H[d+8>>2]=H[k+8>>2];H[d+12>>2]=a;if(!o){break s}L[d>>2]=L[f>>2]+L[d>>2];break s}h=(H[i>>2]<<7)+(j<<4)|0;c=h+56152|0;a=H[c+4>>2];H[d+8>>2]=H[c>>2];H[d+12>>2]=a;c=h+56144|0;a=H[c+4>>2];H[d>>2]=H[c>>2];H[d+4>>2]=a;if(!o){break s}L[d>>2]=L[f>>2]+L[d>>2];break s;case 2:break t;default:break s}}a=H[b+4>>2];H[d>>2]=H[b>>2];H[d+4>>2]=a;a=H[b+12>>2];H[d+8>>2]=H[b+8>>2];H[d+12>>2]=a}l=l+1|0;continue}}Ha=e+80|0}function dq(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;j=Ha+-64|0;Ha=j;H[j+60>>2]=b;z=j+39|0;t=j+40|0;a:{b:{c:{d:{e:while(1){h=0;f:while(1){k=b;if((o^2147483647)<(h|0)){break d}o=h+o|0;g:{h:{i:{j:{h=b;i=I[h|0];if(i){while(1){k:{b=i&255;l:{if(!b){b=h;break l}if((b|0)!=37){break k}i=h;while(1){if(I[i+1|0]!=37){b=i;break l}h=h+1|0;n=I[i+2|0];b=i+2|0;i=b;if((n|0)==37){continue}break}}h=h-k|0;y=o^2147483647;if((h|0)>(y|0)){break d}if(a){fc(a,k,h)}if(h){continue f}H[j+60>>2]=b;h=b+1|0;q=-1;i=F[b+1|0]-48|0;if(!(I[b+2|0]!=36|i>>>0>9)){u=1;q=i;h=b+3|0}H[j+60>>2]=h;m=0;i=F[h|0];b=i-32|0;m:{if(b>>>0>31){n=h;break m}n=h;b=1<<b;if(!(b&75913)){break m}while(1){n=h+1|0;H[j+60>>2]=n;m=b|m;i=F[h+1|0];b=i-32|0;if(b>>>0>=32){break m}h=n;b=1<<b;if(b&75913){continue}break}}n:{if((i|0)==42){b=F[n+1|0]-48|0;o:{if(!(I[n+2|0]!=36|b>>>0>9)){p:{if(!a){H[(b<<2)+e>>2]=10;p=0;break p}p=H[(b<<3)+d>>2]}b=n+3|0;u=1;break o}if(u){break j}b=n+1|0;if(!a){H[j+60>>2]=b;u=0;p=0;break n}h=H[c>>2];H[c>>2]=h+4;p=H[h>>2];u=0}H[j+60>>2]=b;if((p|0)>=0){break n}p=0-p|0;m=m|8192;break n}p=cq(j+60|0);if((p|0)<0){break d}b=H[j+60>>2]}h=0;l=-1;i=0;q:{if(I[b|0]!=46){break q}if(I[b+1|0]==42){i=F[b+2|0]-48|0;r:{if(!(I[b+3|0]!=36|i>>>0>9)){b=b+4|0;s:{if(!a){H[(i<<2)+e>>2]=10;l=0;break s}l=H[(i<<3)+d>>2]}break r}if(u){break j}b=b+2|0;l=0;if(!a){break r}i=H[c>>2];H[c>>2]=i+4;l=H[i>>2]}H[j+60>>2]=b;i=(l|0)>=0;break q}H[j+60>>2]=b+1;l=cq(j+60|0);b=H[j+60>>2];i=1}w=i;while(1){v=h;n=28;r=b;i=F[b|0];if(i-123>>>0<4294967238){break c}b=b+1|0;h=I[(i+N(h,58)|0)+39231|0];if(h-1>>>0<8){continue}break}H[j+60>>2]=b;t:{if((h|0)!=27){if(!h){break c}if((q|0)>=0){if(!a){H[(q<<2)+e>>2]=h;continue e}h=(q<<3)+d|0;i=H[h+4>>2];H[j+48>>2]=H[h>>2];H[j+52>>2]=i;break t}if(!a){break g}aq(j+48|0,h,c,g);break t}if((q|0)>=0){break c}h=0;if(!a){continue f}}if(I[a|0]&32){break b}i=m&-65537;m=m&8192?i:m;q=0;x=3942;n=t;u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{F:{G:{H:{I:{J:{K:{r=I[r|0];h=r<<24>>24;h=v?(r&15)==3?h&-45:h:h;switch(h-88|0){case 9:case 13:case 14:case 15:break u;case 27:break A;case 11:break B;case 12:case 17:break E;case 23:break F;case 0:case 32:break G;case 24:break H;case 22:break I;case 29:break J;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break h;default:break K}}L:{switch(h-65|0){case 0:case 4:case 5:case 6:break u;case 2:break z;case 1:case 3:break h;default:break L}}if((h|0)==83){break y}break h}i=H[j+48>>2];r=H[j+52>>2];b=3942;break D}h=0;M:{switch(v|0){case 0:H[H[j+48>>2]>>2]=o;continue f;case 1:H[H[j+48>>2]>>2]=o;continue f;case 2:k=H[j+48>>2];H[k>>2]=o;H[k+4>>2]=o>>31;continue f;case 3:G[H[j+48>>2]>>1]=o;continue f;case 4:F[H[j+48>>2]]=o;continue f;case 6:H[H[j+48>>2]>>2]=o;continue f;case 7:break M;default:continue f}}k=H[j+48>>2];H[k>>2]=o;H[k+4>>2]=o>>31;continue f}l=l>>>0<=8?8:l;m=m|8;h=120}b=t;A=h&32;k=H[j+52>>2];r=k;i=H[j+48>>2];s=i;if(i|k){while(1){b=b-1|0;F[b|0]=A|I[(s&15)+39760|0];v=!k&s>>>0>15|(k|0)!=0;s=(k&15)<<28|s>>>4;k=k>>>4|0;if(v){continue}break}}k=b;if(!(m&8)|!(i|r)){break C}x=(h>>>4|0)+3942|0;q=2;break C}b=t;k=H[j+52>>2];r=k;i=H[j+48>>2];s=i;if(i|k){while(1){b=b-1|0;F[b|0]=s&7|48;v=!k&s>>>0>7|(k|0)!=0;s=(k&7)<<29|s>>>3;k=k>>>3|0;if(v){continue}break}}k=b;if(!(m&8)){break C}b=t-b|0;l=(b|0)<(l|0)?l:b+1|0;break C}i=H[j+48>>2];b=H[j+52>>2];r=b;if((b|0)<0){h=0-(b+((i|0)!=0)|0)|0;r=h;i=0-i|0;H[j+48>>2]=i;H[j+52>>2]=h;q=1;b=3942;break D}if(m&2048){q=1;b=3943;break D}q=m&1;b=q?3944:3942}x=b;k=Fe(i,r,t)}if((l|0)<0&w){break d}m=w?m&-65537:m;if(!((i|r)!=0|l)){k=t;l=0;break h}b=!(i|r)+(t-k|0)|0;l=(b|0)<(l|0)?l:b;break h}h=I[j+48|0];break i}b=H[j+48>>2];k=b?b:14796;b=l>>>0>=2147483647?2147483647:l;h=Zp(k,b);b=h?h-k|0:b;n=b+k|0;if((l|0)>=0){m=i;l=b;break h}m=i;l=b;if(I[n|0]){break d}break h}h=H[j+48>>2];if(h|H[j+52>>2]){break x}h=0;break i}if(l){i=H[j+48>>2];break w}h=0;nc(a,32,p,0,m);break v}H[j+12>>2]=0;H[j+8>>2]=h;i=j+8|0;H[j+48>>2]=i;l=-1}h=0;while(1){N:{k=H[i>>2];if(!k){break N}k=$p(j+4|0,k);if((k|0)<0){break b}if(k>>>0>l-h>>>0){break N}i=i+4|0;h=h+k|0;if(l>>>0>h>>>0){continue}}break}n=61;if((h|0)<0){break c}nc(a,32,p,h,m);if(!h){h=0;break v}n=0;i=H[j+48>>2];while(1){k=H[i>>2];if(!k){break v}l=j+4|0;k=$p(l,k);n=k+n|0;if(n>>>0>h>>>0){break v}fc(a,l,k);i=i+4|0;if(h>>>0>n>>>0){continue}break}}nc(a,32,p,h,m^8192);h=(h|0)<(p|0)?p:h;continue f}if((l|0)<0&w){break d}n=61;h=La[f|0](a,M[j+48>>3],p,l,m,h)|0;if((h|0)>=0){continue f}break c}i=I[h+1|0];h=h+1|0;continue}}if(a){break a}if(!u){break g}h=1;while(1){a=H[(h<<2)+e>>2];if(a){aq((h<<3)+d|0,a,c,g);o=1;h=h+1|0;if((h|0)!=10){continue}break a}break}if(h>>>0>=10){o=1;break a}while(1){if(H[(h<<2)+e>>2]){break j}o=1;h=h+1|0;if((h|0)!=10){continue}break}break a}n=28;break c}F[j+39|0]=h;l=1;k=z;m=i}i=n-k|0;l=(i|0)<(l|0)?l:i;if((l|0)>(q^2147483647)){break d}n=61;b=l+q|0;h=(b|0)<(p|0)?p:b;if((y|0)<(h|0)){break c}nc(a,32,h,b,m);fc(a,x,q);nc(a,48,h,b,m^65536);nc(a,48,l,i,0);fc(a,k,i);nc(a,32,h,b,m^8192);b=H[j+60>>2];continue}break}break}o=0;break a}n=61}H[12604]=n}o=-1}Ha=j- -64|0;return o}function hx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if((b|0)==(c|0)){return-4}a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{g=c-b|0;q:{if(g&1){c=g&-2;if(!c){break q}c=b+c|0}g=-2;f=18;r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{h=I[b|0];F:{if(!h){i=I[b+1|0];j=I[(i+a|0)+72|0];break F}i=F[b+1|0];j=cb(h<<24>>24,i)}switch((j&255)-2|0){case 20:case 22:break j;case 23:case 24:case 25:break k;case 27:break l;case 5:break m;case 4:break n;case 3:break o;case 17:break r;case 9:break s;case 34:break t;case 30:break u;case 29:break v;case 2:break w;case 18:break x;case 33:break y;case 28:break z;case 8:case 19:break A;case 7:break B;case 0:break C;case 11:break D;case 10:break E;default:break h}}return rq(12,a,b+2|0,c,d)|0}return rq(13,a,b+2|0,c,d)|0}g=-1;f=b+2|0;if((f|0)==(c|0)){break i}G:{H:{I:{J:{K:{e=F[b+2|0];if(e){e=cb(e,F[b+3|0])}else{e=I[(I[b+3|0]+a|0)+72|0]}e=e&255;switch(e-15|0){case 2:case 3:case 4:case 5:case 6:case 8:break G;case 0:break H;case 1:break I;case 7:case 9:break J;default:break K}}if(e-5>>>0<3){break J}if((e|0)!=29){break G}}H[d>>2]=b;return 29}e=b+4|0;if((e|0)==(c|0)){break i}L:{M:{N:{O:{f=F[e|0];if(f){f=cb(f,F[b+5|0])}else{f=I[(I[b+5|0]+a|0)+72|0]}switch((f&255)-20|0){case 2:case 4:break M;case 0:break N;case 7:break O;default:break L}}return qq(a,b+6|0,c,d)|0}H[d>>2]=b+6;return 33}b=a+72|0;P:{while(1){a=e;e=a+2|0;if((e|0)==(c|0)){break i}f=I[a+3|0];Q:{h=F[a+2|0];if(h){f=cb(h,f<<24>>24)}else{f=I[b+f|0]}f=f&255;switch(f-21|0){case 0:break a;case 2:case 4:case 5:case 6:case 7:case 8:break L;case 1:case 3:continue;case 9:break Q;default:break P}}break}if((a+4|0)==(c|0)){break i}c=I[a+5|0];a=F[a+4|0];if(a){a=cb(a,c<<24>>24)}else{a=I[b+c|0]}a=a&255;if(a>>>0>30){break a}if(1<<a&1075840512){break L}break a}if(f-9>>>0<2){break a}}H[d>>2]=e;return 0}return pq(a,b+4|0,c,d)|0}H[d>>2]=f;return 0}if((b+2|0)!=(c|0)){break A}H[d>>2]=c;return-15}g=a+72|0;while(1){R:{a=b;b=b+2|0;if((c|0)==(b|0)){break R}e=I[a+3|0];S:{T:{f=F[a+2|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;switch(e-9|0){case 1:continue;case 0:break S;default:break T}}if((e|0)==21){continue}break R}if((a+4|0)!=(c|0)){continue}}break}H[d>>2]=b;return 15}return oq(a,b+2|0,c,d)|0}H[d>>2]=b+2;return 38}H[d>>2]=b+2;return 25}a=b+2|0;if((a|0)==(c|0)){return-26}U:{if(I[b+2|0]|I[b+3|0]!=93){break U}if((b+4|0)==(c|0)){break q}if(I[b+4|0]|I[b+5|0]!=62){break U}H[d>>2]=b+6;return 34}H[d>>2]=a;return 26}H[d>>2]=b+2;return 23}e=c;c=b+2|0;if((e|0)==(c|0)){return-24}V:{W:{X:{Y:{Z:{_:{e=F[b+2|0];if(e){a=cb(e,F[b+3|0])}else{a=I[(I[b+3|0]+a|0)+72|0]}a=a&255;switch(a-32|0){case 0:case 3:case 4:break b;case 2:break X;case 1:break Z;default:break _}}switch(a-9|0){case 0:case 1:case 2:break b;case 3:case 4:case 5:break V;case 6:break Y;default:break W}}H[d>>2]=b+4;return 36}H[d>>2]=b+4;return 35}H[d>>2]=b+4;return 37}if((a|0)==21){break b}}H[d>>2]=c;return 0}H[d>>2]=b+2;return 21}H[d>>2]=b+2;return 17}e=b+2|0;if((e|0)!=(c|0)){break p}}return-1}$:{h=I[e|0];aa:{if(!h){f=I[b+3|0];b=I[(f+a|0)+72|0];break aa}f=F[b+3|0];b=cb(h<<24>>24,f)}b=b&255;switch(b-5|0){case 0:break e;case 1:break f;case 2:break g;default:break $}}g=0;ba:{ca:{switch(b-22|0){default:if(!(H[(f>>>3&28|I[h+36432|0]<<5)+34784>>2]>>>f&1)|(b|0)!=29){break ba}break;case 1:break c;case 0:case 2:break ca}}h=a+72|0;while(1){a=e;e=a+2|0;if((e|0)==(c|0)){return-20}b=I[a+3|0];g=20;da:{ea:{fa:{ga:{a=I[a+2|0];if(a){f=cb(a<<24>>24,b<<24>>24)}else{f=I[b+h|0]}switch((f&255)-5|0){case 4:case 5:case 6:case 16:case 25:case 27:case 31:break c;case 17:case 19:case 20:case 21:case 22:continue;case 24:break da;case 2:break ea;case 1:break fa;case 0:break ga;default:break ba}}g=0;if((c-e|0)<2){break d}break c}g=0;if((c-e|0)<3){break d}break c}g=0;if((c-e|0)<4){break d}break c}if(H[(b>>>3&28|I[a+36688|0]<<5)+34784>>2]>>>b&1){continue}break}}g=0;break c}if((c-b|0)<2){break i}break h}if((c-b|0)>=3){break h}break i}if((c-b|0)>=4){break h}break i}g=(i&224)>>>5<<2;i=1<<i;if(H[(g|I[h+36432|0]<<5)+34784>>2]&i){break j}f=19;e=1;if(!(i&H[(g|I[h+36688|0]<<5)+34784>>2])){break h}break j}f=19;e=1}i=a+72|0;ha:{ia:{ja:{ka:{la:{ma:{na:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break ha}g=I[a+3|0];oa:{pa:{h=I[a+2|0];if(h){j=cb(h<<24>>24,g<<24>>24)}else{j=I[g+i|0]}switch((j&255)-5|0){case 10:break ia;case 28:break ja;case 29:break ka;case 4:case 5:case 6:case 15:case 16:case 25:case 27:case 30:case 31:break la;case 2:break ma;case 1:break na;case 17:case 19:case 20:case 21:case 22:continue;case 0:break oa;case 24:break pa;default:break h}}if(!(H[(g>>>3&28|I[h+36688|0]<<5)+34784>>2]>>>g&1)){break h}continue}break}if((c-b|0)<2){break d}break h}if((c-b|0)<3){break d}break h}if((c-b|0)<4){break d}break h}H[d>>2]=b;return f|0}if(e){break h}H[d>>2]=a+4;return 32}if(e){break h}H[d>>2]=a+4;return 31}if(e){break h}H[d>>2]=a+4;return 30}g=0-f|0}return g|0}H[d>>2]=b;return 0}g=0;if((c-e|0)<4){break d}break c}g=0;if((c-e|0)<3){break d}break c}g=0;if((c-e|0)>=2){break c}}return-2}H[d>>2]=e;return g|0}H[d>>2]=c;return 24}H[d>>2]=e;return 16}function xq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if((b|0)==(c|0)){return-4}a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{g=c-b|0;q:{if(g&1){c=g&-2;if(!c){break q}c=b+c|0}g=-2;f=18;r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{h=I[b+1|0];F:{if(!h){i=I[b|0];j=I[(i+a|0)+72|0];break F}i=F[b|0];j=cb(h<<24>>24,i)}switch((j&255)-2|0){case 20:case 22:break j;case 23:case 24:case 25:break k;case 27:break l;case 5:break m;case 4:break n;case 3:break o;case 17:break r;case 9:break s;case 34:break t;case 30:break u;case 29:break v;case 2:break w;case 18:break x;case 33:break y;case 28:break z;case 8:case 19:break A;case 7:break B;case 0:break C;case 11:break D;case 10:break E;default:break h}}return wq(12,a,b+2|0,c,d)|0}return wq(13,a,b+2|0,c,d)|0}g=-1;f=b+2|0;if((f|0)==(c|0)){break i}G:{H:{I:{J:{K:{e=F[b+3|0];if(e){e=cb(e,F[b+2|0])}else{e=I[(I[b+2|0]+a|0)+72|0]}e=e&255;switch(e-15|0){case 2:case 3:case 4:case 5:case 6:case 8:break G;case 0:break H;case 1:break I;case 7:case 9:break J;default:break K}}if(e-5>>>0<3){break J}if((e|0)!=29){break G}}H[d>>2]=b;return 29}e=b+4|0;if((e|0)==(c|0)){break i}L:{M:{N:{O:{f=F[b+5|0];if(f){f=cb(f,F[e|0])}else{f=I[(I[e|0]+a|0)+72|0]}switch((f&255)-20|0){case 2:case 4:break M;case 0:break N;case 7:break O;default:break L}}return vq(a,b+6|0,c,d)|0}H[d>>2]=b+6;return 33}b=a+72|0;P:{while(1){a=e;e=a+2|0;if((e|0)==(c|0)){break i}f=I[a+2|0];Q:{h=F[a+3|0];if(h){f=cb(h,f<<24>>24)}else{f=I[b+f|0]}f=f&255;switch(f-21|0){case 0:break a;case 2:case 4:case 5:case 6:case 7:case 8:break L;case 1:case 3:continue;case 9:break Q;default:break P}}break}if((a+4|0)==(c|0)){break i}c=I[a+4|0];a=F[a+5|0];if(a){a=cb(a,c<<24>>24)}else{a=I[b+c|0]}a=a&255;if(a>>>0>30){break a}if(1<<a&1075840512){break L}break a}if(f-9>>>0<2){break a}}H[d>>2]=e;return 0}return uq(a,b+4|0,c,d)|0}H[d>>2]=f;return 0}if((b+2|0)!=(c|0)){break A}H[d>>2]=c;return-15}g=a+72|0;while(1){R:{a=b;b=b+2|0;if((c|0)==(b|0)){break R}e=I[a+2|0];S:{T:{f=F[a+3|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;switch(e-9|0){case 1:continue;case 0:break S;default:break T}}if((e|0)==21){continue}break R}if((a+4|0)!=(c|0)){continue}}break}H[d>>2]=b;return 15}return tq(a,b+2|0,c,d)|0}H[d>>2]=b+2;return 38}H[d>>2]=b+2;return 25}a=b+2|0;if((a|0)==(c|0)){return-26}U:{if(I[b+3|0]|I[b+2|0]!=93){break U}if((b+4|0)==(c|0)){break q}if(I[b+5|0]|I[b+4|0]!=62){break U}H[d>>2]=b+6;return 34}H[d>>2]=a;return 26}H[d>>2]=b+2;return 23}e=c;c=b+2|0;if((e|0)==(c|0)){return-24}V:{W:{X:{Y:{Z:{_:{e=F[b+3|0];if(e){a=cb(e,F[b+2|0])}else{a=I[(I[b+2|0]+a|0)+72|0]}a=a&255;switch(a-32|0){case 0:case 3:case 4:break b;case 2:break X;case 1:break Z;default:break _}}switch(a-9|0){case 0:case 1:case 2:break b;case 3:case 4:case 5:break V;case 6:break Y;default:break W}}H[d>>2]=b+4;return 36}H[d>>2]=b+4;return 35}H[d>>2]=b+4;return 37}if((a|0)==21){break b}}H[d>>2]=c;return 0}H[d>>2]=b+2;return 21}H[d>>2]=b+2;return 17}e=b+2|0;if((e|0)!=(c|0)){break p}}return-1}$:{b=I[b+3|0];aa:{if(!b){f=I[e|0];g=I[(f+a|0)+72|0];break aa}f=F[e|0];g=cb(b<<24>>24,f)}h=g&255;switch(h-5|0){case 0:break e;case 1:break f;case 2:break g;default:break $}}g=0;ba:{ca:{switch(h-22|0){default:if(!(H[(f>>>3&28|I[b+36432|0]<<5)+34784>>2]>>>f&1)|(h|0)!=29){break ba}break;case 1:break c;case 0:case 2:break ca}}h=a+72|0;while(1){a=e;e=a+2|0;if((e|0)==(c|0)){return-20}b=I[a+2|0];g=20;da:{ea:{fa:{ga:{a=I[a+3|0];if(a){f=cb(a<<24>>24,b<<24>>24)}else{f=I[b+h|0]}switch((f&255)-5|0){case 4:case 5:case 6:case 16:case 25:case 27:case 31:break c;case 17:case 19:case 20:case 21:case 22:continue;case 24:break da;case 2:break ea;case 1:break fa;case 0:break ga;default:break ba}}g=0;if((c-e|0)<2){break d}break c}g=0;if((c-e|0)<3){break d}break c}g=0;if((c-e|0)<4){break d}break c}if(H[(b>>>3&28|I[a+36688|0]<<5)+34784>>2]>>>b&1){continue}break}}g=0;break c}if((c-b|0)<2){break i}break h}if((c-b|0)>=3){break h}break i}if((c-b|0)>=4){break h}break i}g=(i&224)>>>5<<2;i=1<<i;if(H[(g|I[h+36432|0]<<5)+34784>>2]&i){break j}f=19;e=1;if(!(i&H[(g|I[h+36688|0]<<5)+34784>>2])){break h}break j}f=19;e=1}i=a+72|0;ha:{ia:{ja:{ka:{la:{ma:{na:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break ha}g=I[a+2|0];oa:{pa:{h=I[a+3|0];if(h){j=cb(h<<24>>24,g<<24>>24)}else{j=I[g+i|0]}switch((j&255)-5|0){case 10:break ia;case 28:break ja;case 29:break ka;case 4:case 5:case 6:case 15:case 16:case 25:case 27:case 30:case 31:break la;case 2:break ma;case 1:break na;case 17:case 19:case 20:case 21:case 22:continue;case 0:break oa;case 24:break pa;default:break h}}if(!(H[(g>>>3&28|I[h+36688|0]<<5)+34784>>2]>>>g&1)){break h}continue}break}if((c-b|0)<2){break d}break h}if((c-b|0)<3){break d}break h}if((c-b|0)<4){break d}break h}H[d>>2]=b;return f|0}if(e){break h}H[d>>2]=a+4;return 32}if(e){break h}H[d>>2]=a+4;return 31}if(e){break h}H[d>>2]=a+4;return 30}g=0-f|0}return g|0}H[d>>2]=b;return 0}g=0;if((c-e|0)<4){break d}break c}g=0;if((c-e|0)<3){break d}break c}g=0;if((c-e|0)>=2){break c}}return-2}H[d>>2]=e;return g|0}H[d>>2]=c;return 24}H[d>>2]=e;return 16}function wd(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;h=Ha-432|0;Ha=h;H[b>>2]=0;a:{if(!(d|e)){break a}b:{c:{if(!(!d|!e)){if(I[f|0]&15){break c}e=1;if(!(F[a+13|0]&1)){break b}break c}if(e){break c}e=1;break b}j=2;p=1;e=5}r=d?e:j;i=I[a+13|0]&64;l=me(r,i>>>6|0);if(!c){s=b,t=le(Xa(528),l),H[s>>2]=t;break a}k=H[c>>2];j=dd(k);e=H[c+8>>2];o=H[e+12>>2];n=fm(h+216|0,k,H[c+4>>2],(i|0)!=0);d:{e:{f:{g:{h:{switch(j-18|0){case 0:if(H[e+12>>2]!=2){db();H[h+20>>2]=H[e+12>>2];H[h+16>>2]=k;Wa(25896,h+16|0);F[52605]=1;l=5;break f}c=H[H[e>>2]>>2];d=J[26761];G[h+210>>1]=d;G[h+14>>1]=d;H[h+212>>2]=0;wd(a,h+212|0,c,1,0,h+14|0,g);d=0;d=H[e+12>>2]>=2?H[H[e>>2]+4>>2]:d;H[h+204>>2]=0;c=J[26761];G[h+202>>1]=c;G[h+12>>1]=c;wd(a,h+204|0,d,0,1,h+12|0,g);a=ne(H[h+212>>2],H[h+204>>2],(i|0)!=0);H[b>>2]=a;Yc(a,n);l=5;break f;case 1:i=Vj(Xa(556),l);Yc(i,n);j=i+528|0;k=J[f>>1];c=0;i:{while(1){if(H[e+12>>2]<=(c|0)){j:{switch(H[i+540>>2]){case 1:break j;case 0:break g;default:break i}}}else{H[h+212>>2]=0;f=H[H[e>>2]+(c<<2)>>2];G[h+26>>1]=k;G[h+200>>1]=k;wd(a,h+212|0,f,d,p,h+26|0,g);f=H[h+212>>2];k:{if(!f){break k}if(H[f+4>>2]==10){La[H[H[f>>2]+4>>2]](f);break k}Hc(j,f)}c=c+1|0;continue}break}a=H[H[i+528>>2]>>2];H[b>>2]=a;Xe(a,i);cd(j,0,0);La[H[H[i>>2]+4>>2]](i);break f}H[b>>2]=i;break a;case 2:i=ke(Xa(580),l);Yc(i,n);j=i+528|0;k=J[f>>1];c=0;l:{m:{while(1){if(H[e+12>>2]<=(c|0)){n:{switch(H[i+540>>2]){case 1:break m;case 0:break n;default:break l}}}else{H[h+212>>2]=0;f=H[H[e>>2]+(c<<2)>>2];G[h+28>>1]=k;G[h+198>>1]=k;wd(a,h+212|0,f,d,p,h+28|0,g);f=H[h+212>>2];o:{if(!f){break o}if(H[f+4>>2]==10){La[H[H[f>>2]+4>>2]](f);break o}Hc(j,f)}c=c+1|0;continue}break}La[H[H[i>>2]+4>>2]](i);break f}a=H[H[i+528>>2]>>2];H[b>>2]=a;Xe(a,i);cd(j,0,0);La[H[H[i>>2]+4>>2]](i);break f}H[b>>2]=i;break a;case 3:if(!o){break f}c=0;c=H[e+12>>2]>0?H[H[e>>2]>>2]:c;i=Uj(c);j=0;m=H[a+8>>2];if(m){q=(Yb(m)<<16)+851968>>16;j=ib(q);H[h+52>>2]=1;H[h+48>>2]=m;jc(j,q,11056,h+48|0)}m=Nh(Xa(52),j,H[a>>2],(I[a+13|0]&64)>>>6|0);q=I[a+13|0];F[m+13|0]=q;F[m+14|0]=I[a+14|0];j=4;p:{switch(r-1|0){case 1:j=8;case 0:F[m+13|0]=q&242|j;F[m+14|0]=I[53522];break;default:break p}}c=i?c:0;j=Eh(m,e,i);if((o|0)<=(j|0)){break e}i=0;break d;case 4:q:{switch(o|0){case 0:db();H[h+80>>2]=k;Wa(25654,h+80|0);F[52605]=1;break f;default:db();H[h+68>>2]=o;H[h+64>>2]=k;Wa(25470,h- -64|0);F[52605]=1;break f;case 1:break q}}c=0;c=H[e+12>>2]>0?H[H[e>>2]>>2]:c;H[h+212>>2]=0;e=J[f>>1];G[h+78>>1]=e;G[h+194>>1]=e;wd(a,h+212|0,c,d,p,h+78|0,g);a=qd(Xa(704),8,l);H[a>>2]=32748;zb(a+528|0,0,40);pk(a+568|0);zb(a+592|0,0,96);H[a+696>>2]=0;H[a+700>>2]=0;H[a+688>>2]=1065353216;H[a+692>>2]=1065353216;Yc(a,n);H[a+696>>2]=H[h+212>>2];H[b>>2]=a;break a;case 5:a=qd(Xa(744),1,l);H[a>>2]=32268;zb(a+528|0,0,70);Bk(a+600|0);Yc(a,n);H[a+36>>2]=g;H[b>>2]=a;break a;case 6:a=qd(Xa(752),2,l);H[a>>2]=32364;c=zb(a+616|0,0,136);zb(a+528|0,0,38);zb(a+568|0,0,46);vk(c);H[a+24>>2]=4;Yc(a,n);H[a+36>>2]=g;H[b>>2]=a;break a;case 7:a=qd(Xa(560),3,l);H[a+536>>2]=0;H[a+540>>2]=0;H[a+528>>2]=0;H[a>>2]=32556;H[a+544>>2]=0;H[a+548>>2]=0;H[a+552>>2]=0;H[a+556>>2]=0;Yc(a,n);H[b>>2]=a;break a;case 8:db();H[h+96>>2]=k;Wa(28197,h+96|0);F[52606]=1;break f;case 9:a=qd(Xa(552),4,l);H[a+528>>2]=0;H[a+532>>2]=0;H[a>>2]=32652;H[a+536>>2]=0;H[a+540>>2]=0;H[a+544>>2]=0;H[a+548>>2]=0;Yc(a,n);H[b>>2]=a;break a;case 11:r:{switch(o|0){case 0:db();H[h+176>>2]=k;Wa(25654,h+176|0);F[52605]=1;break f;default:db();H[h+116>>2]=o;H[h+112>>2]=k;Wa(25542,h+112|0);F[52605]=1;break f;case 2:break r}}g=0;c=H[e+12>>2];s:{if((c|0)<=0){e=0;break s}i=H[e>>2];e=H[i>>2];if((c|0)==1){break s}g=H[i+4>>2]}c=H[e>>2];if((dd(c)|0)!=9){d=0;a=H[14594];if(H[a+8>>2]>=10){d=H[H[a+4>>2]+36>>2]}H[h+168>>2]=c;H[h+164>>2]=d;H[h+160>>2]=k;Wa(25693,h+160|0);break f}c=Bb(H[e+4>>2],4201);if(!c){d=0;a=H[14594];if(H[a+8>>2]>=10){d=H[H[a+4>>2]+36>>2]}H[h+132>>2]=k;H[h+128>>2]=d;Wa(25026,h+128|0);break f}j=0;e=H[14025];if((fb(H[e>>2],c)|0)!=13){a=H[14594];if(H[a+8>>2]>=10){j=H[H[a+4>>2]+36>>2]}d=0;d=H[e+8>>2]>=14?H[H[e+4>>2]+52>>2]:d;H[h+156>>2]=c;H[h+152>>2]=d;H[h+148>>2]=k;H[h+144>>2]=j;Wa(26023,h+144|0);break f}c=J[f>>1];G[h+142>>1]=c;G[h+192>>1]=c;wd(a,b,g,d,p,h+142|0,13);break f;case 10:case 12:break f;default:break h}}db();H[h>>2]=k;Wa(26934,h);F[52605]=1;H[b>>2]=0;break a}La[H[H[i>>2]+4>>2]](i)}if(H[b>>2]){break a}a=le(Xa(528),l);Yc(a,n);H[b>>2]=a;break a}i=1}while(1){if(!i){db();i=H[H[H[e>>2]+(j<<2)>>2]>>2];H[h+36>>2]=k;H[h+32>>2]=i;Wa(27013,h+32|0);F[52605]=1;i=1;continue}i=0;t:{u:{while(1){v:{w:{if(c){if((dd(H[c>>2])|0)==21){break w}i=c}H[h+212>>2]=0;c=J[f>>1];G[h+30>>1]=c;G[h+196>>1]=c;wd(a,h+212|0,i,d,p,h+30|0,g);d=oe(Xa(536),l,m);Yc(d,n);F[d+532|0]=1;c=H[h+212>>2];if(!c){break u}if(H[c+4>>2]!=10){break v}La[H[H[c>>2]+4>>2]](c);break u}e=H[c+8>>2];if(H[e+12>>2]<=0){c=0}else{c=H[H[e>>2]>>2]}j=Uj(c);j=Eh(m,j?e:0,j);if((o|0)<=(j|0)){continue}break t}break}a=Vj(Xa(556),l);e=a+528|0;Hc(e,c);Hc(e,d);d=a}H[b>>2]=d;break a}continue}}Ha=h+432|0}function As(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=O(0),k=O(0),l=0,m=0,n=0,o=0,p=O(0),q=0,r=0,s=0,t=0;d=Ha-288|0;Ha=d;Qc(a,b,c);a:{e=H[a+540>>2]<<16;if(!e){break a}c=0;f=e>>16;l=(f|0)>0?f:0;f=ib(e>>14);while(1)if((c|0)==(l|0)){H[d+280>>2]=H[a+20>>2];c=H[a+16>>2];H[d+272>>2]=H[a+12>>2];H[d+276>>2]=c;e=0;H[d+268>>2]=0;H[d+264>>2]=0;H[d+260>>2]=0;m=a+396|0;i=a+284|0;n=a+172|0;o=a+60|0;while(1){if((e|0)==(l|0)){c=0;while(1){if((c|0)==(l|0)){Va(f);if(H[a+24>>2]!=(g|0)){H[a+24>>2]=g}j=L[d+260>>2];k=L[d+264>>2];L[a+40>>2]=j>O(0)?j:k>O(0)?k:L[d+268>>2];e=0;while(1){if((e|0)==(l|0)){H[a+24>>2]=0;H[a+12>>2]=11;L[a+40>>2]=L[a+44>>2]+L[a+40>>2];e=-1;c=0;f=0;g=-1;b=H[a+528>>2]}else{c=0;c=H[a+540>>2]>(e|0)?H[H[a+528>>2]+(e<<2)>>2]:c;La[H[H[c>>2]+64>>2]](c,L[a+40>>2],1);b=H[a+16>>2];f=H[a+12>>2];F[c+20|0]=I[a+20|0];H[c+12>>2]=f;H[c+16>>2]=b;e=e+1|0;continue}break}while(1){if((c|0)!=(l|0)){r=f;f=H[b+(c<<2)>>2];h=I[f+508|0]&48;q=I[f+510|0]&48;f=(r+((h|0)!=0)|0)+((q|0)!=0)|0;e=q?c:e;g=h?c:g;c=c+1|0;continue}break}b:{if((g|0)==-1){break b}rb(a+324|0,H[b+(g<<2)>>2]+324|0);if(!I[53764]|(f|0)<2){break b}db();H[d+48>>2]=f;H[d+52>>2]=(f|0)==2?8350:8079;Wa(26726,d+48|0)}if((e|0)!=-1){rb(a+436|0,H[H[a+528>>2]+(e<<2)>>2]+436|0)}e=a+424|0;f=a+412|0;g=a+312|0;h=a+300|0;c=0;while(1){if((c|0)==(l|0)){H[d+256>>2]=0;H[d+248>>2]=0;H[d+252>>2]=0;H[d+244>>2]=0;H[d+236>>2]=0;H[d+240>>2]=0;c:{if(I[a+508|0]&8){Tk(i,o,d+248|0);break c}H[d+256>>2]=0;H[d+248>>2]=0;H[d+252>>2]=0}d:{if(I[a+510|0]&8){Tk(m,n,d+236|0);break d}H[d+244>>2]=0;H[d+236>>2]=0;H[d+240>>2]=0}i=0;H[d+232>>2]=0;H[d+224>>2]=0;H[d+228>>2]=0;H[d+220>>2]=0;H[d+212>>2]=0;H[d+216>>2]=0;f=H[a+528>>2];b=0;c=0;while(1)if((c|0)==(l|0)){c=d+200|0;Ya(c,a- -64|0);lb(c,d+224|0);c=d+188|0;Ya(c,a+176|0);lb(c,d+212|0);H[d+184>>2]=0;H[d+176>>2]=0;H[d+180>>2]=0;H[d+172>>2]=0;H[d+164>>2]=0;H[d+168>>2]=0;H[d+160>>2]=0;H[d+152>>2]=0;H[d+156>>2]=0;m=-1;f=-1;g=-1;e=0;e:{f:{g:{while(1){if((e|0)==(l|0)){h:{j=O(0);k=O(0);if(i){k=_b(d+224|0)}if(b){j=_b(d+212|0)}n=a+544|0;c=d+248|0;e=d+236|0;i:{if(k==O(0)){p=O(.5);if(j==O(0)){break i}}p=O(k/O(k+j))}j=p;mc(n,c,e,j);H[d+148>>2]=0;H[d+140>>2]=0;H[d+144>>2]=0;H[d+136>>2]=0;H[d+128>>2]=0;H[d+132>>2]=0;if((g|0)==-1){break f}k=O(O(1)-j);if((m|0)==-1){break h}if((f|0)==-1){break g}e=d+116|0;o=d+164|0;Ya(e,o);h=d+176|0;xb(e,h);c=d+104|0;Ya(c,e);xb(c,d+152|0);e=d+92|0;Ya(e,c);wb(e,j);g=d+80|0;Ya(g,c);wb(g,k);lb(h,e);xb(o,g);break f}}else{c=0;c=H[a+540>>2]>(e|0)?H[H[a+528>>2]+(e<<2)>>2]:c;if(I[c+508|0]&2){if(!(!I[53764]|(m|0)==-1)){db();H[d+36>>2]=e;H[d+32>>2]=m;Wa(26126,d+32|0)}Ya(d+176|0,c+288|0);m=e}if(I[c+510|0]&2){if((f|0)!=-1){db();H[d+20>>2]=e;H[d+16>>2]=f;Wa(26241,d+16|0)}Ya(d+164|0,c+400|0);f=e}if(I[c+508|0]&4|I[c+510|0]&4){if(!(!I[53764]|(g|0)==-1)){db();H[d+4>>2]=e;H[d>>2]=g;Wa(22732,d)}Nb(d+152|0,c+400|0,c+288|0);g=e}e=e+1|0;continue}break}j:{if((f|0)!=-1){c=d+116|0;Ya(c,d+164|0);xb(c,d+200|0);e=d+104|0;Ya(e,c);xb(e,d+152|0);lb(d+176|0,e);break j}c=d+116|0;Ya(c,d+188|0);xb(c,d+200|0);e=d+104|0;Ya(e,c);xb(e,d+152|0);if((i|0)>0){c=d+140|0;Ya(c,e);wb(c,j)}if((b|0)<=0){break j}c=d+128|0;Ya(c,d+104|0);wb(c,O(-k))}e=(i|0)>0;c=0;break e}c=d+116|0;Ya(c,d+188|0);xb(c,d+176|0);e=d+104|0;Ya(e,c);xb(e,d+152|0);xb(d+164|0,e)}e=(i|0)>0;c=(m|0)!=-1;if((m|0)==-1|(i|0)<=0){break e}Nb(d+140|0,d+176|0,d+200|0);e=1;c=1}if(!((f|0)==-1|(b|0)<=0)){Nb(d+128|0,d+164|0,d+188|0)}H[d+124>>2]=0;H[d+116>>2]=0;H[d+120>>2]=0;H[d+112>>2]=0;H[d+104>>2]=0;H[d+108>>2]=0;k:{if(c){Ya(d+116|0,d+176|0);break k}c=d+116|0;Ya(c,d+200|0);lb(c,d+140|0)}l:{if((f|0)!=-1){Ya(d+104|0,d+164|0);break l}c=d+104|0;Ya(c,d+188|0);lb(c,d+128|0)}if(e){wb(d+140|0,O(1/+(i>>>0)))}if((b|0)>0){wb(d+128|0,O(1/+(b>>>0)))}e=0;while(1)if((e|0)==(l|0)){b=a+288|0;Ya(b,d+116|0);c=a+400|0;Ya(c,d+104|0);lb(b,n);lb(c,n);La[H[H[a>>2]+68>>2]](a);break a}else{c=0;c=H[a+540>>2]>(e|0)?H[H[a+528>>2]+(e<<2)>>2]:c;b=J[c+508>>1];m:{n:{if(b&1){f=52;b=d+140|0;break n}if(!(b&2)){break m}f=44;b=d+116|0}La[H[H[c>>2]+f>>2]](c,b,1)}b=J[c+510>>1];o:{p:{if(b&1){f=52;b=d+128|0;break p}if(!(b&2)){break o}f=44;b=d+104|0}La[H[H[c>>2]+f>>2]](c,b,0)}e=e+1|0;continue}}else{e=H[f+(c<<2)>>2];if(G[e+508>>1]&1){g=d+224|0;lb(g,e+288|0);xb(g,e- -64|0);i=i+1|0}if(G[e+510>>1]&1){g=d+212|0;lb(g,e+400|0);xb(g,e+176|0);b=b+1|0}c=c+1|0;continue}}b=H[H[a+528>>2]+(c<<2)>>2];if(I[b+508|0]&8){Ya(h,b+300|0);Ya(g,b+312|0)}if(I[b+510|0]&8){Ya(f,b+412|0);Ya(e,b+424|0)}c=c+1|0;continue}}b=f+(c<<2)|0;e=H[b>>2];if(e){Va(Lh(e));H[b>>2]=0}c=c+1|0;continue}}c=0;c=H[a+540>>2]>(e|0)?H[H[a+528>>2]+(e<<2)>>2]:c;_c(c+60|0,o);_c(c+172|0,n);_c(c+284|0,i);_c(c+396|0,m);La[H[H[c>>2]+20>>2]](c,b,H[f+(e<<2)>>2]);if(H[d+272>>2]<H[c+12>>2]){H[d+72>>2]=H[c+20>>2];h=H[c+16>>2];H[d+64>>2]=H[c+12>>2];H[d+68>>2]=h;Cm(d+272|0,d- -64|0)}h=H[c+24>>2];Xg(c,d+268|0,d+264|0,d+260|0);g=(g|0)>(h|0)?g:h;e=e+1|0;continue}}else{s=f+(c<<2)|0,t=Zl(Xa(168),b),H[s>>2]=t;c=c+1|0;continue}}Ha=d+288|0}function Es(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=O(0);d=Ha-224|0;Ha=d;a:{if(!b){break a}H[d+208>>2]=a;eb(b,18994,d+208|0);Pc(a,b);_a(b,G[29370]);H[d+192>>2]=H[a+528>>2];eb(b,18866,d+192|0);_a(b,G[29370]);H[d+176>>2]=I[a+532|0]?84:70;eb(b,20833,d+176|0);if(!H[a+528>>2]|I[a+532|0]!=1){break a}_a(b,G[29370]);$a(18195,b);G[29370]=J[29370]+1;f=H[a+528>>2];H[d+164>>2]=H[f+8>>2];H[d+160>>2]=f;eb(b,21724,d+160|0);Sb(b);H[d+144>>2]=I[f+12|0]?84:70;eb(b,20580,d+144|0);$a(18823,b);a=I[f+13|0];H[d+136>>2]=a&64?84:70;H[d+132>>2]=a&32?84:70;H[d+128>>2]=a&16?84:70;H[d+124>>2]=a&8?84:70;H[d+120>>2]=a&4?84:70;H[d+116>>2]=a&2?84:70;H[d+112>>2]=a&1?84:70;eb(b,11476,d+112|0);bb(10,b);if(I[f+14|0]&15){_a(b,G[29370]);$a(17662,b);G[29370]=J[29370]+1;a=I[f+14|0];H[d+108>>2]=a&8?84:70;H[d+104>>2]=a&4?84:70;H[d+100>>2]=a&2?84:70;H[d+96>>2]=a&1?84:70;eb(b,11215,d+96|0);G[29370]=J[29370]-1;bb(10,b)}_a(b,G[29370]);h=L[f+16>>2];H[d+80>>2]=3;M[d+88>>3]=h;pb(b,20044,d+80|0);_a(b,G[29370]);b:{if(H[f+36>>2]){$a(16759,b);c=J[29370]+1|0;G[29370]=c;e=H[f+36>>2];a=H[e>>2];if((a&16777215)!=(H[14678]&16777215)){_a(b,c<<16>>16);$a(18655,b);G[29370]=J[29370]+1;rd(e,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+12>>2]&16777215)){_a(b,c<<16>>16);$a(18601,b);G[29370]=J[29370]+1;bc(e+12|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+16>>2]&16777215)){_a(b,c<<16>>16);$a(17184,b);G[29370]=J[29370]+1;rd(e+16|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+28>>2]&16777215)){_a(b,c<<16>>16);$a(17146,b);G[29370]=J[29370]+1;rd(e+28|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+40>>2]&16777215)){_a(b,c<<16>>16);$a(18580,b);G[29370]=J[29370]+1;bc(e+40|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+44>>2]&16777215)){_a(b,c<<16>>16);$a(18556,b);G[29370]=J[29370]+1;bc(e+44|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+64>>2]&16777215)){_a(b,c<<16>>16);$a(18541,b);G[29370]=J[29370]+1;bc(e- -64|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+68>>2]&16777215)){_a(b,c<<16>>16);$a(18523,b);G[29370]=J[29370]+1;bc(e+68|0,b);G[29370]=J[29370]-1;bb(10,b);c=J[29370];a=H[14678]}if((a&16777215)!=(H[e+72>>2]&16777215)){_a(b,c<<16>>16);$a(17204,b);G[29370]=J[29370]+1;rd(e+72|0,b);G[29370]=J[29370]-1;bb(10,b);c=G[29370]}_a(b,c<<16>>16);c=H[e+48>>2];a=0;c:{if((c|0)<0){break c}e=H[14030];a=0;if((c|0)>=H[e+8>>2]){break c}a=H[H[e+4>>2]+(c<<2)>>2]}H[d+64>>2]=a;eb(b,19271,d- -64|0);G[29370]=J[29370]-1;bb(10,b);break b}$a(21045,b)}_a(b,G[29370]);d:{if(H[f+40>>2]){$a(16775,b);G[29370]=J[29370]+1;c=H[f+40>>2];a=I[c+60|0];e=I[c+61|0];H[d+56>>2]=I[c+62|0]?84:70;H[d+52>>2]=e?84:70;H[d+48>>2]=a?84:70;eb(b,20529,d+48|0);Sb(b);a=I[c+63|0];H[d+36>>2]=I[c+64|0]?84:70;H[d+32>>2]=a?84:70;eb(b,20589,d+32|0);a=H[c>>2];if((a&16777215)!=(H[14678]&16777215)){_a(b,G[29370]);$a(17110,b);G[29370]=J[29370]+1;rd(c,b);G[29370]=J[29370]-1;bb(10,b);a=H[14678]}if((a&16777215)!=(H[c+12>>2]&16777215)){_a(b,G[29370]);$a(17169,b);G[29370]=J[29370]+1;rd(c+12|0,b);G[29370]=J[29370]-1;bb(10,b);a=H[14678]}if((a&16777215)!=(H[c+36>>2]&16777215)){_a(b,G[29370]);$a(18017,b);G[29370]=J[29370]+1;bc(c+36|0,b);G[29370]=J[29370]-1;bb(10,b);a=H[14678]}if((a&16777215)!=(H[c+24>>2]&16777215)){_a(b,G[29370]);$a(17128,b);G[29370]=J[29370]+1;rd(c+24|0,b);G[29370]=J[29370]-1;bb(10,b);a=H[14678]}if((a&16777215)!=(H[c+40>>2]&16777215)){_a(b,G[29370]);$a(17997,b);G[29370]=J[29370]+1;bc(c+40|0,b);G[29370]=J[29370]-1;bb(10,b)}a=0;_a(b,G[29370]);e=H[c+44>>2];e:{if((e|0)<0){break e}g=H[14030];if((e|0)>=H[g+8>>2]){break e}a=H[H[g+4>>2]+(e<<2)>>2]}H[d+16>>2]=a;eb(b,19271,d+16|0);if(!(!(L[c+48>>2]!=O(0)|L[c+52>>2]!=O(0))&L[c+56>>2]==O(0))){_a(b,G[29370]);$a(17397,b);G[29370]=J[29370]+1;tb(c+48|0,b,3);G[29370]=J[29370]-1;bb(10,b)}G[29370]=J[29370]-1;bb(10,b);break d}$a(21066,b)}a=H[f+20>>2];Sb(b);f:{if(a){$a(21769,b);G[29370]=J[29370]+1;a=H[f+20>>2];g:{if(!a){$a(14796,b);break g}ek(a,b)}G[29370]=J[29370]-1;break f}$a(21027,b)}a=H[f+24>>2];Sb(b);h:{if(a){$a(21753,b);G[29370]=J[29370]+1;a=H[f+24>>2];i:{if(!a){$a(14796,b);break i}ek(a,b)}a=J[29370]-1|0;G[29370]=a;break h}$a(21006,b);a=J[29370]}_a(b,a<<16>>16);j:{if(H[f+44>>2]){$a(16845,b);G[29370]=J[29370]+1;a=H[f+44>>2];La[H[H[a>>2]+72>>2]](a,b);G[29370]=J[29370]-1;bb(10,b);break j}$a(21084,b)}k:{if(!H[f+48>>2]){break k}a=0;while(1){if((a|0)==8){break k}c=a<<2;l:{if(!H[c+H[f+48>>2]>>2]){break l}_a(b,G[29370]);e=H[14661];if(H[e+8>>2]>(a|0)){e=H[c+H[e+4>>2]>>2]}else{e=0}H[d+4>>2]=e;H[d>>2]=a;eb(b,15589,d);c=H[c+H[f+48>>2]>>2];if(!c){$a(14796,b);break l}La[H[H[c>>2]+8>>2]](c,b)}a=a+1|0;continue}}G[29370]=J[29370]-1;bb(10,b)}Ha=d+224|0}function li(a,b,c,d,e,f,g){var h=0,i=O(0),j=O(0),k=O(0),l=0,m=O(0),n=O(0),o=0,p=O(0),q=0,r=O(0),s=O(0),t=O(0),u=0,v=0,w=O(0),x=0,y=O(0),z=O(0),A=0,B=0,C=O(0),D=0,E=O(0),F=O(0),G=O(0),I=0,J=0;h=Ha-304|0;Ha=h;x=H[a+72>>2]+(c<<4)|0;l=H[x+20>>2];v=h+232|0;Ya(v,H[x+28>>2]+68|0);A=h+220|0;Ya(A,H[x+32>>2]+68|0);q=h+208|0;Ya(q,H[x+24>>2]+68|0);o=h+196|0;Ya(o,q);u=l+68|0;xb(o,u);l=h+184|0;Ya(l,o);H[h+176>>2]=0;H[h+180>>2]=1065353216;H[h+168>>2]=0;H[h+172>>2]=0;B=H[b>>2];D=h+168|0;La[H[H[B>>2]+8>>2]](B,D);Xb(D,l);xb(l,o);lb(q,l);lb(v,l);lb(A,l);l=N(c,28)+a|0;z=L[l+8>>2];y=L[l+4>>2];r=L[l+24>>2];l=h+156|0;Ya(l,d);xb(l,q);p=L[h+160>>2];k=L[h+156>>2];j=L[h+164>>2];H[h+148>>2]=0;H[h+152>>2]=1065353216;H[h+140>>2]=0;H[h+144>>2]=0;w=O(O(k*k)+O(j*j));s=O(O(p*p)+w);n=O(W(s));l=H[a+228>>2];m=O(r*L[l+32>>2]);v=n>m;t=L[l+36>>2];i=L[l+40>>2];C=O(O(r*t)*i);A=C>n;B=v|A;a:{if(!B){w=O(W(w));break a}b:{if(v){k=O(r-m);i=k;j=O(k*k);k=O(n-m);j=O(i-O(W(O(j+O(k*k)))));break b}k=O(C-n);j=O(O(k*O(O(i+i)-O(k/t)))/O(i*i))}q=h+288|0;Ya(q,h+208|0);xb(q,u);o=h+272|0;Ya(o,d);xb(o,u);p=no(q,o);k=p;i=_b(q);m=_b(o);j=O(n+j);i=O(O(O(O(i*i)+O(m*m))-O(j*j))/O(O(i+i)*m));if(!(O(P(i))>O(1))){k=O(k-Ed(i))}if(v){i=O(p*L[l+12>>2]);k=i<k?i:k}j=L[h+288>>2];p=L[h+276>>2];m=L[h+292>>2];n=L[h+272>>2];i=O(O(j*p)-O(m*n));L[h+264>>2]=i;t=n;n=L[h+296>>2];s=L[h+280>>2];j=O(O(t*n)-O(j*s));L[h+260>>2]=j;L[h+256>>2]=O(m*s)-O(n*p);if(A){j=O(j+j);L[h+260>>2]=j}i=c?O(-i):i;j=c?j:O(-j);m=O(k/O(W(O(O(i*i)+O(j*j)))));p=O(j*m);q=h+140|0;o=h+256|0;j=O(i*m);i=L[l+16>>2];c:{if(j>i){i=O(j/i);break c}m=L[l+20>>2];j=O(-j);i=O(0);if(!(m<j)){break c}i=O(j/m)}j=L[l+24>>2];d:{if(j<p){j=O(p/j);break d}m=L[l+28>>2];p=O(-p);j=O(0);if(!(m<p)){break d}j=O(p/m)}i=i>j?i:j;Ab(q,o,i!=O(0)?O(k/i):k,0);o=h+124|0;Ya(o,u);u=q;q=h+208|0;Oo(u,o,q);Nb(h+156|0,d,q);k=L[h+156>>2];j=L[h+164>>2];i=O(O(k*k)+O(j*j));w=O(W(i));p=L[h+160>>2];s=O(O(p*p)+i);n=O(W(s))}e:{if(!(n>r)){r=p;m=k;i=j;break e}i=O(r/n);n=O(n*i);w=O(i*w);r=O(i*p);m=O(i*k);s=O(s*O(i*i));i=O(i*j)}C=O(y*y);E=O(z*z);F=O(C+E);G=O(y+y);t=O(O(F-s)/O(G*z));d=t<O(-1);if(d|t>O(1)){t=d?O(-.9950000047683716):O(.9950000047683716);s=O(F-O(O(O(t+t)*y)*z));n=O(W(s))}y=L[13143];z=L[12899];H[h+296>>2]=0;H[h+288>>2]=0;H[h+292>>2]=1065353216;o=h+124|0;d=h+288|0;Ab(o,d,kb(m,i),1);H[h+296>>2]=0;H[h+288>>2]=-1082130432;H[h+292>>2]=0;i=Ed(O(O(O(C+s)-E)/O(G*n)));u=h+108|0;Ab(u,d,O(z+O(kb(r,w)-i)),1);H[h+296>>2]=0;H[h+288>>2]=0;H[h+292>>2]=1065353216;v=h+92|0;Ab(v,d,O(0),1);q=h+76|0;rb(q,o);Qb(q,u);Qb(q,v);u=(c<<4)+l|0;m=L[u+64>>2];o=h- -64|0;Ya(o,h+232|0);xb(o,h+208|0);Xb(q,o);q=u+52|0;Ya(d,q);w=Ed(t);n=O(0);r=Ed(O(-oi(o,d)));m=O(y-m);if(r>m){Ya(d,q);s=Ed(O(-oi(h+156|0,d)));t=Ho(i,s,r);n=Ho(i,s,m);if(n<O(0)){M[h+56>>3]=z;I=+m;M[h+48>>3]=I;M[h+40>>3]=r;J=+n;M[h+32>>3]=J;Wa(19375,h+32|0);M[h+24>>3]=I;M[h+16>>3]=s;M[h+8>>3]=i;M[h>>3]=J;Wa(29421,h);l=H[a+228>>2];n=L[12899]}i=O(-L[l+4>>2]);r=O(n-t);i=i>r?i:r;n=c?i:O(-i)}d=H[(c?92:96)+a>>2];r=c?O(-g):g;c=k==O(0)&p==O(0);if(!c|j!=O(0)){H[h+252>>2]=0;H[h+244>>2]=0;H[h+248>>2]=0;f:{if(c&j==O(0)){H[h+248>>2]=0;break f}l=h+156|0;c=(d+N(k>=O(0),168)|0)+N(p>=O(0),84)|0;q=c+12|0;g=yc(l,q);o=c+24|0;i=yc(l,o);m=yc(l,c);d=h+288|0;s=kb(i,g);Ab(d,c,s,1);l=h+272|0;g=kb(m,O(W(O(O(g*g)+O(i*i)))));Ab(l,o,O(-g),1);o=h+256|0;i=g;g=L[12817];i=O(i/g);g=O(s/g);Ab(o,q,O(O(O(i*L[c+72>>2])*O(O(1)-g))+O(g*O(O(L[c+80>>2]*i)+L[c+76>>2]))),1);Qb(d,l);Qb(d,o);Wd(d,c+48|0,h+244|0)}L[h+296>>2]=p*j;L[h+288>>2]=k*p;L[h+292>>2]=O(O(-k)*k)-O(j*j);c=h+272|0;Ya(c,h+156|0);sc(c);g=ri(h+288|0,h+244|0,c)}else{g=L[d+336>>2]}g=O(r+g);k=(n<O(0)?O(-n):n)>O(0)?n:O(0);g=(g<O(0)?O(-g):g)>(k<O(0)?O(-k):k)?g:k;if(g!=O(0)){c=h+288|0;Ab(c,h+156|0,g,0);tc(h+76|0,c)}if(B){c=h+288|0;rb(c,h+140|0);L[h+288>>2]=-L[h+288>>2];L[h+292>>2]=-L[h+292>>2];L[h+296>>2]=-L[h+296>>2];tc(h+76|0,c)}H[h+252>>2]=0;H[h+244>>2]=0;H[h+248>>2]=0;c=h+244|0;Ya(c,H[H[x+28>>2]+36>>2]+8|0);d=h+272|0;p=O(y-w);Ab(d,c,p,1);c=h+256|0;l=h+140|0;rb(c,l);x=h+76|0;Qb(c,x);Qb(c,d);L[h+256>>2]=-L[h+256>>2];L[h+260>>2]=-L[h+260>>2];L[h+264>>2]=-L[h+264>>2];Qb(c,e);Qb(c,f);c=H[b>>2];La[H[H[c>>2]+16>>2]](c,l);c=H[b>>2];d=h+168|0;La[H[H[c>>2]+20>>2]](c,d);c=H[b+4>>2];La[H[H[c>>2]+16>>2]](c,x);c=H[b+4>>2];La[H[H[c>>2]+28>>2]](c,d);c=H[b+8>>2];g:{if(H[H[c+4>>2]+24>>2]==5){L[c+20>>2]=p;break g}j=O(0);r=L[H[a+228>>2]+44>>2];h:{if(r==O(0)){break h}k=L[h+260>>2];i=L[h+268>>2];m=O(O(k*k)+O(i*i));if(m<=O(0)){H[h+296>>2]=0;H[h+300>>2]=1065353216;H[h+288>>2]=0;H[h+292>>2]=0;break h}g=O(r*kb(k,i));i:{if(r==O(1)){j=i;i=O(W(m));n=O(j/i);k=O(k/i);break i}n=uc(g);k=ec(g)}j=$g(O(g+g));L[h+300>>2]=n;H[h+296>>2]=0;L[h+292>>2]=k;H[h+288>>2]=0;wi(h+256|0,h+288|0)}L[c+32>>2]=p;L[H[b+8>>2]+36>>2]=j}a=H[b+12>>2];La[H[H[a>>2]+16>>2]](a,h+256|0);Ha=h+304|0}function fm(a,b,c,d){var e=0,f=O(0),g=O(0),h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=Ha-80|0;Ha=e;H[a+8>>2]=0;H[a+12>>2]=0;H[a>>2]=0;H[a+20>>2]=0;F[a+16|0]=0;F[a+24|0]=0;F[a+4|0]=I[a+4|0]&240;o=zb(a+32|0,0,118);H[a+168>>2]=0;H[a+172>>2]=0;H[a+160>>2]=0;H[a+164>>2]=0;H[a+152>>2]=0;H[a+156>>2]=0;H[a+180>>2]=0;H[a+184>>2]=0;G[a+188>>1]=0;H[a+192>>2]=0;H[a+196>>2]=0;H[a+200>>2]=0;H[a+204>>2]=0;H[a+208>>2]=0;H[a+212>>2]=1065353216;b=dd(b);F[a+4|0]=0;H[a>>2]=b;H[e+72>>2]=-1;H[e+76>>2]=0;H[e+68>>2]=0;H[e+64>>2]=0;p=a+96|0;q=a+80|0;l=a+8|0;while(1){a:{if(kj(H[c>>2],H[c+4>>2],e+68|0,e- -64|0,e+72|0)){b:{switch(fb(H[14595],H[e+68>>2])-1|0){case 8:Dm(l,Ob(H[14598],H[e+64>>2]));continue;case 11:m=Ic(H[e+64>>2]);continue;case 13:r=Ic(H[e+64>>2]);continue;case 12:s=Ic(H[e+64>>2]);continue;case 9:t=Ic(H[e+64>>2]);continue;case 10:n=Ic(H[e+64>>2]);continue;case 0:u=a,v=Ic(H[e+64>>2]),F[u+20|0]=v;continue;case 1:u=a,v=Ic(H[e+64>>2]),F[u+21|0]=v;continue;case 2:u=a,v=Ic(H[e+64>>2]),F[u+22|0]=v;continue;case 3:u=a,v=Ic(H[e+64>>2]),F[u+23|0]=v;continue;case 4:u=a,v=Ic(H[e+64>>2]),F[u+24|0]=v;continue;case 14:u=o,v=Ob(H[14596],H[e+64>>2]),H[u>>2]=v;continue;case 15:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+36>>2]=v;continue;case 6:u=a,v=Ob(H[14600],H[e+64>>2]),H[u+40>>2]=v;continue;case 7:u=a,v=Ob(H[14600],H[e+64>>2]),H[u+44>>2]=v;continue;case 16:u=a,v=Ob(H[14596],H[e+64>>2]),H[u+48>>2]=v;continue;case 17:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+52>>2]=v;continue;case 18:pe(e+48|0,H[e+64>>2]);f=L[e+48>>2];b=H[e+56>>2];H[a+60>>2]=H[e+52>>2];H[a+64>>2]=b;L[a+56>>2]=d?f:O(-f);continue;case 19:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+68>>2]=v;continue;case 20:u=a,v=Ob(H[14596],H[e+64>>2]),H[u+72>>2]=v;continue;case 21:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+76>>2]=v;continue;case 38:pe(e+48|0,H[e+64>>2]);f=L[e+48>>2];b=H[e+56>>2];H[a+84>>2]=H[e+52>>2];H[a+88>>2]=b;L[a+80>>2]=d?f:O(-f);continue;case 25:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+92>>2]=v;continue;case 36:pe(e+48|0,H[e+64>>2]);f=L[e+48>>2];b=H[e+56>>2];H[a+100>>2]=H[e+52>>2];H[a+104>>2]=b;L[a+96>>2]=d?f:O(-f);continue;case 40:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+108>>2]=v;continue;case 37:Pf(e+48|0,H[e+64>>2]);f=L[e+48>>2];L[a+116>>2]=L[e+52>>2];L[a+112>>2]=d?f:O(-f);continue;case 39:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+120>>2]=v;continue;case 31:u=a,v=Ob(H[14597],H[e+64>>2]),H[u+124>>2]=v;continue;case 29:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+128>>2]=v;continue;case 30:u=a,v=Ob(H[14596],H[e+64>>2]),H[u+132>>2]=v;continue;case 28:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+136>>2]=v;continue;case 26:h=0;j=0;b=H[e+64>>2];if(!b){H[a+140>>2]=0;f=O(0);g=O(0);break a}while(1){c:{d:{e:{f:{k=I[b|0];switch(k-114|0){case 1:case 2:break c;case 3:case 4:break d;case 0:break e;default:break f}}g:{switch(k-104|0){default:if(k){break c}g=O(h|0);L[a+140>>2]=g;f=O(j|0);break a;case 1:case 2:case 3:break c;case 0:case 4:break g}}h=h+1|0;break c}h=h-1|0;break c}j=j+1|0}b=b+1|0;continue};case 34:pe(e+48|0,H[e+64>>2]);f=L[e+52>>2];g=L[e+56>>2];L[a+152>>2]=L[e+48>>2];L[a+160>>2]=d?g:O(-g);L[a+156>>2]=d?f:O(-f);continue;case 22:pe(e+48|0,H[e+64>>2]);f=L[e+52>>2];g=L[e+56>>2];L[a+164>>2]=L[e+48>>2];L[a+172>>2]=d?g:O(-g);L[a+168>>2]=d?f:O(-f);continue;case 33:Pf(e+48|0,H[e+64>>2]);f=L[e+48>>2];L[a+184>>2]=L[e+52>>2];L[a+180>>2]=d?f:O(-f);continue;case 32:Pf(e+48|0,H[e+64>>2]);f=L[e+48>>2];L[a+196>>2]=L[e+52>>2];L[a+192>>2]=d?f:O(-f);continue;case 23:u=a,v=Ic(H[e+64>>2]),F[u+188|0]=v;continue;case 24:u=a,v=Ic(H[e+64>>2]),F[u+189|0]=v;continue;case 27:u=a,v=Ob(H[14599],H[e+64>>2]),H[u+200>>2]=v;continue;case 41:u=a,v=Ob(H[14601],H[e+64>>2]),H[u+204>>2]=v;continue;case 42:H[e+48>>2]=0;H[e+52>>2]=0;H[e>>2]=e+48;wc(H[e+64>>2],8825,e);L[a+208>>2]=M[e+48>>3];continue;case 43:H[e+48>>2]=0;H[e+52>>2]=1072693248;H[e+16>>2]=e+48;wc(H[e+64>>2],8825,e+16|0);i=M[e+48>>3];if(!(i>0)){continue}L[a+212>>2]=L[a+212>>2]*O(i);continue;case 44:break b;default:continue}}H[e+48>>2]=0;H[e+52>>2]=1072693248;H[e+32>>2]=e+48;wc(H[e+64>>2],8825,e+32|0);i=M[e+48>>3];if(!(i>0)){continue}L[a+212>>2]=L[a+212>>2]/O(i);continue}b=t^1;h:{if(!((b|n)&1)){H[a+12>>2]=1;break h}if(b&n&1){H[a+12>>2]=3;break h}if(H[a+12>>2]){break h}H[a+12>>2]=2}if(s&1){F[a+16|0]=1}if((m|r)&1){H[l>>2]=m&1?6:8}if(!(L[a+140>>2]!=O(0)|L[a+144>>2]!=O(0))){H[a+144>>2]=0;L[a+140>>2]=d?O(1):O(-1)}if(!(H[a+36>>2]|!H[a+32>>2])){H[a+36>>2]=3}i:{if(H[a+92>>2]){break i}if(Bc(q)){break i}H[a+92>>2]=3}if(!(H[a+120>>2]|L[a+112>>2]==O(0)&L[a+116>>2]==O(0))){H[a+120>>2]=3}j:{if(H[a+108>>2]){break j}if(Bc(p)){break j}H[a+108>>2]=3}if(!(H[a+128>>2]|!H[a+124>>2])){H[a+128>>2]=3}if(!(H[a+136>>2]|!H[a+132>>2])){H[a+136>>2]=3}Ha=e+80|0;return a}L[a+144>>2]=f;if(d){continue}L[a+140>>2]=-g;continue}}function dj(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;a:{b:{s=H[a+340>>2];f=s+20|0;k=Fc(f,H[d>>2],0);c:{d:{if(k){break d}g=1;i=Rg(s+80|0,H[d>>2]);if(!i){break c}k=Fc(f,i,24);if(!k){break c}if(!I[a+232|0]){break d}if(!gj(H[a+340>>2],k)){break c}}i=H[k+12>>2];f=La[H[b+36>>2]](b,c,H[a+364>>2],H[a+376>>2])|0;j=H[a+376>>2];g=f+i|0;h=H[a+364>>2];e:{if((g|0)<=(h|0)){break e}g=g+16|0;H[a+364>>2]=g;j=La[H[a+16>>2]](j,g<<4)|0;if(!j){break a}H[a+376>>2]=j;if((f|0)<=(h|0)){break e}La[H[b+36>>2]](b,c,f,j)|0;j=H[a+376>>2]}n=(f|0)>0?f:0;q=(i|0)>0?i:0;r=a+400|0;while(1){if((m|0)!=(n|0)){g=1;f=m<<4;c=H[f+H[a+376>>2]>>2];c=nj(a,b,c,(La[H[b+28>>2]](b,c)|0)+c|0);if(!c){break c}i=H[c>>2]-1|0;if(I[i|0]){g=8;if(H[a+144>>2]!=(b|0)){break c}H[a+272>>2]=H[f+H[a+376>>2]>>2];return 8}F[i|0]=1;H[(l<<2)+j>>2]=H[c>>2];h=l+1|0;i=f+H[a+376>>2]|0;f:{if(!I[i+12|0]){f=0;g:{if(!I[c+8|0]){break g}while(1){if((f|0)==(q|0)){break g}p=N(f,12);f=f+1|0;p=p+H[k+20>>2]|0;if((c|0)!=H[p>>2]){continue}break}g=I[p+4|0]}g=lj(a,b,g,H[i+4>>2],H[i+8>>2],r);if(g){break c}H[(h<<2)+j>>2]=H[a+416>>2];break f}f=Tb(r,b,H[i+4>>2],H[i+8>>2]);H[(h<<2)+j>>2]=f;if(!f){break c}}H[a+416>>2]=H[a+412>>2];h:{i:{f=H[c+4>>2];if(f){if(I[c+9|0]){break i}F[H[c>>2]-1|0]=2;o=o+1|0}l=l+2|0;break h}g=Qg(a,f,c,H[(h<<2)+j>>2],e);if(g){break c}}m=m+1|0;continue}break}H[a+368>>2]=l;j:{k:{b=H[k+8>>2];if(!b){f=-1;break k}f=-1;b=H[b>>2];if(!I[b-1|0]){break k}f=0;while(1){if((f|0)>=(l|0)){break j}if((b|0)==H[(f<<2)+j>>2]){break k}f=f+2|0;continue}}H[a+372>>2]=f}f=0;while(1){if((f|0)!=(q|0)){b=H[k+20>>2]+N(f,12)|0;c=H[b>>2];i=H[c>>2]-1|0;l:{if(I[i|0]){break l}g=H[b+8>>2];if(!g){break l}h=H[c+4>>2];m:{if(h){if(!I[c+9|0]){F[i|0]=2;o=o+1|0;break m}g=Qg(a,h,c,g,e);if(!g){break l}break c}F[i|0]=1}c=(l<<2)+j|0;H[c>>2]=H[H[b>>2]>>2];H[c+4>>2]=H[b+8>>2];l=l+2|0}f=f+1|0;continue}break}H[(l<<2)+j>>2]=0;c=0;n:{if(!o){break n}o:{f=I[a+388|0];p:{if(o<<1>>f){while(1){b=f&255;f=f+1|0;if(o>>b){continue}break}b=f&255;b=b>>>0<=3?3:b;F[a+388|0]=b;c=La[H[a+16>>2]](H[a+380>>2],12<<b)|0;if(!c){break a}H[a+380>>2]=c;i=1<<b;break p}i=1<<f;h=H[a+384>>2];if(h){break o}}h=-1;f=i;while(1){if(!f){break o}f=f-1|0;H[H[a+380>>2]+N(f,12)>>2]=-1;continue}}p=h-1|0;H[a+384>>2]=p;v=0-i|0;w=s+40|0;t=i-1|0;x=t>>>2|0;c=0;while(1){if((c|0)>=(l|0)){break n}u=(c<<2)+j|0;g=H[u>>2];b=g-1|0;f=I[b|0];F[b|0]=0;q:{if((f|0)==2){q=H[H[Fc(w,g,0)+4>>2]+4>>2];if(!q){break b}f=0;b=0;while(1){if(H[q+20>>2]>(f|0)){m=I[H[q+16>>2]+f|0];h=H[a+412>>2];if((h|0)==H[a+408>>2]){if(!Fb(r)){break a}h=H[a+412>>2]}H[a+412>>2]=h+1;F[h|0]=m;f=f+1|0;b=m^N(b,1000003);continue}break}while(1){h=I[g|0];f=g+1|0;g=f;if((h|0)!=58){continue}break}while(1){m=I[f|0];g=m;h=H[a+412>>2];if((h|0)==H[a+408>>2]){if(!Fb(r)){break a}h=H[a+412>>2];g=I[f|0]}H[a+412>>2]=h+1;F[h|0]=g;b=m^N(b,1000003);g=I[f|0];f=f+1|0;if(g){continue}break}y=b&v;m=b&t;z=H[a+380>>2];g=0;while(1){n=N(m,12);f=n+z|0;if((p|0)==H[f>>2]){r:{if(H[f+4>>2]!=(b|0)){break r}h=H[f+8>>2];f=H[a+416>>2];while(1){n=I[f|0];if(!(!n|(n|0)!=I[h|0])){h=h+1|0;f=f+1|0;continue}break}if(n){break r}return 8}g=g&255?g:y>>>I[a+388|0]-1&x|1;f=g&255;m=(m-f|0)+(f>>>0>m>>>0?i:0)|0;continue}break}if(I[a+233|0]){F[H[a+412>>2]-1|0]=I[a+456|0];f=H[H[q>>2]>>2];while(1){h=H[a+412>>2];if((h|0)==H[a+408>>2]){if(!Fb(r)){break a}h=H[a+412>>2]}g=I[f|0];H[a+412>>2]=h+1;F[h|0]=g;g=I[f|0];f=f+1|0;if(g){continue}break}}f=H[a+416>>2];H[a+416>>2]=H[a+412>>2];H[u>>2]=f;H[n+H[a+380>>2]>>2]=p;H[(n+H[a+380>>2]|0)+4>>2]=b;H[(n+H[a+380>>2]|0)+8>>2]=f;o=o-1|0;if(!o){break q}}c=c+2|0;continue}break}c=c+2|0}while(1){if((c|0)>=(l|0)){while(1){b=H[e>>2];if(b){F[H[H[b+12>>2]>>2]-1|0]=0;e=b+4|0;continue}break}g=0;if(!I[a+232|0]){break c}b=H[k+4>>2];s:{if(b){b=H[b+4>>2];if(!b){break b}f=H[d>>2];while(1){c=I[f|0];g=f+1|0;f=g;if((c|0)!=58){continue}break}break s}b=H[s+136>>2];if(!b){break c}g=H[d>>2]}f=0;l=0;t:{if(!I[a+233|0]){break t}h=0;c=H[H[b>>2]>>2];if(!c){break t}while(1){e=c+h|0;l=h+1|0;h=l;if(I[e|0]){continue}break}}H[d+4>>2]=g;H[d+16>>2]=H[b+20>>2];c=H[H[b>>2]>>2];H[d+20>>2]=l;H[d+8>>2]=c;while(1){c=f;f=f+1|0;if(I[c+g|0]){continue}break}k=H[b+20>>2];e=k+(f+l|0)|0;u:{if((e|0)<=H[b+24>>2]){j=H[b+16>>2];break u}e=e+24|0;j=La[H[a+12>>2]](e)|0;if(!j){break a}H[b+24>>2]=e;e=jb(j,H[b+16>>2],H[b+20>>2]);k=a+348|0;while(1){v:{i=H[b+16>>2];k=H[k>>2];if(!k){break v}if((i|0)!=H[k+12>>2]){continue}H[k+12>>2]=e;continue}break}La[H[a+20>>2]](i);H[b+16>>2]=e;k=H[b+20>>2]}e=jb(j+k|0,g,f);if(l){c=c+e|0;F[c|0]=I[a+456|0];jb(c+1|0,H[H[b>>2]>>2],l)}H[d>>2]=H[b+16>>2]}else{F[H[(c<<2)+j>>2]-1|0]=0;c=c+2|0;continue}break}g=0}return g}return 27}return 1}function Zx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;if((b|0)==(c|0)){return-4}h=18;e=1;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{g=a+72|0;switch(I[g+I[b|0]|0]-2|0){case 5:break i;case 4:break j;case 3:break k;case 17:break l;case 9:break m;case 34:break n;case 30:break o;case 29:break p;case 2:break q;case 18:break r;case 33:break s;case 28:break t;case 8:case 19:break u;case 7:break v;case 0:break w;case 11:break x;case 10:break y;case 20:case 22:break f;case 23:case 24:case 25:break g;default:break h}}return Fq(12,a,b+1|0,c,d)|0}return Fq(13,a,b+1|0,c,d)|0}h=-1;f=b+1|0;if((f|0)==(c|0)){break e}z:{A:{B:{C:{D:{e=I[I[b+1|0]+g|0];switch(e-15|0){case 2:case 3:case 4:case 5:case 6:case 8:break z;case 0:break A;case 1:break B;case 7:case 9:break C;default:break D}}if(e-5>>>0<3){break C}if((e|0)!=29){break z}}H[d>>2]=b;return 29}e=b+2|0;if((e|0)==(c|0)){break e}E:{F:{switch(I[I[e|0]+g|0]-20|0){case 7:return Eq(a,b+3|0,c,d)|0;case 0:H[d>>2]=b+3;return 33;case 2:case 4:break F;default:break E}}G:{while(1){a=e;e=a+1|0;if((e|0)==(c|0)){break e}H:{b=I[I[e|0]+g|0];switch(b-21|0){case 0:break a;case 2:case 4:case 5:case 6:case 7:case 8:break E;case 1:case 3:continue;case 9:break H;default:break G}}break}if((a+2|0)==(c|0)){break e}a=I[I[a+2|0]+g|0];if(a>>>0>30){break a}if(1<<a&1075840512){break E}break a}if(b-9>>>0<2){break a}}H[d>>2]=e;return 0}return Dq(a,b+2|0,c,d)|0}H[d>>2]=f;return 0}if((b+1|0)!=(c|0)){break u}H[d>>2]=c;return-15}I:{while(1){a=b;b=b+1|0;if((c|0)==(b|0)){break I}J:{K:{L:{e=I[I[b|0]+g|0];switch(e-9|0){case 1:continue;case 0:break K;default:break L}}if((e|0)==21){continue}break J}if((a+2|0)!=(c|0)){continue}}break}H[d>>2]=b;return 15}H[d>>2]=c;return 15}return Cq(a,b+1|0,c,d)|0}H[d>>2]=b+1;return 38}H[d>>2]=b+1;return 25}a=b+1|0;if((a|0)==(c|0)){return-26}M:{if(I[b+1|0]!=93){break M}if((b+2|0)==(c|0)){break b}if(I[b+2|0]!=62){break M}H[d>>2]=b+3;return 34}H[d>>2]=a;return 26}H[d>>2]=b+1;return 23}a=b+1|0;if((a|0)==(c|0)){return-24}N:{O:{P:{Q:{R:{S:{c=I[I[b+1|0]+g|0];switch(c-32|0){case 0:case 3:case 4:break c;case 2:break P;case 1:break R;default:break S}}switch(c-9|0){case 0:case 1:case 2:break c;case 3:case 4:case 5:break N;case 6:break Q;default:break O}}H[d>>2]=b+2;return 36}H[d>>2]=b+2;return 35}H[d>>2]=b+2;return 37}if((c|0)==21){break c}}H[d>>2]=a;return 0}H[d>>2]=b+1;return 21}H[d>>2]=b+1;return 17}e=b+1|0;if((e|0)==(c|0)){break b}h=0;T:{U:{V:{W:{X:{Y:{i=I[I[e|0]+g|0];switch(i-5|0){case 2:break V;case 1:break W;case 0:break X;default:break Y}}f=2;switch(i-22|0){case 0:case 2:break U;default:break T}}if((c-e|0)<2){break d}if(!(La[H[a+340>>2]](a,e)|0)){break T}f=3;break U}if((c-e|0)<3){break d}if(!(La[H[a+344>>2]](a,e)|0)){break T}f=4;break U}if((c-e|0)<4){break d}if(!(La[H[a+348>>2]](a,e)|0)){break T}f=5}e=b+f|0;while(1){if((c|0)==(e|0)){return-20}b=1;Z:{_:{$:{switch(I[I[e|0]+g|0]-5|0){case 0:if((c-e|0)<2){break d}if(!(La[H[a+328>>2]](a,e)|0)){break T}b=2;break _;case 1:if((c-e|0)<3){break d}if(!(La[H[a+332>>2]](a,e)|0)){break T}b=3;break _;case 4:case 5:case 6:case 16:case 25:case 27:case 31:break Z;case 17:case 19:case 20:case 21:case 22:break _;case 2:break $;default:break T}}if((c-e|0)<4){break d}if(!(La[H[a+336>>2]](a,e)|0)){break T}b=4}e=b+e|0;continue}break}h=20}H[d>>2]=e;return h|0}e=2;if((c-b|0)<2){break d}if(La[H[a+340>>2]](a,b)|0){break f}if(!(La[H[a+328>>2]](a,b)|0)){break h}break g}e=3;if((c-b|0)<3){break d}if(La[H[a+344>>2]](a,b)|0){break f}if(La[H[a+332>>2]](a,b)|0){break g}break h}e=4;if((c-b|0)<4){break d}if(La[H[a+348>>2]](a,b)|0){break f}if(La[H[a+336>>2]](a,b)|0){break g}}H[d>>2]=b;return 0}h=19;f=1}b=b+e|0;while(1){aa:{if((b|0)!=(c|0)){e=1;ba:{ca:{switch(I[I[b|0]+g|0]-5|0){case 0:if((c-b|0)<2){break d}if(!(La[H[a+328>>2]](a,b)|0)){break ba}e=2;break aa;case 1:if((c-b|0)<3){break d}if(!(La[H[a+332>>2]](a,b)|0)){break ba}e=3;break aa;case 2:if((c-b|0)<4){break d}if(!(La[H[a+336>>2]](a,b)|0)){break ba}e=4;break aa;case 4:case 5:case 6:case 15:case 16:case 25:case 27:case 30:case 31:H[d>>2]=b;return h|0;case 29:if(f){break ba}H[d>>2]=b+1;return 32;case 28:if(f){break ba}H[d>>2]=b+1;return 31;case 17:case 19:case 20:case 21:case 22:break aa;case 10:break ca;default:break ba}}if(f){break ba}H[d>>2]=b+1;return 30}H[d>>2]=b;return 0}h=0-h|0;break e}b=b+e|0;continue}}return h|0}return-2}H[d>>2]=a;return 24}return-1}H[d>>2]=e;return 16}function Jb(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,R=0,S=0;k=Ha-96|0;Ha=k;u=i&65535;o=(e^i)&-2147483648;r=e&65535;y=r;R=i>>>16&32767;S=e>>>16&32767;a:{b:{if(R-32767>>>0>4294934529&S-32767>>>0>=4294934530){break b}s=e&2147483647;q=s;j=d;if(!(!d&(q|0)==2147418112?!(b|c):q>>>0<2147418112)){m=d;o=e|32768;break a}s=i&2147483647;p=s;e=h;if(!(!e&(p|0)==2147418112?!(f|g):p>>>0<2147418112)){m=e;o=i|32768;b=f;c=g;break a}if(!(b|j|(q^2147418112|c))){if(!(e|f|(g|p))){o=2147450880;b=0;c=0;break a}o=o|2147418112;b=0;c=0;break a}if(!(e|f|(p^2147418112|g))){e=b|j;d=c|q;b=0;c=0;if(!(d|e)){o=2147450880;break a}o=o|2147418112;break a}if(!(b|j|(c|q))){b=0;c=0;break a}if(!(e|f|(g|p))){b=0;c=0;break a}if((q|0)==65535|q>>>0<65535){j=!(d|r);i=j?b:d;s=j<<6;e=Q(i)+32|0;i=Q(j?c:r);i=s+((i|0)==32?e:i)|0;lc(k+80|0,b,c,d,r,i-15|0);t=16-i|0;d=H[k+88>>2];y=H[k+92>>2];c=H[k+84>>2];b=H[k+80>>2]}if(p>>>0>65535){break b}i=!(h|u);e=i?f:h;r=i<<6;j=Q(e)+32|0;e=Q(i?g:u);e=r+((e|0)==32?j:e)|0;lc(k- -64|0,f,g,h,u,e-15|0);t=(t-e|0)+16|0;h=H[k+72>>2];u=H[k+76>>2];f=H[k+64>>2];g=H[k+68>>2]}e=f;f=g<<15|f>>>17;i=e<<15;e=0;v=i&-32768;K=c;s=gy(v,e,c,0);e=Ka;z=e;L=f;q=b;b=gy(f,0,b,0);c=b+s|0;f=Ka+e|0;i=b>>>0>c>>>0?f+1|0:f;j=0;b=gy(q,l,v,l);p=j+b|0;f=c;e=f+Ka|0;e=b>>>0>p>>>0?e+1|0:e;r=e;M=(f|0)==(e|0)&j>>>0>p>>>0|e>>>0<f>>>0;N=d;w=gy(v,l,d,0);O=Ka;b=gy(K,l,L,l);x=b+w|0;j=Ka+O|0;j=b>>>0>x>>>0?j+1|0:j;b=u<<15|h>>>17;A=h<<15|g>>>17;d=gy(A,0,q,l);B=d+x|0;f=Ka+j|0;f=d>>>0>B>>>0?f+1|0:f;C=f;e=i;D=e+B|0;f=((e|0)==(z|0)&c>>>0<s>>>0|e>>>0<z>>>0)+f|0;f=e>>>0>D>>>0?f+1|0:f;u=f;g=D;c=f;E=y|65536;y=gy(v,l,E,n);P=Ka;d=gy(N,m,L,l);F=d+y|0;e=Ka+P|0;e=d>>>0>F>>>0?e+1|0:e;i=e;G=b|-2147483648;b=gy(G,0,q,l);I=b+F|0;f=Ka+e|0;f=b>>>0>I>>>0?f+1|0:f;d=gy(A,m,K,l);b=d+I|0;J=f;f=f+Ka|0;z=b;s=b>>>0<d>>>0?f+1|0:f;f=b;b=0;q=b+g|0;e=c+f|0;e=b>>>0>q>>>0?e+1|0:e;v=e;f=e;b=q+M|0;c=b>>>0<q>>>0?f+1|0:f;t=((S+R|0)+t|0)-16383|0;d=gy(G,m,K,l);h=Ka;e=gy(E,m,L,l);g=e+d|0;f=Ka+h|0;f=e>>>0>g>>>0?f+1|0:f;n=(h|0)==(f|0)&d>>>0>g>>>0|f>>>0<h>>>0;h=f;e=gy(A,m,N,m);d=e+g|0;f=Ka+f|0;f=d>>>0<e>>>0?f+1|0:f;e=f;g=(f|0)==(h|0)&d>>>0<g>>>0|f>>>0<h>>>0;f=0;h=g;g=g+n|0;f=h>>>0>g>>>0?1:f;h=g;g=gy(G,m,E,m);h=h+g|0;f=Ka+f|0;M=h;g=g>>>0>h>>>0?f+1|0:f;h=d;l=e;e=(j|0)==(O|0)&w>>>0>x>>>0|j>>>0<O>>>0;f=0;j=(j|0)==(C|0)&x>>>0>B>>>0|j>>>0>C>>>0;n=j;j=e+j|0;e=(n>>>0>j>>>0?1:f)+l|0;f=g;d=d+j|0;e=d>>>0<j>>>0?e+1|0:e;n=e;w=d;d=(e|0)==(l|0)&d>>>0<h>>>0|e>>>0<l>>>0;e=d;d=d+M|0;f=e>>>0>d>>>0?f+1|0:f;j=d;h=f;e=gy(A,m,E,m);l=Ka;g=gy(G,m,N,m);d=g+e|0;f=Ka+l|0;f=d>>>0<g>>>0?f+1|0:f;g=f;f=(l|0)==(f|0)&d>>>0<e>>>0|f>>>0<l>>>0;x=g+j|0;e=f+h|0;e=g>>>0>x>>>0?e+1|0:e;l=x;h=e;j=d;e=0;d=e+w|0;f=j+n|0;f=d>>>0<e>>>0?f+1|0:f;e=f;g=(n|0)==(f|0)&d>>>0<w>>>0|f>>>0<n>>>0;f=h;h=g;g=g+l|0;f=h>>>0>g>>>0?f+1|0:f;w=g;g=f;h=d;j=e;e=(s|0)==(J|0)&z>>>0<I>>>0|s>>>0<J>>>0;d=(i|0)==(P|0)&y>>>0>F>>>0|i>>>0<P>>>0;i=(i|0)==(J|0)&F>>>0>I>>>0|i>>>0>J>>>0;d=d+i|0;d=d+e|0;n=s;i=n+h|0;e=d+j|0;f=g;d=i;e=d>>>0<n>>>0?e+1|0:e;h=(e|0)==(j|0)&h>>>0>d>>>0|e>>>0<j>>>0;g=h+w|0;f=h>>>0>g>>>0?f+1|0:f;j=g;g=f;h=d;f=0;i=e;n=(u|0)==(v|0)&q>>>0<D>>>0|u>>>0>v>>>0;l=n;n=n+((u|0)==(C|0)&B>>>0>D>>>0|u>>>0<C>>>0)|0;e=e+(l>>>0>n>>>0?1:f)|0;f=g;d=d+n|0;e=d>>>0<n>>>0?e+1|0:e;h=(e|0)==(i|0)&d>>>0<h>>>0|e>>>0<i>>>0;g=h;h=h+j|0;f=g>>>0>h>>>0?f+1|0:f;i=f;c:{if(f&65536){t=t+1|0;break c}j=r>>>31|0;g=0;f=i<<1|h>>>31;h=h<<1|e>>>31;i=f;f=e<<1|d>>>31;d=d<<1|c>>>31;e=f;f=r<<1|p>>>31;p=p<<1;r=f;f=c<<1|b>>>31;b=b<<1|j;c=f|g}if((t|0)>=32767){o=o|2147418112;b=0;c=0;break a}d:{if((t|0)<=0){g=1-t|0;if(g>>>0<=127){f=t+127|0;lc(k+48|0,p,r,b,c,f);lc(k+32|0,d,e,h,i,f);Td(k+16|0,p,r,b,c,g);Td(k,d,e,h,i,g);p=H[k+32>>2]|H[k+16>>2]|(H[k+48>>2]|H[k+56>>2]|(H[k+52>>2]|H[k+60>>2]))!=0;r=H[k+36>>2]|H[k+20>>2];b=H[k+40>>2]|H[k+24>>2];c=H[k+44>>2]|H[k+28>>2];d=H[k>>2];e=H[k+4>>2];g=H[k+8>>2];f=H[k+12>>2];break d}b=0;c=0;break a}g=h;f=i&65535|t<<16}m=g|m;o=f|o;if(!(!b&(c|0)==-2147483648?!(p|r):(c|0)>0|(c|0)>=0)){b=d+1|0;j=b?e:e+1|0;e=o;c=j;d=!(j|b);m=d+m|0;o=d>>>0>m>>>0?e+1|0:e;break a}if(b|p|(c^-2147483648|r)){b=d;c=e;break a}f=e;b=d&1;c=b;b=b+d|0;f=c>>>0>b>>>0?f+1|0:f;c=f;d=(e|0)==(f|0)&b>>>0<d>>>0|e>>>0>f>>>0;f=o;m=d+m|0;o=m>>>0<d>>>0?f+1|0:f}H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=m;H[a+12>>2]=o;Ha=k+96|0}function fk(a,b){var c=O(0),d=0,e=0,f=O(0),g=O(0),h=0,i=0,j=0,k=0,l=O(0),m=0,n=O(0),o=0,p=O(0),q=0,r=0;i=Ha-48|0;Ha=i;d=a+20|0;h=oc(d);a:{if(h){if((b|0)==(d|0)){break a}L[b>>2]=L[a+20>>2];L[b+4>>2]=L[a+24>>2];L[b+8>>2]=L[a+28>>2];break a}if((b|0)==(d|0)){break a}L[a+20>>2]=L[b>>2];L[a+24>>2]=L[b+4>>2];L[a+28>>2]=L[b+8>>2]}d=b+12|0;e=a+32|0;c=L[a+32>>2];b:{c:{if(!(c==O(0)&L[a+36>>2]==O(0))){if((d|0)==(e|0)){break c}L[b+12>>2]=c;L[b+16>>2]=L[a+36>>2];break c}if((d|0)!=(e|0)){L[a+32>>2]=L[b+12>>2];L[a+36>>2]=L[b+16>>2]}if(!h){break b}}Nk(b)}d=H[a+56>>2];d:{if(If(d)){break d}e=H[b+36>>2];if(!e){break d}d=jb(d,e,217);h=H[d+220>>2];if(h){Va(h);H[d+220>>2]=0}if(H[e+220>>2]){h=Gf(Xa(220));H[d+220>>2]=h;jb(h,H[e+220>>2],217);L[d+224>>2]=L[e+224>>2]}F[d+233|0]=I[e+233|0];ze(H[d+236>>2],H[e+236>>2]);d=H[a+56>>2]}H[b+36>>2]=d;if(!I[d+233|0]){tl(d);b=H[d+220>>2];e:{if(!b){break e}tl(b);j=d+80|0;e=1;while(1){b=H[d+220>>2];if((e|0)==5){c=L[b+160>>2];g=L[d+224>>2];f=L[d+160>>2];f:{if(f!=O(-100)){if(c==O(-100)){break f}c=O(O(f*O(O(1)-g))+O(g*c))}L[d+160>>2]=c}c=L[b+164>>2];f=L[d+164>>2];g:{if(f!=O(-100)){if(c==O(-100)){break g}c=O(O(f*O(O(1)-g))+O(g*c))}L[d+164>>2]=c}c=L[b+168>>2];f=L[d+168>>2];h:{if(f!=O(-100)){if(c==O(-100)){break h}c=O(O(f*O(O(1)-g))+O(g*c))}L[d+168>>2]=c}c=L[b+172>>2];f=L[d+172>>2];i:{if(f!=O(-100)){if(c==O(-100)){break i}c=O(O(f*O(O(1)-g))+O(g*c))}L[d+172>>2]=c}c=L[b+176>>2];f=L[d+176>>2];if(f!=O(-100)){if(c==O(-100)){break e}c=O(O(f*O(O(1)-g))+O(g*c))}L[d+176>>2]=c}else{h=b;b=e<<4;h=h+b|0;c=L[h+80>>2];g=L[d+224>>2];b=b+j|0;f=L[b>>2];j:{if(f!=O(-100)){if(c==O(-100)){break j}c=O(O(f*O(O(1)-g))+O(g*c))}L[b>>2]=c}c=L[h+84>>2];f=L[b+4>>2];k:{if(f!=O(-100)){if(c==O(-100)){break k}c=O(O(f*O(O(1)-g))+O(g*c))}L[b+4>>2]=c}c=L[h+88>>2];f=L[b+8>>2];l:{if(f!=O(-100)){if(c==O(-100)){break l}c=O(O(f*O(O(1)-g))+O(g*c))}L[b+8>>2]=c}c=L[h+92>>2];f=L[b+12>>2];m:{if(f!=O(-100)){if(c==O(-100)){break m}c=O(O(f*O(O(1)-g))+O(g*c))}L[b+12>>2]=c}e=e+1|0;continue}break}}F[d+233|0]=1}e=H[a+72>>2];a=H[a+56>>2];h=(H[H[e>>2]+72>>2]+N(I[a+232|0],60)|0)+52|0;j=H[a+236>>2];d=0;while(1){b=0;if((d|0)==5){h=a+160|0;if(!Lc(h)){H[h>>2]=0;H[h+4>>2]=0;H[h+16>>2]=0;H[h+8>>2]=0;H[h+12>>2]=0}H[i+32>>2]=0;H[i+24>>2]=0;H[i+28>>2]=0;H[i+16>>2]=0;H[i+20>>2]=0;G[i+8>>1]=65535;H[i>>2]=-1;H[i+4>>2]=-1;m=a+80|0;e=0}else{while(1){if((b|0)!=3){m=b<<2;k=N(d,12);ci(H[m+(k+j|0)>>2],H[H[e+4>>2]+(H[H[m+(h+k|0)>>2]+4>>2]<<2)>>2]);b=b+1|0;continue}break}d=d+1|0;continue}break}d=1;while(1){n:{o:{p:{if((d|0)==5){if((e&65535)==1){break p}b=0;d=e<<16>>16;e=(d|0)>0?d:0;c=O(d-1|0);while(1){if((b|0)==(e|0)){break o}d=G[(b<<1)+i>>1];j=H[H[a+236>>2]+N(d,12)>>2];d=d<<2;g=O(O((b&65535)>>>0)/c);La[H[H[j>>2]+40>>2]](j,O(O(L[d+(i+16|0)>>2]*O(O(L[d+52736>>2]*O(O(1)-g))+O(g*L[d+52768>>2])))*O(.25)));b=b+1|0;continue}}j=d<<4;b=j+m|0;c=L[b+12>>2];k=c==O(-100);g=L[b>>2];f=L[b+4>>2];n=L[b+8>>2];if(k&!(g!=O(-100)|f!=O(-100)|n!=O(-100))){break n}q:{if(k){break q}L[(i+16|0)+(d<<2)>>2]=c;if(c==O(0)){break q}G[(e<<16>>16<<1)+i>>1]=d;e=e+1|0}q=j+45680|0;b=0;r=N(d,12);while(1){if((b|0)==3){break n}k=b<<2;l=L[(k+j|0)+45760>>2];c=g;r:{s:{switch(b-1|0){case 0:c=f;break r;case 1:break s;default:break r}}c=n}o=H[(H[a+236>>2]+r|0)+(H[k+31984>>2]<<2)>>2];La[H[H[o>>2]+32>>2]](o,O(L[k+q>>2]*O(O((c==O(-100)?O(0):O(c*O(.25)))*O(O(1)-l))+l)));b=b+1|0;continue}}b=G[i>>1];d=H[H[a+236>>2]+N(b,12)>>2];e=(b|0)<2?52736:52768;b=b<<2;La[H[H[d>>2]+40>>2]](d,O(O(L[e+b>>2]*L[b+(i+16|0)>>2])*O(.25)))}g=L[a+176>>2];f=L[a+172>>2];n=L[a+160>>2];l=O(0);t:{if(!Lc(h)){break t}c=L[a+164>>2];l=c!=O(-100)?c:O(0);b=0;while(1){if((b|0)==3){break t}d=b<<2;p=L[d+45760>>2];c=n;u:{v:{switch(b-1|0){case 0:c=f;break u;case 1:break v;default:break u}}c=g}e=H[H[a+236>>2]+(H[d+31984>>2]<<2)>>2];La[H[H[e>>2]+32>>2]](e,O(L[d+45680>>2]*O(O((c==O(-100)?O(0):O(c*O(.25)))*O(O(1)-p))+p)));b=b+1|0;continue}}b=H[H[a+236>>2]>>2];La[H[H[b>>2]+40>>2]](b,O(O(l*L[13177])*O(.25)));c=L[a+168>>2];if(c!=O(-100)){La[H[H[b>>2]+48>>2]](b,O(O(c*L[13177])*O(.25)))}Ha=i+48|0;return}d=d+1|0;continue}}function Js(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=O(0),h=0,i=O(0),j=O(0),k=0,l=O(0),m=0,n=0,o=0,p=0,q=0,r=0;d=Ha-112|0;Ha=d;Qc(a,b,c);f=H[a+8>>2];i=L[a+40>>2];a:{b:{c:{d:{e:{e=H[a+528>>2];h=I[e+13|0]&64;if(h){j=i;switch(f-3|0){case 0:case 2:break e;default:break d}}if((f&-2)==4){break e}j=i;break c}e=Ke(c,H[e+20>>2]);F[e+52|0]=0;g=L[H[e+56>>2]+228>>2];j=L[H[b>>2]+264>>2];hk(e+44|0,H[H[a+528>>2]>>2]+272|0);j=O(i*O(O(j*O(P(g)))+O(1)));f=H[a+8>>2];i=L[a+40>>2];if(!h){break c}}g=i;if((f&-2)!=4){break a}break b}g=i;switch(f-3|0){case 0:case 2:break b;default:break a}}Ke(c+72|0,H[H[a+528>>2]+24>>2]);F[c+124|0]=0;g=L[H[b>>2]+264>>2];l=L[H[c+128>>2]+228>>2];hk(c+116|0,H[H[a+528>>2]>>2]+272|0);g=O(i*O(O(g*O(P(l)))+O(1)));i=L[a+40>>2]}e=(h?44:116)+c|0;f=H[e+4>>2];H[a+512>>2]=H[e>>2];H[a+516>>2]=f;e=H[c+120>>2];H[a+520>>2]=H[c+116>>2];H[a+524>>2]=e;l=i;i=g<j?j:g;if(l!=i){L[a+40>>2]=i}q=a+284|0;lm(H[a+528>>2],q);f:{g:{e=H[a+8>>2];switch(e-3|0){case 0:case 2:break f;default:break g}}H[a+340>>2]=H[a+116>>2]}if((e&-2)!=4){H[a+452>>2]=H[a+228>>2]}e=H[a+528>>2];f=H[e+40>>2];o=f+(h?64:63)|0;p=f+(h?63:64)|0;k=H[f+24>>2];r=k>>>8|0;m=H[f+12>>2];n=(m&16777215)!=(k&16777215)|(H[f+16>>2]&16777215)!=(H[f+28>>2]&16777215)?n:L[f+20>>2]==L[f+32>>2];o=I[o|0];p=I[p|0];f=pc(m,m>>>8|0);k=pc(k,r);m=h?k:f;i=O(0);h:{if(!(!(p&1)|((h?f:k)|n)!=1)){H[d+56>>2]=0;f=H[e>>2];e=H[H[e+28>>2]+16>>2];H[d+16>>2]=e;H[d+108>>2]=e;rc(f,0,d+16|0,0,d+68|0,d+56|0);e=H[d+56>>2];i:{if(!e){db();Wa(15976,0);bc(H[H[a+528>>2]+28>>2]+16|0,H[14711]);Lb();g=O(0);break i}H[d+104>>2]=0;H[d+96>>2]=0;H[d+100>>2]=0;f=d+96|0;Eo(a+324|0,52916,f);H[d+92>>2]=0;H[d+84>>2]=0;H[d+88>>2]=0;g=il(H[H[H[a+528>>2]+28>>2]+56>>2],e,f,d+84|0)}e=H[a+528>>2];break h}g=O(0)}if(!(!(o&1)|(m|n)!=1)){H[d+56>>2]=0;f=H[e>>2];e=H[H[e+32>>2]+16>>2];H[d+12>>2]=e;H[d+80>>2]=e;rc(f,0,d+12|0,0,d+68|0,d+56|0);e=H[d+56>>2];j:{if(!e){db();Wa(16018,0);bc(H[H[a+528>>2]+32>>2]+16|0,H[14711]);Lb();i=O(0);break j}H[d+104>>2]=0;H[d+96>>2]=0;H[d+100>>2]=0;f=d+96|0;Eo(a+436|0,53752,f);H[d+92>>2]=0;H[d+84>>2]=0;H[d+88>>2]=0;i=il(H[H[H[a+528>>2]+32>>2]+56>>2],e,f,d+84|0)}e=H[a+528>>2]}i=O(g+i);if(H[H[e+40>>2]+44>>2]){i=O(O(L[e+16>>2]*Wm(H[b>>2],c+4|0))+i)}k:{if(!(i>=O(0))){break k}n=H[a+528>>2];if(!H[H[n+40>>2]+44>>2]){break k}f=0;e=0;b=I[c+16|0]-1|0;if(b>>>0<=10){e=J[(b<<1)+33952>>1]}b=I[c+88|0]-1|0;if(b>>>0<=10){f=J[(b<<1)+33952>>1]}k=c+16|0;m=c+88|0;H[d+104>>2]=0;H[d+96>>2]=0;H[d+100>>2]=0;b=e<<16>>16;e=f<<16>>16;f=(b|0)>(e|0);e=(b|0)<(e|0);r=h?f:e;b=0;l:{if(h?e:f){break l}b=0;if(p&1){break l}b=gk(H[n+28>>2],d+96|0,H[(h?k:m)>>2])}H[d+92>>2]=0;H[d+84>>2]=0;H[d+88>>2]=0;m:{n:{o:{if(!((o|r)&1)){f=d+84|0;e=gk(H[H[a+528>>2]+32>>2],f,H[(h?m:k)>>2]);H[d+76>>2]=0;H[d+68>>2]=0;H[d+72>>2]=0;if(b){if(!e){break n}if(oi(d+96|0,f)>O(.800000011920929)){H[d+76>>2]=0;H[d+68>>2]=1065353216;H[d+72>>2]=0;break m}b=d+68|0;e=d+96|0;f=d+84|0;Nb(b,e,f);g=sd(e);j=sd(f);Gd(b,O(W(g<j?g:j)));break m}if(!e){break o}xb(d+68|0,d+84|0);break m}H[d+76>>2]=0;H[d+68>>2]=0;H[d+72>>2]=0;if(b){break n}}H[d+76>>2]=0;H[d+68>>2]=1065353216;H[d+72>>2]=0;break m}Ya(d+68|0,d+96|0)}if(!(L[d+68>>2]!=O(0)|L[d+72>>2]!=O(0)|L[d+76>>2]!=O(0))){H[d+76>>2]=0;H[d+68>>2]=1065353216;H[d+72>>2]=0}j=O(.5);b=H[a+528>>2];e=I[b+13|0];g=O(.5);p:{if(e&1){break p}g=L[13313];l=O(O(1)-g);if(e&2){j=h?l:g;g=h?g:l;break p}j=h?g:l;g=h?l:g}Gd(d+68|0,i);H[d+64>>2]=0;H[d+56>>2]=0;H[d+60>>2]=0;h=H[b+28>>2];q:{if(pc(I[h+4|0],I[h+5|0]|I[h+6|0]<<8)){break q}b=H[b+32>>2];if(pc(I[b+4|0],I[b+5|0]|I[b+6|0]<<8)){break q}Nb(d+56|0,a+400|0,a+288|0)}H[d+52>>2]=0;H[d+44>>2]=0;H[d+48>>2]=0;b=d+44|0;Nb(b,d+68|0,d+56|0);h=d+32|0;Ya(h,b);wb(h,g);e=d+20|0;Ya(e,b);wb(e,j);xb(a+288|0,h);lb(a+400|0,e)}if(gh(J[a+508>>1])){Sk(a+60|0,q)}if(gh(J[a+510>>1])){Sk(a+172|0,a+396|0)}nm(H[a+528>>2],q);r:{s:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break s;default:break r}}L[a+356>>2]=L[H[c+56>>2]+228>>2]}if((b&-2)==4){L[a+468>>2]=L[H[c+128>>2]+228>>2]}La[H[H[a>>2]+68>>2]](a);Ha=d+112|0}function op(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;i=Ha-560|0;Ha=i;g=c;c=(c-3|0)/24|0;r=(c|0)>0?c:0;k=g+N(r,-24)|0;o=H[(e<<2)+41536>>2];j=d-1|0;if((o+j|0)>=0){g=d+o|0;c=r-j|0;while(1){M[(i+320|0)+(h<<3)>>3]=(c|0)<0?0:+H[(c<<2)+41552>>2];c=c+1|0;h=h+1|0;if((g|0)!=(h|0)){continue}break}}q=k-24|0;g=0;h=(o|0)>0?o:0;n=(d|0)<=0;while(1){a:{if(n){f=0;break a}l=g+j|0;c=0;f=0;while(1){f=M[(c<<3)+a>>3]*M[(i+320|0)+(l-c<<3)>>3]+f;c=c+1|0;if((d|0)!=(c|0)){continue}break}}M[(g<<3)+i>>3]=f;c=(g|0)==(h|0);g=g+1|0;if(!c){continue}break}w=47-k|0;s=48-k|0;t=(k|0)<25;x=k-25|0;g=o;while(1){f=M[(g<<3)+i>>3];c=0;h=g;if((g|0)>0){while(1){n=(i+480|0)+(c<<2)|0;m=f*5.960464477539063e-8;b:{if(P(m)<2147483648){j=~~m;break b}j=-2147483648}m=+(j|0);f=m*-16777216+f;c:{if(P(f)<2147483648){j=~~f;break c}j=-2147483648}H[n>>2]=j;h=h-1|0;f=M[(h<<3)+i>>3]+m;c=c+1|0;if((g|0)!=(c|0)){continue}break}}f=be(f,q);f=f+T(f*.125)*-8;d:{if(P(f)<2147483648){n=~~f;break d}n=-2147483648}f=f-+(n|0);e:{f:{g:{h:{if(!t){h=(g<<2)+i|0;j=H[h+476>>2];c=j>>s;l=h;h=j-(c<<s)|0;H[l+476>>2]=h;n=c+n|0;j=h>>w;break h}if(q){break g}j=H[((g<<2)+i|0)+476>>2]>>23}if((j|0)<=0){break e}break f}j=2;if(f>=.5){break f}j=0;break e}c=0;l=0;h=1;if((g|0)>0){while(1){h=(i+480|0)+(c<<2)|0;u=H[h>>2];i:{j:{if(l){l=16777215}else{if(!u){break j}l=16777216}H[h>>2]=l-u;l=1;h=0;break i}l=0;h=1}c=c+1|0;if((g|0)!=(c|0)){continue}break}}k:{if(t){break k}c=8388607;l:{switch(x|0){case 1:c=4194303;break;case 0:break l;default:break k}}l=(g<<2)+i|0;H[l+476>>2]=H[l+476>>2]&c}n=n+1|0;if((j|0)!=2){break e}f=1-f;j=2;if(h){break e}f=f-be(1,q)}m:{n:{if(f==0){h=0;c=g;if((g|0)<=(o|0)){break m}while(1){c=c-1|0;h=H[(i+480|0)+(c<<2)>>2]|h;if((c|0)>(o|0)){continue}break}if(!h){break m}k=q;while(1){k=k-24|0;g=g-1|0;if(!H[(i+480|0)+(g<<2)>>2]){continue}break}break n}f=be(f,24-k|0);o:{if(f>=16777216){d=(i+480|0)+(g<<2)|0;m=f*5.960464477539063e-8;p:{if(P(m)<2147483648){c=~~m;break p}c=-2147483648}f=+(c|0)*-16777216+f;q:{if(P(f)<2147483648){a=~~f;break q}a=-2147483648}H[d>>2]=a;g=g+1|0;break o}if(P(f)<2147483648){c=~~f}else{c=-2147483648}k=q}H[(i+480|0)+(g<<2)>>2]=c}f=be(1,k);if((g|0)>=0){d=g;while(1){a=d;M[(a<<3)+i>>3]=f*+H[(i+480|0)+(a<<2)>>2];d=a-1|0;f=f*5.960464477539063e-8;if(a){continue}break}h=g;while(1){f=0;c=0;a=g-h|0;d=(a|0)>(o|0)?o:a;if((d|0)>=0){while(1){f=M[(c<<3)+44320>>3]*M[(c+h<<3)+i>>3]+f;k=(c|0)!=(d|0);c=c+1|0;if(k){continue}break}}M[(i+160|0)+(a<<3)>>3]=f;a=(h|0)>0;h=h-1|0;if(a){continue}break}}r:{s:{t:{switch(e-1|0){case 2:u:{if((g|0)<=0){break u}d=(i+160|0)+(g<<3)|0;f=M[d>>3];c=g;while(1){m=f;e=i+160|0;a=c-1|0;h=e+(a<<3)|0;v=M[h>>3];f=v+f;M[e+(c<<3)>>3]=m+(v-f);M[h>>3]=f;e=c>>>0>1;c=a;if(e){continue}break}if((g|0)==1){break u}f=M[d>>3];c=g;while(1){m=f;d=i+160|0;a=c-1|0;e=d+(a<<3)|0;p=M[e>>3];f=p+f;M[d+(c<<3)>>3]=m+(p-f);M[e>>3]=f;d=c>>>0>2;c=a;if(d){continue}break}p=0;while(1){p=p+M[(i+160|0)+(g<<3)>>3];a=(g|0)>2;g=g-1|0;if(a){continue}break}}f=M[i+160>>3];if(j){break s}M[b>>3]=f;f=M[i+168>>3];M[b+16>>3]=p;M[b+8>>3]=f;break r;default:f=0;if((g|0)>=0){while(1){a=g;g=g-1|0;f=f+M[(i+160|0)+(a<<3)>>3];if(a){continue}break}}M[b>>3]=j?-f:f;break r;case 0:case 1:break t}}f=0;if((g|0)>=0){d=g;while(1){a=d;d=a-1|0;f=f+M[(i+160|0)+(a<<3)>>3];if(a){continue}break}}M[b>>3]=j?-f:f;f=M[i+160>>3]-f;c=1;if((g|0)>0){while(1){f=f+M[(i+160|0)+(c<<3)>>3];a=(c|0)!=(g|0);c=c+1|0;if(a){continue}break}}M[b+8>>3]=j?-f:f;break r}M[b>>3]=-f;f=M[i+168>>3];M[b+16>>3]=-p;M[b+8>>3]=-f}Ha=i+560|0;return n&7}c=1;while(1){h=c;c=c+1|0;if(!H[(i+480|0)+(o-h<<2)>>2]){continue}break}h=g+h|0;while(1){j=d+g|0;g=g+1|0;M[(i+320|0)+(j<<3)>>3]=H[(r+g<<2)+41552>>2];c=0;f=0;if((d|0)>0){while(1){f=M[(c<<3)+a>>3]*M[(i+320|0)+(j-c<<3)>>3]+f;c=c+1|0;if((d|0)!=(c|0)){continue}break}}M[(g<<3)+i>>3]=f;if((g|0)<(h|0)){continue}break}g=h;continue}}function cm(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;d=Ha-384|0;Ha=d;if(c){g=H[c+8>>2];e=H[c+4>>2]}Rc(e,5858,d+51|0,0);Rc(e,4730,d+50|0,0);Rc(e,7989,d+49|0,0);Rc(e,8005,d+48|0,0);Rc(e,7997,d+47|0,0);Rc(e,9541,d+46|0,0);Rc(e,10409,d+45|0,0);Rc(e,6212,d+44|0,0);Rc(e,10969,d+43|0,1);h=I[d+49|0];a:{if(!(I[d+47|0]|(h|I[d+48|0]))){if(I[d+46|0]!=1){break a}}F[d+51|0]=1}e=0;b:{c:{d:{e:{f:{g:{if(!(!g|!H[g+12>>2])){e=5;f=I[d+51|0];if((f|0)!=1){break g}}if(!(F[d+50|0]&1)){break e}if(F[d+51|0]&1){break f}break d}e=bm(c);c=I[d+50|0];if((e|0)==1){e=c&1?2:1;break b}if(!(c&1)){break e}if(!f){break d}}db();H[d+16>>2]=a;Wa(23248,d+16|0);F[52605]=1;F[d+50|0]=0}if((e|0)!=5){break b}break c}if((e|0)!=5){break b}db();H[d+32>>2]=a;Wa(22166,d+32|0);F[52605]=1;F[d+50|0]=0}j=1;e=5;if(I[d+44|0]!=1){break b}db();H[d>>2]=a;Wa(22257,d);F[d+44|0]=0}c=1;f=Nh(Xa(52),a,b,I[d+43|0]);a=I[d+51|0];F[f+14|0]=a&(h^1)|h<<1|I[d+48|0]<<2|I[d+47|0]<<3;l=e&3;b=(l|0)==1;i=(e|0)==2|j;F[f+13|0]=a|(I[f+13|0]&194|(b<<2|(i?8:0))|I[d+46|0]<<4|I[d+45|0]<<5);h=I[d+44|0];h:{if(h){break h}if(!b){am(f,1)}if(i){break h}am(f,0)}k=Eh(f,g,0);c=g?!(H[g+12>>2]-k&65535):c;b=I[f+13|0]&64;i=b?1:2;i:{if(!e){a=0;if(h){break i}a=oe(Xa(536),b?3:4,f);$e(a+12|0,1);b=oe(Xa(536),I[f+13|0]&64?4:3,f);$e(b+12|0,1);a=ne(a,b,(I[f+13|0]&64)>>>6|0);break i}a=oe(Xa(536),me(e,(b|0)!=0),f);$e(a+12|0,c?3:1);if(h|j){break i}b=oe(Xa(536),me((e|0)==1?2:1,(I[f+13|0]&64)>>>6|0),f);$e(b+12|0,1);a=ne(a,b,(e|0)==(i|0))}m=H[14717];j:{if(!m){break j}b=I[f+13|0];if(b&4){Dh(H[f+20>>2],H[m+20>>2]);b=I[f+13|0]}if(!(b&8)){break j}Dh(H[f+24>>2],H[H[14717]+24>>2])}k:{if(c){if(!h){e=a;break k}if(!(e?(e|0)!=5:0)){e=le(Xa(528),5);break k}e=ne(a,le(Xa(528),me((e|0)==1?2:1,(I[f+13|0]&64)>>>6|0)),(e|0)==(i|0));break k}b=Xa(580);if(j){e=ke(b,5);Hc(e+528|0,a);H[f+44>>2]=e;_l(f,e,g,k,1,1,J[f+14>>1]);break k}b=ke(b,me(e,(I[f+13|0]&64)>>>6|0));_l(f,b,g,k,(l|0)==1,(e|0)==2,J[f+14>>1]);l:{if(H[b+540>>2]!=1){g=b;break l}g=H[H[b+528>>2]>>2];Xe(g,b);cd(b+528|0,0,0);La[H[H[b>>2]+4>>2]](b)}b=le(Xa(528),me((e|0)==1?2:1,(I[f+13|0]&64)>>>6|0));if(h){c=ke(Xa(580),5);h=c+528|0;Hc(h,a);Hc(h,g);e=ne(c,b,(e|0)==(i|0));break k}b=ne(g,b,(e|0)==(i|0));e=ke(Xa(580),5);c=e+528|0;Hc(c,a);Hc(c,b)}H[f+44>>2]=e;Nf(f+44|0);F[d+357|0]=0;F[d+358|0]=0;F[d+356|0]=0;F[d+353|0]=0;F[d+354|0]=0;F[d+352|0]=0;H[d+348>>2]=1056964608;F[d+345|0]=0;F[d+346|0]=0;F[d+344|0]=0;F[d+341|0]=0;F[d+342|0]=0;F[d+340|0]=0;H[d+336>>2]=1056964608;F[d+333|0]=0;F[d+334|0]=0;F[d+332|0]=0;F[d+329|0]=0;F[d+330|0]=0;F[d+328|0]=0;H[d+324>>2]=1056964608;F[d+321|0]=0;F[d+322|0]=0;F[d+320|0]=0;F[d+317|0]=0;F[d+318|0]=0;F[d+316|0]=0;F[d+373|0]=0;F[d+374|0]=0;F[d+375|0]=0;F[d+376|0]=0;F[d+377|0]=0;F[d+378|0]=0;F[d+379|0]=0;F[d+380|0]=0;H[d+368>>2]=0;H[d+372>>2]=0;H[d+360>>2]=0;H[d+364>>2]=0;H[d+248>>2]=0;H[d+252>>2]=0;H[d+240>>2]=0;H[d+244>>2]=0;H[d+232>>2]=0;H[d+236>>2]=0;H[d+276>>2]=0;H[d+280>>2]=0;H[d+284>>2]=0;H[d+288>>2]=0;H[d+292>>2]=0;H[d+296>>2]=0;H[d+224>>2]=0;H[d+228>>2]=0;H[d+268>>2]=0;H[d+272>>2]=0;F[d+264|0]=1;H[d+256>>2]=1065353216;H[d+260>>2]=0;F[d+308|0]=0;H[d+300>>2]=1065353216;H[d+304>>2]=0;a=H[f+44>>2];La[H[H[a>>2]+24>>2]](a,d+224|0,d+316|0);a=H[f+44>>2];G[d+220>>1]=0;G[d+222>>1]=0;La[H[H[a>>2]+28>>2]](a,d+222|0,d+220|0);a=H[f+44>>2];La[H[H[a>>2]+36>>2]](a);a=Zl(d+52|0,f);b=H[f+44>>2];La[H[H[b>>2]+20>>2]](b,f,a);Lh(a);Ha=d+384|0;return f}function Ql(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=Xa(32);H[f+12>>2]=0;H[f+4>>2]=0;H[f+8>>2]=0;H[f+28>>2]=0;H[f+20>>2]=0;H[f>>2]=34052;a=ib(472);a:{if(!a){break a}H[a+20>>2]=15;H[a+16>>2]=16;H[a+12>>2]=17;H[a+364>>2]=16;H[a+32>>2]=0;H[a+8>>2]=0;e=ib(256);H[a+376>>2]=e;if(e){c=ib(1024);H[a+44>>2]=c;b:{if(!c){break b}H[a+48>>2]=c+1024;b=ib(168);if(!b){Va(c);break b}H[b+80>>2]=0;H[b+84>>2]=0;H[b+104>>2]=0;H[b+108>>2]=0;c=a+12|0;H[b+100>>2]=c;H[b+124>>2]=c;H[b+8>>2]=0;H[b+12>>2]=0;F[b+4|0]=0;H[b+28>>2]=0;H[b+32>>2]=0;F[b+24|0]=0;H[b+16>>2]=c;H[b>>2]=0;H[b+48>>2]=0;H[b+52>>2]=0;F[b+44|0]=0;H[b+36>>2]=c;H[b+20>>2]=0;H[b+96>>2]=0;H[b+88>>2]=0;H[b+92>>2]=0;H[b+112>>2]=0;H[b+116>>2]=0;H[b+120>>2]=0;H[b+68>>2]=0;H[b+72>>2]=0;F[b+64|0]=0;H[b+56>>2]=c;H[b+40>>2]=0;H[b+60>>2]=0;H[b+76>>2]=c;H[b+132>>2]=0;H[b+136>>2]=0;F[b+140|0]=0;H[b+144>>2]=0;H[b+148>>2]=0;H[b+152>>2]=0;H[b+156>>2]=0;H[b+160>>2]=0;H[b+164>>2]=0;G[b+128>>1]=1;F[b+130|0]=0;H[a+360>>2]=0;H[a+340>>2]=b;H[a+352>>2]=0;H[a+288>>2]=0;H[a+448>>2]=0;H[a+452>>2]=0;F[a+456|0]=33;H[a+244>>2]=0;H[a+124>>2]=0;H[a+400>>2]=0;H[a+404>>2]=0;G[a+232>>1]=0;H[a+408>>2]=0;H[a+412>>2]=0;H[a+416>>2]=0;H[a+380>>2]=0;H[a+384>>2]=0;F[a+388|0]=0;H[a+424>>2]=0;H[a+428>>2]=0;H[a+420>>2]=c;H[a+432>>2]=0;H[a+436>>2]=0;H[a+440>>2]=0;H[a+444>>2]=c;H[a+252>>2]=18;H[a+264>>2]=19;g=a+400|0;b=Rg(g,12986);H[a+344>>2]=0;H[a+228>>2]=b;xj(a+148|0,a+144|0,0);H[a>>2]=0;H[a+4>>2]=0;zb(a+52|0,0,64);H[a+128>>2]=0;H[a+132>>2]=0;H[a+120>>2]=0;H[a+136>>2]=0;H[a+140>>2]=0;H[a+392>>2]=0;H[a+396>>2]=0;H[a+36>>2]=0;H[a+40>>2]=0;H[a+268>>2]=0;H[a+272>>2]=0;H[a+276>>2]=0;H[a+280>>2]=0;H[a+284>>2]=0;b=H[a+8>>2];H[a+28>>2]=b;H[a+24>>2]=b;H[a+116>>2]=a;zb(a+300|0,0,38);H[a+368>>2]=0;H[a+356>>2]=0;H[a+348>>2]=0;H[a+296>>2]=0;F[a+292|0]=1;H[a+248>>2]=0;H[a+460>>2]=0;H[a+464>>2]=0;H[a+236>>2]=0;H[a+240>>2]=0;c:{d:{if(!H[a+228>>2]){break d}H[a+224>>2]=36944;if(!I[a+232|0]){break c}i=a+356|0;h=H[a+340>>2];j=h+132|0;k=h+80|0;l=h+60|0;c=34240;e:while(1){b=c;while(1){if(!I[c|0]){break c}f:{g:{d=I[b|0];if(d){if((d|0)==61){break g}if((d|0)!=12){break f}}d=H[a+412>>2];if((d|0)==H[a+408>>2]){if(!Fb(g)){break d}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=0;c=Fc(h,H[a+416>>2],0);if(c){F[c+32|0]=1}c=I[b|0];H[a+412>>2]=H[a+416>>2];c=((c|0)!=0)+b|0;continue e}c=j;d=H[a+412>>2];if((d|0)!=H[a+416>>2]){if(H[a+408>>2]==(d|0)){if(!Fb(g)){break d}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=0;c=Fc(l,H[a+416>>2],8);if(!c){break d}d=H[c>>2];e=H[a+416>>2];if((d|0)==(e|0)){e=Rg(k,d);H[c>>2]=e;if(!e){break d}e=H[a+416>>2]}H[a+412>>2]=e}while(1){h:{e=b+1|0;d=I[b+1|0];if(!d|(d|0)==12){break h}b=H[a+412>>2];if((b|0)==H[a+408>>2]){if(!Fb(g)){break d}d=I[e|0];b=H[a+412>>2]}H[a+412>>2]=b+1;F[b|0]=d;b=e;continue}break}d=H[a+412>>2];if((d|0)==H[a+408>>2]){if(!Fb(g)){break d}d=H[a+412>>2]}H[a+412>>2]=d+1;F[d|0]=0;if(Qg(a,c,0,H[a+416>>2],i)){break d}H[a+412>>2]=H[a+416>>2];c=I[b+1|0]?b+2|0:e;continue e}e=H[a+412>>2];if((e|0)==H[a+408>>2]){if(!Fb(g)){break d}d=I[b|0];e=H[a+412>>2]}H[a+412>>2]=e+1;F[e|0]=d;b=b+1|0;continue}}}yj(a);break a}H[f+24>>2]=a;H[a+56>>2]=20;H[a+52>>2]=21;if(H[a+4>>2]==H[a>>2]){H[a+4>>2]=f}H[a>>2]=f;return f}Va(e)}Va(a)}H[f+24>>2]=0;Wa(19338,0);b=Eb(4);H[b>>2]=1;Z(b|0,34200,0);B()}function Nf(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=O(0),i=0,j=0,k=0,l=0,m=0,n=0,o=O(0),p=O(0),q=0;e=Ha-32|0;Ha=e;a:{while(1){d=H[a>>2];if(!d){break a}b:{switch(H[d+4>>2]-5|0){case 0:case 1:i=d+528|0;c:{d:{e:{b=H[d+540>>2];switch(b|0){case 0:break c;case 1:break e;default:break d}}b=H[H[d+528>>2]>>2];H[a>>2]=b;Xe(b,d);cd(i,0,0);La[H[H[d>>2]+4>>2]](d);continue}c=(b|0)>0?b:0;b=0;while(1)if((b|0)==(c|0)){c=0;b=H[d+540>>2];g=(b|0)>0?b:0;b=0;while(1){if((b|0)!=(g|0)){f:{if(H[d+540>>2]<=(b|0)){break f}f=H[H[i>>2]+(b<<2)>>2];if(!f){break f}if((b|0)>(c|0)){cd(i,c,f)}c=c+1|0}b=b+1|0;continue}break}H[d+540>>2]=c;H[e+28>>2]=0;H[e+20>>2]=10;g:{h:{i:{if(!c){H[e+24>>2]=0;H[e+16>>2]=0;break i}H[e+24>>2]=c;b=ib(c<<2);H[e+16>>2]=b;if(!b){break h}ud(e+16|0,0,c)}b=0;g=(c|0)>0?c:0;while(1)if((b|0)==(g|0)){H[d+540>>2]=0;f=H[e+16>>2];k=H[e+28>>2];c=0;while(1){if((c|0)!=(g|0)){b=0;b=(c|0)<(k|0)?H[f+(c<<2)>>2]:b;j:{if(!(H[b+4>>2]!=H[d+4>>2]|L[b+52>>2]!=O(0))){Vg(i,b+528|0);H[b+540>>2]=0;La[H[H[b>>2]+4>>2]](b);break j}Hc(i,b)}c=c+1|0;continue}break}nb(e+16|0);if(H[H[a>>2]+4>>2]!=5){break a}c=H[d+540>>2];H[e+16>>2]=0;H[e+20>>2]=10;H[e+24>>2]=0;H[e+28>>2]=0;b=0;f=(c|0)>0?c:0;g=0;while(1)if((b|0)==(f|0)){H[d+540>>2]=g;m=H[e+28>>2];if((m|0)<2){break g}c=H[H[e+16>>2]>>2];k=H[c+528>>2];g=1;while(1){if((g|0)==(m|0)){H[e+28>>2]=1;break g}b=0;b=H[e+28>>2]>(g|0)?H[H[e+16>>2]+(g<<2)>>2]:b;f=H[b+12>>2];if((f|0)>H[c+12>>2]){H[c+12>>2]=f}h=L[b+40>>2];if(h<L[c+40>>2]){L[c+40>>2]=h}h=L[b+52>>2];if(h<L[c+52>>2]){L[c+52>>2]=h}h=L[b+56>>2];if(h<L[c+56>>2]){L[c+56>>2]=h}q=H[k+36>>2];n=H[14678]&16777215;l=H[b+528>>2];f=H[l+36>>2];j=H[f>>2]&16777215;k:{l:{if((n|0)!=(j|0)|(H[f+16>>2]&16777215)!=(n|0)|(H[f+48>>2]|(j|0)!=(H[f+28>>2]&16777215))){break l}if(!Bc(f+52|0)|(j|0)!=(H[f+64>>2]&16777215)|(j|0)!=(H[f+68>>2]&16777215)){break l}if((j|0)==(H[f+72>>2]&16777215)){break k}}jb(q,f,84)}f=H[l+20>>2];j=H[k+20>>2];m:{if(!j){H[k+20>>2]=f;H[l+20>>2]=0;break m}if(!f){break m}Bh(j,f)}f=H[l+24>>2];j=H[k+24>>2];n:{if(!j){H[k+24>>2]=f;H[l+24>>2]=0;break n}if(!f){break n}Bh(j,f)}La[H[H[b>>2]+4>>2]](b);cd(e+16|0,g,0);g=g+1|0;continue}}else{c=0;c=H[d+540>>2]>(b|0)?H[H[i>>2]+(b<<2)>>2]:c;o:{if(H[c+4>>2]==9){Hc(e+16|0,c);break o}cd(i,g,c);g=g+1|0}b=b+1|0;continue}}else{Vg(e+16|0,i);b=b+1|0;continue}}H[e>>2]=c;Wa(24248,e);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}b=e+16|0;Vg(i,b);H[e+28>>2]=0;nb(b);if(H[d+540>>2]!=1){break a}H[a>>2]=H[H[i>>2]>>2];cd(i,0,0);break a}else{Nf(H[d+536>>2]>(b|0)?H[d+528>>2]+(b<<2)|0:0);b=b+1|0;continue}}b=a;a=le(Xa(528),H[d+8>>2]);H[b>>2]=a;Xe(a,d);La[H[H[d>>2]+4>>2]](d);break a;case 3:a=d+696|0;continue;case 2:break b;default:break a}}break}Nf(d+528|0);Nf(d+532|0);b=H[d+532>>2];if(b){h=L[b+52>>2]}c=H[d+528>>2];if(c){o=L[c+52>>2]}p=L[d+52>>2];p:{q:{if(!c){break q}r:{if(H[c+4>>2]==10){H[d+532>>2]=0;La[H[H[c>>2]+4>>2]](c);H[d+528>>2]=0;La[H[H[d>>2]+4>>2]](d);H[a>>2]=b;if(b){break p}b=20971;break r}if(!b|H[b+4>>2]!=10){break q}La[H[H[b>>2]+4>>2]](b);b=H[d+528>>2];H[d+528>>2]=0;H[d+532>>2]=0;La[H[H[d>>2]+4>>2]](d);H[a>>2]=b;if(b){break p}b=20936}Wa(b,0)}b=H[a>>2];if(!b){break a}}h=h<o?o:h;L[b+52>>2]=h>p?h:p}Ha=e+32|0}function os(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=O(0),k=0,l=0,m=0,n=0,o=0,p=0,q=O(0),r=0,s=0,t=0,u=0;d=Ha-176|0;Ha=d;Qc(a,b,c);H[a+40>>2]=0;e=I[c+15|0]|I[c+16|0]<<8|(I[c+17|0]<<16|I[c+18|0]<<24);F[d+23|0]=e;F[d+24|0]=e>>>8;F[d+25|0]=e>>>16;F[d+26|0]=e>>>24;e=H[c+12>>2];H[d+16>>2]=H[c+8>>2];H[d+20>>2]=e;e=H[c+4>>2];H[d+8>>2]=H[c>>2];H[d+12>>2]=e;L[d+28>>2]=L[c+20>>2];L[d+32>>2]=L[c+24>>2];L[d+36>>2]=L[c+28>>2];L[d+40>>2]=L[c+32>>2];L[d+44>>2]=L[c+36>>2];g=c- -64|0;e=H[g+4>>2];H[d+72>>2]=H[g>>2];H[d+76>>2]=e;e=H[c+60>>2];g=d- -64|0;H[g>>2]=H[c+56>>2];H[g+4>>2]=e;e=H[c+52>>2];H[d+56>>2]=H[c+48>>2];H[d+60>>2]=e;e=H[c+44>>2];H[d+48>>2]=H[c+40>>2];H[d+52>>2]=e;e=H[c+84>>2];H[d+88>>2]=H[c+80>>2];H[d+92>>2]=e;e=I[c+87|0]|I[c+88|0]<<8|(I[c+89|0]<<16|I[c+90|0]<<24);F[d+95|0]=e;F[d+96|0]=e>>>8;F[d+97|0]=e>>>16;F[d+98|0]=e>>>24;e=H[c+76>>2];H[d+80>>2]=H[c+72>>2];H[d+84>>2]=e;L[d+100>>2]=L[c+92>>2];L[d+104>>2]=L[c+96>>2];L[d+108>>2]=L[c+100>>2];L[d+112>>2]=L[c+104>>2];L[d+116>>2]=L[c+108>>2];e=H[c+124>>2];H[d+128>>2]=H[c+120>>2];H[d+132>>2]=e;e=H[c+132>>2];H[d+136>>2]=H[c+128>>2];H[d+140>>2]=e;e=H[c+140>>2];H[d+144>>2]=H[c+136>>2];H[d+148>>2]=e;e=H[c+116>>2];H[d+120>>2]=H[c+112>>2];H[d+124>>2]=e;H[d+152>>2]=H[c+144>>2];L[d+156>>2]=L[c+148>>2];L[d+160>>2]=L[c+152>>2];L[d+164>>2]=L[c+156>>2];e=I[c+163|0]|I[c+164|0]<<8|(I[c+165|0]<<16|I[c+166|0]<<24);F[d+171|0]=e;F[d+172|0]=e>>>8;F[d+173|0]=e>>>16;F[d+174|0]=e>>>24;H[d+168>>2]=H[c+160>>2];m=a+60|0;l=c+160|0;r=c+72|0;g=d+168|0;s=d+80|0;t=G[a+540>>1];while(1){e=p<<16>>16;if((e|0)>=(t|0)){if(I[a+20|0]){b=H[b>>2];q=O(L[b+268>>2]*L[b+232>>2]);L[a+44>>2]=q;L[a+40>>2]=q+j}H[a+24>>2]=0;H[a+12>>2]=11;je(a+284|0,m+224|0);e=d+8|0;b=Ke(c,e);Ke(r,s);H[c+144>>2]=H[d+152>>2];if((b|0)!=(e|0)){L[c+148>>2]=L[d+156>>2];L[c+152>>2]=L[d+160>>2];L[c+156>>2]=L[d+164>>2]}H[l>>2]=H[g>>2];b=I[g+3|0]|I[g+4|0]<<8|(I[g+5|0]<<16|I[g+6|0]<<24);F[l+3|0]=b;F[l+4|0]=b>>>8;F[l+5|0]=b>>>16;F[l+6|0]=b>>>24;La[H[H[a>>2]+68>>2]](a);Lh(d+8|0);Ha=d+176|0;return}f=0;f=(e|0)<0|(e|0)>=H[a+540>>2]?f:H[H[a+528>>2]+(e<<2)>>2];e=m+224|0;m=f+60|0;je(m,e);La[H[H[f>>2]+20>>2]](f,b,d+8|0);if(I[58861]==1){j=O(L[13457]*L[13473])}else{j=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}pd(f,j,1);j=O(L[f+40>>2]+L[a+40>>2]);L[a+40>>2]=j;h=H[a+572>>2];if((h|0)>=0){f=H[a+568>>2];a:{b:{if((f|0)>(h|0)){break b}e=H[a+564>>2];i=(e|0)>(h|0)?e:((h>>>1|0)+h|0)+1|0;if((i|0)==(f|0)){break b}n=ib(i<<2);if(!n){if((f|0)>=(i|0)){break b}H[d+4>>2]=i;H[d>>2]=f;Wa(24536,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}f=0;e=h;if((i|0)<(e|0)){H[a+572>>2]=i;e=i}u=(e|0)>0?e:0;o=H[a+560>>2];while(1){if((f|0)==(u|0)){if(o){Va(o);e=H[a+572>>2]}H[a+560>>2]=n;f=0;k=i-e|0;k=(k|0)>0?k:0;while(1){if((f|0)!=(k|0)){L[(H[a+560>>2]+(e<<2)|0)+(f<<2)>>2]=L[a+576>>2];f=f+1|0;continue}break}H[a+568>>2]=i;if(H[a+572>>2]>(h|0)){break a}}else{k=f<<2;L[k+n>>2]=L[k+o>>2];f=f+1|0;continue}break}}H[a+572>>2]=h+1}j=L[a+40>>2];L[H[a+560>>2]+(h<<2)>>2]=j}p=p+1|0;continue}}function Ws(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=0,g=0,h=O(0),i=0;f=Ha-48|0;Ha=f;je(H[a+696>>2]+60|0,a+60|0);g=H[a+696>>2];La[H[H[g>>2]+20>>2]](g,b,c);d=H[a+696>>2];if(I[58861]==1){e=O(L[13457]*L[13473])}else{e=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}pd(d,e,1);Qc(a,b,c);c=a+592|0;g=H[a+696>>2];Nb(c,g+288|0,g- -64|0);g=a+640|0;d=H[a+696>>2];Nb(g,d+400|0,d+176|0);je(a+284|0,H[a+696>>2]+(I[a+570|0]?60:284)|0);i=a+568|0;e=O(1);a:{if(I[58861]){break a}if(I[a+571|0]==1){d=H[a+696>>2];e=mk(d+60|0,d+284|0);h=mk(d+172|0,d+396|0);e=O(L[a+576>>2]*(e>h?e:h));break a}e=L[a+576>>2]}Em(i,e);e=O(L[H[a+696>>2]+40>>2]*L[a+588>>2]);L[a+40>>2]=e;if(I[a+20|0]==1){d=H[b>>2];h=O(L[d+268>>2]*L[d+232>>2]);L[a+44>>2]=h;L[a+40>>2]=e+h}d=H[a+536>>2];b:{if(d){e=L[(H[a+540>>2]<<2)+53156>>2];L[a+688>>2]=e;if((d|0)!=2){break b}L[a+688>>2]=O(1)/e;break b}H[a+688>>2]=1065353216}d=a+544|0;c:{if(oc(d)){e=L[(H[a+564>>2]<<2)+53156>>2];L[a+692>>2]=e;if(H[a+560>>2]!=2){break c}L[a+692>>2]=O(1)/e;break c}H[a+692>>2]=1065353216}d:{if(!oc(d)){break d}e:{f:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break f;default:break e}}L[f+36>>2]=L[a+544>>2];L[f+40>>2]=L[a+548>>2];L[f+44>>2]=L[a+552>>2];d=a+628|0;zf(d,f+36|0,H[a+556>>2],J[26761],(I[b+13|0]&32)>>>5|0);wb(d,O(L[a+48>>2]*L[13251]));d=H[a+8>>2]}if((d&-2)!=4){break d}L[f+24>>2]=L[a+544>>2];L[f+28>>2]=L[a+548>>2];L[f+32>>2]=L[a+552>>2];d=a+676|0;zf(d,f+24|0,H[a+556>>2],J[26761],(I[b+13|0]&32)>>>5|0);wb(d,O(L[a+48>>2]*L[13251]))}g:{if(I[a+571|0]==1){b=oe(Xa(536),H[a+8>>2],0);H[a+700>>2]=b;d=H[a+696>>2];jb(b+60|0,d+284|0,224);jb(b+284|0,d+60|0,224);h:{i:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break i;default:break h}}b=a+604|0;Ya(b,c);wb(b,L[a+580>>2]);d=H[a+700>>2];Vb(d+288|0,d- -64|0,b);b=H[a+8>>2]}if((b&-2)==4){b=a+652|0;Ya(b,g);wb(b,L[a+580>>2]);d=H[a+700>>2];Vb(d+400|0,d+176|0,b)}G[H[a+700>>2]+508>>1]=J[H[a+696>>2]+508>>1];G[H[a+700>>2]+510>>1]=J[H[a+696>>2]+510>>1];e=L[H[a+696>>2]+40>>2];b=I[58861];L[H[a+700>>2]+40>>2]=b?e:O(e*L[a+576>>2]);H[H[a+700>>2]+12>>2]=1;d=H[a+700>>2];if((b|0)==1){e=O(L[13457]*L[13473])}else{e=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}pd(d,e,1);break g}j:{k:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break k;default:break j}}b=a+604|0;Ya(b,c);wb(b,O(-1));b=H[a+8>>2]}if((b&-2)!=4){break g}b=a+652|0;Ya(b,g);wb(b,O(-1))}l:{m:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break m;default:break l}}Vb(a+616|0,c,a+604|0);b=H[a+8>>2]}if((b&-2)==4){Vb(a+664|0,g,a+652|0);b=H[a+8>>2]}n:{switch(b-3|0){case 0:case 2:H[f+20>>2]=0;H[f+12>>2]=0;H[f+16>>2]=0;b=f+12|0;d=I[a+570|0];wf(b,0,G[a+568>>1]-(d^1)|0,d,c,a+604|0,a+616|0,a+628|0,L[a+692>>2],L[a+688>>2]);lb(a+288|0,b);b=H[a+8>>2];break;default:break n}}if((b&-2)==4){H[f+20>>2]=0;H[f+12>>2]=0;H[f+16>>2]=0;b=f+12|0;c=I[a+570|0];wf(b,0,G[a+568>>1]-(c^1)|0,c,g,a+652|0,a+664|0,a+676|0,L[a+692>>2],L[a+688>>2]);lb(a+400|0,b)}La[H[H[a>>2]+68>>2]](a);Ha=f+48|0}function xc(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;k=Ha-112|0;Ha=k;j=i&2147483647;a:{b:{m=e&2147483647;l=2147418112;n=!(b|c);if(!(d|m?m-l>>>0<2147549184:n)){r=j-l|0;if(!h&(r|0)==-2147418112?f|g:(r|0)==-2147418112&(h|0)!=0|r>>>0>2147549184){break b}}if(!(!d&(m|0)==2147418112?n:m>>>0<2147418112)){h=d;i=e|32768;f=b;g=c;break a}if(!(!h&(j|0)==2147418112?!(f|g):j>>>0<2147418112)){i=i|32768;break a}if(!(b|d|(m^2147418112|c))){j=d;d=!(b^f|d^h|(c^g|e^i^-2147483648));h=d?0:j;i=d?2147450880:e;f=d?0:b;g=d?0:c;break a}l=f|h;if(!(l|(j^2147418112|g))){break a}if(!(b|d|(c|m))){if(g|j|l){break a}f=b&f;g=c&g;h=d&h;i=e&i;break a}if(f|h|(g|j)){break b}f=b;g=c;h=d;i=e;break a}l=(j|0)==(m|0);p=l&(d|0)==(h|0)?(c|0)==(g|0)&b>>>0<f>>>0|c>>>0<g>>>0:l&d>>>0<h>>>0|j>>>0>m>>>0;n=p;m=n?f:b;r=n?g:c;l=n?i:e;s=l;n=n?h:d;q=l&65535;j=p?d:h;l=p?e:i;d=l;l=d>>>16&32767;o=s>>>16&32767;if(!o){o=!(n|q);h=o;o=h<<6;t=Q(h?m:n)+32|0;h=Q(h?r:q);o=o+((h|0)==32?t:h)|0;lc(k+96|0,m,r,n,q,o-15|0);n=H[k+104>>2];q=H[k+108>>2];r=H[k+100>>2];o=16-o|0;m=H[k+96>>2]}f=p?b:f;g=p?c:g;b=j;c=d&65535;if(!l){j=!(b|c);p=j;d=j?f:b;j=j<<6;p=Q(p?g:c);j=j+((p|0)==32?Q(d)+32|0:p)|0;lc(k+80|0,f,g,b,c,j-15|0);l=16-j|0;f=H[k+80>>2];g=H[k+84>>2];b=H[k+88>>2];c=H[k+92>>2]}d=c<<3;c=b;b=d|b>>>29;j=c<<3;c=b;b=g>>>29|j;c=c|524288;j=q<<3|n>>>29;q=n<<3|r>>>29;p=j;h=e^i;j=g<<3|f>>>29;d=f<<3;c:{if((l|0)==(o|0)){break c}e=o-l|0;if(e>>>0>127){b=0;c=0;j=0;d=1;break c}lc(k- -64|0,d,j,b,c,128-e|0);Td(k+48|0,d,j,b,c,e);b=H[k+56>>2];c=H[k+60>>2];j=H[k+52>>2];d=H[k+48>>2]|(H[k+64>>2]|H[k+72>>2]|(H[k+68>>2]|H[k+76>>2]))!=0}n=d;l=j;p=p|524288;j=r<<3|m>>>29;m=m<<3;d:{if((h|0)<0){f=0;g=0;h=0;i=0;if(!(m^n|b^q|(j^l|c^p))){break a}d=m-n|0;e=j-((m>>>0<n>>>0)+l|0)|0;f=q-b|0;g=(j|0)==(l|0)&m>>>0<n>>>0|j>>>0<l>>>0;h=f-g|0;b=(p-((b>>>0>q>>>0)+c|0)|0)-(f>>>0<g>>>0)|0;i=b;if(b>>>0>524287){break d}c=!(b|h);g=c;i=c?d:h;c=c<<6;g=Q(g?e:b);c=c+((g|0)==32?Q(i)+32|0:g)|0;f=b;b=c-12|0;lc(k+32|0,d,e,h,f,b);o=o-b|0;h=H[k+40>>2];i=H[k+44>>2];d=H[k+32>>2];e=H[k+36>>2];break d}j=j+l|0;d=m+n|0;e=d>>>0<m>>>0?j+1|0:j;f=(l|0)==(e|0)&d>>>0<n>>>0|e>>>0<l>>>0;j=c+p|0;b=b+q|0;j=b>>>0<q>>>0?j+1|0:j;h=b+f|0;i=h>>>0<b>>>0?j+1|0:j;if(!(i&1048576)){break d}d=n&1|((e&1)<<31|d>>>1);e=h<<31|e>>>1;o=o+1|0;h=(i&1)<<31|h>>>1;i=i>>>1|0}f=0;b=s&-2147483648;m=b;if((o|0)>=32767){h=f;i=b|2147418112;g=0;break a}l=0;e:{if((o|0)>0){l=o;break e}lc(k+16|0,d,e,h,i,o+127|0);Td(k,d,e,h,i,1-o|0);d=H[k>>2]|(H[k+16>>2]|H[k+24>>2]|(H[k+20>>2]|H[k+28>>2]))!=0;e=H[k+4>>2];h=H[k+8>>2];i=H[k+12>>2]}c=(e&7)<<29|d>>>3;b=h<<29|e>>>3;e=f|((i&7)<<29|h>>>3);f=m|(i>>>3&65535|l<<16);f:{g:{d=d&7;if((d|0)!=4){i=f;f=d>>>0>4;g=f;f=c+f|0;g=g>>>0>f>>>0?b+1|0:b;b=(g|0)==(b|0)&c>>>0>f>>>0|b>>>0>g>>>0;h=b+e|0;i=b>>>0>h>>>0?i+1|0:i;break g}j=f;d=c&1;f=c+d|0;g=d>>>0>f>>>0?b+1|0:b;b=(g|0)==(b|0)&c>>>0>f>>>0|b>>>0>g>>>0;h=b+e|0;i=b>>>0>h>>>0?j+1|0:j;break f}if(!d){break a}}}H[a>>2]=f;H[a+4>>2]=g;H[a+8>>2]=h;H[a+12>>2]=i;Ha=k+112|0}function Va(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{if(!a){break a}d=a-8|0;b=H[a-4>>2];a=b&-8;f=d+a|0;b:{if(b&1){break b}if(!(b&2)){break a}b=H[d>>2];d=d-b|0;if(d>>>0<K[12609]){break a}a=a+b|0;c:{d:{e:{if(H[12610]!=(d|0)){c=H[d+12>>2];if(b>>>0<=255){e=H[d+8>>2];if((e|0)!=(c|0)){break e}i=50420,j=H[12605]&ky(-2,b>>>3|0),H[i>>2]=j;break b}h=H[d+24>>2];if((c|0)!=(d|0)){b=H[d+8>>2];H[b+12>>2]=c;H[c+8>>2]=b;break c}e=H[d+20>>2];if(e){b=d+20|0}else{e=H[d+16>>2];if(!e){break d}b=d+16|0}while(1){g=b;c=e;b=c+20|0;e=H[c+20>>2];if(e){continue}b=c+16|0;e=H[c+16>>2];if(e){continue}break}H[g>>2]=0;break c}b=H[f+4>>2];if((b&3)!=3){break b}H[12607]=a;H[f+4>>2]=b&-2;H[d+4>>2]=a|1;H[f>>2]=a;return}H[e+12>>2]=c;H[c+8>>2]=e;break b}c=0}if(!h){break b}b=H[d+28>>2];e=(b<<2)+50724|0;f:{if(H[e>>2]==(d|0)){H[e>>2]=c;if(c){break f}i=50424,j=H[12606]&ky(-2,b),H[i>>2]=j;break b}g:{if(H[h+16>>2]==(d|0)){H[h+16>>2]=c;break g}H[h+20>>2]=c}if(!c){break b}}H[c+24>>2]=h;b=H[d+16>>2];if(b){H[c+16>>2]=b;H[b+24>>2]=c}b=H[d+20>>2];if(!b){break b}H[c+20>>2]=b;H[b+24>>2]=c}if(d>>>0>=f>>>0){break a}b=H[f+4>>2];if(!(b&1)){break a}h:{i:{j:{k:{if(!(b&2)){if(H[12611]==(f|0)){H[12611]=d;a=H[12608]+a|0;H[12608]=a;H[d+4>>2]=a|1;if(H[12610]!=(d|0)){break a}H[12607]=0;H[12610]=0;return}if(H[12610]==(f|0)){H[12610]=d;a=H[12607]+a|0;H[12607]=a;H[d+4>>2]=a|1;H[a+d>>2]=a;return}a=(b&-8)+a|0;c=H[f+12>>2];if(b>>>0<=255){e=H[f+8>>2];if((e|0)==(c|0)){i=50420,j=H[12605]&ky(-2,b>>>3|0),H[i>>2]=j;break i}H[e+12>>2]=c;H[c+8>>2]=e;break i}h=H[f+24>>2];if((c|0)!=(f|0)){b=H[f+8>>2];H[b+12>>2]=c;H[c+8>>2]=b;break j}e=H[f+20>>2];if(e){b=f+20|0}else{e=H[f+16>>2];if(!e){break k}b=f+16|0}while(1){g=b;c=e;b=c+20|0;e=H[c+20>>2];if(e){continue}b=c+16|0;e=H[c+16>>2];if(e){continue}break}H[g>>2]=0;break j}H[f+4>>2]=b&-2;H[d+4>>2]=a|1;H[a+d>>2]=a;break h}c=0}if(!h){break i}b=H[f+28>>2];e=(b<<2)+50724|0;l:{if(H[e>>2]==(f|0)){H[e>>2]=c;if(c){break l}i=50424,j=H[12606]&ky(-2,b),H[i>>2]=j;break i}m:{if(H[h+16>>2]==(f|0)){H[h+16>>2]=c;break m}H[h+20>>2]=c}if(!c){break i}}H[c+24>>2]=h;b=H[f+16>>2];if(b){H[c+16>>2]=b;H[b+24>>2]=c}b=H[f+20>>2];if(!b){break i}H[c+20>>2]=b;H[b+24>>2]=c}H[d+4>>2]=a|1;H[a+d>>2]=a;if(H[12610]!=(d|0)){break h}H[12607]=a;return}if(a>>>0<=255){b=(a&-8)+50460|0;e=H[12605];a=1<<(a>>>3);n:{if(!(e&a)){H[12605]=a|e;a=b;break n}a=H[b+8>>2]}H[b+8>>2]=d;H[a+12>>2]=d;H[d+12>>2]=b;H[d+8>>2]=a;return}c=31;if(a>>>0<=16777215){b=Q(a>>>8|0);c=((a>>>38-b&1)-(b<<1)|0)+62|0}H[d+28>>2]=c;H[d+16>>2]=0;H[d+20>>2]=0;b=(c<<2)+50724|0;o:{p:{e=H[12606];g=1<<c;q:{if(!(e&g)){H[12606]=e|g;H[b>>2]=d;c=24;break q}c=a<<((c|0)!=31?25-(c>>>1|0)|0:0);b=H[b>>2];while(1){e=b;if((H[b+4>>2]&-8)==(a|0)){break p}b=c>>>29|0;c=c<<1;g=(b&4)+e|0;b=H[g+16>>2];if(b){continue}break}H[g+16>>2]=d;b=e;c=24}e=d;g=d;a=8;break o}b=H[e+8>>2];H[b+12>>2]=d;H[e+8>>2]=d;c=8;g=0;a=24}H[c+d>>2]=b;H[d+12>>2]=e;H[a+d>>2]=g;a=H[12613]-1|0;H[12613]=a?a:-1}}function Xf(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=O(0),q=O(0),r=0,s=0,t=0;c=Ha-352|0;Ha=c;while(1){e=(c+192|0)+d|0;H[e+8>>2]=0;H[e>>2]=0;H[e+4>>2]=0;d=d+12|0;if((d|0)!=144){continue}break}F[c+188|0]=I[b|0];F[c+186|0]=65;F[c+187|0]=45;e=I[b+1|0];d=0;F[c+190|0]=0;F[c+191|0]=0;F[c+189|0]=e;h=b+4|0;a:{b:{while(1){if((d|0)==4){break b}F[c+190|0]=I[d+h|0];e=N(d,12);d=d+1|0;f=c+186|0;if(te(a,f,e+(c+192|0)|0)){continue}break}db();H[c+176>>2]=f;Wa(19171,c+176|0);break a}d=0;e=Wb(a,c+186|0);if(e){g=H[e+16>>2]}o=H[g+20>>2];F[c+189|0]=I[b+2|0];f=(g|0)!=0&(o|0)!=0;e=4;c:{while(1){if((d|0)==4){break c}F[c+190|0]=I[d+h|0];d:{if(!f){break d}if(!te(a,c+186|0,(c+192|0)+N(e,12)|0)){break d}f=1;d=d+1|0;e=e+1|0;continue}break}db();H[c+160>>2]=c+186;Wa(19171,c+160|0);break a}F[c+189|0]=I[b+3|0];d=0;e=8;e:{while(1){if((d|0)==4){break e}F[c+190|0]=I[d+h|0];f:{if(!f){break f}if(!te(a,c+186|0,(c+192|0)+N(e,12)|0)){break f}f=1;d=d+1|0;e=e+1|0;continue}break}db();H[c+144>>2]=c+186;Wa(19171,c+144|0);break a}g:{a=Wb(a,c+186|0);if(!a){break g}a=H[a+16>>2];if(!((a|0)!=0&f)){break g}a=a+40|0;d=8;while(1)if((d|0)==12){a=g+68|0;d=0;while(1)if((d|0)==12){h=Xa(144);d=0;while(1){a=d+h|0;H[a+8>>2]=0;H[a>>2]=0;H[a+4>>2]=0;d=d+12|0;if((d|0)!=144){continue}break}p=O(O(1)/uc(O(L[12893]*O(.25))));q=L[12891];e=I[51568];d=0;while(1){b=d<<16>>16;if((b|0)>=12){g=Xa(16);H[g+8>>2]=0;H[g+12>>2]=0;a=rn(Xa(16),24);H[g>>2]=a;d=0;e=0;while(1){if((e|0)!=12){ai(a,(c+192|0)+N(e,12)|0);e=e+1|0;continue}break}while(1){if((d|0)!=12){ai(a,h+N(d,12)|0);d=d+1|0;continue}break}j=on(Xa(16),12);H[g+4>>2]=j;f=0;r=c- -64|0;a=4;k=1;h:while(1){if(a>>>0<=11){s=a+12|0;t=(f<<16)+786432>>16;d=0;while(1){if((d|0)==4){f=f+4|0;a=a+4|0;k=k^1;continue h}b=d|s;l=a|d;e=d|t;m=d|f;d=d+1|0;i=d&3;n=(i|a)&65535;i=(f|i)<<16>>16;if(k&1){H[c+76>>2]=-1;H[c+72>>2]=b;H[c+68>>2]=n;H[r>>2]=i;H[c+60>>2]=-1;H[c+56>>2]=b;H[c+52>>2]=i;H[c+48>>2]=e;H[c+44>>2]=-1;H[c+40>>2]=l;H[c+36>>2]=b;H[c+32>>2]=m;H[c+28>>2]=-1;H[c+24>>2]=b;H[c+20>>2]=e;H[c+16>>2]=m;$h(j,16,c+16|0)}else{H[c+140>>2]=-1;H[c+136>>2]=b;H[c+132>>2]=n;H[c+128>>2]=e;H[c+124>>2]=-1;H[c+120>>2]=n;H[c+116>>2]=i;H[c+112>>2]=e;H[c+108>>2]=-1;H[c+104>>2]=l;H[c+100>>2]=b;H[c+96>>2]=e;H[c+92>>2]=-1;H[c+88>>2]=l;H[c+84>>2]=e;H[c+80>>2]=m;$h(j,16,c+80|0)}continue}}break}Va(h);H[o+16>>2]=g;break a}else{if(!(e&1)){F[51568]=1;L[12891]=p;q=p}a=N(b,12);e=a+h|0;a=a+(c+192|0)|0;d=0;while(1){if((d|0)==4){i:{H[c+348>>2]=0;H[c+340>>2]=0;H[c+344>>2]=0;Ya(c+340|0,a);d=1;while(1){if((d|0)==4){break i}lb(c+340|0,a+N(d,12)|0);d=d+1|0;continue}}}else{f=N(d,12);d=d+1|0;dc(f+e|0,a+f|0,a+N(d&3,12)|0);continue}break}wb(c+340|0,O(.25));d=0;while(1){if((d|0)!=4){a=e+N(d,12)|0;mc(a,c+340|0,a,q);d=d+1|0;continue}break}d=b+4|0;e=1;continue}}}else{qo(a,(c+192|0)+N(d,12)|0);d=d+1|0;continue}}else{qo(a,(c+192|0)+N(d,12)|0);d=d+1|0;continue}}db();H[c>>2]=b;Wa(27437,c)}Ha=c+352|0}function Eh(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;f=Ha-80|0;Ha=f;e=b?H[b+12>>2]:e;k=(c|0)<(e|0)?e:c;while(1){a:{if((c|0)==(k|0)){c=k;break a}e=0;b:{c:{d:{e:{f:{g:{h:{e=H[b+12>>2]>(c|0)?H[H[b>>2]+(c<<2)>>2]:e;switch(dd(H[e>>2])-9|0){case 1:break f;case 0:break g;case 8:break h;case 7:break c;case 6:break d;case 2:case 3:case 4:break e;default:break a}}d=Hh(e,0,9);if(!d){break b}g=Bb(H[d+4>>2],4201);if(!g){d=H[d>>2];e=H[e>>2];H[f+8>>2]=4201;H[f+4>>2]=e;H[f>>2]=d;Wa(25362,f);break b}if(Hb(g,4007)){d=H[d>>2];e=H[e>>2];H[f- -64>>2]=g;H[f+60>>2]=4007;H[f+56>>2]=e;H[f+52>>2]=d;H[f+48>>2]=4201;Wa(28914,f+48|0);break b}i:{d=H[e+8>>2];if(H[d+12>>2]>=2){d=H[H[d>>2]+4>>2];if(d){break i}}Wa(28310,0);break b}h=H[14594];j=H[d>>2];e=fb(H[h>>2],j);if((e|0)!=18){if((e|0)!=23){g=H[h+4>>2];h=H[h+8>>2];j:{k:{if((h|0)>=24){i=H[g+92>>2];break k}i=0;d=0;if((h|0)<19){break j}}d=H[g+72>>2]}H[f+32>>2]=(e|0)<0|(e|0)>=(h|0)?0:H[g+(e<<2)>>2];H[f+28>>2]=d;H[f+24>>2]=i;H[f+20>>2]=j;H[f+16>>2]=2;Wa(28138,f+16|0);break b}H[f+76>>2]=0;H[f+68>>2]=0;H[f+72>>2]=0;if(!Gh(d,(I[a+13|0]&64)>>>6|0,f+68|0)){break b}d=I[a+13|0];l:{if(d&1){e=H[f+72>>2];d=H[a+20>>2];H[d+60>>2]=H[f+68>>2];H[d+64>>2]=e;H[d+68>>2]=H[f+76>>2];d=24;break l}d=d&2?24:20}d=H[d+a>>2];e=H[f+72>>2];H[d+60>>2]=H[f+68>>2];H[d+64>>2]=e;H[d+68>>2]=H[f+76>>2];break b}e=Hh(d,0,23);d=Hh(d,1,23);if(!e|!d){break b}Gh(e,(I[a+13|0]&64)>>>6|0,H[a+20>>2]+60|0);Gh(d,(I[a+13|0]&64)>>>6|0,H[a+24>>2]+60|0);break b}g=I[a+13|0];if(g&4){Of(H[a+20>>2],H[e+4>>2]);g=I[a+13|0]}if(!(g&8)){break b}d=H[e+4>>2];e=H[a+24>>2];if(g&1){dm(e,d,I[a+14|0]);break b}Of(e,d);break b}g=H[e+8>>2];d=H[g+12>>2];if((d|0)<=0){break b}h=H[H[g>>2]>>2];if(h){Of(H[a+20>>2],H[h+4>>2]);g=H[e+8>>2];d=H[g+12>>2]}if((d|0)<2){break b}d=H[H[g>>2]+4>>2];if(!d){break b}Of(H[a+24>>2],H[d+4>>2]);break b}d=H[a+36>>2];Ph(d,d+12|0,e,J[26761],1,(I[a+13|0]&64)>>>6|0);d=H[a+36>>2];e=H[a>>2];g=I[a+13|0]&64;h=g>>>6|0;Fh(d,e,h);Fh(d+16|0,e,h);Fh(d+28|0,e,!g);break b}h=I[a+13|0]&64;g=0;d=H[e+8>>2];e=H[d+12>>2];m:{if((e|0)<=0){d=0;break m}i=H[d>>2];d=H[i>>2];if((e|0)==1){break m}g=H[i+4>>2]}e=H[a+36>>2];i=d;d=(h|0)!=0;Ph(e+16|0,e+40|0,i,J[26761],1,d);Ph(e+28|0,e+44|0,g,J[26761],0,d);break b}i=I[a+13|0]&64;g=H[a+36>>2];n:{o:{p:{q:{r:{s:{d=H[e+8>>2];h=H[d+12>>2];switch(h|0){case 0:break n;case 2:break r;case 1:break s;default:break q}}j=H[d>>2];h=0;d=0;break p}d=H[d>>2];h=H[d>>2];d=H[d+4>>2];break o}if((h|0)<2){break n}d=H[d>>2];j=d+8|0;h=H[d>>2];d=H[d+4>>2]}j=H[j>>2];if(!j){break o}wm(g+72|0,H[j+4>>2],J[26761],1,(i|0)!=0)}if(d){_e(f+68|0,H[d+4>>2],J[26761],0,1,(i|0)!=0);F[g+66|0]=I[f+70|0];G[g+64>>1]=J[f+68>>1];Oh(g- -64|0)}if(!h){break n}_e(f+68|0,H[h+4>>2],J[26761],0,0,(i|0)!=0);F[g+70|0]=I[f+70|0];G[g+68>>1]=J[f+68>>1];Oh(g+68|0)}d=Ob(H[14030],fb(H[e+4>>2],5007));H[g+48>>2]=d?d:3}c=c+1|0;continue}break}Ha=f+80|0;return c}function sn(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;c=Ha-16|0;Ha=c;A(+a);e=v(1)|0;v(0)|0;e=e&2147483647;a:{if(e>>>0<=1072243195){if(e>>>0<1045430272){break a}a=Ei(a,0,0);break a}if(e>>>0>=2146435072){a=a-a;break a}j=Ha-48|0;Ha=j;A(+a);e=v(1)|0;h=v(0)|0;b:{c:{i=e&2147483647;d:{if(i>>>0<=1074752122){if((e&1048575)==598523){break d}if(i>>>0<=1073928572){if((e|0)>0|(e|0)>=0){a=a+-1.5707963267341256;b=a+-6077100506506192e-26;M[c>>3]=b;M[c+8>>3]=a-b+-6077100506506192e-26;d=1;break b}a=a+1.5707963267341256;b=a+6077100506506192e-26;M[c>>3]=b;M[c+8>>3]=a-b+6077100506506192e-26;d=-1;break b}if((e|0)>0|(e|0)>=0){a=a+-3.1415926534682512;b=a+-1.2154201013012384e-10;M[c>>3]=b;M[c+8>>3]=a-b+-1.2154201013012384e-10;d=2;break b}a=a+3.1415926534682512;b=a+1.2154201013012384e-10;M[c>>3]=b;M[c+8>>3]=a-b+1.2154201013012384e-10;d=-2;break b}if(i>>>0<=1075594811){if(i>>>0<=1075183036){if((i|0)==1074977148){break d}if((e|0)>0|(e|0)>=0){a=a+-4.712388980202377;b=a+-1.8231301519518578e-10;M[c>>3]=b;M[c+8>>3]=a-b+-1.8231301519518578e-10;d=3;break b}a=a+4.712388980202377;b=a+1.8231301519518578e-10;M[c>>3]=b;M[c+8>>3]=a-b+1.8231301519518578e-10;d=-3;break b}if((i|0)==1075388923){break d}if((e|0)>0|(e|0)>=0){a=a+-6.2831853069365025;b=a+-2.430840202602477e-10;M[c>>3]=b;M[c+8>>3]=a-b+-2.430840202602477e-10;d=4;break b}a=a+6.2831853069365025;b=a+2.430840202602477e-10;M[c>>3]=b;M[c+8>>3]=a-b+2.430840202602477e-10;d=-4;break b}if(i>>>0>1094263290){break c}}f=a*.6366197723675814+6755399441055744+-6755399441055744;b=a+f*-1.5707963267341256;g=f*6077100506506192e-26;m=b-g;e=m<-.7853981633974483;if(P(f)<2147483648){d=~~f}else{d=-2147483648}e:{if(e){d=d-1|0;f=f+-1;g=f*6077100506506192e-26;b=a+f*-1.5707963267341256;break e}if(!(m>.7853981633974483)){break e}d=d+1|0;f=f+1;g=f*6077100506506192e-26;b=a+f*-1.5707963267341256}a=b-g;M[c>>3]=a;A(+a);e=v(1)|0;v(0)|0;h=i>>>20|0;f:{if((h-(e>>>20&2047)|0)<17){break f}g=b;a=f*6077100506303966e-26;b=b-a;g=f*20222662487959506e-37-(g-b-a);a=b-g;M[c>>3]=a;A(+a);e=v(1)|0;v(0)|0;if((h-(e>>>20&2047)|0)<50){break f}g=b;a=f*20222662487111665e-37;b=b-a;g=f*84784276603689e-45-(g-b-a);a=b-g;M[c>>3]=a}M[c+8>>3]=b-a-g;break b}if(i>>>0>=2146435072){a=a-a;M[c>>3]=a;M[c+8>>3]=a;break b}d=j+16|0;k=d|8;x(0,h|0);x(1,e&1048575|1096810496);a=+z();h=1;while(1){if(P(a)<2147483648){l=~~a}else{l=-2147483648}b=+(l|0);M[d>>3]=b;a=(a-b)*16777216;l=h;h=0;d=k;if(l){continue}break}M[j+32>>3]=a;d=2;while(1){h=d;d=d-1|0;k=j+16|0;if(M[k+(h<<3)>>3]==0){continue}break}d=op(k,j,(i>>>20|0)-1046|0,h+1|0,1);a=M[j>>3];if((e|0)<0){M[c>>3]=-a;M[c+8>>3]=-M[j+8>>3];d=0-d|0;break b}M[c>>3]=a;M[c+8>>3]=M[j+8>>3]}Ha=j+48|0;a=M[c+8>>3];b=M[c>>3];g:{switch((d&3)-1|0){default:a=Ei(b,a,1);break a;case 0:a=np(b,a);break a;case 1:a=-Ei(b,a,1);break a;case 2:break g}}a=-np(b,a)}Ha=c+16|0;return a}function og(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=a+b|0;c=H[a+4>>2];a:{b:{if(c&1){break b}if(!(c&2)){break a}c=H[a>>2];b=c+b|0;c:{d:{e:{a=a-c|0;if((a|0)!=H[12610]){d=H[a+12>>2];if(c>>>0<=255){e=H[a+8>>2];if((e|0)!=(d|0)){break e}i=50420,j=H[12605]&ky(-2,c>>>3|0),H[i>>2]=j;break b}g=H[a+24>>2];if((a|0)!=(d|0)){c=H[a+8>>2];H[c+12>>2]=d;H[d+8>>2]=c;break c}e=H[a+20>>2];if(e){c=a+20|0}else{e=H[a+16>>2];if(!e){break d}c=a+16|0}while(1){h=c;d=e;c=d+20|0;e=H[d+20>>2];if(e){continue}c=d+16|0;e=H[d+16>>2];if(e){continue}break}H[h>>2]=0;break c}c=H[f+4>>2];if((c&3)!=3){break b}H[12607]=b;H[f+4>>2]=c&-2;H[a+4>>2]=b|1;H[f>>2]=b;return}H[e+12>>2]=d;H[d+8>>2]=e;break b}d=0}if(!g){break b}c=H[a+28>>2];e=(c<<2)+50724|0;f:{if(H[e>>2]==(a|0)){H[e>>2]=d;if(d){break f}i=50424,j=H[12606]&ky(-2,c),H[i>>2]=j;break b}g:{if(H[g+16>>2]==(a|0)){H[g+16>>2]=d;break g}H[g+20>>2]=d}if(!d){break b}}H[d+24>>2]=g;c=H[a+16>>2];if(c){H[d+16>>2]=c;H[c+24>>2]=d}c=H[a+20>>2];if(!c){break b}H[d+20>>2]=c;H[c+24>>2]=d}h:{i:{j:{k:{c=H[f+4>>2];if(!(c&2)){if(H[12611]==(f|0)){H[12611]=a;b=H[12608]+b|0;H[12608]=b;H[a+4>>2]=b|1;if(H[12610]!=(a|0)){break a}H[12607]=0;H[12610]=0;return}if(H[12610]==(f|0)){H[12610]=a;b=H[12607]+b|0;H[12607]=b;H[a+4>>2]=b|1;H[a+b>>2]=b;return}b=(c&-8)+b|0;d=H[f+12>>2];if(c>>>0<=255){e=H[f+8>>2];if((e|0)==(d|0)){i=50420,j=H[12605]&ky(-2,c>>>3|0),H[i>>2]=j;break i}H[e+12>>2]=d;H[d+8>>2]=e;break i}g=H[f+24>>2];if((d|0)!=(f|0)){c=H[f+8>>2];H[c+12>>2]=d;H[d+8>>2]=c;break j}e=H[f+20>>2];if(e){c=f+20|0}else{e=H[f+16>>2];if(!e){break k}c=f+16|0}while(1){h=c;d=e;c=d+20|0;e=H[d+20>>2];if(e){continue}c=d+16|0;e=H[d+16>>2];if(e){continue}break}H[h>>2]=0;break j}H[f+4>>2]=c&-2;H[a+4>>2]=b|1;H[a+b>>2]=b;break h}d=0}if(!g){break i}c=H[f+28>>2];e=(c<<2)+50724|0;l:{if(H[e>>2]==(f|0)){H[e>>2]=d;if(d){break l}i=50424,j=H[12606]&ky(-2,c),H[i>>2]=j;break i}m:{if(H[g+16>>2]==(f|0)){H[g+16>>2]=d;break m}H[g+20>>2]=d}if(!d){break i}}H[d+24>>2]=g;c=H[f+16>>2];if(c){H[d+16>>2]=c;H[c+24>>2]=d}c=H[f+20>>2];if(!c){break i}H[d+20>>2]=c;H[c+24>>2]=d}H[a+4>>2]=b|1;H[a+b>>2]=b;if(H[12610]!=(a|0)){break h}H[12607]=b;return}if(b>>>0<=255){c=(b&-8)+50460|0;d=H[12605];b=1<<(b>>>3);n:{if(!(d&b)){H[12605]=b|d;b=c;break n}b=H[c+8>>2]}H[c+8>>2]=a;H[b+12>>2]=a;H[a+12>>2]=c;H[a+8>>2]=b;return}d=31;if(b>>>0<=16777215){c=Q(b>>>8|0);d=((b>>>38-c&1)-(c<<1)|0)+62|0}H[a+28>>2]=d;H[a+16>>2]=0;H[a+20>>2]=0;c=(d<<2)+50724|0;o:{e=H[12606];h=1<<d;p:{if(!(e&h)){H[12606]=e|h;H[c>>2]=a;H[a+24>>2]=c;break p}d=b<<((d|0)!=31?25-(d>>>1|0)|0:0);c=H[c>>2];while(1){e=c;if((H[c+4>>2]&-8)==(b|0)){break o}c=d>>>29|0;d=d<<1;h=e+(c&4)|0;c=H[h+16>>2];if(c){continue}break}H[h+16>>2]=a;H[a+24>>2]=e}H[a+12>>2]=a;H[a+8>>2]=a;return}b=H[e+8>>2];H[b+12>>2]=a;H[e+8>>2]=a;H[a+24>>2]=0;H[a+12>>2]=e;H[a+8>>2]=b}}function gn(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=Ha-240|0;Ha=e;G[e+198>>1]=c;a:{if(!b){break a}f=H[b+4>>2];k=Bb(f,11159);if(!k){k=Bb(f,9832)}h=Bb(f,7450);f=Bb(f,7580);if(!k){db();H[e>>2]=c;Wa(27639,e);break a}if(!h){db();H[e+16>>2]=k;Wa(23138,e+16|0);break a}if(!f){db();H[e+32>>2]=k;Wa(23105,e+32|0);break a}H[e+192>>2]=0;H[e+184>>2]=0;H[e+188>>2]=0;c=e+184|0;fn(c,h,k);wb(c,d);H[e+224>>2]=0;H[e+228>>2]=0;H[e+216>>2]=0;H[e+220>>2]=0;H[e+208>>2]=0;H[e+212>>2]=0;H[e+200>>2]=0;H[e+204>>2]=0;H[e+144>>2]=e+224;H[e+148>>2]=e+216;H[e+152>>2]=e+208;H[e+156>>2]=e+200;c=wc(f,8813,e+144|0);if((c|0)!=4){db();H[e+136>>2]=c;H[e+132>>2]=k;H[e+128>>2]=4352;Wa(28351,e+128|0)}L[e+180>>2]=M[e+200>>3];L[e+176>>2]=M[e+208>>3];L[e+172>>2]=M[e+216>>3];L[e+168>>2]=M[e+224>>3];jf(e+168|0);c=H[a+12>>2];f=fb(H[c>>2],k);if((f|0)!=H[c+12>>2]){db();a=H[H[a+12>>2]+4>>2];if(a){a=H[a+12>>2]}else{a=0}H[e+120>>2]=a;H[e+116>>2]=f;H[e+112>>2]=k;Wa(23860,e+112|0);a=Eb(4);H[a>>2]=15;Z(a|0,34176,0);B()}Yi(c,k);c=H[a+16>>2];f=H[H[a+12>>2]+4>>2];if(f){h=H[f+12>>2]}else{h=0}m=h-1|0;Zh(c,m,e+198|0);Ib(H[a+20>>2],m,e+184|0);if((h|0)>0){i=H[a+24>>2];c=H[i+8>>2];b:{if((c|0)>=(h|0)){break b}f=H[i+4>>2];f=(f|0)<(h|0)?h+(m>>>1|0)|0:f;if((f|0)==(c|0)){break b}o=ib(f<<4);if(!o){if((c|0)>=(f|0)){break b}H[e+100>>2]=f;H[e+96>>2]=c;Wa(24475,e+96|0);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}c=0;g=H[i+12>>2];if((f|0)<(g|0)){H[i+12>>2]=f;g=f}q=(g|0)>0?g:0;j=H[i>>2];while(1){if((c|0)==(q|0)){if(j){Va(j);g=H[i+12>>2]}H[i>>2]=o;c=0;j=f-g|0;l=(j|0)>0?j:0;while(1){if((c|0)!=(l|0)){j=(H[i>>2]+(g<<4)|0)+(c<<4)|0;H[j+8>>2]=0;H[j+12>>2]=1065353216;H[j>>2]=0;H[j+4>>2]=0;c=c+1|0;continue}break}H[i+8>>2]=f}else{l=c<<4;n=l+o|0;l=j+l|0;p=H[l+4>>2];H[n>>2]=H[l>>2];H[n+4>>2]=p;p=H[l+12>>2];H[n+8>>2]=H[l+8>>2];H[n+12>>2]=p;c=c+1|0;continue}break}}if((h|0)>H[i+12>>2]){H[i+12>>2]=h}f=H[e+172>>2];c=H[i>>2]+(m<<4)|0;H[c>>2]=H[e+168>>2];H[c+4>>2]=f;f=H[e+180>>2];H[c+8>>2]=H[e+176>>2];H[c+12>>2]=f}f=H[b+8>>2];b=H[f+12>>2];i=(b|0)>0?b:0;h=m<<16>>16;b=0;while(1){if((b|0)==(i|0)){break a}c=0;c=H[f+12>>2]>(b|0)?H[H[f>>2]+(b<<2)>>2]:c;g=H[c>>2];c:{if(!Hb(g,4352)){gn(a,c,h,d);break c}if(!Hb(g,9622)){G[e+216>>1]=m;g=H[c+4>>2];c=Bb(g,9832);g=Bb(g,7450);if(!c){db();H[e+48>>2]=h;Wa(27682,e+48|0);break c}if(!g){db();H[e+64>>2]=c;Wa(23213,e- -64|0);break c}H[e+232>>2]=0;H[e+224>>2]=0;H[e+228>>2]=0;j=e+224|0;fn(j,g,c);wb(j,d);Yi(H[a+28>>2],c);g=H[a+32>>2];c=H[H[a+28>>2]+4>>2];if(c){c=H[c+12>>2]-1|0}else{c=-1}Zh(g,c,e+216|0);Ib(H[a+36>>2],c,e+224|0);break c}db();c=H[c>>2];H[e+84>>2]=k;H[e+80>>2]=c;Wa(23171,e+80|0)}b=b+1|0;continue}}Ha=e+240|0}function al(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;i=Ha-48|0;Ha=i;H[a+4>>2]=0;H[a+8>>2]=0;H[a+20>>2]=1;G[a+48>>1]=1;L[a+36>>2]=e;L[a+32>>2]=d;L[a+28>>2]=c;H[a+24>>2]=b;H[a>>2]=32056;H[a+12>>2]=0;H[a+16>>2]=0;a:{b:{c:{switch(Yb(f)-5|0){case 0:d=od(F[f|0]);b=0;d:{e:{f:{g:{h=I[f+1|0];switch(h-108|0){case 1:break d;case 2:break e;case 0:break f;default:break g}}if((h|0)!=116){break d}b=1;break d}b=2;break d}b=3}H[a+40>>2]=b;e=od(F[f+2|0]);c=od(F[f+3|0]);h:{i:{j:{k:{b=I[f+4|0];switch(b-108|0){case 1:break h;case 2:break i;case 0:break j;default:break k}}if((b|0)!=116){break h}g=1;break h}g=2;break h}g=3}H[a+44>>2]=g;b=e<O(0);F[a+49|0]=b;if(!b){break a}break b;case 1:n=a,o=jh(F[f|0],1),F[n+48|0]=o;d=od(F[f+1|0]);b=0;l:{m:{n:{o:{h=I[f+2|0];switch(h-108|0){case 1:break l;case 2:break m;case 0:break n;default:break o}}if((h|0)!=116){break l}b=1;break l}b=2;break l}b=3}H[a+40>>2]=b;e=od(F[f+3|0]);c=od(F[f+4|0]);p:{q:{r:{s:{b=I[f+5|0];switch(b-108|0){case 1:break p;case 2:break q;case 0:break r;default:break s}}if((b|0)!=116){break p}g=1;break p}g=2;break p}g=3}H[a+44>>2]=g;b=e<O(0);F[a+49|0]=b;if(b){break b}break a;case 2:n=a,o=jh(F[f|0],1),F[n+48|0]=o;d=od(F[f+1|0]);b=0;t:{u:{v:{w:{h=I[f+2|0];switch(h-108|0){case 1:break t;case 2:break u;case 0:break v;default:break w}}if((h|0)!=116){break t}b=1;break t}b=2;break t}b=3}H[a+40>>2]=b;e=od(F[f+3|0]);c=od(F[f+4|0]);x:{y:{z:{A:{b=I[f+5|0];switch(b-108|0){case 1:break x;case 2:break y;case 0:break z;default:break A}}if((b|0)!=116){break x}g=1;break x}g=2;break x}g=3}H[a+44>>2]=g;b=jh(F[f+6|0],0);F[a+49|0]=b;e=e<O(0)?b?O(2):e:e;break a;default:break c}}b=0;if(f){k=Xa(40);nq(k);h=H[k+16>>2];H[h+12>>2]=0;j=Yb(f);if((j|0)>H[h+8>>2]){g=H[h+4>>2];if((g|0)<=(j|0)){g=(j+((j|0)/2|0)|0)+1|0}_j(h,g);l=H[h+12>>2]}g=f;while(1){m=I[g|0];if(m){F[H[h>>2]+l|0]=m;g=g+1|0;l=l+1|0;continue}break}H[h+12>>2]=j+H[h+12>>2]}g=0;while(1)if((g|0)==7){B:{if((b|0)<6){while(1)if((b|0)<=0){H[i+16>>2]=0;b=0;break B}else{g=i+16|0;h=g+(b<<2)|0;b=b-1|0;H[h>>2]=H[g+(b<<2)>>2];continue}}b=H[i+16>>2]}n=a,o=$k(b,1),F[n+48|0]=o;d=ih(H[i+20>>2]);n=a,o=_k(H[i+24>>2]),H[n+40>>2]=o;e=ih(H[i+28>>2]);c=ih(H[i+32>>2]);n=a,o=_k(H[i+36>>2]),H[n+44>>2]=o;g=$k(H[i+40>>2],e<O(0));F[a+49|0]=g;b=0;while(1){if((b|0)==7){if(k){Va(bq(k))}e=e<O(0)?g?O(2):e:e;break a}h=(i+16|0)+(b<<2)|0;j=H[h>>2];if(j){Va(j);H[h>>2]=0}b=b+1|0;continue}}else{h=qb(Ip(k));H[(i+16|0)+(g<<2)>>2]=h;g=g+1|0;b=h?g:b;continue}}e=O(2)}if(!(I[a+48|0]|I[a+49|0])){F[a+48|0]=1;db();H[i>>2]=f;Wa(27321,i)}H[a+4>>2]=0;d=O(d+O(0));L[a+8>>2]=d;d=O(e+d);L[a+12>>2]=d;L[a+16>>2]=c+d;Ha=i+48|0;return a}function Gs(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{d=H[a+528>>2];c=H[d+40>>2];if(!c){break a}f=H[c+24>>2];e=H[c+12>>2];g=H[14678];h=H[c>>2];b=I[d+13|0];if(b&4){tm(c,1,(b&64)>>>6|0,H[H[d+20>>2]+56>>2],H[d>>2]);b=I[d+13|0]}if(b&8){tm(H[d+40>>2],0,(b&64)>>>6|0,H[H[d+24>>2]+56>>2],H[d>>2])}b=g&16777215;e=e&16777215;c=(b|0)==(e|0)|(b|0)==(f&16777215);b:{if(!(!c|(b|0)!=(h&16777215))){c=H[d+40>>2];if((b|0)!=(e|0)){F[c+25|0]=0;F[c+26|0]=48;F[c+24|0]=21;break b}if((b|0)!=(f&16777215)){F[c+13|0]=0;F[c+14|0]=48;F[c+12|0]=21;break b}G[c+12>>1]=21;F[c+14|0]=48;b=H[d+40>>2];G[b+24>>1]=21;F[b+26|0]=48;break b}if(c){break b}b=H[d+40>>2];if(!pc(I[b+12|0],I[b+13|0]|I[b+14|0]<<8)){break b}if(!pc(I[b+24|0],I[b+25|0]|I[b+26|0]<<8)){break b}c=b+24|0;G[b+36>>1]=J[c>>1];F[b+38|0]=I[c+2|0];b=H[d+40>>2];G[b+40>>1]=J[b+12>>1];F[b+42|0]=I[b+14|0];b=H[d+40>>2];G[b+12>>1]=21;F[b+14|0]=48;b=H[d+40>>2];G[b+24>>1]=21;F[b+26|0]=48}f=H[H[d+24>>2]+56>>2];e=H[H[d+20>>2]+56>>2];qe(H[d+40>>2]+36|0,e);qe(H[d+40>>2]+40|0,f);c:{if((h&16777215)==(g&16777215)){break c}c=H[14020];b=I[c+H[e>>2]|0];c=I[c+H[f>>2]|0];if((b|0)==(c|0)){b=H[d+40>>2];c=I[b+12|0]-1>>>0<11|((I[b+13|0]|I[b+14|0]<<8)&3968)!=0;b=((I[b+25|0]|I[b+26|0]<<8)&3968)!=0|I[b+24|0]-1>>>0<11}if((b|0)==(c|0)){break c}c=H[d+40>>2];d:{if(b){b=H[c+4>>2];H[c+12>>2]=H[c>>2];H[c+16>>2]=b;H[c+20>>2]=H[c+8>>2];b=H[d+40>>2];F[b+1|0]=0;F[b+2|0]=0;F[b+4|0]=0;F[b+5|0]=0;F[b+6|0]=0;F[b|0]=0;b=H[d+40>>2];G[b+24>>1]=J[b+36>>1];F[b+26|0]=I[b+38|0];b=H[d+40>>2];F[b+29|0]=0;F[b+30|0]=0;F[b+28|0]=0;c=36;g=37;b=I[d+13|0]&64?4097:4098;break d}b=H[c+4>>2];H[c+24>>2]=H[c>>2];H[c+28>>2]=b;H[c+32>>2]=H[c+8>>2];b=H[d+40>>2];F[b+1|0]=0;F[b+2|0]=0;F[b+4|0]=0;F[b+5|0]=0;F[b+6|0]=0;F[b|0]=0;b=H[d+40>>2];G[b+12>>1]=J[b+40>>1];F[b+14|0]=I[b+42|0];b=H[d+40>>2];F[b+17|0]=0;F[b+18|0]=0;F[b+16|0]=0;c=40;g=41;b=I[d+13|0]&64?4098:4097}h=c;c=H[d+40>>2];F[h+c|0]=1;c=c+g|0;F[c|0]=b;F[c+1|0]=b>>>8}qe(H[d+40>>2]+12|0,e);qe(H[d+40>>2]+16|0,e);qe(H[d+40>>2]+24|0,f);qe(H[d+40>>2]+28|0,f);b=H[a+528>>2];a=H[b+40>>2];if(!a){break a}e:{if((H[a>>2]&16777215)!=(H[14678]&16777215)){c=H[a+4>>2];d=H[b+20>>2];H[d+4>>2]=H[a>>2];H[d+8>>2]=c;H[d+12>>2]=H[a+8>>2];a=H[b+40>>2];break e}c=H[a+16>>2];d=H[b+20>>2];H[d+4>>2]=H[a+12>>2];H[d+8>>2]=c;H[d+12>>2]=H[a+20>>2];a=H[b+40>>2]+24|0}c=H[a+4>>2];d=H[b+24>>2];H[d+4>>2]=H[a>>2];H[d+8>>2]=c;H[d+12>>2]=H[a+8>>2];a=H[b+20>>2];d=H[b+40>>2];G[a+16>>1]=J[d+36>>1];F[a+18|0]=I[d+38|0];a=H[b+24>>2];d=H[b+40>>2];G[a+16>>1]=J[d+40>>1];F[a+18|0]=I[d+42|0];L[b+16>>2]=L[H[14023]+(H[H[b+40>>2]+44>>2]<<2)>>2]}}function Aj(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;a:{b:{switch(H[a+464>>2]-2|0){case 1:H[a+268>>2]=33;break a;case 0:H[a+268>>2]=36;break a;default:break b}}e=1;H[a+464>>2]=1;if(!c){F[a+468|0]=d;if(!d){break a}b=H[a+24>>2];H[a+280>>2]=b;c=H[a+28>>2];H[a+40>>2]=c;b=La[H[a+264>>2]](a,b,c,a+24|0)|0;H[a+268>>2]=b;if(!b){c:{switch(H[a+464>>2]){case 3:b=H[a+144>>2];La[H[b+48>>2]](b,H[a+280>>2],H[a+24>>2],a+392|0);H[a+280>>2]=H[a+24>>2];e=2;break a;case 0:case 1:break c;default:break a}}H[a+464>>2]=2;break a}H[a+264>>2]=22;H[a+276>>2]=H[a+272>>2];e=0;break a}d:{e:{f:{g:{h:{f=H[a+28>>2];e=H[a+24>>2];if((f|0)==(e|0)){F[a+468|0]=d;H[a+280>>2]=b;f=b+c|0;H[a+40>>2]=f;H[a+36>>2]=H[a+36>>2]+c;b=La[H[a+264>>2]](a,b,f,h+12|0)|0;H[a+268>>2]=b;if(b){H[a+264>>2]=22;H[a+276>>2]=H[a+272>>2];e=0;break a}e=1;b=-1;i:{j:{switch(H[a+464>>2]){case 0:case 1:if(!d){b=1;break i}H[a+464>>2]=2;break a;case 2:break a;case 3:break j;default:break i}}b=2}d=H[a+144>>2];La[H[d+48>>2]](d,H[a+280>>2],H[h+12>>2],a+392|0);d=H[h+12>>2];g=f-d|0;if((d|0)==(f|0)){break d}e=H[a+8>>2];if(!e){break h}if((g|0)<=(H[a+32>>2]-e|0)){break e}e=La[H[a+16>>2]](e,c<<1)|0;break f}i=a+24|0;g=H[a+32>>2];if((g-f|0)<(c|0)){f=f-e|0;j=f+c|0;k=H[a+8>>2];k:{if((j|0)<=(g-k|0)){An(k,e,f);g=H[a+8>>2];f=g+(H[a+28>>2]-H[a+24>>2]|0)|0;break k}e=(e|0)==(g|0)?1024:g-e|0;while(1){e=e<<1;if((j|0)>(e|0)){continue}break}g=La[H[a+12>>2]](e)|0;if(!g){break g}H[a+32>>2]=e+g;e=H[a+24>>2];if(e){jb(g,e,H[a+28>>2]-e|0);La[H[a+20>>2]](H[a+8>>2]);e=H[a+24>>2]}else{e=0}H[a+8>>2]=g;f=(H[a+28>>2]-e|0)+g|0}H[a+28>>2]=f;H[i>>2]=g}e=0;if(!f){break a}jb(f,b,c);l:{switch(H[a+464>>2]-2|0){case 1:H[a+268>>2]=33;break a;case 0:H[a+268>>2]=36;break a;default:break l}}e=1;H[a+464>>2]=1;F[a+468|0]=d;f=H[a+24>>2];H[a+280>>2]=f;b=H[a+28>>2]+c|0;H[a+28>>2]=b;H[a+40>>2]=b;H[a+36>>2]=H[a+36>>2]+c;b=La[H[a+264>>2]](a,f,b,i)|0;H[a+268>>2]=b;if(b){H[a+264>>2]=22;H[a+276>>2]=H[a+272>>2];e=0;break a}m:{n:{switch(H[a+464>>2]){case 0:case 1:if(!d){break m}H[a+464>>2]=2;break a;case 3:break n;default:break m}}e=2}b=H[a+144>>2];La[H[b+48>>2]](b,H[a+280>>2],H[a+24>>2],a+392|0);H[a+280>>2]=H[a+24>>2];break a}e=La[H[a+12>>2]](c<<1)|0;break f}H[a+268>>2]=1;e=0;break a}if(!e){H[a+268>>2]=1;e=0;break a}H[a+8>>2]=e;H[a+32>>2]=(c<<1)+e;d=H[h+12>>2]}jb(e,d,g)}c=H[a+8>>2];H[a+280>>2]=c;H[a+24>>2]=c;H[a+276>>2]=c;H[a+272>>2]=c;c=c+g|0;H[a+28>>2]=c;H[a+40>>2]=c;e=b}Ha=h+16|0;return e}function Ps(a,b){a=a|0;b=b|0;var c=0,d=0;c=Ha-128|0;Ha=c;a:{if(!b){break a}H[c+112>>2]=a;eb(b,21549,c+112|0);Pc(a,b);if(H[a+528>>2]){_a(b,G[29370]);$a(17555,b);H[c+96>>2]=H[a+528>>2];eb(b,20430,c+96|0)}if(H[a+532>>2]){_a(b,G[29370]);$a(17532,b);H[c+80>>2]=H[a+532>>2];eb(b,20430,c+80|0)}if(H[a+536>>2]){_a(b,G[29370]);$a(17443,b);H[c+64>>2]=H[a+536>>2];eb(b,20430,c- -64|0)}if(H[a+540>>2]){_a(b,G[29370]);$a(17787,b);H[c+48>>2]=H[a+540>>2];eb(b,20430,c+48|0)}d=a+544|0;if(!Bc(d)){_a(b,G[29370]);$a(16974,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+556>>2]){_a(b,G[29370]);$a(17738,b);H[c+32>>2]=H[a+556>>2];eb(b,20430,c+32|0)}if(H[a+560>>2]){_a(b,G[29370]);$a(17419,b);H[c+16>>2]=H[a+560>>2];eb(b,20430,c+16|0)}if(H[a+564>>2]){_a(b,G[29370]);$a(17758,b);H[c>>2]=H[a+564>>2];eb(b,20430,c)}if(!(!(L[a+592>>2]!=O(0)|L[a+596>>2]!=O(0))&L[a+600>>2]==O(0))){_a(b,G[29370]);$a(18152,b);G[29370]=J[29370]+1;tb(a+592|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+640>>2]!=O(0)|L[a+644>>2]!=O(0))&L[a+648>>2]==O(0))){_a(b,G[29370]);$a(18174,b);G[29370]=J[29370]+1;tb(a+640|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+604>>2]!=O(0)|L[a+608>>2]!=O(0))&L[a+612>>2]==O(0))){_a(b,G[29370]);$a(18048,b);G[29370]=J[29370]+1;tb(a+604|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+652>>2]!=O(0)|L[a+656>>2]!=O(0))&L[a+660>>2]==O(0))){_a(b,G[29370]);$a(18073,b);G[29370]=J[29370]+1;tb(a+652|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+616>>2]!=O(0)|L[a+620>>2]!=O(0))&L[a+624>>2]==O(0))){_a(b,G[29370]);$a(18097,b);G[29370]=J[29370]+1;tb(a+616|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+664>>2]!=O(0)|L[a+668>>2]!=O(0))&L[a+672>>2]==O(0))){_a(b,G[29370]);$a(18125,b);G[29370]=J[29370]+1;tb(a+664|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+628>>2]!=O(0)|L[a+632>>2]!=O(0))&L[a+636>>2]==O(0))){_a(b,G[29370]);$a(17e3,b);G[29370]=J[29370]+1;tb(a+628|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+676>>2]!=O(0)|L[a+680>>2]!=O(0))&L[a+684>>2]==O(0))){_a(b,G[29370]);$a(17024,b);G[29370]=J[29370]+1;tb(a+676|0,b,3);G[29370]=J[29370]-1;bb(10,b)}Sb(b);$a(16151,b);G[29370]=J[29370]+1;d=H[a+696>>2];b:{if(!d){$a(14796,b);break b}La[H[H[d>>2]+72>>2]](d,b)}G[29370]=J[29370]-1;if(!H[a+700>>2]){break a}Sb(b);$a(16133,b);G[29370]=J[29370]+1;a=H[a+700>>2];La[H[H[a>>2]+72>>2]](a,b);G[29370]=J[29370]-1}Ha=c+128|0}function Pc(a,b){a=a|0;b=b|0;var c=0,d=O(0),e=0,f=0,g=0,h=0,i=0;c=Ha-240|0;Ha=c;if(b){_a(b,G[29370]);H[c+224>>2]=H[(H[a+8>>2]<<2)+32208>>2];eb(b,19161,c+224|0);a:{if(!H[14711]|!(H[a+12>>2]|H[a+16>>2])&I[a+20|0]!=1){break a}_a(b,G[29370]);Db(16171);g=H[14711];if(!g){break a}e=H[a+12>>2];b:{if((e|0)<0){break b}f=H[14598];if((e|0)>=H[f+8>>2]){break b}h=H[H[f+4>>2]+(e<<2)>>2]}f=H[a+16>>2];i=I[a+20|0];H[c+212>>2]=e;H[c+208>>2]=h;H[c+220>>2]=i?11882:40736;H[c+216>>2]=F[f+31824|0];eb(g,5912,c+208|0)}if(H[a+24>>2]){_a(b,G[29370]);$a(18389,b);H[c+192>>2]=H[a+24>>2];eb(b,20430,c+192|0)}if(I[a+28|0]==1){_a(b,G[29370]);H[c+176>>2]=I[a+28|0]?84:70;eb(b,20797,c+176|0)}if(I[a+29|0]==1){_a(b,G[29370]);H[c+160>>2]=I[a+29|0]?84:70;eb(b,20852,c+160|0)}if(I[a+30|0]==1){_a(b,G[29370]);H[c+144>>2]=I[a+30|0]?84:70;eb(b,20777,c+144|0)}if(I[a+31|0]==1){_a(b,G[29370]);H[c+128>>2]=I[a+31|0]?84:70;eb(b,20750,c+128|0)}if(I[a+33|0]==1){_a(b,G[29370]);H[c+112>>2]=I[a+33|0]?84:70;eb(b,20814,c+112|0)}if(I[a+32|0]==1){_a(b,G[29370]);H[c+96>>2]=I[a+32|0]?84:70;eb(b,20704,c+96|0)}_a(b,G[29370]);d=L[a+48>>2];H[c+80>>2]=3;M[c+88>>3]=d;pb(b,19959,c+80|0);_a(b,G[29370]);d=L[a+40>>2];H[c+64>>2]=3;M[c+72>>3]=d;pb(b,19720,c- -64|0);_a(b,G[29370]);d=L[a+44>>2];H[c+48>>2]=3;M[c+56>>3]=d;pb(b,19641,c+48|0);_a(b,G[29370]);d=L[a+52>>2];H[c+32>>2]=3;M[c+40>>3]=d;pb(b,19739,c+32|0);_a(b,G[29370]);d=L[a+56>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,19975,c+16|0);_a(b,G[29370]);$a(18459,b);G[29370]=J[29370]+1;e=a+60|0;H[c>>2]=e;eb(b,18964,c);_a(b,G[29370]);$a(17309,b);G[29370]=J[29370]+1;Pk(J[a+508>>1],b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17325,b);G[29370]=J[29370]+1;Pk(J[a+510>>1],b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(16944,b);G[29370]=J[29370]+1;Ef(e,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17063,b);G[29370]=J[29370]+1;Ef(a+172|0,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(16927,b);G[29370]=J[29370]+1;Ef(a+284|0,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17047,b);G[29370]=J[29370]+1;Ef(a+396|0,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17693,b);G[29370]=J[29370]+1;Gm(L[a+512>>2],L[a+516>>2],b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17716,b);G[29370]=J[29370]+1;Gm(L[a+520>>2],L[a+524>>2],b);G[29370]=J[29370]-1;bb(10,b);G[29370]=J[29370]-1;bb(10,b)}Ha=c+240|0}function dm(a,b,c){var d=0,e=0,f=O(0),g=0,h=O(0),i=O(0),j=O(0),k=0,l=O(0),m=O(0),n=O(0),o=0,p=0,q=O(0),r=0,s=0,t=0,u=O(0);g=Ha-48|0;Ha=g;d=fb(b,6184);a:{if(!d){break a}e=c&2;d=Qj(g+24|0,d,e);k=fb(b,6177);b:{if(!k){if((d|0)==(a+20|0)){break b}L[a+20>>2]=L[d>>2];L[a+24>>2]=L[d+4>>2];L[a+28>>2]=L[d+8>>2];break b}e=Qj(g+12|0,k,e);f=Sf(b,6991);q=L[e+8>>2];i=L[e+4>>2];h=L[d+8>>2];l=L[d+4>>2];m=L[d>>2];j=O(O(1)-f);n=O(O(m*j)+O(f*L[e>>2]));L[g+36>>2]=n;i=O(O(l*j)+O(f*i));L[g+40>>2]=i;f=O(O(h*j)+O(f*q));L[g+44>>2]=f;d=oc(g+36|0);L[a+28>>2]=d?f:h;L[a+24>>2]=d?i:l;L[a+20>>2]=d?n:m}if(I[H[a+72>>2]+13|0]&64){break a}L[a+20>>2]=-L[a+20>>2]}Rc(b,6135,a+40|0,0);d=fb(b,6095);c:{if(!d){break c}e=d;d=((c&3)!=0)<<1;c=Pj(g+36|0,e,d);e=fb(b,6088);d:{if(!e){if((c|0)==(a+32|0)){break d}L[a+32>>2]=L[c>>2];L[a+36>>2]=L[c+4>>2];break d}d=Pj(g+24|0,e,d);f=Sf(b,6978);h=L[c+4>>2];l=O(O(1)-f);j=O(O(h*l)+O(f*L[d+4>>2]));i=h;h=L[c>>2];f=O(O(h*l)+O(f*L[d>>2]));c=f!=O(0)|j!=O(0);L[a+36>>2]=c?j:i;L[a+32>>2]=c?f:h}if(I[H[a+72>>2]+13|0]&64){break c}L[a+32>>2]=-L[a+32>>2]}Ug(b,6052,a+41|0);Oj(b,11013,a+44|0);Oj(b,10996,a+48|0);c=H[a+56>>2];e:{if(!c){db();Wa(24051,0);break e}F[c+232|0]=I[a|0]==(I[H[a+72>>2]+13|0]>>>6&1);Nj(c,fb(b,9672));Rc(b,9682,c+4|0,0);ph(fb(b,10561),c+8|0,c+12|0);k=c+28|0;o=c+160|0;oh(fb(b,5429),k,o);d=Ob(H[14590],fb(b,8574));if(d){H[c+48>>2]=d}jl(c);Uf(c+52|0,fb(b,5308));Uf(c+54|0,fb(b,5166));d=Ob(H[14591],fb(b,5323));if(d){H[c+56>>2]=d}r=c+80|0;s=c+60|0;d=0;f:{while(1){if((d|0)==5){g:{e=fb(b,9665);if(e){d=Gf(Xa(220));H[c+220>>2]=d;Nj(d,e);ph(fb(b,10554),d+8|0,d+12|0);oh(fb(b,5422),d+28|0,d+160|0);e=Ob(H[14590],fb(b,8567));if(e){H[d+48>>2]=e}jl(d);Uf(d+52|0,fb(b,5301));Uf(d+54|0,fb(b,5159));t=c,u=Sf(b,7057),L[t+224>>2]=u}nh(c+180|0,c+184|0,6200,fb(b,6200));mh(c+204|0,10528,fb(b,10528));nh(c+188|0,c+192|0,6193,fb(b,6193));mh(c+208|0,10521,fb(b,10521));nh(c+196|0,c+200|0,7890,fb(b,7890));mh(c+212|0,4987,fb(b,4987));Ug(b,10748,c+216|0);f=O(-1);switch(H[c+56>>2]-1|0){case 0:break f;case 1:break g;default:break e}}}else{p=d<<2;e=fb(b,H[p+34e3>>2]);h:{if(!e){break h}if(!d){oh(e,k,o);break h}ph(e,s+p|0,(d<<4)+r|0)}d=d+1|0;continue}break}f=O(1)}L[c+228>>2]=f}if(H[a+56>>2]){F[a+52|0]=1}Ha=g+48|0}function ni(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=O(0),l=0,m=0;d=Ha-256|0;Ha=d;e=a+16|0;while(1){if((c|0)==4){H[a>>2]=0;c=mi(d+144|0,b);f=H[a+12>>2];a:{if(f){ze(f,H[b+56>>2]);f=H[a+12>>2];break a}f=ho(Xa(64),H[b+56>>2]);H[a+12>>2]=f}H[c+56>>2]=f;g=H[a+976>>2];b:{if(g){ze(g,H[b+56>>2]);break b}l=a,m=ho(Xa(64),f),H[l+976>>2]=m}H[d+140>>2]=0;H[d+132>>2]=0;H[d+136>>2]=0;b=d+132|0;hg(c,H[a+4>>2],b);f=c+40|0;li(H[a+4>>2],e,I[a+8|0],b,f,c+76|0,O(0));i=a+1432|0;j=a+980|0;c=0;c:{while(1){d:{b=H[12859];if((c|0)==4){if(L[b+32>>2]!=O(0)){c=b+32|0;e=H[c+4>>2];H[a+152>>2]=H[c>>2];H[a+156>>2]=e;e=H[c+12>>2];H[a+160>>2]=H[c+8>>2];H[a+164>>2]=e}c=a+36|0;go(c,O(0));e=d+72|0;g=d+132|0;Ya(e,g);fo(c,e);c=d+60|0;Ya(c,g);Ya(a- -64|0,c);if(L[b+48>>2]!=O(0)){b=b+48|0;c=H[b+4>>2];H[a+676>>2]=H[b>>2];H[a+680>>2]=c;c=H[b+12>>2];H[a+684>>2]=H[b+8>>2];H[a+688>>2]=c}b=a+224|0;eo(b,O(0));c=d+44|0;rb(c,f);co(b,c);c=d+28|0;rb(c,f);bo(b,c);b=H[12859];if(L[b+64>>2]!=O(0)){b=b- -64|0;c=H[b+4>>2];H[a+884>>2]=H[b>>2];H[a+888>>2]=c;c=H[b+12>>2];H[a+892>>2]=H[b+8>>2];H[a+896>>2]=c}b=a+868|0;La[H[H[a+868>>2]+44>>2]](b,O(0));H[a+932>>2]=0;H[a+936>>2]=0;ao(b,O(0));c=H[12859];e=H[c+36>>2];b=H[a+220>>2];H[b+16>>2]=H[c+32>>2];H[b+20>>2]=e;e=H[c+44>>2];H[b+24>>2]=H[c+40>>2];H[b+28>>2]=e;b=H[a+220>>2];if(b){La[H[H[b>>2]+8>>2]](b,O(0))}b=a+196|0;c=a+184|0;Ya(b,c);e=a+208|0;Ya(e,c);Ya(d+16|0,d+132|0);if(!(L[d+16>>2]!=L[a+184>>2]|L[d+20>>2]!=L[a+188>>2])&L[d+24>>2]==L[a+192>>2]){break c}f=d+16|0;k=jg(f,c);Ya(c,f);if(!(k>O(.0024999999441206455))){break d}Ya(e,b);c=H[a+220>>2];if(!c){break c}La[H[H[c>>2]+16>>2]](c,O(1));a=H[a+220>>2];La[H[H[a>>2]+28>>2]](a,O(0));break c}b=b+((c|0)==3?80:96)|0;if(L[b>>2]!=O(0)){h=H[b+4>>2];g=i+N(c,644)|0;H[g>>2]=H[b>>2];H[g+4>>2]=h;h=H[b+12>>2];H[g+8>>2]=H[b+8>>2];H[g+12>>2]=h}b=N(c,644)+j|0;La[H[H[b>>2]+8>>2]](b,O(0));H[d+124>>2]=0;H[d+128>>2]=1065353216;H[d+116>>2]=0;H[d+120>>2]=0;h=H[e+(c<<2)>>2];g=d+116|0;La[H[H[h>>2]+8>>2]](h,g);h=d+100|0;rb(h,g);La[H[H[b>>2]+16>>2]](b,h);h=d+84|0;rb(h,g);La[H[H[b>>2]+28>>2]](b,h);c=c+1|0;continue}break}a=d+16|0;Ya(b,a);Ya(e,a)}a=d+4|0;Ya(a,d+132|0);Ya(b,a);Ha=d+256|0}else{f=H[e+(c<<2)>>2];La[H[H[f>>2]+12>>2]](f);c=c+1|0;continue}break}}function nl(a,b){var c=0,d=0,e=0,f=0;d=Ha-128|0;Ha=d;if(H[a+8>>2]){_a(b,G[29370]);$a(18301,b);H[d+112>>2]=H[a+8>>2];eb(b,20430,d+112|0)}c=a+12|0;if(!ad(c)){$a(18496,b);Hf(c,b);bb(10,b)}if(H[a+28>>2]){_a(b,G[29370]);$a(18283,b);H[d+96>>2]=H[a+28>>2];eb(b,20430,d+96|0)}c=a+32|0;if(!ad(c)){$a(18478,b);Hf(c,b);bb(10,b)}if(H[a+48>>2]){_a(b,G[29370]);$a(17677,b);H[d+80>>2]=H[a+48>>2];eb(b,20430,d+80|0)}c=0;_a(b,G[29370]);$a(15810,b);H[d+64>>2]=H[a+28>>2];eb(b,16734,d- -64|0);$a(15578,b);e=a+60|0;while(1){if((c|0)==5){bb(10,b);e=a+80|0;c=1;while(1){_a(b,G[29370]);if((c|0)==5){H[d+16>>2]=11400;eb(b,18705,d+16|0);G[29370]=J[29370]+1;uh(a+160|0,b);G[29370]=J[29370]-1;bb(10,b);if(H[a>>2]){_a(b,G[29370]);$a(15797,b);c=H[a>>2];a:{if(!c){$a(14836,b);break a}H[d>>2]=c;eb(b,11133,d)}bb(10,b)}if(J[a+52>>1]){_a(b,G[29370]);$a(15391,b);Qd(b,G[a+52>>1]);bb(10,b)}if(J[a+54>>1]){_a(b,G[29370]);$a(15340,b);Qd(b,G[a+54>>1]);bb(10,b)}if(H[a+180>>2]!=-1){_a(b,G[29370]);$a(16373,b);re(b,H[a+180>>2]);bb(10,b)}if(H[a+184>>2]!=-1){_a(b,G[29370]);$a(16325,b);re(b,H[a+184>>2]);bb(10,b)}if(H[a+204>>2]){c=0;_a(b,G[29370]);$a(15961,b);e=H[a+204>>2];b:{if((e|0)<0){break b}f=H[14025];if((e|0)>=H[f+8>>2]){break b}c=H[H[f+4>>2]+(e<<2)>>2]}$a(c,b);bb(10,b)}if(H[a+188>>2]!=-1){_a(b,G[29370]);$a(16354,b);re(b,H[a+188>>2]);bb(10,b)}if(H[a+192>>2]!=-1){_a(b,G[29370]);$a(16306,b);re(b,H[a+192>>2]);bb(10,b)}if(H[a+208>>2]){c=0;_a(b,G[29370]);$a(15939,b);e=H[a+208>>2];c:{if((e|0)<0){break c}f=H[14025];if((e|0)>=H[f+8>>2]){break c}c=H[H[f+4>>2]+(e<<2)>>2]}$a(c,b);bb(10,b)}if(H[a+196>>2]!=-1){_a(b,G[29370]);$a(16385,b);re(b,H[a+196>>2]);bb(10,b)}if(H[a+200>>2]!=-1){_a(b,G[29370]);$a(16337,b);re(b,H[a+200>>2]);bb(10,b)}if(H[a+212>>2]){c=0;_a(b,G[29370]);$a(15324,b);e=H[a+212>>2];d:{if((e|0)<0){break d}f=H[14025];if((e|0)>=H[f+8>>2]){break d}c=H[H[f+4>>2]+(e<<2)>>2]}$a(c,b);bb(10,b)}if(I[a+216|0]==1){_a(b,G[29370]);$a(20238,b)}Ha=d+128|0}else{H[d+32>>2]=H[(c<<2)+31952>>2];eb(b,18705,d+32|0);G[29370]=J[29370]+1;Hf(e+(c<<4)|0,b);G[29370]=J[29370]-1;bb(10,b);c=c+1|0;continue}break}}else{H[d+48>>2]=H[e+(c<<2)>>2];eb(b,11132,d+48|0);c=c+1|0;continue}break}}function fj(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,l=0,m=0;i=Ha-16|0;Ha=i;k=a+424|0;j=H[a+340>>2];l=(j+80|0)!=(f|0);a:{b:{while(1){c:{g=0;d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{h=La[H[b+12>>2]](b,d,e,i+12|0)|0;switch(h+4|0){case 0:break a;case 13:break j;case 1:break k;case 10:break l;case 14:break m;case 3:break n;case 4:break o;case 11:break e;case 2:case 5:case 6:case 7:case 8:case 9:case 12:break h;default:break i}}g=4;if(H[a+144>>2]!=(b|0)){break a}H[a+272>>2]=H[i+12>>2];break a}g=4;if(H[a+144>>2]!=(b|0)){break a}break b}p:{h=La[H[b+40>>2]](b,d)|0;q:{r:{if((h|0)<0){if(H[a+144>>2]==(b|0)){break r}break q}if(!((h|0)!=32|c)){g=H[f+12>>2];if((g|0)==H[f+16>>2]|I[g-1|0]==32){break d}}g=0;h=Je(h,i+8|0);if(h){break p}if(H[a+144>>2]!=(b|0)){break q}}H[a+272>>2]=d}g=14;break a}while(1){if((g|0)==(h|0)){break d}d=H[f+12>>2];if((d|0)==H[f+8>>2]){if(!Fb(f)){break c}d=H[f+12>>2]}m=I[(i+8|0)+g|0];H[f+12>>2]=d+1;F[d|0]=m;g=g+1|0;continue}}if(!tf(f,b,d,H[i+12>>2])){break c}break d}H[i+12>>2]=H[b+64>>2]+d;break e}g=H[b+64>>2];h=La[H[b+44>>2]](b,g+d|0,H[i+12>>2]-g|0)|0;if(h&255){g=H[f+12>>2];if((g|0)==H[f+8>>2]){if(!Fb(f)){break c}g=H[f+12>>2]}H[f+12>>2]=g+1;F[g|0]=h;break d}g=H[b+64>>2];g=Tb(k,b,g+d|0,H[i+12>>2]-g|0);if(!g){break c}h=Fc(j,g,0);H[a+436>>2]=H[a+440>>2];s:{t:{if(!l){if(!I[j+130|0]){break t}if(!H[a+284>>2]){break g}break s}if(!I[j+129|0]){break g}if(!I[j+130|0]){break s}break g}if(!I[j+129|0]){break g}}if(!h){break d}break f}if((h|0)==39){break e}}g=23;if(H[a+144>>2]==(b|0)){break b}break a}if(!h){g=11;break a}if(I[h+34|0]){break f}g=24;break a}if(I[h+32|0]){g=12;if(H[a+144>>2]==(b|0)){break b}break a}if(H[h+28>>2]){g=15;if(H[a+144>>2]==(b|0)){break b}break a}g=H[h+4>>2];if(!g){g=16;if(H[a+144>>2]==(b|0)){break b}break a}F[h+32|0]=1;g=fj(a,H[a+224>>2],c,g,g+H[h+8>>2]|0,f);F[h+32|0]=0;if(!g){break d}break a}g=H[f+12>>2];if(!c){if(H[f+16>>2]==(g|0)|I[g-1|0]==32){break d}}if(H[f+8>>2]==(g|0)){if(!Fb(f)){break c}g=H[f+12>>2]}H[f+12>>2]=g+1;F[g|0]=32}d=H[i+12>>2];continue}break}g=1;break a}H[a+272>>2]=d}Ha=i+16|0;return g}function tp(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=Ha-128|0;Ha=j;a:{b:{c:{if(!Vd(f,g,h,i,0,0,0,0)){break c}k=i&65535;m=i>>>16&32767;d:{e:{if((m|0)!=32767){n=4;if(m){break e}n=f|h|(g|k)?3:2;break d}n=!(f|h|(g|k))}}if(!n){break c}s=e>>>16|0;p=s&32767;if((p|0)!=32767){break b}}Jb(j+16|0,b,c,d,e,f,g,h,i);b=H[j+16>>2];d=H[j+20>>2];e=H[j+24>>2];c=H[j+28>>2];mo(j,b,d,e,c,b,d,e,c);d=H[j+8>>2];e=H[j+12>>2];h=H[j>>2];i=H[j+4>>2];break a}o=d;n=e&2147483647;k=n;m=h;l=i&2147483647;if((Vd(b,c,o,k,f,g,h,l)|0)<=0){if(Vd(b,c,o,k,f,g,h,l)){h=b;i=c;break a}Jb(j+112|0,b,c,d,e,0,0,0,0);d=H[j+120>>2];e=H[j+124>>2];h=H[j+112>>2];i=H[j+116>>2];break a}q=i>>>16&32767;if(p){i=c;h=b}else{Jb(j+96|0,b,c,o,n,0,0,0,1081540608);o=H[j+104>>2];h=H[j+108>>2];n=h;p=(h>>>16|0)-120|0;i=H[j+100>>2];h=H[j+96>>2]}if(!q){Jb(j+80|0,f,g,m,l,0,0,0,1081540608);m=H[j+88>>2];f=H[j+92>>2];l=f;q=(f>>>16|0)-120|0;g=H[j+84>>2];f=H[j+80>>2]}r=m;t=l&65535|65536;n=n&65535|65536;if((p|0)>(q|0)){while(1){l=o-r|0;k=(g|0)==(i|0)&f>>>0>h>>>0|g>>>0>i>>>0;m=l-k|0;k=(n-((o>>>0<r>>>0)+t|0)|0)-(k>>>0>l>>>0)|0;f:{if((k|0)>=0|(k|0)>0){o=h;h=h-f|0;i=i-((f>>>0>o>>>0)+g|0)|0;if(!(h|m|(i|k))){Jb(j+32|0,b,c,d,e,0,0,0,0);d=H[j+40>>2];e=H[j+44>>2];h=H[j+32>>2];i=H[j+36>>2];break a}k=k<<1|m>>>31;o=m<<1|i>>>31;break f}k=n<<1|o>>>31;o=o<<1|i>>>31}n=k;k=i<<1|h>>>31;h=h<<1;i=k;p=p-1|0;if((q|0)<(p|0)){continue}break}p=q}l=o-r|0;k=(g|0)==(i|0)&f>>>0>h>>>0|g>>>0>i>>>0;m=l-k|0;k=(n-((o>>>0<r>>>0)+t|0)|0)-(k>>>0>l>>>0)|0;l=k;g:{if((k|0)<0){m=o;l=n;break g}o=h;h=h-f|0;i=i-((f>>>0>o>>>0)+g|0)|0;if(h|m|(i|l)){break g}Jb(j+48|0,b,c,d,e,0,0,0,0);d=H[j+56>>2];e=H[j+60>>2];h=H[j+48>>2];i=H[j+52>>2];break a}if((l|0)==65535|l>>>0<65535){while(1){b=i>>>31|0;p=p-1|0;n=i<<1|h>>>31;h=h<<1;i=n;c=b;b=l<<1|m>>>31;m=c|m<<1;l=b;if(b>>>0<65536){continue}break}}b=s&32768;if((p|0)<=0){Jb(j- -64|0,h,i,m,l&65535|(b|p+120)<<16,0,0,0,1065811968);d=H[j+72>>2];e=H[j+76>>2];h=H[j+64>>2];i=H[j+68>>2];break a}d=m;e=l&65535|(b|p)<<16}H[a>>2]=h;H[a+4>>2]=i;H[a+8>>2]=d;H[a+12>>2]=e;Ha=j+128|0}function st(a,b){a=a|0;b=b|0;var c=0,d=0;c=Ha-192|0;Ha=c;if(b){H[c+176>>2]=a;eb(b,21569,c+176|0);Pc(a,b);if(H[a+552>>2]){_a(b,G[29370]);$a(17930,b);H[c+160>>2]=H[a+552>>2];eb(b,20430,c+160|0)}d=a+528|0;if(!Bc(d)){_a(b,G[29370]);$a(17251,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}d=a+540|0;if(!Bc(d)){_a(b,G[29370]);$a(17234,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}if(!(L[a+556>>2]==O(0)&L[a+560>>2]==O(0))){_a(b,G[29370]);$a(16788,b);G[29370]=J[29370]+1;fe(L[a+556>>2],L[a+560>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(!(L[a+568>>2]==O(0)&L[a+572>>2]==O(0))){_a(b,G[29370]);$a(18514,b);G[29370]=J[29370]+1;fe(L[a+568>>2],L[a+572>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(I[a+564|0]==1){_a(b,G[29370]);H[c+144>>2]=I[a+564|0]?84:70;eb(b,20664,c+144|0)}if(I[a+565|0]==1){_a(b,G[29370]);H[c+128>>2]=I[a+565|0]?84:70;eb(b,20639,c+128|0)}if(H[a+588>>2]){_a(b,G[29370]);$a(17489,b);H[c+112>>2]=H[a+588>>2];eb(b,20430,c+112|0)}if(H[a+592>>2]){_a(b,G[29370]);$a(17843,b);H[c+96>>2]=H[a+592>>2];eb(b,20430,c+96|0)}if(H[a+584>>2]){_a(b,G[29370]);$a(17895,b);H[c+80>>2]=H[a+584>>2];eb(b,20430,c+80|0)}if(!(L[a+576>>2]==O(0)&L[a+580>>2]==O(0))){_a(b,G[29370]);$a(17571,b);G[29370]=J[29370]+1;fe(L[a+576>>2],L[a+580>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+596>>2]){_a(b,G[29370]);$a(18421,b);H[c+64>>2]=H[a+596>>2];eb(b,20430,c- -64|0)}if(H[a+600>>2]){_a(b,G[29370]);$a(17862,b);H[c+48>>2]=H[a+600>>2];eb(b,20430,c+48|0)}if(H[a+604>>2]){_a(b,G[29370]);$a(17468,b);H[c+32>>2]=H[a+604>>2];eb(b,20430,c+32|0)}if(H[a+608>>2]){_a(b,G[29370]);$a(17817,b);H[c+16>>2]=H[a+608>>2];eb(b,20430,c+16|0)}if(J[a+612>>1]){_a(b,G[29370]);$a(18404,b);H[c>>2]=G[a+612>>1];eb(b,20430,c)}_a(b,G[29370]);$a(18687,b);d=J[29370]+1|0;G[29370]=d;_a(b,d<<16>>16);$a(16963,b);G[29370]=J[29370]+1;wk(a+616|0,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17081,b);G[29370]=J[29370]+1;wk(a+684|0,b);G[29370]=J[29370]-1;bb(10,b);G[29370]=J[29370]-1;bb(10,b)}Ha=c+192|0}function us(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=O(0),l=0,m=0,n=0,o=0,p=0,q=0;e=Ha-272|0;Ha=e;Zc(a,b,c,d);a:{if(c<=O(0)){break a}k=O(L[a+40>>2]-L[a+44>>2]);if(k<=c){break a}m=H[a+540>>2];H[e+268>>2]=0;H[e+260>>2]=0;H[e+264>>2]=0;H[e+256>>2]=0;H[e+248>>2]=0;H[e+252>>2]=0;H[e+244>>2]=0;H[e+236>>2]=0;H[e+240>>2]=0;H[e+232>>2]=0;H[e+224>>2]=0;H[e+228>>2]=0;i=a+176|0;n=b+112|0;j=a- -64|0;o=e+116|0;g=e- -64|0;p=e+4|0;q=e+112|0;b:{while(1){c:{f=l<<16>>16;if((f|0)>=(m|0)){c=Tf(H[H[(H[a+12>>2]<<2)+53472>>2]+28>>2],O(c/k));switch(H[a+8>>2]-3|0){case 0:case 2:break c;default:break b}}h=0;h=(f|0)<0|(f|0)>=H[a+540>>2]?h:H[H[a+528>>2]+(f<<2)>>2];F[e|0]=1;zb(p,0,48);H[e+60>>2]=1065353216;H[e+52>>2]=1065353216;H[e+56>>2]=0;H[g+16>>2]=0;H[g+20>>2]=0;H[g+8>>2]=0;H[g+12>>2]=0;H[g>>2]=0;H[g+4>>2]=0;H[e+88>>2]=1065353216;F[e+105|0]=0;F[e+106|0]=0;F[e+107|0]=0;F[e+108|0]=0;F[e+109|0]=0;F[e+110|0]=0;F[e+111|0]=0;F[e+112|0]=0;H[e+100>>2]=0;H[e+104>>2]=0;H[e+92>>2]=0;H[e+96>>2]=0;zb(o,0,48);H[e+172>>2]=1065353216;H[e+164>>2]=1065353216;H[e+168>>2]=0;H[e+192>>2]=0;H[e+196>>2]=0;H[e+184>>2]=0;H[e+188>>2]=0;H[e+176>>2]=0;H[e+180>>2]=0;H[e+200>>2]=1065353216;H[e+220>>2]=0;H[e+212>>2]=0;H[e+216>>2]=0;H[e+204>>2]=0;H[e+208>>2]=0;La[H[H[h>>2]+60>>2]](h,e,c,d);d:{e:{f=H[a+8>>2];switch(f-3|0){case 0:case 2:break e;default:break d}}ak(e+260|0,e+248|0,b,h+508|0,e,j);f=H[a+8>>2]}if((f&-2)==4){ak(e+236|0,e+224|0,n,h+510|0,q,i)}l=l+1|0;continue}break}if(!(L[e+260>>2]!=O(0)|L[e+264>>2]!=O(0)|L[e+268>>2]!=O(0))){d=b+4|0;if(!(L[e+248>>2]!=O(0)|L[e+252>>2]!=O(0)|L[e+256>>2]!=O(0))){Ya(d,j);break b}Ya(d,e+248|0);break b}d=b+4|0;Ya(d,j);lb(d,e+260|0)}f:{if((H[a+8>>2]&-2)!=4){break f}if(!(L[e+236>>2]!=O(0)|L[e+240>>2]!=O(0)|L[e+244>>2]!=O(0))){d=b+116|0;if(!(L[e+224>>2]!=O(0)|L[e+228>>2]!=O(0)|L[e+232>>2]!=O(0))){Ya(d,i);break f}Ya(d,e+224|0);break f}d=b+116|0;Ya(d,i);lb(d,e+236|0)}Ya(e,a+544|0);wb(e,c);lb(b+4|0,e);lb(b+116|0,e)}Ha=e+272|0}function zi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;if(!a){return ib(b)|0}if(b>>>0>=4294967232){H[12604]=48;return 0}g=b>>>0<11?16:b+11&-8;i=a-8|0;j=H[i+4>>2];e=j&-8;a:{if(!(j&3)){if(g>>>0<256){break a}if(e>>>0>=g+4>>>0){c=i;if(e-g>>>0<=H[12725]<<1>>>0){break a}}c=0;break a}h=e+i|0;b:{if(e>>>0>=g>>>0){d=e-g|0;if(d>>>0<16){break b}H[i+4>>2]=j&1|g|2;c=g+i|0;H[c+4>>2]=d|3;H[h+4>>2]=H[h+4>>2]|1;og(c,d);break b}if(H[12611]==(h|0)){e=e+H[12608]|0;if(e>>>0<=g>>>0){break a}H[i+4>>2]=j&1|g|2;d=g+i|0;c=e-g|0;H[d+4>>2]=c|1;H[12608]=c;H[12611]=d;break b}if(H[12610]==(h|0)){e=e+H[12607]|0;if(e>>>0<g>>>0){break a}c=e-g|0;c:{if(c>>>0>=16){H[i+4>>2]=j&1|g|2;d=g+i|0;H[d+4>>2]=c|1;e=e+i|0;H[e>>2]=c;H[e+4>>2]=H[e+4>>2]&-2;break c}H[i+4>>2]=e|j&1|2;c=e+i|0;H[c+4>>2]=H[c+4>>2]|1;c=0}H[12610]=d;H[12607]=c;break b}d=H[h+4>>2];if(d&2){break a}k=e+(d&-8)|0;if(k>>>0<g>>>0){break a}m=k-g|0;f=H[h+12>>2];d:{if(d>>>0<=255){c=H[h+8>>2];if((c|0)==(f|0)){n=50420,o=H[12605]&ky(-2,d>>>3|0),H[n>>2]=o;break d}H[c+12>>2]=f;H[f+8>>2]=c;break d}l=H[h+24>>2];e:{if((f|0)!=(h|0)){c=H[h+8>>2];H[c+12>>2]=f;H[f+8>>2]=c;break e}f:{c=H[h+20>>2];if(c){d=h+20|0}else{c=H[h+16>>2];if(!c){break f}d=h+16|0}while(1){e=d;f=c;d=c+20|0;c=H[c+20>>2];if(c){continue}d=f+16|0;c=H[f+16>>2];if(c){continue}break}H[e>>2]=0;break e}f=0}if(!l){break d}d=H[h+28>>2];c=(d<<2)+50724|0;g:{if(H[c>>2]==(h|0)){H[c>>2]=f;if(f){break g}n=50424,o=H[12606]&ky(-2,d),H[n>>2]=o;break d}h:{if(H[l+16>>2]==(h|0)){H[l+16>>2]=f;break h}H[l+20>>2]=f}if(!f){break d}}H[f+24>>2]=l;c=H[h+16>>2];if(c){H[f+16>>2]=c;H[c+24>>2]=f}c=H[h+20>>2];if(!c){break d}H[f+20>>2]=c;H[c+24>>2]=f}if(m>>>0<=15){H[i+4>>2]=j&1|k|2;c=i+k|0;H[c+4>>2]=H[c+4>>2]|1;break b}H[i+4>>2]=j&1|g|2;d=g+i|0;H[d+4>>2]=m|3;c=i+k|0;H[c+4>>2]=H[c+4>>2]|1;og(d,m)}c=i}if(c){return c+8|0}d=ib(b);if(!d){return 0}c=H[a-4>>2];c=(c&3?-4:-8)+(c&-8)|0;jb(d,a,b>>>0>c>>>0?c:b);Va(a);return d|0}function pl(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=Ha-80|0;Ha=d;Mb(b,0,9672,H[a>>2],H[14588]);if(I[a+4|0]==1){gb(b,G[29370]+1|0);Za(Za(Za(b,15129),I[a+4|0]?9360:9508),30283)}c=H[a+8>>2];a:{if(c){ol(b,c,10561);break a}c=a+12|0;if(!zc(c)){break a}e=H[c+12>>2];H[d+72>>2]=H[c+8>>2];H[d+76>>2]=e;e=H[c+4>>2];H[d+64>>2]=H[c>>2];H[d+68>>2]=e;th(b,d- -64|0,10561)}c=H[a+28>>2];b:{if(c){gb(b,G[29370]+1|0);e=Za(Za(b,5429),15222);c:{if((c|0)<0){break c}f=H[14034];if((c|0)>=H[f+8>>2]){break c}g=H[H[f+4>>2]+(c<<2)>>2]}Za(Za(e,g),30283);break b}c=a+32|0;if(!zc(c)){break b}e=H[c+12>>2];H[d+56>>2]=H[c+8>>2];H[d+60>>2]=e;e=H[c+4>>2];H[d+48>>2]=H[c>>2];H[d+52>>2]=e;th(b,d+48|0,5429)}c=0;F[d+46|0]=0;F[d+47|0]=0;F[d+42|0]=98;F[d+43|0]=101;F[d+44|0]=110;F[d+45|0]=100;f=a+12|0;g=a+80|0;i=a+60|0;while(1){if((c|0)==5){c=a+160|0;if(Lc(c)){H[d+16>>2]=H[c+16>>2];e=H[c+12>>2];H[d+8>>2]=H[c+8>>2];H[d+12>>2]=e;e=H[c+4>>2];H[d>>2]=H[c>>2];H[d+4>>2]=e;gb(b,G[29370]+1|0);c=Za(Za(b,12962),15222);if(Lc(d)){H[(c+H[H[c>>2]-12>>2]|0)+8>>2]=2;Jc(ub(Jc(ub(Jc(ub(Jc(ub(Jc(c,L[d>>2]),32),L[d+4>>2]),32),L[d+8>>2]),32),L[d+12>>2]),32),L[d+16>>2])}Za(c,30283)}Mb(b,0,8574,H[a+48>>2],H[14590]);Vf(b,5308,G[a+52>>1]);Vf(b,5166,G[a+54>>1]);sh(b,6200,H[a+180>>2],H[a+184>>2]);rh(b,10528,H[a+204>>2]);sh(b,6193,H[a+188>>2],H[a+192>>2]);rh(b,10521,H[a+208>>2]);sh(b,7890,H[a+196>>2],H[a+200>>2]);rh(b,4987,H[a+212>>2]);Mb(b,0,5323,H[a+56>>2],H[14591]);if(I[a+216|0]==1){gb(b,G[29370]+1|0);Za(Za(Za(b,15209),I[a+216|0]?9360:9508),30283)}Ha=d+80|0}else{F[d+46|0]=c+49;e=H[(c<<2)+i>>2];d:{if(e){if((e|0)==H[a+8>>2]){break d}ol(b,e,d+42|0);break d}if(!c){break d}e=g+(c<<4)|0;if(!zc(e)){break d}if(!Jf(e,f)){break d}h=H[e+12>>2];H[d+32>>2]=H[e+8>>2];H[d+36>>2]=h;h=H[e+4>>2];H[d+24>>2]=H[e>>2];H[d+28>>2]=h;th(b,d+24|0,d+42|0)}c=c+1|0;continue}break}}function mu(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;g=Ha-48|0;Ha=g;j=wh(H[b+4>>2]);e=H[a+4>>2];a:{b:{if(!e){H[a>>2]=0;break b}c=fb(e,j);H[a>>2]=c;if(c){break a}c=0;if(!j|!e){break b}c=fb(e,j);if(c){break b}c=0;if(!H[a+8>>2]){break b}H[g+40>>2]=0;H[g+32>>2]=0;H[g+36>>2]=0;c:{d:{while(1){c=H[a+8>>2];if(H[c+12>>2]<=(h|0)){break d}c=H[H[c>>2]+(h<<2)>>2];d=c;c=Yb(c);e=g+32|0;f=Lp(e);e:{if(c>>>0<=f>>>0){d=Sp(Ee(e),d,c);Kp(e,c);Zd(c+d|0,0);break e}i=f;k=c-f|0;f=wg(H[e+4>>2],I[e+11|0]);zp(e,i,k,f,0,f,c,d)}d=F[g+43|0];c=(d|0)<0;d=c?H[g+36>>2]:d;if(!((d|0)<=0|I[(d+(c?H[g+32>>2]:e)|0)-1|0]==47)){f:{g:{d=I[e+11|0];h:{i:{if(De(d)){d=H[e+4>>2];c=Op(H[e+8>>2])-1|0;if((d|0)==(c|0)){break i}break h}c=10;d=Pp(d);if((d|0)!=10){break g}}d=Ha-16|0;Ha=d;j:{if((c|0)!=2147483639){f=Ee(e);i=d+4|0;if(c>>>0<=1073741810){H[d+12>>2]=c<<1;H[d+4>>2]=c+1;k=pf(H[Np(i,d+12|0)>>2])+1|0}else{k=2147483639}of(i,k);i=H[d+4>>2];if(c){ae(i,f,c)}if((c|0)!=10){Va(f)}Yd(e,i);nf(e,H[d+8>>2]);Ha=d+16|0;break j}Re();B()}_d(e,c);d=c}c=H[e>>2];_d(e,d+1|0);break f}qf(e,d+1|0);c=e}c=c+d|0;Zd(c,47);Zd(c+1|0,0)}e=bd(bd(g+32|0,j),8040);f=F[g+43|0];i=H[e>>2];c=Rl(a);d=1;f=(f|0)<0?i:e;k:{if(!f){break k}f=mf(f,6715);if(!f){break k}d=La[H[H[c>>2]+8>>2]](c,f)|0}f=H[c+16>>2];if(f){Va(f)}La[H[H[c>>2]+4>>2]](c);c=fb(H[a+4>>2],j);if(c){break c}h=h+1|0;if((d|0)==1){continue}break}c=0;e=F[g+43|0]<0?H[e>>2]:e;db();h=25176;d=d-1|0;if(d>>>0<=2){h=H[(d<<2)+34120>>2]}H[g>>2]=e;Wa(h,g);F[52604]=1;break c}db();H[g+16>>2]=j;Wa(21663,g+16|0);c=0;F[52604]=1;h=0;while(1){if(H[H[a+8>>2]+12>>2]<=(h|0)){break c}Db(18821);e=H[a+8>>2];if(H[e+12>>2]>(h|0)){d=H[H[e>>2]+(h<<2)>>2]}else{d=0}Db(d);h=h+1|0;Lb();continue}}$c(g+32|0)}H[a>>2]=c}Vl(c);Ml(b,H[a>>2]);Va(j);Dl(H[a+12>>2],H[a>>2]);Ha=g+48|0}function pq(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;i=-1;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{h:{i:{g=I[b|0];j:{if(!g){e=I[b+1|0];f=I[(e+a|0)+72|0];break j}e=F[b+1|0];f=cb(g<<24>>24,e)}f=f&255;switch(f-5|0){case 2:break f;case 1:break g;case 0:break h;default:break i}}k:{switch(f-22|0){case 1:break c;case 0:case 2:break e;default:break k}}if((f|0)!=29){break c}if(H[(e>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>e&1){break e}break c}if((c-b|0)>=2){break c}break d}if((c-b|0)>=3){break c}break d}if((c-b|0)>=4){break c}break d}f=a+72|0;a=b;l:{m:{n:{o:{p:{q:{while(1){e=a;a=a+2|0;if((c|0)==(a|0)){break a}g=I[e+3|0];r:{s:{j=I[e+2|0];if(j){k=cb(j<<24>>24,g<<24>>24)}else{k=I[g+f|0]}switch((k&255)-5|0){case 10:break n;case 4:case 5:case 16:break o;case 2:break p;case 1:break q;case 17:case 19:case 20:case 21:case 22:continue;case 0:break r;case 24:break s;default:break l}}if(H[(g>>>3&28|I[j+36688|0]<<5)+34784>>2]>>>g&1){continue}break l}break}if((c-a|0)<2){break d}break l}if((c-a|0)<3){break d}break l}if((c-a|0)<4){break d}break l}if(!mq(b,a,h+12|0)){break l}b=e+4|0;while(1){a=b;if((a|0)==(c|0)){break a}b=I[a+1|0];t:{u:{v:{w:{x:{y:{e=F[a|0];if(e){b=cb(e,b<<24>>24)}else{b=I[b+f|0]}switch(b&255){case 15:break t;case 0:case 1:case 8:break u;case 7:break v;case 6:break w;case 5:break y;default:break x}}if((c-a|0)<2){break d}}b=a+2|0;continue}if((c-a|0)<3){break d}b=a+3|0;continue}if((c-a|0)<4){break d}b=a+4|0;continue}H[d>>2]=a;break b}b=a+2|0;if((b|0)==(c|0)){break a}if(I[b|0]|I[a+3|0]!=62){continue}break}H[d>>2]=a+4;break m}if(!mq(b,a,h+12|0)){break l}a=e+4|0;if((c|0)==(a|0)){break a}if(I[e+4|0]|I[e+5|0]!=62){break l}H[d>>2]=e+6}i=H[h+12>>2];break a}H[d>>2]=a;break b}i=-2;break a}H[d>>2]=b}i=0}Ha=h+16|0;return i}function uq(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;i=-1;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{h:{i:{g=I[b+1|0];j:{if(!g){e=I[b|0];f=I[(e+a|0)+72|0];break j}e=F[b|0];f=cb(g<<24>>24,e)}f=f&255;switch(f-5|0){case 2:break f;case 1:break g;case 0:break h;default:break i}}k:{switch(f-22|0){case 1:break c;case 0:case 2:break e;default:break k}}if((f|0)!=29){break c}if(H[(e>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>e&1){break e}break c}if((c-b|0)>=2){break c}break d}if((c-b|0)>=3){break c}break d}if((c-b|0)>=4){break c}break d}f=a+72|0;a=b;l:{m:{n:{o:{p:{q:{while(1){e=a;a=a+2|0;if((c|0)==(a|0)){break a}g=I[e+2|0];r:{s:{j=I[e+3|0];if(j){k=cb(j<<24>>24,g<<24>>24)}else{k=I[g+f|0]}switch((k&255)-5|0){case 10:break n;case 4:case 5:case 16:break o;case 2:break p;case 1:break q;case 17:case 19:case 20:case 21:case 22:continue;case 0:break r;case 24:break s;default:break l}}if(H[(g>>>3&28|I[j+36688|0]<<5)+34784>>2]>>>g&1){continue}break l}break}if((c-a|0)<2){break d}break l}if((c-a|0)<3){break d}break l}if((c-a|0)<4){break d}break l}if(!sq(b,a,h+12|0)){break l}b=e+4|0;while(1){a=b;if((a|0)==(c|0)){break a}b=I[a|0];t:{u:{v:{w:{x:{y:{e=F[a+1|0];if(e){b=cb(e,b<<24>>24)}else{b=I[b+f|0]}switch(b&255){case 15:break t;case 0:case 1:case 8:break u;case 7:break v;case 6:break w;case 5:break y;default:break x}}if((c-a|0)<2){break d}}b=a+2|0;continue}if((c-a|0)<3){break d}b=a+3|0;continue}if((c-a|0)<4){break d}b=a+4|0;continue}H[d>>2]=a;break b}b=a+2|0;if((b|0)==(c|0)){break a}if(I[a+3|0]|I[b|0]!=62){continue}break}H[d>>2]=a+4;break m}if(!sq(b,a,h+12|0)){break l}a=e+4|0;if((c|0)==(a|0)){break a}if(I[e+5|0]|I[e+4|0]!=62){break l}H[d>>2]=e+6}i=H[h+12>>2];break a}H[d>>2]=a;break b}i=-2;break a}H[d>>2]=b}i=0}Ha=h+16|0;return i}function Dq(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;g=Ha-16|0;Ha=g;h=-1;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{h:{i:{j:{i=a+72|0;e=I[i+I[b|0]|0];switch(e-5|0){case 2:break g;case 1:break h;case 0:break i;default:break j}}k:{switch(e-22|0){case 1:break c;case 0:case 2:break f;default:break k}}break c}if((c-b|0)<2){break d}if(!(La[H[a+340>>2]](a,b)|0)){break c}e=b+2|0;break e}if((c-b|0)<3){break d}if(!(La[H[a+344>>2]](a,b)|0)){break c}e=b+3|0;break e}if((c-b|0)<4){break d}if(!(La[H[a+348>>2]](a,b)|0)){break c}e=b+4|0;break e}e=b+1|0}while(1){if((c|0)==(e|0)){break a}f=1;j=e;l:{m:{n:{o:{p:{q:{switch(I[I[e|0]+i|0]-5|0){case 0:if((c-e|0)<2){break d}if(!(La[H[a+328>>2]](a,e)|0)){break p}f=2;break l;case 1:if((c-e|0)<3){break d}if(!(La[H[a+332>>2]](a,e)|0)){break p}f=3;break l;case 2:if((c-e|0)<4){break d}if(!(La[H[a+336>>2]](a,e)|0)){break p}f=4;break l;case 4:case 5:case 16:if(!Aq(b,e,g+12|0)){break p}f=e+1|0;while(1){b=f;if((b|0)==(c|0)){break a}r:{switch(I[I[b|0]+i|0]){case 5:if((c-b|0)<2){break d}if(La[H[a+352>>2]](a,b)|0){break m}f=b+2|0;continue;case 6:if((c-b|0)<3){break d}if(La[H[a+356>>2]](a,b)|0){break m}f=b+3|0;continue;case 7:if((c-b|0)<4){break d}if(La[H[a+360>>2]](a,b)|0){break m}f=b+4|0;continue;case 15:f=b+1|0;if((f|0)==(c|0)){break a}if(I[f|0]!=62){continue}H[d>>2]=b+2;h=H[g+12>>2];break a;case 0:case 1:case 8:break m;default:break r}}f=b+1|0;continue};case 17:case 19:case 20:case 21:case 22:break l;case 24:break p;case 10:break q;default:break n}}if(Aq(b,e,g+12|0)){break o}}H[d>>2]=e;break b}j=e+1|0;if((j|0)==(c|0)){break a}if(I[e+1|0]!=62){break n}H[d>>2]=e+2;h=H[g+12>>2];break a}H[d>>2]=j;break b}H[d>>2]=b;break b}e=e+f|0;continue}}h=-2;break a}H[d>>2]=b}h=0}Ha=g+16|0;return h}function zg(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{g=I[b|0];h:{if(!g){e=I[b+1|0];f=I[(e+a|0)+72|0];break h}e=F[b+1|0];f=cb(g<<24>>24,e)}f=f&255;switch(f-5|0){case 0:break d;case 1:break e;case 2:break f;default:break g}}i:{switch(f-19|0){default:if(!(H[(e>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>e&1)|(f|0)!=29){break b}case 3:case 5:h=a+72|0;j:{k:{l:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+3|0];m:{n:{g=I[a+2|0];if(g){f=cb(g<<24>>24,e<<24>>24)}else{f=I[e+h|0]}switch((f&255)-5|0){case 13:break j;case 2:break k;case 1:break l;case 17:case 19:case 20:case 21:case 22:continue;case 0:break m;case 24:break n;default:break b}}if(H[(e>>>3&28|I[g+36688|0]<<5)+34784>>2]>>>e&1){continue}break b}break}if((c-b|0)<2){break c}break b}if((c-b|0)<3){break c}break b}if((c-b|0)<4){break c}break b}b=a+4|0;i=9;break b;case 0:break i;case 1:case 2:case 4:break b}}e=b+2|0;if((e|0)==(c|0)){break a}f=I[b+3|0];g=f<<24>>24;h=F[b+2|0];o:{if(!h){if((g|0)==120){e=b+4|0;if((e|0)==(c|0)){break a}g=F[e|0];if(g){b=cb(g,F[b+5|0])}else{b=I[(I[b+5|0]+a|0)+72|0]}if((b&254)!=24){b=e;break b}g=a+72|0;b=e;while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+3|0];f=F[a+2|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;if(e-24>>>0<2){continue}break}if((e|0)!=18){break b}b=a+4|0;i=10;break b}b=I[(a+f|0)+72|0];break o}b=cb(h,g)}if((b|0)!=25){b=e;break b}g=a+72|0;b=e;while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+3|0];f=F[a+2|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;if((e|0)==25){continue}break}if((e|0)!=18){break b}b=a+4|0;i=10;break b}if((c-b|0)<4){break c}break b}if((c-b|0)<3){break c}break b}if((c-b|0)>=2){break b}}return-2}H[d>>2]=b;return i}return-1}function rj(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=Ha-1040|0;Ha=e;d=H[a+124>>2];a:{if(!d){c=18;break a}while(1){if((c|0)!=256){H[(e+4|0)+(c<<2)>>2]=-1;c=c+1|0;continue}break}H[e+1036>>2]=0;H[e+1028>>2]=0;H[e+1032>>2]=0;b:{if(!(La[d|0](H[a+244>>2],b,e+4|0)|0)){break b}d=La[H[a+12>>2]](1908)|0;H[a+236>>2]=d;if(!d){c=1;a=H[e+1036>>2];if(!a){break a}La[a|0](H[e+1028>>2]);break a}b=0;o=H[e+1028>>2];k=H[e+1032>>2];c=0;while(1)if((c|0)==364){while(1){if((b|0)==128){i=d+372|0;j=d+884|0;g=d+72|0;c=0;while(1){if((c|0)!=256){f=c<<2;b=H[f+(e+4|0)>>2];c:{if((b|0)==-1){F[c+g|0]=1;G[(c<<1)+i>>1]=65535;G[f+j>>1]=1;break c}if((b|0)<0){if(b>>>0<4294967292){break b}F[c+g|0]=3-b;F[f+j|0]=0;G[(c<<1)+i>>1]=0;break c}if(b>>>0<=127){h=I[b+36136|0];if(!(!h|(h|0)==28)&(b|0)!=(c|0)){break b}F[c+g|0]=h;f=f+j|0;F[f+1|0]=b;F[f|0]=1;G[(c<<1)+i>>1]=b?b:-1;break c}if((He(b)|0)<0){F[c+g|0]=0;G[(c<<1)+i>>1]=65535;G[f+j>>1]=1;break c}if(b>>>0>65535){break b}l=1<<b;m=(b>>>5&7)<<2;n=b>>>8|0;d:{if(l&H[(m|I[n+36432|0]<<5)+34784>>2]){F[c+g|0]=22;break d}h=c+g|0;if(H[(I[n+36688|0]<<5|m)+34784>>2]&l){F[h|0]=26;break d}F[h|0]=28}f=f+j|0;p=f,q=Je(b,f+1|0),F[p|0]=q;G[(c<<1)+i>>1]=b}c=c+1|0;continue}break}H[d+364>>2]=k;H[d+368>>2]=o;if(k){H[d+360>>2]=37;H[d+356>>2]=37;H[d+352>>2]=37;H[d+348>>2]=38;H[d+344>>2]=38;H[d+340>>2]=38;H[d+336>>2]=39;H[d+332>>2]=39;H[d+328>>2]=39}H[d+60>>2]=40;H[d+56>>2]=41;H[a+240>>2]=H[e+1028>>2];b=H[e+1036>>2];H[a+144>>2]=d;H[a+248>>2]=b;c=0;break a}c=I[b+36136|0];if(!(!c|(c|0)==28)&H[(e+4|0)+(b<<2)>>2]!=(b|0)){break b}b=b+1|0;continue}}else{F[c+d|0]=I[c+36064|0];c=c+1|0;continue}}c=18;a=H[e+1036>>2];if(!a){break a}La[a|0](H[e+1028>>2])}Ha=e+1040|0;return c}function Ag(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{g=I[b+1|0];h:{if(!g){e=I[b|0];f=I[(e+a|0)+72|0];break h}e=F[b|0];f=cb(g<<24>>24,e)}f=f&255;switch(f-5|0){case 0:break d;case 1:break e;case 2:break f;default:break g}}i:{switch(f-19|0){default:if(!(H[(e>>>3&28|I[g+36432|0]<<5)+34784>>2]>>>e&1)|(f|0)!=29){break b}case 3:case 5:h=a+72|0;j:{k:{l:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+2|0];m:{n:{g=I[a+3|0];if(g){f=cb(g<<24>>24,e<<24>>24)}else{f=I[e+h|0]}switch((f&255)-5|0){case 13:break j;case 2:break k;case 1:break l;case 17:case 19:case 20:case 21:case 22:continue;case 0:break m;case 24:break n;default:break b}}if(H[(e>>>3&28|I[g+36688|0]<<5)+34784>>2]>>>e&1){continue}break b}break}if((c-b|0)<2){break c}break b}if((c-b|0)<3){break c}break b}if((c-b|0)<4){break c}break b}b=a+4|0;i=9;break b;case 0:break i;case 1:case 2:case 4:break b}}e=b+2|0;if((e|0)==(c|0)){break a}f=I[b+2|0];g=f<<24>>24;h=F[b+3|0];o:{if(!h){if((g|0)==120){e=b+4|0;if((e|0)==(c|0)){break a}b=F[b+5|0];if(b){b=cb(b,F[e|0])}else{b=I[(I[e|0]+a|0)+72|0]}if((b&254)!=24){b=e;break b}g=a+72|0;b=e;while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+2|0];f=F[a+3|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;if(e-24>>>0<2){continue}break}if((e|0)!=18){break b}b=a+4|0;i=10;break b}b=I[(a+f|0)+72|0];break o}b=cb(h,g)}if((b|0)!=25){b=e;break b}g=a+72|0;b=e;while(1){a=b;b=b+2|0;if((c|0)==(b|0)){break a}e=I[a+2|0];f=F[a+3|0];if(f){e=cb(f,e<<24>>24)}else{e=I[e+g|0]}e=e&255;if((e|0)==25){continue}break}if((e|0)!=18){break b}b=a+4|0;i=10;break b}if((c-b|0)<4){break c}break b}if((c-b|0)<3){break c}break b}if((c-b|0)>=2){break b}}return-2}H[d>>2]=b;return i}return-1}function ox(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;l=a+72|0;a=1;while(1){f=a;g=b;b=I[g+2|0];m=b<<24>>24;k=F[g+3|0];if(k){n=cb(k,m)}else{n=I[b+l|0]}j=g+3|0;h=g+2|0;b=h;a:{b:{c:{switch((n&255)-3|0){case 2:if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 3:b=j;if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 4:d:{if(f){break d}a=1;if((c|0)<=(e|0)){break d}b=(e<<4)+d|0;F[b+12|0]=1;H[b>>2]=h}b=g+4|0;continue;case 19:case 21:case 26:if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 9:if((f|0)!=2){i=12;a=2;if((c|0)<=(e|0)){continue}H[((e<<4)+d|0)+4>>2]=g+4;continue}a=2;if((i|0)!=12){continue}if((c|0)>(e|0)){H[((e<<4)+d|0)+8>>2]=h}e=e+1|0;i=12;break a;case 10:if((f|0)!=2){i=13;a=2;if((c|0)<=(e|0)){continue}H[((e<<4)+d|0)+4>>2]=g+4;continue}a=2;if((i|0)!=13){continue}if((c|0)>(e|0)){H[((e<<4)+d|0)+8>>2]=h}e=e+1|0;i=13;break a;case 0:if((c|0)<=(e|0)){continue}F[((e<<4)+d|0)+12|0]=0;break b;case 18:a=0;e:{switch(f-1|0){case 0:continue;case 1:break e;default:break b}}a=2;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;if(!I[f+12|0]){continue}f:{if(H[f+4>>2]==(h|0)|(m|0)!=32|k){break f}j=I[g+4|0];b=j<<24>>24;g=F[g+5|0];g:{if(!g){if((b|0)==32){break f}g=I[j+l|0];break g}g=cb(g,b)}b=h;if((g|0)!=(i|0)){continue}}F[f+12|0]=0;b=h;continue;case 6:case 7:a=0;h:{switch(f-1|0){case 0:continue;case 1:break h;default:break b}}a=2;if((c|0)<=(e|0)){continue}F[((e<<4)+d|0)+12|0]=0;continue;case 8:case 14:break c;default:continue}}a=2;if((f|0)==2){continue}return e|0}a=f;continue}a=0;continue}}function _w(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;l=a+72|0;a=1;while(1){f=a;g=b;b=I[g+3|0];m=b<<24>>24;k=F[g+2|0];if(k){n=cb(k,m)}else{n=I[b+l|0]}j=g+3|0;h=g+2|0;b=h;a:{b:{c:{switch((n&255)-3|0){case 2:if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 3:b=j;if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 4:d:{if(f){break d}a=1;if((c|0)<=(e|0)){break d}b=(e<<4)+d|0;F[b+12|0]=1;H[b>>2]=h}b=g+4|0;continue;case 19:case 21:case 26:if(f){continue}a=1;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;F[f+12|0]=1;H[f>>2]=h;continue;case 9:if((f|0)!=2){i=12;a=2;if((c|0)<=(e|0)){continue}H[((e<<4)+d|0)+4>>2]=g+4;continue}a=2;if((i|0)!=12){continue}if((c|0)>(e|0)){H[((e<<4)+d|0)+8>>2]=h}e=e+1|0;i=12;break a;case 10:if((f|0)!=2){i=13;a=2;if((c|0)<=(e|0)){continue}H[((e<<4)+d|0)+4>>2]=g+4;continue}a=2;if((i|0)!=13){continue}if((c|0)>(e|0)){H[((e<<4)+d|0)+8>>2]=h}e=e+1|0;i=13;break a;case 0:if((c|0)<=(e|0)){continue}F[((e<<4)+d|0)+12|0]=0;break b;case 18:a=0;e:{switch(f-1|0){case 0:continue;case 1:break e;default:break b}}a=2;if((c|0)<=(e|0)){continue}f=(e<<4)+d|0;if(!I[f+12|0]){continue}f:{if(H[f+4>>2]==(h|0)|(m|0)!=32|k){break f}j=I[g+5|0];b=j<<24>>24;g=F[g+4|0];g:{if(!g){if((b|0)==32){break f}g=I[j+l|0];break g}g=cb(g,b)}b=h;if((g|0)!=(i|0)){continue}}F[f+12|0]=0;b=h;continue;case 6:case 7:a=0;h:{switch(f-1|0){case 0:continue;case 1:break h;default:break b}}a=2;if((c|0)<=(e|0)){continue}F[((e<<4)+d|0)+12|0]=0;continue;case 8:case 14:break c;default:continue}}a=2;if((f|0)==2){continue}return e|0}a=f;continue}a=0;continue}}function Jl(a,b,c){var d=0,e=0,f=0,g=0;d=Ha-144|0;Ha=d;a:{b:{c:{d:{e:{f:{switch(b-9|0){case 2:b=H[c+4>>2];if(!fb(b,9832)){if(!fb(b,4430)){H[d+48>>2]=H[c>>2];Wa(27847,d+48|0);break a}db();H[d+64>>2]=H[c>>2];Wa(27519,d- -64|0)}b=Bl(c);c=H[b+24>>2];H[a+8>>2]=b;G[a+4>>1]=c;H[a>>2]=11;break a;case 0:b=fb(H[c+4>>2],9614);if(!b){db();H[d+96>>2]=H[c>>2];Wa(22383,d+96|0);break c}g:{f=Bp(b);if(f){h:{switch(H[f+12>>2]){case 0:db();H[d+132>>2]=H[c>>2];H[d+128>>2]=b;Wa(22424,d+128|0);Xd(f);nb(f);Va(f);break c;case 1:b=Al(H[H[f>>2]>>2]);if(b){break g}break e;default:break h}}b=0;e=Lf(Xa(28));i:{while(1){j:{if(H[f+12>>2]<=(b|0)){g=H[e+24>>2];switch(H[g+12>>2]){case 1:break i;case 0:break j;default:break d}}g=Al(H[H[f>>2]+(b<<2)>>2]);if(g){g=La[H[H[g>>2]+8>>2]](g)|0;Pb(H[e+24>>2],g)}b=b+1|0;continue}break}La[H[H[e>>2]+4>>2]](e);break e}b=H[H[g>>2]>>2];H[g+12>>2]=0;La[H[H[e>>2]+4>>2]](e);e=b;break d}db();H[d+116>>2]=H[c>>2];H[d+112>>2]=b;Wa(22424,d+112|0);break c}e=La[H[H[b>>2]+8>>2]](b)|0;break d;default:break f}}f=H[H[14658]+(b<<2)>>2];if(!f){vh(a);db();H[d>>2]=H[c>>2];Wa(27808,d);break a}k:{g=H[c+4>>2];e=fb(g,4430);if(e){break k}e=fb(g,7526);if(e){break k}db();H[d+16>>2]=H[c>>2];Wa(25101,d+16|0);vh(a);break a}f=fb(H[f>>2],e);if((f&65535)==65535){db();H[d+32>>2]=e;Wa(27197,d+32|0);b=0}G[a+4>>1]=f;H[a>>2]=b;ic(H[c+4>>2],a+12|0,7603);ic(H[c+4>>2],a+16|0,10913);ic(H[c+4>>2],a+20|0,10033);ic(H[c+4>>2],a+24|0,4274);break a}e=0}Xd(f);nb(f);Va(f);if(e){break b}}vh(a);db();H[d+80>>2]=H[c>>2];Wa(22345,d+80|0);break a}La[H[H[e>>2]+52>>2]](e,c);H[a+8>>2]=e;G[a+4>>1]=65535;H[a>>2]=9;ic(H[c+4>>2],a+24|0,4274)}Ha=d+144|0}function It(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=O(0);c=Ha-144|0;Ha=c;a:{if(!b){break a}if(H[a+8>>2]){_a(b,G[29370]);$a(17631,b);H[c+128>>2]=H[a+8>>2];eb(b,20430,c+128|0)}if(H[a+12>>2]){_a(b,G[29370]);$a(17646,b);H[c+112>>2]=H[a+12>>2];eb(b,20430,c+112|0)}if(I[a+16|0]==1){_a(b,G[29370]);H[c+96>>2]=I[a+16|0]?84:70;eb(b,20723,c+96|0)}Sb(b);d=H[a+4>>2];if(d){h=H[d+12>>2]}else{h=-1}H[c+80>>2]=h;eb(b,20389,c+80|0);b:{e=H[a+4>>2];if(!e){break b}c:while(1){if(H[e+12>>2]<=(i|0)){break b}h=H[H[e>>2]+(i<<2)>>2];e=0;while(1){if(H[h+12>>2]<=(e|0)){i=i+1|0;e=H[a+4>>2];continue c}Sb(b);$a(e?18821:16729,b);d:{e:{f:{g:{h:{if(H[h+12>>2]<=(e|0)){Sb(b);j=O(1);g=65535;break h}d=H[h>>2]+N(e,28)|0;j=L[d+24>>2];f=H[d+8>>2];g=G[d+4>>1];d=H[d>>2];Sb(b);i:{switch(d-9|0){case 1:break e;case 0:break f;case 2:break g;default:break i}}if(d){break e}}H[c+32>>2]=i;H[c+36>>2]=g<<16>>16;eb(b,14857,c+32|0);break d}f=0;j:{if((g|0)<0){break j}d=H[H[14657]+4>>2];if(H[d+12>>2]<=(g|0)){break j}f=H[H[d>>2]+(g<<2)>>2]}H[c+52>>2]=f;H[c+48>>2]=i;eb(b,14733,c+48|0);break d}H[c+68>>2]=f;H[c+64>>2]=i;eb(b,14712,c- -64|0);if(!f){break d}La[H[H[f>>2]+40>>2]](f,b);bb(10,b);break d}d=H[H[14658]+(d<<2)>>2];k:{if(!d){f=14828;break k}f=0;if((g|0)<0){break k}d=H[d+4>>2];if(H[d+12>>2]<=(g|0)){break k}f=H[H[d>>2]+(g<<2)>>2]}H[c+20>>2]=f;H[c+16>>2]=i;eb(b,5941,c+16|0)}if((H[h+12>>2]-1|0)==(e|0)){$a(14947,b)}M[c>>3]=j;pb(b,8838,c);bb(10,b);e=e+1|0;continue}}}d=H[a+20>>2];Sb(b);if(d){wj(21740,12,1,b);G[29370]=J[29370]+1;Sb(b);a=H[a+20>>2];La[H[H[a>>2]+44>>2]](a,b,G[29370]);G[29370]=J[29370]-1;bb(10,b);break a}Wa(20919,0)}Ha=c+144|0}function Qx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=a+72|0;a=1;while(1){e=a;g=b;b=g+1|0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{j=I[g+1|0];switch(I[j+i|0]-3|0){case 4:break i;case 3:break j;case 2:break k;case 8:case 14:break b;case 6:case 7:break c;case 18:break d;case 0:break e;case 10:break f;case 9:break g;case 19:case 21:case 26:break h;default:continue}}l:{if(e){break l}a=1;if((c|0)<=(f|0)){break l}e=(f<<4)+d|0;F[e+12|0]=1;H[e>>2]=b}b=g+2|0;continue}m:{if(e){break m}a=1;if((c|0)<=(f|0)){break m}e=(f<<4)+d|0;F[e+12|0]=1;H[e>>2]=b}b=g+3|0;continue}n:{if(e){break n}a=1;if((c|0)<=(f|0)){break n}e=(f<<4)+d|0;F[e+12|0]=1;H[e>>2]=b}b=g+4|0;continue}if(e){continue}a=1;if((c|0)<=(f|0)){continue}e=(f<<4)+d|0;F[e+12|0]=1;H[e>>2]=b;continue}if((e|0)!=2){h=12;a=2;if((c|0)<=(f|0)){continue}H[((f<<4)+d|0)+4>>2]=g+2;continue}a=2;if((h|0)!=12){continue}if((c|0)>(f|0)){H[((f<<4)+d|0)+8>>2]=b}f=f+1|0;h=12;a=0;continue}if((e|0)!=2){h=13;a=2;if((c|0)<=(f|0)){continue}H[((f<<4)+d|0)+4>>2]=g+2;continue}a=2;if((h|0)!=13){continue}if((c|0)>(f|0)){H[((f<<4)+d|0)+8>>2]=b}f=f+1|0;h=13;a=0;continue}if((c|0)<=(f|0)){continue}F[((f<<4)+d|0)+12|0]=0;break a}a=0;o:{switch(e-1|0){case 0:continue;case 1:break o;default:break a}}a=2;if((c|0)<=(f|0)){continue}e=(f<<4)+d|0;if(!I[e+12|0]){continue}p:{if(H[e+4>>2]==(b|0)|(j|0)!=32){break p}g=I[g+2|0];if((g|0)==32){break p}if(I[g+i|0]!=(h|0)){continue}}F[e+12|0]=0;continue}a=0;q:{switch(e-1|0){case 0:continue;case 1:break q;default:break a}}a=2;if((c|0)<=(f|0)){continue}F[((f<<4)+d|0)+12|0]=0;continue}a=2;if((e|0)==2){continue}return f|0}a=e;continue}}function yk(a,b,c,d,e){var f=0,g=0,h=O(0),i=O(0),j=O(0),k=0,l=0,m=O(0),n=O(0),o=O(0),p=0;f=Ha-48|0;Ha=f;g=H[a+540>>2];h=L[a+528>>2];i=L[a+532>>2];j=L[a+536>>2];m=L[a+544>>2];L[f>>2]=m;n=L[a+548>>2];L[f+4>>2]=n;o=L[a+552>>2];L[f+8>>2]=o;e=J[(e?53520:53522)>>1];L[f+44>>2]=j;L[f+40>>2]=i;L[f+36>>2]=h;zf(c,f+36|0,g,e,0);a:{if(!oc(f)){break a}H[f+32>>2]=0;H[f+24>>2]=0;H[f+28>>2]=0;L[f+16>>2]=i;L[f+20>>2]=j;L[f+12>>2]=h;k=f+24|0;zf(k,f+12|0,g,e,0);Fd(c,k);if(O(P(h))>O(1)|O(P(i))>O(1)|(O(P(j))>O(1)|O(P(m))>O(1))|(O(P(n))>O(1)|O(P(o))>O(1))){break a}e=i==O(0);g=h==O(0);if(((e+g|0)+(j==O(0))|0)!=1|e&g|(((n==O(0))+(m==O(0))|0)+(o==O(0))|0)!=1){break a}b:{if(j!=O(0)){k=e?1:h!=O(0)?-1:0;break b}if(h==O(0)){break a}k=2;if(i==O(0)){break a}}l=n!=O(0);if(!l&m==O(0)){break a}g=m!=O(0);e=0;c:{if(o!=O(0)){p=n==O(0)?1:g?-1:0;break c}p=2;if(!(g&l)){break a}}if((k|0)==(p|0)){break a}while(1){g=e;e=e+1|0;l=g&65535;if((l|0)==(k&65535)|(l|0)==(p&65535)){continue}break}if((l|0)==65535){break a}e=(g<<16>>16<<2)+c|0;L[e>>2]=L[e>>2]*O(.5)}wb(c,L[a+48>>2]);h=L[a+560>>2];i=L[a+564>>2];if(!(h==O(0)&i==O(0))){j=L[a+44>>2];L[a+40>>2]=O(O(L[a+40>>2]-j)*L[(H[a+568>>2]<<2)+53076>>2])+j;e=b+28|0;Ne(e,c,h,i);kf(b,e,c);sc(b);L[b+12>>2]=L[(H[a+568>>2]<<2)+53036>>2];L[b+40>>2]=L[(H[a+568>>2]<<2)+53056>>2];g=f+36|0;Ya(g,e);e=b+16|0;kg(e,c,O(-.5));wb(g,O(_b(e)*Om(O(L[13197]+O(L[b+12>>2]*O(-.5))))));lb(e,g)}e=H[a+572>>2];if(e){h=L[a+44>>2];L[a+40>>2]=O(O(L[a+40>>2]-h)*L[d+8>>2])+h;H[b+44>>2]=e;e=b+48|0;Ne(e,c,L[a+588>>2],L[a+592>>2]);wb(e,O(O(L[(H[a+576>>2]<<2)+53136>>2]*L[13250])*_b(c)));L[b+68>>2]=L[d+12>>2]}Ha=f+48|0}function Vl(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{if(!a){break a}b:{if(!H[a+48>>2]){break b}while(1){if((d|0)==8){break b}c=H[H[a+48>>2]+(d<<2)>>2];c:{if(!c){break c}Ul(L[H[a+44>>2]+40>>2],H[c+20>>2]);b=H[13232];if(!b){break c}g=H[c+20>>2];h=G[b+12>>1];e=0;c=0;while(1){b=c<<16>>16;if((b|0)>=(h|0)){if(e&65535){break c}c=H[13232];if(!c){break c}nb(c);Va(c);H[13232]=0}else{d:{if((b|0)<0){break d}f=H[13232];if((b|0)>=H[f+12>>2]){break d}f=H[H[f>>2]+(b<<2)>>2];if(!f){break d}if(yh(f,g)){La[H[H[f>>2]+4>>2]](f);Xc(H[13232],b,0);break d}e=e+1|0}c=c+1|0;continue}break}}d=d+1|0;continue}}b=0;d=0;c=H[13232];e:{if(!c){break e}d=H[c+12>>2];f:{if(d<<16){f=d<<16>>16;c=0;d=0;while(1){e=d<<16>>16;if((e|0)>=(f|0)){g:{xh();if(c){break g}break f}}else{h:{if((e|0)<0){break h}g=H[13232];if((e|0)>=H[g+12>>2]){break h}g=H[H[g>>2]+(e<<2)>>2];if(!g){break h}if(!c){c=We(Xa(28))}Pb(H[c+24>>2],g);Xc(H[13232],e,0)}d=d+1|0;continue}break}e=H[c+24>>2];if(H[e+12>>2]!=1){d=c;break e}d=H[H[e>>2]>>2];Xc(e,0,0);La[H[H[c>>2]+4>>2]](c);break e}xh()}d=0}i:{if(!H[a+48>>2]){break i}while(1){if((b|0)==8){break i}c=H[H[a+48>>2]+(b<<2)>>2];if(c){Tl(H[c+20>>2])}b=b+1|0;continue}}if(!d){break a}c=H[a+48>>2];if(!c){Sl(a);c=H[a+48>>2]}b=H[c+28>>2];j:{if(!b){b=Xa(28);H[b+20>>2]=0;H[b+24>>2]=0;H[b>>2]=32240;H[b+4>>2]=0;H[b+8>>2]=0;F[b+9|0]=0;F[b+10|0]=0;F[b+11|0]=0;F[b+12|0]=0;F[b+13|0]=0;F[b+14|0]=0;F[b+15|0]=0;F[b+16|0]=0;H[c+28>>2]=b;break j}if(!H[b+20>>2]){break j}a=We(Xa(28));Pb(H[a+24>>2],H[b+20>>2]);Pb(H[a+24>>2],d);d=a}H[b+20>>2]=d;La[H[H[d>>2]+12>>2]](d,O(0));L[b+24>>2]=L[H[b+20>>2]+16>>2]}}function Bt(a,b){a=a|0;b=b|0;var c=0,d=0;c=Ha-144|0;Ha=c;if(b){H[c+128>>2]=a;eb(b,21641,c+128|0);Pc(a,b);d=a+528|0;if(!Bc(d)){_a(b,G[29370]);$a(17616,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+540>>2]){_a(b,G[29370]);$a(17930,b);H[c+112>>2]=H[a+540>>2];eb(b,20430,c+112|0)}d=a+544|0;if(!Bc(d)){_a(b,G[29370]);$a(17594,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+556>>2]){_a(b,G[29370]);$a(17913,b);H[c+96>>2]=H[a+556>>2];eb(b,20430,c+96|0)}if(!(L[a+560>>2]==O(0)&L[a+564>>2]==O(0))){_a(b,G[29370]);$a(17940,b);G[29370]=J[29370]+1;fe(L[a+560>>2],L[a+564>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+568>>2]){_a(b,G[29370]);$a(17879,b);H[c+80>>2]=H[a+568>>2];eb(b,20430,c+80|0)}if(H[a+572>>2]){_a(b,G[29370]);$a(18421,b);H[c+64>>2]=H[a+572>>2];eb(b,20430,c- -64|0)}if(H[a+576>>2]){_a(b,G[29370]);$a(17862,b);H[c+48>>2]=H[a+576>>2];eb(b,20430,c+48|0)}if(H[a+580>>2]){_a(b,G[29370]);$a(17468,b);H[c+32>>2]=H[a+580>>2];eb(b,20430,c+32|0)}if(H[a+584>>2]){_a(b,G[29370]);$a(17817,b);H[c+16>>2]=H[a+584>>2];eb(b,20430,c+16|0)}if(!(L[a+588>>2]==O(0)&L[a+592>>2]==O(0))){_a(b,G[29370]);$a(17571,b);G[29370]=J[29370]+1;fe(L[a+588>>2],L[a+592>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(J[a+596>>1]){_a(b,G[29370]);$a(18404,b);H[c>>2]=G[a+596>>1];eb(b,20430,c)}_a(b,G[29370]);$a(18670,b);d=J[29370]+1|0;G[29370]=d;_a(b,d<<16>>16);$a(16963,b);G[29370]=J[29370]+1;Hk(a+600|0,b);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);$a(17081,b);G[29370]=J[29370]+1;Hk(a+672|0,b);G[29370]=J[29370]-1;bb(10,b);G[29370]=J[29370]-1;bb(10,b)}Ha=c+144|0}function zs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;e=Ha-320|0;Ha=e;$b(a+60|0,b);s=Le(e+232|0,b);t=_g(e+164|0,c);d=G[a+540>>1];n=(d|0)>0?d:0;o=c+40|0;p=c+36|0;j=c+24|0;k=c+12|0;u=b+44|0;v=a+510|0;w=a+508|0;q=e+136|0;r=e+132|0;l=e+120|0;m=e+108|0;x=e+52|0;while(1){a:{if((i|0)==(n|0)){$b(a+284|0,b);g=0;break a}g=0;g=H[a+540>>2]>(i|0)?H[H[a+528>>2]+(i<<2)>>2]:g;h=_g(e+96|0,t);d=Le(e+8|0,s);La[H[H[g>>2]+24>>2]](g,d,h);Cf(b,d);Cf(u,x);if(I[e+156|0]==1){F[c+60|0]=1}if(I[e+157|0]==1){F[c+61|0]=1}if(I[e+158|0]==1){F[c+62|0]=1}d=H[e+140>>2];if(d){H[c+44>>2]=d}f=H[e+108>>2];d=H[14678];if((f&16777215)!=(d&16777215)){f=H[m+4>>2];H[k>>2]=H[m>>2];H[k+4>>2]=f;H[k+8>>2]=H[m+8>>2];F[c+5|0]=0;F[c+6|0]=0;F[c+4|0]=0;F[c+1|0]=0;F[c+2|0]=0;F[c|0]=0;f=d}if((f&16777215)!=(H[e+120>>2]&16777215)){f=H[l+4>>2];H[j>>2]=H[l>>2];H[j+4>>2]=f;H[j+8>>2]=H[l+8>>2];F[c+5|0]=0;F[c+6|0]=0;F[c+4|0]=0;F[c+1|0]=0;F[c+2|0]=0;F[c|0]=0;f=d}if((f&16777215)!=(H[h>>2]&16777215)){f=H[h+4>>2];H[c>>2]=H[h>>2];H[c+4>>2]=f;H[c+8>>2]=H[h+8>>2];F[c+29|0]=0;F[c+30|0]=0;F[c+28|0]=0;F[c+25|0]=0;F[c+26|0]=0;F[c+24|0]=0;F[c+17|0]=0;F[c+18|0]=0;F[c+16|0]=0;F[c+13|0]=0;F[c+14|0]=0;F[c+12|0]=0}else{d=f}d=d&16777215;if((d|0)!=(H[e+132>>2]&16777215)){G[p>>1]=J[r>>1];F[p+2|0]=I[r+2|0]}if((d|0)!=(H[e+136>>2]&16777215)){G[o>>1]=J[q>>1];F[o+2|0]=I[q+2|0]}Df(w,g+508|0);Df(v,g+510|0);i=i+1|0;continue}break}while(1){if((g|0)!=(n|0)){d=H[H[a+528>>2]+(g<<2)>>2];La[H[H[d>>2]+32>>2]](d,b,c);g=g+1|0;continue}break}Ha=e+320|0}function Ds(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;gb(b,G[29370]);b=Za(ub(b,60),7374);La[H[H[a>>2]+84>>2]](a,b,1);b=Za(b,21503);G[29370]=J[29370]+1;c=J[a+510>>1];f=J[a+508>>1];a=H[a+528>>2];d=I[a+13|0];g=d&64;e=g?c:f;c=g?f:c;a:{b:{c:{f=(d&12)!=12;if(!(f|!(d&1))){d=H[H[a+20>>2]+56>>2];f=H[H[a+24>>2]+56>>2];d:{if(!(!d|!f)){if(!ul(d,f)){break c}g=H[f+220>>2];h=H[d+220>>2];if(!(g|h)){break d}if((!h|0)==((g|0)!=0|0)){break c}if(!ul(h,g)){break c}if(L[d+224>>2]==L[f+224>>2]){break d}break c}if(!d^!f){break c}}if(!(c&64)){break b}Ye(d,b);break b}if(!f){km(a,b,(c&64)>>>6|0,(e&64)>>>6|0);jm(a,b,(c&16)>>>4|0,(c&32)>>>5|0,(e&16)>>>4|0,(e&32)>>>5|0);im(a,b,(c&2)>>>1|0,(e&2)>>>1|0);break a}if(d&2){if(e&64){Ye(H[H[a+24>>2]+56>>2],b)}if(e&48){Xk(H[a+24>>2],b)}if(!(e&2)){break a}Qf(H[a+24>>2],b);break a}if(c&64){Ye(H[H[a+20>>2]+56>>2],b)}if(c&48){Xk(H[a+20>>2],b)}if(!(c&2)){break a}Qf(H[a+20>>2],b);break a}km(a,b,(c&64)>>>6|0,(e&64)>>>6|0)}jm(a,b,(c&16)>>>4|0,(c&32)>>>5|0,(e&16)>>>4|0,(e&32)>>>5|0);d=H[a+40>>2];if(!(!d|!H[d+44>>2])){gb(b,G[29370]);c=Za(ub(b,60),7612);Mb(c,1,5007,H[H[a+40>>2]+44>>2],H[14030]);c=Za(c,21503);G[29370]=J[29370]+1;Qh(H[a+24>>2]+16|0,c);Qh(H[a+20>>2]+16|0,c);d=H[a+20>>2];e=I[d+4|0];a=H[a+24>>2];gb(c,G[29370]);a=a+4|0;d=e-1>>>0<11?a:(e&252)==12?a:d+4|0;a=Za(Za(Za(c,12743),7730),30320);Bm(d,a);gb(a,G[29370]);a=Za(a,21445);c=J[29370]-1|0;G[29370]=c;gb(a,c<<16>>16);Za(Za(Za(a,13001),7612),21503);break a}im(a,b,(c&2)>>>1|0,(e&2)>>>1|0)}a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),7374),21503)}function Ip(a){var b=0,c=0,d=0,e=0,f=0;a:{b=H[a+20>>2];if(!b){break a}c=H[b+12>>2];if((c|0)<=0){break a}a=H[(H[b>>2]+(c<<2)|0)-4>>2];H[b+12>>2]=c-1;return a}c=H[a+16>>2];b=H[c+12>>2];d=H[a+24>>2];if(!(!H[a+4>>2]|(b|0)>(d|0))){Mp(c,d,b);Yp(a);H[a+24>>2]=0;b=H[H[a+16>>2]+12>>2]}c=0;b:{c:{if(!(I[a+38|0]?I[a+37|0]:1)|(b|0)<=0){break c}d=0;while(1){Qp(a);b=H[a+24>>2];e=H[a+16>>2];if((b|0)>=H[e+12>>2]){break b}c=0;c=(b|0)>=0?I[b+H[e>>2]|0]:c;e=b+1|0;H[a+24>>2]=e;b=c&255;if(!((b|0)!=92|d)){d=1;F[a+37|0]=1;continue}d:{e:{switch(b-10|0){case 0:case 3:H[a+12>>2]=H[a+12>>2]+1;if(I[a+35|0]){b=0;break d}if((I[a+37|0]|d)&1){continue}F[a+38|0]=1;break b;default:break e}}if(I[a+35|0]){continue}if(!(!(F[a+32|0]&1)|(b|0)!=35)){b=1;break d}if(!b|(b|0)==9|(b|0)==32){continue}F[a+38|0]=0;F[a+37|0]=I[a+36|0]^1;b=I[a+33|0]&(c&255)==34;F[a+34|0]=b;H[a+28>>2]=e-!b;while(1){Qp(a);f:{c=H[a+24>>2];d=H[a+16>>2];b=H[d+12>>2];g:{if((c|0)>=(b|0)){Wg(d,b);break g}b=0;h:{i:{if((c|0)<0){break i}j:{k:{b=I[c+H[d>>2]|0];switch(b-10|0){case 0:case 3:break k;default:break j}}H[a+12>>2]=H[a+12>>2]+1;b=(b|0)==10|(b|0)==13;break h}if(!(F[a+32|0]&1)|(b|0)!=35){break i}Wg(d,c);F[a+35|0]=1;break g}f=!(b&223)|(b|0)==9;e=I[a+34|0];if(!(f&(e^1)|(e|f)&(b|0)==34)){break f}b=(b|0)==10|(b|0)==13}Wg(d,c);if(!b|!(F[a+36|0]&1)){break g}F[a+38|0]=1}H[a+24>>2]=H[a+24>>2]+1;b=H[a+16>>2];c=H[b+8>>2];d=H[b>>2];b=H[a+28>>2];H[a+28>>2]=-1;c=(b|0)>=0?(b|0)<(c|0)?b+d|0:0:0;break c}H[a+24>>2]=c+1;continue}}F[a+35|0]=b;continue}}return c}return 0}function rc(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=O(0),p=0;g=Ha+-64|0;Ha=g;if(d){H[d+8>>2]=0;H[d>>2]=0;H[d+4>>2]=0}H[e>>2]=0;H[f>>2]=0;if(!b){h=I[c+1|0]|I[c+2|0]<<8;i=I[c|0];h=h&32767|(i?h&28672?0:i-16>>>0<9?12288:4096:0);F[c+1|0]=h;F[c+2|0]=h>>>8}l=a+172|0;j=H[c>>2];h=zd(l,j);H[f>>2]=h;a:{if(h){H[e>>2]=H[h+16>>2];if(!d){break a}Ya(d,Hd(g+32|0,af(H[f>>2])));break a}if(b){break a}p=j>>>24|0;b=0;h=j>>>8|0;k=h>>>7&31;i=k;while(1){if(i&65535){b=(i&1)+b|0;i=(i&65534)>>>1|0;continue}break}b:{if(b<<16>>16<2){break b}H[g+48>>2]=0;H[g+40>>2]=0;H[g+44>>2]=0;H[g+32>>2]=0;H[g+36>>2]=0;i=0;b=h;while(1)if((i|0)==5){if(m<<16>>16<=0){break b}a=H[g+32>>2];H[f>>2]=a;H[e>>2]=H[a+16>>2];if(!d){break a}Ya(d,Hd(g+12|0,af(H[f>>2])));break a}else{c:{if(!(k&1)){break c}F[g+27|0]=p;F[g+24|0]=j;b=b&-3969|1<<i<<7&3968;F[g+25|0]=b;F[g+26|0]=b>>>8;H[g+28>>2]=0;H[g+8>>2]=H[g+24>>2];rc(a,0,g+8|0,0,g+12|0,g+28|0);n=H[g+28>>2];if(!n){break c}H[(g+32|0)+(m<<16>>16<<2)>>2]=n;m=m+1|0}i=i+1|0;k=(k&65534)>>>1|0;continue}}d:{b=h>>>12&7;if((b|0)!=1){a=h&36863|4096;F[c+1|0]=a;F[c+2|0]=a>>>8;h=H[c>>2];a=zd(l,h);H[f>>2]=a;if(a){break d}h=h>>>8|0}if(!(h&112)){break a}a=h&65423;F[c+1|0]=a;F[c+2|0]=a>>>8;a=zd(l,H[c>>2]);H[f>>2]=a;if(!a){break a}H[e>>2]=H[a+16>>2];if(!d){break a}Ya(d,Hd(g+32|0,af(H[f>>2])));break a}H[e>>2]=H[a+16>>2];if(d){Ya(d,Hd(g+32|0,af(H[f>>2])))}o=L[H[14023]+(b<<2)>>2];if(o==O(0)){break a}b=H[H[f>>2]+24>>2];if(!b){break a}a=g+32|0;Ya(a,b);wb(a,o);if(!d){break a}lb(d,a)}Ha=g- -64|0}function ac(a,b){var c=0,d=0,e=0,f=0,g=O(0),h=0,i=0,j=0,k=0,l=0;c=Ha-128|0;Ha=c;H[c+124>>2]=0;H[c+120>>2]=0;H[c+116>>2]=0;i=b&255;j=i|1048576;H[c+76>>2]=j;H[c+112>>2]=0;F[c+77|0]=0;F[c+78|0]=16;H[c+104>>2]=0;H[c+96>>2]=0;H[c+100>>2]=0;H[c+20>>2]=H[c+76>>2];b=c+124|0;rc(a,1,c+20|0,0,b,c+120|0);H[c+72>>2]=j;F[c+73|0]=2;F[c+74|0]=16;H[c+16>>2]=H[c+72>>2];rc(a,1,c+16|0,0,b,c+116|0);H[c+68>>2]=j;F[c+69|0]=1;F[c+70|0]=16;H[c+12>>2]=H[c+68>>2];rc(a,1,c+12|0,0,b,c+112|0);d=H[c+116>>2];a:{if(!d){break a}h=H[c+112>>2];if(!h){break a}H[c+88>>2]=H[h+48>>2];b=H[h+44>>2];H[c+80>>2]=H[h+40>>2];H[c+84>>2]=b;e=d+40|0;b=H[c+120>>2];b:{if(!b){dc(c+96|0,e,h+40|0);b=0;break b}H[c+104>>2]=H[b+48>>2];f=H[b+44>>2];H[c+96>>2]=H[b+40>>2];H[c+100>>2]=f;b=H[b+24>>2]}H[c+64>>2]=0;H[c+56>>2]=0;H[c+60>>2]=0;H[c+52>>2]=0;H[c+44>>2]=0;H[c+48>>2]=0;l=e;e=H[d+24>>2];f=c+56|0;k=c+44|0;Jm(c+96|0,l,b,e,f,k);c:{if(e){g=L[d+20>>2];d=H[c+124>>2];if(b){se(a,i|1049600,d,f,g,k);break c}f=c+32|0;Ya(f,e);se(a,i|1049600,d,c+56|0,g,f);break c}H[c+28>>2]=j;F[c+29|0]=4;F[c+30|0]=16;g=L[d+20>>2];H[c+8>>2]=H[c+28>>2];d=H[c+124>>2];yd(a,c+8|0,d,c+56|0,g)}H[c+64>>2]=0;H[c+56>>2]=0;H[c+60>>2]=0;H[c+52>>2]=0;H[c+44>>2]=0;H[c+48>>2]=0;e=H[h+24>>2];f=c+56|0;k=c+44|0;Jm(c+96|0,c+80|0,b,e,f,k);if(e){g=L[h+20>>2];if(b){se(a,i|1049344,d,f,g,k);break a}b=c+32|0;Ya(b,e);se(a,i|1049344,d,c+56|0,g,b);break a}H[c+24>>2]=j;F[c+25|0]=3;F[c+26|0]=16;g=L[h+20>>2];H[c+4>>2]=H[c+24>>2];yd(a,c+4|0,d,c+56|0,g)}Ha=c+128|0}function Bg(a,b,c,d){var e=0,f=0,g=0,h=0;a:{if((b|0)==(c|0)){break a}b:{c:{d:{e:{f:{g:{h:{i:{j:{f=a+72|0;e=I[f+I[b|0]|0];switch(e-5|0){case 2:break g;case 1:break h;case 0:break i;default:break j}}switch(e-19|0){case 3:case 5:break e;case 0:break f;default:break c}}if((c-b|0)<2){break b}if(!(La[H[a+340>>2]](a,b)|0)){break c}b=b+2|0;break d}if((c-b|0)<3){break b}if(!(La[H[a+344>>2]](a,b)|0)){break c}b=b+3|0;break d}if((c-b|0)<4){break b}if(!(La[H[a+348>>2]](a,b)|0)){break c}b=b+4|0;break d}a=b+1|0;if((a|0)==(c|0)){break a}e=I[a|0];if((e|0)==120){b=b+2|0;if((c|0)==(b|0)){break a}if((I[I[b|0]+f|0]&254)!=24){break c}while(1){a=b;b=b+1|0;if((c|0)==(b|0)){break a}e=I[I[b|0]+f|0];if(e-24>>>0<2){continue}break}if((e|0)!=18){break c}b=a+2|0;g=10;break c}if(I[e+f|0]!=25){b=a;break c}b=a;while(1){a=b;b=b+1|0;if((c|0)==(b|0)){break a}e=I[I[b|0]+f|0];if((e|0)==25){continue}break}if((e|0)!=18){break c}b=a+2|0;g=10;break c}b=b+1|0}while(1){if((b|0)==(c|0)){break a}e=1;k:{l:{m:{h=I[I[b|0]+f|0];switch(h-18|0){case 0:break k;case 4:case 6:case 7:case 8:case 9:break l;case 1:case 2:case 3:case 5:break c;default:break m}}n:{switch(h-5|0){case 0:if((c-b|0)<2){break b}if(!(La[H[a+328>>2]](a,b)|0)){break c}e=2;break l;case 1:if((c-b|0)<3){break b}if(!(La[H[a+332>>2]](a,b)|0)){break c}e=3;break l;case 2:break n;default:break c}}if((c-b|0)<4){break b}if(!(La[H[a+336>>2]](a,b)|0)){break c}e=4}b=b+e|0;continue}break}b=b+1|0;g=9}H[d>>2]=b;return g}return-2}return-1}function Ef(a,b){var c=0,d=O(0);c=Ha-128|0;Ha=c;if(!(!(L[a+4>>2]!=O(0)|L[a+8>>2]!=O(0))&L[a+12>>2]==O(0))){_a(b,G[29370]);$a(18623,b);G[29370]=J[29370]+1;tb(a+4|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+16>>2]!=O(0)|L[a+20>>2]!=O(0))&L[a+24>>2]==O(0))){_a(b,G[29370]);$a(18638,b);G[29370]=J[29370]+1;tb(a+16|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+40>>2]!=O(0)|L[a+44>>2]!=O(0))&L[a+48>>2]==O(0))){_a(b,G[29370]);$a(16813,b);G[29370]=J[29370]+1;ng(a+40|0,b,3);G[29370]=J[29370]-1;bb(10,b)}_a(b,G[29370]);H[c+112>>2]=H[a+56>>2];eb(b,18852,c+112|0);if(!(!(L[a+76>>2]!=O(0)|L[a+80>>2]!=O(0))&L[a+84>>2]==O(0))){_a(b,G[29370]);$a(16799,b);G[29370]=J[29370]+1;ng(a+76|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(H[a+92>>2]){_a(b,G[29370]);$a(18214,b);H[c+96>>2]=H[a+92>>2];eb(b,20430,c+96|0)}if(L[a+96>>2]!=O(0)){_a(b,G[29370]);d=L[a+96>>2];H[c+80>>2]=3;M[c+88>>3]=d;pb(b,19793,c+80|0)}if(L[a+100>>2]!=O(0)){_a(b,G[29370]);d=L[a+100>>2];H[c+64>>2]=3;M[c+72>>3]=d;pb(b,20145,c- -64|0)}if(L[a+104>>2]!=O(0)){_a(b,G[29370]);d=L[a+104>>2];H[c+48>>2]=3;M[c+56>>3]=d;pb(b,20097,c+48|0)}if(J[a+108>>1]){_a(b,G[29370]);$a(15375,b);Qd(b,G[a+108>>1]);bb(10,b)}if(J[a+110>>1]){_a(b,G[29370]);$a(15358,b);Qd(b,G[a+110>>1]);bb(10,b)}_a(b,G[29370]);d=L[a+64>>2];H[c+32>>2]=3;M[c+40>>3]=d;pb(b,19869,c+32|0);_a(b,G[29370]);d=L[a+68>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,19935,c+16|0);_a(b,G[29370]);d=L[a+72>>2];H[c>>2]=3;M[c+8>>3]=d;pb(b,19766,c);Ha=c+128|0}function _n(a,b){var c=0,d=0,e=0,f=O(0),g=O(0),h=O(0),i=0,j=0,k=O(0),l=0,m=0,n=0,o=0,p=0,q=0,r=O(0);d=Ha-48|0;Ha=d;if(H[a+32>>2]!=H[b+56>>2]){ze(H[a+976>>2],H[a+12>>2]);H[a+32>>2]=H[b+56>>2]}H[d+44>>2]=0;H[d+36>>2]=0;H[d+40>>2]=0;c=d+36|0;hg(b,H[a+4>>2],c);H[d+28>>2]=0;H[d+32>>2]=1065353216;H[d+20>>2]=0;H[d+24>>2]=0;e=d+20|0;rb(e,b+40|0);li(H[a+4>>2],a+16|0,I[a+8|0],c,e,b+76|0,L[b+64>>2]);h=L[b+72>>2];g=L[b+60>>2];k=O(O(1)-O(g+g));c=1;a:{while(1){if((c|0)==6){i=H[b+56>>2];if(!i){break a}}else{e=(c-1<<2)+d|0;f=O(h*O(((c<<16>>16)/-3|0)+1<<16>>16>>>0));if(f!=O(0)){f=O(O(g*O(f+O(1)))/O(O(1)-O(f*k)))}else{f=g}L[e>>2]=f;c=c+1|0;continue}break}l=H[a+976>>2];if(l){o=H[a+12>>2];if((i|0)==(l|0)){ze(o,i)}e=0;b:while(1){if((e|0)==5){break a}p=(e<<2)+d|0;c=0;m=N(e,12);q=m+o|0;while(1)if((c|0)==3){e=e+1|0;continue b}else{n=c<<2;j=H[q+n>>2];if(!(!j|H[H[j+4>>2]+24>>2]-1>>>0>4)){La[H[H[j>>2]+80>>2]](j,H[(l+m|0)+n>>2],H[(i+m|0)+n>>2],L[p>>2])}c=c+1|0;continue}}}a=H[14711];if(a){$a(16297,a);$a(12007,H[14711]);Lb()}a=Eb(4);H[a>>2]=2;Z(a|0,34200,0);B()}c:{c=H[b+92>>2];if(!c){break c}e=H[a+12>>2];a=G[(I[a+8|0]?110:108)+b>>1];c=(c|0)!=2;g=O(L[b+96>>2]+O(L[12861]/O(-5)));f=L[b+100>>2];h=L[b+104>>2];k=O(O(f-h)*O(.5));f=O(O(h+f)*O(.5));while(1){if((c|0)==5){break c}if(a>>>c&1){h=ec(g);r=L[12861];b=H[e+N(c,12)>>2];La[H[H[b>>2]+36>>2]](b,O(O(h*k)+f));g=O(g+O(r/O(5)))}c=c+1|0;continue}}Ha=d+48|0}function cf(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=O(0),l=O(0),m=O(0),n=O(0);e=Ha+-64|0;Ha=e;H[e+36>>2]=0;H[e+40>>2]=1065353216;H[e+28>>2]=0;H[e+32>>2]=0;h=e+28|0;La[H[H[b>>2]+8>>2]](b,h);H[e+20>>2]=0;H[e+24>>2]=1065353216;H[e+12>>2]=0;H[e+16>>2]=0;f=e+44|0;b=H[b+4>>2];rb(f,b+80|0);i=e+12|0;Fo(i,h,f);rb(f,b+52|0);tc(i,f);a:{if(c){b=H[b+4>>2];break a}b=J[d>>1];G[d>>1]=b+1}k=L[e+24>>2];l=L[e+20>>2];m=L[e+16>>2];n=L[e+12>>2];i=b<<16>>16;c=H[a+8>>2];d=H[a+4>>2];g=c-d>>2;b:{if((i|0)<(g|0)){b=H[(i<<2)+d>>2];if(b){break b}}h=a+4|0;f=Xa(40);H[f>>2]=30368;b=I[18821]|I[18822]<<8|(I[18823]<<16|I[18824]<<24);F[f+4|0]=b;F[f+5|0]=b>>>8;F[f+6|0]=b>>>16;F[f+7|0]=b>>>24;F[f+8|0]=I[18825];j=f+12|0;b=0;while(1){if((b|0)!=4){H[j+(b<<2)>>2]=0;b=b+1|0;continue}break}H[f+36>>2]=0;H[f+28>>2]=0;H[f+32>>2]=0;if((g|0)<=(i|0)){b=i+1|0;c:{if(b>>>0>g>>>0){g=b-g|0;j=H[a+12>>2];if(g>>>0<=j-c>>2>>>0){b=(g<<2)+c|0;while(1){if((b|0)!=(c|0)){H[c>>2]=0;c=c+4|0;continue}break}H[a+8>>2]=b;break c}a=Zm(e+44|0,jn(d,j,b),H[a+8>>2]-H[a+4>>2]>>2,a+12|0);b=H[a+8>>2];c=b+(g<<2)|0;while(1){if((b|0)!=(c|0)){H[b>>2]=0;b=b+4|0;continue}break}H[a+8>>2]=c;Pm(h,a);Im(a);break c}if(b>>>0>=g>>>0){break c}H[a+8>>2]=(b<<2)+d}d=H[h>>2]}a=i<<2;b=H[a+d>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+H[h>>2]>>2]=0;d=H[h>>2]}H[a+d>>2]=f;b=H[a+H[h>>2]>>2]}L[b+24>>2]=k;L[b+20>>2]=l;L[b+16>>2]=m;L[b+12>>2]=n;Ha=e- -64|0}function cj(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,l=0;g=Ha-16|0;Ha=g;h=H[c>>2];H[g+12>>2]=h;a:{if(H[a+144>>2]==(b|0)){H[a+272>>2]=h;j=a+272|0;l=a+276|0;break a}j=H[a+284>>2];l=j+4|0}H[j>>2]=h;H[c>>2]=0;b:{c:{while(1){i=La[H[b+8>>2]](b,h,d,g+8|0)|0;h=H[g+8>>2];H[l>>2]=h;d:{e:{f:{g:{switch(i+4|0){default:if((i|0)!=40){break f}d=H[a+76>>2];h:{if(d){La[d|0](H[a+4>>2]);break h}if(!H[a+80>>2]){break h}Rb(a,b,H[g+12>>2],h)}b=H[g+8>>2];H[c>>2]=b;H[e>>2]=b;i=H[a+464>>2]==2?35:0;break b;case 11:i=H[a+60>>2];if(i){F[g+7|0]=10;La[i|0](H[a+4>>2],g+7|0,1);break d}if(!H[a+80>>2]){break d}Rb(a,b,H[g+12>>2],h);break d;case 10:i=H[a+60>>2];if(i){if(I[b+68|0]){break e}while(1){H[g>>2]=H[a+44>>2];La[H[b+56>>2]](b,g+12|0,h,g,H[a+48>>2]);H[l>>2]=H[g+8>>2];h=H[a+44>>2];La[i|0](H[a+4>>2],h,H[g>>2]-h|0);h=H[g+8>>2];k=H[g+12>>2];if((h|0)==(k|0)){break d}H[j>>2]=k;continue}}if(!H[a+80>>2]){break d}Rb(a,b,H[g+12>>2],h);break d;case 2:if(!f){i=6;break b}H[e>>2]=H[g+12>>2];i=0;break b;case 4:break c;case 1:case 5:case 6:case 7:case 8:case 9:break f;case 0:case 3:break g}}if(!f){i=20;break b}H[e>>2]=H[g+12>>2];i=0;break b}H[j>>2]=h;i=23;break b}k=H[g+12>>2];La[i|0](H[a+4>>2],k,h-k|0)}h=H[g+8>>2];H[g+12>>2]=h;H[j>>2]=h;i=35;i:{switch(H[a+464>>2]-2|0){case 1:break i;case 0:break b;default:continue}}break}H[e>>2]=h;i=0;break b}H[j>>2]=h;i=4}Ha=g+16|0;return i}function Eb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=Ha-16|0;Ha=f;h=a+27&124;a=h;i=a>>>0<=1?1:a;a=i;c=a+15&112;a=a>>>0>c>>>0?a:c;if(!(a&15)){c=48;a:{if(a>>>0>4294967216){break a}b:{if(a>>>0>=4294967216){H[12604]=48;b=0;break b}c=a>>>0<11?16:a+11&-8;a=ib(c+28|0);b=0;if(!a){break b}b=a-8|0;c:{if(!(a&15)){a=b;break c}g=a-4|0;j=H[g>>2];a=(a+15&-16)-8|0;a=(a-b>>>0<=15?16:0)+a|0;d=a-b|0;e=(j&-8)-d|0;if(!(j&3)){b=H[b>>2];H[a+4>>2]=e;H[a>>2]=b+d;break c}H[a+4>>2]=e|H[a+4>>2]&1|2;e=a+e|0;H[e+4>>2]=H[e+4>>2]|1;H[g>>2]=d|H[g>>2]&1|2;e=b+d|0;H[e+4>>2]=H[e+4>>2]|1;og(b,d)}b=H[a+4>>2];d:{if(!(b&3)){break d}d=b&-8;if(d>>>0<=c+16>>>0){break d}H[a+4>>2]=c|b&1|2;b=a+c|0;c=d-c|0;H[b+4>>2]=c|3;d=a+d|0;H[d+4>>2]=H[d+4>>2]|1;og(b,c)}b=a+8|0}c=48;if(!b){break a}H[f+12>>2]=b;c=0}b=c?0:H[f+12>>2]}Ha=f+16|0;a=b;if(!a){e:{b=0;a=H[15119];if(!a){H[15119]=60492;G[30247]=125;k=60492,l=Mi(60992),G[k>>1]=l;a=H[15119]}d=(i+3>>>2|0)+1|0;while(1){c=0;f:{g:{if(!a|(a|0)==60992){break g}h:{c=a+4|0;if(!(c&15)){f=J[a+2>>1];e=d+(d>>>0<f>>>0?f-d&3:0)|0;if(e>>>0>=f>>>0){break h}b=f-e|0;G[a+2>>1]=b;a=((b&65535)<<2)+a|0;G[a+2>>1]=e;G[a>>1]=0;c=a+4|0;if(!(c&15)){break g}}Oi();B()}if(d>>>0>f>>>0){break f}d=J[a>>1];i:{if(!b){k=60476,l=Ni(d),H[k>>2]=l;break i}G[b>>1]=d}G[a>>1]=0}a=c;break e}b=a;a=Ni(J[a>>1]);continue}}}if(!a){$d();B()}return zb(a,0,h)+24|0}function ek(a,b){var c=0,d=0,e=O(0),f=O(0);c=Ha-96|0;Ha=c;Sb(b);d=H[a+4>>2];if((d&16777215)!=(H[14678]&16777215)){_a(b,G[29370]);$a(17951,b);G[29370]=J[29370]+1;rd(a+4|0,b);G[29370]=J[29370]-1;bb(10,b);d=H[14678]}if((d&16777215)!=(H[a+16>>2]&16777215)){_a(b,G[29370]);$a(17975,b);G[29370]=J[29370]+1;bc(a+16|0,b);G[29370]=J[29370]-1;bb(10,b)}d=a+20|0;if(!Bc(d)){_a(b,G[29370]);$a(17360,b);G[29370]=J[29370]+1;ge(d,b);G[29370]=J[29370]-1;bb(10,b)}if(!(L[a+32>>2]==O(0)&L[a+36>>2]==O(0))){_a(b,G[29370]);$a(17340,b);G[29370]=J[29370]+1;fe(L[a+32>>2],L[a+36>>2],b);G[29370]=J[29370]-1;bb(10,b)}_a(b,G[29370]);$a(16896,b);G[29370]=J[29370]+1;e=L[a+60>>2];f=L[a+64>>2];H[c+80>>2]=H[a+68>>2];M[c+72>>3]=f;M[c+64>>3]=e;pb(b,11083,c- -64|0);G[29370]=J[29370]-1;bb(10,b);if(H[a+56>>2]){_a(b,G[29370]);$a(18319,b);d=J[29370]+1|0;G[29370]=d;a=H[a+56>>2];_a(b,d<<16>>16);H[c+48>>2]=a;Wa(19015,c+48|0);if(If(a)){_a(b,G[29370]);$a(18369,b);G[29370]=J[29370]+1;nl(a,b);G[29370]=J[29370]-1;bb(10,b)}if(H[a+220>>2]){_a(b,G[29370]);$a(18342,b);G[29370]=J[29370]+1;nl(H[a+220>>2],b);G[29370]=J[29370]-1;bb(10,b)}if(L[a+224>>2]!=O(.5)){_a(b,G[29370]);e=L[a+224>>2];H[c+32>>2]=3;M[c+40>>3]=e;pb(b,19704,c+32|0)}_a(b,G[29370]);H[c+16>>2]=I[a+233|0]?84:70;eb(b,20682,c+16|0);_a(b,G[29370]);H[c>>2]=H[a+236>>2];eb(b,18832,c);G[29370]=J[29370]-1;bb(10,b)}Ha=c+96|0}function Fc(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a:{b:{c:{d:{i=H[a+8>>2];if(!i){if(!c){break a}H[a+8>>2]=64;F[a+4|0]=6;d=La[H[H[a+16>>2]>>2]](256)|0;H[a>>2]=d;if(d){break d}H[a+8>>2]=0;return 0}d=i-1|0;l=d>>>2|0;m=Jg(b);n=m&0-i;f=d&m;o=H[a>>2];while(1){g=H[o+(f<<2)>>2];if(g){e=H[g>>2];d=b;while(1){j=I[d|0];if((j|0)==I[e|0]){if(!j){break b}e=e+1|0;d=d+1|0;continue}break}h=h&255?h:l&n>>>I[a+4|0]-1|1;d=h&255;f=(f-d|0)+(d>>>0>f>>>0?i:0)|0;continue}break}g=0;if(!c){break b}d=I[a+4|0];if(!(H[a+12>>2]>>>d-1|0)){break c}p=d+1|0;d=p&255;e=4<<d;f=La[H[H[a+16>>2]>>2]](e)|0;if(!f){break b}i=zb(f,0,e);g=1<<d;f=g-1|0;l=f>>>2|0;n=d-1|0;o=0-g|0;h=0;while(1){if(K[a+8>>2]>h>>>0){j=H[H[a>>2]+(h<<2)>>2];if(j){d=Jg(H[j>>2]);e=d&f;q=l&(d&o)>>>n|1;d=0;while(1){k=i+(e<<2)|0;if(H[k>>2]){d=d&255?d:q;k=d&255;e=(e-k|0)+(e>>>0<k>>>0?g:0)|0;continue}break}H[k>>2]=j}h=h+1|0;continue}break}La[H[H[a+16>>2]+8>>2]](H[a>>2]);H[a+8>>2]=g;F[a+4|0]=p;H[a>>2]=i;f=f&m;d=l&(o&m)>>>n|1;e=0;while(1){if(!H[i+(f<<2)>>2]){break c}e=e&255?e:d;h=e&255;f=(f-h|0)+(f>>>0<h>>>0?g:0)|0;continue}}zb(d,0,256);f=H[a+8>>2]-1&Jg(b)}e=La[H[H[a+16>>2]>>2]](c)|0;d=f<<2;H[d+H[a>>2]>>2]=e;e=H[d+H[a>>2]>>2];if(!e){break a}zb(e,0,c);H[H[d+H[a>>2]>>2]>>2]=b;H[a+12>>2]=H[a+12>>2]+1;g=H[d+H[a>>2]>>2]}return g}return 0}function tk(a,b,c){var d=0,e=O(0),f=O(0),g=0,h=0,i=0,j=O(0);d=Ha-96|0;Ha=d;L[d+84>>2]=L[a+528>>2];L[d+88>>2]=L[a+532>>2];L[d+92>>2]=L[a+536>>2];L[d+72>>2]=L[a+540>>2];L[d+76>>2]=L[a+544>>2];L[d+80>>2]=L[a+548>>2];sk(b,d+84|0,d+72|0,c);sc(b);e=L[(H[a+552>>2]<<2)+53096>>2];f=L[a+48>>2];H[d+60>>2]=0;H[d+64>>2]=0;H[d+68>>2]=0;L[d+48>>2]=L[a+528>>2];L[d+52>>2]=L[a+532>>2];L[d+56>>2]=L[a+536>>2];L[d+36>>2]=L[a+540>>2];L[d+40>>2]=L[a+544>>2];L[d+44>>2]=L[a+548>>2];h=d+60|0;sk(h,d+48|0,d+36|0,J[26761]);g=b+24|0;Ne(g,h,L[a+576>>2],L[a+580>>2]);Oe(c,g);c=b+12|0;kf(c,b,g);e=O(f*e);wb(c,e);if(!(L[a+576>>2]==O(0)&L[a+580>>2]==O(0))){e=O(e*L[(H[a+584>>2]<<2)+53176>>2])}wb(g,e);H[d+32>>2]=0;H[d+24>>2]=0;H[d+28>>2]=0;h=d+24|0;Ne(h,b,L[a+556>>2],L[a+560>>2]);if(I[a+33|0]==1){wb(h,O(-1))}i=b,j=lo(d+24|0,c,g),L[i+60>>2]=j;f=L[a+568>>2];e=L[a+572>>2];if(!(f!=O(0)|e!=O(0))){f=L[a+556>>2];L[a+568>>2]=f;e=L[a+560>>2];L[a+572>>2]=e}a:{if(!(f==O(0)&e==O(0))){H[d+20>>2]=0;H[d+12>>2]=0;H[d+16>>2]=0;h=d+12|0;Ne(h,b,f,e);e=lo(h,c,g);f=L[b+60>>2];break a}f=L[b+60>>2];e=O(f+L[13381])}L[b+64>>2]=e-f;c=b+36|0;xf(c,b,f);g=b+48|0;xf(g,b,e);xb(g,c);e=L[b+64>>2];if(e<=O(0)){e=O(e+L[13381]);L[b+64>>2]=e}if(I[a+564|0]==1){e=O(e+L[13381]);L[b+64>>2]=e}if(I[a+565|0]==1){L[b+64>>2]=e+L[13381]}Ha=d+96|0}function Yf(a,b){var c=0,d=0,e=0,f=O(0),g=0,h=0,i=0,j=0,k=0,l=0;c=Ha-160|0;Ha=c;H[c+156>>2]=0;H[c+148>>2]=0;H[c+152>>2]=0;while(1){e=(c+80|0)+d|0;H[e+8>>2]=0;H[e>>2]=0;H[e+4>>2]=0;d=d+12|0;if((d|0)!=60){continue}break}h=a+172|0;i=(I[b+1|0]|I[b+2|0]<<8)&-113;j=I[b|0]|I[b+3|0]<<24;d=1;a:{while(1){if((d|0)==5){if(!g){db();Db(16211);bc(b,H[14711]);Db(22539);break a}}else{k=(c+75|0)+d|0;e=zd(h,((d<<4)+i&65535)<<8|j);if(e){l=H[e+32>>2];g=(c+80|0)+N(d,12)|0;H[g>>2]=H[e+28>>2];H[g+4>>2]=l;H[g+8>>2]=H[e+36>>2];f=O(f+L[e+20>>2]);g=H[e+16>>2];e=1}else{e=0}F[k|0]=e;d=d+1|0;continue}break}b:{c:{d:{e=I[c+76|0];if(!((e|0)!=1|I[c+77|0]!=1)){if(I[c+78|0]!=1|I[c+79|0]!=1){break d}H[c+68>>2]=0;H[c+60>>2]=0;H[c+64>>2]=0;H[c+56>>2]=0;H[c+48>>2]=0;H[c+52>>2]=0;d=c+60|0;dc(d,c+80|12,c+104|0);e=c+48|0;dc(e,c+116|0,c+128|0);dc(c+148|0,d,e);f=O(f*O(.25));break b}d=I[c+79|0];e:{if(!I[c+78|0]){a=d&1?84:70;d=70;break e}if(d&1){break c}a=70;d=84}db();Db(16211);bc(b,H[14711]);H[c+16>>2]=e?84:70;H[c+24>>2]=d;H[c+28>>2]=a;H[c+20>>2]=I[c+77|0]?84:70;Wa(28497,c+16|0);break a}d=c+104|0;dc(c+148|0,d,d);f=O(f*O(.5));break b}dc(c+148|0,c+116|0,c+128|0);f=O(f*O(.5))}b=H[b>>2];H[c+44>>2]=b;H[c+12>>2]=b;H[c+68>>2]=0;H[c+60>>2]=0;H[c+64>>2]=0;cg(yd(a,c+12|0,g,c+60|0,f),c+148|0)}Ha=c+160|0}function lw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;if(Cc(a,H[b+8>>2],e)){Ki(b,c,d);return}a:{if(Cc(a,H[b>>2],e)){if(!(H[b+16>>2]!=(c|0)&H[b+20>>2]!=(c|0))){if((d|0)!=1){break a}H[b+32>>2]=1;return}H[b+32>>2]=d;b:{if(H[b+44>>2]==4){break b}f=a+16|0;h=f+(H[a+12>>2]<<3)|0;d=0;c:{while(1){d:{if(f>>>0>=h>>>0){break d}G[b+52>>1]=0;Hi(H[f>>2],H[f+4>>2],b,c,c,1,e);if(I[b+54|0]){break d}e:{if(I[b+53|0]!=1){break e}if(I[b+52|0]==1){if(H[b+24>>2]!=1){d=1;g=1;if(I[a+8|0]&2){break e}}H[b+44>>2]=3;return}d=1;if(!(F[a+8|0]&1)){break c}}f=f+8|0;continue}break}H[b+44>>2]=d?3:4;if(!g){break b}break a}H[b+44>>2]=3;if(g){break a}}H[b+20>>2]=c;H[b+40>>2]=H[b+40>>2]+1;if(H[b+36>>2]!=1|H[b+24>>2]!=2){break a}F[b+54|0]=1;return}f=H[a+12>>2];g=a+16|0;rg(H[g>>2],H[a+20>>2],b,c,d,e);if(f>>>0<2){break a}g=g+(f<<3)|0;f=a+24|0;a=H[a+8>>2];if(!(!(a&2)&H[b+36>>2]!=1)){while(1){if(I[b+54|0]){break a}rg(H[f>>2],H[f+4>>2],b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break}break a}if(!(a&1)){while(1){if(I[b+54|0]|H[b+36>>2]==1){break a}rg(H[f>>2],H[f+4>>2],b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break a}}while(1){if(I[b+54|0]|H[b+36>>2]==1&H[b+24>>2]==1){break a}rg(H[f>>2],H[f+4>>2],b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break}}}function Hk(a,b){var c=0,d=O(0),e=0;c=Ha-96|0;Ha=c;if(!(!(L[a>>2]!=O(0)|L[a+4>>2]!=O(0))&L[a+8>>2]==O(0))){_a(b,G[29370]);$a(17251,b);G[29370]=J[29370]+1;tb(a,b,3);G[29370]=J[29370]-1;bb(10,b)}if(L[a+12>>2]!=O(0)){_a(b,G[29370]);d=L[a+12>>2];H[c+80>>2]=3;M[c+88>>3]=d;pb(b,19853,c+80|0)}if(!(!(L[a+16>>2]!=O(0)|L[a+20>>2]!=O(0))&L[a+24>>2]==O(0))){_a(b,G[29370]);$a(17218,b);G[29370]=J[29370]+1;tb(a+16|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+28>>2]!=O(0)|L[a+32>>2]!=O(0))&L[a+36>>2]==O(0))){_a(b,G[29370]);$a(17382,b);G[29370]=J[29370]+1;tb(a+28|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(L[a+40>>2]!=O(0)){_a(b,G[29370]);d=L[a+40>>2];H[c+64>>2]=3;M[c+72>>3]=d;pb(b,19619,c- -64|0)}if(H[a+44>>2]){_a(b,G[29370]);$a(17503,b);e=J[29370]+1|0;G[29370]=e;a:{if(!H[a+44>>2]){break a}_a(b,e<<16>>16);$a(18421,b);H[c+48>>2]=H[a+44>>2];eb(b,20430,c+48|0);e=G[29370];if(!H[a+44>>2]){break a}_a(b,e);$a(17091,b);G[29370]=J[29370]+1;tb(a+48|0,b,3);G[29370]=J[29370]-1;bb(10,b);_a(b,G[29370]);d=L[a+60>>2];H[c+32>>2]=3;M[c+40>>3]=d;pb(b,19995,c+32|0);_a(b,G[29370]);d=L[a+64>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,20019,c+16|0);_a(b,G[29370]);d=L[a+68>>2];H[c>>2]=3;M[c+8>>3]=d;pb(b,19681,c);e=J[29370]}G[29370]=e-1;bb(10,b)}Ha=c+96|0}function Qg(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;g=H[b>>2];i=I[d|0];a:{if(!i){if(g){return 28}m=1;k=40;break a}m=1;k=40;if(!g|I[g|0]!=120|(I[g+1|0]!=109|I[g+2|0]!=108)){break a}h=I[g+3|0];if(h){if(I[g+5|0]|((h|0)!=110|I[g+4|0]!=115)){break a}return 39}j=1;m=0;k=38}g=1;h=1;while(1){i=i&255;if(i){l=0;b:{if(!(g&255)){break b}if(f>>>0<=36){l=1;if((i|0)==I[f+34512|0]){break b}}l=0}g=l;c:{if(!(h&m)){break c}if(f>>>0<=29){h=1;if((i|0)==I[f+34560|0]){break c}}h=0}f=f+1|0;i=I[f+d|0];continue}break}d:{if(((f|0)==36&(g&255)!=0)!=(j|0)){break d}if(!(!h|(f|0)!=29)){return 40}j=(I[a+456|0]!=0)+f|0;f=H[a+360>>2];e:{if(f){if((j|0)>H[f+24>>2]){g=j+24|0;h=La[H[a+16>>2]](H[f+16>>2],g)|0;if(!h){return 1}H[f+24>>2]=g;H[f+16>>2]=h}H[a+360>>2]=H[f+4>>2];i=H[f+16>>2];break e}k=1;f=La[H[a+12>>2]](28)|0;if(!f){break d}h=j+24|0;i=La[H[a+12>>2]](h)|0;H[f+16>>2]=i;if(!i){La[H[a+20>>2]](f);return 1}H[f+24>>2]=h}H[f+20>>2]=j;jb(i,d,j);h=I[a+456|0];if(h){F[(j+H[f+16>>2]|0)-1|0]=h}H[f+12>>2]=c;H[f>>2]=b;H[f+8>>2]=H[b+4>>2];if(I[d|0]|(H[a+340>>2]+132|0)!=(b|0)){g=f}else{g=0}H[b+4>>2]=g;H[f+4>>2]=H[e>>2];H[e>>2]=f;k=0;if(!c){break d}c=H[a+100>>2];if(!c){break d}La[c|0](H[a+4>>2],H[b>>2],H[b+4>>2]?d:0)}return k}function xd(a){var b=0,c=0,d=0,e=O(0),f=O(0),g=0,h=O(0);c=Xa(32);b=H[13165]+N(a,28)|0;a=H[b+4>>2];H[c>>2]=H[b>>2];H[c+4>>2]=a;H[c+24>>2]=H[b+24>>2];a=H[b+20>>2];H[c+16>>2]=H[b+16>>2];H[c+20>>2]=a;a=H[b+12>>2];H[c+8>>2]=H[b+8>>2];H[c+12>>2]=a;H[c+28>>2]=0;a=Xa(104);d=H[b+12>>2];H[a+8>>2]=H[b+8>>2];H[a+12>>2]=d;d=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=d;H[a+56>>2]=-1082130432;H[a+48>>2]=0;H[a+52>>2]=-1082130432;H[a+44>>2]=3;H[a+36>>2]=1065353216;H[a+40>>2]=1017370378;H[a+28>>2]=1097859072;H[a+32>>2]=1184645120;H[a+20>>2]=1082130432;H[a+24>>2]=1181376512;F[a+16|0]=0;zb(a+60|0,0,36);H[a+96>>2]=1065353216;H[a+100>>2]=1065353216;d=H[11417];Tn(a);Sn(a);H[a+48>>2]=0;H[a+52>>2]=0;f=O(1/+(d|0));h=L[c+20>>2];b=0;while(1){if(!(!(L[a+68>>2]<h)|(b|0)>=(d|0))){e=O(e+f);Rn(a,e);b=b+1|0;d=H[11417];continue}break}L[c+16>>2]=O(e/O(O(1)-L[c+24>>2]))*f;zm(c);Tn(a);Sn(a);H[a+48>>2]=0;H[a+52>>2]=0;e=O(0);b=0;while(1){if((b|0)<(d|0)){e=O(e+L[c+16>>2]);Rn(a,e);L[H[c+28>>2]+(b<<2)>>2]=L[a+68>>2];b=b+1|0;d=H[11417];continue}break}Va(a);a=0;a:{d=H[c+28>>2];b=H[11417];e=L[(d+(b<<2)|0)-4>>2];if(e==O(0)){break a}b=(b|0)>0?b:0;while(1){if((a|0)==(b|0)){break a}g=d+(a<<2)|0;L[g>>2]=L[g>>2]/e;a=a+1|0;continue}}return c}function fx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if((b|0)==(c|0)){return-4}a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{e=c-b|0;l:{if(e&1){c=e&-2;if(!c){break l}c=b+c|0}m:{n:{e=F[b|0];if(e){e=cb(e,F[b+1|0])}else{e=I[(I[b+1|0]+a|0)+72|0]}switch(e&255){case 6:break i;case 5:break j;case 9:break m;case 4:break n;case 0:case 1:case 8:break c;case 10:break e;case 7:break h;default:break g}}f=-1;e=b+2|0;if((e|0)==(c|0)){break b}if(I[e|0]|I[b+3|0]!=93){break f}if((b+4|0)==(c|0)){break b}if(I[b+4|0]|I[b+5|0]!=62){break f}b=b+6|0;f=40;break c}e=c;c=b+2|0;if((e|0)!=(c|0)){break k}}return-1}e=b+4|0;f=F[c|0];if(f){a=cb(f,F[b+3|0])}else{a=I[(I[b+3|0]+a|0)+72|0]}b=(a|0)==10?e:c;break d}if((c-b|0)<2){break a}e=b+2|0;break f}if((c-b|0)<3){break a}e=b+3|0;break f}if((c-b|0)<4){break a}e=b+4|0;break f}e=b+2|0}g=a+72|0;b=e;while(1){f=6;if((b|0)==(c|0)){break c}a=I[b+1|0];e=F[b|0];if(e){e=cb(e,a<<24>>24)}else{e=I[a+g|0]}a=2;o:{p:{switch(e&255){case 5:if((c-b|0)>=2){break o}break c;case 6:a=3;if((c-b|0)>=3){break o}break c;case 7:break p;case 0:case 1:case 4:case 8:case 9:case 10:break c;default:break o}}a=4;if((c-b|0)<4){break c}}b=a+b|0;continue}}b=b+2|0}f=7}H[d>>2]=b}return f|0}return-2}function vx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if((b|0)==(c|0)){return-4}a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{e=c-b|0;l:{if(e&1){c=e&-2;if(!c){break l}c=b+c|0}m:{n:{e=F[b+1|0];if(e){e=cb(e,F[b|0])}else{e=I[(I[b|0]+a|0)+72|0]}switch(e&255){case 6:break i;case 5:break j;case 9:break m;case 4:break n;case 0:case 1:case 8:break c;case 10:break e;case 7:break h;default:break g}}f=-1;e=b+2|0;if((e|0)==(c|0)){break b}if(I[b+3|0]|I[e|0]!=93){break f}if((b+4|0)==(c|0)){break b}if(I[b+5|0]|I[b+4|0]!=62){break f}b=b+6|0;f=40;break c}e=c;c=b+2|0;if((e|0)!=(c|0)){break k}}return-1}e=b+4|0;b=F[b+3|0];if(b){a=cb(b,F[c|0])}else{a=I[(I[c|0]+a|0)+72|0]}b=(a|0)==10?e:c;break d}if((c-b|0)<2){break a}e=b+2|0;break f}if((c-b|0)<3){break a}e=b+3|0;break f}if((c-b|0)<4){break a}e=b+4|0;break f}e=b+2|0}g=a+72|0;b=e;while(1){f=6;if((b|0)==(c|0)){break c}a=I[b|0];e=F[b+1|0];if(e){e=cb(e,a<<24>>24)}else{e=I[a+g|0]}a=2;o:{p:{switch(e&255){case 5:if((c-b|0)>=2){break o}break c;case 6:a=3;if((c-b|0)>=3){break o}break c;case 7:break p;case 0:case 1:case 4:case 8:case 9:case 10:break c;default:break o}}a=4;if((c-b|0)<4){break c}}b=a+b|0;continue}}b=b+2|0}f=7}H[d>>2]=b}return f|0}return-2}function Ai(a,b,c){var d=O(0),e=O(0),f=O(0),g=0,h=O(0),i=O(0),j=O(0),k=O(0),l=O(0),m=O(0),n=0;g=Ha-16|0;Ha=g;n=H[b+4>>2];H[c>>2]=H[b>>2];H[c+4>>2]=n;H[c+8>>2]=H[b+8>>2];d=L[c+8>>2];l=L[a+124>>2];e=O(L[c>>2]-l);a:{b:{c:{if(e>=l){k=L[a+128>>2];d=O(d-k);f=L[a+104>>2];h=O(d-f);j=L[a+72>>2];m=O(O(O(L[a+20>>2]-O(L[a+100>>2]/j))-k)-f);i=O(h-m);if(e<O(j*i)){if(Ko(a+92|0,e,O(f+h))>=O(0)){break b}H[g+12>>2]=0;H[g+8>>2]=0;b=Jo(L[a+92>>2],L[a+96>>2],O(e/i),m,g+12|0,g+8|0);if(!b){break a}L[c>>2]=l+L[g+12>>2];L[c+8>>2]=O(L[g+8>>2]+L[a+104>>2])+L[a+128>>2];break a}i=L[a+60>>2];e=O(e-i);h=O(O(d*d)+O(e*e));f=L[a+64>>2];if(h>=O(f*f)){break b}j=d;d=O(f/O(W(h)));L[c+8>>2]=O(j*d)+k;break c}k=L[a+132>>2];d=O(d-k);f=L[a+120>>2];h=O(d-f);j=L[a+88>>2];m=O(O(O(L[a+44>>2]-O(L[a+116>>2]/j))-k)-f);i=O(h-m);if(e>O(j*i)){if(Ko(a+108|0,e,O(f+h))>=O(0)){break b}H[g+12>>2]=0;H[g+8>>2]=0;b=Jo(L[a+108>>2],L[a+112>>2],O(e/i),m,g+12|0,g+8|0);if(!b){break a}L[c>>2]=l+L[g+12>>2];L[c+8>>2]=O(L[g+8>>2]+L[a+120>>2])+L[a+132>>2];break a}i=L[a+76>>2];e=O(e-i);h=O(O(d*d)+O(e*e));f=L[a+80>>2];if(h>=O(f*f)){break b}j=d;d=O(O(-f)/O(W(h)));L[c+8>>2]=O(j*d)+k}L[c>>2]=O(e*d)+O(l+i);b=1;break a}b=0}Ha=g+16|0;return b}function oq(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;if((b|0)==(c|0)){return-22}h=22;a:{b:{c:{d:{e:{f:{g:{h:{f=I[b|0];i:{if(!f){e=I[b+1|0];g=I[(e+a|0)+72|0];break i}e=F[b+1|0];g=cb(f<<24>>24,e)}g=g&255;switch(g-5|0){case 4:case 5:case 16:break a;case 3:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 18:break b;case 17:case 19:break d;case 2:break e;case 1:break f;case 0:break g;default:break h}}j:{switch(g-29|0){case 0:break j;case 1:break a;default:break b}}if(H[(e>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>e&1){break d}break b}if((c-b|0)>=2){break b}break c}if((c-b|0)>=3){break b}break c}if((c-b|0)>=4){break b}break c}g=a+72|0;k:{l:{m:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){return-1}e=I[a+3|0];h=0;n:{o:{f=I[a+2|0];if(f){i=cb(f<<24>>24,e<<24>>24)}else{i=I[e+g|0]}switch((i&255)-5|0){case 13:break k;case 2:break l;case 1:break m;case 17:case 19:case 20:case 21:case 22:continue;case 0:break n;case 24:break o;default:break a}}if(H[(e>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>e&1){continue}break a}break}if((c-b|0)<2){break c}break a}if((c-b|0)<3){break c}break a}if((c-b|0)<4){break c}break a}b=a+4|0;h=28;break a}return-2}h=0}H[d>>2]=b;return h}function tq(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;if((b|0)==(c|0)){return-22}h=22;a:{b:{c:{d:{e:{f:{g:{h:{f=I[b+1|0];i:{if(!f){e=I[b|0];g=I[(e+a|0)+72|0];break i}e=F[b|0];g=cb(f<<24>>24,e)}g=g&255;switch(g-5|0){case 4:case 5:case 16:break a;case 3:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 18:break b;case 17:case 19:break d;case 2:break e;case 1:break f;case 0:break g;default:break h}}j:{switch(g-29|0){case 0:break j;case 1:break a;default:break b}}if(H[(e>>>3&28|I[f+36432|0]<<5)+34784>>2]>>>e&1){break d}break b}if((c-b|0)>=2){break b}break c}if((c-b|0)>=3){break b}break c}if((c-b|0)>=4){break b}break c}g=a+72|0;k:{l:{m:{while(1){a=b;b=b+2|0;if((c|0)==(b|0)){return-1}e=I[a+2|0];h=0;n:{o:{f=I[a+3|0];if(f){i=cb(f<<24>>24,e<<24>>24)}else{i=I[e+g|0]}switch((i&255)-5|0){case 13:break k;case 2:break l;case 1:break m;case 17:case 19:case 20:case 21:case 22:continue;case 0:break n;case 24:break o;default:break a}}if(H[(e>>>3&28|I[f+36688|0]<<5)+34784>>2]>>>e&1){continue}break a}break}if((c-b|0)<2){break c}break a}if((c-b|0)<3){break c}break a}if((c-b|0)<4){break c}break a}b=a+4|0;h=28;break a}return-2}h=0}H[d>>2]=b;return h}function Xx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if((b|0)==(c|0)){return-4}a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{g=a+72|0;switch(I[g+I[b|0]|0]){case 6:break i;case 5:break j;case 10:break k;case 9:break l;case 4:break m;case 0:case 1:case 8:break c;case 7:break h;default:break g}}f=-1;e=b+1|0;if((e|0)==(c|0)){break b}if(I[e|0]!=93){break f}if((b+2|0)==(c|0)){break b}if(I[b+2|0]!=62){break f}b=b+3|0;f=40;break c}a=b+1|0;if((a|0)!=(c|0)){break e}return-1}b=b+1|0;break d}if((c-b|0)<2){break a}if(La[H[a+352>>2]](a,b)|0){break c}e=b+2|0;break f}if((c-b|0)<3){break a}if(La[H[a+356>>2]](a,b)|0){break c}e=b+3|0;break f}if((c-b|0)<4){break a}if(La[H[a+360>>2]](a,b)|0){break c}e=b+4|0;break f}e=b+1|0}b=e;while(1){f=6;if((b|0)==(c|0)){break c}e=1;n:{o:{switch(I[I[b|0]+g|0]){case 5:if((c-b|0)<2){break c}if(La[H[a+352>>2]](a,b)|0){break c}e=2;break n;case 6:if((c-b|0)<3){break c}if(La[H[a+356>>2]](a,b)|0){break c}e=3;break n;case 7:break o;case 0:case 1:case 4:case 8:case 9:case 10:break c;default:break n}}if((c-b|0)<4){break c}if(La[H[a+360>>2]](a,b)|0){break c}e=4}b=b+e|0;continue}}b=I[I[b+1|0]+g|0]==10?b+2|0:a}f=7}H[d>>2]=b}return f|0}return-2}function Cq(a,b,c,d){var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-22}f=22;a:{b:{c:{d:{e:{f:{g:{h:{i:{g=a+72|0;e=I[g+I[b|0]|0];switch(e-5|0){case 4:case 5:case 16:break b;case 3:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 18:break c;case 17:case 19:break e;case 2:break f;case 1:break g;case 0:break h;default:break i}}if((e|0)!=30){break c}break b}if((c-b|0)<2){break a}if(!(La[H[a+340>>2]](a,b)|0)){break c}b=b+2|0;break d}if((c-b|0)<3){break a}if(!(La[H[a+344>>2]](a,b)|0)){break c}b=b+3|0;break d}if((c-b|0)<4){break a}if(!(La[H[a+348>>2]](a,b)|0)){break c}b=b+4|0;break d}b=b+1|0}while(1){if((b|0)==(c|0)){return-1}e=1;f=0;j:{k:{l:{h=I[I[b|0]+g|0];switch(h-18|0){case 0:break j;case 4:case 6:case 7:case 8:case 9:break k;case 1:case 2:case 3:case 5:break b;default:break l}}m:{switch(h-5|0){case 0:if((c-b|0)<2){break a}if(!(La[H[a+328>>2]](a,b)|0)){break b}e=2;break k;case 1:if((c-b|0)<3){break a}if(!(La[H[a+332>>2]](a,b)|0)){break b}e=3;break k;case 2:break m;default:break b}}if((c-b|0)<4){break a}if(!(La[H[a+336>>2]](a,b)|0)){break b}e=4}b=b+e|0;continue}break}b=b+1|0;f=28;break b}f=0}H[d>>2]=b;return f}return-2}function Nh(a,b,c,d){var e=0,f=0,g=0,h=0;F[a+12|0]=1;H[a+8>>2]=b;b=0;H[a+4>>2]=0;H[a>>2]=c;F[a+14|0]=I[a+14|0]&240;e=I[a+13|0]&-128;F[a+13|0]=e|64;zb(a+16|0,0,36);if(!c){db();Wa(23335,0);return a}F[a+13|0]=e|(d?64:0);c=H[H[c+104>>2]+12>>2];g=a,h=ib(c<<2),H[g+4>>2]=h;c=(c|0)>0?c:0;while(1){if((b|0)==(c|0)){b=Xa(84);F[b+77|0]=0;F[b+78|0]=0;F[b+76|0]=0;F[b+73|0]=0;F[b+74|0]=0;F[b+72|0]=0;F[b+69|0]=0;F[b+70|0]=0;F[b+68|0]=0;F[b+45|0]=0;F[b+46|0]=0;F[b+44|0]=0;F[b+41|0]=0;F[b+42|0]=0;F[b+40|0]=0;H[b+36>>2]=1056964608;F[b+33|0]=0;F[b+34|0]=0;F[b+32|0]=0;F[b+29|0]=0;F[b+30|0]=0;F[b+28|0]=0;H[b+24>>2]=1056964608;F[b+21|0]=0;F[b+22|0]=0;F[b+20|0]=0;F[b+17|0]=0;F[b+18|0]=0;F[b+16|0]=0;F[b+13|0]=0;F[b+14|0]=0;F[b+12|0]=0;H[b+8>>2]=1056964608;F[b+5|0]=0;F[b+6|0]=0;F[b+4|0]=0;F[b+1|0]=0;F[b+2|0]=0;F[b|0]=0;F[b+63|0]=0;F[b+64|0]=0;F[b+65|0]=0;F[b+66|0]=0;H[b+56>>2]=0;H[b+60>>2]=0;H[b+48>>2]=0;H[b+52>>2]=0;H[b+80>>2]=1056964608;H[a+36>>2]=b;g=a,h=Mh(Xa(76),1,a),H[g+20>>2]=h;b=Mh(Xa(76),0,a);H[a+24>>2]=b;c=H[a+20>>2];H[a+32>>2]=d?b:c;H[a+28>>2]=d?c:b}else{e=b<<2;f=ef(H[e+H[H[H[a>>2]+104>>2]>>2]>>2]);H[e+H[a+4>>2]>>2]=f;b=b+1|0;continue}break}return a}function Ih(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=Ha-112|0;Ha=f;a:{if((c|0)==(d|0)){Ya(b,e);break a}i=Kn(f+96|0);Hn(d,i);j=Kn(f+80|0);b:{if(!c){d=H[i+12>>2];break b}Hn(c,j);k=H[j>>2];l=H[i>>2];g=H[j+12>>2];d=H[i+12>>2];while(1){if((d|0)<=0|(g|0)<=0){break b}h=d-1|0;g=g-1|0;if(H[(h<<2)+l>>2]!=H[k+(g<<2)>>2]){break b}H[i+12>>2]=h;H[j+12>>2]=g;d=h;continue}}H[f+16>>2]=0;H[f+20>>2]=0;H[f+8>>2]=0;H[f+12>>2]=0;H[f>>2]=0;H[f+4>>2]=0;H[f+24>>2]=1065353216;while(1){if((d|0)<=0){if(c){c=f- -64|0;H[c>>2]=0;H[c+4>>2]=0;H[f+56>>2]=0;H[f+60>>2]=0;H[f+48>>2]=0;H[f+52>>2]=0;H[f+72>>2]=1065353216;d=H[j+12>>2];while(1){if((d|0)<=0){a=f+48|0;to(a);pi(f,a)}else{c=d-1|0;g=0;g=H[j+12>>2]>=(d|0)?H[H[j>>2]+(c<<2)>>2]:g;H[f+40>>2]=0;H[f+44>>2]=1065353216;H[f+32>>2]=0;H[f+36>>2]=0;d=H[H[a+4>>2]+(H[g+4>>2]<<2)>>2];h=f+32|0;La[H[H[d>>2]+8>>2]](d,h);qi(f+48|0,gi(g),h);d=c;continue}break}}}else{h=d-1|0;g=0;g=H[i+12>>2]>=(d|0)?H[H[i>>2]+(h<<2)>>2]:g;H[f+56>>2]=0;H[f+60>>2]=1065353216;H[f+48>>2]=0;H[f+52>>2]=0;d=H[H[a+4>>2]+(H[g+4>>2]<<2)>>2];k=f+48|0;La[H[H[d>>2]+8>>2]](d,k);qi(f,gi(g),k);d=h;continue}break}nb(j);nb(i);ro(f,e,b)}Ha=f+112|0}function Wp(a){var b=0,c=0,d=0,e=0,f=0;a:{b:{b=H[a+4>>2];c:{if((b|0)!=H[a+104>>2]){H[a+4>>2]=b+1;b=I[b|0];break c}b=Cb(a)}switch(b-43|0){case 0:case 2:break b;default:break a}}f=(b|0)==45;b=H[a+4>>2];if((b|0)!=H[a+104>>2]){H[a+4>>2]=b+1;b=I[b|0];break a}b=Cb(a)}d:{if(b-58>>>0>4294967285){while(1){c=(N(c,10)+b|0)-48|0;d=(c|0)<214748364;b=H[a+4>>2];e:{if((b|0)!=H[a+104>>2]){H[a+4>>2]=b+1;b=I[b|0];break e}b=Cb(a)}e=b-48|0;if(d&e>>>0<=9){continue}break}d=c>>31;f:{if(e>>>0>=10){break f}while(1){e=gy(c,d,10,0);b=e+b|0;c=Ka;d=b>>>0<e>>>0?c+1|0:c;c=H[a+4>>2];g:{if((c|0)!=H[a+104>>2]){H[a+4>>2]=c+1;e=I[c|0];break g}e=Cb(a)}c=b-48|0;d=d-(b>>>0<48)|0;b=e;e=b-48|0;if((c>>>0<2061584302&(d|0)<=21474836|(d|0)<21474836)&e>>>0<=9){continue}break}if(e>>>0>=10){break f}while(1){b=H[a+4>>2];h:{if((b|0)!=H[a+104>>2]){H[a+4>>2]=b+1;b=I[b|0];break h}b=Cb(a)}if(b-48>>>0<10){continue}break}}b=H[a+116>>2];if((b|0)>0){b=1}else{b=(b|0)>=0}if(b){H[a+4>>2]=H[a+4>>2]-1}a=c;c=f?0-a|0:a;d=f?0-(((a|0)!=0)+d|0)|0:d;break d}d=-2147483648;if(H[a+116>>2]<0){break d}H[a+4>>2]=H[a+4>>2]-1;Ka=-2147483648;return 0}Ka=d;return c}function Rs(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=0,g=O(0),h=O(0),i=0,j=0,k=0,l=O(0);e=Ha-48|0;Ha=e;a:{b:{if(!(c<=O(0))){g=O(L[a+40>>2]-L[a+44>>2]);if(!(g<=c)){break b}}Zc(a,b,c,d);break a}h=d?c:O(g-c);f=H[a+696>>2];c=L[f+40>>2];l=O(c*L[a+584>>2]);g=Ol(h,l);i=c>=g;h=O(h/l);c:{if(O(P(h))<O(2147483648)){k=~~h;break c}k=-2147483648}j=I[a+571|0];f=i?f:j&1?H[a+700>>2]:f;c=O((i?O(g/c):O(O(g-c)/O(c*L[a+576>>2])))*L[f+40>>2]);d=i?d:(d|0)==(j|0);La[H[H[f>>2]+60>>2]](f,b,c,d);c=Bf(f,c,d);c=d?c:O(O(1)-c);d:{e:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break e;default:break d}}H[e+44>>2]=0;H[e+36>>2]=0;H[e+40>>2]=0;H[e+32>>2]=0;H[e+24>>2]=0;H[e+28>>2]=0;d=e+36|0;f=e+24|0;wf(d,f,k,i,a+592|0,a+604|0,a+616|0,a+628|0,L[a+692>>2],L[a+688>>2]);H[e+20>>2]=0;H[e+12>>2]=0;H[e+16>>2]=0;j=e+12|0;mc(j,d,f,c);lb(b+4|0,j);d=H[a+8>>2]}if((d&-2)!=4){break a}H[e+44>>2]=0;H[e+36>>2]=0;H[e+40>>2]=0;H[e+32>>2]=0;H[e+24>>2]=0;H[e+28>>2]=0;d=e+36|0;f=e+24|0;wf(d,f,k,i,a+640|0,a+652|0,a+664|0,a+676|0,L[a+692>>2],L[a+688>>2]);H[e+20>>2]=0;H[e+12>>2]=0;H[e+16>>2]=0;a=e+12|0;mc(a,d,f,c);lb(b+116|0,a)}Ha=e+48|0}function yn(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;g=Ha-32|0;Ha=g;e=d&65535;f=d>>>16&32767;i=f;a:{if(f-15361>>>0<=2045){e=e<<4|c>>>28;c=c<<4;f=e;e=b>>>28|c;c=f;f=i-15360|0;b=b&268435455;b:{if((b|0)==134217728&(a|0)!=0|b>>>0>134217728){e=e+1|0;c=e?c:c+1|0;break b}if(a|(b|0)!=134217728){break b}a=e;e=e+(e&1)|0;c=a>>>0>e>>>0?c+1|0:c}h=c>>>0>1048575;a=h?0:e;b=h?0:c;e=0;c=f+h|0;f=c>>>0<f>>>0?1:e;break a}if(!(!(a|c|(b|e))|((f|0)!=32767|(h|0)!=0))){a=c;c=e<<4|c>>>28;a=a<<4|b>>>28;b=c|524288;c=2047;f=0;break a}if(i>>>0>17406){a=0;b=0;c=2047;f=0;break a}h=!(f|h);j=h?15360:15361;f=j-i|0;if((f|0)>112){a=0;b=0;c=0;f=0;break a}e=h?e:e|65536;lc(g+16|0,a,b,c,e,128-f|0);Td(g,a,b,c,e,f);a=H[g+8>>2];h=a<<4;b=H[g+12>>2]<<4|a>>>28;a=H[g+4>>2];f=a;a=a>>>28|h;f=f&268435455;c=H[g>>2]|(i|0)!=(j|0)&(H[g+16>>2]|H[g+24>>2]|(H[g+20>>2]|H[g+28>>2]))!=0;c:{if((f|0)==134217728&(c|0)!=0|f>>>0>134217728){a=a+1|0;b=a?b:b+1|0;break c}if(c|(f|0)!=134217728){break c}e=b;b=a;a=a+(a&1)|0;b=b>>>0>a>>>0?e+1|0:e}c=b>>>0>1048575;b=c?b^1048576:b;f=0}Ha=g+32|0;x(0,a|0);x(1,b|(d&-2147483648|c<<20));return+z()}function wt(a,b,c){a=a|0;b=b|0;c=c|0;var d=O(0),e=O(0),f=O(0);Qc(a,b,c);H[a+40>>2]=0;a:{b:{switch(H[a+8>>2]-3|0){case 0:case 2:break b;default:break a}}Wa(20193,0);tk(a,a+616|0,J[(H[a+8>>2]!=5?53522:I[b+13|0]&64?53522:b+14|0)>>1]);lb(a+288|0,a+664|0);e=L[a+40>>2];c=H[b>>2];f=O(O(O(O(L[c+232>>2]*L[c+236>>2])*L[(H[a+552>>2]<<2)+53116>>2])*L[a+680>>2])/L[13381]);if(I[58861]==1){d=O(L[13457]*L[13473])}else{d=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}d=O(f*d);if(!(e<d)){break a}L[a+40>>2]=d;e=d}c:{if((H[a+8>>2]&-2)!=4){break c}Wa(20216,0);tk(a,a+684|0,J[(H[a+8>>2]!=5?53522:I[b+13|0]&64?b+14|0:53522)>>1]);lb(a+400|0,a+732|0);e=L[a+40>>2];c=H[b>>2];f=O(O(O(O(L[c+232>>2]*L[c+236>>2])*L[(H[a+552>>2]<<2)+53116>>2])*L[a+748>>2])/L[13381]);if(I[58861]==1){d=O(L[13457]*L[13473])}else{d=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}d=O(f*d);if(!(e<d)){break c}L[a+40>>2]=d;e=d}if(I[a+20|0]==1){b=H[b>>2];d=O(L[b+268>>2]*L[b+232>>2]);L[a+44>>2]=d;L[a+40>>2]=e+d}La[H[H[a>>2]+68>>2]](a)}function Rh(a,b,c){var d=0,e=0;d=H[14025];e=I[a|0];a:{if(c){Mb(b,0,7723,e,d);Vf(b,5181,(I[a+1|0]|I[a+2|0]<<8)>>>7&31);c=I[a+1|0]|I[a+2|0]<<8;if(c&112){gb(b,G[29370]+1|0);Za(Za(Za(b,15159),H[((I[a+1|0]|I[a+2|0]<<8)>>>2&28)+31840>>2]),30283);c=I[a+1|0]|I[a+2|0]<<8}if(c&15){gb(b,G[29370]+1|0);Za(Za(Za(b,15182),H[(((I[a+1|0]|I[a+2|0]<<8)&15)<<2)+31872>>2]),30283);c=I[a+1|0]|I[a+2|0]<<8}if(c<<16>>16<0){gb(b,G[29370]+1|0);Za(Za(Za(b,14962),(I[a+1|0]|I[a+2|0]<<8)<<16>>16>=0?9508:9360),30283);c=I[a+1|0]|I[a+2|0]<<8}a=c>>>12&7;if(!a){break a}Mb(b,0,5e3,a,H[14030]);return}Mb(b,0,7730,e,d);Vf(b,5188,(I[a+1|0]|I[a+2|0]<<8)>>>7&31);c=I[a+1|0]|I[a+2|0]<<8;if(c&112){gb(b,G[29370]+1|0);Za(Za(Za(b,15166),H[((I[a+1|0]|I[a+2|0]<<8)>>>2&28)+31840>>2]),30283);c=I[a+1|0]|I[a+2|0]<<8}if(c&15){gb(b,G[29370]+1|0);Za(Za(Za(b,15189),H[(((I[a+1|0]|I[a+2|0]<<8)&15)<<2)+31872>>2]),30283);c=I[a+1|0]|I[a+2|0]<<8}d=c>>>12&7;if(d){Mb(b,0,5007,d,H[14030]);c=I[a+1|0]|I[a+2|0]<<8}if(c<<16>>16>=0){break a}gb(b,G[29370]+1|0);Za(Za(Za(b,14969),(I[a+1|0]|I[a+2|0]<<8)<<16>>16>=0?9508:9360),30283)}}function yq(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0;if((c|0)==(d|0)){return-4}g=H[a+72>>2];a:{b:{c:{if((c+1|0)==(d|0)){f=-1;if(!b){break a}i=I[a+69|0];if((i-3&255)>>>0<3){break a}h=I[c|0];j=h-239|0;if(j>>>0>16|!(1<<j&98305)){break c}if(!i){break b}break a}d:{e:{f:{i=I[c+1|0];h=I[c|0];f=i|h<<8;if((f|0)!=15360){if((f|0)==61371){break e}if((f|0)==65534){break f}if((f|0)!=65279){break d}if(I[a+69|0]?0:b){break b}H[e>>2]=c+2;H[g>>2]=38164;return 14}f=I[a+69|0];g:{if((f|0)!=4){if(!b|(f|0)!=3){break g}break b}if(b){break b}}H[g>>2]=38528;return La[H[(b<<2)+38528>>2]](38528,c,d,e)|0}if(I[a+69|0]?0:b){break b}H[e>>2]=c+2;H[g>>2]=38528;return 14}h:{if(!b){break h}f=I[a+69|0];if(f>>>0>5){break h}if(1<<f&57){break b}}if((c+2|0)==(d|0)){return-1}if(I[c+2|0]!=191){break b}H[e>>2]=c+3;H[g>>2]=37800;return 14}if(!h){if(I[a+69|0]==5?b:0){break b}H[g>>2]=38164;return La[H[(b<<2)+38164>>2]](38164,c,d,e)|0}if(b|i){break b}H[g>>2]=38528;f=xq(38528,c,d,e);break a}if(!h|(h|0)==60){break a}}a=H[(F[a+69|0]<<2)+37408>>2];H[g>>2]=a;return La[H[a+(b<<2)>>2]](a,c,d,e)|0}return f}function sp(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;e=Ha-176|0;Ha=e;while(1){f=H[b>>2];if(!(!f|I[f|0]!=45)){d=f+1|0;c=Gi(H[a>>2],H[a+8>>2],d);a:{b:{if(c){H[c+16>>2]=H[c+16>>2]+1;if(I[c+4|0]==1){f=b+4|0;c=H[b+4>>2];if(c){H[e+48>>2]=c;eb(45864,19216,e+48|0);if(kq(Fa(c|0,e+80|0)|0)){break a}b=Xa(40);nq(b);g=b,h=qb(c),H[g>>2]=h;lq(b);d=H[b>>2];c:{if(!d){d=H[b+4>>2];break c}d=mf(d,6715);H[b+4>>2]=d}d:{e:{f:{if(d){if(F[b+8|0]&1){break f}G[b+32>>1]=257;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;while(1){d=Ip(b);if(!d){break e}Wc(c,qb(d));continue}}F[b+8|0]=1}H[e+32>>2]=c;Wa(23066,e+32|0);break d}Wc(c,0);sp(a,H[c>>2]);Xd(c);nb(c);Va(c)}Va(bq(b));break a}db();H[e+16>>2]=d;Wa(23937,e+16|0);break a}if(I[c+1|0]!=1){break b}f=b+4|0;if(H[b+4>>2]){b=H[c+12>>2];if(!b){b=Xa(16);H[b>>2]=0;H[b+4>>2]=10;H[b+8>>2]=0;H[b+12>>2]=0;H[c+12>>2]=b}if(I[c+3|0]==1){Va(H[b+12>>2]>0?H[H[b>>2]>>2]:0);Ld(H[c+12>>2],0,qb(H[f>>2]));break a}Wc(b,qb(H[f>>2]));break a}db();H[e+64>>2]=d;Wa(25413,e- -64|0);break a}db();H[e>>2]=d;Wa(24814,e)}f=b}b=f+4|0;continue}break}Ha=e+176|0}function as(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=O(0),j=0,k=0,l=O(0);d=Ha-16|0;Ha=d;Qc(a,b,c);H[a+40>>2]=0;H[a+44>>2]=0;j=H[a+16>>2];k=H[a+20>>2];g=H[a+12>>2];H[d+12>>2]=0;H[d+8>>2]=0;H[d+4>>2]=0;e=H[a+528>>2];if(e){je(e+60|0,a+60|0);f=H[a+528>>2];La[H[H[f>>2]+20>>2]](f,b,c);f=H[a+528>>2];Xg(f,d+12|0,d+8|0,d+4|0);e=H[f+12>>2];h=H[f+24>>2];_c(a+284|0,f+284|0);f=(h|0)>0?h:0;g=(e|0)<(g|0)?g:e}e=H[a+532>>2];if(e){je(e+60|0,a+60|0);e=H[a+532>>2];La[H[H[e>>2]+20>>2]](e,b,c);c=H[a+532>>2];Xg(c,d+12|0,d+8|0,d+4|0);e=H[c+12>>2];h=H[c+24>>2];_c(a+396|0,c+396|0);f=(f|0)>(h|0)?f:h;g=(e|0)<(g|0)?g:e}i=L[d+4>>2];l=L[d+8>>2];L[a+40>>2]=i>O(0)?i:l>O(0)?l:L[d+12>>2];c=H[a+528>>2];if(c){H[c+16>>2]=j;H[c+12>>2]=g;F[c+20|0]=k}c=H[a+532>>2];if(c){H[c+16>>2]=j;H[c+12>>2]=g;F[c+20|0]=k}H[a+24>>2]=f;H[a+12>>2]=11;c=H[a+528>>2];if(c){La[H[H[c>>2]+64>>2]](c,L[a+40>>2],1)}c=H[a+532>>2];if(c){La[H[H[c>>2]+64>>2]](c,L[a+40>>2],1)}if(I[a+20|0]==1){b=H[b>>2];i=O(L[b+268>>2]*L[b+232>>2]);L[a+44>>2]=i;L[a+40>>2]=i+L[a+40>>2]}La[H[H[a>>2]+68>>2]](a);Ha=d+16|0}function Et(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=O(0),h=O(0);e=Ha-16|0;Ha=e;Qc(a,b,c);a:{if(H[a+36>>2]==13){g=O(O(O(L[a+528>>2]*(I[b+13|0]&64?O(-1):O(1)))+L[a+532>>2])*O(.5));d=H[a+540>>2];h=L[a+536>>2];b:{c:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break c;default:break b}}H[c+68>>2]=d;L[c+64>>2]=h;L[c+60>>2]=g;zk(c,a+284|0);b=H[a+8>>2]}if((b&-2)!=4){break a}H[c+140>>2]=d;L[c+136>>2]=h;L[c+132>>2]=g;zk(c+72|0,a+396|0);break a}d:{e:{f:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break f;default:break e}}c=I[b+13|0];if(!(c&64)&(d&-2)==4){break d}H[e+12>>2]=0;H[e+4>>2]=0;H[e+8>>2]=0;f=a+600|0;d=e+4|0;yk(a,f,d,H[b>>2]+232|0,(c&32)>>>5|0);lb(a+288|0,d);if((H[a+8>>2]&-2)!=4){break a}xk(f,a+672|0,J[b+14>>1]);Oe(I[b+14|0],d);lb(a+400|0,d);break a}if((d&-2)!=4){break a}c=I[b+13|0]}H[e+12>>2]=0;H[e+4>>2]=0;H[e+8>>2]=0;d=a+672|0;f=e+4|0;yk(a,d,f,H[b>>2]+232|0,(c&32)>>>5|0);lb(a+400|0,f);g:{switch(H[a+8>>2]-3|0){case 0:case 2:break g;default:break a}}xk(d,a+600|0,J[b+14>>1]);c=I[b+14|0];b=e+4|0;Oe(c,b);lb(a+288|0,b)}La[H[H[a>>2]+68>>2]](a);Ha=e+16|0}function Tl(a){var b=0,c=0,d=0,e=0,f=0;a:{while(1){if(!a){break a}b:{switch(H[a+20>>2]-1|0){case 0:c=I[a+48|0];if((c|0)!=1|I[a+49|0]!=1){break a}b=0;d=H[13232];c:{d:{if(!d){d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[13232]=d;if(F[a+48|0]&1){break d}break c}if(!c){break c}}if(I[a+49|0]!=1){break c}b=bl(Xa(52));H[b+20>>2]=H[a+20>>2];e=a+12|0;f=H[e+4>>2];c=b+12|0;H[c>>2]=H[e>>2];H[c+4>>2]=f;c=H[a+8>>2];H[b+4>>2]=H[a+4>>2];H[b+8>>2]=c;c=H[a+28>>2];H[b+24>>2]=H[a+24>>2];H[b+28>>2]=c;c=H[a+36>>2];H[b+32>>2]=H[a+32>>2];H[b+36>>2]=c;c=H[a+44>>2];H[b+40>>2]=H[a+40>>2];H[b+44>>2]=c;G[b+48>>1]=1;H[b+12>>2]=0;H[b+4>>2]=0;H[b+8>>2]=0;L[b+16>>2]=L[a+16>>2]-L[a+12>>2]}Pb(d,b);break a;case 2:d=H[a+24>>2];c=H[d+12>>2];b=c<<16>>16;if((b|0)<=0){break a}a=0;if((b|0)>(c|0)){continue}a=H[(H[d>>2]+(b<<2)|0)-4>>2];continue;case 1:break b;default:break a}}break}e=G[H[a+24>>2]+12>>1];b=0;while(1){c=b<<16>>16;if((c|0)>=(e|0)){break a}d=0;e:{if((c|0)<0){break e}f=H[a+24>>2];if((c|0)>=H[f+12>>2]){break e}d=H[H[f>>2]+(c<<2)>>2]}Tl(d);b=b+1|0;continue}}}function Ig(a,b,c,d,e,f,g){var h=0;a:{if((b|0)==(c|0)){H[d>>2]=0;break a}b:{h=td(a,b,c)-9|0;c:{if(h>>>0>23|!(1<<h&8388627)){break c}while(1){b=H[a+64>>2]+b|0;h=td(a,b,c)-9|0;if(1<<h&8388627?h>>>0<=23:0){continue}break}if((b|0)==(c|0)){H[d>>2]=0;break a}H[d>>2]=b;d:{e:{f:{while(1){g:{h=td(a,b,c);if(h-9>>>0<2){break g}if((h|0)==61){break f}if((h|0)==13|(h|0)==32){break g}if((h|0)==-1){break c}b=H[a+64>>2]+b|0;continue}break}H[e>>2]=b;while(1){b=H[a+64>>2]+b|0;e=td(a,b,c);h=e-9|0;if(h>>>0>23){break e}if(1<<h&8388627){continue}break}break e}H[e>>2]=b;break d}if((e|0)!=61){break c}}if(H[d>>2]==(b|0)){break c}while(1){b=H[a+64>>2]+b|0;d=td(a,b,c);if(d-9>>>0<2){continue}h:{switch(d-32|0){case 0:continue;case 2:break b;case 1:break c;default:break h}}if((d|0)==13){continue}break}if((d|0)==39){break b}}H[g>>2]=b;return 0}e=H[a+64>>2]+b|0;H[f>>2]=e;while(1){b=td(a,e,c);if((b|0)!=(d|0)){if(b-58>>>0>4294967285|(b&-33)-91>>>0>4294967269|((b|0)==95|b-45>>>0<2)){e=H[a+64>>2]+e|0;continue}else{H[g>>2]=e;return 0}}break}H[g>>2]=H[a+64>>2]+e}return 1}function Rf(a,b){var c=0,d=0,e=0,f=0,g=O(0),h=O(0),i=0;c=Ha+-64|0;Ha=c;e=I[a|0];d=H[a+72>>2];f=H[d>>2];i=H[d+8>>2];a:{if(!oc(a+20|0)){break a}g=L[a+32>>2];h=L[a+36>>2];if(g==O(0)&h==O(0)){break a}d=I[d+13|0];L[c+40>>2]=L[a+20>>2];L[c+44>>2]=L[a+24>>2];L[c+48>>2]=L[a+28>>2];if(!fh(b+40|0,(e|0)==(d>>>6&1),c+40|0,g,h)){break a}d=H[(H[f+72>>2]+(I[a|0]==(I[H[a+72>>2]+13|0]>>>6&1)?28:12)|0)+20>>2];if(!d){Sj(a);H[c+4>>2]=e?7985:7971;H[c>>2]=i;Wa(21896,c);F[H[a+72>>2]+12|0]=0;break a}H[c+36>>2]=0;H[c+28>>2]=0;H[c+32>>2]=0;H[c+24>>2]=0;H[c+20>>2]=0;e=H[a+16>>2];H[c+12>>2]=e;H[c+16>>2]=e;e=c+28|0;rc(f,0,c+12|0,e,c+24|0,c+20|0);f=H[c+24>>2];b:{if(f){Ih(H[a+72>>2],b+16|0,d,f,e);break b}Sj(a);Wa(15707,0);bc(a+16|0,H[14711]);Wa(26355,0);F[H[a+72>>2]+12|0]=0}g=L[a+12>>2];e=H[a+8>>2];d=b+4|0;Rj(a,d,H[a+4>>2]);c:{if((H[a+8>>2]&16777215)==(H[14678]&16777215)){break c}H[c+60>>2]=0;H[c+52>>2]=0;H[c+56>>2]=0;Rj(a,c+52|0,e);if(!(L[c+52>>2]!=O(0)|L[c+56>>2]!=O(0))&L[c+60>>2]==O(0)){break c}Ud(d,c+52|0,g)}H[b+56>>2]=H[H[a+56>>2]+236>>2]}Ha=c- -64|0}function io(a){var b=0;H[a+12>>2]=1065353216;H[a+4>>2]=0;H[a+8>>2]=1065353216;H[a>>2]=30588;b=16;while(1){ig(a+b|0);b=b+108|0;if((b|0)!=448){continue}break}H[a+480>>2]=0;H[a+484>>2]=0;H[a+476>>2]=1065353216;H[a+468>>2]=1082130432;H[a+472>>2]=1097859072;H[a+460>>2]=1084227584;H[a+464>>2]=0;H[a+452>>2]=1097859072;H[a+456>>2]=1028443341;H[a+448>>2]=3;H[a+636>>2]=0;H[a+640>>2]=1065353216;H[a+628>>2]=0;H[a+632>>2]=0;H[a+616>>2]=1181376512;H[a+620>>2]=1017370378;H[a+608>>2]=1065353216;H[a+612>>2]=1184645120;H[a+600>>2]=0;H[a+604>>2]=0;H[a+592>>2]=1065353216;H[a+596>>2]=0;H[a+584>>2]=0;H[a+588>>2]=0;H[a+576>>2]=1065353216;H[a+580>>2]=0;H[a+568>>2]=0;H[a+572>>2]=0;H[a+560>>2]=1065353216;H[a+564>>2]=0;H[a+552>>2]=0;H[a+556>>2]=0;H[a+544>>2]=1065353216;H[a+548>>2]=0;H[a+536>>2]=0;H[a+540>>2]=0;H[a+528>>2]=1065353216;H[a+532>>2]=0;H[a+520>>2]=0;H[a+524>>2]=0;H[a+512>>2]=1065353216;H[a+516>>2]=0;H[a+504>>2]=0;H[a+508>>2]=0;H[a+496>>2]=1065353216;H[a+500>>2]=0;H[a+488>>2]=0;H[a+492>>2]=0;gf(a+564|0);gf(a+500|0);gf(a+484|0);gf(a+516|0)}function nj(a,b,c,d){var e=0,f=0,g=0,h=0;e=H[a+340>>2];h=e+80|0;a:{f=H[e+92>>2];if((f|0)==H[e+88>>2]){if(!Fb(h)){break a}f=H[e+92>>2]}H[e+92>>2]=f+1;F[f|0]=0;b=Tb(h,b,c,d);if(!b){break a}g=b+1|0;c=Fc(e+40|0,g,12);if(!c){break a}b:{if(H[c>>2]!=(g|0)){H[e+92>>2]=H[e+96>>2];break b}f=H[e+92>>2];H[e+96>>2]=f;if(!I[a+232|0]){break b}c:{a=I[g|0];if((a|0)!=120|I[b+2|0]!=109|(I[b+3|0]!=108|I[b+4|0]!=110)){break c}if(I[b+5|0]!=115){break c}d=I[b+6|0];d:{if((d|0)!=58){if(d){break c}a=e+132|0;break d}a=Fc(e+60|0,b+7|0,8)}F[c+9|0]=1;H[c+4>>2]=a;break b}d=0;while(1){a=a&255;if(!a){break b}if((a|0)==58){a=0;while(1){e:{b=H[e+88>>2];if((a|0)==(d|0)){break e}if((b|0)==(f|0)){if(!Fb(h)){break a}f=H[e+92>>2]}b=I[a+g|0];H[e+92>>2]=f+1;F[f|0]=b;a=a+1|0;f=H[e+92>>2];continue}break}if((b|0)==(f|0)){if(!Fb(h)){break a}f=H[e+92>>2]}H[e+92>>2]=f+1;F[f|0]=0;a=Fc(e+60|0,H[e+96>>2],8);H[c+4>>2]=a;b=H[a>>2];a=H[e+96>>2];if((b|0)==(a|0)){H[e+96>>2]=H[e+92>>2];break b}H[e+92>>2]=a}else{d=d+1|0;a=I[g+d|0];continue}break}}return c}return 0}function qt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=Ha-32|0;Ha=d;ie(a,b,c);L[d+20>>2]=L[a+528>>2];L[d+24>>2]=L[a+532>>2];L[d+28>>2]=L[a+536>>2];Od(b,c,5517,d+20|0);L[d+8>>2]=L[a+540>>2];L[d+12>>2]=L[a+544>>2];L[d+16>>2]=L[a+548>>2];Od(b,c,5510,d+8|0);Mb(b,c,9323,H[a+552>>2],H[14599]);Nd(b,c,4195,L[a+556>>2],L[a+560>>2]);if(I[a+564|0]==1){a:{if(c){e=15223;f=15010;break a}gb(b,G[29370]+1|0);e=30283;f=15011}Za(Za(Za(b,f),I[a+564|0]?9360:9508),e)}if(I[a+565|0]==1){b:{if(c){e=15223;f=14990;break b}gb(b,G[29370]+1|0);e=30283;f=14991}Za(Za(Za(b,f),I[a+565|0]?9360:9508),e)}Nd(b,c,10566,L[a+568>>2],L[a+572>>2]);Nd(b,c,7501,L[a+576>>2],L[a+580>>2]);Mb(b,c,9303,H[a+584>>2],H[14599]);Mb(b,c,6487,H[a+588>>2],H[14596]);Mb(b,c,9266,H[a+592>>2],H[14599]);Mb(b,c,9847,H[a+596>>2],H[14597]);Mb(b,c,9280,H[a+600>>2],H[14599]);Mb(b,c,6480,H[a+604>>2],H[14596]);Mb(b,c,9259,H[a+608>>2],H[14599]);if(J[a+612>>1]){e=b;c:{if(c){b=15223;c=15144;break c}gb(b,G[29370]+1|0);b=30283;c=15145}Za(bh(Za(e,c),G[a+612>>1]),b)}Ha=d+32|0}function Bd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;A(+a);c=v(1)|0;c=c&2147483647;e=!(v(0)|0)&(c|0)==2146435072|c>>>0<2146435072;A(+b);c=v(1)|0;c=c&2147483647;if(!(e&(!(v(0)|0)&(c|0)==2146435072|c>>>0<2146435072))){return a+b}A(+b);d=v(1)|0;c=v(0)|0;e=c;if(!(c|d-1072693248)){return lp(a)}A(+a);c=v(1)|0;h=d>>>30&2;f=h|c>>>31;a:{c=c&2147483647;b:{if(!(v(0)|c)){c:{switch(f-2|0){case 0:return 3.141592653589793;case 1:break c;default:break b}}return-3.141592653589793}d=d&2147483647;if(!(d|e)){break a}d:{if((d|0)==2146435072){if((c|0)!=2146435072){break d}return M[(f<<3)+44512>>3]}if(!((c|0)!=2146435072&d+67108864>>>0>=c>>>0)){break a}e:{if(h){g=0;if(d>>>0>c+67108864>>>0){break e}}g=lp(P(a/b))}a=g;f:{switch(f-1|0){case 0:return-a;case 1:return 3.141592653589793-(a+-12246467991473532e-32);case 2:break f;default:break b}}return a+-12246467991473532e-32+-3.141592653589793}a=M[(f<<3)+44544>>3]}return a}A(1.5707963267948966);c=v(1)|0;e=v(0)|0;A(+a);d=v(1)|0;v(0)|0;x(0,e|0);x(1,c&2147483647|d&-2147483648);return+z()}function fs(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=O(0),h=0,i=0,j=0,k=0,l=0;c=Ha-128|0;Ha=c;if(b){H[c+112>>2]=a;eb(b,21608,c+112|0);Pc(a,b);if(J[a+544>>1]){_a(b,G[29370]);$a(16740,b);H[c+96>>2]=G[a+544>>1];eb(b,20430,c+96|0)}if(L[a+548>>2]!=O(0)){_a(b,G[29370]);g=L[a+548>>2];H[c+80>>2]=3;M[c+88>>3]=g;pb(b,19834,c+80|0)}if(L[a+552>>2]!=O(0)){_a(b,G[29370]);g=L[a+552>>2];H[c+64>>2]=3;M[c+72>>3]=g;pb(b,19815,c- -64|0)}if(J[a+556>>1]){_a(b,G[29370]);$a(16826,b);H[c+48>>2]=G[a+556>>1];eb(b,20430,c+48|0)}i=G[a+540>>1];Sb(b);H[c+32>>2]=i;eb(b,19045,c+32|0);G[29370]=J[29370]+1;f=a+576|0;while(1){d=h<<16>>16;if((d|0)>=(i|0)){G[29370]=J[29370]-1}else{Sb(b);e=H[a+560>>2];j=H[a+572>>2];if(h&65535){k=+L[((d|0)>0?(d|0)<=(j|0)?((d<<2)+e|0)-4|0:f:f)>>2]}else{k=0}l=e;e=d<<2;M[c+16>>3]=L[((d|0)>=0?(d|0)<(j|0)?l+e|0:f:f)>>2];M[c+8>>3]=k;H[c>>2]=d;pb(b,16182,c);a:{b:{if(!((d|0)<0|(d|0)>=H[a+540>>2])){d=H[H[a+528>>2]+e>>2];if(d){break b}}$a(14796,b);break a}La[H[H[d>>2]+72>>2]](d,b)}h=h+1|0;continue}break}}Ha=c+128|0}function qe(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;a:{c=I[a+1|0]|I[a+2|0]<<8;d=c&3968;e=I[a|0];if(!d&e-1>>>0>=11){break a}f=c&112;if(!(f?!e|!d:1)|!(c&4080|e)){break a}b:{c:{d:{if((e|0)==10){e:{switch((c>>>4&7)-3|0){case 0:b=c&61567|256;break b;case 1:break e;default:break d}}b=c&61567|2048;break b}if(e-7>>>0>4){break c}}if(!d){d=0;g=H[b>>2];f:{if(g>>>0>12){break f}h=1<<g;if(!(h&7032)){if(!(h&1158)){break f}d=Pd(12832);e=I[a|0];c=I[a+1|0]|I[a+2|0]<<8;break f}d=J[b+52>>1];if(d){break f}d=J[N(g,160)+54152>>1]}c=c&-3969|d<<7&3968;F[a+1|0]=c;F[a+2|0]=c>>>8}if((e|0)==7|f){break a}b=c&-113|32;break b}if(!d){break a}g:{switch(e-1|0){case 3:F[a|0]=9;b=c&65423|48;break b;case 4:F[a|0]=9;b=c&65423|64;break b;case 0:F[a|0]=9;b=c&65423|16;break b;case 2:F[a|0]=9;b=c&65423|32;break b;default:break g}}if(I[53764]){db();Wa(18720,0);bc(a,H[14711]);Lb();F[a|0]=9}if(e){break a}d=0;b=H[b>>2]-1|0;if(b>>>0<=11){d=H[(b<<2)+32e3>>2]}F[a|0]=d;if((d|0)==7|f){break a}b=(I[a+1|0]|I[a+2|0]<<8)&-113|32}F[a+1|0]=b;F[a+2|0]=b>>>8}}function hh(a,b,c,d,e){var f=O(0),g=0,h=O(0),i=0,j=O(0),k=O(0),l=O(0),m=0,n=0,o=O(0),p=O(0),q=O(0),r=O(0),s=O(0);g=Ha-48|0;Ha=g;k=L[d+12>>2];o=L[d+8>>2];h=L[d+4>>2];f=L[d>>2];mc(a+4|0,b+4|0,c+4|0,f);mc(a+16|0,b+16|0,c+16|0,f);mc(a+28|0,b+28|0,c+28|0,f);i=b+40|0;m=c+40|0;f=Ao(i,m);d=g+32|0;rb(d,I[a|0]?52932:52960);L[g+32>>2]=-L[g+32>>2];L[g+36>>2]=-L[g+36>>2];L[g+40>>2]=-L[g+40>>2];n=g+16|0;rb(n,i);Qb(n,d);rb(g,m);Qb(g,d);d=L[g+12>>2]>=O(0)^L[g+28>>2]>=O(0);i=!d;f=d?O(-f):f;a:{if(O(O(1)-f)<O(9999999747378752e-20)){f=O(O(1)-h);break a}f=Ed(f);l=ec(O(h*f));j=ec(f);f=O(sn((1-+h)*+f)/+j);h=O(l/j)}j=L[b+40>>2];l=L[c+40>>2];p=L[b+44>>2];q=L[c+44>>2];r=L[b+48>>2];s=L[c+48>>2];h=i?h:O(-h);L[a+52>>2]=O(f*L[b+52>>2])+O(h*L[c+52>>2]);L[a+48>>2]=O(f*r)+O(h*s);L[a+44>>2]=O(f*p)+O(h*q);L[a+40>>2]=O(f*j)+O(h*l);d=H[c+56>>2];L[a+60>>2]=e?o:O(1);H[a+56>>2]=d;h=O(O(1)-k);L[a+64>>2]=O(L[b+64>>2]*h)+O(k*L[c+64>>2]);L[a+68>>2]=O(L[b+68>>2]*h)+O(k*L[c+68>>2]);L[a+72>>2]=L[c+72>>2];jb(a+76|0,c+76|0,36);Ha=g+48|0}function mf(a,b){var c=0,d=0,e=0,f=0,g=0;f=Ha-16|0;Ha=f;a:{b:{if(!Ge(11416,F[b|0])){H[12604]=28;break b}c=2;if(!Ge(b,43)){c=I[b|0]!=114}c=Ge(b,120)?c|128:c;c=Ge(b,101)?c|524288:c;e=c;g=c|64;c=I[b|0];e=(c|0)==114?e:g;e=(c|0)==119?e|512:e;H[f>>2]=438;H[f+4>>2]=0;c=kq(pa(-100,a|0,((c|0)==97?e|1024:e)|32768,f|0)|0);if((c|0)<0){break a}d=Ha-32|0;Ha=d;c:{d:{e:{if(!Ge(11416,F[b|0])){H[12604]=28;break e}a=ib(1176);if(a){break d}}a=0;break c}zb(a,0,144);e=I[b|0];if(!Ge(b,43)){H[a>>2]=(e|0)==114?8:4}f:{if((e|0)!=97){b=H[a>>2];break f}b=ka(c|0,3,0)|0;if(!(b&1024)){b=b|1024;H[d+16>>2]=b;H[d+20>>2]=b>>31;ka(c|0,4,d+16|0)|0}b=H[a>>2]|128;H[a>>2]=b}H[a+80>>2]=-1;H[a+48>>2]=1024;H[a+60>>2]=c;H[a+44>>2]=a+152;g:{if(b&8){break g}H[d>>2]=d+24;H[d+4>>2]=0;if(oa(c|0,21523,d|0)|0){break g}H[a+80>>2]=10}H[a+40>>2]=89;H[a+36>>2]=90;H[a+32>>2]=91;H[a+12>>2]=92;if(!I[60417]){H[a+76>>2]=-1}b=H[14761];H[a+56>>2]=b;if(b){H[b+52>>2]=a}H[14761]=a}Ha=d+32|0;d=a;if(a){break a}ja(c|0)|0}d=0}Ha=f+16|0;return d}function Kb(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0;h=Ha-16|0;Ha=h;H[h+12>>2]=e;g=Xa(20);F[g+4|0]=0;F[g+3|0]=(b|0)!=1;F[g+2|0]=0;F[g+1|0]=c;F[g|0]=(b|0)==2;b=qb(d);H[g+12>>2]=0;H[g+16>>2]=0;H[g+8>>2]=b;f=H[a+8>>2];d=H[f+12>>2];if((d|0)>=0){b=H[f+8>>2];a:{b:{if((b|0)>(d|0)){break b}c=H[f+4>>2];e=(c|0)>(d|0)?c:(d+(d>>>1|0)|0)+1|0;if((e|0)==(b|0)){break b}j=ib(e<<2);if(!j){if((b|0)>=(e|0)){break b}H[h+4>>2]=e;H[h>>2]=b;Wa(24414,h);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}c=d;b=0;if((d|0)>(e|0)){H[f+12>>2]=e;c=e}l=(c|0)>0?c:0;i=H[f>>2];while(1){if((b|0)==(l|0)){if(i){Va(i);c=H[f+12>>2]}H[f>>2]=j;b=e-c|0;i=(b|0)>0?b:0;b=0;while(1){if((b|0)!=(i|0)){H[(H[f>>2]+(c<<2)|0)+(b<<2)>>2]=0;b=b+1|0;continue}break}H[f+8>>2]=e;if((d|0)<H[f+12>>2]){break a}}else{k=b<<2;H[k+j>>2]=H[i+k>>2];b=b+1|0;continue}break}}H[f+12>>2]=d+1}H[H[f>>2]+(d<<2)>>2]=g;d=H[H[a+8>>2]+12>>2]}c=d-1|0;while(1){b=H[h+12>>2];H[h+12>>2]=b+4;b=H[b>>2];if(b){b=qb(b);ob(H[a>>2],b,c);Pb(H[a+4>>2],b);continue}break}Ha=h+16|0}function wk(a,b){var c=0,d=O(0);c=Ha-32|0;Ha=c;if(!(!(L[a>>2]!=O(0)|L[a+4>>2]!=O(0))&L[a+8>>2]==O(0))){_a(b,G[29370]);$a(17291,b);G[29370]=J[29370]+1;tb(a,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+12>>2]!=O(0)|L[a+16>>2]!=O(0))&L[a+20>>2]==O(0))){_a(b,G[29370]);$a(17276,b);G[29370]=J[29370]+1;tb(a+12|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+24>>2]!=O(0)|L[a+28>>2]!=O(0))&L[a+32>>2]==O(0))){_a(b,G[29370]);$a(17261,b);G[29370]=J[29370]+1;tb(a+24|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(L[a+60>>2]!=O(0)){_a(b,G[29370]);d=L[a+60>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,19893,c+16|0)}if(L[a+64>>2]!=O(0)){_a(b,G[29370]);d=L[a+64>>2];H[c>>2]=3;M[c+8>>3]=d;pb(b,19914,c)}if(!(!(L[a+36>>2]!=O(0)|L[a+40>>2]!=O(0))&L[a+44>>2]==O(0))){_a(b,G[29370]);$a(17218,b);G[29370]=J[29370]+1;tb(a+36|0,b,3);G[29370]=J[29370]-1;bb(10,b)}if(!(!(L[a+48>>2]!=O(0)|L[a+52>>2]!=O(0))&L[a+56>>2]==O(0))){_a(b,G[29370]);$a(18034,b);G[29370]=J[29370]+1;tb(a+48|0,b,3);G[29370]=J[29370]-1;bb(10,b)}Ha=c+32|0}function wh(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;b=Ha-48|0;Ha=b;f=qb(fb(a,5202));g=qb(fb(a,10056));h=qb(fb(a,10071));Tg(f);Tg(g);Tg(h);H[b+32>>2]=0;H[b+24>>2]=0;H[b+28>>2]=0;a:{if(!f){c=bd(b+24|0,11470);b:{if(F[c+11|0]>=0){H[b+16>>2]=H[c+8>>2];a=H[c+4>>2];H[b+8>>2]=H[c>>2];H[b+12>>2]=a;break b}a=b+8|0;i=H[c>>2];d=Ha-16|0;Ha=d;c:{d:{e=H[c+4>>2];e:{if(Si(e)){qf(a,e);break e}if(e>>>0>=2147483640){break d}of(d+8|0,pf(e)+1|0);c=H[d+8>>2];Yd(a,c);nf(a,H[d+12>>2]);_d(a,e);a=c}ae(a,i,e+1|0);Ha=d+16|0;break c}Re();B()}}H[b>>2]=0;e=Ha-16|0;Ha=e;H[e+12>>2]=b;a=Ha-144|0;Ha=a;a=jb(a,39776,144);c=b+36|0;H[a+44>>2]=c;H[a+20>>2]=c;d=-2-c|0;d=d>>>0>=2147483647?2147483647:d;H[a+48>>2]=d;d=c+d|0;H[a+28>>2]=d;H[a+16>>2]=d;jq(a,11133,b);if((c|0)!=-2){d=H[a+20>>2];F[d-((d|0)==H[a+16>>2])|0]=0}Ha=a+144|0;Ha=e+16|0;$c(bd(b+8|0,c));break a}bd(b+24|0,f)}if(g){bd(bd(b+24|0,11474),g)}if(h){bd(bd(b+24|0,11474),h)}Va(f);Va(g);Va(h);a=b+24|0;c=qb(F[b+35|0]<0?H[b+24>>2]:a);$c(a);Ha=b+48|0;return c}function bm(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;a:{f=H[a+8>>2];if(!f){break a}a=H[f+12>>2];if(!a){break a}l=(a|0)>0?a:0;b:{while(1){if((h|0)==(l|0)){a=0;while(1){if(H[f+12>>2]<=(a|0)){break b}b=bm(H[H[f>>2]+(a<<2)>>2]);c:{d:{e:{f:{switch(d|0){case 1:if((b|0)==2){break e}d=1;break c;case 2:if((b|0)==1){break e}d=2;break c;case 3:if((b|0)==4){break e}d=3;break c;case 0:break d;case 4:break f;default:break c}}if((b|0)==3){break e}d=4;break c}return 5}d=b}a=a+1|0;k=5;if((d|0)!=5){continue}break}break a}k=5;g=11463;b=H[H[f>>2]+(h<<2)>>2];e=H[b>>2];i=e;c=I[e|0];g:{if(!c){c=0;break g}j=6;h:{while(1){a=I[g|0];if((a|0)!=(c|0)|!a){break h}j=j-1|0;if(!j){break h}g=g+1|0;c=I[i+1|0];i=i+1|0;if(c){continue}break}c=0}}if(I[g|0]==(c|0)){break a}if(!Hb(e,7612)){break a}if(!Hb(e,10570)){break a}if(Hb(e,7918)){h=h+1|0;if(Hb(e,7730)){continue}}break}a=H[b+4>>2];if(!a){break b}if((Ch(fb(a,7730))&-4)==12){break a}if((Ch(fb(a,7723))&-4)==12){break a}}return 1}return k}function ef(a){var b=0,c=0,d=0;d=Ha-16|0;Ha=d;eg(a);a:{b:{c:{d:{e:{f:{g:{b=H[a+24>>2];switch(b-1|0){case 0:break c;case 3:break d;case 2:break e;case 1:break f;case 4:break g;default:break b}}b=Xa(24);a=H[a+36>>2];H[b>>2]=30868;H[b+4>>2]=H[a+4>>2];c=H[a+12>>2];H[b+8>>2]=H[a+8>>2];H[b+12>>2]=c;c=H[a+20>>2];H[b+16>>2]=H[a+16>>2];H[b+20>>2]=c;break a}b=Xa(40);a=H[a+36>>2];H[b>>2]=31020;H[b+4>>2]=H[a+4>>2];c=H[a+12>>2];H[b+8>>2]=H[a+8>>2];H[b+12>>2]=c;c=H[a+20>>2];H[b+16>>2]=H[a+16>>2];H[b+20>>2]=c;c=H[a+28>>2];H[b+24>>2]=H[a+24>>2];H[b+28>>2]=c;c=H[a+36>>2];H[b+32>>2]=H[a+32>>2];H[b+36>>2]=c;break a}b=Xa(72);a=H[a+36>>2];H[b>>2]=31148;H[b+4>>2]=H[a+4>>2];jb(b+8|0,a+8|0,64);break a}b=Xa(68);a=H[a+36>>2];H[b>>2]=31280;H[b+4>>2]=H[a+4>>2];jb(b+8|0,a+8|0,60);break a}b=Xa(24);a=H[a+36>>2];H[b>>2]=31412;H[b+4>>2]=H[a+4>>2];c=H[a+12>>2];H[b+8>>2]=H[a+8>>2];H[b+12>>2]=c;c=H[a+20>>2];H[b+16>>2]=H[a+16>>2];H[b+20>>2]=c;break a}H[d>>2]=b;Wa(27727,d);b=0}Ha=d+16|0;return b}function Fb(a){var b=0,c=0,d=0,e=0;c=H[a+16>>2];a:{b:{c:{b=H[a+4>>2];if(!b){d=H[a+8>>2]-c|0;break c}if(!c){H[a>>2]=b;H[a+4>>2]=H[b>>2];H[b>>2]=0;c=H[a>>2];b=c+8|0;H[a+16>>2]=b;c=H[c+4>>2];H[a+12>>2]=b;H[a+8>>2]=b+c;break b}d=H[a+8>>2]-c|0;if((d|0)>=H[b+4>>2]){break c}c=H[b>>2];H[b>>2]=H[a>>2];b=H[a+4>>2];H[a+4>>2]=c;H[a>>2]=b;c=b+8|0;b=H[a+16>>2];jb(c,b,H[a+8>>2]-b|0);c=H[a+16>>2];d=H[a>>2];b=d+8|0;H[a+16>>2]=b;H[a+12>>2]=b+(H[a+12>>2]-c|0);H[a+8>>2]=b+H[d+4>>2];break b}b=H[a>>2];if(!(!b|(c|0)!=(b+8|0))){c=b;b=d<<1;c=La[H[H[a+20>>2]+4>>2]](c,b+8|0)|0;H[a>>2]=c;if(!c){break a}H[c+4>>2]=b;d=H[a+16>>2];c=H[a>>2]+8|0;H[a+16>>2]=c;H[a+12>>2]=c+(H[a+12>>2]-d|0);H[a+8>>2]=b+c;return 1}e=(d|0)<1024?1024:d<<1;d=La[H[H[a+20>>2]>>2]](e+8|0)|0;if(!d){break a}H[d+4>>2]=e;H[d>>2]=H[a>>2];H[a>>2]=d;b=H[a+12>>2];c=H[a+16>>2];d:{if((b|0)==(c|0)){c=b;break d}jb(d+8|0,c,b-c|0);b=H[a+16>>2];c=H[a+12>>2]}d=d+8|0;H[a+16>>2]=d;H[a+12>>2]=d+(c-b|0);H[a+8>>2]=d+e}return 1}return 0}function yj(a){var b=0,c=0,d=0,e=0,f=0;d=Ha-16|0;Ha=d;b=H[a+348>>2];while(1){a:{if(!b){b=H[a+352>>2];if(!b){break a}H[a+352>>2]=0}c=H[b>>2];La[H[a+20>>2]](H[b+36>>2]);Mg(H[b+44>>2],a);La[H[a+20>>2]](b);b=c;continue}break}b=H[a+284>>2];while(1){b:{if(!b){b=H[a+288>>2];if(!b){break b}H[a+288>>2]=0}c=H[b+8>>2];La[H[a+20>>2]](b);b=c;continue}break}Mg(H[a+360>>2],a);Mg(H[a+356>>2],a);vf(a+400|0);vf(a+424|0);b=H[a+340>>2];if(b){e=H[a+460>>2];c=H[b+20>>2];H[d+8>>2]=c;H[d+12>>2]=c+(H[b+28>>2]<<2);f=b+20|0;while(1){c=Lg(d+8|0);if(c){if(!H[c+16>>2]){continue}La[H[a+20>>2]](H[c+20>>2]);continue}break}uf(b);uf(f);uf(b+40|0);uf(b+60|0);vf(b+80|0);vf(b+104|0);if(!e){La[H[a+20>>2]](H[b+164>>2]);La[H[a+20>>2]](H[b+144>>2])}La[H[a+20>>2]](b)}La[H[a+20>>2]](H[a+376>>2]);La[H[a+20>>2]](H[a+448>>2]);La[H[a+20>>2]](H[a+8>>2]);La[H[a+20>>2]](H[a+44>>2]);La[H[a+20>>2]](H[a+380>>2]);La[H[a+20>>2]](H[a+236>>2]);b=H[a+248>>2];if(b){La[b|0](H[a+240>>2])}La[H[a+20>>2]](a);Ha=d+16|0}function Am(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{if(b>>>0>=5){c=Za(a,15608);e=Ha-16|0;Ha=e;H[12729]=0;g=da(8,e+8|0,c|0)|0;d=H[12729];H[12729]=0;b:{c:{d:{e:{if((d|0)!=1){f:{if(!xg(I[g|0])){break f}d=e+4|0;Ff(d,H[(c+H[H[c>>2]-12>>2]|0)+28>>2]);H[12729]=0;h=$(9,H[e+4>>2])|0;f=H[12729];H[12729]=0;g:{h:{if((f|0)!=1){Md(d);d=Ti(e,c);f=H[H[c>>2]-12>>2];H[12729]=0;f=c+f|0;i=$(10,f|0)|0;j=H[12729];H[12729]=0;if((j|0)==1){break h}d=H[d>>2];H[12729]=0;b=la(13,h|0,d|0,f|0,i|0,b|0)|0;d=H[12729];H[12729]=0;if((d|0)==1){break h}if(b){break f}b=H[H[c>>2]-12>>2];H[12729]=0;fa(6,b+c|0,5);b=H[12729];H[12729]=0;if((b|0)!=1){break f}b=_(0)|0;break g}b=_(0)|0;Md(e+4|0);break g}b=_(0)|0}nd(g);break e}nd(g);break d}b=_(0)|0}ea(b|0)|0;b=H[H[c>>2]-12>>2];H[12729]=0;ia(12,b+c|0);b=H[12729];H[12729]=0;if((b|0)==1){break c}ga()}Ha=e+16|0;break b}a=aa()|0;H[12729]=0;ca(7);b=H[12729];H[12729]=0;if((b|0)!=1){ba(a|0);B()}_(0)|0;$d();B()}b=41;break a}b=b+49|0}ub(a,b<<24>>24)}function bh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;d=Ha-16|0;Ha=d;H[12729]=0;g=da(8,d+8|0,a|0)|0;c=H[12729];H[12729]=0;a:{b:{c:{if((c|0)!=1){d:{if(!xg(I[g|0])){break d}c=H[H[a>>2]-12>>2]+a|0;i=H[c+4>>2];e=d+4|0;Ff(e,H[c+28>>2]);H[12729]=0;c=$(9,H[d+4>>2])|0;f=H[12729];H[12729]=0;e:{f:{if((f|0)!=1){Md(e);e=Ti(d,a);f=H[H[a>>2]-12>>2];H[12729]=0;f=a+f|0;j=$(10,f|0)|0;h=H[12729];H[12729]=0;if((h|0)==1){break f}e=H[e>>2];H[12729]=0;h=c;c=b&65535;k=b;b=i&74;b=la(13,h|0,e|0,f|0,j|0,((b|0)==64?c:(b|0)==8?c:k)|0)|0;c=H[12729];H[12729]=0;if((c|0)==1){break f}if(b){break d}b=H[H[a>>2]-12>>2];H[12729]=0;fa(6,a+b|0,5);b=H[12729];H[12729]=0;if((b|0)!=1){break d}b=_(0)|0;break e}b=_(0)|0;Md(d+4|0);break e}b=_(0)|0}nd(g);break c}nd(g);break b}b=_(0)|0}ea(b|0)|0;b=H[H[a>>2]-12>>2];H[12729]=0;ia(12,a+b|0);b=H[12729];H[12729]=0;if((b|0)==1){break a}ga()}Ha=d+16|0;return a}a=aa()|0;H[12729]=0;ca(7);b=H[12729];H[12729]=0;if((b|0)!=1){ba(a|0);B()}_(0)|0;$d();B()}function El(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=O(0),i=O(0),j=O(0),k=O(0),l=0;c=Ha+-64|0;Ha=c;a:{if(!a){break a}b:{switch(H[a+12>>2]){case 1:a=H[a>>2];H[c+56>>2]=H[a+24>>2];d=H[a+20>>2];H[c+48>>2]=H[a+16>>2];H[c+52>>2]=d;d=H[a+12>>2];H[c+40>>2]=H[a+8>>2];H[c+44>>2]=d;d=H[a+4>>2];H[c+32>>2]=H[a>>2];H[c+36>>2]=d;d=Ck(c+32|0);break a;case 0:break a;default:break b}}d=We(Xa(28));c:{while(1){d:{b=e<<16>>16;if((b|0)>=H[a+12>>2]){b=H[d+24>>2];switch(H[b+12>>2]){case 1:break c;case 0:break d;default:break a}}f=0;e:{if((b|0)<0){g=65535;h=O(-1);i=O(1);j=O(1);k=O(1);b=0;break e}b=H[a>>2]+N(b,28)|0;i=L[b+24>>2];j=L[b+20>>2];k=L[b+16>>2];h=L[b+12>>2];f=H[b+8>>2];l=J[b+6>>1];g=J[b+4>>1];b=H[b>>2]}L[c+28>>2]=i;L[c+24>>2]=j;L[c+20>>2]=k;L[c+16>>2]=h;H[c+12>>2]=f;G[c+10>>1]=l;G[c+8>>1]=g;H[c+4>>2]=b;b=Ck(c+4|0);if(b){Pb(H[d+24>>2],b)}e=e+1|0;continue}break}La[H[H[d>>2]+4>>2]](d);d=0;break a}a=H[H[b>>2]>>2];Xc(b,0,0);La[H[H[d>>2]+4>>2]](d);d=a}Ha=c- -64|0;return d}function ht(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=O(0),g=O(0),h=0,i=O(0),j=0,k=O(0);e=Ha-32|0;Ha=e;Zc(a,b,c,d);a:{if(c<=O(0)){break a}f=O(L[a+40>>2]-L[a+44>>2]);if(f<=c){break a}h=H[a+528>>2];if(!h){break a}g=L[a+544>>2];i=L[13381];H[e+24>>2]=0;H[e+28>>2]=1065353216;H[e+16>>2]=0;H[e+20>>2]=0;c=O(O((d?c:O(f-c))/f)*O(i*g));if((h&-2)==4){H[e+8>>2]=0;c=(h|0)==4?O(-c):c;f=ec(c);L[e+12>>2]=f;j=e,k=O(-uc(c)),L[j+4>>2]=k;b:{c:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break c;default:break b}}Ab(b+76|0,e+4|0,L[a+536>>2],1);d=H[a+8>>2]}if((d&-2)!=4){break a}L[e+12>>2]=-f;Ab(b+188|0,e+4|0,L[a+536>>2],1);break a}f=L[a+536>>2];g=L[a+540>>2];Ab(e+16|0,a+548|0,O(O(O(f+g)*O(.5))+O(O(ec(c)*O(f-g))*O(.5))),1);d:{e:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break e;default:break d}}rb(b+76|0,e+16|0);d=H[a+8>>2]}if((d&-2)!=4){break a}if(H[a+528>>2]!=2){L[e+16>>2]=-L[e+16>>2];L[e+20>>2]=-L[e+20>>2];L[e+24>>2]=-L[e+24>>2]}rb(b+188|0,e+16|0)}Ha=e+32|0}function Jh(a,b,c,d){var e=0,f=0,g=O(0),h=O(0);e=Ha-32|0;Ha=e;a:{b:{if(c){if(oc(a+20|0)){break b}}if(!d){break a}if(L[a+32>>2]!=O(0)){break b}if(L[a+36>>2]==O(0)){break a}}c:{if(!(!I[a+40|0]&I[a+41|0]!=1)){gb(b,G[29370]);f=Za(Za(Za(b,12743),8768),30320);d:{if(!c){break d}if(!oc(a+20|0)){break d}L[e+20>>2]=L[a+20>>2];L[e+24>>2]=L[a+24>>2];L[e+28>>2]=L[a+28>>2];Od(f,0,6184,e+20|0);if(I[a+40|0]!=1){break d}gb(f,G[29370]+1|0);Za(Za(Za(f,15039),I[a+40|0]?9360:9508),30283)}e:{if(!d){break e}g=L[a+32>>2];h=L[a+36>>2];if(g==O(0)&h==O(0)){break e}Nd(f,0,6095,g,h);if(I[a+41|0]!=1){break e}gb(f,G[29370]+1|0);Za(Za(Za(f,15023),I[a+41|0]?9360:9508),30283)}gb(f,G[29370]);break c}gb(b,G[29370]);f=Za(ub(b,60),8768);f:{if(!c){break f}if(!oc(a+20|0)){break f}L[e+8>>2]=L[a+20>>2];L[e+12>>2]=L[a+24>>2];L[e+16>>2]=L[a+28>>2];Od(f,1,6184,e+8|0)}if(!d){break c}g=L[a+32>>2];h=L[a+36>>2];if(g==O(0)&h==O(0)){break c}Nd(f,1,6095,g,h)}Za(b,21445)}Ha=e+32|0}function Ae(a,b,c){var d=0,e=O(0),f=O(0),g=O(0),h=0,i=O(0),j=O(0),k=O(0);d=Ha-48|0;Ha=d;H[d+44>>2]=0;H[d+36>>2]=0;H[d+40>>2]=0;h=d+36|0;kf(h,b,c);e=sd(h);f=yc(b,c);g=O(e+O(f*f));a:{if(+g<1e-6){H[a+8>>2]=0;H[a+12>>2]=1065353216;H[a>>2]=0;H[a+4>>2]=0;break a}if(+e<1e-6){if(f>O(0)){H[a+8>>2]=0;H[a+12>>2]=1065353216;H[a>>2]=0;H[a+4>>2]=0;break a}e=L[b>>2];if(e==O(0)){H[a+8>>2]=0;H[a+12>>2]=0;H[a>>2]=1065353216;H[a+4>>2]=0;break a}f=L[b+8>>2];b:{if(!(!(e>O(0)&f>e)&(!(e<O(0))|!(e>f)))){g=L[b+4>>2];e=O(-f);f=O(0);break b}g=O(0);f=O(-L[b+4>>2])}L[d+32>>2]=g;L[d+28>>2]=e;L[d+24>>2]=f;H[d+20>>2]=0;H[d+12>>2]=0;H[d+16>>2]=0;c=d+12|0;kf(c,b,d+24|0);wb(c,O(O(1)/sd(b)));b=H[d+16>>2];c=H[d+12>>2];e=L[d+20>>2];H[a+12>>2]=0;L[a+8>>2]=e;H[a>>2]=c;H[a+4>>2]=b;break a}i=L[d+36>>2];j=L[d+40>>2];k=L[d+44>>2];f=O(W(O(O(O(f/O(W(g)))+O(1))*O(.5))));L[a+12>>2]=f;e=O(O(O(W(O(e/g)))/O(f+f))/O(W(e)));L[a+8>>2]=k*e;L[a+4>>2]=e*j;L[a>>2]=e*i}Ha=d+48|0}function lp(a){var b=0,c=0,d=0,e=0,f=0,g=0;A(+a);e=v(1)|0;v(0)|0;d=e&2147483647;if(d>>>0>=1141899264){A(1.5707963267948966);e=v(1)|0;d=v(0)|0;A(+a);b=v(1)|0;v(0)|0;x(0,d|0);x(1,e&2147483647|b&-2147483648);g=+z();A(+a);b=v(1)|0;e=v(0)|0;b=b&2147483647;return(b|0)==2146435072&(e|0)!=0|b>>>0>2146435072?a:g}a:{b:{if(d>>>0<=1071382527){b=-1;if(d>>>0>=1044381696){break b}break a}a=P(a);if(d>>>0<=1072889855){if(d>>>0<=1072037887){a=(a+a+-1)/(a+2);b=0;break b}a=(a+-1)/(a+1);b=1;break b}if(d>>>0<=1073971199){a=(a+-1.5)/(a*1.5+1);b=2;break b}a=-1/a;b=3}f=a*a;c=f*f;g=c*(c*(c*(c*(c*-.036531572744216916+-.058335701337905735)+-.0769187620504483)+-.11111110405462356)+-.19999999999876483);f=f*(c*(c*(c*(c*(c*.016285820115365782+.049768779946159324)+.06661073137387531)+.09090887133436507)+.14285714272503466)+.3333333333333293);if(d>>>0<=1071382527){return a-a*(g+f)}b=b<<3;a=M[b+44416>>3]-(a*(g+f)-M[b+44448>>3]-a);a=(e|0)<0?-a:a}return a}function jx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;a=H[b>>2];while(1){a:{if((a|0)==(c|0)){break a}g=I[a|0];h=g<<24>>24;b:{c:{d:{e:{f=I[a+1|0];switch(f|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break d;case 0:break e;default:break c}}if((h|0)<0){break d}f=H[d>>2];if((f|0)==(e|0)){break a}H[d>>2]=f+1;F[f|0]=h;break b}g=H[d>>2];if((e-g|0)<2){break a}H[d>>2]=g+1;F[g|0]=h>>>6&3|f<<2|192;f=H[d>>2];H[d>>2]=f+1;F[f|0]=h&63|128;break b}if(f-216>>>0>=4){g=H[d>>2];if((e-g|0)<3){break a}H[d>>2]=g+1;F[g|0]=f>>>4|224;g=H[d>>2];H[d>>2]=g+1;F[g|0]=f<<2&60|(h&192)>>>6|128;f=H[d>>2];H[d>>2]=f+1;F[f|0]=h&63|128;break b}i=H[d>>2];if((e-i|0)<4){break a}H[d>>2]=i+1;f=(f<<2&12|g>>>6)+1|0;F[i|0]=f>>>2|240;i=H[d>>2];H[d>>2]=i+1;F[i|0]=f<<4&48|g>>>2&15|128;g=I[a+3|0];f=I[a+2|0];i=H[d>>2];H[d>>2]=i+1;F[i|0]=g<<2&12|(h<<4&48|f>>>6)|128;h=H[d>>2];H[d>>2]=h+1;F[h|0]=f&63|128;a=a+2|0}a=a+2|0;continue}break}H[b>>2]=a}function Vw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;a=H[b>>2];while(1){a:{if((a|0)==(c|0)){break a}g=I[a+1|0];h=g<<24>>24;b:{c:{d:{e:{f=I[a|0];switch(f|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break d;case 0:break e;default:break c}}if((h|0)<0){break d}f=H[d>>2];if((f|0)==(e|0)){break a}H[d>>2]=f+1;F[f|0]=h;break b}g=H[d>>2];if((e-g|0)<2){break a}H[d>>2]=g+1;F[g|0]=h>>>6&3|f<<2|192;f=H[d>>2];H[d>>2]=f+1;F[f|0]=h&63|128;break b}if(f-216>>>0>=4){g=H[d>>2];if((e-g|0)<3){break a}H[d>>2]=g+1;F[g|0]=f>>>4|224;g=H[d>>2];H[d>>2]=g+1;F[g|0]=f<<2&60|(h&192)>>>6|128;f=H[d>>2];H[d>>2]=f+1;F[f|0]=h&63|128;break b}i=H[d>>2];if((e-i|0)<4){break a}H[d>>2]=i+1;f=(f<<2&12|g>>>6)+1|0;F[i|0]=f>>>2|240;i=H[d>>2];H[d>>2]=i+1;F[i|0]=f<<4&48|g>>>2&15|128;g=I[a+2|0];f=I[a+3|0];i=H[d>>2];H[d>>2]=i+1;F[i|0]=g<<2&12|(h<<4&48|f>>>6)|128;h=H[d>>2];H[d>>2]=h+1;F[h|0]=f&63|128;a=a+2|0}a=a+2|0;continue}break}H[b>>2]=a}function Cg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;g=Ha-16|0;Ha=g;H[a+272>>2]=b;H[a+264>>2]=45;a:{b:{c:{d:{e:{while(1){f:{H[g+12>>2]=0;e=H[a+144>>2];h=La[H[e>>2]](e,b,c,g+12|0)|0;e=H[g+12>>2];H[a+276>>2]=e;f=9;g:{h:{switch(h-11|0){default:i:{switch(h+4|0){case 1:break a;case 4:break c;case 0:break d;case 2:break e;case 3:break f;default:break i}}if((h|0)!=-15){break a}if(H[a+80>>2]){Rb(a,H[a+144>>2],b,e);if(H[a+464>>2]==2){f=35;break a}e=H[g+12>>2]}H[d>>2]=e;f=0;break a;case 4:if(!H[a+80>>2]){break g}Rb(a,H[a+144>>2],b,e);break g;case 0:if(Dg(a,H[a+144>>2],b,e)){break g}break b;case 1:case 3:break a;case 2:break h}}if(!Eg(a,H[a+144>>2],b,e)){break b}}b=H[g+12>>2];H[a+272>>2]=b;f=35;switch(H[a+464>>2]-2|0){case 0:break a;case 1:break d;default:continue}}break}if(!I[a+468|0]){break d}f=5;break a}if(!I[a+468|0]){break d}f=6;break a}H[d>>2]=b;f=0;break a}H[a+272>>2]=e;f=4;break a}f=1}Ha=g+16|0;return f|0}function ie(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=F[a+20|0]&1;e=H[a+12>>2];f=H[a+16>>2];if(d|(e|f)){a:{if(d){d=4096;break a}d=4121;b:{switch(f-1|0){case 2:d=3980;break a;case 0:break a;default:break b}}d=0;if((e|0)<0){break a}f=H[14598];if((e|0)>=H[f+8>>2]){break a}d=H[H[f+4>>2]+(e<<2)>>2]}qh(b,c,6239,d)}if(I[a+28|0]==1){c:{if(c){e=15223;d=15117;break c}gb(b,G[29370]+1|0);e=30283;d=15118}Za(Za(Za(b,d),I[a+28|0]?9360:9508),e)}if(I[a+29|0]==1){d:{if(c){e=15223;d=15200;break d}gb(b,G[29370]+1|0);e=30283;d=15201}Za(Za(Za(b,d),I[a+29|0]?9360:9508),e)}if(I[a+30|0]==1){e:{if(c){e=15223;d=15102;break e}gb(b,G[29370]+1|0);e=30283;d=15103}Za(Za(Za(b,d),I[a+30|0]?9360:9508),e)}if(I[a+31|0]==1){f:{if(c){e=15223;d=15080;break f}gb(b,G[29370]+1|0);e=30283;d=15081}Za(Za(Za(b,d),I[a+31|0]?9360:9508),e)}if(I[a+32|0]==1){g:{if(c){d=15066;c=15223;break g}gb(b,G[29370]+1|0);d=15067;c=30283}Za(Za(Za(b,d),I[a+32|0]?9360:9508),c)}}function ey(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{if(b){if(!c){break i}break h}b=a;a=(a>>>0)/(c>>>0)|0;Ia=b-N(a,c)|0;Ja=0;Ka=0;return a}if(!a){break g}break f}d=c-1|0;if(!(d&c)){break e}g=(Q(c)+33|0)-Q(b)|0;f=0-g|0;break c}Ia=0;a=(b>>>0)/0|0;Ja=b-N(a,0)|0;Ka=0;return a}d=32-Q(b)|0;if(d>>>0<31){break d}break b}Ia=a&d;Ja=0;if((c|0)==1){break a}d=fy(c);c=d&31;if((d&63)>>>0>=32){a=b>>>c|0}else{e=b>>>c|0;a=((1<<c)-1&b)<<32-c|a>>>c}Ka=e;return a}g=d+1|0;f=63-d|0}e=g&63;d=e&31;if(e>>>0>=32){e=0;h=b>>>d|0}else{e=b>>>d|0;h=((1<<d)-1&b)<<32-d|a>>>d}f=f&63;d=f&31;if(f>>>0>=32){b=a<<d;a=0}else{b=(1<<d)-1&a>>>32-d|b<<d;a=a<<d}if(g){d=c-1|0;k=(d|0)==-1?-1:0;while(1){i=e<<1|h>>>31;e=h<<1|b>>>31;f=k-(i+(e>>>0>d>>>0)|0)>>31;j=c&f;h=e-j|0;e=i-(e>>>0<j>>>0)|0;b=b<<1|a>>>31;a=l|a<<1;i=f&1;l=i;g=g-1|0;if(g){continue}break}}Ia=h;Ja=e;Ka=b<<1|a>>>31;return i|a<<1}Ia=a;Ja=b;a=0;b=0}Ka=b;return a}function Ct(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=O(0),g=O(0),h=0,i=O(0),j=O(0);e=Ha-32|0;Ha=e;Zc(a,b,c,d);a:{if(c<=O(0)|O(L[a+40>>2]-L[a+44>>2])<=c){break a}h=H[a+572>>2];i=L[a+560>>2];j=L[a+564>>2];if(!(h|(i!=O(0)|j!=O(0)))){break a}f=Bf(a,c,d);g=f;if(I[a+33|0]==1){g=Bf(a,c,d^1)}b:{c:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break c;default:break b}}H[e+28>>2]=0;H[e+20>>2]=0;H[e+24>>2]=0;d:{if(!(i==O(0)&j==O(0))){d=e+20|0;Ik(a+600|0,d,f);lb(d,a- -64|0);break d}mc(e+20|0,a- -64|0,a+288|0,f)}if(h){H[e+16>>2]=0;H[e+8>>2]=0;H[e+12>>2]=0;d=e+8|0;Yk(a+644|0,d,f);lb(e+20|0,d)}Ya(b+4|0,e+20|0);d=H[a+8>>2]}if((d&-2)!=4){break a}H[e+28>>2]=0;H[e+20>>2]=0;H[e+24>>2]=0;e:{if(!(L[a+560>>2]==O(0)&L[a+564>>2]==O(0))){d=e+20|0;Ik(a+672|0,d,f);lb(d,a+176|0);break e}mc(e+20|0,a+176|0,a+400|0,g)}if(H[a+572>>2]){H[e+16>>2]=0;H[e+8>>2]=0;H[e+12>>2]=0;d=a+716|0;a=e+8|0;Yk(d,a,g);lb(e+20|0,a)}Ya(b+116|0,e+20|0)}Ha=e+32|0}function Po(a,b,c,d,e,f,g,h){var i=0,j=O(0),k=O(0),l=O(0),m=O(0),n=O(0),o=O(0);i=Ha+-64|0;Ha=i;Ya(f,b);Oo(d,c,f);lb(f,e);c=i+52|0;Ya(c,a);lb(c,f);xb(c,b);Wa(15645,0);tb(f,H[14711],6);Lb();Wa(15826,0);tb(c,H[14711],6);Lb();k=L[f+4>>2];j=O(L[b+4>>2]-L[a+4>>2]);n=O(j*j);j=L[a>>2];l=O(L[b>>2]-j);o=O(l*l);l=L[a+8>>2];m=O(L[b+8>>2]-l);m=O(n+O(o+O(m*m)));j=O(L[f>>2]-j);n=O(j*j);j=O(L[f+8>>2]-l);j=O(W(O(m-O(n+O(j*j)))));L[f+4>>2]=j;k=O(j-k);M[i+16>>3]=k;L[i+56>>2]=L[i+56>>2]+k;Wa(15632,i+16|0);tb(f,H[14711],6);Lb();b=i+40|0;Ya(b,a);xb(b,c);k=_b(b);L[i+36>>2]=L[i+40>>2];H[i+32>>2]=0;L[i+28>>2]=-L[i+48>>2];a=i+28|0;k=Ci(O(k/O(W(m))));Ab(h,a,k,0);Wa(15750,0);tb(b,H[14711],6);Lb();Wa(15561,0);tb(a,H[14711],6);Lb();M[i>>3]=k;Wa(20172,i);Wa(15231,0);Id(h,H[14711]);Lb();L[g>>2]=-L[h>>2];L[g+4>>2]=-L[h+4>>2];L[g+8>>2]=-L[h+8>>2];L[g+12>>2]=L[h+12>>2];Bi(h,d);Wa(15283,0);Id(h,H[14711]);Lb();Ha=i- -64|0}function Nl(a,b,c,d){var e=0,f=0,g=0,h=0;h=Ha-48|0;Ha=h;a:{if(!d){break a}f=H[d+8>>2];if(!f){break a}g=H[f+12>>2];if(!(g<<16)){break a}if(!Hb(H[H[H[f>>2]>>2]>>2],8134)){d=g<<16>>16;g=(d|0)>0?d:0;while(1){if((e|0)==(g|0)){break a}d=0;d=H[f+12>>2]>(e|0)?H[H[f>>2]+(e<<2)>>2]:d;b:{if(Hb(H[d>>2],8134)){db();H[h+4>>2]=H[d>>2];H[h>>2]=a;Wa(28225,h);break b}Nl(a,b,c,d)}e=e+1|0;continue}}H[h+16>>2]=H[c+12>>2];f=0;F[h+47|0]=0;jc(h+35|0,12,11070,h+16|0);c:{if(!a){break c}e=a;d:{while(1){e:{f:{g:{h:{i:{g=I[e|0];switch(g-46|0){case 1:break g;case 0:break h;default:break i}}if((g|0)==58|(g|0)==92){break g}if(g){break f}e=f?f:e;if(!I[e|0]){break d}g=h+35|0;if(Hb(e,g)){break e}e=e-a|0;f=he(ib((Yb(g)+e|0)+1|0),a,e);yf(f+e|0,g);break c}f=e+1|0;break f}f=0}e=e+1|0;continue}break}f=qb(a);break c}g=h+35|0;e=e-a|0;f=he(ib((Yb(g)+e|0)+2|0),a,e);a=f+e|0;F[a|0]=46;yf(a+1|0,g)}gm(c,cm(f,b,d))}Ha=h+48|0}function Jc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=Ha-16|0;Ha=d;H[12729]=0;f=da(8,d+8|0,a|0)|0;c=H[12729];H[12729]=0;a:{b:{c:{if((c|0)!=1){d:{if(!xg(I[f|0])){break d}c=d+4|0;Ff(c,H[(H[H[a>>2]-12>>2]+a|0)+28>>2]);H[12729]=0;g=$(9,H[d+4>>2])|0;e=H[12729];H[12729]=0;e:{f:{if((e|0)!=1){Md(c);c=Ti(d,a);e=H[H[a>>2]-12>>2];H[12729]=0;e=a+e|0;h=$(10,e|0)|0;i=H[12729];H[12729]=0;if((i|0)==1){break f}c=H[c>>2];H[12729]=0;c=ua(11,g|0,c|0,e|0,h|0,+b)|0;g=H[12729];H[12729]=0;if((g|0)==1){break f}if(c){break d}c=H[H[a>>2]-12>>2];H[12729]=0;fa(6,a+c|0,5);c=H[12729];H[12729]=0;if((c|0)!=1){break d}c=_(0)|0;break e}c=_(0)|0;Md(d+4|0);break e}c=_(0)|0}nd(f);break c}nd(f);break b}c=_(0)|0}ea(c|0)|0;c=H[H[a>>2]-12>>2];H[12729]=0;ia(12,a+c|0);c=H[12729];H[12729]=0;if((c|0)==1){break a}ga()}Ha=d+16|0;return a}a=aa()|0;H[12729]=0;ca(7);d=H[12729];H[12729]=0;if((d|0)!=1){ba(a|0);B()}_(0)|0;$d();B()}function Gt(a){a=a|0;var b=0,c=0,d=0,e=0;b=md(Xa(744),a);H[b+588>>2]=0;H[b+592>>2]=0;H[b+560>>2]=0;H[b+564>>2]=0;H[b+552>>2]=0;H[b+544>>2]=0;H[b+548>>2]=0;H[b+536>>2]=0;H[b+528>>2]=0;H[b+532>>2]=0;H[b>>2]=32268;Bk(b+600|0);jb(b+4|0,a+4|0,524);a:{if((a|0)==(b|0)){d=H[a+556>>2];e=H[a+540>>2];c=H[a+572>>2];H[b+568>>2]=H[a+568>>2];H[b+572>>2]=c;H[b+584>>2]=H[a+584>>2];c=H[a+580>>2];H[b+576>>2]=H[a+576>>2];H[b+580>>2]=c;break a}L[b+528>>2]=L[a+528>>2];L[b+532>>2]=L[a+532>>2];L[b+536>>2]=L[a+536>>2];e=H[a+540>>2];L[b+544>>2]=L[a+544>>2];L[b+548>>2]=L[a+548>>2];L[b+552>>2]=L[a+552>>2];d=H[a+556>>2];L[b+560>>2]=L[a+560>>2];L[b+564>>2]=L[a+564>>2];c=H[a+572>>2];H[b+568>>2]=H[a+568>>2];H[b+572>>2]=c;c=H[a+580>>2];H[b+576>>2]=H[a+576>>2];H[b+580>>2]=c;H[b+584>>2]=H[a+584>>2];L[b+588>>2]=L[a+588>>2];L[b+592>>2]=L[a+592>>2]}H[b+556>>2]=d;H[b+540>>2]=e;jb(b+596|0,a+596|0,148);return b|0}
function Cb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=H[a+112>>2];d=H[a+116>>2];g=!!(b|d);h=b;c=H[a+4>>2];f=H[a+44>>2];b=c-f|0;i=b;e=b+H[a+120>>2]|0;b=H[a+124>>2]+(b>>31)|0;a:{b=e>>>0<i>>>0?b+1|0:b;if(!(((b|0)>=(d|0)&e>>>0>=h>>>0|(b|0)>(d|0))&g)){d=Ha-16|0;Ha=d;c=-1;b:{if(Xi(a)){break b}if((La[H[a+32>>2]](a,d+15|0,1)|0)!=1){break b}c=I[d+15|0]}Ha=d+16|0;d=c;if((c|0)>=0){break a}f=H[a+44>>2];c=H[a+4>>2]}H[a+112>>2]=-1;H[a+116>>2]=-1;H[a+104>>2]=c;d=f-c|0;c=d+e|0;b=(d>>31)+b|0;H[a+120>>2]=c;H[a+124>>2]=c>>>0<d>>>0?b+1|0:b;return-1}c=e+1|0;b=c?b:b+1|0;h=H[a+4>>2];f=H[a+8>>2];e=H[a+116>>2];i=e;g=H[a+112>>2];c:{if(!(e|g)){break c}e=g-c|0;g=i-(b+(c>>>0>g>>>0)|0)|0;j=f-h|0;i=j>>31;if((g|0)>=(i|0)&e>>>0>=j>>>0|(g|0)>(i|0)){break c}f=e+h|0}H[a+104>>2]=f;e=H[a+44>>2];f=e-h|0;c=f+c|0;b=(f>>31)+b|0;H[a+120>>2]=c;H[a+124>>2]=c>>>0<f>>>0?b+1|0:b;if(e>>>0>=h>>>0){F[h-1|0]=d}return d}function kb(a,b){var c=0,d=0,e=0,f=O(0),g=0;if(!(((C(a),v(2))&2147483647)>>>0<2139095041&((C(b),v(2))&2147483647)>>>0<=2139095040)){return O(a+b)}c=(C(b),v(2));if((c|0)==1065353216){return mp(a)}g=c>>>30&2;d=(C(a),v(2));e=g|d>>>31;a:{b:{d=d&2147483647;c:{if(!d){d:{switch(e-2|0){case 0:return O(3.1415927410125732);case 1:break d;default:break c}}return O(-3.1415927410125732)}c=c&2147483647;if((c|0)!=2139095040){if(!c|!((d|0)!=2139095040&d>>>0<=c+218103808>>>0)){break a}e:{if(g){f=O(0);if(c>>>0>d+218103808>>>0){break e}}f=mp(O(P(O(a/b))))}a=f;f:{switch(e-1|0){case 0:return O(-a);case 1:return O(O(3.1415927410125732)-O(a+O(8.742277657347586e-8)));case 2:break f;default:break c}}return O(O(a+O(8.742277657347586e-8))+O(-3.1415927410125732))}if((d|0)==2139095040){break b}a=L[(e<<2)+44496>>2]}return a}return L[(e<<2)+44480>>2]}return x(2,(C(a),v(2))&-2147483648|1070141403),D()}function ql(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;f=Ha-32|0;Ha=f;m=ll(f+12|0,a);a:{if(I[m|0]!=1){break a}h=H[H[a>>2]-12>>2]+a|0;d=H[h+4>>2];e=H[h+24>>2];i=gl(h);b:{if(!e){break b}g=H[h+12>>2];n=b+c|0;l=(d&176)==32?n:b;d=l-b|0;if((d|0)>0){if((La[H[H[e>>2]+48>>2]](e,b,d)|0)!=(d|0)){break b}}d=(c|0)<(g|0)?g-c|0:0;if((d|0)>0){g=f+20|0;b=g;j=Ha-16|0;Ha=j;c:{if(d>>>0<2147483640){d:{if(Si(d)){qf(b,d);break d}of(j+8|0,pf(d)+1|0);c=H[j+8>>2];Yd(b,c);nf(b,H[j+12>>2]);_d(b,d);b=c}k=Ha-16|0;Ha=k;F[k+15|0]=i;i=b;c=d;while(1){if(c){F[i|0]=I[k+15|0];c=c-1|0;i=i+1|0;continue}break}Ha=k+16|0;Zd(b+d|0,0);Ha=j+16|0;break c}Re();B()}b=La[H[H[e>>2]+48>>2]](e,F[f+31|0]<0?H[f+20>>2]:g,d)|0;$c(g);if((b|0)!=(d|0)){break b}}b=n-l|0;if((b|0)>0){if((La[H[H[e>>2]+48>>2]](e,l,b)|0)!=(b|0)){break b}}H[h+12>>2]=0;break a}cl(H[H[a>>2]-12>>2]+a|0,5)}nd(m);Ha=f+32|0;return a}function Gf(a){var b=0,c=0;H[a+48>>2]=0;H[a+52>>2]=0;H[a+40>>2]=-1027080192;H[a+44>>2]=-1027080192;H[a+32>>2]=-1027080192;H[a+36>>2]=-1027080192;H[a+24>>2]=-1027080192;H[a+28>>2]=0;H[a+16>>2]=-1027080192;H[a+20>>2]=-1027080192;H[a+8>>2]=0;H[a+12>>2]=-1027080192;F[a+4|0]=0;H[a>>2]=0;H[a+56>>2]=0;b=80;while(1){c=a+b|0;H[c+8>>2]=-1027080192;H[c+12>>2]=-1027080192;H[c>>2]=-1027080192;H[c+4>>2]=-1027080192;b=b+16|0;if((b|0)!=160){continue}break}H[a+180>>2]=-1;H[a+184>>2]=-1;H[a+176>>2]=-1027080192;H[a+168>>2]=-1027080192;H[a+172>>2]=-1027080192;H[a+160>>2]=-1027080192;H[a+164>>2]=-1027080192;H[a+204>>2]=0;H[a+208>>2]=0;H[a+188>>2]=-1;H[a+192>>2]=-1;H[a+196>>2]=-1;H[a+200>>2]=-1;F[a+209|0]=0;F[a+210|0]=0;F[a+211|0]=0;F[a+212|0]=0;F[a+213|0]=0;F[a+214|0]=0;F[a+215|0]=0;F[a+216|0]=0;c=a+60|0;b=0;while(1){if((b|0)!=5){H[c+(b<<2)>>2]=0;b=b+1|0;continue}break}return a}function Mh(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=Ha-16|0;Ha=e;F[a|0]=b;d=H[14678];H[a+20>>2]=0;H[a+24>>2]=0;H[a+16>>2]=d;H[a+12>>2]=1056964608;H[a+8>>2]=d;H[a+4>>2]=d;H[a+28>>2]=0;H[a+32>>2]=0;G[a+34>>1]=0;G[a+36>>1]=0;G[a+38>>1]=0;G[a+40>>1]=0;H[a+56>>2]=0;H[a+60>>2]=0;F[a+52|0]=1;H[a+44>>2]=-1073741824;H[a+48>>2]=-1073741824;d=a- -64|0;H[d>>2]=0;H[d+4>>2]=0;d=Gf(Xa(240));H[d+224>>2]=1056964608;H[d+228>>2]=0;H[d+220>>2]=0;f=I[c+13|0];H[d+236>>2]=0;F[d+233|0]=0;g=!(f&64)^b;F[d+232|0]=g;i=H[c+4>>2];a:{if(i){f=Xa(64);F[f+60|0]=0;g=(H[H[c>>2]+72>>2]+N(g,60)|0)+52|0;b:while(1){c:{b=0;if((h|0)==5){break c}while(1)if((b|0)==3){h=h+1|0;continue b}else{j=b<<2;k=N(h,12);H[j+(f+k|0)>>2]=H[(H[H[(g+k|0)+j>>2]+4>>2]<<2)+i>>2];b=b+1|0;continue}}break}H[d+236>>2]=f;break a}db();H[e+4>>2]=c;H[e>>2]=b?68:78;Wa(19073,e)}H[a+72>>2]=c;H[a+56>>2]=d;Ha=e+16|0;return a}function Cr(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=O(0),i=0,j=O(0),k=O(0),l=O(0),m=O(0),n=O(0);c=Ha-112|0;Ha=c;d=H[b+20>>2];e=H[b+16>>2];f=H[b+8>>2];g=H[b+4>>2];i=H[a+36>>2];h=L[b+28>>2];M[c+104>>3]=O(L[b+32>>2]*O(1e3));M[c+96>>3]=O(h*O(1e3));H[c+80>>2]=i;f=f-g>>2;H[c+84>>2]=f;e=d-e>>2;H[c+88>>2]=e;Y(48179,34151,c+80|0)|0;d=0;e=(e|0)>0?e:0;while(1){if((d|0)==(e|0)){e=0;f=(f|0)>0?f:0;while(1){if((e|0)!=(f|0)){d=H[H[b+4>>2]+(e<<2)>>2];h=L[d+12>>2];j=L[d+16>>2];k=L[d+20>>2];l=L[d+24>>2];m=L[d+28>>2];n=L[d+32>>2];g=H[a+36>>2];M[c+56>>3]=L[d+36>>2];M[c+48>>3]=n;M[c+40>>3]=m;M[c+32>>3]=l;M[c+24>>3]=k;M[c+16>>3]=j;H[c+4>>2]=d+4;H[c>>2]=g;M[c+8>>3]=h;Y(48339,34161,c|0)|0;e=e+1|0;continue}break}Ha=c+112|0}else{g=H[H[b+16>>2]+(d<<2)>>2];h=L[g+12>>2];i=H[a+36>>2];H[c+68>>2]=g+4;H[c+64>>2]=i;M[c+72>>3]=h;Y(48221,34157,c- -64|0)|0;d=d+1|0;continue}break}return 1}function Ul(a,b){var c=O(0),d=0,e=0,f=0,g=0,h=0;a:{while(1){if(!b){break a}b:{switch(H[b+20>>2]-1|0){case 0:e=I[b+48|0];c:{if((e|0)==1){d=12;if(I[b+49|0]){break c}}d=16}c=L[d+b>>2];if(!(c<a)){break a}c=O(a-c);if(!(c>O(0))){break a}if(I[b+49|0]==1){L[b+12>>2]=c+L[b+12>>2];L[b+16>>2]=c+L[b+16>>2]}d:{if(e){c=L[b+8>>2];break d}L[b+4>>2]=c+L[b+4>>2];c=O(c+L[b+8>>2]);L[b+8>>2]=c}if(!(a<c)){break a}L[b+8>>2]=a;a=O(O(c-a)/O(c-L[b+4>>2]));L[b+36>>2]=O(L[b+28>>2]*a)+O(L[b+36>>2]*O(O(1)-a));break a;case 2:e=H[b+24>>2];f=H[e+12>>2];d=f<<16>>16;if((d|0)<=0){break a}b=0;if((d|0)>(f|0)){continue}b=H[(H[e>>2]+(d<<2)|0)-4>>2];continue;case 1:break b;default:break a}}break}h=G[H[b+24>>2]+12>>1];d=0;while(1){e=d<<16>>16;if((e|0)>=(h|0)){break a}f=0;e:{if((e|0)<0){break e}g=H[b+24>>2];if((e|0)>=H[g+12>>2]){break e}f=H[H[g>>2]+(e<<2)>>2]}Ul(a,f);d=d+1|0;continue}}}function qv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=O(0),g=O(0),h=O(0),i=0;d=Ha-240|0;Ha=d;if(b){i=H[H[a+4>>2]>>2];e=L[a+8>>2];f=L[a+12>>2];g=L[a+16>>2];M[d+232>>3]=L[a+44>>2];H[d+224>>2]=c;M[d+216>>3]=g;H[d+208>>2]=c;M[d+200>>3]=f;H[d+192>>2]=c;M[d+184>>3]=e;H[d+180>>2]=c;H[d+176>>2]=i;pb(b,19573,d+176|0);Sb(b);e=L[a+20>>2];f=L[a+24>>2];g=L[a+28>>2];h=L[a+48>>2];H[d+160>>2]=c;H[d+144>>2]=c;H[d+128>>2]=c;M[d+168>>3]=h;M[d+152>>3]=g;M[d+136>>3]=f;H[d+112>>2]=c;M[d+120>>3]=e;pb(b,19539,d+112|0);Sb(b);e=L[a+32>>2];f=L[a+36>>2];g=L[a+40>>2];H[d+96>>2]=c;H[d+80>>2]=c;M[d+104>>3]=g;M[d+88>>3]=f;H[d+64>>2]=c;M[d+72>>3]=e;pb(b,29529,d- -64|0);Sb(b);e=L[a+52>>2];f=L[a+56>>2];g=L[a+64>>2];h=L[a+68>>2];H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+56>>3]=h;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,8944,d)}Ha=d+240|0}function kv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=0;d=Ha-256|0;Ha=d;if(b){j=H[H[a+4>>2]>>2];e=L[a+8>>2];f=L[a+12>>2];g=L[a+16>>2];h=L[a+44>>2];M[d+240>>3]=L[a+56>>2];H[d+232>>2]=c;M[d+224>>3]=h;H[d+216>>2]=c;M[d+208>>3]=g;H[d+200>>2]=c;M[d+192>>3]=f;H[d+184>>2]=c;M[d+176>>3]=e;H[d+168>>2]=c;H[d+164>>2]=a;H[d+160>>2]=j;pb(b,19461,d+160|0);Sb(b);e=L[a+20>>2];f=L[a+24>>2];g=L[a+28>>2];h=L[a+48>>2];i=L[a+60>>2];H[d+144>>2]=c;H[d+128>>2]=c;H[d+112>>2]=c;H[d+96>>2]=c;M[d+152>>3]=i;M[d+136>>3]=h;M[d+120>>3]=g;M[d+104>>3]=f;H[d+80>>2]=c;M[d+88>>3]=e;pb(b,19507,d+80|0);Sb(b);e=L[a+32>>2];f=L[a+36>>2];g=L[a+40>>2];h=L[a+52>>2];i=L[a+64>>2];H[d- -64>>2]=c;H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+72>>3]=i;M[d+56>>3]=h;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,19507,d)}Ha=d+256|0}function gk(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=Ha-48|0;Ha=d;H[d+44>>2]=0;e=H[H[a+72>>2]>>2];H[d+4>>2]=c;H[d+36>>2]=c;rc(e,0,d+4|0,0,d+40|0,d+44|0);a:{b:{c:{c=H[d+44>>2];if(!c){break c}e=H[c+24>>2];if(!e){break c}f=H[H[a+56>>2]+236>>2];Ya(b,e);g=wl(I[c+13|0]|I[c+14|0]<<8);if((g|0)==-1){break b}e=I[c+12|0]-7|0;h=(e&255)<<4;c=h&31;if((h&63)>>>0>=32){c=1>>>c|0}else{c=((1<<c)-1&1)<<32-c|-65534>>>c}c=(e&255)>>>0>=4?-1:c;e=N(g,12)+f|0;while(1){if(c<<16>>16<0){break b}f=d+20|0;Ya(f,b);vl(H[e+((c&65535)<<2)>>2],f,b);c=c-1|0;continue}}H[b+8>>2]=0;H[b>>2]=0;H[b+4>>2]=0;break a}H[d+28>>2]=0;H[d+32>>2]=1065353216;H[d+20>>2]=0;H[d+24>>2]=0;c=I[a|0];e=I[H[a+72>>2]+13|0];L[d+8>>2]=L[a+20>>2];L[d+12>>2]=L[a+24>>2];L[d+16>>2]=L[a+28>>2];f=1;g=d+20|0;fh(g,(c|0)==(e>>>6&1),d+8|0,L[a+32>>2],L[a+36>>2]);Xb(g,b)}Ha=d+48|0;return f}function So(a){var b=O(0),c=O(0),d=O(0),e=O(0),f=O(0);L[a+124>>2]=L[a+24>>2];b=L[a+8>>2];L[a+128>>2]=b;L[a+132>>2]=L[a+56>>2];c=L[a>>2];e=L[a+12>>2];d=O(e+O(.019999999552965164));c=c>d?c:d;L[a>>2]=c;d=L[a+48>>2];f=O(L[a+36>>2]+O(-.019999999552965164));L[a+48>>2]=d<f?d:f;Ro(c,e,O(L[a+20>>2]-b),a+60|0,a- -64|0,a+68|0,a+72|0);b=L[a+128>>2];c=O(L[a+32>>2]-b);a:{if(Qo(c,O(L[a+12>>2]-L[a+124>>2]),O(L[a+20>>2]-b),L[a+72>>2],a+104|0,a+92|0)){b=O(c-L[a+104>>2]);break a}b=L[a+92>>2];H[a+92>>2]=0}L[a+96>>2]=b;L[a+100>>2]=L[a+12>>2];Ro(L[a+48>>2],L[a+36>>2],O(L[a+44>>2]-L[a+132>>2]),a+76|0,a+80|0,a+84|0,a+88|0);b=L[a+132>>2];c=O(L[a+32>>2]-b);b:{if(Qo(c,O(L[a+36>>2]-L[a+124>>2]),O(L[a+44>>2]-b),L[a+88>>2],a+120|0,a+108|0)){b=O(c-L[a+120>>2]);break b}b=L[a+108>>2];H[a+108>>2]=0}L[a+112>>2]=b;L[a+116>>2]=L[a+36>>2]}function eg(a){var b=0,c=0;c=Ha-16|0;Ha=c;a:{if(H[a+36>>2]){break a}b:{c:{d:{e:{f:{g:{b=H[a+24>>2];switch(b-1|0){case 0:break c;case 3:break d;case 2:break e;case 1:break f;case 4:break g;default:break b}}b=Xa(24);H[b+8>>2]=0;H[b+12>>2]=0;H[b>>2]=30868;H[b+4>>2]=a;H[b+16>>2]=0;H[b+20>>2]=0;H[a+36>>2]=b;break a}b=Xa(40);H[b+8>>2]=0;H[b+12>>2]=0;H[b>>2]=31020;H[b+4>>2]=a;H[b+16>>2]=0;H[b+20>>2]=0;H[b+24>>2]=0;H[b+28>>2]=0;H[b+32>>2]=0;H[b+36>>2]=0;H[a+36>>2]=b;break a}b=Xa(72);H[b>>2]=31148;H[b+4>>2]=a;Jn(b);zb(b+8|0,0,36);H[a+36>>2]=b;break a}b=Xa(68);H[b+44>>2]=0;H[b+48>>2]=0;H[b>>2]=31280;H[b+4>>2]=a;H[b+52>>2]=0;In(b);zb(b+8|0,0,36);H[a+36>>2]=b;break a}b=Xa(24);H[b+16>>2]=0;H[b+20>>2]=1065353216;H[b+8>>2]=0;H[b+12>>2]=0;H[b>>2]=31412;H[b+4>>2]=a;H[a+36>>2]=b;break a}H[c>>2]=b;Wa(27727,c)}Ha=c+16|0}function Tm(a,b,c,d,e){var f=0,g=0;f=Ha+-64|0;Ha=f;H[f+48>>2]=0;H[f+40>>2]=0;H[f+44>>2]=0;H[f+36>>2]=0;H[f+28>>2]=0;H[f+32>>2]=0;H[f+24>>2]=0;H[f+16>>2]=0;H[f+20>>2]=0;H[f+12>>2]=0;H[f+4>>2]=0;H[f+8>>2]=0;g=0;a:{if(!te(a,b,f+40|0)){break a}g=0;if(!te(a,c,f+28|0)){break a}g=te(a,d,f+16|0)}H[f+60>>2]=0;H[f+52>>2]=0;H[f+56>>2]=0;c=f+52|0;Vb(c,f+40|0,f+16|0);xb(c,f+28|0);Ya(f+4|0,c);d=Wb(a,e);b:{if(!d){b=Wb(a,b);if(!b){break b}g=H[b+16>>2];if(!g){break b}d=qb(e);b=ln(Xa(56),d);Sm(c,H[13130],d);F[b+14|0]=I[f+54|0];G[b+12>>1]=J[f+52>>1];H[b+8>>2]=(H[b+12>>2]&16777215)==(H[14678]&16777215)?3:1;Pb(H[a+108>>2],b);ob(a+144|0,d,H[H[a+108>>2]+12>>2]-1|0);c=H[b+12>>2];if((c&16777215)!=(H[14678]&16777215)){$f(a+172|0,c,b)}hi(g,b);H[b+20>>2]=1028443341;H[b+16>>2]=g;break b}if(!g){break b}cg(d,f+4|0)}Ha=f- -64|0}function ux(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-4}h=a+72|0;e=b;a:{while(1){if((c|0)==(e|0)){break a}g=I[e|0];f=F[e+1|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+h|0]}g=3;b:{c:{d:{e:{f:{g:{h:{i:{j:{f=f&255;switch(f-2|0){case 7:break f;case 8:break g;case 0:break h;case 1:break i;case 5:break j;case 4:break c;case 2:case 3:case 6:break d;default:break e}}g=4;break c}if((b|0)!=(e|0)){break a}return Ag(a,b+2|0,c,d)|0}H[d>>2]=e;return 0}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 7}if((b|0)!=(e|0)){break a}a=b+2|0;if((a|0)==(c|0)){return-3}c=I[b+2|0];e=b+4|0;b=F[b+3|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+h|0]}H[d>>2]=(b|0)==10?e:a;return 7}if((f|0)==21){break b}}g=2}e=e+g|0;continue}break}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 39}H[d>>2]=e;return 6}function ex(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-4}h=a+72|0;e=b;a:{while(1){if((c|0)==(e|0)){break a}g=I[e+1|0];f=F[e|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+h|0]}g=3;b:{c:{d:{e:{f:{g:{h:{i:{j:{f=f&255;switch(f-2|0){case 7:break f;case 8:break g;case 0:break h;case 1:break i;case 5:break j;case 4:break c;case 2:case 3:case 6:break d;default:break e}}g=4;break c}if((b|0)!=(e|0)){break a}return zg(a,b+2|0,c,d)|0}H[d>>2]=e;return 0}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 7}if((b|0)!=(e|0)){break a}a=b+2|0;if((a|0)==(c|0)){return-3}c=I[b+3|0];e=b+4|0;b=F[b+2|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+h|0]}H[d>>2]=(b|0)==10?e:a;return 7}if((f|0)==21){break b}}g=2}e=e+g|0;continue}break}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 39}H[d>>2]=e;return 6}function il(a,b,c,d){var e=0,f=O(0),g=0,h=O(0),i=0,j=0,k=O(0);e=Ha-32|0;Ha=e;Ya(d,c);sc(d);H[e+28>>2]=0;H[e+20>>2]=0;H[e+24>>2]=0;c=e+20|0;xl(H[a+236>>2],c,b);k=yc(c,d);j=H[(I[a+232|0]<<2)+58704>>2];f=O(-1e5);i=65535;c=0;a:{while(1){g=H[j+12>>2];if((g|0)<=(c|0)){a=58712;if((i&65535)==65535){break a}}else{H[e+16>>2]=0;H[e+8>>2]=0;H[e+12>>2]=0;g=e+8|0;xl(H[a+236>>2],g,H[H[j>>2]+(c<<2)>>2]);h=yc(g,d);g=h>f;f=g?h:f;i=g?c:i;c=c+1|0;continue}break}a=i<<16>>16;if((a|0)<0|(a|0)>=(g|0)){a=0}else{a=H[H[j>>2]+(a<<2)>>2]}a=a+12|0}c=H[a>>2];a=c>>>8|0;c=c&255;b=H[b+12>>2];b:{if(!((c|0)!=(b&255)|(a&65535)!=(b>>>8&65535))){H[d+8>>2]=0;H[d>>2]=0;H[d+4>>2]=0;h=O(0);break b}b=H[14678];if((c|0)==(b&255)){h=O(0);if((a&65535)==(b>>>8&65535)){break b}}f=O(f-k);h=f<O(0)?O(-f):f;Gd(d,h)}Ha=e+32|0;return h}function vp(a,b,c){var d=0,e=0,f=0,g=0,h=0;f=Ha-16|0;Ha=f;e=H[a>>2];g=H[e-8>>2];H[f+12>>2]=g;H[f+4>>2]=a+g;H[f+8>>2]=H[e-4>>2];g=H[f+4>>2];h=H[f+8>>2];a:{if(Cc(h,c,0)){d=H[f+12>>2]?0:g;break a}e=Ha+-64|0;Ha=e;if((a|0)>=(g|0)){H[e+12>>2]=c;H[e+4>>2]=h;H[e+8>>2]=a;zb(e+16|0,0,36);H[e+60>>2]=0;H[e+52>>2]=1;H[e+56>>2]=16777216;La[H[H[h>>2]+20>>2]](h,e+4|0,g,g,1,0);d=H[e+28>>2]?a:0}Ha=e- -64|0;if(d){break a}d=Ha+-64|0;Ha=d;H[d+12>>2]=b;H[d+8>>2]=a;H[d+4>>2]=c;a=0;zb(d+16|0,0,43);H[d+60>>2]=0;F[d+59|0]=1;La[H[H[h>>2]+24>>2]](h,d+4|0,g,1,0);b:{c:{switch(H[d+40>>2]){case 0:a=H[d+44>>2]==1?H[d+32>>2]==1?H[d+36>>2]==1?H[d+24>>2]:0:0:0;break b;case 1:break c;default:break b}}if(H[d+28>>2]!=1){if(H[d+44>>2]|H[d+32>>2]!=1|H[d+36>>2]!=1){break b}}a=H[d+20>>2]}Ha=d- -64|0;d=a}Ha=f+16|0;return d}function mp(a){var b=0,c=0,d=O(0),e=O(0),f=0,g=O(0);f=(C(a),v(2));c=f&2147483647;if(c>>>0>=1283457024){return((C(a),v(2))&2147483647)>>>0>2139095040?a:(x(2,(C(a),v(2))&-2147483648|1070141402),D())}a:{b:{if(c>>>0<=1054867455){b=-1;if(c>>>0>=964689920){break b}break a}a=O(P(a));if(c>>>0<=1066926079){if(c>>>0<=1060110335){a=O(O(O(a+a)+O(-1))/O(a+O(2)));b=0;break b}a=O(O(a+O(-1))/O(a+O(1)));b=1;break b}if(c>>>0<=1075576831){a=O(O(a+O(-1.5))/O(O(a*O(1.5))+O(1)));b=2;break b}a=O(O(-1)/a);b=3}e=O(a*a);d=O(e*e);g=O(d*O(O(d*O(-.106480173766613))+O(-.19999158382415771)));d=O(e*O(O(d*O(O(d*O(.06168760731816292))+O(.14253635704517365)))+O(.333333283662796)));if(c>>>0<=1054867455){return O(a-O(a*O(g+d)))}b=b<<2;a=O(L[b+44384>>2]-O(O(O(a*O(g+d))-L[b+44400>>2])-a));a=(f|0)<0?O(-a):a}return a}function tx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-4}h=a+72|0;e=b;a:{while(1){if((c|0)==(e|0)){break a}g=I[e|0];f=F[e+1|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+h|0]}g=3;b:{c:{d:{e:{f:{g:{h:{i:{f=f&255;switch(f-3|0){case 6:break f;case 7:break g;case 0:break h;case 4:break i;case 3:break c;case 1:case 2:case 5:break d;default:break e}}g=4;break c}if((b|0)!=(e|0)){break a}return Ag(a,b+2|0,c,d)|0}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 7}if((b|0)!=(e|0)){break a}a=b+2|0;if((a|0)==(c|0)){return-3}c=I[b+2|0];e=b+4|0;b=F[b+3|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+h|0]}H[d>>2]=(b|0)==10?e:a;return 7}if((f|0)==30){break b}}g=2}e=e+g|0;continue}break}if((b|0)!=(e|0)){break a}a=tq(a,b+2|0,c,d);return((a|0)!=22?a:0)|0}H[d>>2]=e;return 6}function dx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-4}h=a+72|0;e=b;a:{while(1){if((c|0)==(e|0)){break a}g=I[e+1|0];f=F[e|0];if(f){f=cb(f,g<<24>>24)}else{f=I[g+h|0]}g=3;b:{c:{d:{e:{f:{g:{h:{i:{f=f&255;switch(f-3|0){case 6:break f;case 7:break g;case 0:break h;case 4:break i;case 3:break c;case 1:case 2:case 5:break d;default:break e}}g=4;break c}if((b|0)!=(e|0)){break a}return zg(a,b+2|0,c,d)|0}if((b|0)!=(e|0)){break a}H[d>>2]=b+2;return 7}if((b|0)!=(e|0)){break a}a=b+2|0;if((a|0)==(c|0)){return-3}c=I[b+3|0];e=b+4|0;b=F[b+2|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+h|0]}H[d>>2]=(b|0)==10?e:a;return 7}if((f|0)==30){break b}}g=2}e=e+g|0;continue}break}if((b|0)!=(e|0)){break a}a=oq(a,b+2|0,c,d);return((a|0)!=22?a:0)|0}H[d>>2]=e;return 6}function ll(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;H[a+4>>2]=b;F[a|0]=0;b=H[H[b>>2]-12>>2]+b|0;if(!H[b+16>>2]){b=H[b+72>>2];if(b){a:{e=Ha-16|0;Ha=e;b:{c:{if(!H[(b+H[H[b>>2]-12>>2]|0)+24>>2]){break c}H[12729]=0;d=da(8,e+8|0,b|0)|0;c=H[12729];H[12729]=0;d:{if((c|0)!=1){e:{if(!xg(I[d|0])){break e}c=H[(b+H[H[b>>2]-12>>2]|0)+24>>2];H[12729]=0;c=$(5,c|0)|0;f=H[12729];H[12729]=0;if((f|0)!=1){if((c|0)!=-1){break e}c=H[H[b>>2]-12>>2];H[12729]=0;fa(6,b+c|0,1);c=H[12729];H[12729]=0;if((c|0)!=1){break e}}c=_(0)|0;nd(d);break d}nd(d);break c}c=_(0)|0}ea(c|0)|0;d=H[H[b>>2]-12>>2];H[12729]=0;ia(12,b+d|0);b=H[12729];H[12729]=0;if((b|0)==1){break b}ga()}Ha=e+16|0;break a}a=aa()|0;H[12729]=0;ca(7);b=H[12729];H[12729]=0;if((b|0)!=1){ba(a|0);B()}_(0)|0;$d();B()}}F[a|0]=1}return a|0}function Yv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=O(0),h=O(0),i=O(0),j=0,k=O(0),l=0;f=G[a+4>>1];e=(f|0)>0?f:0;a=H[a+8>>2];g=O(O(L[H[a>>2]+28>>2]-L[H[a+4>>2]+28>>2])/O(3));h=L[b+4>>2];a:{while(1){if((d|0)!=(e|0)){l=a+(d<<2)|0;j=H[l>>2];i=L[j+28>>2];if(i==h){return Ai(j,b,c)|0}if(O(g+i)<h){if(!d){break a}a=Xa(136);f=H[l-4>>2];d=0;while(1){e=a+d|0;H[e+8>>2]=0;H[e>>2]=0;H[e+4>>2]=0;d=d+12|0;if((d|0)!=60){continue}break}d=0;zb(a+60|0,0,64);g=O(.5);k=L[f+28>>2];if(k!=i){g=O(O(h-k)/O(i-k))}while(1){if((d|0)!=5){e=N(d,12);mc(e+a|0,e+f|0,e+j|0,g);d=d+1|0;continue}break}So(a);b=Ai(a,b,c);Va(a);return b|0}else{d=d+1|0;continue}}break}a=H[(a+(f<<2)|0)-4>>2];if(O(L[a+28>>2]-g)<h){return Ai(a,b,c)|0}}a=H[b+4>>2];H[c>>2]=H[b>>2];H[c+4>>2]=a;H[c+8>>2]=H[b+8>>2];return 0}function uc(a){var b=O(0),c=0,d=0,e=0,f=0;f=Ha-16|0;Ha=f;e=(C(a),v(2));c=e&2147483647;a:{if(c>>>0<=1061752794){b=O(1);if(c>>>0<964689920){break a}b=Uc(+a);break a}if(c>>>0<=1081824209){if(c>>>0>=1075235812){b=O(-Uc(((e|0)<0?3.141592653589793:-3.141592653589793)+ +a));break a}d=+a;if((e|0)<0){b=Vc(d+1.5707963267948966);break a}b=Vc(1.5707963267948966-d);break a}if(c>>>0<=1088565717){if(c>>>0>=1085271520){b=Uc(((e|0)<0?6.283185307179586:-6.283185307179586)+ +a);break a}if((e|0)<0){b=Vc(-4.71238898038469-+a);break a}b=Vc(+a+-4.71238898038469);break a}b=O(a-a);if(c>>>0>=2139095040){break a}c=Fi(a,f+8|0);d=M[f+8>>3];b:{switch((c&3)-1|0){default:b=Uc(d);break a;case 0:b=Vc(-d);break a;case 1:b=O(-Uc(d));break a;case 2:break b}}b=Vc(d)}a=b;Ha=f+16|0;return a}function Eq(a,b,c,d){var e=0,f=0,g=0;a:{if((b|0)==(c|0)){break a}b:{c:{d:{if(I[b|0]!=45){break d}g=a+72|0;e=b+1|0;while(1){b=e;if((c|0)==(b|0)){break a}e:{f:{g:{h:{i:{j:{e=I[I[b|0]+g|0];switch(e|0){case 6:break i;case 5:break j;case 0:case 1:case 8:break d;case 2:case 3:case 4:break f;case 7:break h;default:break g}}if((c-b|0)<2){break b}if(La[H[a+352>>2]](a,b)|0){break d}e=b+2|0;continue}if((c-b|0)<3){break b}if(La[H[a+356>>2]](a,b)|0){break d}e=b+3|0;continue}if((c-b|0)<4){break b}if(La[H[a+360>>2]](a,b)|0){break d}e=b+4|0;continue}if((e|0)==27){break e}}e=b+1|0;continue}e=b+1|0;if((e|0)==(c|0)){break a}if(I[e|0]!=45){continue}break}f=-1;a=b+2|0;if((a|0)==(c|0)){break c}c=a;a=I[b+2|0]==62;b=a?b+3|0:c;f=a?13:0}H[d>>2]=b}return f}return-2}return-1}function Wn(a,b){var c=0,d=0,e=0,f=0,g=O(0),h=0,i=0,j=O(0),k=0;e=Ha-16|0;Ha=e;d=a+548|0;jf(d);f=a+532|0;jf(f);c=a+564|0;Vn(c,f,d);if(H[a+448>>2]==3){g=O(L[a+452>>2]*fg(L[a+460>>2],ti(c),L[a+8>>2]));L[a+472>>2]=g;L[a+468>>2]=O(g-L[a+456>>2])*O(.25)}g=L[a+464>>2];a:{if(!(g>O(0))){break a}j=ti(c);if(!(j>O(-g))|!(g>j)|F[a+624|0]&1){break a}h=H[a+584>>2];H[d>>2]=H[a+580>>2];H[d+4>>2]=h;h=H[a+592>>2];H[d+8>>2]=H[a+588>>2];H[d+12>>2]=h;Vn(c,f,d);gf(a+484|0);F[a+624|0]=1}k=a+500|0;yo(k,c,L[a+468>>2]);d=a+484|0;h=a+516|0;c=0;while(1){if((c|0)!=4){i=c<<2;L[i+h>>2]=L[i+k>>2]-L[d+i>>2];c=c+1|0;continue}break}c=a+596|0;yo(c,h,O(L[a+472>>2]/L[a+476>>2]));Un(c,L[a+612>>2]);rb(e,d);hf(e,b);xo(f,e);jf(f);si(f);rb(e,c);hf(e,b);xo(d,e);Un(d,L[a+616>>2]);Ha=e+16|0}function ec(a){var b=0,c=0,d=0,e=0;e=Ha-16|0;Ha=e;d=(C(a),v(2));c=d&2147483647;a:{if(c>>>0<=1061752794){if(c>>>0<964689920){break a}a=Vc(+a);break a}if(c>>>0<=1081824209){b=+a;if(c>>>0<=1075235811){if((d|0)<0){a=O(-Uc(b+1.5707963267948966));break a}a=Uc(b+-1.5707963267948966);break a}a=Vc(-(((d|0)>=0?-3.141592653589793:3.141592653589793)+b));break a}if(c>>>0<=1088565717){if(c>>>0<=1085271519){b=+a;if((d|0)<0){a=Uc(b+4.71238898038469);break a}a=O(-Uc(b+-4.71238898038469));break a}a=Vc(((d|0)<0?6.283185307179586:-6.283185307179586)+ +a);break a}if(c>>>0>=2139095040){a=O(a-a);break a}c=Fi(a,e+8|0);b=M[e+8>>3];b:{switch((c&3)-1|0){default:a=Vc(b);break a;case 0:a=Uc(b);break a;case 1:a=Vc(-b);break a;case 2:break b}}a=O(-Uc(b))}Ha=e+16|0;return a}function qm(a){var b=0,c=0,d=0,e=0;b=H[a+36>>2];if(b){Va(b);H[a+36>>2]=0}b=H[a+40>>2];if(b){Va(b);H[a+40>>2]=0}b=H[a+20>>2];if(b){Va(pm(b));H[a+20>>2]=0}b=H[a+24>>2];if(b){Va(pm(b));H[a+24>>2]=0}H[a+28>>2]=0;H[a+32>>2]=0;b=H[a+44>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+44>>2]=0}b=H[a+48>>2];a:{if(!b){break a}while(1){if((c|0)==8){if(!b){break a}Va(b);H[a+48>>2]=0}else{e=c<<2;d=H[e+b>>2];if(d){La[H[H[d>>2]+4>>2]](d);H[e+H[a+48>>2]>>2]=0;b=H[a+48>>2]}c=c+1|0;continue}break}}b=H[a+4>>2];b:{if(!b){break b}c=0;while(1){if(H[H[H[a>>2]+104>>2]+12>>2]<=(c|0)){if(!b){break b}Va(b);H[a+4>>2]=0}else{e=c<<2;d=H[e+b>>2];if(d){La[H[H[d>>2]+4>>2]](d);H[e+H[a+4>>2]>>2]=0;b=H[a+4>>2]}c=c+1|0;continue}break}}b=H[a+8>>2];if(b){Va(b);H[a+8>>2]=0}H[a>>2]=0;return a}function Er(a,b){a=a|0;b=O(b);var c=0,d=0,e=0,f=0,g=0;e=Ha-16|0;Ha=e;a:{if(!(F[58752]&1)|a){break a}f=H[14689];if(!f|(H[f+40>>2]&-2)!=2){break a}L[f+24>>2]=b;b=b<O(1)?b:O(O(1)/b);L[11464]=b;a=H[14704];if(a){L[a+8>>2]=b;H[e>>2]=0;H[e+4>>2]=0;Wa(29492,e);H[a+56>>2]=0;c=H[a+100>>2];if(c){d=H[14718];ni(c+16|0,d);ni(c+3572|0,d+112|0);H[c+8>>2]=0;H[c>>2]=0;H[c+4>>2]=0;b=L[a+56>>2]}else{b=O(0)}c=H[a+104>>2];if(c){L[c+4>>2]=b;L[c>>2]=b;g=c+12|0;c=0;while(1){if((c|0)!=8){d=H[(c<<2)+g>>2];if(d){La[H[H[d>>2]+8>>2]](d,b)}c=c+1|0;continue}break}b=L[a+56>>2]}H[a+116>>2]=0;H[a+108>>2]=0;L[a+60>>2]=b}H[14725]=0;H[14726]=0;H[14723]=0;H[14724]=0;H[14721]=0;H[14722]=0;H[14719]=0;H[14720]=0;F[52604]=0;F[52605]=0;F[52606]=0;H[f+40>>2]=3;c=1}Ha=e+16|0;return c|0}
function tm(a,b,c,d,e){var f=0,g=0,h=0;f=Ha-32|0;Ha=f;g=(b?36:40)+a|0;h=H[g>>2];a:{if((h&16777215)!=(H[14678]&16777215)){break a}F[(b?63:64)+a|0]=1;c=h>>>8&65520|(b^c?2:1);F[g+1|0]=c;F[g+2|0]=c>>>8;b:{switch(H[a+44>>2]){case 1:sm(f+28|0,d);a=H[f+28>>2];Ze(g,a,a>>>8|0);break a;default:Ze(g,1,4096);break a;case 0:break b}}a=(b?12:24)+a|0;b=H[a>>2];H[f+4>>2]=b;H[f+28>>2]=b;rc(e,0,f+4|0,0,f+8|0,f+12|0);if((H[a+4>>2]&16777215)!=(H[14678]&16777215)){H[f+20>>2]=0;b=H[a>>2];H[f>>2]=b;H[f+16>>2]=b;rc(e,0,f,0,f+24|0,f+20|0)}b=H[f+12>>2];if(!(!b|!H[b+24>>2])){sm(f+28|0,d);a=H[f+28>>2];Ze(g,a,a>>>8|0);break a}if(!(((I[a+1|0]|I[a+2|0]<<8)&28672)==4096|I[a|0]-16>>>0>8)){Ze(g,1,4096);break a}a=H[H[14022]+(H[d>>2]<<2)>>2];Ze(g,a,a>>>8|0)}Ha=f+32|0}function gt(a,b){a=a|0;b=b|0;var c=0,d=O(0);c=Ha-96|0;Ha=c;a:{if(!b){break a}H[c+80>>2]=a;eb(b,21530,c+80|0);Pc(a,b);if(H[a+528>>2]){_a(b,G[29370]);$a(17520,b);H[c+64>>2]=H[a+528>>2];eb(b,20430,c- -64|0)}if(H[a+532>>2]){_a(b,G[29370]);$a(17930,b);H[c+48>>2]=H[a+532>>2];eb(b,20430,c+48|0)}if(L[a+536>>2]!=O(0)){_a(b,G[29370]);d=L[a+536>>2];H[c+32>>2]=3;M[c+40>>3]=d;pb(b,20124,c+32|0)}if(L[a+540>>2]!=O(0)){_a(b,G[29370]);d=L[a+540>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,20076,c+16|0)}if(L[a+544>>2]!=O(0)){_a(b,G[29370]);d=L[a+544>>2];H[c>>2]=3;M[c+8>>3]=d;pb(b,19661,c)}if(!(L[a+548>>2]!=O(0)|L[a+552>>2]!=O(0))&L[a+556>>2]==O(0)){break a}_a(b,G[29370]);$a(17251,b);G[29370]=J[29370]+1;tb(a+548|0,b,3);G[29370]=J[29370]-1;bb(10,b)}Ha=c+96|0}function vq(a,b,c,d){var e=0,f=0,g=0,h=0;e=-1;a:{b:{if((b|0)==(c|0)){break b}c:{if(I[b+1|0]|I[b|0]!=45){break c}g=a+72|0;a=b+2|0;while(1){b=a;if((c|0)==(b|0)){break b}f=I[b|0];d:{e:{f:{g:{h:{i:{a=F[b+1|0];if(a){a=cb(a,f<<24>>24)}else{a=I[f+g|0]}a=a&255;switch(a|0){case 5:break i;case 0:case 1:case 8:break c;case 2:case 3:case 4:break e;case 7:break g;case 6:break h;default:break f}}if((c-b|0)>=2){break e}break a}if((c-b|0)<3){break a}a=b+3|0;continue}if((c-b|0)<4){break a}a=b+4|0;continue}if((a|0)==27){break d}}a=b+2|0;continue}a=b+2|0;if((c|0)==(a|0)){break b}if(I[b+3|0]|I[a|0]!=45){continue}break}a=b+4|0;if((a|0)==(c|0)){break b}if(I[b+5|0]){b=a;break c}c=a;a=I[b+4|0]==62;b=a?b+6|0:c;h=a?13:0}H[d>>2]=b;e=h}return e}return-2}function aq(a,b,c,d){a:{switch(b-9|0){case 0:b=H[c>>2];H[c>>2]=b+4;H[a>>2]=H[b>>2];return;case 6:b=H[c>>2];H[c>>2]=b+4;b=G[b>>1];H[a>>2]=b;H[a+4>>2]=b>>31;return;case 7:b=H[c>>2];H[c>>2]=b+4;H[a>>2]=J[b>>1];H[a+4>>2]=0;return;case 8:b=H[c>>2];H[c>>2]=b+4;b=F[b|0];H[a>>2]=b;H[a+4>>2]=b>>31;return;case 9:b=H[c>>2];H[c>>2]=b+4;H[a>>2]=I[b|0];H[a+4>>2]=0;return;case 16:b=H[c>>2]+7&-8;H[c>>2]=b+8;M[a>>3]=M[b>>3];return;case 17:La[d|0](a,c);default:return;case 1:case 4:case 14:b=H[c>>2];H[c>>2]=b+4;b=H[b>>2];H[a>>2]=b;H[a+4>>2]=b>>31;return;case 2:case 5:case 11:case 15:b=H[c>>2];H[c>>2]=b+4;H[a>>2]=H[b>>2];H[a+4>>2]=0;return;case 3:case 10:case 12:case 13:break a}}b=H[c>>2]+7&-8;H[c>>2]=b+8;c=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=c}function qq(a,b,c,d){var e=0,f=0,g=0,h=0;e=-1;a:{b:{if((b|0)==(c|0)){break b}c:{if(I[b|0]|I[b+1|0]!=45){break c}g=a+72|0;a=b+2|0;while(1){b=a;if((c|0)==(b|0)){break b}a=I[b+1|0];d:{e:{f:{g:{h:{i:{f=F[b|0];if(f){a=cb(f,a<<24>>24)}else{a=I[a+g|0]}a=a&255;switch(a|0){case 5:break i;case 0:case 1:case 8:break c;case 2:case 3:case 4:break e;case 7:break g;case 6:break h;default:break f}}if((c-b|0)>=2){break e}break a}if((c-b|0)<3){break a}a=b+3|0;continue}if((c-b|0)<4){break a}a=b+4|0;continue}if((a|0)==27){break d}}a=b+2|0;continue}a=b+2|0;if((c|0)==(a|0)){break b}if(I[a|0]|I[b+3|0]!=45){continue}break}a=b+4|0;if((a|0)==(c|0)){break b}if(I[a|0]){b=a;break c}c=a;a=I[b+5|0]==62;b=a?b+6|0:c;h=a?13:0}H[d>>2]=b;e=h}return e}return-2}function $s(a,b){a=a|0;b=b|0;var c=0,d=O(0);c=Ha-96|0;Ha=c;a:{if(!b){break a}H[c+80>>2]=a;eb(b,21506,c+80|0);Pc(a,b);if(H[a+528>>2]){_a(b,G[29370]);$a(18259,b);H[c+64>>2]=H[a+528>>2];eb(b,20430,c- -64|0)}if(H[a+532>>2]){_a(b,G[29370]);$a(18234,b);H[c+48>>2]=H[a+532>>2];eb(b,20430,c+48|0)}if(L[a+536>>2]!=O(0)){_a(b,G[29370]);d=L[a+536>>2];H[c+32>>2]=3;M[c+40>>3]=d;pb(b,20124,c+32|0)}if(L[a+540>>2]!=O(0)){_a(b,G[29370]);d=L[a+540>>2];H[c+16>>2]=3;M[c+24>>3]=d;pb(b,20076,c+16|0)}if(L[a+544>>2]!=O(0)){_a(b,G[29370]);d=L[a+544>>2];H[c>>2]=3;M[c+8>>3]=d;pb(b,19661,c)}if(J[a+548>>1]){_a(b,G[29370]);$a(15375,b);Qd(b,G[a+548>>1]);bb(10,b)}if(!J[a+550>>1]){break a}_a(b,G[29370]);$a(15358,b);Qd(b,G[a+550>>1]);bb(10,b)}Ha=c+96|0}function Up(a,b,c,d,e,f){var g=0;g=Ha-80|0;Ha=g;a:{if((f|0)>=16384){Jb(g+32|0,b,c,d,e,0,0,0,2147352576);d=H[g+40>>2];e=H[g+44>>2];b=H[g+32>>2];c=H[g+36>>2];if(f>>>0<32767){f=f-16383|0;break a}Jb(g+16|0,b,c,d,e,0,0,0,2147352576);f=(f>>>0>=49149?49149:f)-32766|0;d=H[g+24>>2];e=H[g+28>>2];b=H[g+16>>2];c=H[g+20>>2];break a}if((f|0)>-16383){break a}Jb(g- -64|0,b,c,d,e,0,0,0,7471104);d=H[g+72>>2];e=H[g+76>>2];b=H[g+64>>2];c=H[g+68>>2];if(f>>>0>4294934644){f=f+16269|0;break a}Jb(g+48|0,b,c,d,e,0,0,0,7471104);f=(f>>>0<=4294918376?-48920:f)+32538|0;d=H[g+56>>2];e=H[g+60>>2];b=H[g+48>>2];c=H[g+52>>2]}Jb(g,b,c,d,e,0,0,0,f+16383<<16);b=H[g+12>>2];H[a+8>>2]=H[g+8>>2];H[a+12>>2]=b;b=H[g+4>>2];H[a>>2]=H[g>>2];H[a+4>>2]=b;Ha=g+80|0}function Ib(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;g=Ha-16|0;Ha=g;if((b|0)>=0){e=H[a+8>>2];a:{if((e|0)>(b|0)){break a}d=H[a+4>>2];f=(b|0)<(d|0)?d:((b>>>1|0)+b|0)+1|0;if((e|0)==(f|0)){break a}h=ib(N(f,12));if(!h){if((f|0)<=(e|0)){break a}H[g+4>>2]=f;H[g>>2]=e;Wa(24475,g);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=H[a+12>>2];if((f|0)<(d|0)){H[a+12>>2]=f;d=f}m=(d|0)>0?d:0;i=H[a>>2];while(1){if((j|0)==(m|0)){if(i){Va(i);d=H[a+12>>2]}H[a>>2]=h;qn(a,d,f-d|0);H[a+8>>2]=f}else{e=N(j,12);k=e+i|0;l=e+h|0;e=H[k+4>>2];H[l>>2]=H[k>>2];H[l+4>>2]=e;H[l+8>>2]=H[k+8>>2];j=j+1|0;continue}break}}if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}b=H[a>>2]+N(b,12)|0;a=H[c+4>>2];H[b>>2]=H[c>>2];H[b+4>>2]=a;H[b+8>>2]=H[c+8>>2]}Ha=g+16|0}function Fi(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;e=Ha-16|0;Ha=e;g=(C(a),v(2));c=g&2147483647;a:{if(c>>>0<=1305022426){h=+a;f=h*.6366197723675814+6755399441055744+-6755399441055744;d=h+f*-1.5707963109016418+f*-1.5893254773528196e-8;M[b>>3]=d;g=d<-.7853981852531433;if(P(f)<2147483648){c=~~f}else{c=-2147483648}if(g){d=f+-1;M[b>>3]=h+d*-1.5707963109016418+d*-1.5893254773528196e-8;c=c-1|0;break a}if(!(d>.7853981852531433)){break a}d=f+1;M[b>>3]=h+d*-1.5707963109016418+d*-1.5893254773528196e-8;c=c+1|0;break a}if(c>>>0>=2139095040){M[b>>3]=O(a-a);c=0;break a}i=c;c=(c>>>23|0)-150|0;M[e+8>>3]=(x(2,i-(c<<23)|0),D());c=op(e+8|0,e,c,1,0);d=M[e>>3];if((g|0)<0){M[b>>3]=-d;c=0-c|0;break a}M[b>>3]=d}Ha=e+16|0;return c}function cn(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;e=H[a+12>>2];if((e|0)>=0){d=H[a+8>>2];a:{b:{if((d|0)>(e|0)){break b}c=H[a+4>>2];c=(c|0)>(e|0)?c:((e>>>1|0)+e|0)+1|0;if((c|0)==(d|0)){break b}i=ib(c<<2);if(!i){if((d|0)>=(c|0)){break b}H[h+4>>2]=c;H[h>>2]=d;Wa(24354,h);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=e;if((c|0)<(e|0)){H[a+12>>2]=c;d=c}k=(d|0)>0?d:0;f=H[a>>2];while(1){if((g|0)==(k|0)){if(f){Va(f);d=H[a+12>>2]}H[a>>2]=i;g=0;f=c-d|0;f=(f|0)>0?f:0;while(1){if((g|0)!=(f|0)){H[(H[a>>2]+(d<<2)|0)+(g<<2)>>2]=-1;g=g+1|0;continue}break}H[a+8>>2]=c;if(H[a+12>>2]>(e|0)){break a}}else{j=g<<2;H[j+i>>2]=H[f+j>>2];g=g+1|0;continue}break}}H[a+12>>2]=e+1}H[H[a>>2]+(e<<2)>>2]=H[b>>2]}Ha=h+16|0}function Hs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=H[a+528>>2];c=H[d+28>>2];a:{if(!c){break a}e=I[d+13|0];if(!((e&64?4:8)&e)){break a}e=c+20|0;if(!(oc(e)|(b|0)==(e|0))){L[c+20>>2]=L[b>>2];L[c+24>>2]=L[b+4>>2];L[c+28>>2]=L[b+8>>2]}if(!((c|0)==(b-20|0)|L[c+36>>2]!=O(0)|L[c+32>>2]!=O(0))){L[c+32>>2]=L[b+12>>2];L[c+36>>2]=L[b+16>>2]}if(H[c+56>>2]){break a}H[c+56>>2]=H[b+36>>2]}c=H[d+32>>2];b:{if(!c){break b}d=I[d+13|0];if(!((d&64?8:4)&d)){break b}d=c+20|0;if(!(oc(d)|(d|0)==(b+44|0))){L[c+20>>2]=L[b+44>>2];L[c+24>>2]=L[b+48>>2];L[c+28>>2]=L[b+52>>2]}if(!((c|0)==(b+24|0)|L[c+36>>2]!=O(0)|L[c+32>>2]!=O(0))){L[c+32>>2]=L[b+56>>2];L[c+36>>2]=L[b+60>>2]}if(H[c+56>>2]){break b}H[c+56>>2]=H[b+80>>2]}$b(a+284|0,b)}function zl(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;c=H[a+8>>2];a:{if((c|0)>(b|0)){break a}d=H[a+4>>2];if((d|0)<=(b|0)){d=(((b|0)/2|0)+b|0)+1|0}if(!d){nb(a);break a}if((c|0)==(d|0)){break a}i=ib(N(d,28));if(!i){if((c|0)>=(d|0)){break a}H[h+4>>2]=d;H[h>>2]=c;Wa(24475,h);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}b=0;c=H[a+12>>2];if((d|0)<(c|0)){H[a+12>>2]=d;c=d}k=(c|0)>0?c:0;j=H[a>>2];while(1){if((b|0)==(k|0)){if(j){Va(j);c=H[a+12>>2]}H[a>>2]=i;Gl(a,c,d-c|0);H[a+8>>2]=d}else{e=N(b,28);f=e+i|0;g=e+j|0;e=H[g+4>>2];H[f>>2]=H[g>>2];H[f+4>>2]=e;H[f+24>>2]=H[g+24>>2];e=H[g+20>>2];H[f+16>>2]=H[g+16>>2];H[f+20>>2]=e;e=H[g+12>>2];H[f+8>>2]=H[g+8>>2];H[f+12>>2]=e;b=b+1|0;continue}break}}Ha=h+16|0}function at(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=O(0),f=O(0),g=O(0),h=0;Zc(a,b,c,d);a:{if(c<=O(0)){break a}e=O(L[a+40>>2]-L[a+44>>2]);if(e<=c){break a}c=O((d?c:O(e-c))/e);e=O(L[13381]*L[a+544>>2]);c=O(c*e);b:{if(c<=O(0)){break b}g=L[13366];if(g>c){f=O(c/g);break b}if(c>e){break b}f=O(1);e=O(e-c);g=L[13367];if(!(e<g)){break b}f=O(e/g)}c:{d:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break d;default:break c}}h=H[a+532>>2];if(!h){break c}L[b+96>>2]=c;H[b+92>>2]=h;L[b+100>>2]=f*L[a+536>>2];L[b+104>>2]=f*L[a+540>>2];G[b+110>>1]=J[a+550>>1];d=H[a+8>>2]}if((d&-2)!=4){break a}d=H[a+528>>2];if(!d){break a}L[b+208>>2]=c;H[b+204>>2]=d;L[b+212>>2]=f*L[a+536>>2];L[b+216>>2]=f*L[a+540>>2];G[b+220>>1]=J[a+548>>1]}}function Sd(a,b,c){var d=0,e=0,f=0,g=O(0),h=0,i=0,j=0,k=O(0),l=0,m=0;d=Ha-48|0;Ha=d;H[d+44>>2]=0;H[d+36>>2]=b;H[d+12>>2]=b;H[d+40>>2]=0;rc(a,1,d+12|0,0,d+40|0,d+44|0);e=H[d+44>>2];a:{if(!e){break a}h=d+24|0;Ya(h,e+40|0);H[d+20>>2]=b;i=b>>>8&16777200;f=i|2;F[d+21|0]=f;F[d+22|0]=f>>>8;g=O(c+L[d+24>>2]);L[d+24>>2]=g;k=L[e+20>>2];H[d+8>>2]=H[d+20>>2];j=H[d+40>>2];f=yd(a,d+8|0,j,h,k);H[d+16>>2]=b;L[d+24>>2]=g-O(c+c);b=i|1;F[d+17|0]=b;F[d+18|0]=b>>>8;c=L[e+20>>2];H[d+4>>2]=H[d+16>>2];b=yd(a,d+4|0,j,h,c);a=H[e+24>>2];if(!a){break a}c=_b(a);a=Hd(Xa(12),a);H[f+24>>2]=a;g=O(c*Om(O(.5)));L[a>>2]=g+L[a>>2];Gd(a,c);l=b,m=Hd(Xa(12),H[e+24>>2]),H[l+24>>2]=m;a=H[f+24>>2];L[a>>2]=L[a>>2]-g;Gd(H[f+24>>2],c)}Ha=d+48|0}function gm(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;g=Ha-16|0;Ha=g;f=H[a+12>>2];if((f|0)>=0){d=H[a+8>>2];a:{b:{if((d|0)>(f|0)){break b}c=H[a+4>>2];c=(c|0)>(f|0)?c:((f>>>1|0)+f|0)+1|0;if((c|0)==(d|0)){break b}i=ib(c<<2);if(!i){if((d|0)>=(c|0)){break b}H[g+4>>2]=c;H[g>>2]=d;Wa(24414,g);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=f;if((c|0)<(f|0)){H[a+12>>2]=c;d=c}k=(d|0)>0?d:0;h=H[a>>2];while(1){if((e|0)==(k|0)){if(h){Va(h);d=H[a+12>>2]}H[a>>2]=i;e=c-d|0;h=(e|0)>0?e:0;e=0;while(1){if((e|0)!=(h|0)){H[(H[a>>2]+(d<<2)|0)+(e<<2)>>2]=0;e=e+1|0;continue}break}H[a+8>>2]=c;if(H[a+12>>2]>(f|0)){break a}}else{j=e<<2;H[j+i>>2]=H[h+j>>2];e=e+1|0;continue}break}}H[a+12>>2]=f+1}H[H[a>>2]+(f<<2)>>2]=b}Ha=g+16|0}function yt(a){a=a|0;var b=0,c=0,d=0;b=md(Xa(752),a);H[b+556>>2]=0;H[b+560>>2]=0;H[b>>2]=32364;H[b+528>>2]=0;H[b+532>>2]=0;H[b+568>>2]=0;H[b+572>>2]=0;H[b+536>>2]=0;H[b+540>>2]=0;H[b+544>>2]=0;H[b+548>>2]=0;H[b+576>>2]=0;H[b+580>>2]=0;vk(b+616|0);jb(b+4|0,a+4|0,524);a:{if((a|0)==(b|0)){c=J[a+564>>1];d=H[a+552>>2];break a}L[b+528>>2]=L[a+528>>2];L[b+532>>2]=L[a+532>>2];L[b+536>>2]=L[a+536>>2];L[b+540>>2]=L[a+540>>2];L[b+544>>2]=L[a+544>>2];L[b+548>>2]=L[a+548>>2];d=H[a+552>>2];L[b+556>>2]=L[a+556>>2];L[b+560>>2]=L[a+560>>2];c=J[a+564>>1];L[b+568>>2]=L[a+568>>2];L[b+572>>2]=L[a+572>>2];L[b+576>>2]=L[a+576>>2];L[b+580>>2]=L[a+580>>2]}G[b+564>>1]=c;H[b+552>>2]=d;jb(b+584|0,a+584|0,168);return b|0}function jo(a,b,c){var d=0,e=0,f=0,g=0,h=0;H[a+4>>2]=c;H[a>>2]=0;c=I[b|0];H[a+48>>2]=1065353216;H[a+40>>2]=0;H[a+44>>2]=1065353216;H[a+32>>2]=0;H[a+12>>2]=0;F[a+8|0]=c;H[a+36>>2]=30536;zb(a+52|0,0,96);H[a+176>>2]=1065353216;H[a+180>>2]=-1082130432;H[a+168>>2]=1082130432;H[a+172>>2]=1097859072;H[a+160>>2]=1088421888;H[a+164>>2]=0;H[a+152>>2]=1092616192;H[a+156>>2]=1028443341;H[a+148>>2]=3;zb(a+184|0,0,40);io(a+224|0);ig(a+868|0);H[a+976>>2]=0;c=980;while(1){io(a+c|0);c=c+644|0;if((c|0)!=3556){continue}break}e=a+16|0;f=(H[H[a+4>>2]+72>>2]+(I[a+8|0]<<4)|0)+20|0;c=0;while(1){if((c|0)==4){g=a,h=ig(Xa(108)),H[g+220>>2]=h;ni(a,b)}else{d=c<<2;g=d+e|0,h=ef(H[f+d>>2]),H[g>>2]=h;c=c+1|0;continue}break}}function Ht(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{d=H[a+4>>2];if(!d){break a}d=H[d+12>>2];if(!d){break a}i=(d|0)>0?d:0;d=0;while(1){if((d|0)==(i|0)){break a}c=H[a+4>>2];b:{if(H[c+12>>2]<=(d|0)){break b}f=H[H[c>>2]+(d<<2)>>2];if(!f){break b}c:{d:{e=H[f+12>>2];switch(e|0){case 0:break b;case 1:break c;default:break d}}c=0;gb(b,G[29370]);h=Za(Za(ub(b,60),6542),21503);G[29370]=J[29370]+1;j=(e|0)>0?e:0;while(1)if((c|0)==(j|0)){c=J[29370]-1|0;G[29370]=c;gb(h,c<<16>>16);Za(Za(Za(h,13001),6542),21503);break b}else{e:{if(H[f+12>>2]<=(c|0)){e=65535;g=0;break e}g=H[f>>2]+N(c,28)|0;e=J[g+4>>1];g=H[g>>2]}Fk(g,e,h);c=c+1|0;continue}}c=H[f>>2];Fk(H[c>>2],J[c+4>>1],b)}d=d+1|0;continue}}}function Vx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;if((b|0)==(c|0)){return-4}g=a+72|0;e=b;a:{while(1){if((c|0)==(e|0)){break a}f=2;b:{c:{d:{e:{f:{g:{h:{i:{j:{h=I[I[e|0]+g|0];switch(h-3|0){case 0:break h;case 4:break i;case 3:break j;case 2:break c;case 1:case 5:break d;case 6:break f;case 7:break g;default:break e}}f=3;break c}f=4;break c}if((b|0)!=(e|0)){break a}return Bg(a,b+1|0,c,d)|0}if((b|0)!=(e|0)){break a}H[d>>2]=b+1;return 7}if((b|0)!=(e|0)){break a}a=b+1|0;if((a|0)==(c|0)){return-3}H[d>>2]=I[I[b+1|0]+g|0]==10?b+2|0:a;return 7}if((h|0)==30){break b}}f=1}e=e+f|0;continue}break}if((b|0)!=(e|0)){break a}a=Cq(a,b+1|0,c,d);return((a|0)!=22?a:0)|0}H[d>>2]=e;return 6}function zt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ha-32|0;Ha=d;ie(a,b,c);L[d+20>>2]=L[a+528>>2];L[d+24>>2]=L[a+532>>2];L[d+28>>2]=L[a+536>>2];Od(b,c,7526,d+20|0);Mb(b,c,9323,H[a+540>>2],H[14599]);L[d+8>>2]=L[a+544>>2];L[d+12>>2]=L[a+548>>2];L[d+16>>2]=L[a+552>>2];Od(b,c,7519,d+8|0);Mb(b,c,9316,H[a+556>>2],H[14599]);Nd(b,c,9354,L[a+560>>2],L[a+564>>2]);Mb(b,c,9292,H[a+568>>2],H[14599]);Mb(b,c,9847,H[a+572>>2],H[14597]);Mb(b,c,9280,H[a+576>>2],H[14599]);Mb(b,c,6480,H[a+580>>2],H[14596]);Mb(b,c,9259,H[a+584>>2],H[14599]);Nd(b,c,7501,L[a+588>>2],L[a+592>>2]);if(J[a+596>>1]){e=b;a:{if(c){b=15223;c=15144;break a}gb(b,G[29370]+1|0);b=30283;c=15145}Za(bh(Za(e,c),G[a+596>>1]),b)}Ha=d+32|0}function fp(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=Ha-16|0;Ha=h;if((b|0)>=0){g=H[a+8>>2];a:{if((g|0)>(b|0)){break a}e=H[a+4>>2];e=(b|0)<(e|0)?e:((b>>>1|0)+b|0)+1|0;if((e|0)==(g|0)){break a}i=ib(e<<2);if(!i){if((e|0)<=(g|0)){break a}H[h+4>>2]=e;H[h>>2]=g;Wa(d,h);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=H[a+12>>2];if((e|0)<(d|0)){H[a+12>>2]=e;d=e}k=(d|0)>0?d:0;g=H[a>>2];while(1){if((f|0)==(k|0)){if(g){Va(g);d=H[a+12>>2]}H[a>>2]=i;f=e-d|0;g=(f|0)>0?f:0;f=0;while(1){if((f|0)!=(g|0)){H[(H[a>>2]+(d<<2)|0)+(f<<2)>>2]=0;f=f+1|0;continue}break}H[a+8>>2]=e}else{j=f<<2;H[j+i>>2]=H[g+j>>2];f=f+1|0;continue}break}}if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}H[H[a>>2]+(b<<2)>>2]=c}Ha=h+16|0}function xt(a,b){a=a|0;b=b|0;H[a+552>>2]=H[b+92>>2];if((b-376|0)!=(a|0)){L[a+528>>2]=L[b+152>>2];L[a+532>>2]=L[b+156>>2];L[a+536>>2]=L[b+160>>2]}if((b-376|0)!=(a|0)){L[a+540>>2]=L[b+164>>2];L[a+544>>2]=L[b+168>>2];L[a+548>>2]=L[b+172>>2]}if((b-376|0)!=(a|0)){L[a+556>>2]=L[b+180>>2];L[a+560>>2]=L[b+184>>2]}if((b-376|0)!=(a|0)){L[a+568>>2]=L[b+192>>2];L[a+572>>2]=L[b+196>>2]}F[a+564|0]=I[b+188|0];F[a+565|0]=I[b+189|0];H[a+588>>2]=H[b+32>>2];H[a+592>>2]=H[b+36>>2];H[a+584>>2]=H[b+200>>2];if((b-436|0)!=(a|0)){L[a+576>>2]=L[b+140>>2];L[a+580>>2]=L[b+144>>2]}H[a+596>>2]=H[b+124>>2];H[a+600>>2]=H[b+128>>2];H[a+604>>2]=H[b+132>>2];H[a+608>>2]=H[b+136>>2];G[a+612>>1]=J[b+148>>1]}function Sw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=Ha-32|0;Ha=d;e=H[a+28>>2];H[d+16>>2]=e;f=H[a+20>>2];H[d+28>>2]=c;H[d+24>>2]=b;b=f-e|0;H[d+20>>2]=b;f=b+c|0;i=2;b=d+16|0;a:{while(1){b:{c:{d:{if(!yg(ma(H[a+60>>2],b|0,i|0,d+12|0)|0)){g=H[d+12>>2];if((g|0)==(f|0)){break d}if((g|0)>=0){break c}break b}if((f|0)!=-1){break b}}b=H[a+44>>2];H[a+28>>2]=b;H[a+20>>2]=b;H[a+16>>2]=b+H[a+48>>2];a=c;break a}h=H[b+4>>2];j=h>>>0<g>>>0;e=(j<<3)+b|0;h=g-(j?h:0)|0;H[e>>2]=h+H[e>>2];b=(j?12:4)+b|0;H[b>>2]=H[b>>2]-h;f=f-g|0;i=i-j|0;b=e;continue}break}H[a+28>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;H[a>>2]=H[a>>2]|32;a=0;if((i|0)==2){break a}a=c-H[b+4>>2]|0}Ha=d+32|0;return a|0}function Xn(a,b){var c=O(0),d=O(0),e=O(0),f=O(0);H[12867]=H[12867]+1;e=L[a+80>>2];d=O(L[a+76>>2]-e);L[a+84>>2]=d;if(H[a+60>>2]==3){c=O(L[a+16>>2]*fg(L[a+24>>2],d,L[a+8>>2]));L[a+44>>2]=c;L[a+36>>2]=O(c-L[a+20>>2])*O(.25)}c=L[a+28>>2];if(!(!(c>O(0))|(!(O(-c)<d)|(I[a+32|0]|!(c>d))))){H[a+92>>2]=0;F[a+32|0]=1;c=L[a+72>>2];L[a+76>>2]=c;d=O(c-e);L[a+84>>2]=d}c=O(d*L[a+36>>2]);L[a+88>>2]=c;f=L[a+92>>2];c=O(c-f);L[a+96>>2]=c;c=O(c*L[a+44>>2]);L[a+100>>2]=c;d=O(c/L[a+52>>2]);L[a+104>>2]=d;c=L[a+48>>2];a:{if(!(d>c)){c=O(-c);if(!(d<c)){break a}}L[a+104>>2]=c;d=c}c=O(O(d*b)+f);L[a+92>>2]=c;L[a+80>>2]=O(f*b)+e;d=L[a+40>>2];b:{if(!(c>d)){d=O(-d);if(!(c<d)){break b}}L[a+92>>2]=d}}function Gc(a){var b=0,c=0,d=0,e=0;b=H[a>>2];if(b){Va(b);H[a>>2]=0}c=H[a+4>>2];a:{if(!c){break a}while(1){if(H[c+4>>2]>(d|0)){b=H[c>>2]+(d<<3)|0;while(1){b=H[b>>2];if(b){e=H[b+4>>2];if((e|0)!=H[c+20>>2]){Va(e);H[b+4>>2]=H[c+20>>2]}b=b+8|0;continue}break}d=d+1|0;continue}break}d=H[a+4>>2];c=0;while(1){if(H[d+4>>2]>(c|0)){b=H[d>>2]+(c<<3)|0;while(1){b=H[b>>2];if(b){Va(H[b>>2]);b=b+8|0;continue}break}c=c+1|0;continue}break}b=H[a+4>>2];if(!b){break a}Va(bn(b));H[a+4>>2]=0}c=H[a+8>>2];if(c){b=0;while(1){if(H[c+12>>2]>(b|0)){d=H[H[c>>2]+(b<<2)>>2];if(d){Va(Gc(d));c=H[a+8>>2]}b=b+1|0;continue}break}nb(c);Va(c);H[a+8>>2]=0}b=H[a+12>>2];if(b){Va(b);H[a+12>>2]=0}return a}function Qn(a,b){var c=O(0),d=O(0),e=O(0),f=O(0);H[12867]=H[12867]+1;e=L[a+68>>2];d=O(L[a+64>>2]-e);L[a+72>>2]=d;if(H[a+44>>2]==3){c=O(L[a>>2]*fg(L[a+8>>2],d,L[a+96>>2]));L[a+28>>2]=c;L[a+20>>2]=O(c-L[a+4>>2])*O(.25)}c=L[a+12>>2];if(!(!(c>O(0))|(!(O(-c)<d)|(I[a+16|0]|!(c>d))))){H[a+80>>2]=0;F[a+16|0]=1;c=L[a+60>>2];L[a+64>>2]=c;d=O(c-e);L[a+72>>2]=d}c=O(d*L[a+20>>2]);L[a+76>>2]=c;f=L[a+80>>2];c=O(c-f);L[a+84>>2]=c;c=O(c*L[a+28>>2]);L[a+88>>2]=c;d=O(c/L[a+36>>2]);L[a+92>>2]=d;c=L[a+32>>2];a:{if(!(d>c)){c=O(-c);if(!(d<c)){break a}}L[a+92>>2]=c;d=c}c=O(O(d*b)+f);L[a+80>>2]=c;L[a+68>>2]=O(f*b)+e;d=L[a+24>>2];b:{if(!(c>d)){d=O(-d);if(!(c<d)){break b}}L[a+80>>2]=d}}function Xs(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=H[b+40>>2];H[a+528>>2]=c;d=H[b+44>>2];H[a+532>>2]=d;f=N(c,24);e=f+53536|0;g=H[e+4>>2];H[a+568>>2]=H[e>>2];H[a+572>>2]=g;e=f+53544|0;g=H[e+4>>2];H[a+576>>2]=H[e>>2];H[a+580>>2]=g;f=f+53552|0;e=H[f+4>>2];H[a+584>>2]=H[f>>2];H[a+588>>2]=e;if(!(!d|(c|0)!=(d|0))){G[a+568>>1]=J[a+568>>1]+1}d=H[b+48>>2];H[a+536>>2]=d;c=H[b+52>>2];H[a+540>>2]=c?c:d?3:c;c=a+544|0;if((c|0)!=(b+56|0)){L[a+544>>2]=L[b+56>>2];L[a+548>>2]=L[b+60>>2];L[a+552>>2]=L[b+64>>2]}d=H[b+68>>2];H[a+556>>2]=d;a:{if(d){break a}if(!oc(c)){break a}H[a+556>>2]=3}c=H[b+72>>2];H[a+560>>2]=c;b=H[b+76>>2];H[a+24>>2]=0;H[a+12>>2]=11;H[a+564>>2]=b?b:c?3:b}function pe(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;c=Ha-32|0;Ha=c;a:{if(!b){H[a+8>>2]=0;H[a>>2]=0;H[a+4>>2]=0;break a}H[c+28>>2]=0;H[c+24>>2]=0;H[c+20>>2]=0;d=I[b|0];b:{if((d-97&255)>>>0<=25){while(1){h=b;c:{d:{e:{f:{g:{switch(d-108|0){default:if((d|0)==100){break f}if((d|0)==105){break d}if(d){break c}break b;case 0:e=e+1|0;break c;case 6:e=e-1|0;break c;case 9:break g;case 1:case 2:case 4:case 5:case 7:case 8:break c;case 3:break e}}f=f+1|0;break c}f=f-1|0;break c}g=g+1|0;break c}g=g-1|0}b=h+1|0;d=I[h+1|0];continue}}H[c+8>>2]=c+20;H[c+4>>2]=c+24;H[c>>2]=c+28;wc(b,11127,c);g=H[c+20>>2];f=H[c+24>>2];e=H[c+28>>2]}L[a+8>>2]=g|0;L[a+4>>2]=f|0;L[a>>2]=e|0}Ha=c+32|0}function Qc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=O(0),g=0,h=O(0),i=0,j=0,k=O(0);d=Ha-16|0;Ha=d;if(c){g=H[b>>2];if(I[58861]==1){f=O(L[13457]*L[13473])}else{f=O(O(L[(H[a+12>>2]<<2)+53816>>2]*L[(H[a+24>>2]<<2)+53864>>2])*L[(H[a+16>>2]<<2)+53884>>2])}f=O(f*L[g+232>>2]);L[a+40>>2]=f;if(I[a+20|0]==1){h=O(L[g+268>>2]*L[g+232>>2]);L[a+44>>2]=h;L[a+40>>2]=f+h}H[d+8>>2]=H[c+12>>2];i=H[c+8>>2];e=H[c+4>>2];H[d>>2]=e;H[d+4>>2]=i;if(!(!((e&16777215)==(H[14678]&16777215)|(e&252)==12)&(e&255)-1>>>0>10)){H[d+8>>2]=H[c+84>>2];e=H[c+80>>2];H[d>>2]=H[c+76>>2];H[d+4>>2]=e}j=a,k=Wm(g,d),L[j+48>>2]=k;F[a+33|0]=I[b+13|0]>>>4&1;_c(a+284|0,a+60|0);_c(a+396|0,a+172|0)}Ha=d+16|0}function Hj(a,b){var c=0,d=0,e=0;c=Ha-16|0;Ha=c;H[c+4>>2]=b;Y(50066,40736,0)|0;b=H[c+4>>2];H[c+12>>2]=b;H[c+8>>2]=b;Y(50128,40736,0)|0;if(a){b=H[c+12>>2]+4|0;d=1;while(1){a:{H[c+12>>2]=b+4;if(!H[b>>2]){e=d;break a}Y(50182,40736,0)|0;b=H[c+12>>2]+4|0;H[c+12>>2]=b;e=6;d=d+1|0;if((d|0)!=6){continue}}break}d=N(e,3)|1}else{d=3}b=Xa(28);H[b+20>>2]=0;Ec(b,d);H[c+12>>2]=H[c+8>>2];b:{if(!a){break b}d=H[c+12>>2];H[c+12>>2]=d+4;d=H[d>>2];Y(50239,40736,0)|0;ob(b,a,d);d=0;while(1){a=H[c+12>>2];H[c+12>>2]=a+4;e=H[a>>2];if(!e){break b}H[c+12>>2]=a+8;a=H[a+4>>2];Y(50298,40736,0)|0;ob(b,e,a);d=d+1|0;if((d|0)!=6){continue}break}}Y(50351,40736,0)|0;Ha=c+16|0;return b}function Fq(a,b,c,d,e){var f=0,g=0;f=b+72|0;a:{b:{while(1){if((c|0)==(d|0)){return-1}c:{d:{e:{f:{g:{h:{g=I[I[c|0]+f|0];switch(g|0){case 5:break h;case 0:case 1:case 8:break c;case 12:case 13:break e;case 7:break f;case 6:break g;default:break d}}if((d-c|0)<2){break a}if(La[H[b+352>>2]](b,c)|0){break c}c=c+2|0;continue}if((d-c|0)<3){break a}if(La[H[b+356>>2]](b,c)|0){break c}c=c+3|0;continue}if((d-c|0)<4){break a}if(La[H[b+360>>2]](b,c)|0){break c}c=c+4|0;continue}c=c+1|0;if((a|0)!=(g|0)){continue}if((c|0)==(d|0)){return-27}H[e>>2]=c;a=I[I[c|0]+f|0];if(a>>>0>30|!(1<<a&1076891136)){break b}return 27}c=c+1|0;continue}break}H[e>>2]=c}return 0}return-2}function sl(a,b,c,d){var e=0,f=0,g=0;e=Ha-32|0;Ha=e;b=N(b,160)+54e3|0;f=b+N(c,20)|0;g=H[f+36>>2];H[a>>2]=H[f+32>>2];H[a+4>>2]=g;H[a+16>>2]=H[f+48>>2];g=H[f+44>>2];H[a+8>>2]=H[f+40>>2];H[a+12>>2]=g;a:{b:{switch(d|0){case 2:if((H[b+156>>2]&-4)!=4){c:{switch(c-2|0){case 0:case 2:break c;default:break a}}rl(a,58232);break a}c=H[b+136>>2];H[a>>2]=H[b+132>>2];H[a+4>>2]=c;H[a+16>>2]=H[b+148>>2];c=H[b+144>>2];H[a+8>>2]=H[b+140>>2];H[a+12>>2]=c;break a;case 0:case 1:break a;default:break b}}b=N(d,20);H[e+24>>2]=H[b+58208>>2];c=b+58200|0;d=H[c+4>>2];H[e+16>>2]=H[c>>2];H[e+20>>2]=d;b=b+58192|0;c=H[b+4>>2];H[e+8>>2]=H[b>>2];H[e+12>>2]=c;rl(a,e+8|0)}Ha=e+32|0}function bc(a,b){var c=0,d=0,e=0;e=Ha-16|0;Ha=e;a:{if(!b){break a}c=I[a|0];b:{if(!c){$a(7646,b);break b}c:{d=H[14025];if((c|0)>=H[d+8>>2]){break c}d=H[H[d+4>>2]+(c<<2)>>2];if(!d){break c}$a(d,b);break b}H[e>>2]=c;eb(b,11062,e)}c=I[a+1|0]|I[a+2|0]<<8;if(c&3968){bb(45,b);Qd(b,(I[a+1|0]|I[a+2|0]<<8)>>>7&31);c=I[a+1|0]|I[a+2|0]<<8}if(c&112){bb(45,b);$a(H[((I[a+1|0]|I[a+2|0]<<8)>>>2&28)+31840>>2],b);c=I[a+1|0]|I[a+2|0]<<8}if(c&15){bb(45,b);$a(H[(((I[a+1|0]|I[a+2|0]<<8)&15)<<2)+31872>>2],b);c=I[a+1|0]|I[a+2|0]<<8}if(c&28672){bb(45,b);$a(H[((I[a+1|0]|I[a+2|0]<<8)>>>10&28)+31904>>2],b);c=I[a+1|0]|I[a+2|0]<<8}if(c<<16>>16>=0){break a}$a(3735,b)}Ha=e+16|0}function mr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;a:{b:{c:{d:{e:{f:{switch(b-11|0){default:switch(b-26|0){case 1:break b;case 0:break d;case 2:break e;default:break c};case 5:if(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34612)|0){H[a>>2]=52;return 11}if(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34619)|0){H[a>>2]=53;return 33}if(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34627)|0){H[a>>2]=54;return 39}if(!(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34635)|0)){break b}H[a>>2]=55;return 17;case 0:return 55;case 4:break a;case 1:case 3:break b;case 2:break f}}return 56}return 57}H[a>>2]=56;return 3}if((b|0)==-4){break a}}H[a>>2]=25;f=-1}return f|0}function sf(a,b){var c=0,d=0,e=0,f=0;c=Ha-16|0;Ha=c;f=Xa(16);H[f>>2]=0;H[f+4>>2]=0;H[f+8>>2]=0;H[f+12>>2]=0;H[c+4>>2]=b;H[c+12>>2]=b;H[c+8>>2]=b;H[f+8>>2]=0;b=H[c+12>>2];e=a;while(1){if(e&65535){e=e<<16>>16;if((e|0)>=(d|0)){d=e+1|0;H[f+8>>2]=d}e=H[b+4>>2];b=b+8|0;continue}break}H[c+12>>2]=b;a:{if((d|0)<=0){break a}e=ib(d<<2);H[f+4>>2]=e;b=0;while(1)if((b|0)==(d|0)){b=Xa(28);H[b+20>>2]=0;Ec(b,d<<1);H[f>>2]=b;H[c+12>>2]=H[c+8>>2];while(1){if(!(a&65535)){break a}d=H[c+12>>2];H[c+12>>2]=d+4;a=a<<16>>16;d=H[d>>2];H[e+(a<<2)>>2]=d;ob(b,d,a);a=H[c+12>>2];H[c+12>>2]=a+4;a=H[a>>2];continue}}else{H[e+(b<<2)>>2]=0;b=b+1|0;continue}}Ha=c+16|0;return f}function Zw(a,b){a=a|0;b=b|0;var c=0,d=0;a:{b:{if(!(I[b+4|0]|I[b+5|0]!=120)){b=b+6|0;a=0;while(1){c:{if(I[b|0]){break c}c=F[b+1|0];d=c&255;if((d|0)==59){break a}d:{e:{switch(d-48|0){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:a=c-48|a<<4;break d;case 17:case 18:case 19:case 20:case 21:case 22:a=(c+(a<<4)|0)-55|0;break d;case 49:case 50:case 51:case 52:case 53:case 54:break e;default:break c}}a=(c+(a<<4)|0)-87|0}if((a|0)>1114111){break b}}b=b+2|0;continue}}b=b+4|0;a=0;while(1){c=-49;if(!I[b|0]){c=F[b+1|0];if((c|0)==59){break a}c=c-48|0}b=b+2|0;a=N(a,10)+c|0;if((a|0)<1114112){continue}break}}return-1}return He(a)|0}function wq(a,b,c,d,e){var f=0,g=0;g=b+72|0;while(1){f=c;if((f|0)==(d|0)){return-1}c=I[f|0];a:{b:{c:{d:{e:{f:{g:{h:{b=F[f+1|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+g|0]}switch(b|0){case 5:break h;case 0:case 1:case 8:break d;case 12:case 13:break e;case 7:break f;case 6:break g;default:break b}}if((d-f|0)>=2){break b}break a}if((d-f|0)<3){break a}c=f+3|0;continue}if((d-f|0)<4){break a}c=f+4|0;continue}c=f+2|0;if((a|0)!=(b|0)){continue}if((c|0)==(d|0)){return-27}H[e>>2]=c;b=I[f+2|0];a=F[f+3|0];if(a){a=cb(a,b<<24>>24)}else{a=I[b+g|0]}a=a&255;if(a>>>0>30|!(1<<a&1076891136)){break c}return 27}H[e>>2]=f}return 0}c=f+2|0;continue}break}return-2}function rq(a,b,c,d,e){var f=0,g=0;g=b+72|0;while(1){f=c;if((f|0)==(d|0)){return-1}c=I[f+1|0];a:{b:{c:{d:{e:{f:{g:{h:{b=F[f|0];if(b){b=cb(b,c<<24>>24)}else{b=I[c+g|0]}switch(b|0){case 5:break h;case 0:case 1:case 8:break d;case 12:case 13:break e;case 7:break f;case 6:break g;default:break b}}if((d-f|0)>=2){break b}break a}if((d-f|0)<3){break a}c=f+3|0;continue}if((d-f|0)<4){break a}c=f+4|0;continue}c=f+2|0;if((a|0)!=(b|0)){continue}if((c|0)==(d|0)){return-27}H[e>>2]=c;b=I[f+3|0];a=F[f+2|0];if(a){a=cb(a,b<<24>>24)}else{a=I[b+g|0]}a=a&255;if(a>>>0>30|!(1<<a&1076891136)){break c}return 27}H[e>>2]=f}return 0}c=f+2|0;continue}break}return-2}function nx(a,b){a=a|0;b=b|0;var c=0,d=0;a:{a=b+4|0;b:{if(!(I[b+5|0]|I[a|0]!=120)){a=b+6|0;b=0;while(1){c:{if(I[a+1|0]){break c}c=F[a|0];d=c&255;if((d|0)==59){break a}d:{e:{switch(d-48|0){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:b=c-48|b<<4;break d;case 17:case 18:case 19:case 20:case 21:case 22:b=(c+(b<<4)|0)-55|0;break d;case 49:case 50:case 51:case 52:case 53:case 54:break e;default:break c}}b=(c+(b<<4)|0)-87|0}if((b|0)>1114111){break b}}a=a+2|0;continue}}b=0;while(1){c=-49;if(!I[a+1|0]){c=F[a|0];if((c|0)==59){break a}c=c-48|0}a=a+2|0;b=N(b,10)+c|0;if((b|0)<1114112){continue}break}}return-1}return He(b)|0}function Dc(a,b){var c=0,d=0,e=0,f=0,g=0;c=Ha-16|0;Ha=c;d=Xa(16);H[d>>2]=0;H[d+4>>2]=0;H[d+8>>2]=0;H[d+12>>2]=0;H[c+4>>2]=b;H[c+12>>2]=b;H[c+8>>2]=b;H[d+8>>2]=0;b=H[c+12>>2];f=a;while(1){if(f){H[c+12>>2]=b+4;e=G[b>>1];if((e|0)>=(g|0)){g=e+1|0;H[d+8>>2]=g}e=b+8|0;H[c+12>>2]=e;f=H[b+4>>2];b=e;continue}break}a:{if((g|0)<=0){break a}e=ib(g<<2);H[d+4>>2]=e;b=0;while(1)if((b|0)==(g|0)){b=Xa(28);H[b+20>>2]=0;Ec(b,g<<1);H[d>>2]=b;H[c+12>>2]=H[c+8>>2];while(1){if(!a){break a}f=H[c+12>>2];H[c+12>>2]=f+4;f=G[f>>1];H[e+(f<<2)>>2]=a;ob(b,a,f);a=H[c+12>>2];H[c+12>>2]=a+4;a=H[a>>2];continue}}else{H[e+(b<<2)>>2]=0;b=b+1|0;continue}}Ha=c+16|0;return d}function db(){var a=0,b=0,c=0,d=0,e=0,f=0;a=Ha-32|0;Ha=a;e=H[14711];f=+ha();b=f/1e3;a:{if(P(b)<0x8000000000000000){d=~~b>>>0;if(P(b)>=1){c=~~(b>0?R(T(b*2.3283064365386963e-10),4294967295):U((b-+(~~b>>>0>>>0))*2.3283064365386963e-10))>>>0}else{c=0}break a}c=-2147483648}H[a+8>>2]=d;H[a+12>>2]=c;b=(f-(+(gy(d,c,1e3,0)>>>0)+ +(Ka|0)*4294967296))*1e3;b:{if(P(b)<2147483648){c=~~b;break b}c=-2147483648}H[a+16>>2]=c;c:{if(!e){break c}d=H[11463];if((d|0)<=0){break c}c=H[a+12>>2];H[a+24>>2]=H[a+8>>2];H[a+28>>2]=c;iq(a+24|0);ik(50960,H[11463]==2?11520:11544);F[50999]=0;H[a>>2]=50960;H[a+4>>2]=H[a+16>>2]/1e3;eb(e,(d|0)==1?16073:16067,a)}Ha=a+32|0}function ij(a){var b=0,c=0,d=0,e=0;a:{b=H[a+340>>2];if(!H[b+164>>2]){c=La[H[a+12>>2]](H[a+452>>2]<<2)|0;H[b+164>>2]=c;if(!c){break a}H[c>>2]=0}d=H[b+144>>2];c=H[b+156>>2];e=H[b+152>>2];if(c>>>0>=e>>>0){b:{if(d){d=La[H[a+16>>2]](d,N(e,56))|0;if(!d){break a}c=H[b+152>>2]<<1;break b}c=32;d=La[H[a+12>>2]](896)|0;if(!d){break a}}H[b+144>>2]=d;H[b+152>>2]=c;c=H[b+156>>2]}H[b+156>>2]=c+1;a=H[b+160>>2];if(a){a=N(H[(H[b+164>>2]+(a<<2)|0)-4>>2],28)+d|0;b=H[a+16>>2];if(b){H[(N(b,28)+d|0)+24>>2]=c}b=H[a+20>>2];if(!b){H[a+12>>2]=c}H[a+16>>2]=c;H[a+20>>2]=b+1}a=N(c,28)+d|0;H[a+12>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;H[a+24>>2]=0;return c}return-1}function Uq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a:{b:{c:{d:{e:{switch(b-35|0){default:f:{switch(b-21|0){case 3:break f;case 1:case 2:break b;case 0:break d;default:break c}}b=H[a+4>>2]-1|0;H[a+4>>2]=b;c=45;if(b){break a}H[a+8>>2]=39;H[a>>2]=66;return 45;case 1:b=H[a+4>>2]-1|0;H[a+4>>2]=b;c=46;if(b){break a}H[a+8>>2]=39;H[a>>2]=66;return 46;case 0:b=H[a+4>>2]-1|0;H[a+4>>2]=b;c=47;if(b){break a}H[a+8>>2]=39;H[a>>2]=66;return 47;case 2:b=H[a+4>>2]-1|0;H[a+4>>2]=b;c=48;if(b){break a}H[a+8>>2]=39;H[a>>2]=66;return 48;case 3:break e}}H[a>>2]=74;return 50}H[a>>2]=74;return 49}c=39;if((b|0)==15){break a}}H[a>>2]=25;c=-1}return c|0}function Df(a,b){var c=0,d=0;d=I[a|0]|I[a+1|0]<<8;c=d|(I[b|0]|I[b+1|0]<<8)&1;F[a|0]=c;F[a+1|0]=c>>>8;c=c&65533|(d&2?2:(I[b|0]|I[b+1|0]<<8)&2);F[a|0]=c;F[a+1|0]=c>>>8;c=c&65531|(d&4?4:(I[b|0]|I[b+1|0]<<8)&4);F[a|0]=c;F[a+1|0]=c>>>8;c=c&65527|(d&8?8:(I[b|0]|I[b+1|0]<<8)&8);F[a|0]=c;F[a+1|0]=c>>>8;c=c&-17|(d&16?16:(I[b|0]|I[b+1|0]<<8)&16);F[a|0]=c;F[a+1|0]=c>>>8;c=c&-33|(d&32?32:(I[b|0]|I[b+1|0]<<8)&32);F[a|0]=c;F[a+1|0]=c>>>8;c=c&-65|(d&64?64:(I[b|0]|I[b+1|0]<<8)&64);F[a|0]=c;F[a+1|0]=c>>>8;c=c&-129|(d&128?128:(I[b|0]|I[b+1|0]<<8)&128);F[a|0]=c;F[a+1|0]=c>>>8;b=c&65279|(d&256?256:(I[b|0]|I[b+1|0]<<8)&256);F[a|0]=b;F[a+1|0]=b>>>8}function sx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=a+72|0;a:{b:{while(1){d=I[b|0];a=d<<24>>24;c:{e=F[b+1|0];if(e){d=cb(e,a)}else{d=I[d+f|0]}d=d&255;d:{if(!(d>>>0>29|!(1<<d&792723456))){d=0;if(I[c|0]!=(a&255)|I[c+1|0]!=(e&255)){break b}break d}e:{switch(d-5|0){case 2:if(I[c|0]!=(a&255)){break a}b=b+1|0;c=c+1|0;a=e;case 1:if(I[c|0]!=(a&255)){break a}c=c+1|0;a=I[b+1|0];b=b+1|0;break;case 0:break e;default:break c}}d=0;if(I[c|0]!=(a&255)|I[b+1|0]!=I[c+1|0]){break b}}b=b+2|0;c=c+2|0;continue}break}a=I[c|0];b=F[c+1|0];if(b){a=cb(b,a<<24>>24)}else{a=I[a+f|0]}a=a&255;if(1<<a&792723680?a>>>0<=29:0){break a}d=1}return d|0}return 0}function ff(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0,m=0,n=O(0);h=Ha-144|0;Ha=h;H[h+48>>2]=0;m=h,n=O(-ec(b)),L[m+56>>2]=n;m=h,n=O(-uc(b)),L[m+52>>2]=n;m=h,n=ec(c),L[m+44>>2]=n;m=h,n=O(-uc(c)),L[m+40>>2]=n;H[h+36>>2]=0;m=h,n=uc(d),L[m+32>>2]=n;H[h+28>>2]=0;m=h,n=ec(d),L[m+24>>2]=n;m=h,n=O(-uc(e)),L[m+20>>2]=n;H[h+16>>2]=0;m=h,n=ec(e),L[m+12>>2]=n;H[h+8>>2]=0;m=h,n=O(-uc(f)),L[m+4>>2]=n;m=h,n=ec(f),L[m>>2]=n;j=h+60|0;i=h+48|0;k=h+24|0;jb(a+252|0,mg(j,52916,58720,h,i,k),84);l=h+12|0;jb(a+168|0,mg(j,52560,52916,h,l,i),84);i=h+36|0;jb(a+84|0,mg(j,58720,53752,h,k,i),84);m=jb(a,mg(j,53752,52560,h,i,l),84),n=g,L[m+336>>2]=n;Ha=h+144|0}function cx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=a+72|0;a:{b:{while(1){d=I[b+1|0];e=d<<24>>24;c:{a=F[b|0];if(a){d=cb(a,e)}else{d=I[d+f|0]}d=d&255;d:{if(!(d>>>0>29|!(1<<d&792723456))){d=0;if(I[c|0]!=(a&255)|I[c+1|0]!=(e&255)){break b}break d}e:{switch(d-5|0){case 2:if(I[c|0]!=(a&255)){break a}b=b+1|0;c=c+1|0;a=e;case 1:if(I[c|0]!=(a&255)){break a}c=c+1|0;a=I[b+1|0];b=b+1|0;break;case 0:break e;default:break c}}d=0;if(I[c|0]!=(a&255)|I[b+1|0]!=I[c+1|0]){break b}}b=b+2|0;c=c+2|0;continue}break}a=I[c+1|0];b=F[c|0];if(b){a=cb(b,a<<24>>24)}else{a=I[a+f|0]}a=a&255;if(1<<a&792723680?a>>>0<=29:0){break a}d=1}return d|0}return 0}function Mj(a,b){var c=0,d=0,e=0,f=0,g=0;d=Ha-32|0;Ha=d;H[d+20>>2]=b;H[d+28>>2]=b;H[d+24>>2]=b;c=1;while(1){e=c;c=c+1|0;f=H[b+4>>2];b=b+8|0;if(f){continue}break}H[d+28>>2]=b;c=Xa(28);H[c+24>>2]=0;H[c+16>>2]=0;H[c+20>>2]=0;H[c+8>>2]=0;e=N(e,3)|1;H[c+12>>2]=e;f=ib(e<<3);H[c>>2]=f;if(f){H[c+4>>2]=e;b=0;while(1){if((b|0)!=(e|0)){g=(b<<3)+f|0;G[g+4>>1]=0;H[g>>2]=0;b=b+1|0;continue}break}b=H[d+24>>2];H[d+28>>2]=b+4;Lj(c,a,H[b>>2]);while(1){a=H[d+28>>2];H[d+28>>2]=a+4;b=H[a>>2];if(b){H[d+28>>2]=a+8;Lj(c,b,H[a+4>>2]);continue}break}Ha=d+32|0;return c}H[c+4>>2]=0;H[d+4>>2]=8;H[d>>2]=e;Wa(24709,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}function Ft(a,b){a=a|0;b=b|0;var c=0,d=0;if((b-448|0)!=(a|0)){L[a+528>>2]=L[b+80>>2];L[a+532>>2]=L[b+84>>2];L[a+536>>2]=L[b+88>>2]}H[a+540>>2]=H[b+92>>2];if((b-448|0)!=(a|0)){L[a+544>>2]=L[b+96>>2];L[a+548>>2]=L[b+100>>2];L[a+552>>2]=L[b+104>>2]}H[a+556>>2]=H[b+108>>2];if((b-448|0)!=(a|0)){L[a+560>>2]=L[b+112>>2];L[a+564>>2]=L[b+116>>2]}c=H[b+120>>2];H[a+568>>2]=c;d=H[b+124>>2];H[a+572>>2]=d;H[a+576>>2]=H[b+128>>2];H[a+580>>2]=H[b+132>>2];H[a+584>>2]=H[b+136>>2];if((b-448|0)!=(a|0)){L[a+588>>2]=L[b+140>>2];L[a+592>>2]=L[b+144>>2]}G[a+596>>1]=J[b+148>>1];b=c-1|0;if(b>>>0<=3){H[a+24>>2]=H[(b<<2)+33976>>2]}if(d){H[a+12>>2]=11}}function Ls(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;d=md(Xa(536),a);H[d>>2]=32844;jb(d+4|0,a+4|0,524);F[d+532|0]=I[a+532|0];H[d+528>>2]=H[a+528>>2];c=H[a+528>>2];b=jb(Xa(52),c,52);if(H[b+4>>2]){H[b+4>>2]=0}a=H[b+8>>2];if(a){g=b,h=qb(a),H[g+8>>2]=h}a=0;e=H[b+20>>2];if(e){a=jk(e,b);H[b+20>>2]=a}e=H[b+24>>2];if(e){f=jk(e,b);H[b+24>>2]=f;a=H[b+20>>2]}c=I[c+13|0]&64;H[b+32>>2]=c?f:a;H[b+28>>2]=c?a:f;if(H[b+36>>2]){H[b+36>>2]=0}if(H[b+40>>2]){H[b+40>>2]=0}a=H[b+44>>2];if(a){g=b,h=La[H[H[a>>2]+8>>2]](a)|0,H[g+44>>2]=h}c=Xa(32);a=0;while(1){if((a|0)!=8){H[c+(a<<2)>>2]=0;a=a+1|0;continue}break}H[b+48>>2]=c;H[d+528>>2]=b;return d|0}function Fk(a,b,c){var d=0,e=0,f=0,g=0;f=(a|0)<0;d=0;a:{if(f){break a}e=H[14660];d=0;if(H[e+12>>2]<=(a|0)){break a}d=H[H[e>>2]+(a<<2)>>2]}e=d;b:{if(f){break b}f=H[14663];if(H[f+8>>2]<=(a|0)){break b}g=H[H[f+4>>2]+(a<<2)>>2]}f=e?e:12415;g=g?g:12415;e=H[H[14658]+(a<<2)>>2];d=14828;c:{if(!e){break c}a=b<<16>>16;d=0;if((a|0)<0){break c}b=H[e+4>>2];d=0;if((a|0)>=H[b+12>>2]){break c}d=H[H[b>>2]+(a<<2)>>2]}e=d;gb(c,G[29370]);a=Za(Za(ub(c,60),f),21503);b=J[29370]+1|0;G[29370]=b;gb(a,b<<16>>16);a=Za(ub(a,60),g);if(e){Za(Za(Za(a,14978),e),15223)}a=Za(a,21445);b=J[29370]-1|0;G[29370]=b;gb(a,b<<16>>16);Za(Za(Za(a,13001),f),21503)}function Ne(a,b,c,d){var e=O(0),f=0,g=O(0),h=0,i=O(0),j=O(0),k=O(0),l=O(0);f=Ha-48|0;Ha=f;a:{if(L[b+8>>2]==O(0)){e=L[b>>2];if(e==O(0)){L[a+8>>2]=d;H[a+4>>2]=0;L[a>>2]=c;break a}g=L[b+4>>2];L[a+8>>2]=-c;c=O(-d);b=e<O(0);i=O(e*(b?c:d));e=O(W(O(O(e*e)+O(g*g))));L[a+4>>2]=i/e;L[a>>2]=O(g*(b?d:c))/e;break a}e=sd(b);h=f+36|0;Ya(h,b);sc(h);h=f+24|0;Ya(h,b);wb(h,O(L[b+4>>2]/e));b=f+12|0;Ya(b,58720);xb(b,h);sc(b);g=L[f+36>>2];j=L[f+16>>2];k=L[f+40>>2];e=L[f+12>>2];L[f+8>>2]=O(g*j)-O(k*e);i=e;e=L[f+44>>2];l=g;g=L[f+20>>2];L[f+4>>2]=O(i*e)-O(l*g);L[f>>2]=O(k*g)-O(e*j);wb(f,e>O(0)?O(-c):c);wb(b,d);Ya(a,f);lb(a,b)}sc(a);Ha=f+48|0}function Mr(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;d=Ha-8208|0;Ha=d;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+28>>2]=c;c=0;a:{b:{while(1){if(c){break b}c=Rp(d+16|0,8192,b);if(H[b+76>>2]<0){e=H[b>>2]}else{e=H[b>>2]}if(e>>>5&1){Wa(19326,0);f=2;break a}g=H[a+24>>2];h=d+16|0;e=c;if(H[b+76>>2]<0){c=H[b>>2]}else{c=H[b>>2]}c=c>>>4&1;if(Aj(g,h,e,c)){continue}break}f=zj(H[a+24>>2]);c=H[H[a+24>>2]+268>>2];if(c-1>>>0<=39){c=H[(c<<2)+34288>>2]}else{c=0}H[d+4>>2]=c;H[d>>2]=f;Wa(19297,d);f=3}rf(b);b=H[a+28>>2];if(!b){break a}Sg(b);b=H[a+28>>2];if(!b){break a}nb(b);Va(b);H[a+28>>2]=0}Ha=d+8208|0;return f|0}function ml(a,b){var c=0,d=0;c=Ha+-64|0;Ha=c;a:{if(!b){break a}if(zc(a)){break a}H[c+16>>2]=c+56;H[c+20>>2]=c+48;H[c+24>>2]=c+40;H[c+28>>2]=c+32;b:{switch(wc(b,8813,c+16|0)-3|0){case 0:L[a>>2]=M[c+56>>3];L[a+4>>2]=M[c+48>>3];L[a+8>>2]=M[c+40>>3];break a;case 1:L[a>>2]=M[c+56>>3];L[a+4>>2]=M[c+48>>3];L[a+8>>2]=M[c+40>>3];L[a+12>>2]=M[c+32>>3];break a;default:break b}}d=Yb(b)<<16;if(!((d|0)!=262144&(d|0)!=196608)){L[a>>2]=F[b|0]-48|0;L[a+4>>2]=F[b+1|0]-48|0;L[a+8>>2]=F[b+2|0]-48|0;L[a+12>>2]=(d|0)==262144?O(F[b+3|0]-48|0):O(-100);break a}H[c>>2]=b;Wa(29242,c);H[a+8>>2]=0;H[a+12>>2]=0;H[a>>2]=0;H[a+4>>2]=0}Ha=c- -64|0}function hn(a){var b=0,c=0;H[a+40>>2]=0;H[a+44>>2]=0;H[a+32>>2]=1056964608;H[a+36>>2]=1065353216;H[a+24>>2]=1056964608;H[a+28>>2]=1073741824;H[a+16>>2]=1065353216;H[a+20>>2]=1061158912;H[a+8>>2]=1065353216;H[a+12>>2]=1065353216;H[a>>2]=1065353216;H[a+4>>2]=1065353216;c=a+48|0;while(1){if((b|0)==12){c=a+96|0;b=0;while(1){if((b|0)==5){c=a+116|0;b=0;while(1){if((b|0)!=4){H[c+(b<<2)>>2]=1065353216;b=b+1|0;continue}break}H[a+140>>2]=1065353216;H[a+144>>2]=1065353216;H[a+132>>2]=0;H[a+136>>2]=1065353216}else{H[c+(b<<2)>>2]=1065353216;b=b+1|0;continue}break}}else{H[c+(b<<2)>>2]=1065353216;b=b+1|0;continue}break}return a}function Jx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;i=a+72|0;a=H[b>>2];f=H[d>>2];while(1){a:{if((a|0)==(c|0)|(e|0)==(f|0)){break a}b:{c:{d:{e:{g=I[a|0];switch(I[i+g|0]-5|0){case 2:break c;case 1:break d;case 0:break e;default:break b}}G[f>>1]=I[a+1|0]&63|(g&31)<<6;a=a+2|0;f=f+2|0;continue}G[f>>1]=I[a+2|0]&63|((I[a+1|0]&63)<<6|g<<12);a=a+3|0;f=f+2|0;continue}if((f+2|0)==(e|0)){break a}j=I[a+1|0];h=(I[a+2|0]&63)<<6;G[f+2>>1]=h|I[a+3|0]&63|56320;G[f>>1]=((g&7)<<18|(j&63)<<12|h)+16711680>>>10|55296;a=a+4|0;f=f+4|0;continue}G[f>>1]=g<<24>>24;f=f+2|0;a=a+1|0;continue}break}H[b>>2]=a;H[d>>2]=f}function jw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;if(Cc(a,H[b+8>>2],f)){Li(b,c,d,e);return}h=I[b+53|0];g=H[a+12>>2];F[b+53|0]=0;i=I[b+52|0];F[b+52|0]=0;j=a+16|0;Hi(H[j>>2],H[a+20>>2],b,c,d,e,f);k=I[b+52|0];i=i|k;l=I[b+53|0];h=h|l;a:{if(g>>>0<2){break a}j=j+(g<<3)|0;g=a+24|0;while(1){if(I[b+54|0]){break a}b:{if(k&1){if(H[b+24>>2]==1){break a}if(I[a+8|0]&2){break b}break a}if(!(l&1)){break b}if(!(F[a+8|0]&1)){break a}}G[b+52>>1]=0;Hi(H[g>>2],H[g+4>>2],b,c,d,e,f);l=I[b+53|0];h=(l|h)&1;k=I[b+52|0];i=(k|i)&1;g=g+8|0;if(j>>>0>g>>>0){continue}break}}F[b+53|0]=h&1;F[b+52|0]=i&1}function Px(a,b){a=a|0;b=b|0;var c=0,d=0;a:{b:{a=I[b+2|0];if((a|0)!=120){c=b+2|0;b=0;while(1){if((a&255)==59){break b}b=((a<<24>>24)+N(b,10)|0)-48|0;if((b|0)>1114111){break a}a=I[c+1|0];c=c+1|0;continue}}a=b+3|0;b=0;while(1){d=I[a|0];c=d<<24>>24;c:{d:{e:{switch(d-48|0){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:b=c-48|b<<4;break d;case 17:case 18:case 19:case 20:case 21:case 22:b=(c+(b<<4)|0)-55|0;break d;case 11:break b;case 49:case 50:case 51:case 52:case 53:case 54:break e;default:break c}}b=(c+(b<<4)|0)-87|0}if((b|0)>1114111){break a}}a=a+1|0;continue}}return He(b)|0}return-1}function wf(a,b,c,d,e,f,g,h,i,j){var k=0,l=0,m=O(0),n=O(0),o=O(0),p=O(0);k=Ha-48|0;Ha=k;a:{b:{if(c){c=(c|0)>0?c:0;m=O(1);n=O(1);break b}H[a+8>>2]=0;H[a>>2]=0;H[a+4>>2]=0;if(!b){break a}if(d){H[b+8>>2]=0;H[b>>2]=0;H[b+4>>2]=0;break a}Ya(b,h);break a}while(1){if((c|0)!=(l|0)){l=l+1|0;o=O(o+n);p=O(p+m);m=O(i*m);n=O(j*n);continue}break}c=k+36|0;Ya(c,h);wb(c,p);l=k+24|0;Ya(l,f);lb(l,c);f=k+12|0;Ya(f,g);wb(f,O(o+O(-1)));lb(l,f);Ya(k,e);wb(k,n);lb(l,k);if(d){Ya(f,g);wb(f,o);Vb(a,f,c);if(!b){break a}Ya(b,l);break a}Ya(a,k+24|0);a=k+12|0;Ya(a,g);wb(a,O(j*o));Ya(k,h);wb(k,O(p+m));if(!b){break a}Vb(b,a,k)}Ha=k+48|0}function Vd(a,b,c,d,e,f,g,h){var i=0,j=0,k=0,l=0;k=1;i=d&2147483647;j=i;l=(i|0)==2147418112;a:{if(l&!c?a|b:l&(c|0)!=0|i>>>0>2147418112){break a}i=h&2147483647;if(!g&(i|0)==2147418112?e|f:(i|0)==2147418112&(g|0)!=0|i>>>0>2147418112){break a}if(!(a|e|(c|g)|(b|f|(i|j)))){return 0}i=d&h;if((i|0)>0){j=1}else{j=(i|0)>=0}if(j){if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0<e>>>0|b>>>0<f>>>0:c>>>0<g>>>0&(d|0)<=(h|0)|(d|0)<(h|0)){return-1}return(a^e|c^g|(b^f|d^h))!=0}if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0>e>>>0|b>>>0>f>>>0:c>>>0>g>>>0&(d|0)>=(h|0)|(d|0)>(h|0)){return-1}k=(a^e|c^g|(b^f|d^h))!=0}return k}function Hl(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;f=Ha-16|0;Ha=f;e=H[a+12>>2];if((e|0)>=0){d=H[a+8>>2];a:{b:{if((d|0)>(e|0)){break b}c=H[a+4>>2];c=(c|0)>(e|0)?c:((e>>>1|0)+e|0)+1|0;if((c|0)==(d|0)){break b}g=ib(c<<2);if(!g){if((d|0)>=(c|0)){break b}H[f+4>>2]=c;H[f>>2]=d;Wa(24475,f);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=e;if((c|0)<(e|0)){H[a+12>>2]=c;d=c}k=(d|0)>0?d:0;h=H[a>>2];while(1){if((i|0)==(k|0)){if(h){Va(h);d=H[a+12>>2]}H[a>>2]=g;ud(a,d,c-d|0);H[a+8>>2]=c;if(H[a+12>>2]>(e|0)){break a}}else{j=i<<2;H[j+g>>2]=H[h+j>>2];i=i+1|0;continue}break}}H[a+12>>2]=e+1}H[H[a>>2]+(e<<2)>>2]=b}Ha=f+16|0}function mk(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=0,h=O(0);g=Ha-16|0;Ha=g;c=O(1);a:{if(H[a+56>>2]!=H[b+56>>2]){break a}e=O(Tc(a+4|0,b+4|0)/O(.05000000074505806));c=O(1);if(e>=O(1)){break a}h=O(Tc(a+16|0,b+16|0)/O(.05000000074505806));c=O(1);if(h>=O(1)){break a}rb(g,a+40|0);Bi(g,b+40|0);d=L[g+8>>2];c=O(d*d);d=L[g>>2];f=O(d*d);d=L[g+4>>2];d=kb(O(W(O(c+O(f+O(d*d))))),L[g+12>>2]);d=O(O(d+d)/L[13480]);c=O(1);if(d>=O(1)){break a}f=L[13481];c=O(O(P(O(L[b+64>>2]-L[a+64>>2])))/f);f=O(O(P(O(L[b+68>>2]-L[a+68>>2])))/f);f=f<c?c:f;c=O(1);if(f>=O(1)){break a}e=e<h?h:e;e=d>e?d:e;c=e<f?f:e}e=c;Ha=g+16|0;return e}function pn(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;H[a>>2]=3260;b=H[a+8>>2]-H[a+4>>2]>>2;f=(b|0)>0?b:0;while(1){if((c|0)==(f|0)){a:{b=H[a+20>>2]-H[a+16>>2]>>2;f=(b|0)>0?b:0;c=0;while(1){if((c|0)==(f|0)){break a}b=H[a+16>>2];e=c<<2;d=H[b+e>>2];if(d){La[H[H[d>>2]+4>>2]](d);b=H[a+16>>2]}H[b+e>>2]=0;c=c+1|0;continue}}}else{b=H[a+4>>2];e=c<<2;d=H[b+e>>2];if(d){La[H[H[d>>2]+4>>2]](d);b=H[a+4>>2]}H[b+e>>2]=0;c=c+1|0;continue}break}H[a+40>>2]=0;H[a+8>>2]=H[a+4>>2];c=H[a+16>>2];H[a+20>>2]=c;b=H[a+36>>2];if(b){Va(b);c=H[a+16>>2]}H[a+36>>2]=0;if(c){H[a+20>>2]=c;Va(c)}b=H[a+4>>2];if(b){H[a+8>>2]=b;Va(b)}return a|0}function Vi(a,b,c,d,e){var f=0,g=0,h=0,i=0;f=Ha-208|0;Ha=f;H[f+204>>2]=c;c=f+160|0;zb(c,0,40);H[f+200>>2]=H[f+204>>2];a:{if((dq(0,b,f+200|0,f+80|0,c,d,e)|0)<0){e=-1;break a}i=H[a+76>>2]<0;g=H[a>>2];H[a>>2]=g&-33;b:{c:{d:{if(!H[a+48>>2]){H[a+48>>2]=80;H[a+28>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;h=H[a+44>>2];H[a+44>>2]=f;break d}if(H[a+16>>2]){break c}}c=-1;if(fi(a)){break b}}c=dq(a,b,f+200|0,f+80|0,f+160|0,d,e)}if(h){La[H[a+36>>2]](a,0,0)|0;H[a+48>>2]=0;H[a+44>>2]=h;H[a+28>>2]=0;b=H[a+20>>2];H[a+16>>2]=0;H[a+20>>2]=0;c=b?c:-1}b=a;a=H[a>>2];H[b>>2]=a|g&32;e=a&32?-1:c;if(i){break a}}Ha=f+208|0;return e}function Om(a){var b=0,c=0,d=0,e=0;e=Ha-16|0;Ha=e;c=(C(a),v(2));b=c&2147483647;a:{if(b>>>0<=1061752794){if(b>>>0<964689920){break a}a=Ce(+a,0);break a}if(b>>>0<=1081824209){d=+a;if(b>>>0<=1075235811){a=Ce(((c|0)<0?1.5707963267948966:-1.5707963267948966)+d,1);break a}a=Ce(((c|0)<0?3.141592653589793:-3.141592653589793)+d,0);break a}if(b>>>0<=1088565717){d=+a;if(b>>>0<=1085271519){a=Ce(((c|0)<0?4.71238898038469:-4.71238898038469)+d,1);break a}a=Ce(((c|0)<0?6.283185307179586:-6.283185307179586)+d,0);break a}if(b>>>0>=2139095040){a=O(a-a);break a}b=Fi(a,e+8|0);a=Ce(M[e+8>>3],b&1)}Ha=e+16|0;return a}function gs(a,b,c){a=a|0;b=O(b);c=c|0;var d=0,e=O(0),f=O(0),g=0,h=O(0);a:{g=H[a+540>>2];if(!(g<<16)){break a}d=g<<16>>16;if(c){e=O(b/L[a+40>>2]);L[a+44>>2]=L[a+44>>2]*e;c=0;d=(d|0)>0?d:0;while(1)if((c|0)==(d|0)){L[a+40>>2]=b;return}else{pd(H[H[a+528>>2]+(c<<2)>>2],e,1);c=c+1|0;continue}}if((d|0)<=0){break a}e=O(b-L[a+40>>2]);c=0;c=(d|0)<=(g|0)?H[(H[a+528>>2]+(d<<2)|0)-4>>2]:c;h=L[c+40>>2];d=H[H[c>>2]+64>>2];f=L[c+44>>2];if(f<O(-e)){La[d|0](c,O(h-f),0);L[a+40>>2]=L[a+40>>2]-f;L[a+44>>2]=L[a+44>>2]-f;La[H[H[a>>2]+64>>2]](a,b,1);return}La[d|0](c,O(e+h),0);L[a+40>>2]=b;L[a+44>>2]=e+L[a+44>>2]}}function tt(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=O(0),g=O(0),h=0,i=O(0);e=Ha-16|0;Ha=e;Zc(a,b,c,d);a:{if(c<=O(0)){break a}f=O(L[a+40>>2]-L[a+44>>2]);if(f<=c){break a}c=O((d?c:O(f-c))/f);b:{c:{d=H[a+8>>2];switch(d-3|0){case 0:case 2:break c;default:break b}}f=L[a+676>>2];g=L[a+680>>2];H[e+12>>2]=0;H[e+4>>2]=0;H[e+8>>2]=0;d=e+4|0;xf(d,a+616|0,O(f+O(c*g)));xb(d,a+652|0);lb(b+4|0,d);d=H[a+8>>2]}if((d&-2)!=4){break a}h=I[a+33|0];f=L[13382];g=L[a+744>>2];i=L[a+748>>2];H[e+12>>2]=0;H[e+4>>2]=0;H[e+8>>2]=0;d=e+4|0;c=O(g+O(c*i));xf(d,a+684|0,h?O(f+c):c);xb(d,a+720|0);lb(b+116|0,d)}Ha=e+16|0}function ss(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;d=Ha-48|0;Ha=d;if(b){H[d+32>>2]=a;eb(b,21591,d+32|0);Pc(a,b);if(!(!(L[a+544>>2]!=O(0)|L[a+548>>2]!=O(0))&L[a+552>>2]==O(0))){_a(b,G[29370]);$a(18439,b);G[29370]=J[29370]+1;tb(a+544|0,b,3);G[29370]=J[29370]-1;bb(10,b)}e=G[a+540>>1];Sb(b);H[d+16>>2]=e;eb(b,19019,d+16|0);G[29370]=J[29370]+1;while(1){c=f<<16>>16;if((c|0)>=(e|0)){G[29370]=J[29370]-1}else{Sb(b);H[d>>2]=c;eb(b,16059,d);a:{b:{if(!((c|0)<0|(c|0)>=H[a+540>>2])){c=H[H[a+528>>2]+(c<<2)>>2];if(c){break b}}$a(14796,b);break a}La[H[H[c>>2]+72>>2]](c,b)}f=f+1|0;continue}break}}Ha=d+48|0}function am(a,b){var c=0,d=0,e=0;d=H[14717];if(d){c=H[(b?20:24)+a>>2];d=H[d+(!(I[a+13|0]&64)^b?20:24)>>2];ze(H[H[c+56>>2]+236>>2],H[H[d+56>>2]+236>>2]);Bh(c,d);a=H[a+36>>2];if((H[a>>2]&16777215)!=(H[14678]&16777215)){e=H[a+4>>2];c=a+(b?28:16)|0;H[c>>2]=H[a>>2];H[c+4>>2]=e;H[c+8>>2]=H[a+8>>2];c=a+(b?44:40)|0;F[c+2|0]=I[a+14|0];G[c>>1]=J[a+12>>1]}e=H[d+8>>2];c=a+(b?16:28)|0;H[c>>2]=H[d+4>>2];H[c+4>>2]=e;H[c+8>>2]=H[d+12>>2];b=a+(b?40:44)|0;F[b+2|0]=I[d+18|0];G[b>>1]=J[d+16>>1];F[a+2|0]=I[58714];G[a>>1]=J[29356];F[a+6|0]=I[58714];G[a+4>>1]=J[29356];G[a+12>>1]=J[29356];F[a+14|0]=I[58714]}}function Wx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if((b|0)==(c|0)){return-4}g=a+72|0;e=b;while(1){a:{if((c|0)==(e|0)){break a}f=2;b:{c:{switch(I[I[e|0]+g|0]-2|0){case 4:f=3;break b;case 5:f=4;break b;case 1:if((b|0)!=(e|0)){break a}return Bg(a,b+1|0,c,d)|0;case 0:H[d>>2]=e;return 0;case 8:if((b|0)!=(e|0)){break a}H[d>>2]=b+1;return 7;case 7:if((b|0)!=(e|0)){break a}a=b+1|0;if((a|0)==(c|0)){return-3}H[d>>2]=I[I[b+1|0]+g|0]==10?b+2|0:a;return 7;case 19:if((b|0)!=(e|0)){break a}H[d>>2]=b+1;return 39;case 3:break b;default:break c}}f=1}e=e+f|0;continue}break}H[d>>2]=e;return 6}function Ml(a,b){var c=0,d=O(0),e=0;c=Ha+-64|0;Ha=c;a:{if(!b|!H[b+44>>2]){break a}H[c+60>>2]=-1082130432;b:{if(!ic(H[a+4>>2],c+60|0,7603)){break b}d=L[c+60>>2];if(d>O(0)){e=H[b+44>>2];if(d==L[e+40>>2]){break b}La[H[H[e>>2]+64>>2]](e,d,1);break b}db();M[c+32>>3]=d;Wa(24938,c+32|0)}c:{if(!ic(H[a+4>>2],c+56|0,10913)){break c}d=L[c+56>>2];if(d>O(0)){if(d==O(1)){break c}pd(H[b+44>>2],O(O(1)/d),1);break c}db();M[c+16>>3]=d;Wa(24999,c+16|0)}if(!ic(H[a+4>>2],c+52|0,10033)){break a}d=L[c+52>>2];if(d>O(0)){if(d==O(1)){break a}pd(H[b+44>>2],d,1);break a}db();M[c>>3]=d;Wa(24968,c)}Ha=c- -64|0}function ii(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=O(0);f=Ha-32|0;Ha=f;c=H[b+52>>2];d=H[b+56>>2];e=H[b+60>>2];h=H[b+64>>2];i=H[b+44>>2];j=H[b+40>>2];k=L[b+48>>2];g=H[b>>2];b=Xa(40);F[b+8|0]=0;H[b>>2]=30368;g=he(b+4|0,g,4);L[b+36>>2]=k;H[b+28>>2]=j;H[b+32>>2]=i;H[b+20>>2]=e;H[b+24>>2]=h;H[b+12>>2]=c;H[b+16>>2]=d;c=H[a+8>>2];d=H[a+12>>2];a:{if(c>>>0<d>>>0){H[c>>2]=b;d=c+4|0;break a}e=H[a+4>>2];c=Zm(f+12|0,jn(e,d,(c-e>>2)+1|0),H[a+8>>2]-H[a+4>>2]>>2,a+12|0);H[H[c+8>>2]>>2]=b;H[c+8>>2]=H[c+8>>2]+4;Pm(a+4|0,c);d=H[a+8>>2];Im(c)}H[a+8>>2]=d;if(!Nn(g,11560,5)){H[a+40>>2]=b}Ha=f+32|0}function mx(a,b,c){a=a|0;b=b|0;c=c|0;a:{b:{switch(((c-b|0)/2|0)-2|0){case 0:if(I[b+1|0]|(I[b+3|0]|I[b+2|0]!=116)){break a}a=I[b|0];return((a|0)==108?60:(a|0)==103?62:0)|0;case 1:if(I[b+1|0]|I[b|0]!=97|(I[b+3|0]|I[b+2|0]!=109)){break a}if(I[b+5|0]|I[b+4|0]!=112){break a}return 38;case 2:break b;default:break a}}if(I[b+1|0]){break a}a=I[b|0];if((a|0)!=97){if(I[b+3|0]|(a|0)!=113|(I[b+5|0]|I[b+2|0]!=117)){break a}if(I[b+7|0]|I[b+4|0]!=111|I[b+6|0]!=116){break a}return 34}if(I[b+3|0]|I[b+2|0]!=112|(I[b+5|0]|I[b+4|0]!=111)){break a}if(I[b+7|0]|I[b+6|0]!=115){break a}return 39}return 0}function ep(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0;g=Ha-16|0;Ha=g;if((b|0)>=0){f=H[a+8>>2];a:{if((f|0)>(b|0)){break a}e=H[a+4>>2];e=(b|0)<(e|0)?e:((b>>>1|0)+b|0)+1|0;if((f|0)==(e|0)){break a}h=ib(e<<2);if(!h){if((e|0)<=(f|0)){break a}H[g+4>>2]=e;H[g>>2]=f;Wa(d,g);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}d=H[a+12>>2];if((e|0)<(d|0)){H[a+12>>2]=e;d=e}k=(d|0)>0?d:0;f=H[a>>2];while(1){if((i|0)==(k|0)){if(f){Va(f);d=H[a+12>>2]}H[a>>2]=h;ud(a,d,e-d|0);H[a+8>>2]=e}else{j=i<<2;H[j+h>>2]=H[f+j>>2];i=i+1|0;continue}break}}if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}H[H[a>>2]+(b<<2)>>2]=c}Ha=g+16|0}function Yw(a,b,c){a=a|0;b=b|0;c=c|0;a:{b:{switch(((c-b|0)/2|0)-2|0){case 0:if(I[b|0]|(I[b+2|0]|I[b+3|0]!=116)){break a}a=I[b+1|0];return((a|0)==108?60:(a|0)==103?62:0)|0;case 1:if(I[b|0]|I[b+1|0]!=97|(I[b+2|0]|I[b+3|0]!=109)){break a}if(I[b+4|0]|I[b+5|0]!=112){break a}return 38;case 2:break b;default:break a}}if(I[b|0]){break a}a=I[b+1|0];if((a|0)!=97){if(I[b+2|0]|(a|0)!=113|(I[b+4|0]|I[b+3|0]!=117)){break a}if(I[b+6|0]|I[b+5|0]!=111|I[b+7|0]!=116){break a}return 34}if(I[b+2|0]|I[b+3|0]!=112|(I[b+4|0]|I[b+5|0]!=111)){break a}if(I[b+6|0]|I[b+7|0]!=115){break a}return 39}return 0}function fh(a,b,c,d,e){var f=0,g=O(0),h=O(0),i=0,j=O(0),k=0,l=0,m=O(0);f=Ha-32|0;Ha=f;a:{if(Bc(c)){db();Wa(27285,0);break a}if(!(d!=O(0)|e!=O(0))){db();Wa(27251,0);break a}j=L[c+4>>2];g=L[c>>2];h=L[c+8>>2];H[f+24>>2]=0;H[f+28>>2]=1065353216;H[f+16>>2]=0;H[f+20>>2]=0;k=1;i=f+16|0;yi(i,O(-1),O(0),O(0),kb(j,O(W(O(O(g*g)+O(h*h))))),1);yi(a,O(0),O(1),O(0),kb(g,h),1);g=L[14679];d=kb(e,L[c+8>>2]>=O(0)?d:O(-d));d=O($g(b?d:O(g+d))*O(.5));l=f,m=uc(d),L[l+12>>2]=m;d=ec(d);L[f+8>>2]=d;d=O(d*O(0));L[f+4>>2]=d;L[f>>2]=d;Qb(a,i);Qb(a,f);if(L[a+12>>2]<O(0)){xi(a)}Qb(a,53968)}Ha=f+32|0;return k}function Ux(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=a+72|0;a:{b:{while(1){a=I[b|0];d=I[e+a|0];if(!(d>>>0>29|!(1<<d&792723456))){b=b+1|0;d=I[c|0];c=c+1|0;if((a|0)==(d|0)){continue}break a}c:{switch(d-5|0){case 2:if(I[c|0]!=(a|0)){break a}c=c+1|0;a=I[b+1|0];b=b+1|0;case 1:if(I[c|0]!=(a&255)){break a}c=c+1|0;a=I[b+1|0];b=b+1|0;case 0:d=0;if(I[c|0]!=(a&255)){break b}a=I[c+1|0];f=I[b+1|0];b=b+2|0;c=c+2|0;if((a|0)==(f|0)){continue}break b;default:break c}}break}d=1;b=a;a=I[c|0];if((b|0)==(a|0)){break b}a=I[a+e|0];if(a>>>0>29){break b}if(1<<a&792723680){break a}}return d|0}return 0}function Ed(a){var b=O(0),c=0,d=0,e=O(0);d=(C(a),v(2));c=d&2147483647;if(c>>>0>=1065353216){if((c|0)==1065353216){return(d|0)>=0?O(0):O(3.141592502593994)}return O(O(0)/O(a-a))}a:{if(c>>>0<=1056964607){b=O(1.570796251296997);if(c>>>0<847249409){break a}return O(O(O(O(7.549789415861596e-8)-O(a*lf(O(a*a))))-a)+O(1.570796251296997))}if((d|0)<0){a=O(O(a+O(1))*O(.5));b=O(W(a));a=O(O(1.570796251296997)-O(b+O(O(b*lf(a))+O(-7.549789415861596e-8))));return O(a+a)}b=O(O(O(1)-a)*O(.5));e=O(W(b));a=(x(2,(C(e),v(2))&-4096),D());a=O(O(O(e*lf(b))+O(O(b-O(a*a))/O(e+a)))+a);b=O(a+a)}return b}function Ke(a,b){var c=0,d=0,e=0;c=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=c;c=I[b+15|0]|I[b+16|0]<<8|(I[b+17|0]<<16|I[b+18|0]<<24);F[a+15|0]=c;F[a+16|0]=c>>>8;F[a+17|0]=c>>>16;F[a+18|0]=c>>>24;c=H[b+12>>2];H[a+8>>2]=H[b+8>>2];H[a+12>>2]=c;if((a|0)!=(b|0)){L[a+20>>2]=L[b+20>>2];L[a+24>>2]=L[b+24>>2];L[a+28>>2]=L[b+28>>2];L[a+32>>2]=L[b+32>>2];L[a+36>>2]=L[b+36>>2]}c=H[b+44>>2];H[a+40>>2]=H[b+40>>2];H[a+44>>2]=c;d=b- -64|0;e=H[d+4>>2];c=a- -64|0;H[c>>2]=H[d>>2];H[c+4>>2]=e;c=H[b+60>>2];H[a+56>>2]=H[b+56>>2];H[a+60>>2]=c;c=H[b+52>>2];H[a+48>>2]=H[b+48>>2];H[a+52>>2]=c;return a}function Hh(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0;d=Ha-48|0;Ha=d;a:{b:{c:{if(a){e=H[a+8>>2];if(e){break c}}a=H[a>>2];H[d+4>>2]=b+1;H[d>>2]=a;Wa(25761,d);break b}d:{f=H[e+12>>2];if((f|0)>(b|0)){g=H[H[e>>2]+(b<<2)>>2];if(g){break d}}a=H[a>>2];H[d+24>>2]=f;H[d+20>>2]=b+1;H[d+16>>2]=a;Wa(25963,d+16|0);break b}h=H[14594];f=fb(H[h>>2],H[g>>2]);e=0;if(!f){break a}e=g;if((c|0)==(f|0)){break a}e=H[h+4>>2];g=H[h+8>>2];i=(g|0)>(c|0)?H[e+(c<<2)>>2]:i;c=H[a>>2];H[d+44>>2]=(f|0)<0|(f|0)>=(g|0)?0:H[e+(f<<2)>>2];H[d+40>>2]=i;H[d+36>>2]=c;H[d+32>>2]=b;Wa(28088,d+32|0)}e=0}Ha=d+48|0;return e}function mj(a,b,c,d,e,f){var g=0,h=0,i=0,j=0;h=H[a+12>>2];a:{b:{c:{if(!(d|e)){break c}i=(h|0)>0?h:0;while(1){if((g|0)!=(i|0)){j=N(g,12);g=g+1|0;if(H[H[a+20>>2]+j>>2]!=(b|0)){continue}break b}break}if(I[b+9|0]|(H[a+8>>2]|!d)){break c}H[a+8>>2]=b}d:{if(H[a+16>>2]!=(h|0)){g=H[a+20>>2];break d}if(!h){H[a+16>>2]=8;g=La[H[f+12>>2]](96)|0;H[a+20>>2]=g;if(g){break d}break a}g=La[H[f+16>>2]](H[a+20>>2],N(h,24))|0;if(!g){break a}H[a+20>>2]=g;H[a+16>>2]=h<<1}d=N(H[a+12>>2],12)+g|0;H[d+8>>2]=e;H[d>>2]=b;F[d+4|0]=c;if(!c){F[b+8|0]=1}H[a+12>>2]=H[a+12>>2]+1}return 1}return 0}function zv(a,b){a=a|0;b=O(b);var c=0,d=O(0),e=O(0),f=0,g=0;if(H[a+448>>2]==1){c=H[a+552>>2];H[a+532>>2]=H[a+548>>2];H[a+536>>2]=c;c=H[a+560>>2];H[a+540>>2]=H[a+556>>2];H[a+544>>2]=c;return}d=L[a+480>>2];a:{if(d==O(-1)){c=H[a+552>>2];H[a+532>>2]=H[a+548>>2];H[a+536>>2]=c;c=H[a+560>>2];H[a+540>>2]=H[a+556>>2];H[a+544>>2]=c;break a}b:{e=L[a+620>>2];d=O(b-d);if(e>=d|e==O(0)){break b}f=+O(d/e)+.99;c:{if(P(f)<2147483648){c=~~f;break c}c=-2147483648}if((c|0)<=1){break b}d=O(d/O(c>>>0));while(1){if((c|0)==(g|0)){break a}Wn(a,d);g=g+1|0;continue}}Wn(a,d)}L[a+480>>2]=b}function ul(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;a:{if(H[a>>2]!=H[b>>2]|H[a+8>>2]!=H[b+8>>2]){break a}if(Jf(a+12|0,b+12|0)|H[a+28>>2]!=H[b+28>>2]){break a}if(Jf(a+32|0,b+32|0)|H[a+48>>2]!=H[b+48>>2]|(J[a+52>>1]!=J[b+52>>1]|J[a+54>>1]!=J[b+54>>1])){break a}e=b+80|0;f=a+80|0;g=b+60|0;h=a+60|0;c=1;while(1){if((c|0)!=5){d=c<<2;if(H[d+h>>2]!=H[d+g>>2]){break a}d=c<<4;c=c+1|0;if(!Jf(d+f|0,d+e|0)){continue}break a}break}if(L[a+160>>2]!=L[b+160>>2]|L[a+164>>2]!=L[b+164>>2]|(L[a+168>>2]!=L[b+168>>2]|L[a+172>>2]!=L[b+172>>2])){break a}i=L[a+176>>2]==L[b+176>>2]}return i}function Pl(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;d=Ha-16|0;Ha=d;if(!(!b|!a)){a:{b:{e=H[13176];c=H[e>>2];f=dd(H[b>>2]);c=c+((f>>>0)%K[e+4>>2]<<3)|0;if(G[c+4>>1]<=0){break b}while(1){c=H[c>>2];if(!c){break b}if(H[c>>2]!=(f|0)){c=c+8|0;continue}break}c=c+4|0;break a}c=e+20|0}c=H[c>>2];c:{if(c){La[c|0](a,b);break c}db();H[d>>2]=H[b>>2];Wa(24125,d);F[52606]=1}a=I[52604];if(a){H[14720]=H[14720]+1}b=I[52605];if(b){H[14721]=H[14721]+1}c=I[52606];if(c){H[14722]=H[14722]+1}H[14719]=H[14719]+1;if(!(c|(a|b))){H[14723]=H[14723]+1}F[52605]=0;F[52604]=0;F[52606]=0}Ha=d+16|0}function Pr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;while(1){f=e;e=e+1|0;if(H[(f<<2)+c>>2]){continue}break}e=0;g=Xa(16);d=qb(b);H[g+12>>2]=0;H[g>>2]=d;h=Xa(28);H[h+20>>2]=0;Ec(h,19);H[g+4>>2]=h;d=Xa(16);H[d>>2]=0;H[d+4>>2]=10;H[d+8>>2]=0;H[d+12>>2]=0;H[g+8>>2]=d;d=f-1|0;while(1){if((e|0)<(d|0)){f=(e<<2)+c|0;ob(h,qb(H[f>>2]),qb(H[f+4>>2]));e=e+2|0;continue}break}Pb(H[a+28>>2],g);d=H[a+4>>2];a:{if(H[a+8>>2]|!d){break a}e=0;c=H[d+12>>2];f=(c|0)>0?c:0;while(1){if((e|0)==(f|0)){break a}c=e<<2;e=e+1|0;if(Hb(H[H[d>>2]+c>>2],b)){continue}break}H[a+8>>2]=g}}function jj(a,b,c,d,e){var f=0,g=0,h=0;b=N(b,28);g=H[a+340>>2];f=H[b+H[g+144>>2]>>2];H[c>>2]=f;H[c+4>>2]=H[(b+H[g+144>>2]|0)+4>>2];a:{if((f|0)==4){H[c+8>>2]=H[e>>2];b=H[(b+H[g+144>>2]|0)+8>>2];while(1){a=I[b|0];d=H[e>>2];H[e>>2]=d+1;F[d|0]=a;a=I[b|0];b=b+1|0;if(a){continue}break}H[c+12>>2]=0;a=16;break a}f=H[(b+H[g+144>>2]|0)+20>>2];H[c+12>>2]=f;h=H[d>>2];H[c+16>>2]=h;H[d>>2]=N(f,20)+h;f=(b+H[g+144>>2]|0)+12|0;b=0;while(1){if(b>>>0<K[c+12>>2]){f=H[f>>2];jj(a,f,H[c+16>>2]+N(b,20)|0,d,e);b=b+1|0;f=(H[g+144>>2]+N(f,28)|0)+24|0;continue}break}a=8}H[a+c>>2]=0}function Rt(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=O(0),h=O(0),i=O(0),j=O(0),k=O(0),l=O(0),m=O(0),n=0;c=Ha-96|0;Ha=c;if(b){d=H[a+24>>2];a:{if((d|0)<0){break a}e=H[H[14657]+4>>2];if((d|0)>=H[e+12>>2]){break a}f=H[H[e>>2]+(d<<2)>>2]}g=L[a+32>>2];h=L[a+28>>2];i=L[a+36>>2];d=I[a+48|0];j=L[a+4>>2];k=L[a+8>>2];l=L[a+12>>2];m=L[a+16>>2];e=I[a+49|0];n=H[a+40>>2];H[c+72>>2]=H[a+44>>2];H[c+48>>2]=n;H[c+88>>2]=e?120:101;M[c+80>>3]=m;M[c- -64>>3]=l;M[c+56>>3]=k;M[c+40>>3]=j;H[c+32>>2]=d?120:101;M[c+24>>3]=i;M[c+16>>3]=h;H[c>>2]=f;M[c+8>>3]=g;pb(b,14892,c)}Ha=c+96|0}function Wk(a,b){var c=0,d=0;c=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=c;c=I[b+15|0]|I[b+16|0]<<8|(I[b+17|0]<<16|I[b+18|0]<<24);F[a+15|0]=c;F[a+16|0]=c>>>8;F[a+17|0]=c>>>16;F[a+18|0]=c>>>24;c=H[b+12>>2];H[a+8>>2]=H[b+8>>2];H[a+12>>2]=c;L[a+20>>2]=L[b+20>>2];L[a+24>>2]=L[b+24>>2];L[a+28>>2]=L[b+28>>2];L[a+32>>2]=L[b+32>>2];L[a+36>>2]=L[b+36>>2];c=H[b+44>>2];H[a+40>>2]=H[b+40>>2];H[a+44>>2]=c;c=H[b+52>>2];H[a+48>>2]=H[b+48>>2];H[a+52>>2]=c;c=H[b+60>>2];H[a+56>>2]=H[b+56>>2];H[a+60>>2]=c;b=b- -64|0;d=H[b+4>>2];c=a- -64|0;H[c>>2]=H[b>>2];H[c+4>>2]=d;return a}function Rl(a){var b=0,c=0,d=0,e=0,f=0,g=0;d=Ql();e=H[14593];if(!H[d+4>>2]){b=Xa(16);H[b>>2]=0;H[b+4>>2]=10;H[b+8>>2]=0;H[b+12>>2]=0;H[d+4>>2]=b}a:{if(!e){break a}b=-1;while(1){f=H[e+4>>2];if((f|0)<=(b|0)){break a}g=H[e>>2];while(1){b:{c:{d:{if(!c){b=b+1|0;if((f|0)<=(b|0)){break c}c=(b<<3)+g|0;break d}c=c+8|0}c=H[c>>2];if(c){break b}}c=0;if((b|0)<(f|0)){continue}break a}break}Wc(H[d+4>>2],H[c>>2]);continue}}H[d+12>>2]=14;b=Xa(20);H[b>>2]=H[a>>2];H[b+4>>2]=H[a+4>>2];H[b+8>>2]=H[a+8>>2];H[b+12>>2]=H[a+12>>2];H[b+16>>2]=H[a+16>>2];H[d+16>>2]=b;return d}function Gn(a){var b=0,c=0,d=0;b=a+68|0;c=H[a+8>>2];a:{if(!c){c=H[a+44>>2];H[b>>2]=H[a+40>>2];H[b+4>>2]=c;H[b+24>>2]=H[a- -64>>2];c=H[a+60>>2];H[b+16>>2]=H[a+56>>2];H[b+20>>2]=c;c=H[a+52>>2];H[b+8>>2]=H[a+48>>2];H[b+12>>2]=c;break a}d=H[c+72>>2];H[b>>2]=H[c+68>>2];H[b+4>>2]=d;H[b+24>>2]=H[c+92>>2];d=H[c+88>>2];H[b+16>>2]=H[c+84>>2];H[b+20>>2]=d;d=H[c+80>>2];H[b+8>>2]=H[c+76>>2];H[b+12>>2]=d;pi(b,a+40|0)}b:{b=H[a+12>>2];if(!b){break b}c=0;b=H[b+12>>2];b=(b|0)>0?b:0;while(1){if((b|0)==(c|0)){break b}Gn(H[H[H[a+12>>2]>>2]+(c<<2)>>2]);c=c+1|0;continue}}}function En(a){var b=0,c=0,d=0;b=H[a+44>>2];H[a+68>>2]=H[a+40>>2];H[a+72>>2]=b;H[a+92>>2]=H[a- -64>>2];b=H[a+60>>2];H[a+84>>2]=H[a+56>>2];H[a+88>>2]=b;b=H[a+52>>2];H[a+76>>2]=H[a+48>>2];H[a+80>>2]=b;b=H[a+8>>2];if(b){c=b+80|0;d=a+68|0;Xb(c,d);lb(d,b+68|0);tc(a+80|0,c)}a:{b=H[a+12>>2];if(!b){break a}c=0;while(1){d=c<<16>>16;if((d|0)>=H[b+12>>2]){break a}En(H[H[b>>2]+(d<<2)>>2]);c=c+1|0;b=H[a+12>>2];continue}}b:{b=H[a+16>>2];if(!b){break b}c=0;while(1){d=c<<16>>16;if((d|0)>=H[b+12>>2]){break b}Dn(H[H[b>>2]+(d<<2)>>2]);c=c+1|0;b=H[a+16>>2];continue}}}function Dt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=0,g=0,h=0,i=0,j=O(0);d=Ha-48|0;Ha=d;H[d+44>>2]=0;H[d+36>>2]=0;H[d+40>>2]=0;f=d+36|0;h=(c?288:400)+a|0;i=(c?64:176)+a|0;Nb(f,h,i);e=sd(f);H[d+32>>2]=0;H[d+24>>2]=0;H[d+28>>2]=0;g=d+24|0;Vb(g,f,b);j=sd(g);Vb(h,i,g);a:{if(!(e>O(0))){break a}a=(c?600:672)+a|0;if(L[a+12>>2]==O(0)){break a}H[d+16>>2]=0;H[d+20>>2]=1065353216;H[d+8>>2]=0;H[d+12>>2]=0;b=d+8|0;Ae(b,f,g);Xb(b,a);c=a+16|0;Xb(b,c);e=O(W(O(j/e)));wb(c,e);c=b;b=a+48|0;Xb(c,b);wb(b,e);L[a+60>>2]=e*L[a+60>>2];L[a+64>>2]=e*L[a+64>>2]}Ha=d+48|0}function sb(a,b,c){var d=0,e=0,f=0,g=0;d=Ha-48|0;Ha=d;e=Wb(a,b);if(e){a:{if(I[52365]!=1){break a}f=e+28|0;if(!(O(_b(f)*O(23.622047424316406))<O(.5))){break a}H[d+16>>2]=H[e>>2];Wa(15765,d+16|0);tb(f,H[14711],3);b=d+32|0;Ya(b,f);wb(b,O(23.622047424316406));cg(e,b);H[d+40>>2]=H[e+48>>2];g=H[e+44>>2];H[d+32>>2]=H[e+40>>2];H[d+36>>2]=g;lb(b,52368);_h(e,b);b=H[e+24>>2];if(b){wb(b,O(23.622047424316406))}Wa(15616,0);tb(f,H[14711],3);Wa(30320,0)}Ib(H[a+488>>2],c,e+40|0);Ha=d+48|0;return}db();H[d>>2]=b;Wa(23383,d);a=Eb(4);H[a>>2]=15;Z(a|0,34176,0);B()}function Gk(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;H[a>>2]=32240;b=H[a+4>>2];a:{if(!b){break a}c=H[b+12>>2];f=(c|0)>0?c:0;b:while(1){if((e|0)!=(f|0)){c=0;d=0;d=H[b+12>>2]>(e|0)?H[H[b>>2]+(e<<2)>>2]:d;b=H[d+12>>2];g=(b|0)>0?b:0;while(1)if((c|0)==(g|0)){e=e+1|0;b=H[a+4>>2];continue b}else{c:{if(H[d+12>>2]<=(c|0)){break c}b=H[(H[d>>2]+N(c,28)|0)+8>>2];if(!b){break c}La[H[H[b>>2]+4>>2]](b)}c=c+1|0;continue}}break}if(!b){break a}Kl(b);b=H[a+4>>2];if(!b){break a}nb(b);Va(b);H[a+4>>2]=0}b=H[a+20>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+20>>2]=0}return a|0}function dh(a){var b=0,c=0,d=0,e=0,f=0;f=Ha-16|0;Ha=f;a:{b:{while(1){b=H[a>>2];if(!Hb(8478,b)){b=Bl(a);break a}if(Hb(8433,b)){if(Hb(8464,b)){break b}}b=0;d=H[a+8>>2];if(!d){break a}c=H[d+12>>2];if((c|0)<=0){break a}if((c|0)==1){a=H[H[d>>2]>>2];continue}break}c=0;b=We(Xa(28));while(1){e=c<<16>>16;if((e|0)>=H[d+12>>2]){La[H[H[b>>2]+52>>2]](b,a);break a}else{e=dh((e|0)>=0?H[H[d>>2]+(e<<2)>>2]:0);Pb(H[b+24>>2],e);c=c+1|0;continue}}}c:{if(Hb(8442,b)){if(Hb(8474,b)){break c}}b=ch(a);break a}db();H[f>>2]=H[a>>2];Wa(23975,f);b=0}Ha=f+16|0;return b}function gj(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;h=a+60|0;g=a+80|0;e=H[b>>2];while(1){a:{c=I[e|0];b:{if((c|0)!=58){if(c){break b}return 1}d=H[b>>2];while(1){c:{f=H[a+88>>2];c=H[a+92>>2];if((d|0)==(e|0)){break c}if((c|0)==(f|0)){if(!Fb(g)){break a}c=H[a+92>>2]}f=I[d|0];H[a+92>>2]=c+1;F[c|0]=f;d=d+1|0;continue}break}if((c|0)==(f|0)){if(!Fb(g)){break a}c=H[a+92>>2]}H[a+92>>2]=c+1;F[c|0]=0;c=Fc(h,H[a+96>>2],8);if(!c){break a}d=H[a+96>>2];d:{if((d|0)==H[c>>2]){H[a+96>>2]=H[a+92>>2];break d}H[a+92>>2]=d}H[b+4>>2]=c}e=e+1|0;continue}break}return 0}function ci(a,b){var c=0,d=0,e=0;c=Ha-32|0;Ha=c;a:{if(!a|!b){break a}e=H[H[b+4>>2]+24>>2];d=H[H[a+4>>2]+24>>2];if((e|0)!=(d|0)){H[c+4>>2]=e;H[c>>2]=d;Wa(30214,c);H[c+24>>2]=0;H[c+28>>2]=1065353216;H[c+16>>2]=0;H[c+20>>2]=0;d=c+16|0;La[H[H[b>>2]+8>>2]](b,d);La[H[H[a>>2]+16>>2]](a,d);break a}b:{switch(d-1|0){case 4:La[H[H[a>>2]+76>>2]](a,b);break a;case 1:La[H[H[a>>2]+76>>2]](a,b);break a;case 2:La[H[H[a>>2]+76>>2]](a,b);break a;case 3:La[H[H[a>>2]+76>>2]](a,b);break a;case 0:break b;default:break a}}La[H[H[a>>2]+76>>2]](a,b)}Ha=c+32|0}function he(a,b,c){var d=0,e=0;e=a;a:{b:{c:{d:{if((e^b)&3){break d}d=(c|0)!=0;e:{if(!(b&3)|!c){break e}while(1){d=I[b|0];F[e|0]=d;if(!d){break a}e=e+1|0;c=c-1|0;d=(c|0)!=0;b=b+1|0;if(!(b&3)){break e}if(c){continue}break}}if(!d){break b}if(!I[b|0]){break a}if(c>>>0<4){break d}while(1){d=H[b>>2];if(((16843008-d|d)&-2139062144)!=-2139062144){break c}H[e>>2]=d;e=e+4|0;b=b+4|0;c=c-4|0;if(c>>>0>3){continue}break}}if(!c){break b}}while(1){d=I[b|0];F[e|0]=d;if(!d){break a}e=e+1|0;b=b+1|0;c=c-1|0;if(c){continue}break}}c=0}zb(e,0,c);return a}function Rk(a,b){var c=0,d=0,e=0,f=0,g=0;d=Ha-16|0;Ha=d;H[d+12>>2]=b;e=Ha-16|0;Ha=e;if(H[b>>2]!=-1){f=Dp(e+8|0,Dp(e+12|0,d+12|0));c=Ha-16|0;Ha=c;while(1){if(H[b>>2]==1){continue}break}if(!H[b>>2]){F[c+12|0]=0;H[c+8>>2]=b;Yd(b,1);f=H[H[H[f>>2]>>2]>>2];g=H[15100]+1|0;H[15100]=g;H[f+4>>2]=g;H[b>>2]=-1;F[c+12|0]=1;if(!I[c+12|0]){Yd(H[c+8>>2],0)}}Ha=c+16|0}Ha=e+16|0;Ha=d+16|0;b=H[b+4>>2]-1|0;c=H[a+12>>2];a=H[a+8>>2];if(b>>>0<c-a>>2>>>0){c=H[Ep(a,b)>>2]!=0}else{c=0}if(!c){a=vg(Eb(4));H[a>>2]=41360;Z(a|0,41436,95);B()}return H[Ep(a,b)>>2]}function _e(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,l=0,m=0;g=fb(b,d?7723:7730);i=Pd(fb(b,d?5181:5188));if(!(g|i)){H[a>>2]=H[14678];return}j=Ch(g);k=fb(b,d?10142:10149);l=fb(b,d?10111:10118);h=fb(b,d?10215:10222);g=0;if(k){g=Gj(k,c,f)}if(l){m=Fj(l,e)}a:{if(!(!(j-1>>>0<11|i)&(j&-4)!=12)){if(h){m=Fj(h,e)}if(g){break a}g=Ej(e?1:2,f);break a}if(!h){break a}g=Gj(h,c,f)}c=Ic(fb(b,d?7660:7667));b:{if(d){d=Dj(fb(b,5e3));if(d){break b}}d=Dj(fb(b,5007))}F[a|0]=j;b=d<<12&28672|(i<<7&3968|(m<<4&112|g&15)|(c?-32768:0));F[a+1|0]=b;F[a+2|0]=b>>>8}function lx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;f=a+72|0;while(1){if((b|0)!=(c|0)){a=I[b|0];a:{b:{c:{d:{e:{f:{e=F[b+1|0];if(e){a=cb(e,a<<24>>24)}else{a=I[a+f|0]}switch((a&255)-6|0){case 4:break c;case 3:break d;case 1:break e;case 0:break f;default:break b}}b=b+3|0;break a}b=b+4|0;break a}H[d>>2]=H[d>>2]+1;a=b+2|0;if((c|0)!=(a|0)){e=I[b+2|0];g=b+4|0;b=F[b+3|0];if(b){b=cb(b,e<<24>>24)}else{b=I[e+f|0]}a=(b|0)==10?g:a}H[d+4>>2]=-1;b=a;break a}H[d+4>>2]=-1;H[d>>2]=H[d>>2]+1}b=b+2|0}H[d+4>>2]=H[d+4>>2]+1;continue}break}}function Xw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;f=a+72|0;while(1){if((b|0)!=(c|0)){a=I[b+1|0];a:{b:{c:{d:{e:{f:{e=F[b|0];if(e){a=cb(e,a<<24>>24)}else{a=I[a+f|0]}switch((a&255)-6|0){case 4:break c;case 3:break d;case 1:break e;case 0:break f;default:break b}}b=b+3|0;break a}b=b+4|0;break a}H[d>>2]=H[d>>2]+1;a=b+2|0;if((c|0)!=(a|0)){e=I[b+3|0];g=b+4|0;b=F[b+2|0];if(b){b=cb(b,e<<24>>24)}else{b=I[e+f|0]}a=(b|0)==10?g:a}H[d+4>>2]=-1;b=a;break a}H[d+4>>2]=-1;H[d>>2]=H[d>>2]+1}b=b+2|0}H[d+4>>2]=H[d+4>>2]+1;continue}break}}function Dh(a,b){var c=0,d=0,e=0,f=0,g=0;if(Bc(a+20|0)){if((a|0)!=(b|0)){L[a+20>>2]=L[b+20>>2];L[a+24>>2]=L[b+24>>2];L[a+28>>2]=L[b+28>>2]}F[a+40|0]=I[b+40|0]}if(!(L[a+32>>2]!=O(0)|L[a+36>>2]!=O(0))){if((a|0)!=(b|0)){L[a+32>>2]=L[b+32>>2];L[a+36>>2]=L[b+36>>2]}F[a+41|0]=I[b+41|0]}c=H[a+56>>2];a:{if(!c){break a}d=H[b+56>>2];if(!d){break a}if(If(c)){break a}jb(c,d,217);c=H[H[b+56>>2]+220>>2];if(!c){break a}e=H[a+56>>2];d=H[e+220>>2];if(!d){f=e,g=Gf(Xa(220)),H[f+220>>2]=g;d=H[H[a+56>>2]+220>>2];c=H[H[b+56>>2]+220>>2]}jb(d,c,217)}}function ak(a,b,c,d,e,f){var g=0;g=I[d|0]|I[d+1|0]<<8;if(g&1){lb(a,e+4|0);xb(a,f);g=I[d|0]|I[d+1|0]<<8}if(g&2){Ya(b,e+4|0);g=I[d|0]|I[d+1|0]<<8}if(g&8){Ya(c+16|0,e+16|0);Ya(c+28|0,e+28|0);g=I[d|0]|I[d+1|0]<<8}if(g&48){rb(c+40|0,e+40|0);g=I[d|0]|I[d+1|0]<<8}if(g&64){H[c+56>>2]=H[e+56>>2];L[c+60>>2]=L[e+60>>2];g=I[d|0]|I[d+1|0]<<8}if(g&128){H[c+92>>2]=H[e+92>>2];L[c+96>>2]=L[e+96>>2];L[c+100>>2]=L[e+100>>2];L[c+104>>2]=L[e+104>>2];G[c+108>>1]=J[e+108>>1];G[c+110>>1]=J[e+110>>1];g=I[d|0]|I[d+1|0]<<8}if(g&256){Qb(c+76|0,e+76|0)}}function vj(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;c=Ha-16|0;Ha=c;a:{if(Hb(H[a>>2],H[b>>2])){break a}f=H[b+4>>2];H[c+8>>2]=-1;H[c+12>>2]=0;H[c+4>>2]=0;H[c>>2]=0;while(1){if(kj(H[f>>2],H[f+4>>2],c+4|0,c,c+8|0)){d=H[a+4>>2];e=H[c+4>>2];if((fb(d,e)|0)!=H[d+20>>2]){continue}ob(d,qb(e),qb(H[c>>2]));continue}break}b=H[b+8>>2];f=0;while(1){d=f<<16>>16;if((d|0)>=H[b+12>>2]){break a}b:{if((d|0)<0){break b}e=H[H[b>>2]+(d<<2)>>2];if(!e){break b}g=H[a+8>>2];h=yb(g,H[e>>2]);if(!h){Pb(g,e);Xc(b,d,0);break b}vj(h,e)}f=f+1|0;continue}}Ha=c+16|0}function yh(a,b){var c=0,d=0,e=0,f=0,g=O(0),h=0,i=0;f=b;a:{b:{c:{if(!b){break c}d:{switch(H[b+20>>2]-1|0){case 0:if(H[a+24>>2]!=H[b+24>>2]){break c}H[b+4>>2]=0;g=L[a+28>>2];a=32;break a;case 2:b=H[b+24>>2];c=H[b+12>>2];if(!c){break c}if(!yh(a,(c|0)>0?H[H[b>>2]>>2]:0)){break c}break b;case 1:break d;default:break c}}d=H[b+24>>2];h=G[d+12>>1];b=0;while(1){c=b<<16>>16;if((c|0)>=(h|0)){if(e&1){break b}}else{b=b+1|0;e=yh(a,(c|0)<0|(c|0)>=H[d+12>>2]?i:H[H[d>>2]+(c<<2)>>2])|e;continue}break}}return 0}a=4}L[f+a>>2]=g;return 1}function ko(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=O(0),l=O(0),m=0,n=O(0);g=Ha-144|0;Ha=g;h=g+36|0;Ya(h,d);xb(h,c);sc(h);d=g+24|0;Ya(d,e);xb(d,c);sc(d);e=g+12|0;Ya(e,f);xb(e,c);sc(e);f=g+72|0;Ya(f,h);Fd(f,d);i=g+60|0;Ya(i,d);Fd(i,e);c=g+48|0;Ya(c,e);Fd(c,h);j=g+132|0;Ya(j,c);xb(j,i);d=g+120|0;Ya(d,f);xb(d,c);e=g+108|0;Ya(e,i);xb(e,f);k=sd(e);l=yc(d,e);H[g+104>>2]=0;H[g+96>>2]=0;H[g+100>>2]=0;e=g+96|0;mc(e,f,i,O(O(-l)/k));f=g+84|0;Ya(f,e);xb(f,c);mc(a,c,e,O(O(-yc(j,d))/yc(f,d)));sc(a);m=b,n=no(a,h),L[m>>2]=n;Ha=g+144|0}function Ge(a,b){var c=0,d=0,e=0;d=b;a:{b:{c:{b=b&255;if(b){if(a&3){while(1){c=I[a|0];if(!c|(b|0)==(c|0)){break a}a=a+1|0;if(a&3){continue}break}}c=H[a>>2];if(((c|16843008-c)&-2139062144)!=-2139062144){break c}e=N(b,16843009);while(1){b=c^e;if(((16843008-b|b)&-2139062144)!=-2139062144){break c}c=H[a+4>>2];b=a+4|0;a=b;if(((16843008-c|c)&-2139062144)==-2139062144){continue}break}break b}a=Yb(a)+a|0;break a}b=a}while(1){a=b;c=I[a|0];if(!c){break a}b=a+1|0;if((c|0)!=(d&255)){continue}break}}return I[a|0]==(d&255)?a:0}function eo(a,b){a=a|0;b=O(b);var c=0,d=0,e=0,f=0,g=0,h=O(0);f=a+16|0;g=H[a+448>>2];while(1){if((d|0)==4){La[H[H[a+16>>2]+8>>2]](f,b);La[H[H[a+124>>2]+8>>2]](a+124|0,b);La[H[H[a+232>>2]+8>>2]](a+232|0,b);La[H[H[a+340>>2]+8>>2]](a+340|0,b);L[a+4>>2]=b;L[a+480>>2]=b}else{c=N(d,108)+f|0;H[c+12>>2]=1065353216;e=H[a+456>>2];H[c+16>>2]=H[a+452>>2];H[c+20>>2]=e;e=H[a+464>>2];H[c+24>>2]=H[a+460>>2];H[c+28>>2]=e;L[c+12>>2]=L[a+476>>2];L[c+36>>2]=L[a+468>>2];h=L[a+472>>2];H[c+60>>2]=g;L[c+44>>2]=h;d=d+1|0;continue}break}}function pw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(Cc(a,H[b+8>>2],e)){Ki(b,c,d);return}a:{if(Cc(a,H[b>>2],e)){if(!(H[b+16>>2]!=(c|0)&H[b+20>>2]!=(c|0))){if((d|0)!=1){break a}H[b+32>>2]=1;return}H[b+32>>2]=d;b:{if(H[b+44>>2]==4){break b}G[b+52>>1]=0;a=H[a+8>>2];La[H[H[a>>2]+20>>2]](a,b,c,c,1,e);if(I[b+53|0]==1){H[b+44>>2]=3;if(!I[b+52|0]){break b}break a}H[b+44>>2]=4}H[b+20>>2]=c;H[b+40>>2]=H[b+40>>2]+1;if(H[b+36>>2]!=1|H[b+24>>2]!=2){break a}F[b+54|0]=1;return}a=H[a+8>>2];La[H[H[a>>2]+24>>2]](a,b,c,d,e)}}function ce(a){var b=0,c=0,d=0;a:{if(!a){if(H[11540]){b=ce(H[11540])}if(H[11502]){b=ce(H[11502])|b}a=H[14761];if(!a){break a}while(1){if(H[a+20>>2]!=H[a+28>>2]){b=ce(a)|b}a=H[a+56>>2];if(a){continue}break}break a}c=H[a+76>>2]<0;b:{c:{if(H[a+20>>2]==H[a+28>>2]){break c}La[H[a+36>>2]](a,0,0)|0;if(H[a+20>>2]){break c}b=-1;if(!c){break b}break a}b=H[a+8>>2];d=H[a+4>>2];if((b|0)!=(d|0)){b=d-b|0;La[H[a+40>>2]](a,b,b>>31,1)|0}b=0;H[a+28>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;H[a+4>>2]=0;H[a+8>>2]=0;if(c){break a}}}return b}function Bw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=Ha-16|0;Ha=d;H[d>>2]=b;H[d+4>>2]=c;H[d+8>>2]=b;H[d+12>>2]=c;b=Ha-32|0;Ha=b;c=Ri(b+8|0,6686);e=H[d+4>>2];g=H[d>>2];H[12729]=0;f=b+20|0;ta(96,f|0,g|0,e|0,c|0);e=H[12729];H[12729]=0;a:{b:{c:{if((e|0)!=1){H[12729]=0;a=da(97,a|0,f|0)|0;e=H[12729];H[12729]=0;if((e|0)==1){break c}$c(f);$c(c);H[a>>2]=40644;c=H[d+4>>2];H[a+8>>2]=H[d>>2];H[a+12>>2]=c;Ha=b+32|0;break a}a=aa()|0;break b}a=aa()|0;$c(b+20|0)}$c(c);ba(a|0);B()}H[a>>2]=40308;Ha=d+16|0;return a|0}function Bp(a){var b=0,c=0,d=0;if(!a){return 0}c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;b=a;while(1){a:{b:{c:{d:{e:{f:{g:{d=I[b|0];switch(d-34|0){case 0:case 3:break d;case 1:case 2:break f;default:break g}}h:{switch(d-58|0){case 0:break b;case 3:break c;case 1:case 2:break f;default:break h}}if((d|0)==95){break e}if((d|0)==126){break b}if(!d){break a}}sg(c,a,b);a=b;break b}b=b+1|0;break b}sg(c,a,b);a=b+1|0;b=a;break b}sg(c,a,b);a=b;b=b+1|0}b=b+1|0;continue}break}sg(c,a,b);return c}function sr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;j=Ha-16|0;Ha=j;k=a+72|0;l=a+884|0;while(1){a:{f=H[b>>2];if((f|0)==(c|0)){break a}i=(I[f|0]<<2)+l|0;g=F[i|0];b:{if(!g){g=La[H[a+364>>2]](H[a+368>>2],f)|0;f=j+12|0;g=Je(g,f);if((g|0)>(e-H[d>>2]|0)){break a}h=H[b>>2];h=(I[I[h|0]+k|0]+h|0)-3|0;break b}if((e-H[d>>2]|0)<(g|0)){break a}h=f+1|0;f=i+1|0}H[b>>2]=h;while(1){h=I[f|0];i=H[d>>2];H[d>>2]=i+1;F[i|0]=h;f=f+1|0;g=g-1|0;if(g){continue}break}continue}break}Ha=j+16|0}function Td(a,b,c,d,e,f){var g=0,h=0,i=0,j=0;a:{if(f&64){c=f+-64|0;b=c&31;if((c&63)>>>0>=32){c=0;b=e>>>b|0}else{c=e>>>b|0;b=((1<<b)-1&e)<<32-b|d>>>b}d=0;e=0;break a}if(!f){break a}i=d;h=64-f|0;g=h&31;if((h&63)>>>0>=32){h=d<<g;j=0}else{h=(1<<g)-1&i>>>32-g|e<<g;j=i<<g}i=b;b=f&31;if((f&63)>>>0>=32){g=0;b=c>>>b|0}else{g=c>>>b|0;b=((1<<b)-1&c)<<32-b|i>>>b}b=j|b;c=g|h;g=d;d=f&31;if((f&63)>>>0>=32){h=0;d=e>>>d|0}else{h=e>>>d|0;d=((1<<d)-1&e)<<32-d|g>>>d}e=h}H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=d;H[a+12>>2]=e}function Yh(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;H[a+116>>2]=0;H[a+120>>2]=0;H[a>>2]=0;H[a+4>>2]=0;H[a+124>>2]=0;H[a+128>>2]=0;F[a+132|0]=0;e=a+16|0;f=a+108|0;g=a+100|0;h=a+92|0;i=a+48|0;j=a+8|0;a:while(1){b:{if((c|0)==2){H[a+64>>2]=0;c=a+76|0;b=0;break b}b=0;d=c<<2;H[j+d>>2]=0;H[d+i>>2]=0;H[d+h>>2]=0;H[d+g>>2]=0;H[d+f>>2]=0;while(1)if((b|0)==4){c=c+1|0;continue a}else{H[((c<<4)+e|0)+(b<<2)>>2]=0;b=b+1|0;continue}}break}while(1){if((b|0)!=4){H[c+(b<<2)>>2]=0;b=b+1|0;continue}break}return a}function Pf(a,b){var c=0,d=0,e=0,f=0,g=0;c=Ha-16|0;Ha=c;a:{if(!b){H[a>>2]=0;H[a+4>>2]=0;break a}H[c+12>>2]=0;H[c+8>>2]=0;d=I[b|0];b:{if((d-97&255)>>>0<=25){while(1){g=b;c:{d:{e:{switch(d-114|0){default:if((d|0)==100){break d}if((d|0)!=108){if(d){break c}break b}e=e+1|0;break c;case 0:e=e-1|0;break c;case 1:case 2:break c;case 3:break e}}f=f+1|0;break c}f=f-1|0}b=g+1|0;d=I[g+1|0];continue}}H[c+4>>2]=c+8;H[c>>2]=c+12;wc(b,11130,c);f=H[c+8>>2];e=H[c+12>>2]}L[a+4>>2]=f|0;L[a>>2]=e|0}Ha=c+16|0}function Ys(a){a=a|0;var b=0,c=0,d=0,e=0;b=md(Xa(704),a);H[b+552>>2]=0;H[b+544>>2]=0;H[b+548>>2]=0;H[b>>2]=32748;pk(b+568|0);jb(b+4|0,a+4|0,524);c=H[a+540>>2];H[b+536>>2]=H[a+536>>2];H[b+540>>2]=c;c=H[a+532>>2];H[b+528>>2]=H[a+528>>2];H[b+532>>2]=c;if((a|0)!=(b|0)){L[b+544>>2]=L[a+544>>2];L[b+548>>2]=L[a+548>>2];L[b+552>>2]=L[a+552>>2]}jb(b+556|0,a+556|0,148);c=H[a+696>>2];d=b,e=La[H[H[c>>2]+8>>2]](c)|0,H[d+696>>2]=e;a=H[a+700>>2];d=b,e=La[H[H[a>>2]+8>>2]](a)|0,H[d+700>>2]=e;return b|0}function kx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=a+72|0;k=c-2|0;h=1;a:{while(1){a=b+2|0;if((a|0)==(k|0)){break a}e=I[b+2|0];f=e<<24>>24;b:{c:{d:{c=F[b+3|0];if(c){b=cb(c,f)}else{b=I[e+j|0]}g=(b&255)-9|0;if(g>>>0>26){break d}b=a;i=1<<g;if(i&132483059){continue}if(!(i&139264)){if((g|0)!=12){break d}if(c|(f|0)!=9){continue}break b}if(c){break b}if((f|0)>=0){continue}break c}if(c){break b}}b=a;if((e|0)==36|(e|0)==64){continue}}break}H[d>>2]=a;h=0}return h|0}function Ww(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=a+72|0;k=c-2|0;h=1;a:{while(1){a=b+2|0;if((a|0)==(k|0)){break a}e=I[b+3|0];f=e<<24>>24;b:{c:{d:{c=F[b+2|0];if(c){b=cb(c,f)}else{b=I[e+j|0]}g=(b&255)-9|0;if(g>>>0>26){break d}b=a;i=1<<g;if(i&132483059){continue}if(!(i&139264)){if((g|0)!=12){break d}if(c|(f|0)!=9){continue}break b}if(c){break b}if((f|0)>=0){continue}break c}if(c){break b}}b=a;if((e|0)==36|(e|0)==64){continue}}break}H[d>>2]=a;h=0}return h|0}function lc(a,b,c,d,e,f){var g=0,h=0,i=0;a:{if(f&64){e=f+-64|0;f=b;d=e&31;if((e&63)>>>0>=32){e=f<<d;d=0}else{e=(1<<d)-1&f>>>32-d|c<<d;d=f<<d}b=0;c=0;break a}if(!f){break a}h=d;g=f&31;if((f&63)>>>0>=32){i=d<<g;h=0}else{i=(1<<g)-1&h>>>32-g|e<<g;h=h<<g}g=b;e=64-f|0;d=e&31;if((e&63)>>>0>=32){e=0;d=c>>>d|0}else{e=c>>>d|0;d=((1<<d)-1&c)<<32-d|g>>>d}d=h|d;e=e|i;h=b;g=f&31;if((f&63)>>>0>=32){i=b<<g;b=0}else{i=(1<<g)-1&h>>>32-g|c<<g;b=h<<g}c=i}H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=d;H[a+12>>2]=e}function Gv(a,b){a=a|0;b=O(b);var c=0,d=O(0),e=0,f=0,g=0,h=0,i=O(0);f=Ha-32|0;Ha=f;d=L[a+144>>2];if(!(d>b)){c=a+52|0;h=a+28|0;Nb(c,a+16|0,h);i=O(b-d);a:{if(H[a+112>>2]!=3){d=L[a+132>>2];break a}d=O(L[a+116>>2]*fg(L[a+124>>2],_b(c),L[a+8>>2]));L[a+136>>2]=d;d=O(O(d-L[a+120>>2])*O(.25));L[a+132>>2]=d}e=a- -64|0;kg(e,c,d);c=a+88|0;g=a+76|0;Nb(c,e,g);e=a+100|0;kg(e,c,O(L[a+136>>2]/L[a+140>>2]));c=f+20|0;Ya(c,g);wb(c,i);lb(h,c);c=f+8|0;Ya(c,e);wb(c,i);lb(g,c);L[a+144>>2]=b}Ha=f+32|0}function hd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;e=Ha-16|0;Ha=e;A(+b);d=v(1)|0;f=v(0)|0;j=d;c=d&1048575;d=d>>>20&2047;a:{if(d|0){if((d|0)!=2047|g){h=c>>>4|0;i=(c&15)<<28|f>>>4;d=d+15360|0;g=f<<28;c=0;break a}h=c>>>4|0;i=(c&15)<<28|f>>>4;d=32767;g=f<<28;c=0;break a}if(!(c|f)){d=0;c=0;break a}d=c;c=c?Q(c):Q(f)|32;lc(e,f,d,0,0,c+49|0);d=15372-c|0;i=H[e+8>>2];h=H[e+12>>2]^65536;g=H[e+4>>2];c=H[e>>2]}H[a>>2]=c;H[a+4>>2]=g;H[a+8>>2]=i;H[a+12>>2]=h|(j&-2147483648|d<<16);Ha=e+16|0}function Zt(a,b){a=a|0;b=O(b);var c=0,d=O(0),e=0,f=O(0);a:{c=H[a+24>>2];if(!H[c+12>>2]){break a}L[a+16>>2]=b;L[a+12>>2]=b;L[a+8>>2]=b;L[a+4>>2]=b;while(1){if(H[c+12>>2]<=(e|0)){break a}c=H[H[c>>2]+(e<<2)>>2];La[H[H[c>>2]+12>>2]](c,b);d=L[c+8>>2];if(d>L[a+8>>2]){L[a+8>>2]=d}f=L[a+12>>2];b:{if(!(f>=O(0))){break b}d=L[c+12>>2];c:{if(d<O(0)){L[a+12>>2]=d;d=L[c+16>>2];break c}if(d>f){L[a+12>>2]=d}d=L[c+16>>2];if(!(d>L[a+16>>2])){break b}}L[a+16>>2]=d}e=e+1|0;c=H[a+24>>2];continue}}}function Kf(a){var b=O(0),c=0,d=O(0),e=0,f=0;a:{b:{c:{while(1){c=a;if(!c){return O(0)}d:{switch(H[c+4>>2]-5|0){case 1:a=0;if(H[c+540>>2]<=0){continue}a=H[H[c+528>>2]>>2];continue;case 2:break c;case 0:break d;default:break a}}break}a=0;e=H[c+540>>2];f=(e|0)>0?e:0;while(1){if((a|0)==(f|0)){break b}d=Kf((a|0)<(e|0)?H[H[c+528>>2]+(a<<2)>>2]:0);b=b==O(0)?d:b>d?d>O(0)?d:b:b;a=a+1|0;continue}}b=Kf(H[c+528>>2]);d=Kf(H[c+532>>2]);b=b==O(0)?d:b>d?d>O(0)?d:b:b}return b}return L[c+40>>2]}function sv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=O(0),g=O(0),h=0,i=O(0);d=Ha-128|0;Ha=d;if(b){h=H[H[a+4>>2]>>2];e=L[a+8>>2];f=L[a+12>>2];g=L[a+16>>2];M[d+120>>3]=L[a+32>>2];H[d+112>>2]=c;M[d+104>>3]=g;H[d+96>>2]=c;M[d+88>>3]=f;H[d+80>>2]=c;M[d+72>>3]=e;H[d+68>>2]=c;H[d+64>>2]=h;pb(b,9025,d- -64|0);e=L[a+20>>2];f=L[a+24>>2];g=L[a+28>>2];i=L[a+36>>2];H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+56>>3]=i;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,9092,d)}Ha=d+128|0}function To(a,b,c,d,e,f){var g=0,h=0;while(1){h=a+g|0;H[h+8>>2]=0;H[h>>2]=0;H[h+4>>2]=0;g=g+12|0;if((g|0)!=60){continue}break}zb(a+60|0,0,64);H[a+8>>2]=H[b+8>>2];g=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=g;H[a+20>>2]=H[c+8>>2];b=H[c+4>>2];H[a+12>>2]=H[c>>2];H[a+16>>2]=b;H[a+32>>2]=H[d+8>>2];b=H[d+4>>2];H[a+24>>2]=H[d>>2];H[a+28>>2]=b;b=H[e+4>>2];H[a+36>>2]=H[e>>2];H[a+40>>2]=b;H[a+44>>2]=H[e+8>>2];H[a+56>>2]=H[f+8>>2];b=H[f+4>>2];H[a+48>>2]=H[f>>2];H[a+52>>2]=b;So(a);return a}function Vq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=51;g=72;a:{b:{c:{d:{switch(b-18|0){default:if((b|0)!=15){break c}return 39;case 2:if(!(La[H[e+24>>2]](e,H[e+64>>2]+c|0,d,34769)|0)){break b}f=43;g=73;break a;case 5:H[a+4>>2]=2;f=44;g=74;break a;case 12:f=53;break a;case 13:f=52;break a;case 0:break a;case 1:case 3:case 4:case 6:case 7:case 8:case 9:case 10:case 11:break b;case 14:break d}}f=54;break a}if((b|0)==41){break a}}f=-1;g=25}H[a>>2]=g;return f|0}function xr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=Ha-16|0;Ha=h;f=H[a+284>>2];a:{if(!f){e=23;break a}g=H[f+12>>2];e=H[g+4>>2];i=e+H[g+8>>2]|0;e=Ie(a,H[f+16>>2],H[a+224>>2],e+H[g+12>>2]|0,i,h+12|0,0);if(e){break a}e=H[h+12>>2];if(!((e|0)==(i|0)|H[a+464>>2]!=3)){H[g+12>>2]=e-H[g+4>>2];e=0;break a}F[g+32|0]=0;H[a+284>>2]=H[f+8>>2];H[f+8>>2]=H[a+288>>2];H[a+264>>2]=42;H[a+288>>2]=f;e=Ie(a,H[a+460>>2]!=0,H[a+144>>2],b,c,d,!I[a+468|0])}Ha=h+16|0;return e|0}function mm(a,b){var c=0,d=0,e=0,f=0;c=Ha-48|0;Ha=c;d=H[a+72>>2];e=H[d>>2];f=I[a|0];d=I[d+13|0];H[c+32>>2]=0;H[c+24>>2]=0;H[c+28>>2]=0;H[c+20>>2]=0;d=(f|0)==(d>>>6&1)?1048833:1049089;H[c+12>>2]=d;H[c+8>>2]=d;H[c+16>>2]=0;d=c+24|0;rc(e,0,c+8|0,d,c+20|0,c+16|0);f=H[a+72>>2];Ih(f,d,H[(H[e+72>>2]+(I[a|0]==(I[f+13|0]>>>6&1)?28:12)|0)+20>>2],H[c+20>>2],d);H[c+44>>2]=0;H[c+36>>2]=0;H[c+40>>2]=0;a=c+36|0;e=b+16|0;Nb(a,e,d);Xb(b+40|0,a);xb(b+4|0,a);Ya(b+28|0,e);Ya(e,d);Ha=c+48|0}function Ck(a){var b=0,c=0,d=0;a:{b:{c:{d:{e:{switch(H[a>>2]-9|0){case 2:b=H[a+8>>2];if(b){break d}c=al(Xa(52),G[a+4>>1],O(1),O(0),O(0),4750);break c;case 0:b=H[a+8>>2];if(b){break d}break a;default:break e}}b=G[a+4>>1];if((b|0)<0){break b}d=H[13224];if((b|0)>=H[d+12>>2]){break b}b=H[H[d>>2]+(b<<2)>>2];if(!b){break b}}c=La[H[H[b>>2]+8>>2]](b)|0;if(!c){break a}}La[H[H[c>>2]+48>>2]](c,L[a+12>>2],L[a+16>>2],L[a+20>>2]);La[H[H[c>>2]+24>>2]](c,L[a+24>>2])}return c}return 0}function ou(a,b,c,d){a=a|0;b=b|0;c=c|0;d=O(d);var e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0),k=O(0),l=O(0);f=Ao(b+8|0,c+8|0);e=f<O(0)?O(-f):f;a:{if(O(O(1)-e)<O(9999999747378752e-20)){e=O(O(1)-d);break a}e=Ed(e);h=ec(O(d*e));g=ec(e);e=O(sn((1-+d)*+e)/+g);d=O(h/g)}g=L[c+8>>2];h=L[b+8>>2];i=L[c+12>>2];j=L[b+12>>2];k=L[c+16>>2];l=L[b+16>>2];d=f<O(0)?O(-d):d;L[a+20>>2]=O(e*L[b+20>>2])+O(d*L[c+20>>2]);L[a+16>>2]=O(e*l)+O(d*k);L[a+12>>2]=O(e*j)+O(d*i);L[a+8>>2]=O(e*h)+O(d*g)}function ms(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=Ha-16|0;Ha=d;G[d+14>>1]=I[b|0]|I[b+1|0]<<8;G[d+12>>1]=I[c|0]|I[c+1|0]<<8;Se(a,d+14|0,d+12|0);b=H[a+540>>2];if(b<<16){c=(b<<16>>16)-1|0;f=(c|0)>0?c:0;b=0;while(1){if((b|0)==(f|0)){b=H[H[a+528>>2]+(c<<2)>>2];G[d+6>>1]=J[a+508>>1];G[d+4>>1]=J[a+510>>1];La[H[H[b>>2]+28>>2]](b,d+6|0,d+4|0)}else{e=H[H[a+528>>2]+(b<<2)>>2];G[d+8>>1]=0;G[d+10>>1]=0;La[H[H[e>>2]+28>>2]](e,d+10|0,d+8|0);b=b+1|0;continue}break}}Ha=d+16|0}function Ur(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=0,g=O(0),h=0;f=Ha-224|0;Ha=f;a:{b:{if(!(c<=O(0))){g=O(L[a+40>>2]-L[a+44>>2]);if(!(g<=c)){break b}}Zc(a,b,c,d);break a}e=H[a+528>>2];c:{if(e){h=Yj(f,b);La[H[H[e>>2]+60>>2]](e,h,c,d);jb(b,h,112);break c}Vk(b,a+60|0,a+284|0,O(c/g),(J[a+508>>1]&64)>>>6|0)}e=H[a+532>>2];if(e){a=Yj(f,b);La[H[H[e>>2]+60>>2]](e,a,c,d);jb(b+112|0,a+112|0,112);break a}Vk(b+112|0,a+172|0,a+396|0,O(c/g),(J[a+508>>1]&64)>>>6|0)}Ha=f+224|0}function mg(a,b,c,d,e,f){var g=0,h=O(0),i=O(0),j=O(0),k=0;g=Ha+-64|0;Ha=g;Ya(a,52904);Ya(a+12|0,b);Ya(a+24|0,c);Ya(a+36|0,d);Ya(a+48|0,e);Ya(a+60|0,f);H[a+80>>2]=0;H[a+72>>2]=0;H[a+76>>2]=0;b=g+48|0;h=L[12817];Ab(b,52904,h,1);H[g+44>>2]=0;H[g+36>>2]=0;H[g+40>>2]=0;k=b;b=g+36|0;Wd(k,e,b);i=ri(b,f,c);L[a+76>>2]=i;b=g+20|0;Ab(b,c,O(-h),1);H[g+16>>2]=0;H[g+8>>2]=0;H[g+12>>2]=0;c=b;b=g+8|0;Wd(c,e,b);j=ri(b,d,52904);L[a+72>>2]=j;L[a+80>>2]=O(j-h)-i;Ha=g- -64|0;return a}function rl(a,b){var c=O(0),d=O(0);c=L[b>>2];d=L[a>>2];a:{if(d!=O(-100)){if(c==O(-100)){break a}c=O(d+c)}L[a>>2]=c}c=L[b+4>>2];d=L[a+4>>2];b:{if(d!=O(-100)){if(c==O(-100)){break b}c=O(d+c)}L[a+4>>2]=c}c=L[b+8>>2];d=L[a+8>>2];c:{if(d!=O(-100)){if(c==O(-100)){break c}c=O(d+c)}L[a+8>>2]=c}c=L[b+12>>2];d=L[a+12>>2];d:{if(d!=O(-100)){if(c==O(-100)){break d}c=O(d+c)}L[a+12>>2]=c}c=L[b+16>>2];d=L[a+16>>2];e:{if(d!=O(-100)){if(c==O(-100)){break e}c=O(d+c)}L[a+16>>2]=c}}function nd(a){var b=0,c=0;a:{b=H[a+4>>2];b=H[H[b>>2]-12>>2]+b|0;b:{if(!H[b+24>>2]|H[b+16>>2]|!(I[b+5|0]&32)){break b}if((Ca()|0)>0){break b}b=H[a+4>>2];b=H[(H[H[b>>2]-12>>2]+b|0)+24>>2];H[12729]=0;b=$(5,b|0)|0;c=H[12729];H[12729]=0;if((c|0)!=1){if((b|0)!=-1){break b}a=H[a+4>>2];b=H[H[a>>2]-12>>2];H[12729]=0;fa(6,a+b|0,1);a=H[12729];H[12729]=0;if((a|0)!=1){break b}}ea(_(0)|0)|0;H[12729]=0;ca(7);a=H[12729];H[12729]=0;if((a|0)==1){break a}}return}_(0)|0;$d();B()}function hj(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=a+348|0;while(1){a:{b=H[b>>2];if(!b){break a}c=H[b+4>>2];f=H[b+24>>2]+1|0;d=H[b+36>>2];e=f+d|0;if((c|0)==(e|0)){break a}g=H[b+8>>2];h=f+g|0;if((h|0)>(H[b+40>>2]-d|0)){c=La[H[a+16>>2]](d,h)|0;if(!c){return 0}d=H[b+36>>2];if((d|0)==H[b+12>>2]){H[b+12>>2]=c}e=H[b+16>>2];if(e){H[b+16>>2]=c+(e-d|0)}H[b+36>>2]=c;H[b+40>>2]=c+h;e=c+f|0;g=H[b+8>>2];c=H[b+4>>2]}i=b,j=jb(e,c,g),H[i+4>>2]=j;continue}break}return 1}function mn(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=Ha-16|0;Ha=d;a:{if(!b){nb(a);break a}c=H[a+8>>2];if((c|0)==(b|0)){break a}e=ib(b<<1);if(!e){if((b|0)<=(c|0)){break a}H[d+4>>2]=b;H[d>>2]=c;Wa(24354,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}c=H[a+12>>2];if((c|0)>(b|0)){H[a+12>>2]=b;c=b}i=(c|0)>0?c:0;f=H[a>>2];while(1){if((g|0)==(i|0)){if(f){Va(f);c=H[a+12>>2]}H[a>>2]=e;nn(a,c,b-c|0);H[a+8>>2]=b}else{h=g<<1;G[h+e>>1]=J[f+h>>1];g=g+1|0;continue}break}}Ha=d+16|0}function Xl(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=Ha-16|0;Ha=d;a:{if(!b){nb(a);break a}c=H[a+8>>2];if((c|0)==(b|0)){break a}e=ib(b<<2);if(!e){if((b|0)<=(c|0)){break a}H[d+4>>2]=b;H[d>>2]=c;Wa(24414,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}c=H[a+12>>2];if((c|0)>(b|0)){H[a+12>>2]=b;c=b}i=(c|0)>0?c:0;f=H[a>>2];while(1){if((g|0)==(i|0)){if(f){Va(f);c=H[a+12>>2]}H[a>>2]=e;ud(a,c,b-c|0);H[a+8>>2]=b}else{h=g<<2;H[h+e>>2]=H[f+h>>2];g=g+1|0;continue}break}}Ha=d+16|0}function Sr(a,b){a=a|0;b=b|0;var c=0,d=0;d=Ha-16|0;Ha=d;if(b){H[d>>2]=a;eb(b,18890,d);Pc(a,b);c=J[29370]+1|0;G[29370]=c;_a(b,c<<16>>16);a:{if(H[a+528>>2]){$a(16859,b);G[29370]=J[29370]+1;c=H[a+528>>2];La[H[H[c>>2]+72>>2]](c,b);G[29370]=J[29370]-1;bb(10,b);break a}$a(21103,b)}_a(b,G[29370]);b:{if(H[a+532>>2]){$a(16878,b);G[29370]=J[29370]+1;a=H[a+532>>2];La[H[H[a>>2]+72>>2]](a,b);G[29370]=J[29370]-1;bb(10,b);break b}$a(21127,b)}G[29370]=J[29370]-1}Ha=d+16|0}function wo(a,b,c,d,e){var f=0,g=0,h=0;h=-1;g=d&2147483647;f=(g|0)==2147418112;a:{if(f&!c?a|b:f&(c|0)!=0|g>>>0>2147418112){break a}f=e&2147483647;if(((f|0)==2147418112&0|f>>>0>2147418112)&(f|0)!=2147418112){break a}if(!(a|c|(f|g|b))){return 0}f=d&e;if((f|0)>0){f=1}else{f=(f|0)>=0}if(f){if(((c|0)!=0|(d|0)!=(e|0))&(d|0)<(e|0)){break a}return(a|c|(d^e|b))!=0}if(!c&(d|0)==(e|0)?a|b:(c|0)!=0&(d|0)>=(e|0)|(d|0)>(e|0)){break a}h=(a|c|(d^e|b))!=0}return h}function Jm(a,b,c,d,e,f){var g=0,h=O(0),i=O(0),j=O(0),k=O(0);g=Ha-32|0;Ha=g;mc(e,a,b,O(1.5));L[e+8>>2]=L[e+8>>2]+O(O(O(L[b+8>>2]-L[a+8>>2])*O(1.5))*O(.5));if(!(!c|!d)){H[g+12>>2]=0;H[g+16>>2]=1065353216;H[g+4>>2]=0;H[g+8>>2]=0;b=g+4|0;Ae(b,c,d);k=L[g+16>>2];h=L[g+4>>2];i=L[g+8>>2];j=L[g+12>>2];L[g+28>>2]=j;L[g+24>>2]=i;L[g+20>>2]=h;h=kb(O(W(O(O(j*j)+O(O(h*h)+O(i*i))))),k);a=g+20|0;sc(a);Ab(b,a,O(O(h+h)*O(1.5)),1);Ya(a,c);Ya(f,a);Xb(b,f)}Ha=g+32|0}function Rw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=Ha-32|0;Ha=d;H[d+16>>2]=b;e=H[a+48>>2];H[d+20>>2]=c-((e|0)!=0);g=H[a+44>>2];H[d+28>>2]=e;H[d+24>>2]=g;a:{b:{if(yg(na(H[a+60>>2],d+16|0,2,d+12|0)|0)){b=32}else{e=H[d+12>>2];if((e|0)>0){break b}b=e?32:16}H[a>>2]=b|H[a>>2];break a}f=e;g=H[d+20>>2];if(g>>>0>=e>>>0){break a}f=H[a+44>>2];H[a+4>>2]=f;H[a+8>>2]=f+(e-g|0);if(H[a+48>>2]){H[a+4>>2]=f+1;F[(b+c|0)-1|0]=I[f|0]}f=c}Ha=d+32|0;return f|0}function Fn(a){var b=0,c=0,d=0;d=Ha-32|0;Ha=d;b=H[a+72>>2];H[a+40>>2]=H[a+68>>2];H[a+44>>2]=b;H[a- -64>>2]=H[a+92>>2];b=H[a+88>>2];H[a+56>>2]=H[a+84>>2];H[a+60>>2]=b;b=H[a+80>>2];H[a+48>>2]=H[a+76>>2];H[a+52>>2]=b;b=H[a+8>>2];if(b){c=d+4|0;Ya(c,b+68|0);rb(d+16|0,b+80|0);to(c);pi(a+40|0,c)}a:{c=H[a+12>>2];if(!c){break a}b=0;c=H[c+12>>2];c=(c|0)>0?c:0;while(1){if((b|0)==(c|0)){break a}Fn(H[H[H[a+12>>2]>>2]+(b<<2)>>2]);b=b+1|0;continue}}Ha=d+32|0}function _j(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=Ha-16|0;Ha=d;a:{if(!b){nb(a);break a}c=H[a+8>>2];if((c|0)==(b|0)){break a}f=ib(b);if(!f){if((b|0)<=(c|0)){break a}H[d+4>>2]=b;H[d>>2]=c;Wa(24354,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}c=H[a+12>>2];if((c|0)>(b|0)){H[a+12>>2]=b;c=b}h=(c|0)>0?c:0;g=H[a>>2];while(1){if((e|0)==(h|0)){if(g){Va(g);c=H[a+12>>2]}H[a>>2]=f;ck(a,c,b-c|0);H[a+8>>2]=b}else{F[e+f|0]=I[e+g|0];e=e+1|0;continue}break}}Ha=d+16|0}function vb(a,b){var c=0,d=0,e=0,f=0;c=Ha-16|0;Ha=c;H[c+4>>2]=b;H[c+12>>2]=b;H[c+8>>2]=b;if(a){b=H[c+12>>2];d=1;while(1){e=d;d=d+1|0;f=H[b+4>>2];b=b+8|0;if(f){continue}break}H[c+12>>2]=b;d=N(e,3)|1}else{d=3}b=Xa(28);H[b+20>>2]=0;Ec(b,d);H[c+12>>2]=H[c+8>>2];a:{if(!a){break a}d=H[c+12>>2];H[c+12>>2]=d+4;ob(b,a,H[d>>2]);while(1){a=H[c+12>>2];H[c+12>>2]=a+4;d=H[a>>2];if(!d){break a}H[c+12>>2]=a+8;ob(b,d,H[a+4>>2]);continue}}Ha=c+16|0;return b}function ns(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;$b(a+60|0,b);e=G[a+540>>1];i=(e|0)>0?e:0;e=a+510|0;g=a+508|0;while(1){if((h|0)!=(i|0)){d=H[H[a+528>>2]+(h<<2)>>2];La[H[H[d>>2]+24>>2]](d,b,c);Df(g,d+508|0);Df(e,d+510|0);f=J[d+508>>1];a:{if(f&2){f=65534}else{if(!(f&1)){break a}f=65533}G[g>>1]=f&J[g>>1]}b:{if(I[d+510|0]&2){d=65534}else{if(!(G[d+508>>1]&1)){break b}d=65533}G[e>>1]=d&J[e>>1]}h=h+1|0;continue}break}$b(a+284|0,b)}function Bl(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=O(0),i=O(0),j=O(0);d=Ha-16|0;Ha=d;e=H[a+4>>2];b=Bb(e,9832);if(!b){b=Bb(e,4430)}g=H[14657];c=fb(H[g>>2],b);if((c&65535)==65535){c=H[g+4>>2];if(c){f=H[c+12>>2]}Yi(g,b);e=H[a+4>>2];c=f}h=ab(e,4274,O(1));i=ab(H[a+4>>2],4259,O(0));j=ab(H[a+4>>2],4271,O(0));f=Bb(H[a+4>>2],8592);a:{if(!f){db();H[d>>2]=b;Wa(22869,d);b=0;break a}b=al(Xa(52),c<<16>>16,h,i,j,f);La[H[H[b>>2]+52>>2]](b,a)}Ha=d+16|0;return b}function $p(a,b){a:{b:{if(b>>>0<=127){break b}c:{if(!H[H[14786]>>2]){if((b&-128)==57216){break b}break c}if(b>>>0<=2047){F[a+1|0]=b&63|128;F[a|0]=b>>>6|192;a=2;break a}if(!((b&-8192)!=57344&b>>>0>=55296)){F[a+2|0]=b&63|128;F[a|0]=b>>>12|224;F[a+1|0]=b>>>6&63|128;a=3;break a}if(b-65536>>>0<=1048575){F[a+3|0]=b&63|128;F[a|0]=b>>>18|240;F[a+2|0]=b>>>6&63|128;F[a+1|0]=b>>>12&63|128;a=4;break a}}H[12604]=25;a=-1;break a}F[a|0]=b;a=1}return a}function es(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=H[a+540>>2];if(c<<16==131072){a=H[H[a+528>>2]+4>>2];La[H[H[a>>2]+80>>2]](a,b);return}d=c<<16>>16;if((d|0)>=3){gb(b,G[29370]);b=Za(ub(b,60),7407);La[H[H[a>>2]+84>>2]](a,b,1);c=Za(b,21503);G[29370]=J[29370]+1;b=1;while(1){if((b|0)==(d|0)){a=J[29370]-1|0;G[29370]=a;gb(c,a<<16>>16);Za(Za(Za(c,13001),7407),21503)}else{e=H[H[a+528>>2]+(b<<2)>>2];La[H[H[e>>2]+80>>2]](e,c);b=b+1|0;continue}break}}}function St(a,b,c,d){a=a|0;b=O(b);c=c|0;d=d|0;var e=O(0),f=O(0),g=O(0);a:{b:{e=L[a+4>>2];if(e>=b){break b}f=L[a+8>>2];if(f>=b){g=L[a+32>>2];b=O(O(O(L[a+28>>2]-g)*Tf(H[H[13371]+28>>2],O(O(b-e)/O(f-e))))+g);break a}e=L[a+12>>2];if(!(e<O(0)|b<=e)){f=L[a+16>>2];if(!(f>=b)){break b}g=L[a+36>>2];b=O(O(O(L[a+28>>2]-g)*O(O(1)-Tf(H[H[13371]+28>>2],O(O(b-e)/O(f-e)))))+g);break a}b=L[a+28>>2];break a}b=O(0)}a=(H[a+24>>2]<<2)+c|0;L[a>>2]=b+L[a>>2]}function yf(a,b){var c=0,d=0;d=a;a:{b:{if((d^b)&3){c=I[b|0];break b}if(b&3){while(1){c=I[b|0];F[d|0]=c;if(!c){break a}d=d+1|0;b=b+1|0;if(b&3){continue}break}}c=H[b>>2];if(((c|16843008-c)&-2139062144)!=-2139062144){break b}while(1){H[d>>2]=c;d=d+4|0;c=H[b+4>>2];b=b+4|0;if(((16843008-c|c)&-2139062144)==-2139062144){continue}break}}F[d|0]=c;if(!(c&255)){break a}while(1){c=I[b+1|0];F[d+1|0]=c;d=d+1|0;b=b+1|0;if(c){continue}break}}return a}function it(a,b,c){a=a|0;b=b|0;c=c|0;var d=O(0);Qc(a,b,c);d=L[(H[a+532>>2]<<2)+53196>>2];c=H[a+528>>2];b=N(c,24);L[a+536>>2]=d*L[b+53304>>2];L[a+540>>2]=d*L[b+53308>>2];d=L[b+53312>>2];L[a+544>>2]=d;L[a+40>>2]=L[a+40>>2]*O(d*L[b+53316>>2]);Ya(a+548|0,N(c,12)+52816|0);a:{b:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break b;default:break a}}G[a+508>>1]=J[a+508>>1]|256}if((b&-2)==4){G[a+510>>1]=J[a+510>>1]|256}La[H[H[a>>2]+68>>2]](a)}function Sq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a:{b:{c:{d:{e:{switch(b-23|0){default:c=39;switch(b-15|0){case 3:break a;case 0:break b;case 1:case 2:break c;default:break d};case 0:H[a+4>>2]=H[a+4>>2]+1;return 44;case 7:H[a>>2]=72;return 53;case 8:H[a>>2]=72;return 52;case 1:case 2:case 3:case 4:case 5:case 6:break c;case 9:break e}}H[a>>2]=72;return 54}if((b|0)==41){break a}}H[a>>2]=25;c=-1}return c|0}H[a>>2]=72;return 51}function Cf(a,b){var c=0,d=O(0),e=O(0),f=O(0),g=O(0),h=O(0);c=Ha-16|0;Ha=c;f=L[b>>2];L[c+4>>2]=f;g=L[b+4>>2];L[c+8>>2]=g;h=L[b+8>>2];L[c+12>>2]=h;d=L[b+16>>2];e=L[b+12>>2];a:{b:{c:{if(oc(c+4|0)){L[a+8>>2]=h;L[a+4>>2]=g;L[a>>2]=f;if(e!=O(0)|d!=O(0)){break c}break b}if(e!=O(0)){break c}if(d==O(0)){break a}}L[a+16>>2]=d;L[a+12>>2]=e}if(!oc(a)|L[a+12>>2]==O(0)&L[a+16>>2]==O(0)){break a}Nk(a)}b=H[b+36>>2];if(b){H[a+36>>2]=b}Ha=c+16|0}function zp(a,b,c,d,e,f,g,h){var i=0,j=0,k=0;i=Ha-16|0;Ha=i;if(2147483638-b>>>0>=c>>>0){k=Ee(a);j=i+4|0;if(b>>>0<=1073741810){H[i+12>>2]=b<<1;H[i+4>>2]=b+c;c=pf(H[Np(j,i+12|0)>>2])+1|0}else{c=2147483639}of(j,c);c=H[i+4>>2];if(e){ae(c,k,e)}if(g){ae(c+e|0,h,g)}j=e+f|0;h=d-j|0;if((d|0)!=(j|0)){ae((c+e|0)+g|0,(e+k|0)+f|0,h)}if((b|0)!=10){Va(k)}Yd(a,c);nf(a,H[i+8>>2]);b=a;a=h+(e+g|0)|0;_d(b,a);Zd(a+c|0,0);Ha=i+16|0;return}Re();B()}function kc(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0;i=gy(b,c,h,i);h=Ka;e=gy(d,e,f,g);i=e+i|0;d=Ka+h|0;h=e>>>0>i>>>0?d+1|0:d;j=g;e=0;k=c;d=0;c=gy(g,e,c,d);g=c+i|0;i=Ka+h|0;l=g;c=c>>>0>g>>>0?i+1|0:i;g=gy(f,0,b,0);h=Ka;i=0;d=gy(f,i,k,d);h=h+d|0;f=Ka+i|0;f=d>>>0>h>>>0?f+1|0:f;i=f+l|0;d=c;f=f>>>0>i>>>0?d+1|0:d;b=gy(b,m,j,e)+h|0;e=Ka;e=b>>>0<h>>>0?e+1|0:e;h=e+i|0;i=f;H[a+8>>2]=h;H[a+12>>2]=e>>>0>h>>>0?i+1|0:i;H[a>>2]=g;H[a+4>>2]=b}function Vs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=Ha-160|0;Ha=d;$b(a+60|0,b);a:{if(I[a+570|0]==1){e=Le(d+72|0,b);c=_g(d+4|0,c);f=H[a+696>>2];La[H[H[f>>2]+24>>2]](f,e,c);$b(a+284|0,b);b=H[a+8>>2];G[a+508>>1]=J[a+508>>1]&65534|((b|0)==3|(b|0)==5);G[a+510>>1]=J[a+510>>1]&65534|(b&-2)==4;break a}e=H[a+696>>2];La[H[H[e>>2]+24>>2]](e,b,c);$b(a+284|0,b);b=H[a+696>>2];G[a+508>>1]=J[b+508>>1];G[a+510>>1]=J[b+510>>1]}Ha=d+160|0}function Pq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=33;a:{b:{c:{d:{switch(b-15|0){case 3:b=0;e:{while(1){f=H[e+24>>2];if((b|0)==8){break e}if(!(La[f|0](e,c,d,H[(b<<2)+34656>>2])|0)){b=b+1|0;continue}break}H[a>>2]=77;return b+23|0}if(!(La[f|0](e,c,d,34635)|0)){break c}H[a>>2]=78;return 33;case 0:break b;case 1:case 2:break c;default:break d}}if((b|0)==23){break a}}H[a>>2]=25;f=-1}return f|0}H[a>>2]=79;return 33}function Hp(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{d=tg(a);a=d;if(a>>>0<60992&a>>>0>=60480){b=a-4|0;e=H[15119];c=e;while(1){a=c;if(!(!a|(a|0)==60992)){if((wp(a)|0)==(b|0)){G[a+2>>1]=J[d-2>>1]+J[a+2>>1];break a}if((wp(b)|0)==(a|0)){c=d-2|0;G[c>>1]=J[a+2>>1]+J[c>>1];if(!f){H[15119]=b;G[b>>1]=J[a>>1];break a}g=f,h=Mi(b),G[g>>1]=h;break a}else{c=Ni(J[a>>1]);f=a;continue}}break}g=b,h=Mi(e),G[g>>1]=h;H[15119]=b;break a}Va(d)}}function Hm(a,b,c){var d=0,e=O(0),f=0,g=0,h=O(0),i=O(0),j=O(0),k=0;f=Ha-32|0;Ha=f;F[a|0]=b;d=H[c+72>>2]+(b<<4)|0;k=H[d+32>>2];g=H[d+24>>2];b=f+20|0;d=H[d+28>>2]+68|0;Ya(b,d);xb(b,g+68|0);h=_b(b);L[a+4>>2]=h;g=f+8|0;Ya(g,k+68|0);Ya(b,g);xb(b,d);i=_b(b);L[a+8>>2]=i;e=O(h/i);L[a+12>>2]=e;j=L[H[c+228>>2]>>2];L[a+16>>2]=j;e=O(O(O(j*j)*O(.5))/O(O(e+O(1))*O(O(O(1)/e)+O(1))));L[a+20>>2]=e;L[a+24>>2]=O(i+h)*O(O(1)-e);Ha=f+32|0}function $r(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=Ha-176|0;Ha=f;$b(a+60|0,b);d=Le(f+88|0,b);g=Le(f,b);e=H[a+528>>2];if(e){La[H[H[e>>2]+24>>2]](e,d,c);G[a+508>>1]=J[H[a+528>>2]+508>>1]}e=H[a+532>>2];if(e){La[H[H[e>>2]+24>>2]](e,g,c);G[a+510>>1]=J[H[a+532>>2]+510>>1]}Cf(b,d);Cf(b+44|0,g+44|0);d=H[a+528>>2];if(d){La[H[H[d>>2]+32>>2]](d,b,c)}d=H[a+532>>2];if(d){La[H[H[d>>2]+32>>2]](d,b,c)}$b(a+284|0,b);Ha=f+176|0}function kl(a,b){var c=0,d=0,e=O(0),f=O(0),g=O(0),h=O(0),i=O(0);c=Ha-96|0;Ha=c;a:{if(!b){break a}if(Lc(a)){break a}H[c+32>>2]=c+80;d=c+48|0;H[c+20>>2]=d|8;H[c+24>>2]=c- -64;H[c+28>>2]=c+72;H[c+16>>2]=d;b:{if((wc(b,8809,c+16|0)|0)==5){f=O(M[c+72>>3]);g=O(M[c+64>>3]);h=O(M[c+56>>3]);i=O(M[c+48>>3]);e=O(M[c+80>>3]);break b}H[c>>2]=b;Wa(29299,c);e=O(0)}L[a+16>>2]=e;L[a+12>>2]=f;L[a+8>>2]=g;L[a+4>>2]=h;L[a>>2]=i}Ha=c+96|0}function $f(a,b,c){var d=0,e=0,f=0;a:{b:{c:{d:{e=H[a>>2]+(((b&16777215)>>>0)%K[a+4>>2]<<3)|0;switch(J[e+4>>1]){case 1:break c;case 0:break d;default:break b}}d=Xa(12);H[d+8>>2]=0;H[d+4>>2]=c;H[d>>2]=b;H[e>>2]=d;H[a+12>>2]=H[a+12>>2]-1;b=16;break a}H[a+16>>2]=H[a+16>>2]-1}f=H[e>>2];d=Xa(12);H[d+8>>2]=H[f+8>>2];H[d>>2]=b;H[d+4>>2]=c;H[f+8>>2]=d;b=8}b=b+a|0;H[b>>2]=H[b>>2]+1;G[e+4>>1]=J[e+4>>1]+1;H[a+24>>2]=H[a+24>>2]+1}function xl(a,b,c){var d=0,e=0,f=0,g=0;d=Ha-32|0;Ha=d;e=wl(I[c+13|0]|I[c+14|0]<<8);Ya(b,Hd(d+20|0,af(c)));a:{if((e|0)==-1){break a}f=I[c+12|0]-7|0;g=(f&255)<<4;c=g&31;if((g&63)>>>0>=32){c=1>>>c|0}else{c=((1<<c)-1&1)<<32-c|-65534>>>c}c=(f&255)>>>0>=4?-1:c;a=N(e,12)+a|0;while(1){if(c<<16>>16<0){break a}e=d+20|0;Ya(e,b);f=a+((c&65535)<<2)|0;vl(H[f>>2],e,b);lb(b,Hd(d+8|0,gi(H[H[f>>2]+4>>2])));c=c-1|0;continue}}Ha=d+32|0}function Qv(a,b){a=a|0;b=O(b);var c=O(0),d=0,e=O(0),f=0,g=0;H[12866]=H[12866]+1;if(H[a+60>>2]==1){L[a+80>>2]=L[a+76>>2];return}c=L[a+68>>2];a:{if(c==O(-1)){L[a+80>>2]=L[a+76>>2];break a}b:{e=L[a+56>>2];c=O(b-c);if(e>=c|e==O(0)){break b}f=+O(c/e)+.99;c:{if(P(f)<2147483648){d=~~f;break c}d=-2147483648}if((d|0)<=1){break b}c=O(c/O(d>>>0));while(1){if((d|0)==(g|0)){break a}Xn(a,c);g=g+1|0;continue}}Xn(a,c)}L[a+68>>2]=b}function Ox(a,b,c){a=a|0;b=b|0;c=c|0;a:{b:{switch((c-b|0)-2|0){case 0:if(I[b+1|0]!=116){break a}a=I[b|0];return((a|0)==108?60:(a|0)==103?62:0)|0;case 1:if(I[b|0]!=97|I[b+1|0]!=109|I[b+2|0]!=112){break a}return 38;case 2:break b;default:break a}}a=I[b|0];if((a|0)!=97){if((a|0)!=113|I[b+1|0]!=117|(I[b+2|0]!=111|I[b+3|0]!=116)){break a}return 34}if(I[b+1|0]!=112|I[b+2|0]!=111|I[b+3|0]!=115){break a}return 39}return 0}function Ok(a,b,c,d,e,f){var g=O(0),h=0;b=f?b:O(O(1)-b);L[a>>2]=b;h=c&64;c=c&1536;g=b;a:{if((c|0)!=1536){break a}g=b;if(e==O(0)){break a}g=O(O(b*O(e+O(1)))/O(O(1)-O(e*O(O(1)-O(b+b)))))}L[a+4>>2]=g;L[a+12>>2]=b;b:{if(!h|!c){break b}if(d==O(0)){break b}b=O(O(b*O(d+O(1)))/O(O(1)-O(d*O(O(1)-O(b+b)))))}L[a+8>>2]=b;c:{if(f){break c}f=0;while(1){if((f|0)==4){break c}c=(f<<2)+a|0;L[c>>2]=O(1)-L[c>>2];f=f+1|0;continue}}}function ob(a,b,c){var d=0,e=0,f=0;a:{b:{c:{d:{e=H[a>>2]+((de(b)>>>0)%K[a+4>>2]<<3)|0;switch(J[e+4>>1]){case 1:break c;case 0:break d;default:break b}}d=Xa(12);H[d+8>>2]=0;H[d+4>>2]=c;H[d>>2]=b;H[e>>2]=d;H[a+12>>2]=H[a+12>>2]-1;b=16;break a}H[a+16>>2]=H[a+16>>2]-1}f=H[e>>2];d=Xa(12);H[d+8>>2]=H[f+8>>2];H[d>>2]=b;H[d+4>>2]=c;H[f+8>>2]=d;b=8}b=b+a|0;H[b>>2]=H[b>>2]+1;G[e+4>>1]=J[e+4>>1]+1;H[a+24>>2]=H[a+24>>2]+1}function Rb(a,b,c,d){var e=0,f=0,g=0;e=Ha-16|0;Ha=e;H[e+12>>2]=c;a:{if(!I[b+68|0]){b:{if(H[a+144>>2]==(b|0)){g=a+272|0;c=a+276|0;break b}g=H[a+284>>2];c=g+4|0}while(1){H[e+8>>2]=H[a+44>>2];La[H[b+56>>2]](b,e+12|0,d,e+8|0,H[a+48>>2]);H[c>>2]=H[e+12>>2];f=H[a+44>>2];La[H[a+80>>2]](H[a+4>>2],f,H[e+8>>2]-f|0);f=H[e+12>>2];H[g>>2]=f;if((d|0)!=(f|0)){continue}break}break a}La[H[a+80>>2]](H[a+4>>2],c,d-c|0)}Ha=e+16|0}function Zp(a,b){var c=0;c=(b|0)!=0;a:{b:{c:{if(!(a&3)|!b){break c}while(1){if(!I[a|0]){break b}b=b-1|0;c=(b|0)!=0;a=a+1|0;if(!(a&3)){break c}if(b){continue}break}}if(!c){break a}if(!(!I[a|0]|b>>>0<4)){while(1){c=H[a>>2];if(((16843008-c|c)&-2139062144)!=-2139062144){break b}a=a+4|0;b=b-4|0;if(b>>>0>3){continue}break}}if(!b){break a}}while(1){if(!I[a|0]){return a}a=a+1|0;b=b-1|0;if(b){continue}break}}return 0}function Bq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+72|0;while(1){if((b|0)!=(c|0)){a:{b:{switch(I[I[b|0]+e|0]-5|0){case 0:b=b+2|0;break a;case 1:b=b+3|0;break a;case 2:b=b+4|0;break a;case 4:H[d>>2]=H[d>>2]+1;a=b+1|0;c:{if((a|0)==(c|0)){break c}a=I[I[b+1|0]+e|0]==10?b+2|0:a}b=a;H[d+4>>2]=-1;break a;case 5:H[d+4>>2]=-1;H[d>>2]=H[d>>2]+1;break;default:break b}}b=b+1|0}H[d+4>>2]=H[d+4>>2]+1;continue}break}}function vm(a,b){var c=0,d=0,e=0,f=0;d=Ha-16|0;Ha=d;c=H[a>>2];a:{if((c&16777215)==(H[14678]&16777215)){break a}f=c>>>8|0;e=b?1:2;b:{if(!(c&3840)){b=e|f;F[a+1|0]=b;F[a+2|0]=b>>>8;break b}if((f&15)==(e|0)){break b}db();H[d>>2]=b?4844:4898;Wa(15836,d);bc(a,H[14711]);Lb();b=(I[a+1|0]|I[a+2|0]<<8)&65520|e;F[a+1|0]=b;F[a+2|0]=b>>>8;c=I[a|0]}if((c&255)>>>0<12){break a}db();Wa(15895,0);bc(a,H[14711]);Lb()}Ha=d+16|0}function Wi(){var a=0,b=0,c=0,d=0;b=53;d=H[14738];a=H[14739];c=d-a|0;a=(((a-((d+6>>>0)%7|0)|0)+7>>>0)/7|0)+((c+369>>>0)%7>>>0<3)|0;a:{if((a|0)!=53){b=a;if(a){break a}b=52;b:{switch(((c+6>>>0)%7|0)-4|0){case 1:if(!eq((H[14737]%400|0)-1|0)){break a}break;case 0:break b;default:break a}}return 53}c:{switch(((c+371>>>0)%7|0)-3|0){case 0:if(eq(H[14737])){break a}break;case 1:break a;default:break c}}b=1}return b}function Lj(a,b,c){var d=0,e=0,f=0;a:{b:{c:{d:{e=H[a>>2]+((b>>>0)%K[a+4>>2]<<3)|0;switch(J[e+4>>1]){case 1:break c;case 0:break d;default:break b}}d=Xa(12);H[d+8>>2]=0;H[d>>2]=b;H[d+4>>2]=c;H[e>>2]=d;H[a+12>>2]=H[a+12>>2]-1;b=16;break a}H[a+16>>2]=H[a+16>>2]-1}f=H[e>>2];d=Xa(12);H[d+8>>2]=H[f+8>>2];H[d>>2]=b;H[d+4>>2]=c;H[f+8>>2]=d;b=8}b=b+a|0;H[b>>2]=H[b>>2]+1;G[e+4>>1]=J[e+4>>1]+1;H[a+24>>2]=H[a+24>>2]+1}function Cd(a,b,c,d){var e=0,f=0,g=O(0),h=0;f=Ha-16|0;Ha=f;a:{e=H[d+12>>2]<<16;if(!e){break a}if((e|0)==65536){Ab(f,a,b,1);a=H[H[d>>2]>>2];La[H[H[a>>2]+20>>2]](a,f);break a}g=c;e=e>>16;c=O(e|0);g=O(g/c);c=O(b/c);b=O(O(g*O(3))-O(c+c));e=e-1|0;c=O(O(O(c-g)*O(6))/O(e|0));while(1){if(e<<16>>16<0){break a}Ab(f,a,b,1);h=H[H[d>>2]+((e&65535)<<2)>>2];La[H[H[h>>2]+20>>2]](h,f);e=e-1|0;b=O(c+b);continue}}Ha=f+16|0}function bb(a,b){var c=0,d=0,e=0;a:{c=H[b+76>>2];if(!((c|0)>=0&(!c|H[14768]!=(c&1073741823)))){b:{d=a&255;if((d|0)==H[b+80>>2]){break b}c=H[b+20>>2];if((c|0)==H[b+16>>2]){break b}H[b+20>>2]=c+1;F[c|0]=a;break a}en(b,d);break a}c=b+76|0;d=H[c>>2];H[c>>2]=d?d:1073741823;c:{d:{e=a&255;if((e|0)==H[b+80>>2]){break d}d=H[b+20>>2];if((d|0)==H[b+16>>2]){break d}H[b+20>>2]=d+1;F[d|0]=a;break c}en(b,e)}H[c>>2]=0}}function Yk(a,b,c){var d=O(0),e=0,f=O(0),g=0,h=O(0),i=O(0),j=0;d=O(O(c*O(4))*L[a+24>>2]);a:{if(O(P(d))<O(2147483648)){e=~~d;break a}e=-2147483648}d=O(d-O(e|0));f=O(O(1)-d);g=(e|0)%4|0;e=e&-32767;h=L[a+20>>2];i=L[a+16>>2];j=a+4|0;b:{if(H[a>>2]==1){d=(e|0)==1?f:d;d=(g|0)>1?O(-d):d;break b}d=(e|0)==1?d:f;d=O(d*d);d=O(((g|0)>1?O(d+O(-1)):O(O(1)-d))*O(.800000011920929))}kg(b,j,O(d*O(O(i*O(O(1)-c))+O(c*h))))}function Rn(a,b){var c=O(0),d=0,e=O(0),f=0,g=0;H[12866]=H[12866]+1;if(H[a+44>>2]==1){L[a+68>>2]=L[a+64>>2];return}c=L[a+52>>2];a:{if(c==O(-1)){L[a+68>>2]=L[a+64>>2];break a}b:{e=L[a+40>>2];c=O(b-c);if(e>=c|e==O(0)){break b}f=+O(c/e)+.99;c:{if(P(f)<2147483648){d=~~f;break c}d=-2147483648}if((d|0)<=1){break b}c=O(c/O(d>>>0));while(1){if((d|0)==(g|0)){break a}Qn(a,c);g=g+1|0;continue}}Qn(a,c)}L[a+52>>2]=b}function Te(a,b,c,d){var e=0,f=O(0);f=O(T(b));a:{if(b>O(0)){if(b==f){if(O(P(f))<O(2147483648)){d=~~f}else{d=-2147483648}d=(d|0)>0?d:0;while(1){if((d|0)==(e|0)){break a}ub(a,c);e=e+1|0;continue}}Jc(ub(a,c),b);return}if(!(b<O(0))){break a}if(b==f){if(O(P(f))<O(2147483648)){e=~~f}else{e=-2147483648}c=(e|0)>0?e:0;while(1){if((c|0)==(e|0)){break a}ub(a,d);e=e+1|0;continue}}ub(Jc(ub(ub(a,d),32),O(-b)),32)}}function mi(a,b){var c=0,d=0,e=0;F[a|0]=I[b|0];Ya(a+4|0,b+4|0);Ya(a+16|0,b+16|0);Ya(a+28|0,b+28|0);rb(a+40|0,b+40|0);H[a+72>>2]=H[b+72>>2];d=b- -64|0;e=H[d+4>>2];c=a- -64|0;H[c>>2]=H[d>>2];H[c+4>>2]=e;c=H[b+60>>2];H[a+56>>2]=H[b+56>>2];H[a+60>>2]=c;rb(a+76|0,b+76|0);H[a+108>>2]=H[b+108>>2];c=H[b+104>>2];H[a+100>>2]=H[b+100>>2];H[a+104>>2]=c;c=H[b+96>>2];H[a+92>>2]=H[b+92>>2];H[a+96>>2]=c;return a}function Lr(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=Ha-16|0;Ha=d;c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+28>>2]=c;c=Aj(H[a+24>>2],b,Yb(b),1);if(!c){e=zj(H[a+24>>2]);b=H[H[a+24>>2]+268>>2];if(b-1>>>0<=39){b=H[(b<<2)+34288>>2]}else{b=0}H[d+4>>2]=b;H[d>>2]=e;Wa(19242,d)}b=H[a+28>>2];a:{if(!b){break a}Sg(b);b=H[a+28>>2];if(!b){break a}nb(b);Va(b);H[a+28>>2]=0}Ha=d+16|0;return(c?0:3)|0}function Yg(a,b,c){var d=0,e=0,f=0;d=H[c+16>>2];a:{if(!d){if(fi(c)){break a}d=H[c+16>>2]}e=H[c+20>>2];if(d-e>>>0<b>>>0){return La[H[c+36>>2]](c,a,b)|0}b:{c:{if(!b|H[c+80>>2]<0){break c}d=b;while(1){f=a+d|0;if(I[f-1|0]!=10){d=d-1|0;if(d){continue}break c}break}e=La[H[c+36>>2]](c,a,d)|0;if(e>>>0<d>>>0){break a}b=b-d|0;e=H[c+20>>2];break b}f=a;d=0}jb(e,f,b);H[c+20>>2]=H[c+20>>2]+b;e=b+d|0}return e}function Xm(a,b){var c=0,d=0,e=O(0);c=Ha-32|0;Ha=c;H[c+20>>2]=b;H[c+16>>2]=b;H[c+24>>2]=0;rc(a,0,c+16|0,0,c+28|0,c+24|0);a=H[c+24>>2];a:{if(a){d=H[a+24>>2];if(d){e=_b(d);if(e!=O(0)){break a}}e=L[a+20>>2];if(e!=O(0)){break a}}d=b&255;a=52976;b:{if(d-1>>>0<11){break b}a=52980;if((b&252)==12){break b}a=52984;if(d-25>>>0<19){break b}M[c>>3]=L[13247];Wa(19439,c);a=52988}e=L[a>>2]}Ha=c+32|0;return e}function Cx(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=1;c=F[b+2|0];a:{if((c|0)>=0){break a}b:{c:{d:{d=I[b|0];if((d|0)==239){a=191;b=I[b+1|0];if((b|0)!=191){break d}if(c>>>0<=4294967229){break b}break a}if(c>>>0>4294967231){break a}a=I[b+1|0];if((d|0)!=224){break c}return(a- -64&255)>>>0<224|0}a=b;if(c>>>0>4294967231){break a}}if(a<<24>>24>=0){break a}}e=(a&255)>>>0>((d|0)==237?159:191)>>>0}return e|0}function Cw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;if((c|0)!=1){e=Ha-1040|0;Ha=e;g=H[12604];a:{b:{d=e+16|0;b=J[((c>>>0<=153?c:0)<<1)+2944>>1]+1024|0;f=Yb(b);c:{if(f>>>0>=1024){jb(d,b,1023);F[d+1023|0]=0;b=68;break c}jb(d,b,f+1|0);b=0}if(b){if((b|0)!=28){break b}b=40736}else{b=d}break a}ug();B()}if(!I[b|0]){H[e>>2]=c;jc(d,1024,11110,e);b=d}H[12604]=g;Ri(a,b);Ha=e+1040|0;return}Ri(a,6003)}function Vn(a,b,c){var d=O(0),e=0,f=0,g=O(0),h=0;f=Ha-16|0;Ha=f;while(1){if((e|0)!=4){h=e<<2;d=O(O(L[h+b>>2]*L[c+h>>2])+d);e=e+1|0;continue}break}rb(a,c);rb(f,b);hf(f,d);e=0;while(1){if((e|0)!=4){b=e<<2;c=b+a|0;L[c>>2]=L[c>>2]-L[b+f>>2];e=e+1|0;continue}break}g=ui(a);a:{b:{if(+g>1e-4){d=O(Ed(d)/O(W(g)));break b}if(!(d<O(0))|!(g>O(0))){break a}d=O(W(g));d=O(O(L[12865]-d)/d)}hf(a,d)}Ha=f+16|0}function bt(a,b,c){a=a|0;b=b|0;c=c|0;var d=O(0),e=0,f=0,g=0;Qc(a,b,c);L[a+536>>2]=L[13362];L[a+540>>2]=L[13363];d=L[13364];L[a+544>>2]=d;L[a+40>>2]=L[a+40>>2]*O(d*L[13365]);b=I[b+13|0]&64;a:{b:{e=H[a+8>>2];switch(e-3|0){case 0:case 2:break b;default:break a}}f=a,g=qk(H[((b?0:72)+c|0)+56>>2]),G[f+550>>1]=g}if((e&-2)==4){f=a,g=qk(H[((b?72:0)+c|0)+56>>2]),G[f+548>>1]=g}La[H[H[a>>2]+68>>2]](a)}function Yc(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;H[c+8>>2]=H[b+16>>2];d=H[b+12>>2];H[c>>2]=H[b+8>>2];H[c+4>>2]=d;Cm(a+12|0,c);if(!H[a+12>>2]){H[a+12>>2]=H[H[14021]+(H[a+4>>2]<<2)>>2]}if(!H[a+16>>2]){H[a+16>>2]=2}F[a+28|0]=I[b+20|0];F[a+29|0]=I[b+21|0];F[a+30|0]=I[b+22|0];F[a+31|0]=I[b+23|0];F[a+32|0]=I[b+24|0];L[a+52>>2]=L[b+208>>2];L[a+56>>2]=L[b+212>>2];La[H[H[a>>2]+16>>2]](a,b);Ha=c+16|0}function qd(a,b,c){H[a+12>>2]=0;H[a+16>>2]=0;H[a+8>>2]=c;H[a+4>>2]=b;H[a>>2]=32120;H[a+40>>2]=0;H[a+44>>2]=0;H[a+36>>2]=0;H[a+24>>2]=0;H[a+28>>2]=0;H[a+56>>2]=1065353216;H[a+48>>2]=1065353216;H[a+52>>2]=0;F[a+20|0]=0;G[a+32>>1]=0;Mk(a+60|0);a:{b:{switch(H[a+8>>2]-1|0){case 0:Wa(22117,0);break a;case 1:Wa(22065,0);break a;default:break b}}return a}a=Eb(4);H[a>>2]=8;Z(a|0,34176,0);B()}function Or(a,b){a=a|0;b=b|0;var c=0,d=0;c=H[a+28>>2];b=H[c+12>>2];if((b|0)<=0){b=0}else{d=b-1|0;b=H[(H[c>>2]+(b<<2)|0)-4>>2]}H[c+12>>2]=d;a:{b:{c=H[a+8>>2];if((c|0)!=(b|0)){break b}d=H[a+12>>2];if(!d){break b}La[d|0](H[a+16>>2],c);c=0;H[a+8>>2]=0;if(!b){break a}Va(Gc(b));break a}c=b}b=H[a+28>>2];d=H[b+12>>2];if(!d){H[a+20>>2]=c;return}if(c){Pb(H[H[(H[b>>2]+(d<<2)|0)-4>>2]+8>>2],c)}}function Nx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=a+72|0;i=c-1|0;c=1;a:{while(1){b=b+1|0;if((i|0)==(b|0)){break a}a=I[b|0];e=I[a+h|0]-9|0;b:{c:{if(e>>>0>26){break c}f=1<<e;if(f&132483059){continue}g=a<<24>>24;if(!(f&139264)){if((e|0)!=12){break c}if((g|0)!=9){continue}break b}if((g|0)>=0){continue}}if((a|0)==36|(a|0)==64){continue}}break}H[d>>2]=b;c=0}return c|0}function ag(a,b,c,d){var e=0,f=0;e=Ha-32|0;Ha=e;f=H[((d|0)==3?128:124)+a>>2];a:{if(f){b:{if(!((d|0)!=3|I[a+132|0]!=1)){b=H[((b<<2)+a|0)+48>>2];H[e+8>>2]=H[a+88>>2];H[e+4>>2]=c+1;H[e>>2]=b;jc(52384,100,f,e);break b}b=H[((b<<2)+a|0)+48>>2];c=H[((c<<2)+a|0)+56>>2];H[e+24>>2]=H[((d<<2)+a|0)+76>>2];H[e+20>>2]=c;H[e+16>>2]=b;jc(52384,100,f,e+16|0)}F[52483]=0;break a}F[52384]=0}Ha=e+32|0}function $q(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=39;a:{b:{c:{d:{switch(b-15|0){case 3:if(La[H[e+24>>2]](e,c,d,34759)|0){H[a+8>>2]=39;H[a>>2]=66;return 42}if(!(La[H[e+24>>2]](e,c,d,34765)|0)){break c}H[a+8>>2]=39;H[a>>2]=66;return 41;case 0:break b;case 1:case 2:break c;default:break d}}if((b|0)==23){break a}}H[a>>2]=25;f=-1}return f|0}H[a+4>>2]=1;H[a>>2]=68;return 44}function Mn(a,b,c){H[a+36>>2]=0;H[a+40>>2]=0;H[a+24>>2]=1;H[a+28>>2]=0;H[a+20>>2]=0;H[a+16>>2]=0;H[a+12>>2]=0;H[a+8>>2]=0;H[a+4>>2]=c;H[a>>2]=b;H[a+68>>2]=0;H[a+72>>2]=0;H[a+100>>2]=0;F[a+96|0]=1;H[a+92>>2]=1065353216;H[a+44>>2]=0;H[a+48>>2]=0;H[a+52>>2]=0;H[a+56>>2]=0;H[a+60>>2]=0;H[a+64>>2]=1065353216;H[a+76>>2]=0;H[a+80>>2]=0;H[a+84>>2]=0;H[a+88>>2]=0;H[a+32>>2]=51548;return a}function ig(a){H[a+12>>2]=1065353216;H[a+4>>2]=0;H[a+8>>2]=1065353216;H[a+64>>2]=0;H[a+68>>2]=-1082130432;H[a+60>>2]=3;H[a+52>>2]=1065353216;H[a+56>>2]=1017370378;H[a+44>>2]=1097859072;H[a+48>>2]=1184645120;H[a+36>>2]=1082130432;H[a+40>>2]=1181376512;F[a+32|0]=0;H[a+24>>2]=1088421888;H[a+28>>2]=0;H[a+16>>2]=1092616192;H[a+20>>2]=1028443341;H[a>>2]=30472;zb(a+72|0,0,36);return a}function dk(a,b){var c=0,d=0,e=0;c=md(a,b);H[c>>2]=33228;H[c+528>>2]=0;H[c+532>>2]=10;H[c+536>>2]=0;H[c+540>>2]=0;jb(c+4|0,b+4|0,524);a=H[b+540>>2];H[c+536>>2]=H[b+536>>2];H[c+540>>2]=a;a=H[b+532>>2];H[c+528>>2]=H[b+528>>2];H[c+532>>2]=a;e=c+528|0;a=0;while(1){if(H[b+540>>2]>(a|0)){d=H[H[b+528>>2]+(a<<2)>>2];if(d){cd(e,a,La[H[H[d>>2]+8>>2]](d)|0)}a=a+1|0;continue}break}return c}function cl(a,b){var c=0,d=0;b=!H[a+24>>2]|(H[a+16>>2]|b);H[a+16>>2]=b;if(b&H[a+20>>2]){a=Ha-16|0;Ha=a;c=Eb(16);b=Ha-16|0;Ha=b;if(!I[60232]){F[60232]=1}H[b+12>>2]=46164;H[b+8>>2]=1;d=H[b+12>>2];H[a+8>>2]=H[b+8>>2];H[a+12>>2]=d;Ha=b+16|0;b=H[a+12>>2];a=H[a+8>>2];H[12729]=0;a=qa(98,c|0,a|0,b|0)|0;b=H[12729];H[12729]=0;if((b|0)!=1){Z(a|0,40320,99);B()}a=aa()|0;Hp(c);ba(a|0);B()}}function ww(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=Ha-16|0;Ha=e;a:{if(b){if(wg(H[d+4>>2],I[d+11|0])){bd(d,16303)}f=e+4|0;La[H[H[c>>2]+24>>2]](f,c,b);H[12729]=0;da(100,d|0,f|0)|0;b=H[12729];H[12729]=0;if((b|0)==1){break a}$c(f)}b=H[d+4>>2];H[a>>2]=H[d>>2];H[a+4>>2]=b;H[a+8>>2]=H[d+8>>2];H[d>>2]=0;H[d+4>>2]=0;H[d+8>>2]=0;Ha=e+16|0;return}a=aa()|0;$c(e+4|0);ba(a|0);B()}function Oq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;if((b|0)==15){return 33}g=60;f=37;a:{if((b|0)==27){break a}b:{if((b|0)!=20){break b}f=35;if(La[H[e+24>>2]](e,H[e+64>>2]+c|0,d,34736)|0){break a}f=36;if(La[H[e+24>>2]](e,H[e+64>>2]+c|0,d,34744)|0){break a}if(!(La[H[e+24>>2]](e,H[e+64>>2]+c|0,d,34753)|0)){break b}g=80;f=33;break a}g=25;f=-1}H[a>>2]=g;return f|0}function um(a,b,c){var d=0,e=0,f=0,g=0;e=I[a|0];d=e;if(!d){F[a|0]=b;d=b}f=d&252;d=d&255;b=I[a+1|0]|I[a+2|0]<<8;if(!((f|0)!=12&(e|0)!=0&d-1>>>0>10|b&15)){b=c&15|b;F[a+1|0]=b;F[a+2|0]=b>>>8}e=b&28672;d=d-7>>>0<5;g=d&!(b&3968);d=!(b&112)&(d|(f|0)==12);if(!(!(!e|(g|d))&b<<16>>16<0)){b=(d?c&112:0)|(g?c&3968:0)|(e?0:c&28672)|(b<<16>>16>=0?c&32768:0)|b;F[a+1|0]=b;F[a+2|0]=b>>>8}}function hs(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=O(0),g=0,h=O(0),i=0;a:{if(!(c<=O(0))){g=H[a+540>>2];if(g){break a}}Zc(a,b,c,d);return}h=d?c:O(O(L[a+40>>2]-L[a+44>>2])-c);i=H[a+528>>2];e=H[i>>2];f=L[e+40>>2];c=f;a=1;while(1){if(!(!(c<=h)|a>>>0>=g>>>0)){e=H[(a<<2)+i>>2];f=L[e+40>>2];c=O(c+f);a=a+1|0;continue}break}c=O(h-O(c-f));La[H[H[e>>2]+60>>2]](e,b,d?c:O(f-c),d)}function $n(a){var b=0,c=0,d=0,e=0;e=a+16|0;while(1){if((b|0)==4){b=H[a+12>>2];if(b){Va(ki(b));H[a+12>>2]=0}b=H[a+976>>2];if(b){Va(ki(b));H[a+976>>2]=0}b=3556;while(1){b=b-644|0;gg(b+a|0);if((b|0)!=980){continue}break}gg(a+224|0);b=H[a+220>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+220>>2]=0}return}d=(b<<2)+e|0;c=H[d>>2];if(c){La[H[H[c>>2]+4>>2]](c);H[d>>2]=0}b=b+1|0;continue}}function fu(a,b){a=a|0;b=O(b);var c=0,d=0,e=0,f=0,g=O(0);e=Ha-16|0;Ha=e;c=H[a+24>>2];if(H[c+12>>2]){L[a+4>>2]=b;while(1){if(H[c+12>>2]<=(f|0)){g=L[H[H[c>>2]>>2]+8>>2];L[a+12>>2]=b;L[a+8>>2]=g;L[a+16>>2]=L[d+16>>2]}else{d=H[H[c>>2]+(f<<2)>>2];a:{if(!d){db();H[e>>2]=f;Wa(20866,e);break a}La[H[H[d>>2]+12>>2]](d,b);b=L[d+12>>2]}f=f+1|0;c=H[a+24>>2];continue}break}}Ha=e+16|0}function Xo(a,b,c,d,e){var f=0,g=0,h=0,i=O(0),j=O(0),k=O(0);f=Ha-32|0;Ha=f;if(b){i=L[a+4>>2];j=L[a+8>>2];k=L[a+12>>2];M[f+24>>3]=L[a+16>>2];M[f+16>>3]=k;M[f+8>>3]=j;M[f>>3]=i;pb(b,e,f);e=c+1|0;while(1){g=H[H[a+24>>2]+12>>2];bb(10,b);if((g|0)<=(h|0)){_a(b,c);$a(d,b)}else{_a(b,e);g=H[H[H[a+24>>2]>>2]+(h<<2)>>2];La[H[H[g>>2]+44>>2]](g,b,e);h=h+1|0;continue}break}}Ha=f+32|0}function pv(a,b){a=a|0;b=b|0;var c=0,d=0,e=O(0),f=O(0),g=O(0),h=0,i=O(0),j=O(0),k=O(0);d=Ha+-64|0;Ha=d;i=L[a+48>>2];e=L[a+60>>2];j=L[a+64>>2];c=d+48|0;f=O(L[a+44>>2]/L[12882]);g=O(L[a+68>>2]*f);Ab(c,a+32|0,g,1);rb(b,c);c=d+32|0;h=a+20|0;k=e;e=O(O(1)-f);Ab(c,h,O(O(k*e)+O(f*j)),1);tc(b,c);c=d+16|0;Ab(c,a+8|0,L[a+44>>2],1);tc(b,c);Ab(d,h,O(O(i*e)+g),1);tc(b,d);Ha=d- -64|0}function Ci(a){var b=0,c=0,d=0;d=(C(a),v(2));c=d&2147483647;if(c>>>0>=1065353216){if((c|0)==1065353216){return O(+a*1.5707963267948966+752316384526264e-51)}return O(O(0)/O(a-a))}a:{if(c>>>0<=1056964607){if(c-8388608>>>0<956301312){break a}return O(O(a*lf(O(a*a)))+a)}a=O(O(O(1)-O(P(a)))*O(.5));b=W(+a);b=b+b*+lf(a);a=O(1.5707963267948966-(b+b));a=(d|0)<0?O(-a):a}return a}function Mx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;a=H[b>>2];while(1){a:{if((a|0)==(c|0)){break a}f=H[d>>2];g=F[a|0];if((g|0)<0){if((e-f|0)<2){break a}H[d>>2]=f+1;F[f|0]=(g&192)>>>6|192;a=H[d>>2];H[d>>2]=a+1;F[a|0]=g&191;a=H[b>>2]+1|0;H[b>>2]=a;continue}if((e|0)==(f|0)){break a}H[b>>2]=a+1;a=I[a|0];f=H[d>>2];H[d>>2]=f+1;F[f|0]=a;a=H[b>>2];continue}break}}function Ns(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;ie(a,b,c);Mb(b,c,7439,H[a+528>>2],H[14600]);Mb(b,c,7432,H[a+532>>2],H[14600]);Mb(b,c,6460,H[a+536>>2],H[14596]);Mb(b,c,9234,H[a+540>>2],H[14599]);L[d+4>>2]=L[a+544>>2];L[d+8>>2]=L[a+548>>2];L[d+12>>2]=L[a+552>>2];Od(b,c,4873,d+4|0);Mb(b,c,6441,H[a+560>>2],H[14596]);Mb(b,c,9210,H[a+564>>2],H[14599]);Ha=d+16|0}function nq(a){var b=0,c=0,d=0;c=Ha-16|0;Ha=c;H[a+32>>2]=0;H[a+12>>2]=0;F[a+8|0]=0;F[a+37|0]=1;F[a+38|0]=0;H[a>>2]=0;H[a+4>>2]=0;F[a+36|0]=0;b=Xa(16);H[b+12>>2]=0;H[b+4>>2]=10;H[b+8>>2]=1e3;d=ib(1e3);H[b>>2]=d;if(!d){H[c>>2]=1e3;Wa(24196,c);H[b+8>>2]=0;a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}ck(b,0,1e3);H[a+28>>2]=-1;H[a+20>>2]=0;H[a+24>>2]=0;H[a+16>>2]=b;Ha=c+16|0}function Ks(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;b=Ha-32|0;Ha=b;c=H[H[a+528>>2]+36>>2];g=H[c+48>>2];d=H[c+12>>2];H[b+16>>2]=d;H[b+28>>2]=d;d=Zg(c,b+16|0);e=H[c+40>>2];H[b+12>>2]=e;H[b+24>>2]=e;e=Zg(c+16|0,b+12|0);f=H[c+44>>2];H[b+8>>2]=f;H[b+20>>2]=f;c=Zg(c+28|0,b+8|0);c=c>>>0<e>>>0?e:c;c=c>>>0<d>>>0?d:c;c=(g|0)==1?c>>>0<=9?9:c:c;if(c){H[a+12>>2]=c}Ha=b+32|0}function Hr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=Ha-32|0;Ha=f;H[f+16>>2]=a;eb(45864,20406,f+16|0);H[11463]=e;H[f>>2]=e;eb(45864,20355,f);e=!H[14689]&(I[58752]&!a);if(e){a=Xa(44);H[a+40>>2]=1;H[a+32>>2]=0;H[a+36>>2]=0;H[a+16>>2]=0;H[a+8>>2]=0;G[a+4>>1]=256;H[a>>2]=0;b=qb(b);H[a+40>>2]=1;F[a+5|0]=d;F[a+4|0]=c;H[a>>2]=b;H[14689]=a}Ha=f+32|0;return e|0}function jm(a,b,c,d,e,f){var g=0,h=0;g=c|d;if(g|e|f){gb(b,G[29370]);b=Za(Za(ub(b,60),8762),21503);h=J[29370]+1|0;G[29370]=h;a:{if(g){Jh(H[a+20>>2],b,c,d);break a}gb(b,h<<16>>16);Za(Za(ub(b,60),8768),21445)}b:{if(e|f){Jh(H[a+24>>2],b,e,f);break b}gb(b,G[29370]);Za(Za(ub(b,60),8768),21445)}a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),8762),21503)}}function Zc(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;var e=0,f=0,g=0;e=Ha-16|0;Ha=e;c=Bf(a,c,d);a:{b:{f=H[a+8>>2];switch(f-3|0){case 0:case 2:break b;default:break a}}g=J[a+508>>1];Ok(e,c,g,L[a+512>>2],L[a+516>>2],d);hh(b,a+60|0,a+284|0,e,(g&64)>>>6|0)}if((f&-2)==4){f=J[a+510>>1];Ok(e,c,f,L[a+520>>2],L[a+524>>2],d);hh(b+112|0,a+172|0,a+396|0,e,(f&64)>>>6|0)}Ha=e+16|0}function Zg(a,b){var c=0,d=0,e=0,f=0,g=0;c=H[a>>2];d=H[14678];a:{if((c&16777215)==(d&16777215)){break a}e=c>>>8|0;g=(c&252)!=12;c=c&255;if(!(g&c-1>>>0>10)){if(e&24576){break a}f=9;if(c-7>>>0<2){break a}return I[b|0]-7>>>0<2?9:10}if((e&28672)!=4096){break a}b=H[b>>2];if(I[a+6|0]&96|((b&16777215)==(d&16777215)|b&6291456)){break a}f=(b&255)-7>>>0<2?9:10}return f}function Kr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=23;a:{b:{c:{d:{e:{f:{switch(b-11|0){case 1:f=1;break b;case 0:f=55;break b;case 2:f=56;break b;case 5:if(!(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34590)|0)){break e}f=3;g=24;break b;case 3:break a;case 4:break b;default:break f}}if((b|0)==29){break d}}f=-1;break c}f=2}g=25}H[a>>2]=g}return f|0}function Vh(a){var b=0,c=0,d=0;c=Ha-16|0;Ha=c;H[a+16>>2]=0;H[a+24>>2]=0;H[a+8>>2]=0;H[a+12>>2]=171;b=ib(1368);H[a>>2]=b;a:{if(b){d=171;H[a+4>>2]=171;b=0;while(1){if((b|0)>=(d|0)){break a}d=b<<3;H[d+H[a>>2]>>2]=0;G[(d+H[a>>2]|0)+4>>1]=0;b=b+1|0;d=H[a+4>>2];continue}}H[a+4>>2]=0;H[c>>2]=171;H[c+4>>2]=8;Wa(24709,c);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}Ha=c+16|0}function Hg(a){var b=0,c=0,d=0;b=a;d=b;while(1){a:{b:{c:{d:{e:{c=I[d|0];switch(c-10|0){case 1:case 2:break b;case 0:case 3:break d;default:break e}}if((c|0)==32){break d}if(!c){break c}break b}c=a;if((a|0)==(b|0)){break a}c=32;if(I[b-1|0]!=32){break b}c=b;break a}if((a|0)!=(b|0)){a=b-1|0;a=I[a|0]==32?a:b}F[a|0]=0;return}F[b|0]=c;c=b+1|0}d=d+1|0;b=c;continue}}function $h(a,b,c){var d=0,e=0,f=0;e=Ha-16|0;Ha=e;H[e+12>>2]=c;d=H[a+12>>2]+b|0;c=H[a+8>>2];if((d|0)>(c|0)){c=H[a+4>>2];if((c|0)<=(d|0)){c=(((d|0)/2|0)+d|0)+1|0}mn(a,c);c=H[a+8>>2]}if((c|0)>=(d|0)){c=0;while(1){if((b|0)==(c|0)){H[a+12>>2]=d}else{f=H[e+12>>2];H[e+12>>2]=f+4;G[(H[a>>2]+(H[a+12>>2]<<1)|0)+(c<<1)>>1]=H[f>>2];c=c+1|0;continue}break}}Ha=e+16|0}function km(a,b,c,d){var e=0;if(c|d){gb(b,G[29370]);b=Za(Za(ub(b,60),8762),21503);e=J[29370]+1|0;G[29370]=e;a:{if(c){Ye(H[H[a+20>>2]+56>>2],b);break a}gb(b,e<<16>>16);Za(Za(ub(b,60),8768),21445)}b:{if(d){Ye(H[H[a+24>>2]+56>>2],b);break b}gb(b,G[29370]);Za(Za(ub(b,60),8768),21445)}a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),8762),21503)}}function rw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ha+-64|0;Ha=d;e=1;a:{if(Cc(a,b,0)){break a}e=0;if(!b){break a}b=vp(b,40740,40788);e=0;if(!b){break a}zb(d+8|0,0,56);F[d+59|0]=1;H[d+16>>2]=-1;H[d+12>>2]=a;H[d+4>>2]=b;H[d+52>>2]=1;La[H[H[b>>2]+28>>2]](b,d+4|0,H[c>>2],1);a=H[d+28>>2];if((a|0)==1){H[c>>2]=H[d+20>>2]}e=(a|0)==1}a=e;Ha=d- -64|0;return a|0}function ih(a){var b=0,c=0,d=O(0);b=Ha-32|0;Ha=b;c=2;a:{b:{if(!a){break b}c:{d:{if((Yb(a)|0)==1){c=F[a|0];if((c-58&255)>>>0<246){break d}}H[b+16>>2]=b+28;if((wc(a,9150,b+16|0)|0)==1){d=L[b+28>>2];if(d>=O(0)){break a}}H[b+4>>2]=a;H[b>>2]=7589;Wa(28815,b);break c}c=Zk(c);if(c){break b}}d=O(0);break a}d=O(L[13442]*L[(c<<2)+53900>>2])}Ha=b+32|0;return d}function _r(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;G[d+14>>1]=I[b|0]|I[b+1|0]<<8;G[d+12>>1]=I[c|0]|I[c+1|0]<<8;Se(a,d+14|0,d+12|0);b=H[a+528>>2];if(b){G[d+10>>1]=J[a+508>>1];G[d+8>>1]=J[a+510>>1];La[H[H[b>>2]+28>>2]](b,d+10|0,d+8|0)}b=H[a+532>>2];if(b){G[d+6>>1]=J[a+508>>1];G[d+4>>1]=J[a+510>>1];La[H[H[b>>2]+28>>2]](b,d+6|0,d+4|0)}Ha=d+16|0}function om(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=Ha-32|0;Ha=d;f=H[a>>2];g=(H[f+76>>2]+((!(I[a+13|0]&64)^c)<<3)|0)+10|0;h=H[a+4>>2];while(1){if((e|0)==4){H[d+12>>2]=0;H[d+4>>2]=0;H[d+8>>2]=0;e=d+4|0;hg(b,f,e);li(H[a>>2],d+16|0,!(I[a+13|0]&64)^c,e,b+40|0,b+76|0,O(0));Ha=d+32|0}else{H[(d+16|0)+(e<<2)>>2]=H[(G[(e<<1)+g>>1]<<2)+h>>2];e=e+1|0;continue}break}}function Lw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;e=H[a+84>>2];f=H[e>>2];d=H[e+4>>2];h=H[a+28>>2];g=H[a+20>>2]-h|0;g=d>>>0<g>>>0?d:g;if(g){jb(f,h,g);f=g+H[e>>2]|0;H[e>>2]=f;d=H[e+4>>2]-g|0;H[e+4>>2]=d}d=c>>>0>d>>>0?d:c;if(d){jb(f,b,d);f=d+H[e>>2]|0;H[e>>2]=f;H[e+4>>2]=H[e+4>>2]-d}F[f|0]=0;b=H[a+44>>2];H[a+28>>2]=b;H[a+20>>2]=b;return c|0}function ys(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ha-16|0;Ha=d;G[d+14>>1]=I[b|0]|I[b+1|0]<<8;G[d+12>>1]=I[c|0]|I[c+1|0]<<8;Se(a,d+14|0,d+12|0);b=0;c=G[a+540>>1];e=(c|0)>0?c:0;while(1){if((b|0)==(e|0)){Ha=d+16|0}else{c=H[H[a+528>>2]+(b<<2)>>2];G[d+10>>1]=J[a+508>>1];G[d+8>>1]=J[a+510>>1];La[H[H[c>>2]+28>>2]](c,d+10|0,d+8|0);b=b+1|0;continue}break}}function tc(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0);c=L[b+12>>2];d=L[a+8>>2];e=L[b+8>>2];f=L[a+12>>2];g=L[b>>2];h=L[a+4>>2];i=L[b+4>>2];j=L[a>>2];L[a+8>>2]=O(c*d)+O(O(e*f)+O(O(g*h)-O(i*j)));L[a+4>>2]=O(c*h)+O(O(i*f)+O(O(e*j)-O(g*d)));L[a>>2]=O(c*j)+O(O(g*f)+O(O(i*d)-O(e*h)));L[a+12>>2]=O(c*f)+O(O(O(j*O(-g))-O(i*h))-O(e*d))}function ri(a,b,c){var d=0,e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0),k=O(0),l=O(0),m=O(0),n=O(0);d=Ha-16|0;Ha=d;e=yc(a,b);Ya(d+4|0,a);f=L[a+8>>2];g=L[b>>2];h=L[c+4>>2];i=L[a>>2];j=L[b+4>>2];k=L[c+8>>2];l=L[a+4>>2];m=L[b+8>>2];n=L[c>>2];e=kb(O(O(O(O(O(O(f*g)*h)+O(O(O(i*j)*k)+O(O(l*m)*n)))-O(O(i*m)*h))-O(O(f*j)*n))-O(O(l*g)*k)),e);Ha=d+16|0;return e}function nh(a,b,c,d){var e=0,f=0,g=0;e=Ha-32|0;Ha=e;a:{if(!d){break a}H[e+16>>2]=e+31;H[e+20>>2]=e+30;b:{if((wc(d,11210,e+16|0)|0)!=2){break b}f=F[e+31|0];f=(f-54&255)>>>0<251?-1:f-49|0;if((f|0)==-1){break b}g=F[e+30|0];g=(g-54&255)>>>0<251?-1:g-49|0;if((g|0)==-1){break b}H[a>>2]=f;H[b>>2]=g;break a}db();H[e+4>>2]=d;H[e>>2]=c;Wa(27113,e)}Ha=e+32|0}function Qb(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0);c=L[a+12>>2];d=L[b+8>>2];e=L[a+8>>2];f=L[b+12>>2];g=L[a>>2];h=L[b+4>>2];i=L[a+4>>2];j=L[b>>2];L[a+8>>2]=O(c*d)+O(O(e*f)+O(O(g*h)-O(i*j)));L[a+4>>2]=O(c*h)+O(O(i*f)+O(O(e*j)-O(g*d)));L[a>>2]=O(c*j)+O(O(g*f)+O(O(i*d)-O(e*h)));L[a+12>>2]=O(c*f)+O(O(O(j*O(-g))-O(i*h))-O(e*d))}function Se(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=J[a+508>>1];e=((I[b|0]|I[b+1|0]<<8)&512?512:d&14?512:d&1?512:0)|d&-513;G[a+508>>1]=e;G[a+508>>1]=e&64511|(((I[b|0]|I[b+1|0]<<8)&1024|d&48)!=0)<<10;b=J[a+510>>1];d=((I[c|0]|I[c+1|0]<<8)&512?512:b&14?512:b&1?512:0)|b&-513;G[a+510>>1]=d;G[a+510>>1]=d&64511|(((I[c|0]|I[c+1|0]<<8)&1024|b&48)!=0)<<10}function Ec(a,b){var c=0,d=0;d=Ha-16|0;Ha=d;H[a+16>>2]=0;H[a+8>>2]=0;H[a+24>>2]=0;H[a+12>>2]=b;c=ib(b<<3);H[a>>2]=c;a:{if(c){H[a+4>>2]=b;c=0;while(1){if((b|0)<=(c|0)){break a}b=c<<3;H[b+H[a>>2]>>2]=0;G[(b+H[a>>2]|0)+4>>1]=0;c=c+1|0;b=H[a+4>>2];continue}}H[a+4>>2]=0;H[d+4>>2]=8;H[d>>2]=b;Wa(24709,d);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}Ha=d+16|0}function wi(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0);c=L[b+12>>2];d=L[a+12>>2];e=L[b+8>>2];f=L[a+8>>2];g=L[b>>2];h=L[a>>2];i=L[b+4>>2];j=L[a+4>>2];L[a+12>>2]=O(c*d)+O(O(e*f)+O(O(g*h)+O(i*j)));L[a+8>>2]=O(c*f)+O(O(O(i*h)-O(g*j))-O(e*d));L[a+4>>2]=O(c*j)+O(O(O(f*g)-O(e*h))-O(i*d));L[a>>2]=O(c*h)+O(O(O(e*j)-O(i*f))-O(g*d))}function Li(a,b,c,d){F[a+53|0]=1;a:{if(H[a+4>>2]!=(c|0)){break a}F[a+52|0]=1;c=H[a+16>>2];b:{if(!c){H[a+36>>2]=1;H[a+24>>2]=d;H[a+16>>2]=b;if((d|0)!=1){break a}if(H[a+48>>2]==1){break b}break a}if((b|0)==(c|0)){c=H[a+24>>2];if((c|0)==2){H[a+24>>2]=d;c=d}if(H[a+48>>2]!=1){break a}if((c|0)==1){break b}break a}H[a+36>>2]=H[a+36>>2]+1}F[a+54|0]=1}}function Bi(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=O(0),h=O(0),i=O(0),j=O(0);c=L[a+12>>2];d=L[b+12>>2];e=L[a+8>>2];f=L[b+8>>2];g=L[a>>2];h=L[b>>2];i=L[a+4>>2];j=L[b+4>>2];L[a+12>>2]=O(c*d)+O(O(e*f)+O(O(g*h)+O(i*j)));L[a+8>>2]=O(O(e*d)+O(O(i*h)-O(g*j)))-O(c*f);L[a+4>>2]=O(O(i*d)+O(O(f*g)-O(e*h)))-O(c*j);L[a>>2]=O(O(g*d)+O(O(e*j)-O(i*f)))-O(c*h)}function nr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=3;a:{b:{c:{d:{switch(b-15|0){default:if((b|0)!=25){break c}f=7;b=48;break b;case 2:f=8;b=49;break b;case 0:break a;case 1:break c;case 3:break d}}b=50;if(La[H[e+24>>2]](e,c,d,34598)|0){break b}if(!(La[H[e+24>>2]](e,c,d,34605)|0)){break c}b=51;break b}f=-1;b=25}H[a>>2]=b}return f|0}function fn(a,b,c){var d=0,e=0,f=0;d=Ha+-64|0;Ha=d;H[d+56>>2]=0;H[d+60>>2]=0;H[d+48>>2]=0;H[d+52>>2]=0;H[d+40>>2]=0;H[d+44>>2]=0;H[d+16>>2]=d+56;H[d+20>>2]=d+48;H[d+24>>2]=d+40;b=wc(b,8817,d+16|0);if((b|0)!=3){db();H[d+8>>2]=b;H[d+4>>2]=c;H[d>>2]=4352;Wa(28424,d)}e=M[d+56>>3];f=M[d+48>>3];L[a+8>>2]=M[d+40>>3];L[a+4>>2]=f;L[a>>2]=e;Ha=d- -64|0}function be(a,b){a:{if((b|0)>=1024){a=a*898846567431158e293;if(b>>>0<2047){b=b-1023|0;break a}a=a*898846567431158e293;b=(b>>>0>=3069?3069:b)-2046|0;break a}if((b|0)>-1023){break a}a=a*2004168360008973e-307;if(b>>>0>4294965304){b=b+969|0;break a}a=a*2004168360008973e-307;b=(b>>>0<=4294964336?-2960:b)+1938|0}x(0,0);x(1,b+1023<<20);return a*+z()}function Je(a,b){var c=0;a:{if((a|0)<0){break a}if(a>>>0<=127){F[b|0]=a;return 1}if(a>>>0<=2047){F[b+1|0]=a&63|128;F[b|0]=a>>>6|192;return 2}if(a>>>0<=65535){F[b+2|0]=a&63|128;F[b|0]=a>>>12|224;F[b+1|0]=a>>>6&63|128;return 3}if(a>>>0>1114111){break a}F[b+3|0]=a&63|128;F[b|0]=a>>>18|240;F[b+2|0]=a>>>6&63|128;F[b+1|0]=a>>>12&63|128;c=4}return c}function Pk(a,b){var c=0,d=0,e=0;c=Ha-48|0;Ha=c;H[c+44>>2]=a&1024?114:45;H[c+40>>2]=a&512?109:45;d=c,e=gh(a)?82:45,H[d+36>>2]=e;H[c+32>>2]=a&256?87:45;H[c+28>>2]=a&128?70:45;H[c+24>>2]=a&64?83:45;H[c+20>>2]=a&32?80:45;H[c+16>>2]=a&16?69:45;H[c+12>>2]=a&8?72:45;H[c+8>>2]=a&4?68:45;H[c+4>>2]=a&2?65:45;H[c>>2]=a&1?43:45;eb(b,11173,c);Ha=c+48|0}function Dg(a,b,c,d){var e=0,f=0,g=0;a:{if(!H[a+64>>2]){f=1;if(!H[a+80>>2]){break a}Rb(a,b,c,d);return 1}c=(H[b+64>>2]<<1)+c|0;g=(La[H[b+28>>2]](b,c)|0)+c|0;e=a+400|0;c=Tb(e,b,c,g);if(!c){break a}H[a+416>>2]=H[a+412>>2];b=Tb(e,b,La[H[b+32>>2]](b,g)|0,d-(H[b+64>>2]<<1)|0);if(!b){break a}ej(b);La[H[a+64>>2]](H[a+4>>2],c,b);Oc(e);f=1}return f}function em(a,b,c){var d=0,e=0,f=0,g=0;a:{if(!I[a|0]|I[a+1|0]&15){break a}if(Uh(b,H[a>>2])){break a}d=I[a|0];e=I[a+3|0]<<24;f=(I[a+1|0]|I[a+2|0]<<8)&-28673|4096;if(Uh(b,d|(e|(f&40959)<<8))){break a}g=b;b=pc(I[a|0],I[a+1|0]|I[a+2|0]<<8)^c?1:2;if(!Uh(g,(b|f&40944)<<8|e|d)){break a}b=b|(I[a+1|0]|I[a+2|0]<<8)&65520;F[a+1|0]=b;F[a+2|0]=b>>>8}}function Vg(a,b){var c=0,d=0,e=0;a:{if(!b){break a}c=H[a+8>>2];d=H[b+12>>2]+H[a+12>>2]|0;if((c|0)<(d|0)){c=H[a+4>>2];if((c|0)<=(d|0)){c=(((d|0)/2|0)+d|0)+1|0}Xl(a,c);c=H[a+8>>2]}if((c|0)<(d|0)){break a}c=0;while(1){if(H[b+12>>2]<=(c|0)){H[a+12>>2]=d}else{e=c<<2;H[e+(H[a>>2]+(H[a+12>>2]<<2)|0)>>2]=H[H[b>>2]+e>>2];c=c+1|0;continue}break}}}function im(a,b,c,d){var e=0;if(c|d){gb(b,G[29370]);b=Za(Za(ub(b,60),8762),21503);e=J[29370]+1|0;G[29370]=e;a:{if(c){Qf(H[a+20>>2],b);break a}gb(b,e<<16>>16);Za(Za(ub(b,60),8768),21445)}b:{if(d){Qf(H[a+24>>2],b);break b}gb(b,G[29370]);Za(Za(ub(b,60),8768),21445)}a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),8762),21503)}}function Ut(a){a=a|0;var b=0,c=0;b=bl(Xa(52));H[b+20>>2]=H[a+20>>2];c=H[a+16>>2];H[b+12>>2]=H[a+12>>2];H[b+16>>2]=c;c=H[a+8>>2];H[b+4>>2]=H[a+4>>2];H[b+8>>2]=c;c=H[a+28>>2];H[b+24>>2]=H[a+24>>2];H[b+28>>2]=c;c=H[a+36>>2];H[b+32>>2]=H[a+32>>2];H[b+36>>2]=c;c=H[a+44>>2];H[b+40>>2]=H[a+40>>2];H[b+44>>2]=c;G[b+48>>1]=J[a+48>>1];return b|0}function qr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;a:{b:{c:{d:{switch(b-11|0){case 0:return 55;case 2:return 56;case 5:if(!(La[H[e+24>>2]](e,(H[e+64>>2]<<1)+c|0,d,34590)|0)){break c}H[a>>2]=24;return 3;case 3:case 4:break b;case 1:break c;default:break d}}if((b|0)==29){break a}}H[a>>2]=25;f=-1}return f|0}H[a>>2]=25;return 2}function Uo(a,b,c){var d=0,e=0,f=0;gb(b,G[29370]);b=Za(ub(b,60),c);La[H[H[a>>2]+84>>2]](a,b,1);b=Za(b,21503);G[29370]=J[29370]+1;d=G[a+540>>1];d=(d|0)>0?d:0;while(1){if((d|0)==(e|0)){a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),c),21503)}else{f=H[H[a+528>>2]+(e<<2)>>2];La[H[H[f>>2]+80>>2]](f,b);e=e+1|0;continue}break}}function sq(a,b,c){var d=0,e=0;H[c>>2]=11;d=1;a:{if(I[a+1|0]|(b-a|0)!=6){break a}b=I[a|0];if((b|0)==120){b=0}else{if((b|0)!=88){break a}b=1}if(I[a+3|0]){break a}e=I[a+2|0];if((e|0)!=109){if((e|0)!=77){break a}b=1}if(I[a+5|0]){break a}a=I[a+4|0];if((a|0)!=108){if((a|0)!=76){break a}return 0}d=0;if(b){break a}H[c>>2]=12;d=1}return d}function mq(a,b,c){var d=0,e=0;H[c>>2]=11;d=1;a:{if(I[a|0]|(b-a|0)!=6){break a}b=I[a+1|0];if((b|0)==120){b=0}else{if((b|0)!=88){break a}b=1}if(I[a+2|0]){break a}e=I[a+3|0];if((e|0)!=109){if((e|0)!=77){break a}b=1}if(I[a+4|0]){break a}a=I[a+5|0];if((a|0)!=108){if((a|0)!=76){break a}return 0}d=0;if(b){break a}H[c>>2]=12;d=1}return d}function Rr(a,b){a=a|0;b=b|0;var c=0;gb(b,G[29370]);b=Za(ub(b,60),7361);La[H[H[a>>2]+84>>2]](a,b,1);b=Za(b,21503);G[29370]=J[29370]+1;c=H[a+528>>2];a:{if(c){La[H[H[c>>2]+80>>2]](c,b);break a}Wj(b)}a=H[a+532>>2];b:{if(a){La[H[H[a>>2]+80>>2]](a,b);break b}Wj(b)}a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),7361),21503)}function Bv(a,b){a=a|0;b=b|0;var c=0,d=O(0),e=O(0),f=O(0),g=0,h=O(0);c=Ha-16|0;Ha=c;d=O(La[H[H[a+16>>2]+32>>2]](a+16|0));e=O(La[H[H[a+124>>2]+32>>2]](a+124|0));f=O(La[H[H[a+232>>2]+32>>2]](a+232|0));g=c,h=O(La[H[H[a+340>>2]+32>>2]](a+340|0)),L[g+12>>2]=h;L[c+8>>2]=f;L[c+4>>2]=e;L[c>>2]=d;zo(c);jf(c);rb(b,c);rb(b,a+532|0);Ha=c+16|0}function $b(a,b){var c=0;c=H[b+24>>2];H[a+40>>2]=H[b+20>>2];H[a+44>>2]=c;c=H[b+32>>2];H[a+48>>2]=H[b+28>>2];H[a+52>>2]=c;c=H[b+76>>2];H[a+160>>2]=H[b+72>>2];H[a+164>>2]=c;c=H[b+68>>2];H[a+152>>2]=H[b+64>>2];H[a+156>>2]=c;c=H[b+36>>2];if(c){c=H[c+236>>2]}else{c=0}H[a+56>>2]=c;b=H[b+80>>2];if(b){b=H[b+236>>2]}else{b=0}H[a+168>>2]=b}function ch(a){var b=0,c=0,d=0,e=0;a:{if(!a){break a}c=H[a+8>>2];if(!c){break a}b=H[c+12>>2];if((b|0)<=0){break a}if((b|0)==1){return dh(H[H[c>>2]>>2])}b=0;e=Lf(Xa(28));while(1){d=b<<16>>16;if((d|0)>=H[c+12>>2]){La[H[H[e>>2]+52>>2]](e,a)}else{d=dh((d|0)>=0?H[H[c>>2]+(d<<2)>>2]:0);Pb(H[e+24>>2],d);b=b+1|0;continue}break}}return e}function _l(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0;h=Ha-16|0;Ha=h;i=H[c+12>>2]-d|0;k=(i|0)>0?i:0;l=b+528|0;b=0;while(1){if((b|0)!=(k|0)){i=0;j=b+d|0;if(!((j|0)<0|H[c+12>>2]<=(j|0))){i=H[H[c>>2]+(j<<2)>>2]}G[h+10>>1]=g;H[h+12>>2]=0;G[h+8>>1]=g;wd(a,h+12|0,i,e,f,h+8|0,0);i=H[h+12>>2];if(i){Hc(l,i)}b=b+1|0;continue}break}Ha=h+16|0}function kj(a,b,c,d,e){var f=0,g=0;g=H[e>>2];a:{if((g|0)>=(b|0)){break a}f=H[e+4>>2];while(1){b:{c:{d:{if(!f){g=g+1|0;H[e>>2]=g;if((b|0)<=(g|0)){H[e+4>>2]=0;break c}f=(g<<3)+a|0;break d}f=f+8|0}f=H[f>>2];H[e+4>>2]=f;if(f){break b}}f=0;if((b|0)>(g|0)){continue}break a}break}H[c>>2]=H[f>>2];H[d>>2]=H[H[e+4>>2]+4>>2];f=1}return f}function jp(a,b,c,d,e,f,g){var h=0;h=11;a:{b:{c:{d:{switch(b-15|0){case 3:if(La[H[e+24>>2]](e,c,d,34598)|0){H[a>>2]=g;return 11}if(!(La[H[e+24>>2]](e,c,d,34605)|0)){break c}H[a>>2]=f;return 11;case 0:break b;case 1:case 2:break c;default:break d}}if((b|0)==27){break a}}H[a>>2]=25;h=-1}return h}H[a+8>>2]=11;H[a>>2]=66;return 12}function Dv(a,b){a=a|0;b=b|0;var c=0,d=O(0),e=O(0),f=O(0),g=0,h=O(0);c=Ha-16|0;Ha=c;d=O(La[H[H[a+16>>2]+20>>2]](a+16|0));e=O(La[H[H[a+124>>2]+20>>2]](a+124|0));f=O(La[H[H[a+232>>2]+20>>2]](a+232|0));g=c,h=O(La[H[H[a+340>>2]+20>>2]](a+340|0)),L[g+12>>2]=h;L[c+8>>2]=f;L[c+4>>2]=e;L[c>>2]=d;zo(c);rb(b,c);rb(b,a+548|0);Ha=c+16|0}function Gh(a,b,c){var d=0,e=0,f=O(0),g=O(0),h=O(0),i=0;d=Ha-224|0;Ha=d;e=fm(d+8|0,H[a>>2],H[a+4>>2],b);f=L[e+80>>2];g=L[e+84>>2];h=L[e+88>>2];i=f!=O(0)|g!=O(0)|h!=O(0);a:{if(!i){a=H[a>>2];H[d+4>>2]=7526;H[d>>2]=a;Wa(25823,d);break a}L[c+4>>2]=h;L[c>>2]=O(O(f*(b?O(-1):O(1)))+g)*O(.5);H[c+8>>2]=H[e+92>>2]}Ha=d+224|0;return i}function tr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=a+72|0;i=a+372|0;while(1){f=H[b>>2];if(!((f|0)==(c|0)|H[d>>2]==(e|0))){g=J[(I[f|0]<<1)+i>>1];a:{if(!g){g=La[H[a+364>>2]](H[a+368>>2],f)|0;f=H[b>>2];f=(I[I[f|0]+h|0]+f|0)-3|0;break a}f=f+1|0}H[b>>2]=f;f=H[d>>2];H[d>>2]=f+2;G[f>>1]=g;continue}break}}function Rp(a,b,c){var d=0,e=0,f=0;d=H[c+72>>2];H[c+72>>2]=d-1|d;d=H[c+4>>2];e=H[c+8>>2];if((d|0)==(e|0)){d=b}else{f=d;d=e-d|0;d=b>>>0>d>>>0?d:b;jb(a,f,d);H[c+4>>2]=d+H[c+4>>2];a=a+d|0;d=b-d|0}if(d){while(1){a:{if(!Xi(c)){e=La[H[c+32>>2]](c,a,d)|0;if(e){break a}}return b-d|0}a=a+e|0;d=d-e|0;if(d){continue}break}}return b}function ku(a,b,c,d){a=a|0;b=O(b);c=O(c);d=O(d);c=O((d<=O(0)?O(1):d)/(c<=O(0)?O(1):c));a:{if(!(b>O(0))){break a}d=O(O(O(O(L[a+12>>2]+L[a+16>>2])-L[a+4>>2])-L[a+8>>2])*O(.5));if(!(d>O(0))){break a}c=O(c*O(b/d))}b:{if(c==O(1)){break b}La[H[H[a>>2]+28>>2]](a,c);b=L[a+4>>2];if(b==O(0)){break b}La[H[H[a>>2]+36>>2]](a,O(-b))}}function kw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(Cc(a,H[b+8>>2],e)){Ki(b,c,d);return}a:{if(!Cc(a,H[b>>2],e)){break a}if(!(H[b+16>>2]!=(c|0)&H[b+20>>2]!=(c|0))){if((d|0)!=1){break a}H[b+32>>2]=1;return}H[b+20>>2]=c;H[b+32>>2]=d;H[b+40>>2]=H[b+40>>2]+1;if(!(H[b+36>>2]!=1|H[b+24>>2]!=2)){F[b+54|0]=1}H[b+44>>2]=4}}function Wd(a,b,c){var d=0,e=0,f=0,g=0,h=O(0);d=Ha-32|0;Ha=d;e=d+16|0;rb(e,a);L[d+16>>2]=-L[d+16>>2];L[d+20>>2]=-L[d+20>>2];L[d+24>>2]=-L[d+24>>2];f=H[b>>2];g=H[b+4>>2];h=L[b+8>>2];H[d+12>>2]=0;L[d+8>>2]=h;H[d>>2]=f;H[d+4>>2]=g;Qb(d,e);tc(d,a);a=H[d+4>>2];b=H[d>>2];L[c+8>>2]=L[d+8>>2];H[c>>2]=b;H[c+4>>2]=a;Ha=d+32|0}function Eo(a,b,c){var d=0,e=0,f=0,g=0,h=O(0);d=Ha-32|0;Ha=d;e=d+16|0;rb(e,a);L[d+16>>2]=-L[d+16>>2];L[d+20>>2]=-L[d+20>>2];L[d+24>>2]=-L[d+24>>2];f=H[b>>2];g=H[b+4>>2];h=L[b+8>>2];H[d+12>>2]=0;L[d+8>>2]=h;H[d>>2]=f;H[d+4>>2]=g;Qb(d,a);tc(d,e);a=H[d+4>>2];b=H[d>>2];L[c+8>>2]=L[d+8>>2];H[c>>2]=b;H[c+4>>2]=a;Ha=d+32|0}function hg(a,b,c){var d=0,e=0,f=0;d=Ha-32|0;Ha=d;f=a+4|0;Ya(c,f);if(b){H[d+28>>2]=0;H[d+20>>2]=0;H[d+24>>2]=0;e=d+20|0;Nb(e,a+28|0,a+16|0);Xb(a+40|0,e);lb(e,f);H[d+16>>2]=0;H[d+8>>2]=0;H[d+12>>2]=0;b=H[b+80>>2];if(b){La[H[H[b>>2]+12>>2]](b,e,d+8|0)|0}lb(c,d+8|0)}b=d+20|0;Ya(b,a+16|0);Xb(a+40|0,b);xb(c,b);Ha=d+32|0}function Xb(a,b){var c=0,d=0,e=0,f=0,g=O(0);c=Ha-32|0;Ha=c;d=c+16|0;rb(d,a);L[c+16>>2]=-L[c+16>>2];L[c+20>>2]=-L[c+20>>2];L[c+24>>2]=-L[c+24>>2];e=H[b+4>>2];f=H[b>>2];g=L[b+8>>2];H[c+12>>2]=0;L[c+8>>2]=g;H[c>>2]=f;H[c+4>>2]=e;Qb(c,d);tc(c,a);a=H[c+4>>2];d=H[c>>2];L[b+8>>2]=L[c+8>>2];H[b>>2]=d;H[b+4>>2]=a;Ha=c+32|0}function Do(a,b){var c=0,d=0,e=0,f=0,g=O(0);c=Ha-32|0;Ha=c;d=c+16|0;rb(d,a);L[c+16>>2]=-L[c+16>>2];L[c+20>>2]=-L[c+20>>2];L[c+24>>2]=-L[c+24>>2];e=H[b+4>>2];f=H[b>>2];g=L[b+8>>2];H[c+12>>2]=0;L[c+8>>2]=g;H[c>>2]=f;H[c+4>>2]=e;Qb(c,a);tc(c,d);a=H[c+4>>2];d=H[c>>2];L[b+8>>2]=L[c+8>>2];H[b>>2]=d;H[b+4>>2]=a;Ha=c+32|0}function Us(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;G[d+14>>1]=I[b|0]|I[b+1|0]<<8;G[d+12>>1]=I[c|0]|I[c+1|0]<<8;Se(a,d+14|0,d+12|0);b=H[a+696>>2];if(b){G[d+8>>1]=0;G[d+10>>1]=0;La[H[H[b>>2]+28>>2]](b,d+10|0,d+8|0)}a=H[a+700>>2];if(a){G[d+4>>1]=0;G[d+6>>1]=0;La[H[H[a>>2]+28>>2]](a,d+6|0,d+4|0)}Ha=d+16|0}function co(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=Ha-16|0;Ha=c;rb(c,b);si(c);d=H[c+4>>2];e=H[a+448>>2]==1;b=(e?548:580)+a|0;H[b>>2]=H[c>>2];H[b+4>>2]=d;d=H[c+12>>2];H[b+8>>2]=H[c+8>>2];H[b+12>>2]=d;b=H[c+12>>2];a=(e?532:548)+a|0;H[a+8>>2]=H[c+8>>2];H[a+12>>2]=b;b=H[c+4>>2];H[a>>2]=H[c>>2];H[a+4>>2]=b;Ha=c+16|0}function yd(a,b,c,d,e){var f=0,g=0,h=0;g=a+172|0;h=H[b>>2];f=zd(g,h);a:{if(!f){f=ln(Xa(56),0);H[f+8>>2]=2;G[f+12>>1]=J[b>>1];F[f+14|0]=I[b+2|0];H[f+16>>2]=c;hi(c,f);Pb(H[a+108>>2],f);H[f+4>>2]=H[H[a+108>>2]+12>>2];_h(f,d);$f(g,h,f);break a}if(!Bc(f+40|0)){break a}_h(f,d)}if(e!=O(0)){L[f+20>>2]=e}return f}function Tq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=39;a:{b:{c:{d:{switch(b-21|0){default:if((b|0)==15){break b}if((b|0)!=36){break c}H[a+8>>2]=39;H[a>>2]=66;return 46;case 3:break a;case 1:case 2:break c;case 0:break d}}H[a>>2]=75;return 39}H[a>>2]=25;c=-1}return c|0}H[a+8>>2]=39;H[a>>2]=66;return 45}function Nc(a){var b=0,c=0,d=0;a:{if(I[a+8|0]!=1){break a}d=H[a>>2];if(!d){break a}while(1){if(H[d+4>>2]<=(b|0)){break a}c=H[d>>2]+(b<<3)|0;while(1){c=H[c>>2];if(c){Va(H[c>>2]);c=c+8|0;continue}break}b=b+1|0;continue}}b=H[a+4>>2];if(b){nb(b);Va(b);H[a+4>>2]=0}b=H[a>>2];if(b){Va(hb(b));H[a>>2]=0}return a}function Yb(a){var b=0,c=0,d=0;a:{b:{b=a;if(!(b&3)){break b}if(!I[b|0]){return 0}while(1){b=b+1|0;if(!(b&3)){break b}if(I[b|0]){continue}break}break a}while(1){c=b;b=b+4|0;d=H[c>>2];if(((d|16843008-d)&-2139062144)==-2139062144){continue}break}while(1){b=c;c=b+1|0;if(I[b|0]){continue}break}}return b-a|0}function eu(a,b,c,d){a=a|0;b=O(b);c=c|0;d=d|0;var e=0,f=0,g=O(0);while(1){a:{e=H[a+24>>2];b:{if(H[e+12>>2]<=(f|0)){break b}e=H[H[e>>2]+(f<<2)>>2];if(L[e+4>>2]>=b){break b}g=L[e+16>>2];if(!(g<O(0))){break a}La[H[H[e>>2]+16>>2]](e,b,c,d)}return}if(!(b>=g)){La[H[H[e>>2]+16>>2]](e,b,c,d)}f=f+1|0;continue}}function kt(a){a=a|0;var b=0,c=0;b=md(Xa(560),a);H[b>>2]=32556;jb(b+4|0,a+4|0,524);c=H[a+556>>2];H[b+552>>2]=H[a+552>>2];H[b+556>>2]=c;c=H[a+548>>2];H[b+544>>2]=H[a+544>>2];H[b+548>>2]=c;c=H[a+540>>2];H[b+536>>2]=H[a+536>>2];H[b+540>>2]=c;c=H[a+532>>2];H[b+528>>2]=H[a+528>>2];H[b+532>>2]=c;return b|0}function Sc(a,b){a:{if(!b){break a}H[b+16>>2]=1070386381;H[b+8>>2]=1060320051;H[b+12>>2]=1065353216;H[b>>2]=1065353216;H[b+4>>2]=1056964608;if(!a){break a}ic(H[a+4>>2],b+4|0,8047);ic(H[a+4>>2],b+8|0,8051);ic(H[a+4>>2],b+16|0,8779);ic(H[a+4>>2],b+12|0,7911);L[b>>2]=L[b+12>>2];ic(H[a+4>>2],b,8832)}}function Sn(a){var b=O(0),c=O(0),d=O(0);if(H[a+44>>2]==1){H[a+64>>2]=1065353216;H[a+68>>2]=1065353216;return}H[a+60>>2]=1065353216;b=L[a+12>>2];if(b>O(0)){c=O(1);d=L[a+68>>2];a:{if(d<O(1)){c=O(b+O(1));break a}if(!(d>O(1))){break a}c=O(O(1)-b)}F[a+16|0]=0;L[a+64>>2]=c;return}H[a+64>>2]=1065353216}function Kx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=H[d>>2];e=e-f|0;a=H[b>>2];a:{if((e|0)>=(c-a|0)){break a}e=a+e|0;while(1){c=e;if(a>>>0>=e>>>0){break a}e=e-1|0;if(F[e|0]<-64){continue}break}}while(1){if((a|0)!=(c|0)){F[f|0]=I[a|0];f=f+1|0;a=a+1|0;continue}break}H[b>>2]=a;H[d>>2]=f}function vv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=O(0),g=O(0),h=O(0);d=Ha+-64|0;Ha=d;if(b){e=H[H[a+4>>2]>>2];f=L[a+8>>2];g=L[a+12>>2];h=L[a+16>>2];M[d+56>>3]=L[a+20>>2];H[d+48>>2]=c;M[d+40>>3]=h;H[d+32>>2]=c;M[d+24>>3]=g;H[d+16>>2]=c;M[d+8>>3]=f;H[d+4>>2]=c;H[d>>2]=e;pb(b,9059,d)}Ha=d- -64|0}function Mp(a,b,c){var d=0,e=0,f=0;a:{if((c|0)<=0){break a}d=H[a+12>>2];if((d|0)<=(b|0)){break a}c=b+c|0;if((c|0)<=0){break a}d=(c|0)<(d|0)?c:d;c=(b|0)>0?b:0;f=d-c|0;b:{if((b|0)<=0){break b}b=c;while(1){if((b|0)>=(d|0)){break b}e=H[a>>2];F[e+(b-c|0)|0]=I[b+e|0];b=b+1|0;continue}}H[a+12>>2]=f}}function Ac(a,b){var c=0,d=0,e=0,f=0;d=Ha-16|0;Ha=d;a:{if(!b){b=0;break a}c=b>>31;e=(c^b)-c|0;c=Q(e);lc(d,e,0,0,0,c+81|0);e=0+H[d+8>>2]|0;c=(H[d+12>>2]^65536)+(16414-c<<16)|0;c=e>>>0<f>>>0?c+1|0:c;f=b&-2147483648|c;c=H[d+4>>2];b=H[d>>2]}H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=e;H[a+12>>2]=f;Ha=d+16|0}function yi(a,b,c,d,e,f){var g=O(0),h=O(0),i=O(0);g=O($g(e)*O(.5));e=ec(g);h=uc(g);a:{if(f){d=O(d*e);g=O(b*e);b=O(c*e);break a}g=O(0);i=O(O(d*d)+O(O(b*b)+O(c*c)));if(i==O(0)){h=O(1);d=O(0);b=O(0);break a}e=O(e/O(W(i)));d=O(d*e);g=O(b*e);b=O(c*e)}L[a+12>>2]=h;L[a+8>>2]=d;L[a+4>>2]=b;L[a>>2]=g}function Uw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;a=H[b>>2];if((c-a|0)>(e-H[d>>2]|0)){f=c-2|0;c=(I[f|0]&248)==216?f:c}while(1){a:{if((a|0)==(c|0)){break a}f=H[d>>2];if((f|0)==(e|0)){break a}a=I[a|0]|I[a+1|0]<<8;H[d>>2]=f+2;G[f>>1]=a<<8|a>>>8;a=H[b>>2]+2|0;H[b>>2]=a;continue}break}}function mw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;if(Cc(a,H[b+8>>2],0)){Ji(b,c,d);return}e=H[a+12>>2];f=a+16|0;up(H[f>>2],H[a+20>>2],b,c,d);a:{if(e>>>0<2){break a}e=(e<<3)+f|0;a=a+24|0;while(1){up(H[a>>2],H[a+4>>2],b,c,d);if(I[b+54|0]){break a}a=a+8|0;if(e>>>0>a>>>0){continue}break}}}function Pm(a,b){var c=0,d=0,e=0;c=H[b+4>>2];e=H[a>>2];d=H[a+4>>2];while(1){if((d|0)!=(e|0)){c=c-4|0;d=d-4|0;H[c>>2]=H[d>>2];continue}break}H[b+4>>2]=c;d=H[a>>2];H[a>>2]=c;H[b+4>>2]=d;c=H[a+4>>2];H[a+4>>2]=H[b+8>>2];H[b+8>>2]=c;c=H[a+8>>2];H[a+8>>2]=H[b+12>>2];H[b+12>>2]=c;H[b>>2]=H[b+4>>2]}function qx(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=a+72|0;a=b;while(1){d=I[a|0];c=F[a+1|0];if(c){c=cb(c,d<<24>>24)}else{c=I[d+e|0]}d=2;c=c&255;a:{if(1<<c&792723456?c>>>0<=29:0){break a}b:{switch(c-5|0){case 2:d=4;break a;default:return a-b|0;case 0:break a;case 1:break b}}d=3}a=a+d|0;continue}}function ax(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=a+72|0;a=b;while(1){d=I[a+1|0];c=F[a|0];if(c){c=cb(c,d<<24>>24)}else{c=I[d+e|0]}d=2;c=c&255;a:{if(1<<c&792723456?c>>>0<=29:0){break a}b:{switch(c-5|0){case 2:d=4;break a;default:return a-b|0;case 0:break a;case 1:break b}}d=3}a=a+d|0;continue}}function Qf(a,b){var c=0,d=0;c=I[a+4|0];d=I[a+5|0]|I[a+6|0]<<8;gb(b,G[29370]);c=c-1>>>0<11?10570:d&3968?10570:7918;b=Za(Za(Za(b,12743),c),30320);Bm(a+4|0,b);gb(b,G[29370]);b=Za(b,21503);G[29370]=J[29370]+1;Qh(a+16|0,b);a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),c),21503)}function po(a,b){var c=O(0),d=O(0),e=O(0),f=O(0),g=O(0);c=L[b+8>>2];f=L[b>>2];d=L[b+4>>2];e=O(O(c*c)+O(O(f*f)+O(d*d)));a:{if(e==O(0)){e=O(1);d=O(0);c=O(0);break a}g=c;c=O(W(e));e=O(g/c);d=O(d/c);g=O(f/c);c=kb(c,L[b+12>>2]);c=O(c+c)}L[a+12>>2]=c;L[a+8>>2]=e;L[a+4>>2]=d;L[a>>2]=g;return a}function Ol(a,b){var c=0,d=O(0);if(b!=O(0)){c=b<O(0);a=c?O(-a):a;b=c?O(-b):b;d=O(a/b);if(a<O(0)){a=O(b+a);d=O(-d);a:{if(O(P(d))<O(2147483648)){c=~~d;break a}c=-2147483648}a=O(O(O(c|0)*b)+a);return a==b?O(0):a}if(O(P(d))<O(2147483648)){c=~~d}else{c=-2147483648}a=O(a-O(O(c|0)*b))}return a}function uj(a,b,c,d){var e=0,f=0;e=Ha-32|0;Ha=e;a:{if(!a){H[c>>2]=1;a=0;break a}a=Og(a,d);if(!a){H[c>>2]=1;a=0;break a}H[e+16>>2]=e+24;f=wc(a,8825,e+16|0);b:{if((f|0)==1){L[b>>2]=M[e+24>>3];H[c>>2]=0;break b}H[c>>2]=2;db();H[e+4>>2]=a;H[e>>2]=d;Wa(28722,e)}a=(f|0)==1}Ha=e+32|0;return a}function jc(a,b,c,d){var e=0,f=0,g=0;f=Ha-16|0;Ha=f;H[f+12>>2]=d;e=Ha-160|0;Ha=e;g=b?a:e+158|0;H[e+148>>2]=g;a=b-1|0;H[e+152>>2]=a>>>0<=b>>>0?a:0;a=zb(e,0,144);H[a+76>>2]=-1;H[a+36>>2]=93;H[a+80>>2]=-1;H[a+44>>2]=a+159;H[a+84>>2]=a+148;F[g|0]=0;b=$l(a,c,d);Ha=a+160|0;Ha=f+16|0;return b}function $k(a,b){var c=0,d=0,e=0;c=Ha-32|0;Ha=c;a:{b:{if(!a){break b}d=1;if((Yb(a)|0)==1){e=I[a|0];if((e|0)==120){break a}if((e|0)==101){d=0;break a}if(!I[53764]){break b}db();H[c>>2]=a;Wa(28658,c);break b}if(!I[53764]){break b}db();H[c+16>>2]=a;Wa(28658,c+16|0)}d=b}Ha=c+32|0;return d}function ix(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;a=H[b>>2];if((c-a|0)>(e-H[d>>2]|0)){c=((I[c-1|0]&248)==216?-2:0)+c|0}while(1){a:{if((a|0)==(c|0)){break a}f=H[d>>2];if((f|0)==(e|0)){break a}a=I[a|0]|I[a+1|0]<<8;H[d>>2]=f+2;G[f>>1]=a;a=H[b>>2]+2|0;H[b>>2]=a;continue}break}}function Qm(a,b,c,d){var e=0,f=0,g=0;e=Ha-48|0;Ha=e;a=Bb(a,c);a:{if(!a){Ya(b,d);break a}M[e+40>>3]=L[d>>2];M[e+32>>3]=L[d+4>>2];M[e+24>>3]=L[d+8>>2];H[e>>2]=e+40;H[e+4>>2]=e+32;H[e+8>>2]=e+24;wc(a,8817,e);f=M[e+40>>3];g=M[e+32>>3];L[b+8>>2]=M[e+24>>3];L[b+4>>2]=g;L[b>>2]=f}Ha=e+48|0}function Aq(a,b,c){var d=0,e=0;H[c>>2]=11;d=1;a:{if((b-a|0)!=3){break a}b=I[a|0];if((b|0)==120){b=0}else{if((b|0)!=88){break a}b=1}e=I[a+1|0];if((e|0)!=109){if((e|0)!=77){break a}b=1}a=I[a+2|0];if((a|0)!=108){if((a|0)!=76){break a}return 0}d=0;if(b){break a}H[c>>2]=12;d=1}return d}function Zl(a,b){a=Wk(a,H[b+20>>2]);Wk(a+72|0,H[b+24>>2]);F[a+165|0]=0;F[a+166|0]=0;F[a+164|0]=0;H[a+144>>2]=0;H[a+148>>2]=0;H[a+152>>2]=0;H[a+156>>2]=0;F[a+159|0]=0;F[a+160|0]=0;F[a+161|0]=0;F[a+162|0]=0;F[a+124|0]=0;F[a+52|0]=0;b=H[b+40>>2];if(b){H[a+144>>2]=H[b+44>>2]}return a}function hb(a){var b=0,c=0,d=0,e=0;b=H[a>>2];if(b){while(1){if(H[a+4>>2]<=(c|0)){Va(b)}else{d=c<<3;e=H[d+b>>2];if(e){nk(e+8|0);Va(e);H[H[a>>2]+d>>2]=0;b=H[a>>2]}G[(b+d|0)+4>>1]=0;c=c+1|0;b=H[a>>2];continue}break}}H[14727]=H[14727]+H[a+8>>2];H[14728]=H[14728]+H[a+24>>2];return a}function bn(a){var b=0,c=0,d=0,e=0;b=H[a>>2];if(b){while(1){if(H[a+4>>2]<=(c|0)){Va(b)}else{d=c<<3;e=H[d+b>>2];if(e){an(e+8|0);Va(e);H[H[a>>2]+d>>2]=0;b=H[a>>2]}G[(b+d|0)+4>>1]=0;c=c+1|0;b=H[a>>2];continue}break}}H[14727]=H[14727]+H[a+8>>2];H[14728]=H[14728]+H[a+24>>2];return a}function Wh(a){var b=0,c=0,d=0,e=0;b=H[a>>2];if(b){while(1){if(H[a+4>>2]<=(c|0)){Va(b)}else{d=c<<3;e=H[d+b>>2];if(e){$m(e+8|0);Va(e);H[H[a>>2]+d>>2]=0;b=H[a>>2]}G[(b+d|0)+4>>1]=0;c=c+1|0;b=H[a>>2];continue}break}}H[14727]=H[14727]+H[a+8>>2];H[14728]=H[14728]+H[a+24>>2];return a}function Qk(a,b){var c=0,d=0;c=(I[a|0]|I[a+1|0]<<8)&-17|(oc(b+20|0)?16:0);F[a|0]=c;F[a+1|0]=c>>>8;c=c&-33|(L[b+32>>2]!=O(0)?32:(L[b+36>>2]!=O(0))<<5);F[a|0]=c;F[a+1|0]=c>>>8;a:{if(I[b+52|0]!=1){break a}b=H[b+56>>2];if(!b){break a}d=If(b)?64:0}b=c&65087|d;F[a|0]=b;F[a+1|0]=b>>>8}function Kj(a){var b=0,c=0,d=0,e=0;b=H[a>>2];if(b){while(1){if(H[a+4>>2]<=(c|0)){Va(b)}else{d=c<<3;e=H[d+b>>2];if(e){Jj(e+8|0);Va(e);H[H[a>>2]+d>>2]=0;b=H[a>>2]}G[(b+d|0)+4>>1]=0;c=c+1|0;b=H[a>>2];continue}break}}H[14727]=H[14727]+H[a+8>>2];H[14728]=H[14728]+H[a+24>>2];return a}function zf(a,b,c,d,e){var f=O(0),g=0,h=O(0),i=O(0);g=Ha-16|0;Ha=g;a:{if(e){h=L[b+4>>2];i=L[b>>2];f=L[b+8>>2];break a}f=L[b+4>>2];h=d&4?O(-f):f;f=L[b>>2];i=d&2?O(-f):f;f=L[b+8>>2];f=d&8?O(-f):f}L[g+12>>2]=f;L[g+8>>2]=h;L[g+4>>2]=i;ah(a,g+4|0);wb(a,L[(c<<2)+53016>>2]);Ha=g+16|0}function yr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Ha-16|0;Ha=e;H[e+12>>2]=b;b=cj(a,H[a+144>>2],e+12|0,c,d,!I[a+468|0]);a:{if(b){break a}b=H[e+12>>2];if(!b){b=0;break a}if(H[a+460>>2]){H[a+264>>2]=46;b=bj(a,b,c,d);break a}H[a+264>>2]=42;b=Gg(a,b,c,d)}Ha=e+16|0;return b|0}function _q(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=17;a:{b:{c:{d:{switch(b-15|0){case 0:break a;case 3:break d;default:break c}}b=69;if(La[H[e+24>>2]](e,c,d,34598)|0){break b}if(!(La[H[e+24>>2]](e,c,d,34605)|0)){break c}b=70;break b}f=-1;b=25}H[a>>2]=b}return f|0}function Ik(a,b,c){var d=0,e=0,f=0,g=O(0);d=Ha-32|0;Ha=d;e=a+16|0;Ya(b,e);H[d+24>>2]=0;H[d+28>>2]=1065353216;H[d+16>>2]=0;H[d+20>>2]=0;f=d+16|0;Ab(f,a,O(c*L[a+12>>2]),1);Xb(f,b);xb(b,e);c=L[a+40>>2];if(c>O(0)){e=a+28|0;g=yc(b,e);a=d+4|0;Ya(a,e);wb(a,O(g*c));lb(b,a)}Ha=d+32|0}function ye(a,b){F[a|0]=b;zb(a+4|0,0,48);H[a+64>>2]=0;H[a+68>>2]=0;H[a+60>>2]=1065353216;H[a+52>>2]=1065353216;H[a+56>>2]=0;H[a+72>>2]=0;H[a+76>>2]=0;H[a+80>>2]=0;H[a+84>>2]=0;H[a+92>>2]=0;H[a+96>>2]=0;H[a+88>>2]=1065353216;H[a+100>>2]=0;H[a+104>>2]=0;H[a+108>>2]=0;return a}function Fe(a,b,c){var d=0,e=0,f=0;a:{if(!b){d=a;e=b;break a}while(1){d=jy(a,b,10);e=Ka;a=gy(d,e,246,0)+a|0;c=c-1|0;F[c|0]=a|48;f=b>>>0>9;a=d;b=e;if(f){continue}break}}if(d|e){while(1){c=c-1|0;a=(d>>>0)/10|0;F[c|0]=N(a,246)+d|48;b=d>>>0>9;d=a;if(b){continue}break}}return c}function Il(a,b){var c=0;c=H[a+12>>2];if((c|0)>=0){zl(a,c);if(H[a+12>>2]<=(c|0)){H[a+12>>2]=c+1}a=H[a>>2]+N(c,28)|0;c=H[b+4>>2];H[a>>2]=H[b>>2];H[a+4>>2]=c;H[a+24>>2]=H[b+24>>2];c=H[b+20>>2];H[a+16>>2]=H[b+16>>2];H[a+20>>2]=c;c=H[b+12>>2];H[a+8>>2]=H[b+8>>2];H[a+12>>2]=c}}function uv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=O(0),f=O(0),g=O(0),h=O(0);d=Ha+-64|0;Ha=d;if(b){e=L[a+8>>2];f=L[a+12>>2];g=L[a+16>>2];h=L[a+20>>2];H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+56>>3]=h;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,9005,d)}Ha=d- -64|0}function $x(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=15;g=48;h=11;a:{b:{c:{d:{switch(b-15|0){case 0:break a;case 2:break b;case 3:break d;default:break c}}if(!(La[H[e+24>>2]](e,c,d,34644)|0)){break c}f=11;g=88;break b}f=-1;g=25}H[a>>2]=g;h=f}return h|0}function Vm(a){var b=0,c=0,d=0,e=0;a:{c=H[a+4>>2];if(!c){break a}b=H[a>>2];e=H[a+8>>2];while(1){if(H[c+12>>2]<=(b|0)){break a}d=H[H[c>>2]+(b<<2)>>2];b=b+1|0;H[a>>2]=b;if(Hb(e,H[d>>2])){continue}break}H[a+16>>2]=d;H[a+12>>2]=H[a+12>>2]+1;return 1}H[a+16>>2]=0;return 0}function Qp(a){var b=0,c=0,d=0,e=0;b=H[a+16>>2];c=H[b+12>>2];if((c|0)<=H[a+24>>2]){d=H[a+28>>2];a:{if((d|0)>=0){Mp(b,d,c);b=H[a+28>>2];H[a+28>>2]=0;e=H[a+24>>2]-b|0;break a}H[b+12>>2]=0}H[a+24>>2]=e;b=H[a+16>>2];c=H[b+8>>2];if((c|0)<=H[b+12>>2]){Xj(b,c+999|0)}Yp(a)}}function Os(a,b){a=a|0;b=b|0;gb(b,G[29370]);b=Za(Za(Za(b,12743),7350),30320);La[H[H[a>>2]+84>>2]](a,b,0);gb(b,G[29370]);b=Za(b,21503);G[29370]=J[29370]+1;a=H[a+696>>2];La[H[H[a>>2]+80>>2]](a,b);a=J[29370]-1|0;G[29370]=a;gb(b,a<<16>>16);Za(Za(Za(b,13001),7350),21503)}function Ei(a,b,c){var d=0,e=0,f=0;d=a*a;f=d*(d*d)*(d*1.58969099521155e-10+-2.5050760253406863e-8)+(d*(d*27557313707070068e-22+-.0001984126982985795)+.00833333333332249);e=a*d;if(!c){return e*(d*f+-.16666666666666632)+a}return a-(d*(b*.5-e*f)-b+e*.16666666666666632)}function ue(a,b){var c=0,d=0,e=0,f=0;c=Ha-16|0;Ha=c;a:{if(!b){b=0;break a}d=b;b=Q(b);lc(c,d,0,0,0,112-(b^31)|0);d=0+H[c+8>>2]|0;b=(H[c+12>>2]^65536)+(16414-b<<16)|0;f=e>>>0>d>>>0?b+1|0:b;e=H[c+4>>2];b=H[c>>2]}H[a>>2]=b;H[a+4>>2]=e;H[a+8>>2]=d;H[a+12>>2]=f;Ha=c+16|0}function tf(a,b,c,d){var e=0;e=Ha-16|0;Ha=e;H[e+12>>2]=c;a:{b:{if(!H[a+12>>2]){if(!Fb(a)){break b}}c=a+12|0;while(1){c:{La[H[b+56>>2]](b,e+12|0,d,c,H[a+8>>2]);if(H[e+12>>2]==(d|0)){break c}if(Fb(a)){continue}break b}break}a=H[a+16>>2];break a}a=0}Ha=e+16|0;return a}function ju(a,b){a=a|0;b=O(b);var c=0,d=0,e=O(0),f=O(0),g=O(0);e=O(b+O(-1));while(1){c=H[a+24>>2];if(H[c+12>>2]<=(d|0)){lh(a,b)}else{c=H[H[c>>2]+(d<<2)>>2];f=L[c+4>>2];g=L[a+4>>2];La[H[H[c>>2]+28>>2]](c,b);La[H[H[c>>2]+36>>2]](c,O(e*O(f-g)));d=d+1|0;continue}break}}function bs(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;b=md(Xa(536),a);H[b>>2]=33132;jb(b+4|0,a+4|0,524);d=H[a+532>>2];c=H[a+528>>2];H[b+528>>2]=c;H[b+532>>2]=d;e=b,f=La[H[H[c>>2]+8>>2]](c)|0,H[e+528>>2]=f;a=H[a+532>>2];e=b,f=La[H[H[a>>2]+8>>2]](a)|0,H[e+532>>2]=f;return b|0}function Tt(a,b){a=a|0;b=O(b);var c=O(0);if(b<O(0)){H[a+12>>2]=-1082130432;H[a+16>>2]=-1082130432;H[a+4>>2]=0;H[a+8>>2]=0;return}c=L[a+4>>2];L[a+4>>2]=b;b=O(b-c);L[a+8>>2]=b+L[a+8>>2];c=L[a+12>>2];if(c>=O(0)){L[a+12>>2]=b+c}c=L[a+16>>2];if(c>=O(0)){L[a+16>>2]=b+c}}function ho(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;F[a+60|0]=0;a:while(1){b:{c=0;if((d|0)==5){break b}while(1)if((c|0)==3){d=d+1|0;continue a}else{e=c<<2;f=N(d,12);g=H[e+(f+b|0)>>2];h=ef(H[g+4>>2]);ci(h,g);H[(a+f|0)+e>>2]=h;c=c+1|0;continue}}break}F[a+60|0]=1;return a}function Ze(a,b,c){var d=0,e=0,f=0,g=0;if(!I[a|0]){F[a|0]=b}b=I[a+1|0]|I[a+2|0]<<8;d=b&28672;e=b&15;f=b&112;g=b&3968;b=b<<16>>16;if(!(!(!e|!f|(!g|!d))&(b|0)<0)){b=(e?0:c&15)|(f?0:c&112)|(g?0:c&3968)|(d?0:c&28672)|((b|0)>=0?c&32768:0)|b;F[a+1|0]=b;F[a+2|0]=b>>>8}}function qk(a){var b=0,c=0,d=0,e=O(0),f=0,g=0;if(a){f=a+80|0;c=1;while(1){if((c|0)==5){a=H[a+28>>2]==4|H[a>>2]-7>>>0<6|b}else{g=b;d=1<<c;b=(c<<4)+f|0;e=L[b>>2];b=g|(e>O(2)?O(O(e+L[b+4>>2])+L[b+8>>2])>O(6)?0:d:d);c=c+1|0;continue}break}}else{a=0}return a<<16>>16}function Gl(a,b,c){var d=0,e=0;d=(c|0)>0?c:0;e=N(b,28);b=0;while(1){if((b|0)!=(d|0)){c=(H[a>>2]+e|0)+N(b,28)|0;H[c+20>>2]=1065353216;H[c+24>>2]=1065353216;H[c+12>>2]=-1082130432;H[c+16>>2]=1065353216;H[c+8>>2]=0;G[c+4>>1]=65535;H[c>>2]=0;b=b+1|0;continue}break}}function Zf(a,b,c,d,e,f){var g=O(0),h=O(0);cc(H[a+488>>2],c,L[e>>2],O(L[e+4>>2]+L[f+4>>2]),O(L[e+8>>2]+L[f+8>>2]));g=O(+L[f+4>>2]*.75+ +L[e+4>>2]);h=O(+L[f+8>>2]*.75+ +L[e+8>>2]);cc(H[a+488>>2],b,O(L[e>>2]+L[f>>2]),g,h);cc(H[a+488>>2],d,O(L[e>>2]-L[f>>2]),g,h)}function en(a,b){var c=0,d=0,e=0;d=Ha-16|0;Ha=d;F[d+15|0]=b;c=H[a+16>>2];a:{if(!c){if(fi(a)){break a}c=H[a+16>>2]}e=c;c=H[a+20>>2];if(!((e|0)==(c|0)|H[a+80>>2]==(b&255))){H[a+20>>2]=c+1;F[c|0]=b;break a}if((La[H[a+36>>2]](a,d+15|0,1)|0)!=1){break a}}Ha=d+16|0}function Tf(a,b){var c=0,d=0;c=H[11417];b=O(b*O(c|0));a:{if(O(P(b))<O(2147483648)){d=~~b;break a}d=-2147483648}if((d|0)<0){return L[a>>2]}c=c-1|0;if((c|0)<=(d|0)){return L[(c<<2)+a>>2]}a=(d<<2)+a|0;b=O(b-O(d>>>0));return O(O(L[a>>2]*O(O(1)-b))+O(b*L[a+4>>2]))}function Xi(a){var b=0,c=0;b=H[a+72>>2];H[a+72>>2]=b-1|b;if(H[a+20>>2]!=H[a+28>>2]){La[H[a+36>>2]](a,0,0)|0}H[a+28>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;b=H[a>>2];if(b&4){H[a>>2]=b|32;return-1}c=H[a+44>>2]+H[a+48>>2]|0;H[a+8>>2]=c;H[a+4>>2]=c;return b<<27>>31}function Ji(a,b,c){var d=0;d=H[a+36>>2];if(!d){H[a+24>>2]=c;H[a+16>>2]=b;H[a+36>>2]=1;H[a+20>>2]=H[a+56>>2];return}a:{if(!(H[a+20>>2]!=H[a+56>>2]|H[a+16>>2]!=(b|0))){if(H[a+24>>2]!=2){break a}H[a+24>>2]=c;return}F[a+54|0]=1;H[a+24>>2]=2;H[a+36>>2]=d+1}}function dt(a){a=a|0;var b=0,c=0;b=md(Xa(552),a);H[b>>2]=32652;jb(b+4|0,a+4|0,524);c=H[a+548>>2];H[b+544>>2]=H[a+544>>2];H[b+548>>2]=c;c=H[a+540>>2];H[b+536>>2]=H[a+536>>2];H[b+540>>2]=c;c=H[a+532>>2];H[b+528>>2]=H[a+528>>2];H[b+532>>2]=c;return b|0}function oo(a,b,c){var d=0,e=O(0),f=O(0),g=O(0),h=O(0);d=Ha+-64|0;Ha=d;if(b){e=L[a>>2];f=L[a+4>>2];g=L[a+8>>2];h=L[a+12>>2];H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+56>>3]=h;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,9005,d)}Ha=d- -64|0}function lm(a,b){var c=0;a:{c=H[a+28>>2];if(c){if(pc(I[c+4|0],I[c+5|0]|I[c+6|0]<<8)){c=H[a+32>>2];if(c){Rf(c,b+112|0);if(!H[a+28>>2]){break a}}om(a,b+112|0,0);Rf(H[a+28>>2],b);return}Rf(c,b)}if(!H[a+32>>2]){break a}om(a,b,1);Rf(H[a+32>>2],b+112|0)}}function pj(a,b){var c=0,d=0,e=0;a:{while(1){b:{d=I[b|0];c=I[a|0];b=b+1|0;a=a+1|0;c=((c-97&255)>>>0<26?c-32|0:c)&255;switch(((c|0)!=(((d-97&255)>>>0<26?d-32|0:d)&255)?1:!c<<1)-1|0){case 0:break a;case 1:break b;default:continue}}break}e=1}return e}function cq(a){var b=0,c=0,d=0,e=0,f=0;d=H[a>>2];b=F[d|0]-48|0;if(b>>>0>9){return 0}while(1){e=-1;if(c>>>0<=214748364){c=N(c,10);e=(c^2147483647)>>>0<b>>>0?-1:c+b|0}b=d+1|0;H[a>>2]=b;f=F[d+1|0];c=e;d=b;b=f-48|0;if(b>>>0<10){continue}break}return c}function _p(a,b){var c=0,d=0,e=0;A(+a);d=v(1)|0;e=v(0)|0;c=d>>>20&2047;if((c|0)!=2047){if(!c){if(a==0){c=0}else{a=_p(a*0x10000000000000000,b);c=H[b>>2]+-64|0}H[b>>2]=c;return a}H[b>>2]=c-1022;x(0,e|0);x(1,d&-2146435073|1071644672);a=+z()}return a}function sm(a,b){var c=0,d=0,e=0;c=I[b+232|0];e=H[b>>2];d=H[H[14022]+(e<<2)>>2];H[a>>2]=d;c=d>>>8&16777200|(c?1:2);F[a+1|0]=c;F[a+2|0]=c>>>8;if((d&255)!=1){b=J[b+52>>1];if(!b){b=J[N(e,160)+54152>>1]}b=b<<7&3968|c&61555;F[a+1|0]=b;F[a+2|0]=b>>>8}}function Sx(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=a+72|0;a=b;while(1){d=I[I[a|0]+e|0];a:{if(!(d>>>0>29|!(1<<d&792723456))){c=1;break a}c=2;b:{switch(d-5|0){case 2:c=4;break a;default:return a-b|0;case 0:break a;case 1:break b}}c=3}a=a+c|0;continue}}function pg(a,b,c,d,e){a:{if(b){if(c){No(a+92|0,d,e);b=128;break a}Mo(a+60|0,O(O(1)-d),e);b=128;break a}b:{if(c){No(a+108|0,O(O(1)-d),e);break b}Mo(a+76|0,d,e)}b=132}L[e+8>>2]=L[b+a>>2]+L[e+8>>2];L[e+4>>2]=L[a+28>>2];L[e>>2]=L[a+124>>2]+L[e>>2]}function Rj(a,b,c){var d=0,e=0;d=Ha-32|0;Ha=d;H[d+28>>2]=0;H[d+20>>2]=0;H[d+24>>2]=0;H[d+16>>2]=0;H[d+12>>2]=0;e=H[H[a+72>>2]>>2];H[d+4>>2]=c;H[d+8>>2]=c;c=d+20|0;rc(e,0,d+4|0,c,d+16|0,d+12|0);e=H[d+16>>2];if(e){Ih(H[a+72>>2],b,0,e,c)}Ha=d+32|0}function Sk(a,b){var c=0,d=0,e=0;c=Ha-48|0;Ha=c;H[c+44>>2]=0;H[c+36>>2]=0;H[c+40>>2]=0;d=a;a=c+36|0;Uk(d,a);H[c+32>>2]=0;H[c+24>>2]=0;H[c+28>>2]=0;d=c+24|0;Uk(b,d);H[c+20>>2]=0;H[c+12>>2]=0;H[c+16>>2]=0;e=c+12|0;Nb(e,a,d);lb(b+4|0,e);Ha=c+48|0}function Bh(a,b){var c=0,d=0,e=0;d=H[14678]&16777215;if((d|0)==(H[a+4>>2]&16777215)){e=H[b+8>>2];c=a+4|0;H[c>>2]=H[b+4>>2];H[c+4>>2]=e;H[c+8>>2]=H[b+12>>2]}if((d|0)==(H[a+16>>2]&16777215)){c=a+16|0;G[c>>1]=J[b+16>>1];F[c+2|0]=I[b+18|0]}Dh(a,b)}function ve(a,b,c,d,e){var f=0;f=Ha+-64|0;Ha=f;if(a){H[f+60>>2]=d;H[f+56>>2]=d;H[f+44>>2]=e;H[f+40>>2]=d;M[f+32>>3]=c;M[f+48>>3]=O(c/O(5));H[f+24>>2]=e;H[f+20>>2]=d;H[f+16>>2]=d;pb(a,15463,f+16|0);tb(b,a,e);H[f>>2]=d;eb(a,18826,f)}Ha=f- -64|0}function ng(a,b,c){var d=0,e=O(0),f=O(0),g=O(0),h=O(0);d=Ha+-64|0;Ha=d;e=L[a>>2];f=L[a+4>>2];g=L[a+8>>2];h=L[a+12>>2];H[d+48>>2]=c;H[d+32>>2]=c;H[d+16>>2]=c;M[d+56>>3]=h;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,9005,d);Ha=d- -64|0}function np(a,b){var c=0,d=0,e=0,f=0;c=a*a;d=c*.5;e=1-d;f=1-e-d;d=c*c;return e+(f+(c*(c*(c*(c*2480158728947673e-20+-.001388888888887411)+.0416666666666666)+d*d*(c*(c*-11359647557788195e-27+2.087572321298175e-9)+-2.7557314351390663e-7))-a*b))}function ki(a){var b=0,c=0,d=0,e=0;a:{if(I[a+60|0]!=1){break a}b:while(1){b=0;if((c|0)==5){break a}while(1){if((b|0)==3){c=c+1|0;continue b}e=(N(c,12)+a|0)+(b<<2)|0;d=H[e>>2];if(d){La[H[H[d>>2]+4>>2]](d);H[e>>2]=0}b=b+1|0;continue}}}return a}function Ri(a,b){var c=0,d=0,e=0,f=0;d=a;c=Yb(b);e=Ha-16|0;Ha=e;a:{if(c>>>0<2147483640){b:{if(Si(c)){qf(d,c);break b}of(e+8|0,pf(c)+1|0);f=H[e+8>>2];Yd(d,f);nf(d,H[e+12>>2]);_d(d,c);d=f}Zd(ae(d,b,c)+c|0,0);Ha=e+16|0;break a}Re();B()}return a}function Id(a,b){var c=0,d=O(0),e=O(0),f=O(0),g=O(0);c=Ha+-64|0;Ha=c;d=L[a>>2];e=L[a+4>>2];f=L[a+8>>2];g=L[a+12>>2];H[c+48>>2]=6;H[c+32>>2]=6;H[c+16>>2]=6;M[c+56>>3]=g;M[c+40>>3]=f;M[c+24>>3]=e;H[c>>2]=6;M[c+8>>3]=d;pb(b,9004,c);Ha=c- -64|0}function jd(a,b,c){var d=0,e=0,f=0,g=0;H[a+112>>2]=b;H[a+116>>2]=c;f=H[a+4>>2];e=H[a+44>>2]-f|0;H[a+120>>2]=e;H[a+124>>2]=e>>31;e=a;a=H[a+8>>2];d=a-f|0;g=b>>>0>=d>>>0;d=d>>31;if(!(!(b|c)|(g&(d|0)<=(c|0)|(c|0)>(d|0)))){a=b+f|0}H[e+104>>2]=a}function ej(a){var b=0,c=0;while(1){a:{b=I[a|0];if(b){if((b|0)!=13){break a}c=a;while(1){b:{if((b|0)==13){F[c|0]=10;a=I[a+1|0]==10?a+2|0:a+1|0;break b}F[c|0]=b;a=a+1|0}c=c+1|0;b=I[a|0];if(b){continue}break}F[c|0]=0}return}a=a+1|0;continue}}function Wq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=17;a:{b:{c:{switch(b-15|0){default:if((b|0)!=27){break b}H[a+8>>2]=17;H[a>>2]=66;return 19;case 0:break a;case 1:break b;case 2:break c}}H[a>>2]=48;return 20}H[a>>2]=25;c=-1}return c|0}function th(a,b,c){gb(a,G[29370]+1|0);a=Za(Za(a,c),15222);a:{if(!zc(b)){break a}H[(a+H[H[a>>2]-12>>2]|0)+8>>2]=2;c=Jc(ub(Jc(ub(Jc(a,L[b>>2]),32),L[b+4>>2]),32),L[b+8>>2]);if(L[b+12>>2]==O(-100)){break a}Jc(ub(c,32),L[b+12>>2])}Za(a,30283)}function Pd(a){var b=0,c=0,d=0,e=0;c=Ha-16|0;Ha=c;a:{if(!a){break a}b=I[a|0];if(!b){break a}while(1){if(!b){e=d;break a}b=b-49|0;if((b&255)>>>0<5){d=1<<b|d;b=I[a+1|0];a=a+1|0;continue}break}H[c>>2]=a;Wa(28605,c)}Ha=c+16|0;return e<<16>>16}function ok(a){a=a|0;var b=0;H[a>>2]=32748;b=H[a+696>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+696>>2]=0}b=H[a+700>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+700>>2]=0}H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;return a|0}function Zj(a){a=a|0;var b=0;H[a>>2]=33132;b=H[a+528>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+528>>2]=0}b=H[a+532>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+532>>2]=0}H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;return a|0}function lj(a,b,c,d,e,f){a=fj(a,b,c,d,e,f);if(!a){d=H[f+12>>2];a:{if((d|0)==H[f+16>>2]|c){break a}a=d-1|0;if(I[a|0]!=32){break a}H[f+12>>2]=a;d=a}if(H[f+8>>2]==(d|0)){if(!Fb(f)){return 1}d=H[f+12>>2]}H[f+12>>2]=d+1;F[d|0]=0;a=0}return a}function xe(a,b){var c=0,d=0,e=0;c=Ha-48|0;Ha=c;rb(c,b);b=H[a+8>>2];if(b){e=b+80|0;rb(c,c);rb(c+32|0,c);b=0;while(1){if((b|0)!=4){d=b<<2;L[d+(c+16|0)>>2]=L[e+d>>2];b=b+1|0;continue}break}Fo(c,c+32|0,c+16|0)}tc(a+52|0,c);En(a);Ha=c+48|0}function ar(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=48;d=33;a:{b:{c:{d:{switch(b-15|0){default:if((b|0)!=41){break c}break;case 0:break a;case 2:break b;case 1:break c;case 3:break d}}d=22;c=67;break b}d=-1;c=25}H[a>>2]=c}return d|0}function Fg(a,b,c,d){var e=0,f=0;e=H[a+340>>2];c=Tb(e+80|0,b,c,d);a:{if(!c){break a}b=Fc(e+20|0,c,24);if(!b){break a}b:{if((c|0)!=H[b>>2]){H[e+92>>2]=H[e+96>>2];break b}H[e+96>>2]=H[e+92>>2];if(!gj(H[a+340>>2],b)){break a}}f=b}return f}function rk(a,b,c){var d=O(0),e=O(0),f=O(0);d=L[b>>2];L[a>>2]=d;e=L[b+4>>2];L[a+4>>2]=e;f=L[b+8>>2];L[a+8>>2]=f;if(c&2){f=O(-f);L[a+8>>2]=f;e=O(-e);L[a+4>>2]=e}if(c&4){d=O(-d);L[a>>2]=d;L[a+8>>2]=-f}if(c&8){L[a+4>>2]=-e;L[a>>2]=-d}}function zd(a,b){var c=0;a:{b:{c=b&16777215;b=H[a>>2]+((c>>>0)%K[a+4>>2]<<3)|0;if(G[b+4>>1]<=0){break b}while(1){b=H[b>>2];if(!b){break b}if((H[b>>2]&16777215)!=(c|0)){b=b+8|0;continue}break}a=b+4|0;break a}a=a+20|0}return H[a>>2]}function Qo(a,b,c,d,e,f){var g=O(0),h=O(0),i=O(0),j=O(0);i=O(b*d);g=O(a-c);h=O(O(i-g)-g);a:{if(h<=O(0)){b=O(g/O(b*b));break a}j=a;a=O(O(O(i*c)-O(g*O(a+c)))/h);b=O(O(j-a)*O(W(O(b/O(d*O(c-a))))))}L[e>>2]=a;L[f>>2]=b;return!(h<=O(0))}function ln(a,b){H[a+28>>2]=0;H[a+32>>2]=0;H[a+4>>2]=-1;H[a>>2]=b;H[a+36>>2]=0;H[a+40>>2]=0;H[a+44>>2]=0;H[a+48>>2]=0;G[a+12>>1]=J[29356];F[a+14|0]=I[58714];H[a+24>>2]=0;H[a+8>>2]=0;H[a+52>>2]=0;H[a+16>>2]=0;H[a+20>>2]=0;return a}function Af(a,b,c){a=a|0;b=O(b);c=c|0;var d=O(0),e=O(0);d=L[a+40>>2];a:{if(c){if(d==O(0)){H[a+44>>2]=0;break a}L[a+44>>2]=O(b/d)*L[a+44>>2];break a}e=L[a+44>>2];if(O(d-e)>b){H[a+44>>2]=0;break a}L[a+44>>2]=O(b-d)+e}L[a+40>>2]=b}function dr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=3;a:{b:{c:{d:{switch(b-15|0){default:if((b|0)!=25){break c}c=7;b=48;break b;case 0:break a;case 1:break c;case 2:break d}}c=8;b=49;break b}c=-1;b=25}H[a>>2]=b}return c|0}function ts(a,b,c){a=a|0;b=O(b);c=c|0;var d=0,e=0,f=0;Af(a,b,c);d=G[a+540>>1];d=(d|0)>0?d:0;b=O(L[a+40>>2]-L[a+44>>2]);while(1){if((d|0)!=(e|0)){f=H[H[a+528>>2]+(e<<2)>>2];La[H[H[f>>2]+64>>2]](f,b,c);e=e+1|0;continue}break}}function Al(a){var b=0,c=0;a:{b:{c=H[13223];b=H[c>>2]+((de(a)>>>0)%K[c+4>>2]<<3)|0;if(G[b+4>>1]<=0){break b}while(1){b=H[b>>2];if(!b){break b}if(!Kg(a,H[b>>2])){b=b+8|0;continue}break}a=b+4|0;break a}a=c+20|0}return H[a>>2]}function ir(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=58;d=11;a:{b:{c:{switch(b-18|0){case 0:d=9;c=59;break b;default:if((b|0)==15){break a}break;case 4:break b;case 1:case 2:case 3:break c}}d=-1;c=25}H[a>>2]=c}return d|0}function Mq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=31;e=82;d=33;a:{b:{c:{switch(b-15|0){default:if((b|0)==41){break b}break;case 0:break a;case 3:case 4:break b;case 1:case 2:break c}}c=-1;e=25}H[a>>2]=e;d=c}return d|0}function Jo(a,b,c,d,e,f){var g=O(0);a=O(c/a);g=O(a*a);a=O(d*g);g=O(O(O(1)/O(b*b))+g);b=O(O(a*a)-O(g*O(O(a*d)+O(-1))));a:{if(b>=O(0)){a=O(O(a+O(W(b)))/g);L[f>>2]=a;L[e>>2]=c*O(a-d);break a}H[e>>2]=0;H[f>>2]=0}return b>=O(0)}function Eg(a,b,c,d){var e=0,f=0;a:{if(!H[a+68>>2]){if(!H[a+80>>2]){break a}Rb(a,b,c,d);return 1}e=a+400|0;f=b;b=H[b+64>>2];b=Tb(e,f,(b<<2)+c|0,N(b,-3)+d|0);if(!b){return 0}ej(b);La[H[a+68>>2]](H[a+4>>2],b);Oc(e)}return 1}function wm(a,b,c,d,e){var f=0,g=0,h=O(0);f=Ha-16|0;Ha=f;d=d^1;_e(f+12|0,b,c,0,d,e);F[a+2|0]=I[f+14|0];G[a>>1]=J[f+12>>1];_e(f+8|0,b,c,1,d,e);F[a+6|0]=I[f+10|0];G[a+4>>1]=J[f+8>>1];g=a,h=Sf(b,7006),L[g+8>>2]=h;Ha=f+16|0}function Rg(a,b){var c=0,d=0;while(1){c=H[a+12>>2];if((c|0)==H[a+8>>2]){if(!Fb(a)){return 0}c=H[a+12>>2]}d=I[b|0];H[a+12>>2]=c+1;F[c|0]=d;c=I[b|0];b=b+1|0;if(c){continue}break}b=H[a+16>>2];H[a+16>>2]=H[a+12>>2];return b}function Ye(a,b){var c=0;gb(b,G[29370]);b=Za(Za(Za(b,12743),8768),30320);pl(a,b);c=H[a+220>>2];a:{if(!c){break a}pl(c,b);if(L[a+224>>2]==O(.5)){break a}Za(Jc(Za(b,15057),L[a+224>>2]),15223)}gb(b,G[29370]);Za(b,21445)}function gy(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;e=c>>>16|0;f=a>>>16|0;j=N(e,f);g=c&65535;h=a&65535;i=N(g,h);f=(i>>>16|0)+N(f,g)|0;e=(f&65535)+N(e,h)|0;Ka=(N(b,c)+j|0)+N(a,d)+(f>>>16)+(e>>>16)|0;return i&65535|e<<16}function Sm(a,b,c){var d=0,e=0;e=a;a:{b:{a=H[b>>2]+((de(c)>>>0)%K[b+4>>2]<<3)|0;if(G[a+4>>1]<=0){break b}while(1){a=H[a>>2];if(!a){break b}d=a+4|0;if(Kg(c,H[a>>2])){break a}a=a+8|0;continue}}d=b+20|0}H[e>>2]=H[d>>2]}function Bx(a,b){a=a|0;b=b|0;var c=0;a=1;a:{if(F[b+3|0]>-65|F[b+2|0]>-65){break a}c=I[b+1|0];b=I[b|0];if((b|0)==240){return(c- -64&255)>>>0<208|0}if(c<<24>>24>=0){break a}a=((b|0)==244?143:191)>>>0<c>>>0}return a|0}function Bj(a){a=a|0;var b=0;H[a>>2]=34052;b=H[a+20>>2];if(b){Va(Gc(b));H[a+20>>2]=0}b=H[a+28>>2];a:{if(!b){break a}Sg(b);b=H[a+28>>2];if(!b){break a}nb(b);Va(b);H[a+28>>2]=0}b=H[a+24>>2];if(b){yj(b)}return Cj(a)|0}function xk(a,b,c){var d=0,e=0;a=jb(b,a,72);b=c<<4;d=c<<5;if((b^d)<<24>>24<0){L[a>>2]=-L[a>>2]}e=b;b=c<<6;if((e^b)<<24>>24<0){L[a+4>>2]=-L[a+4>>2]}if((b^d)<<24>>24<0){L[a+8>>2]=-L[a+8>>2]}Oe(c,a+16|0);Oe(c,a+48|0)}function pr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=3;d=4;e=47;a:{b:{c:{switch(b-15|0){default:if((b|0)==41){break b}break;case 0:break a;case 3:break b;case 1:case 2:break c}}d=-1;e=25}H[a>>2]=e;c=d}return c|0}function Ce(a,b){var c=0,d=0,e=0;c=a*a;d=a*c;e=c*c;a=d*e*(e*(c*.009465647849436732+.002974357433599673)+(c*.024528318116654728+.05338123784456704))+(d*(c*.13339200271297674+.3333313950307914)+a);return O(b?-1/a:a)}function rn(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;H[a+12>>2]=0;H[a+4>>2]=10;H[a+8>>2]=b;d=ib(N(b,12));H[a>>2]=d;if(!d){H[c>>2]=b;Wa(24301,c);H[a+8>>2]=0;a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}qn(a,0,b);Ha=c+16|0;return a}function Od(a,b,c,d){a:{if(!oc(d)){break a}b:{if(b){ub(a,32);break b}gb(a,G[29370]+1|0)}a=Za(Za(a,c),15222);Te(a,L[d+4>>2],117,100);Te(a,L[d+8>>2],111,105);Te(a,L[d>>2],108,114);a=ub(a,34);if(b){break a}ub(a,10)}}function Vf(a,b,c){var d=0;if(c){gb(a,G[29370]+1|0);a=Za(Za(a,b),15222);a:{if((c|0)>=0){while(1){if(!c){break a}if(c&1){ub(a,d+49<<24>>24)}d=d+1|0;c=c>>>1|0;continue}}ub(bh(Za(a,15608),c),41)}Za(ub(a,34),30320)}}function fb(a,b){var c=0;a:{b:{c=H[a>>2]+((de(b)>>>0)%K[a+4>>2]<<3)|0;if(G[c+4>>1]<=0){break b}while(1){c=H[c>>2];if(!c){break b}if(!Kg(b,H[c>>2])){c=c+8|0;continue}break}a=c+4|0;break a}a=a+20|0}return H[a>>2]}function zq(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;H[a+12>>2]=0;H[a+4>>2]=10;H[a+8>>2]=b;d=ib(b<<2);H[a>>2]=d;if(!d){H[c>>2]=b;Wa(24248,c);H[a+8>>2]=0;a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}ud(a,0,b);Ha=c+16|0;return a}function on(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;H[a+12>>2]=0;H[a+4>>2]=10;H[a+8>>2]=b;d=ib(b<<1);H[a>>2]=d;if(!d){H[c>>2]=b;Wa(24196,c);H[a+8>>2]=0;a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}nn(a,0,b);Ha=c+16|0;return a}function Th(a,b,c){var d=0;d=Ha-32|0;Ha=d;a:{if(!a){break a}a=Og(a,b);if(!a){break a}H[d+16>>2]=d+28;if((wc(a,10622,d+16|0)|0)==1){c=H[d+28>>2];break a}db();H[d+4>>2]=a;H[d>>2]=b;Wa(28722,d)}Ha=d+32|0;return c}function Kn(a){var b=0,c=0;b=Ha-16|0;Ha=b;H[a+12>>2]=0;H[a+4>>2]=10;H[a+8>>2]=10;c=ib(40);H[a>>2]=c;if(c){ud(a,0,10);Ha=b+16|0;return a}H[b>>2]=10;Wa(24248,b);H[a+8>>2]=0;a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}function Mf(a,b){var c=0;a:{b:{c=H[a>>2]+((b>>>0)%K[a+4>>2]<<3)|0;if(G[c+4>>1]<=0){break b}while(1){c=H[c>>2];if(!c){break b}if(H[c>>2]!=(b|0)){c=c+8|0;continue}break}a=c+4|0;break a}a=a+20|0}return H[a>>2]}function hm(a){var b=0,c=0,d=O(0),e=0;a:{b=H[a+12>>2];if((b|0)<=0){break a}e=H[a>>2];a=0;while(1){if((a|0)==(b|0)){break a}c=H[H[(a<<2)+e>>2]+44>>2];d=O(d+L[(c?c+40|0:53768)>>2]);a=a+1|0;continue}}return d}function xs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=G[a+540>>1];d=(d|0)>0?d:0;while(1){if((d|0)==(e|0)){$b(a+284|0,b)}else{f=H[H[a+528>>2]+(e<<2)>>2];La[H[H[f>>2]+32>>2]](f,b,c);e=e+1|0;continue}break}}function gl(a){a=a|0;var b=0,c=0,d=0;c=Ha-16|0;Ha=c;b=H[a+76>>2];if((b|0)==-1){d=c+12|0;Ff(d,H[a+28>>2]);b=Rk(H[c+12>>2],60404);b=La[H[H[b>>2]+28>>2]](b,32)|0;Md(d);H[a+76>>2]=b}Ha=c+16|0;return b<<24>>24}function Oc(a){var b=0,c=0,d=0;b=H[a>>2];a:{c=H[a+4>>2];if(!c){H[a+4>>2]=b;break a}while(1){if(!b){break a}d=H[b>>2];H[b>>2]=c;H[a+4>>2]=b;c=b;b=d;continue}}H[a+16>>2]=0;H[a>>2]=0;H[a+8>>2]=0;H[a+12>>2]=0}function tw(a){a=a|0;var b=0;a:{b:{if(!a){break b}b=tg(a);if(xp(b,-1)|I[b+13|0]){break b}b=H[b+8>>2];if(b){H[12729]=0;$(b|0,a|0)|0;b=H[12729];H[12729]=0;if((b|0)==1){break a}}Hp(a)}return}_(0)|0;$d();B()}function kf(a,b,c){var d=O(0),e=O(0),f=O(0),g=O(0),h=O(0),i=O(0);d=L[b+8>>2];e=L[c+8>>2];f=L[b>>2];g=L[c+4>>2];h=L[b+4>>2];i=L[c>>2];L[a+8>>2]=O(f*g)-O(h*i);L[a+4>>2]=O(d*i)-O(f*e);L[a>>2]=O(h*e)-O(d*g)}function Bm(a,b){var c=0,d=0;c=H[a+4>>2];d=H[14678];Rh(a,b,0);a:{if((c&16777215)==(d&16777215)){break a}Rh(a+4|0,b,1);if(L[a+8>>2]==O(.5)){break a}gb(b,G[29370]+1|0);Za(Jc(Za(b,15058),L[a+8>>2]),30283)}}function lr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=0;a:{switch(ky(b-11|0,31)|0){case 0:return 55;case 1:return 56;case 9:H[a>>2]=25;return 2;default:H[a>>2]=25;c=-1;break;case 2:break a}}return c|0}function bl(a){H[a+4>>2]=0;H[a+8>>2]=0;H[a+20>>2]=1;H[a+32>>2]=0;H[a+36>>2]=0;H[a+24>>2]=-1;H[a+28>>2]=1065353216;H[a>>2]=32056;G[a+48>>1]=1;H[a+12>>2]=0;H[a+16>>2]=0;H[a+40>>2]=0;H[a+44>>2]=0;return a}function Dm(a,b){a:{switch(b-1|0){case 3:H[a+4>>2]=1;return;case 4:H[a+4>>2]=3;return;case 6:F[a+8|0]=1;return;case 0:case 1:case 2:case 5:case 7:case 8:case 9:case 10:H[a>>2]=b;break;default:break a}}}function yp(a,b,c){var d=0,e=0;d=Lp(a);e=wg(H[a+4>>2],I[a+11|0]);a:{if(d-e>>>0>=c>>>0){if(!c){break a}d=Ee(a);ae(d+e|0,b,c);b=c+e|0;Kp(a,b);Zd(b+d|0,0);return a}zp(a,d,(c-d|0)+e|0,e,e,0,c,b)}return a}function yb(a,b){var c=0,d=0,e=0;a:{if(!b|!a){break a}c=H[a+12>>2];e=(c|0)>0?c:0;c=0;while(1){if((c|0)==(e|0)){d=0;break a}d=H[H[a>>2]+(c<<2)>>2];if(!Hb(b,H[d>>2])){break a}c=c+1|0;continue}}return d}function tb(a,b,c){var d=0,e=O(0),f=O(0),g=O(0);d=Ha-48|0;Ha=d;if(b){e=L[a>>2];f=L[a+4>>2];g=L[a+8>>2];H[d+32>>2]=c;H[d+16>>2]=c;M[d+40>>3]=g;M[d+24>>3]=f;H[d>>2]=c;M[d+8>>3]=e;pb(b,9010,d)}Ha=d+48|0}function nc(a,b,c,d,e){var f=0;f=Ha-256|0;Ha=f;if(!(e&73728|(c|0)<=(d|0))){d=c-d|0;c=d>>>0<256;zb(f,b,c?d:256);if(!c){while(1){fc(a,f,256);d=d-256|0;if(d>>>0>255){continue}break}}fc(a,f,d)}Ha=f+256|0}function Zk(a){var b=0,c=0;c=Ha-16|0;Ha=c;a:{if((a|0)!=45){b=1;if((a|0)==102){break a}b:{if((a|0)!=115){if((a|0)!=109){break b}b=2;break a}b=3;break a}H[c>>2]=a;Wa(20482,c)}b=0}a=b;Ha=c+16|0;return a}function Qd(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;a:{if(!b){$a(14850,a);break a}if((b|0)>=0){while(1){if((b|0)<=0){break a}if(b&1){bb(d+49|0,a)}d=d+1|0;b=b>>>1|0;continue}}H[c>>2]=b;eb(a,14871,c)}Ha=c+16|0}function ze(a,b){var c=0,d=0,e=0,f=0;a:while(1){b:{c=0;if((d|0)==5){break b}while(1)if((c|0)==3){d=d+1|0;continue a}else{e=c<<2;f=N(d,12);ci(H[e+(f+a|0)>>2],H[(b+f|0)+e>>2]);c=c+1|0;continue}}break}}function ct(a,b){a=a|0;b=b|0;H[a+528>>2]=2;H[a+532>>2]=2;a:{b:{b=H[a+8>>2];switch(b-3|0){case 0:case 2:break b;default:break a}}G[a+508>>1]=J[a+508>>1]|128}if((b&-2)==4){G[a+510>>1]=J[a+510>>1]|128}}function up(a,b,c,d,e){var f=0,g=0;g=b&1;a:{if(I[c+55|0]==1){f=b>>8;if(!g){break a}f=Ii(H[d>>2],f);break a}f=b>>8;if(!g){break a}H[c+56>>2]=H[a+4>>2];d=0;f=0}La[H[H[a>>2]+28>>2]](a,c,d+f|0,b&2?e:2)}function uh(a,b){if(b){if(!Lc(a)){$a(14812,b);return}ld(b,11412,L[a>>2]);bb(44,b);ld(b,5887,L[a+4>>2]);bb(44,b);ld(b,8204,L[a+8>>2]);bb(44,b);ld(b,12901,L[a+12>>2]);bb(44,b);ld(b,12856,L[a+16>>2])}}function kk(a){a=a|0;var b=0;H[a>>2]=32844;a:{if(I[a+532|0]==1){b=H[a+528>>2];if(!b){break a}Va(qm(b))}H[a+528>>2]=0}H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;return a|0}function Xg(a,b,c,d){var e=O(0);e=L[a+40>>2];if(e>L[b>>2]){L[b>>2]=e}a:{if(H[a+4>>2]==10){break a}e=L[a+40>>2];if(e>L[c>>2]){L[c>>2]=e;e=L[a+40>>2]}if(!(L[d>>2]<e)|H[a+12>>2]==1){break a}L[d>>2]=e}}function Qq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if((b|0)!=15){a:{if((b|0)!=21){if((b|0)!=36){break a}H[a+8>>2]=39;H[a>>2]=66;return 46}H[a>>2]=75;return 39}H[a>>2]=25;a=-1}else{a=39}return a|0}function Au(a,b,c,d){a=a|0;b=b|0;c=c|0;d=O(d);var e=O(0);e=O(O(1)-d);L[a+44>>2]=O(L[b+44>>2]*e)+O(d*L[c+44>>2]);L[a+48>>2]=O(L[b+48>>2]*e)+O(d*L[c+48>>2]);L[a+52>>2]=O(L[b+52>>2]*e)+O(d*L[c+52>>2])}function Io(a){a=a|0;var b=0,c=0,d=0;H[a>>2]=31808;while(1){b=H[a+8>>2];if(G[a+4>>1]<=(c|0)){if(b){Va(b);H[a+8>>2]=0}return a|0}d=c<<2;b=H[b+d>>2];if(b){Va(b);H[H[a+8>>2]+d>>2]=0}c=c+1|0;continue}}function ae(a,b,c){var d=0,e=0,f=0;e=Ha-16|0;Ha=e;d=Ha-16|0;Ha=d;Ui(d+8|0,b,b+c|0);c=H[d+12>>2];f=H[d+8>>2];b=c-f|0;Ui(d,c,Sp(a,f,b)+b|0);Ui(e+8|0,H[d>>2],H[d+4>>2]);Ha=d+16|0;Ha=e+16|0;return a}function Kh(a){var b=0,c=0;a:{if(I[a+52|0]!=1){break a}b=H[a+56>>2];if(!b){break a}c=H[b+220>>2];if(c){Va(c);H[b+220>>2]=0}c=H[b+236>>2];if(c){Va(ki(c));H[b+236>>2]=0}Va(b);H[a+56>>2]=0}return a}function hu(a){a=a|0;var b=0,c=0,d=0;d=Lf(Xa(28));while(1){b=H[a+24>>2];if((c|0)<H[b+12>>2]){b=H[H[b>>2]+(c<<2)>>2];b=La[H[H[b>>2]+8>>2]](b)|0;Pb(H[d+24>>2],b);c=c+1|0;continue}break}return d|0}function Qs(a,b,c){a=a|0;b=O(b);c=c|0;var d=0,e=O(0),f=O(0);e=L[a+44>>2];f=L[a+40>>2];Af(a,b,c);b=O(O(L[a+40>>2]-L[a+44>>2])/O(f-e));d=H[a+696>>2];if(d){pd(d,b,c)}a=H[a+700>>2];if(a){pd(a,b,c)}}function Pv(a,b){a=a|0;b=O(b);L[a+80>>2]=b;L[a+76>>2]=b;L[a+72>>2]=b;H[a+88>>2]=0;H[a+92>>2]=0;F[a+32|0]=1;H[a+100>>2]=0;H[a+104>>2]=0;H[a+64>>2]=0;H[a+68>>2]=0;H[a+4>>2]=0;L[a+8>>2]=L[a+12>>2]}function Ph(a,b,c,d,e,f){var g=0;g=Ha-16|0;Ha=g;wm(a,H[c+4>>2],d,e,f);a=H[c+8>>2];if(H[a+12>>2]>0){_e(g+12|0,H[H[H[a>>2]>>2]+4>>2],d,0,e,f);F[b+2|0]=I[g+14|0];G[b>>1]=J[g+12>>1];Oh(b)}Ha=g+16|0}function Ov(a,b){a=a|0;b=O(b);La[H[H[a>>2]+16>>2]](a,b);b=O(O(La[H[H[a>>2]+20>>2]](a))-O(La[H[H[a>>2]+32>>2]](a)));b=b<O(0)?O(-b):b;L[a+8>>2]=b<O(9999999747378752e-20)?O(9999999747378752e-20):b}function $t(a){a=a|0;var b=0,c=0,d=0;d=We(Xa(28));while(1){b=H[a+24>>2];if((c|0)<H[b+12>>2]){b=H[H[b>>2]+(c<<2)>>2];b=La[H[H[b>>2]+8>>2]](b)|0;Pb(H[d+24>>2],b);c=c+1|0;continue}break}return d|0}function px(a,b){a=a|0;b=b|0;var c=0,d=0;d=a+72|0;while(1){a=I[b|0];c=F[b+1|0];if(c){a=cb(c,a<<24>>24)}else{a=I[a+d|0]}a=a&255;if(!(a>>>0>21|!(1<<a&2098688))){b=b+2|0;continue}break}return b|0}function cb(a,b){var c=0;c=7;a:{switch(a+40|0){case 4:case 5:case 6:case 7:return 8;default:if(!((a|0)!=-1|b>>>0<=4294967293)){return 0}c=29;break;case 0:case 1:case 2:case 3:break a}}return c}function $w(a,b){a=a|0;b=b|0;var c=0,d=0;d=a+72|0;while(1){a=I[b+1|0];c=F[b|0];if(c){a=cb(c,a<<24>>24)}else{a=I[a+d|0]}a=a&255;if(!(a>>>0>21|!(1<<a&2098688))){b=b+2|0;continue}break}return b|0}function zj(a){var b=0,c=0,d=0;b=H[a+272>>2];a:{if(!b){break a}c=H[a+280>>2];if(c>>>0>b>>>0){break a}d=H[a+144>>2];La[H[d+48>>2]](d,c,b,a+392|0);H[a+280>>2]=H[a+272>>2]}return H[a+392>>2]+1|0}function lu(a,b){a=a|0;b=b|0;var c=0,d=0,e=O(0),f=O(0),g=O(0);d=a,e=ab(H[b+4>>2],7603,O(-1)),f=ab(H[b+4>>2],10913,O(1)),g=ab(H[b+4>>2],10033,O(1)),c=H[H[a>>2]+48>>2],La[c](d|0,O(e),O(f),O(g))}function Bf(a,b,c){var d=O(0),e=0;e=H[H[(H[a+12>>2]<<2)+53472>>2]+28>>2];d=O(L[a+40>>2]-L[a+44>>2]);if(d<=O(0)){b=O(1)}else{b=O(b/d);b=b<O(0)?O(0):b>O(1)?O(1):b}b=Tf(e,b);return c?b:O(O(1)-b)}function _k(a){var b=0;a:{if(!a){break a}b:{c:{d:{a=I[a|0];switch(a-108|0){case 1:break a;case 2:break b;case 0:break c;default:break d}}if((a|0)!=116){break a}return 1}return 2}b=3}return b}function If(a){var b=0;b=1;a:{if(H[a>>2]){break a}if(zc(a+12|0)){break a}if(Lc(a+160|0)){break a}if(zc(a+96|0)){break a}if(zc(a+112|0)){break a}if(zc(a+128|0)){break a}b=zc(a+144|0)}return b}function vf(a){var b=0,c=0;b=H[a>>2];while(1){if(b){c=H[b>>2];La[H[H[a+20>>2]+8>>2]](b);b=c;continue}break}b=H[a+4>>2];while(1){if(b){c=H[b>>2];La[H[H[a+20>>2]+8>>2]](b);b=c;continue}break}}function bo(a,b){a=a|0;b=b|0;var c=0;c=Ha-16|0;Ha=c;rb(c,b);si(c);if(H[a+448>>2]!=1){b=H[c+4>>2];H[a+532>>2]=H[c>>2];H[a+536>>2]=b;b=H[c+12>>2];H[a+540>>2]=H[c+8>>2];H[a+544>>2]=b}Ha=c+16|0}function rx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a:{while(1){e=I[d|0];if(e){a=0;if(I[b+1|0]|(b|0)==(c|0)|I[b|0]!=(e|0)){break a}d=d+1|0;b=b+2|0;continue}break}a=(b|0)==(c|0)}return a|0}function qb(a){var b=0,c=0,d=0;b=Ha-16|0;Ha=b;a:{if(a){c=Yb(a)+1|0;d=ib(c);if(!d){break a}a=he(d,a,c)}else{a=0}Ha=b+16|0;return a}H[b>>2]=c;Wa(24597,b);a=Eb(4);H[a>>2]=1;Z(a|0,34200,0);B()}function fo(a,b){a=a|0;b=b|0;var c=0,d=0,e=O(0);c=Ha-16|0;Ha=c;d=a+16|0;Ya(d,b);b=c+4|0;Ya(b,d);xb(b,a+28|0);e=_b(b);L[a+8>>2]=e<O(9999999747378752e-20)?O(9999999747378752e-20):e;Ha=c+16|0}function fi(a){var b=0;b=H[a+72>>2];H[a+72>>2]=b-1|b;b=H[a>>2];if(b&8){H[a>>2]=b|32;return-1}H[a+4>>2]=0;H[a+8>>2]=0;b=H[a+44>>2];H[a+28>>2]=b;H[a+20>>2]=b;H[a+16>>2]=b+H[a+48>>2];return 0}function bx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a:{while(1){e=I[d|0];if(e){a=0;if(I[b|0]|(b|0)==(c|0)|I[b+1|0]!=(e|0)){break a}d=d+1|0;b=b+2|0;continue}break}a=(b|0)==(c|0)}return a|0}function Xp(a,b,c,d){a:{if(!a){break a}b:{switch(b+2|0){case 0:F[a|0]=c;return;case 1:G[a>>1]=c;return;case 2:case 3:H[a>>2]=c;return;case 5:break b;default:break a}}H[a>>2]=c;H[a+4>>2]=d}}function Ro(a,b,c,d,e,f,g){var h=O(0);h=O(O(O(a+b)-O(O(c*c)/O(a-b)))*O(.5));L[d>>2]=h;L[e>>2]=a-h;L[g>>2]=O(b-L[d>>2])/c;a=kb(c,O(b-L[d>>2]));L[f>>2]=a;if(L[e>>2]<O(0)){L[f>>2]=L[12804]-a}}function di(a,b,c,d,e,f,g,h,i){var j=0;j=Ha-16|0;Ha=j;xc(j,b,c,d,e,f,g,h,i^-2147483648);d=H[j>>2];c=H[j+4>>2];b=H[j+12>>2];H[a+8>>2]=H[j+8>>2];H[a+12>>2]=b;H[a>>2]=d;H[a+4>>2]=c;Ha=j+16|0}function ip(a,b,c){var d=0,e=0;d=77;e=33;a:{b:{c:{switch(b-21|0){case 0:d=c;break b;default:if((b|0)==15){break a}break;case 3:break b;case 1:case 2:break c}}e=-1;d=25}H[a>>2]=d}return e}function ws(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=G[a+540>>1];d=(d|0)>0?d:0;while(1){if((d|0)!=(e|0)){f=H[H[a+528>>2]+(e<<2)>>2];La[H[H[f>>2]+44>>2]](f,b,c);e=e+1|0;continue}break}}function vs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=G[a+540>>1];d=(d|0)>0?d:0;while(1){if((d|0)!=(e|0)){f=H[H[a+528>>2]+(e<<2)>>2];La[H[H[f>>2]+52>>2]](f,b,c);e=e+1|0;continue}break}}function rf(a){var b=0,c=0;ce(a);La[H[a+12>>2]](a)|0;if(!(F[a|0]&1)){b=H[a+56>>2];c=H[a+52>>2];if(c){H[c+56>>2]=b}if(b){H[b+52>>2]=c}if(H[14761]==(a|0)){H[14761]=b}Va(H[a+96>>2]);Va(a)}}function lk(a,b){L[a>>2]=L[b>>2];L[a+4>>2]=L[b+4>>2];L[a+8>>2]=L[b+8>>2];L[a+12>>2]=L[b+12>>2];L[a+16>>2]=L[b+16>>2];rb(a+20|0,b+20|0);F[a+40|0]=I[b+40|0];H[a+36>>2]=H[b+36>>2];return a}function Zm(a,b,c,d){H[a+16>>2]=d;d=0;H[a+12>>2]=0;a:{if(b){if(b>>>0>=1073741824){break a}d=Xa(b<<2)}H[a>>2]=d;c=(c<<2)+d|0;H[a+8>>2]=c;H[a+12>>2]=(b<<2)+d;H[a+4>>2]=c;return a}Rm();B()}function Nd(a,b,c,d,e){a:{if(d==O(0)&e==O(0)){break a}b:{if(b){ub(a,32);break b}gb(a,G[29370]+1|0)}a=Za(Za(a,c),15222);Te(a,e,117,100);Te(a,d,108,114);a=ub(a,34);if(b){break a}ub(a,10)}}function Hb(a,b){var c=0,d=0;c=I[a|0];d=I[b|0];a:{if(!c|(d|0)!=(c|0)){break a}while(1){d=I[b+1|0];c=I[a+1|0];if(!c){break a}b=b+1|0;a=a+1|0;if((c|0)==(d|0)){continue}break}}return c-d|0}function jv(a,b){a=a|0;b=b|0;var c=0,d=0;c=Ha-48|0;Ha=c;d=c+32|0;Ab(d,a+32|0,L[a+52>>2],1);rb(b,d);d=c+16|0;Ab(d,a+20|0,L[a+48>>2],1);tc(b,d);Ab(c,a+8|0,L[a+44>>2],1);tc(b,c);Ha=c+48|0}function ei(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ha-32|0;Ha=d;H[d+24>>2]=0;H[d+28>>2]=1065353216;H[d+16>>2]=0;H[d+20>>2]=0;e=d+16|0;La[H[H[a>>2]+8>>2]](a,e);oo(po(d,e),b,c);Ha=d+32|0}function Dd(a){var b=0,c=0,d=0;a:{if(!H[a>>2]){break a}while(1){if(H[a+12>>2]<=(b|0)){break a}d=b<<2;c=H[d+H[a>>2]>>2];if(c){La[H[H[c>>2]+4>>2]](c);H[H[a>>2]+d>>2]=0}b=b+1|0;continue}}}function sk(a,b,c,d){var e=0,f=0;e=Ha-48|0;Ha=e;f=e+36|0;rk(f,b,d);ah(a,f);if(oc(c)){H[e+32>>2]=0;H[e+24>>2]=0;H[e+28>>2]=0;b=e+12|0;rk(b,c,d);c=e+24|0;ah(c,b);Fd(a,c);sc(a)}Ha=e+48|0}function Yp(a){var b=0,c=0,d=0,e=0;d=H[a+4>>2];if(d){b=H[a+16>>2];c=H[b+12>>2];e=c+H[b>>2]|0;b=H[b+8>>2];c=Rp((c|0)>=0?(b|0)>(c|0)?e:0:0,b-c|0,d);a=H[a+16>>2];H[a+12>>2]=c+H[a+12>>2]}}function Lx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;while(1){a=H[b>>2];if(!((a|0)==(c|0)|H[d>>2]==(e|0))){H[b>>2]=a+1;a=I[a|0];f=H[d>>2];H[d>>2]=f+2;G[f>>1]=a;continue}break}}function Kw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=H[a+84>>2];d=c+256|0;f=Zp(e,d);d=f?f-e|0:d;c=c>>>0>d>>>0?d:c;jb(b,e,c);b=e+d|0;H[a+84>>2]=b;H[a+8>>2]=b;H[a+4>>2]=c+e;return c|0}function xx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;while(1){a=H[b>>2];if(!((a|0)==(c|0)|H[d>>2]==(e|0))){H[b>>2]=a+1;a=I[a|0];f=H[d>>2];H[d>>2]=f+1;F[f|0]=a;continue}break}}function Mk(a){a=ye(a,1);ye(a+112|0,0);ye(a+224|0,1);ye(a+336|0,0);H[a+452>>2]=0;H[a+456>>2]=0;H[a+460>>2]=0;H[a+464>>2]=0;G[a+448>>1]=J[a+448>>1]&63488;G[a+450>>1]=J[a+450>>1]&63488}function lh(a,b){var c=O(0),d=O(0);c=L[a+4>>2];L[a+8>>2]=O(O(L[a+8>>2]-c)*b)+c;d=L[a+12>>2];if(d!=O(-1)){L[a+12>>2]=O(O(d-c)*b)+c}d=L[a+16>>2];if(d!=O(-1)){L[a+16>>2]=O(O(d-c)*b)+c}}function Zh(a,b,c){var d=0;if((b|0)>=0){if(H[a+8>>2]<=(b|0)){d=H[a+4>>2];mn(a,(b|0)<(d|0)?d:((b>>>1|0)+b|0)+1|0)}if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}G[H[a>>2]+(b<<1)>>1]=J[c>>1]}}function Tx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a:{while(1){a=I[d|0];if(a){e=0;if((b|0)==(c|0)|I[b|0]!=(a|0)){break a}d=d+1|0;b=b+1|0;continue}break}e=(b|0)==(c|0)}return e|0}function Tr(a,b,c){a=a|0;b=O(b);c=c|0;var d=0;Af(a,b,c);b=O(L[a+40>>2]-L[a+44>>2]);d=H[a+528>>2];if(d){La[H[H[d>>2]+64>>2]](d,b,c)}a=H[a+532>>2];if(a){La[H[H[a>>2]+64>>2]](a,b,c)}}function ke(a,b){a=Yl(a,6,b);H[a+576>>2]=0;G[a+556>>1]=0;H[a+548>>2]=0;H[a+552>>2]=0;G[a+544>>1]=0;H[a>>2]=33036;H[a+568>>2]=0;H[a+572>>2]=0;H[a+560>>2]=0;H[a+564>>2]=10;return a}function Yt(a,b,c,d){a=a|0;b=O(b);c=c|0;d=d|0;var e=0,f=0;while(1){e=H[a+24>>2];if(H[e+12>>2]>(f|0)){e=H[H[e>>2]+(f<<2)>>2];La[H[H[e>>2]+16>>2]](e,b,c,d);f=f+1|0;continue}break}}function Be(a){var b=0,c=0;b=H[11212];c=a+7&-8;a=b+c|0;a:{if(!(a>>>0<=b>>>0?c:0)){if(a>>>0<=Ma()<<16>>>0){break a}if(Ea(a|0)|0){break a}}H[12604]=48;return-1}H[11212]=a;return b}function Ou(a,b){a=a|0;b=b|0;var c=0;c=Ha-16|0;Ha=c;Ab(b,a+8|0,L[a+32>>2],1);H[c+8>>2]=0;H[c+12>>2]=1065353216;H[c>>2]=0;H[c+4>>2]=0;Ab(c,a+20|0,L[a+36>>2],1);Qb(b,c);Ha=c+16|0}function vo(a){var b=0,c=O(0),d=0,e=O(0);c=O(-L[12817]);while(1){d=zb(a+b|0,0,80),e=c,L[d+80>>2]=e;b=b+84|0;if((b|0)!=336){continue}break}ff(a,O(0),O(0),O(0),O(0),O(0),O(0))}function ge(a,b){var c=0,d=O(0),e=O(0);c=Ha-32|0;Ha=c;a:{if(Bc(a)){$a(8832,b);break a}d=L[a>>2];e=L[a+4>>2];M[c+16>>3]=L[a+8>>2];M[c+8>>3]=e;M[c>>3]=d;pb(b,8901,c)}Ha=c+32|0}function cd(a,b,c){var d=0;if((b|0)>=0){if(H[a+8>>2]<=(b|0)){d=H[a+4>>2];Xl(a,(b|0)<(d|0)?d:((b>>>1|0)+b|0)+1|0)}if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}H[H[a>>2]+(b<<2)>>2]=c}}function bw(a,b){a=a|0;b=+b;var c=0;xa(a|0,0)|0;a=(a|0)==2?27:(a|0)==1?26:14;a:{if(H[15248]>>>a-1&1){H[15280]=H[15280]|1<<a-1;break a}c=H[(a<<2)+44576>>2];if(c){La[c|0](a)}}}function _x(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=11;a:{switch(b-15|0){case 3:H[a+8>>2]=11;H[a>>2]=66;return 16;default:H[a>>2]=25;c=-1;break;case 0:break a}}return c|0}function Wb(a,b){var c=0;a:{if(!b){break a}b=fb(a+144|0,b);if((b|0)==H[a+164>>2]|(b|0)<0){break a}a=H[a+108>>2];if((b|0)>=H[a+12>>2]){break a}c=H[H[a>>2]+(b<<2)>>2]}return c}function Oj(a,b,c){var d=0;d=Ha-32|0;Ha=d;a=fb(a,b);a:{if(!a){break a}H[d+16>>2]=d+24;if((wc(a,8825,d+16|0)|0)==1){L[c>>2]=M[d+24>>3];break a}H[d>>2]=a;Wa(28866,d)}Ha=d+32|0}function Kl(a){var b=0,c=0,d=0;a:{if(!H[a>>2]){break a}while(1){if(H[a+12>>2]<=(b|0)){break a}d=b<<2;c=H[d+H[a>>2]>>2];if(c){nb(c);Va(c);H[H[a>>2]+d>>2]=0}b=b+1|0;continue}}}function Xa(a){var b=0;b=a>>>0<=1?1:a;while(1){a:{b:{a=ib(b);if(!a){a=H[15118];if(a){break b}a=0}break a}La[a|0]();continue}break}if(!a){Z(Cp(Eb(4))|0,41172,1);B()}return a}function zw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;La[H[H[a>>2]+12>>2]](d+8|0,a,b);a=H[d+8>>2];b=H[c>>2];c=Gp(H[d+12>>2],H[c+4>>2]);Ha=d+16|0;return(a|0)==(b|0)&c}function ym(a){var b=0;b=H[11417];H[a+28>>2]=0;H[a+20>>2]=1065185444;H[a+24>>2]=0;H[a+12>>2]=0;H[a+16>>2]=981668463;H[a+4>>2]=0;H[a+8>>2]=0;L[a>>2]=1/+(b|0);zm(a);return a}function ol(a,b,c){var d=0;gb(a,G[29370]+1|0);a=Za(Za(a,c),15222);a:{if((b|0)<0){break a}c=H[14033];if(H[c+8>>2]<=(b|0)){break a}d=H[H[c+4>>2]+(b<<2)>>2]}Za(Za(a,d),30283)}function gq(a){var b=0,c=0,d=0;c=40736;b=a&63;if(b>>>0<=49){a=38976;if(!b){return 38976}while(1){d=I[a|0];c=a+1|0;a=c;if(d){continue}b=b-1|0;if(b){continue}break}}return c}function bu(a,b){a=a|0;b=O(b);var c=0,d=0;while(1){c=H[a+24>>2];if(H[c+12>>2]<=(d|0)){lh(a,b)}else{c=H[H[c>>2]+(d<<2)>>2];La[H[H[c>>2]+28>>2]](c,b);d=d+1|0;continue}break}}function au(a,b){a=a|0;b=O(b);var c=0,d=0;while(1){c=H[a+24>>2];if(H[c+12>>2]<=(d|0)){kh(a,b)}else{c=H[H[c>>2]+(d<<2)>>2];La[H[H[c>>2]+36>>2]](c,b);d=d+1|0;continue}break}}function Sg(a){var b=0,c=0,d=0;a:{if(!H[a>>2]){break a}while(1){if(H[a+12>>2]<=(b|0)){break a}c=b<<2;d=H[c+H[a>>2]>>2];if(d){Va(Gc(d));H[H[a>>2]+c>>2]=0}b=b+1|0;continue}}}function Pn(){var a=0,b=0,c=0;b=H[H[14657]+4>>2];if(b){a=H[b+12>>2]}c=(a|0)>0?a:0;b=ib(a<<2);a=0;while(1){if((a|0)!=(c|0)){H[b+(a<<2)>>2]=0;a=a+1|0;continue}break}return b}function jl(a){var b=0;a:{if(H[a+48>>2]){break a}b=2;if(H[a>>2]-10>>>0>2){break a}b:{switch(H[a+28>>2]-3|0){case 0:b=1;break;case 1:break b;default:break a}}H[a+48>>2]=b}}function iu(a,b){a=a|0;b=O(b);var c=0,d=0;while(1){c=H[a+24>>2];if(H[c+12>>2]>(d|0)){c=H[H[c>>2]+(d<<2)>>2];if(c){La[H[H[c>>2]+36>>2]](c,b)}d=d+1|0;continue}break}kh(a,b)}function _i(a){var b=0,c=0,d=0;H[a+12>>2]=-1;F[a+8|0]=1;H[a>>2]=0;H[a+4>>2]=0;c=a,d=zq(Xa(16),100),H[c+4>>2]=d;b=Xa(28);H[b+20>>2]=H[a+12>>2];Ec(b,100);H[a>>2]=b;return a}function Zv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ha-16|0;Ha=d;H[d+12>>2]=0;H[d+4>>2]=0;H[d+8>>2]=0;e=d+4|0;a=La[H[H[a>>2]+8>>2]](a,b,e)|0;Nb(c,e,b);Ha=d+16|0;return a|0}function Zo(a,b,c){H[a+4>>2]=0;H[a+8>>2]=0;H[a+20>>2]=c;H[a>>2]=b;H[a+12>>2]=0;H[a+16>>2]=0;b=Xa(16);H[b>>2]=0;H[b+4>>2]=10;H[b+8>>2]=0;H[b+12>>2]=0;H[a+24>>2]=b;return a}function Yn(a){var b=O(0),c=O(0),d=O(0);b=L[a+72>>2];c=L[a+28>>2];if(c>O(0)){d=L[a+80>>2];a:{if(d<b){b=O(c+b);break a}if(!(b<d)){break a}b=O(b-c)}F[a+32|0]=0}L[a+76>>2]=b}function Lo(a,b){var c=O(0);c=L[a>>2];if(c==O(0)){return O(L[a+12>>2]-O(O(b*b)*L[a+4>>2]))}b=O(b/c);b=O(O(1)-O(b*b));return O(O(L[a+4>>2]*O(W(b>O(0)?b:O(0))))+L[a+12>>2])}function qn(a,b,c){var d=0,e=0;d=(c|0)>0?c:0;e=N(b,12);c=0;while(1){if((c|0)!=(d|0)){b=(e+H[a>>2]|0)+N(c,12)|0;H[b+8>>2]=0;H[b>>2]=0;H[b+4>>2]=0;c=c+1|0;continue}break}}function Tb(a,b,c,d){var e=0;a:{if(!tf(a,b,c,d)){break a}d=H[a+12>>2];if((d|0)==H[a+8>>2]){if(!Fb(a)){break a}d=H[a+12>>2]}H[a+12>>2]=d+1;F[d|0]=0;e=H[a+16>>2]}return e}function Gr(a,b){a=a|0;b=b|0;var c=0,d=0;a=a?0:F[58752]&1?H[14689]:0;a:{if(!a){break a}b=qb(b);H[a+8>>2]=b;if(!b){break a}c=a,d=mf(b,4026),H[c+12>>2]=d}return(a|0)!=0|0}function Di(a,b,c,d,e){a:{b:{c:{switch(b-15|0){default:if((b|0)==41){break b}break;case 0:break a;case 3:break b;case 1:case 2:break c}}e=-1;d=25}H[a>>2]=d;c=e}return c}function no(a,b){var c=0,d=O(0),e=0;c=Ha-32|0;Ha=c;d=yc(a,b);H[c+28>>2]=0;H[c+20>>2]=0;H[c+24>>2]=0;e=c+8|0;Ya(e,a);a=c+20|0;kf(a,e,b);d=kb(_b(a),d);Ha=c+32|0;return d}function Xd(a){var b=0,c=0,d=0;a:{if(!H[a>>2]){break a}while(1){if(H[a+12>>2]<=(b|0)){break a}c=b<<2;d=H[c+H[a>>2]>>2];if(d){Va(d);H[H[a>>2]+c>>2]=0}b=b+1|0;continue}}}function Jr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a:{if(!xj(a+148|0,a+144|0,H[a+228>>2])){e=rj(a,H[a+228>>2]);if(e){break a}}H[a+264>>2]=26;e=qj(a,b,c,d)}return e|0}function Nn(a,b,c){var d=0,e=0,f=0;a:{if(!c){break a}while(1){d=I[a|0];e=I[b|0];if((d|0)==(e|0)){b=b+1|0;a=a+1|0;c=c-1|0;if(c){continue}break a}break}f=d-e|0}return f}function td(a,b,c){var d=0,e=0;d=Ha-16|0;Ha=d;H[d+12>>2]=b;b=d+11|0;H[d+4>>2]=b;e=d+12|0;La[H[a+56>>2]](a,e,c,d+4|0,e);Ha=d+16|0;return H[d+4>>2]==(b|0)?-1:F[d+11|0]}function bk(a){a=a|0;var b=0,c=0,d=0;b=G[a+540>>1];b=(b|0)>0?b:0;while(1){if((b|0)!=(c|0)){d=H[H[a+528>>2]+(c<<2)>>2];La[H[H[d>>2]+36>>2]](d);c=c+1|0;continue}break}}function Lk(a,b,c){a=a|0;b=b|0;c=c|0;c=H[a+8>>2];G[a+508>>1]=J[a+508>>1]&65534|((c|0)==3|(c|0)==5);G[a+510>>1]=J[a+510>>1]&65534|(c&-2)==4;$b(a+60|0,b);$b(a+284|0,b)}function Tw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Ha-16|0;Ha=e;a=yg(sa(H[a+60>>2],b|0,c|0,d&255,e+8|0)|0);Ha=e+16|0;Ka=a?-1:H[e+12>>2];return(a?-1:H[e+8>>2])|0}function fg(a,b,c){var d=O(0);d=O(O(a+O(-1))*O(.5));a=b<O(0)?O(-b):b;b=c<O(0)?O(-c):c;a=O(O(d*O(uc(O((a>b?O(1):O(a/b))*L[12865]))+O(1)))+O(1));return a<O(1)?O(1):a}function Nk(a){var b=0,c=0;b=Ha-16|0;Ha=b;c=I[a+40|0];L[b+4>>2]=L[a>>2];L[b+8>>2]=L[a+4>>2];L[b+12>>2]=L[a+8>>2];fh(a+20|0,c,b+4|0,L[a+12>>2],L[a+16>>2]);Ha=b+16|0}function hw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;H[d+12>>2]=H[c>>2];a=La[H[H[a>>2]+16>>2]](a,b,d+12|0)|0;if(a){H[c>>2]=H[d+12>>2]}Ha=d+16|0;return a|0}function Sh(a,b,c,d){var e=0,f=0,g=0,h=0;e=Ha-16|0;Ha=e;h=H[H[a+72>>2]+8>>2];f=e+4|0;g=H[a+488>>2];mb(f,H[g>>2],H[g+12>>2],c);se(a,b,h,f,L[a+380>>2],d);Ha=e+16|0}function mh(a,b,c){var d=0,e=0;d=Ha-16|0;Ha=d;a:{if(!c){break a}e=fb(H[H[14025]>>2],c);if(!e){db();H[d+4>>2]=c;H[d>>2]=b;Wa(27077,d);break a}H[a>>2]=e}Ha=d+16|0}function Xh(a){var b=0,c=0;while(1){if((c|0)<H[a+4>>2]){b=H[a>>2]+(c<<3)|0;while(1){b=H[b>>2];if(b){Va(H[b>>2]);b=b+8|0;continue}break}c=c+1|0;continue}break}}
function He(a){var b=0,c=0;c=-1;b=a>>8;a:{if(b-216>>>0<8){break a}b:{if((b|0)!=255){if(I[a+36136|0]|b){break b}break a}if((a&-2)==65534){break a}}c=a}return c}function Dr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Ha-16|0;Ha=e;a=H[a+36>>2];H[e+12>>2]=d;H[e+8>>2]=c;H[e+4>>2]=b;H[e>>2]=a;Y(48100,34146,e|0)|0;Ha=e+16|0}function Ad(a,b){var c=0;b=fb(a+116|0,b);a:{if((b|0)==H[a+136>>2]|(b|0)<0){break a}a=H[a+104>>2];if((b|0)>=H[a+12>>2]){break a}c=H[H[a>>2]+(b<<2)>>2]}return c}function hl(a,b){a=a|0;b=O(b);var c=0,d=0;while(1){c=H[a+24>>2];if(H[c+12>>2]>(d|0)){c=H[H[c>>2]+(d<<2)>>2];La[H[H[c>>2]+24>>2]](c,b);d=d+1|0;continue}break}}function cr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=10;e=63;d=11;a:{switch(b-15|0){default:c=-1;e=25;case 3:H[a>>2]=e;d=c;break;case 0:break a}}return d|0}function bq(a){var b=0;lq(a);b=H[a>>2];if(b){Va(b);H[a>>2]=0}b=H[a+16>>2];if(b){nb(b);Va(b);H[a+16>>2]=0}b=H[a+20>>2];if(b){nb(b);Va(b);H[a+20>>2]=0}return a}function ay(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=15;e=48;d=11;a:{switch(b-15|0){default:c=-1;e=25;case 2:H[a>>2]=e;d=c;break;case 0:break a}}return d|0}function _f(a,b,c,d,e){var f=0,g=0;f=Ha-16|0;Ha=f;g=f+4|0;Ya(g,d);L[f+4>>2]=e+L[f+4>>2];Ib(H[a+488>>2],b,g);L[f+4>>2]=L[d>>2]-e;Ib(H[a+488>>2],c,g);Ha=f+16|0}function Xe(a,b){var c=O(0),d=O(0);c=L[a+52>>2];d=L[b+52>>2];L[a+52>>2]=c>d?c:d;c=L[a+40>>2];d=L[b+40>>2];L[a+40>>2]=c>d?c:d;L[a+56>>2]=L[b+56>>2]*L[a+56>>2]}function Kq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=32;e=83;d=33;a:{switch(b-15|0){default:c=-1;e=25;case 3:H[a>>2]=e;d=c;break;case 0:break a}}return d|0}function Fl(a,b){var c=0,d=0;a:{if(!a){break a}while(1){if(H[a+12>>2]<=(c|0)){break a}zl(a,c);d=H[a>>2]+N(c,28)|0;L[d+24>>2]=b*L[d+24>>2];c=c+1|0;continue}}}function er(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=8;e=49;d=3;a:{switch(b-15|0){default:c=-1;e=25;case 2:H[a>>2]=e;d=c;break;case 0:break a}}return d|0}function kd(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;d=_i(Xa(16));H[c+12>>2]=b;while(1){if(a){Zi(d,G[b>>1],a);a=H[b+4>>2];b=b+8|0;continue}break}Ha=c+16|0;return d}function Zr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=H[a+528>>2];if(d){La[H[H[d>>2]+32>>2]](d,b,c)}d=H[a+532>>2];if(d){La[H[H[d>>2]+32>>2]](d,b,c)}$b(a+284|0,b)}function Vc(a){var b=0,c=0;b=a*a;c=a*b;return O(c*(b*b)*(b*2718311493989822e-21+-.00019839334836096632)+(c*(b*.008333329385889463+-.16666666641626524)+a))}function Lg(a){var b=0,c=0,d=0,e=0;b=H[a>>2];e=H[a+4>>2];while(1){if((b|0)==(e|0)){return 0}c=b+4|0;H[a>>2]=c;d=H[b>>2];b=c;if(!d){continue}break}return d}function Gu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=O(d);var e=O(0);e=O(O(1)-d);L[a+32>>2]=O(L[b+32>>2]*e)+O(d*L[c+32>>2]);L[a+36>>2]=O(L[b+36>>2]*e)+O(d*L[c+36>>2])}function Du(a,b,c,d){a=a|0;b=b|0;c=c|0;d=O(d);var e=O(0);e=O(O(1)-d);L[a+44>>2]=O(L[b+44>>2]*e)+O(d*L[c+44>>2]);L[a+48>>2]=O(L[b+48>>2]*e)+O(d*L[c+48>>2])}function si(a){var b=O(0);b=L[a+12>>2];a:{if(b!=O(0)){break a}b=L[a+8>>2];if(b!=O(0)){break a}b=L[a+4>>2];if(b!=O(0)){break a}b=L[a>>2]}if(b<O(0)){xi(a)}}function kh(a,b){var c=O(0);L[a+4>>2]=b+L[a+4>>2];L[a+8>>2]=b+L[a+8>>2];c=L[a+12>>2];if(c>=O(0)){L[a+12>>2]=b+c}c=L[a+16>>2];if(c>=O(0)){L[a+16>>2]=b+c}}function fr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;d=62;c=17;a:{switch(b-15|0){default:b=-1;d=25;case 3:H[a>>2]=d;c=b;break;case 0:break a}}return c|0}function _c(a,b){Ya(a+4|0,b+4|0);Ya(a+16|0,b+16|0);Ya(a+28|0,b+28|0);L[a+64>>2]=L[b+64>>2];L[a+68>>2]=L[b+68>>2];jb(a+76|0,b+76|0,36);rb(a+40|0,b+40|0)}function Ub(a,b,c,d){if(c){ob(H[13130],Me(a,12694),b&255|1048576)}if(d){b=b&255;ob(H[13130],Me(a,12273),b|1049088);ob(H[13130],Me(a,11881),b|1048832)}}function ui(a){var b=O(0),c=O(0),d=O(0),e=O(0);b=L[a+12>>2];c=O(b*b);b=L[a+8>>2];d=O(b*b);b=L[a>>2];e=O(b*b);b=L[a+4>>2];return O(c+O(d+O(e+O(b*b))))}function rh(a,b,c){var d=0,e=0;if(c){e=a;d=0;a:{if((c|0)<0){break a}a=H[14025];d=0;if(H[a+8>>2]<=(c|0)){break a}d=H[H[a+4>>2]+(c<<2)>>2]}qh(e,0,b,d)}}function lf(a){return O(O(a*O(O(a*O(O(a*O(-.008656363002955914))+O(-.04274342209100723)))+O(.16666586697101593)))/O(O(a*O(-.7066296339035034))+O(1)))}function go(a,b){a=a|0;b=O(b);zb(a+16|0,0,36);H[a+80>>2]=0;H[a+84>>2]=0;H[a+72>>2]=0;H[a+76>>2]=0;H[a+64>>2]=0;H[a+68>>2]=0;L[a+144>>2]=b;L[a+4>>2]=b}function Xq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a:{switch(b-15|0){case 2:H[a>>2]=48;case 0:return H[a+8>>2];default:break a}}H[a>>2]=25;return-1}function uf(a){var b=0,c=0,d=0;while(1){c=H[a>>2];d=H[H[a+16>>2]+8>>2];if(b>>>0<K[a+8>>2]){La[d|0](H[(b<<2)+c>>2]);b=b+1|0;continue}break}La[d|0](c)}function qh(a,b,c,d){a:{if(!c){break a}b:{if(b){ub(a,32);break b}gb(a,G[29370]+1|0)}a=ub(Za(Za(Za(a,c),15222),d?d:14796),34);if(b){break a}ub(a,10)}}function Gj(a,b,c){var d=0;a=Ve(H[14026],a);a:{if(!a){break a}d=Ej(a,c);if(!(b&2)){break a}a=d-1|0;if(a>>>0>3){break a}d=H[(a<<2)+31932>>2]}return d}function Ej(a,b){var c=0;a:{switch(a-1|0){case 0:return b?1:2;case 1:return b?2:1;case 2:return b?3:4;case 3:c=b?4:3;break;default:break a}}return c}function qw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(Cc(a,H[b+8>>2],f)){Li(b,c,d,e);return}a=H[a+8>>2];La[H[H[a>>2]+20>>2]](a,b,c,d,e,f)}function eh(a){var b=0,c=0,d=0;b=a<<1;d=(b|0)>0?b:0;a=ib(b|1);while(1){if((c|0)==(d|0)){F[a+b|0]=0}else{F[a+c|0]=32;c=c+1|0;continue}break}return a}function Ho(a,b,c){var d=O(0),e=O(0);d=ec(a);e=ec(b);a=uc(a);b=uc(b);a=O(uc(c)-O(a*b));b=O(a*a);c=O(d*e);c=O(c*c);return kb(O(W(O((b>c?b:c)-b))),a)}function Bo(a,b,c){var d=O(0),e=0,f=0;e=H[a+4>>2];f=H[a>>2];L[b+8>>2]=L[a+8>>2];H[b>>2]=f;H[b+4>>2]=e;d=_b(b);sc(b);d=kb(d,L[a+12>>2]);L[c>>2]=d+d}function vi(a){var b=O(0),c=O(0),d=O(0);b=L[a+8>>2];c=O(b*b);b=L[a>>2];d=O(b*b);b=L[a+4>>2];b=kb(O(W(O(c+O(d+O(b*b))))),L[a+12>>2]);return O(b+b)}function ls(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=G[a+540>>1];if((d|0)>0){d=H[(H[a+528>>2]+(d<<2)|0)-4>>2];La[H[H[d>>2]+32>>2]](d,b,c)}$b(a+284|0,b)}function gw(a){a=a|0;var b=0,c=0;a:{b=tg(a);c=H[b+4>>2];if(!c){break a}if(!vp(c,41372,40884)){break a}return H[a>>2]}a=H[b+16>>2];return(a?a:b)|0}function Ah(a){a=a|0;var b=0;H[a>>2]=33228;b=a+528|0;Dd(b);nb(b);H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;return a|0}function re(a,b){var c=0;c=Ha-16|0;Ha=c;a:{if((b|0)==-1){$a(14828,a);break a}if(b>>>0>=5){H[c>>2]=b;eb(a,14871,c);break a}bb(b+49|0,a)}Ha=c+16|0}function mc(a,b,c,d){var e=0,f=0,g=O(0);g=O(O(1)-d);while(1){if((e|0)!=3){f=e<<2;L[f+a>>2]=O(g*L[b+f>>2])+O(d*L[c+f>>2]);e=e+1|0;continue}break}}function ld(a,b,c){var d=0;d=Ha-32|0;Ha=d;a:{if(c==O(-100)){H[d>>2]=b;eb(a,8829,d);break a}H[d+16>>2]=b;M[d+24>>3]=c;pb(a,8936,d+16|0)}Ha=d+32|0}function jf(a){var b=0,c=O(0),d=0;a:{c=ti(a);if(c==O(0)){break a}while(1){if((b|0)==4){break a}d=(b<<2)+a|0;L[d>>2]=L[d>>2]/c;b=b+1|0;continue}}}function Zq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if((b|0)==15){return 17}if((b|0)==27){H[a+8>>2]=17;H[a>>2]=66;return 19}H[a>>2]=25;return-1}function Ob(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;a:{if(!b){break a}d=fb(H[a>>2],b);if((d|0)!=-1){break a}H[c>>2]=b;Wa(28762,c);d=0}Ha=c+16|0;return d}function vd(a,b){H[a+16>>2]=-1027080192;H[a+8>>2]=-1027080192;H[a+12>>2]=-1027080192;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;kl(a,b);return a}function to(a){var b=0,c=0,d=0;b=Ha-16|0;Ha=b;c=a+12|0;Go(c);H[b+12>>2]=0;H[b+4>>2]=0;H[b+8>>2]=0;d=c;c=b+4|0;Wd(d,a,c);so(c);Ya(a,c);Ha=b+16|0}function qi(a,b,c){var d=0,e=0,f=0;d=Ha-16|0;Ha=d;H[d+12>>2]=0;H[d+4>>2]=0;H[d+8>>2]=0;e=a+12|0;f=b;b=d+4|0;Wd(e,f,b);lb(a,b);Qb(e,c);Ha=d+16|0}function Tn(a){H[a+68>>2]=0;H[a+60>>2]=0;H[a+64>>2]=0;H[a+76>>2]=0;H[a+80>>2]=0;F[a+16|0]=1;H[a+88>>2]=0;H[a+92>>2]=0;H[a+48>>2]=0;H[a+52>>2]=0}function An(a,b,c){if(a>>>0<b>>>0){jb(a,b,c);return}if(c){a=a+c|0;b=b+c|0;while(1){a=a-1|0;b=b-1|0;F[a|0]=I[b|0];c=c-1|0;if(c){continue}break}}}function vl(a,b,c){var d=0;d=Ha-16|0;Ha=d;H[d+8>>2]=0;H[d+12>>2]=1065353216;H[d>>2]=0;H[d+4>>2]=0;La[H[H[a>>2]+8>>2]](a,d);Wd(d,b,c);Ha=d+16|0}function jg(a,b){var c=0,d=0,e=O(0),f=O(0);while(1){if((c|0)!=3){d=c<<2;e=O(L[d+a>>2]-L[b+d>>2]);f=O(O(e*e)+f);c=c+1|0;continue}break}return f}function iy(a,b){var c=0;c=b>>31;a=a^c;ey(a-c|0,(b^c)-((a>>>0<c>>>0)+c|0)|0,100);Ka=Ja;a=c^Ia;b=a-c|0;Ka=(c^Ka)-((a>>>0<c>>>0)+c|0)|0;return b}function bj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=1;b=Ie(a,1,H[a+144>>2],b,c,d,!I[a+468|0]);a:{if(!b){if(!hj(a)){break a}}e=b}return e|0}function Uc(a){var b=0;a=a*a;b=a*a;return O(a*b*(a*2439044879627741e-20+-.001388676377460993)+(b*.04166662332373906+(a*-.499999997251031+1)))}function Ng(a,b,c){var d=0;d=Ha-16|0;Ha=d;H[a+32>>2]=b;a=H[a+36>>2];H[d+8>>2]=c;H[d+4>>2]=b;H[d>>2]=a;Y(47968,34142,d|0)|0;Ha=d+16|0;return!b}function Lc(a){var b=0;b=1;if(!(L[a>>2]!=O(-100)|L[a+4>>2]!=O(-100)|(L[a+8>>2]!=O(-100)|L[a+12>>2]!=O(-100)))){b=L[a+16>>2]!=O(-100)}return b}function Mc(a,b,c,d,e){var f=0;f=Ha-16|0;Ha=f;b=b&255;Sh(a,b|1049088,c,e);c=f+4|0;Ya(c,e);L[f+4>>2]=-L[f+4>>2];Sh(a,b|1048832,d,c);Ha=f+16|0}function Ir(){var a=0,b=0;a=Ha-16|0;Ha=a;H[a+4>>2]=0;H[a>>2]=I[58752];Y(47085,34132,a|0)|0;b=I[58752];if(!b){F[58752]=1}Ha=a+16|0;return b^1}function oj(a){var b=0;a:{if(!a){b=6;break a}while(1){if((b|0)==6){return-1}if(pj(a,H[(b<<2)+37328>>2])){break a}b=b+1|0;continue}}return b}function Hf(a,b){if(b){if(!zc(a)){$a(14812,b);return}ld(b,12948,L[a>>2]);ld(b,12900,L[a+4>>2]);ld(b,12855,L[a+8>>2]);ld(b,8203,L[a+12>>2])}}function kp(a,b,c){a=La[H[a+364>>2]](H[a+368>>2],b)|0;if(a>>>0<=65535){a=H[(a>>>3&28|I[(a>>>8|0)+c|0]<<5)+34784>>2]&1<<a}else{a=0}return a}function gi(a){var b=0;b=H[a+100>>2];a:{if(b){break a}b=Xa(12);Ya(b,a+68|0);H[a+100>>2]=b;a=H[a+8>>2];if(!a){break a}xb(b,a+68|0)}return b}function Ve(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;a:{if(!b){break a}d=fb(a,b);if((d|0)!=-1){break a}H[c>>2]=b;Wa(28762,c);d=0}Ha=c+16|0;return d}function Lt(a){a=a|0;var b=O(0),c=O(0);b=L[a+56>>2];c=L[a+52>>2];if(c>O(0)){La[H[H[a>>2]+64>>2]](a,O(c*b),1);return}if(b!=O(1)){pd(a,b,1)}}function wl(a){var b=0;a:{a=a>>>7&31;if(!a){b=65535;break a}while(1){if(a&1){break a}b=b+1|0;a=(a&65534)>>>1|0;continue}}return b<<16>>16}function jh(a,b){var c=0;c=Ha-16|0;Ha=c;a:{if((a|0)==120){b=1;break a}if((a|0)==101){b=0;break a}H[c>>2]=a;Wa(20434,c)}Ha=c+16|0;return b}function gp(a,b){var c=0,d=0;c=I[a+2|0];d=b;b=I[a+1|0];return 1<<c&H[((c>>>5&1|(I[d+(b>>>2&15|I[a|0]<<4&240)|0]<<3|b<<1&6))<<2)+34784>>2]}function Mm(a,b,c){var d=0;if(!(!a|!(c>O(0)))){d=H[a+24>>2];a:{if(!d){d=Xa(12);Ya(d,b);H[a+24>>2]=d;break a}Ya(d,b);d=H[a+24>>2]}Gd(d,c)}}function $j(a){a=a|0;var b=0;H[a>>2]=33036;Dd(a+528|0);b=H[a+560>>2];if(b){Va(b);H[a+560>>2]=0}H[a+568>>2]=0;H[a+572>>2]=0;return Ah(a)|0}function xf(a,b,c){var d=0,e=0,f=0;d=Ha-32|0;Ha=d;e=d+20|0;Ya(e,b+12|0);wb(e,ec(c));f=d+8|0;Ya(f,b+24|0);wb(f,uc(c));Vb(a,e,f);Ha=d+32|0}function Rx(a,b){a=a|0;b=b|0;var c=0;a=a+72|0;while(1){c=I[a+I[b|0]|0];if(!(c>>>0>21|!(1<<c&2098688))){b=b+1|0;continue}break}return b|0}function Mw(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=b;b=H[b>>2]+7&-8;H[c>>2]=b+16;d=a,e=yn(H[b>>2],H[b+4>>2],H[b+8>>2],H[b+12>>2]),M[d>>3]=e}function Tk(a,b,c){var d=0,e=0;d=Ha-32|0;Ha=d;e=d+20|0;Ya(e,b+16|0);Xb(b+40|0,e);b=d+8|0;Ya(b,a+16|0);Xb(a+40|0,b);Nb(c,b,e);Ha=d+32|0}function Mo(a,b,c){var d=O(0),e=O(0);d=L[a+4>>2];b=O(b*L[a+8>>2]);e=uc(b);L[c>>2]=L[a>>2]+O(d*e);b=O(d*ec(b));L[c+8>>2]=d<O(0)?O(-b):b}function Im(a){var b=0,c=0;b=H[a+8>>2];c=H[a+4>>2];while(1){if((b|0)!=(c|0)){b=b-4|0;H[a+8>>2]=b;continue}break}a=H[a>>2];if(a){Va(a)}}function Gi(a,b,c){var d=0;a:{if(!c){break a}a=fb(a,c);if((a|0)==-1|(a|0)<0|(a|0)>=H[b+12>>2]){break a}d=H[H[b>>2]+(a<<2)>>2]}return d}function Gg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=Ie(a,0,H[a+144>>2],b,c,d,!I[a+468|0]);a:{if(d){break a}if(hj(a)){break a}d=1}return d|0}function hy(a,b,c){var d=0;d=b>>31;a=a^d;a=d^jy(a-d|0,(b^d)-((a>>>0<d>>>0)+d|0)|0,c);b=a-d|0;Ka=(d^Ka)-((a>>>0<d>>>0)+d|0)|0;return b}function Xr(a,b){a=a|0;b=b|0;var c=0;jb(a+60|0,b,224);c=H[a+528>>2];La[H[H[c>>2]+40>>2]](c,b);a=H[a+532>>2];La[H[H[a>>2]+40>>2]](a,b)}function ps(a){a=a|0;a=dk(Xa(580),a);H[a+576>>2]=0;H[a>>2]=33036;H[a+568>>2]=0;H[a+572>>2]=0;H[a+560>>2]=0;H[a+564>>2]=10;return a|0}function kn(a){var b=0;b=H[a+52>>2];if(b){Va(b);H[a+52>>2]=0}b=H[a+24>>2];if(b){Va(b);H[a+24>>2]=0}H[a+16>>2]=0;Va(H[a>>2]);return a}function js(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=G[a+540>>1];if((d|0)>0){a=H[(H[a+528>>2]+(d<<2)|0)-4>>2];La[H[H[a>>2]+44>>2]](a,b,c)}}function is(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=G[a+540>>1];if((d|0)>0){a=H[(H[a+528>>2]+(d<<2)|0)-4>>2];La[H[H[a>>2]+52>>2]](a,b,c)}}function xj(a,b,c){c=oj(c);if((c|0)==-1){return 0}H[a+72>>2]=b;H[a+48>>2]=27;H[a+4>>2]=28;H[a>>2]=29;F[a+69|0]=c;H[b>>2]=a;return 1}function rd(a,b){if(b){if((H[a+4>>2]&16777215)!=(H[14678]&16777215)){bb(40,b);bc(a,b);bb(44,b);bc(a+4|0,b);bb(41,b);return}bc(a,b)}}function fe(a,b,c){var d=0;d=Ha-16|0;Ha=d;a:{if(!(a!=O(0)|b!=O(0))){$a(8832,c);break a}M[d+8>>3]=b;M[d>>3]=a;pb(c,8922,d)}Ha=d+16|0}function ud(a,b,c){var d=0;d=(c|0)>0?c:0;b=b<<2;c=0;while(1){if((c|0)!=(d|0)){H[(b+H[a>>2]|0)+(c<<2)>>2]=0;c=c+1|0;continue}break}}function nn(a,b,c){var d=0;c=(c|0)>0?c:0;b=b<<1;while(1){if((c|0)!=(d|0)){G[(b+H[a>>2]|0)+(d<<1)>>1]=65535;d=d+1|0;continue}break}}function bg(a,b,c,d){if(!((c|0)>(d|0)&(d|0)>=0)){H[a+8>>2]=0;H[a+12>>2]=1065353216;H[a>>2]=0;H[a+4>>2]=0;return}rb(a,(d<<4)+b|0)}function Wr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=H[a+528>>2];La[H[H[d>>2]+44>>2]](d,b,c);a=H[a+532>>2];La[H[H[a>>2]+44>>2]](a,b,c)}function Wm(a,b){var c=O(0);c=Xm(a,H[b>>2]);if((H[b+4>>2]&16777215)!=(H[14678]&16777215)){c=O(O(c+Xm(a,H[b>>2]))*O(.5))}return c}function Vr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=H[a+528>>2];La[H[H[d>>2]+52>>2]](d,b,c);a=H[a+532>>2];La[H[H[a>>2]+52>>2]](a,b,c)}function Jf(a,b){var c=0;c=1;if(!(L[a>>2]!=L[b>>2]|L[a+4>>2]!=L[b+4>>2]|L[a+8>>2]!=L[b+8>>2])){c=L[a+12>>2]!=L[b+12>>2]}return c}function iv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;if(b){H[d>>2]=H[H[a+4>>2]>>2];eb(b,16084,d);ng(a+8|0,b,c)}Ha=d+16|0}function Ll(a,b){var c=0;a:{if(!a){break a}while(1){if(H[a+12>>2]<=(c|0)){break a}Fl(H[H[a>>2]+(c<<2)>>2],b);c=c+1|0;continue}}}function yc(a,b){var c=0,d=0,e=O(0);while(1){if((c|0)!=3){d=c<<2;e=O(O(L[d+a>>2]*L[b+d>>2])+e);c=c+1|0;continue}break}return e}function Sj(a){var b=0,c=0;b=Ha-16|0;Ha=b;db();c=H[H[a+72>>2]+8>>2];H[b+4>>2]=I[a|0]?7985:7971;H[b>>2]=c;Wa(18787,b);Ha=b+16|0}function Pg(a){var b=0,c=0;b=Ql();if(!(La[H[H[b>>2]+12>>2]](b,a)|0)){c=H[b+20>>2];H[b+20>>2]=0}La[H[H[b>>2]+4>>2]](b);return c}function Ap(a,b){var c=0,d=0,e=0,f=0;c=Yb(b);d=Xa(c+13|0);H[d+8>>2]=0;H[d+4>>2]=c;H[d>>2]=c;e=a,f=jb(d+12|0,b,c+1|0),H[e>>2]=f}function qc(a,b,c,d,e,f,g){var h=0;h=Ha-16|0;Ha=h;H[h+8>>2]=b;H[h+12>>2]=b;c=yd(a,h+8|0,c,d,e);Lm(a,b,f,g);Ha=h+16|0;return c}function ow(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Cc(a,H[b+8>>2],0)){Ji(b,c,d);return}a=H[a+8>>2];La[H[H[a>>2]+28>>2]](a,b,c,d)}function bp(a,b,c){var d=0,e=0,f=0;while(1){if((c|0)!=(d|0)){e=d<<2;f=e+a|0;L[f>>2]=L[b+e>>2]+L[f>>2];d=d+1|0;continue}break}}function Yo(a,b){H[a>>2]=b;b=H[a+24>>2];a:{if(!b){break a}Dd(b);b=H[a+24>>2];if(!b){break a}nb(b);Va(b);H[a+24>>2]=0}return a}function Em(a,b){var c=O(0);L[a+8>>2]=b;c=O(b+O(1));L[a+16>>2]=c;c=O(c*O(G[a>>1]));L[a+20>>2]=c;if(!I[a+2|0]){L[a+20>>2]=c-b}}function Cn(a,b,c){var d=0;d=Ha-16|0;Ha=d;H[d+8>>2]=0;H[d+12>>2]=1065353216;H[d>>2]=0;H[d+4>>2]=0;Ae(d,b,c);xe(a,d);Ha=d+16|0}function dp(a,b,c){var d=0;a=Gi(a,b,c);a:{if(!a){break a}a=H[a+12>>2];if(!a|H[a+12>>2]<=0){break a}d=H[H[a>>2]>>2]}return d}function Sl(a){var b=0,c=0;if(a){c=ib(32);while(1){if((b|0)==8){H[a+48>>2]=c}else{H[(b<<2)+c>>2]=0;b=b+1|0;continue}break}}}function Bn(a,b,c,d,e){a=a|0;b=b|0;c=O(c);d=d|0;e=e|0;d=eh(d);ve(b,a+8|0,c,d,e);ve(b,a+20|0,c,d,e);ve(b,a+32|0,c,d,e);Va(d)}function sh(a,b,c,d){if(!((c|0)==-1|(d|0)==-1)){gb(a,G[29370]+1|0);a=Za(Za(a,b),15222);Am(a,c);Am(a,d);Za(ub(a,34),30320)}}function hi(a,b){var c=0;c=H[a+16>>2];if(!c){c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+16>>2]=c}Pb(c,b)}function Ln(a,b){var c=0;c=H[a+12>>2];if(!c){c=Xa(16);H[c>>2]=0;H[c+4>>2]=10;H[c+8>>2]=0;H[c+12>>2]=0;H[a+12>>2]=c}Wc(c,b)}function Ao(a,b){return O(O(L[a+12>>2]*L[b+12>>2])+O(O(L[a+8>>2]*L[b+8>>2])+O(O(L[a>>2]*L[b>>2])+O(L[a+4>>2]*L[b+4>>2]))))}function sd(a){var b=0,c=O(0),d=O(0);while(1){if((b|0)!=3){c=L[(b<<2)+a>>2];d=O(O(c*c)+d);b=b+1|0;continue}break}return d}function Nq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;c=33;if((b|0)!=15){d=81;if((b|0)!=23){d=25;c=-1}H[a>>2]=d}return c|0}function Me(a,b){var c=0;if(!a){return qb(b)}if(!b){return qb(a)}c=Yb(a);a=yf(ib((c+Yb(b)|0)+1|0),a);yf(a+c|0,b);return a}function Ug(a,b,c){a:{b=fb(a,b);if(!b){break a}a=1;if(Hb(b,9360)){a=0;if(Hb(b,9508)){break a}}F[c|0]=a;return 1}return 0}function Kc(a,b){H[a+8>>2]=-1027080192;H[a+12>>2]=-1027080192;H[a>>2]=-1027080192;H[a+4>>2]=-1027080192;ml(a,b);return a}function Dx(a,b){a=a|0;b=b|0;a=1;a:{if(I[b|0]<194){break a}b=F[b+1|0];if((b|0)>=0){break a}a=b>>>0>4294967231}return a|0}function zc(a){var b=0;b=1;if(!(L[a>>2]!=O(-100)|L[a+4>>2]!=O(-100)|L[a+8>>2]!=O(-100))){b=L[a+12>>2]!=O(-100)}return b}function xb(a,b){var c=0,d=0,e=0;while(1){if((c|0)!=3){d=c<<2;e=d+a|0;L[e>>2]=L[e>>2]-L[b+d>>2];c=c+1|0;continue}break}}function Wo(a,b,c){gb(b,G[29370]);b=Za(Za(Za(b,12743),c),30320);La[H[H[a>>2]+84>>2]](a,b,0);gb(b,G[29370]);Za(b,21445)}function Tg(a){var b=0;a:{if(!a){break a}while(1){b=F[a|0];if(!b){break a}F[a|0]=b-65>>>0<26?b|32:b;a=a+1|0;continue}}}function Qj(a,b,c){pe(a,b);if(c&2){L[a>>2]=-L[a>>2]}if(c&4){L[a+4>>2]=-L[a+4>>2]}if(c&8){L[a+8>>2]=-L[a+8>>2]}return a}function zk(a,b){var c=O(0);c=O(L[13253]*L[(H[a+68>>2]<<2)+53228>>2]);L[b+64>>2]=c*L[a+60>>2];L[b+68>>2]=c*L[a+64>>2]}function eq(a){a=(a|0)>2147481747?a-2e3|0:a;if(a&3){return 0}a=a+1900|0;if((a|0)%100|0){return 1}return!((a|0)%400|0)}function ck(a,b,c){var d=0;d=(c|0)>0?c:0;c=0;while(1){if((c|0)!=(d|0)){F[(H[a>>2]+b|0)+c|0]=0;c=c+1|0;continue}break}}function Yr(a){a=a|0;var b=0;b=H[a+528>>2];if(b){La[H[H[b>>2]+36>>2]](b)}a=H[a+532>>2];if(a){La[H[H[a>>2]+36>>2]](a)}}function jn(a,b,c){if(c>>>0>=1073741824){dn();B()}a=b-a|0;b=a>>1;return a>>>0>=2147483644?1073741823:b>>>0>c>>>0?b:c}function Vp(a,b,c,d,e,f){H[a>>2]=b;H[a+4>>2]=c;H[a+8>>2]=d;H[a+12>>2]=e&65535|(f>>>16&32768|(e&2147418112)>>>16)<<16}function Vk(a,b,c,d,e){var f=0;f=Ha-16|0;Ha=f;L[f+12>>2]=d;L[f+8>>2]=d;L[f+4>>2]=d;L[f>>2]=d;hh(a,b,c,f,e);Ha=f+16|0}function Ts(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!I[a+570|0]){d=H[a+696>>2];La[H[H[d>>2]+32>>2]](d,b,c)}$b(a+284|0,b)}function Oh(a){var b=0;b=H[a>>2];if((b&16777215)!=(H[14678]&16777215)){b=b>>>8&36863|4096;F[a+1|0]=b;F[a+2|0]=b>>>8}}function Mg(a,b){var c=0;while(1){if(a){c=H[a+4>>2];La[H[b+20>>2]](H[a+16>>2]);La[H[b+20>>2]](a);a=c;continue}break}}function wr(a,b){a=a|0;b=b|0;a=La[H[a+364>>2]](H[a+368>>2],b)|0;if(a>>>0<=65535){a=He(a)>>>31|0}else{a=1}return a|0}function te(a,b,c){a=Wb(a,b);if(a){b=H[a+32>>2];H[c>>2]=H[a+28>>2];H[c+4>>2]=b;H[c+8>>2]=H[a+36>>2]}return(a|0)!=0}function jb(a,b,c){var d=0;if(c){d=a;while(1){F[d|0]=I[b|0];d=d+1|0;b=b+1|0;c=c-1|0;if(c){continue}break}}return a}function et(a,b,c){a=a|0;b=b|0;c=c|0;ie(a,b,c);Mb(b,c,7425,H[a+528>>2],H[14601]);Mb(b,c,9323,H[a+532>>2],H[14599])}function Vb(a,b,c){var d=0,e=0;while(1){if((d|0)!=3){e=d<<2;L[e+a>>2]=L[b+e>>2]+L[c+e>>2];d=d+1|0;continue}break}}function Uh(a,b){var c=0;c=Ha-16|0;Ha=c;H[c+4>>2]=b;H[c>>2]=b;rc(a,1,c,0,c+12|0,c+8|0);Ha=c+16|0;return H[c+8>>2]}function Qh(a,b){var c=0;gb(b,G[29370]);c=a;a=Za(Za(Za(b,12743),7730),30320);Rh(c,a,0);gb(a,G[29370]);Za(a,21445)}function Nb(a,b,c){var d=0,e=0;while(1){if((d|0)!=3){e=d<<2;L[e+a>>2]=L[b+e>>2]-L[c+e>>2];d=d+1|0;continue}break}}function hp(a,b){var c=0;c=I[a+1|0];a=I[a|0];return 1<<c&H[((c>>>5&1|(I[(a>>>2&7)+b|0]<<3|a<<1&6))<<2)+34784>>2]}function Dl(a,b){a:{if(!b|!a){break a}if(!I[b+12|0]){F[52604]=1;b=H[14717];if(!b|I[b+12|0]!=1){break a}}gm(a,b)}}function _o(a,b,c,d){var e=0,f=0;while(1){if((d|0)!=(e|0)){f=e<<2;L[f+a>>2]=c*L[b+f>>2];e=e+1|0;continue}break}}function Xj(a,b){var c=0;if(H[a+8>>2]<=(b|0)){c=a;a=H[a+4>>2];if((a|0)<=(b|0)){a=(((b|0)/2|0)+b|0)+1|0}_j(c,a)}}function Jn(a){a=a|0;H[a+44>>2]=0;H[a+48>>2]=0;H[a+68>>2]=0;H[a+60>>2]=0;H[a+64>>2]=0;H[a+52>>2]=0;H[a+56>>2]=0}function $o(a,b,c){var d=0,e=0;while(1){if((c|0)!=(d|0)){e=(d<<2)+a|0;L[e>>2]=b*L[e>>2];d=d+1|0;continue}break}}function ks(a,b){a=a|0;b=b|0;jb(a+60|0,b,224);if(H[a+540>>2]>0){a=H[H[a+528>>2]>>2];La[H[H[a>>2]+40>>2]](a,b)}}function Yl(a,b,c){a=qd(a,b,c);H[a>>2]=33228;H[a+536>>2]=0;H[a+540>>2]=0;H[a+528>>2]=0;H[a+532>>2]=10;return a}function Ev(a,b){a=a|0;b=b|0;H[a+8>>2]=0;H[a+12>>2]=1065353216;H[a>>2]=0;H[a+4>>2]=0;La[H[H[b>>2]+24>>2]](b,a)}function Cv(a,b){a=a|0;b=b|0;H[a+8>>2]=0;H[a+12>>2]=1065353216;H[a>>2]=0;H[a+4>>2]=0;La[H[H[b>>2]+36>>2]](b,a)}function Cc(a,b,c){if(!c){return H[a+4>>2]==H[b+4>>2]}if((a|0)==(b|0)){return 1}return!Hb(H[a+4>>2],H[b+4>>2])}function yl(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;yl(b+8|0);Va(b);continue}break}}function sj(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;sj(b+8|0);Va(b);continue}break}}function nk(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;nk(b+8|0);Va(b);continue}break}}function du(a,b){a=a|0;b=O(b);var c=O(0);c=O(L[a+16>>2]-L[a+4>>2]);if(c>O(0)){La[H[H[a>>2]+28>>2]](a,O(b/c))}}function an(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;an(b+8|0);Va(b);continue}break}}function _m(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;_m(b+8|0);Va(b);continue}break}}function Nm(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;Nm(b+8|0);Va(b);continue}break}}function Mb(a,b,c,d,e){var f=0;if(d){f=(d|0)<0|H[e+8>>2]<=(d|0)?f:H[H[e+4>>2]+(d<<2)>>2];qh(a,b,c,f?f:14796)}}function Jj(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;Jj(b+8|0);Va(b);continue}break}}function Ij(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;Ij(b+8|0);Va(b);continue}break}}function Hi(a,b,c,d,e,f,g){var h=0;h=b>>8;if(b&1){h=Ii(H[e>>2],h)}La[H[H[a>>2]+20>>2]](a,c,d,e+h|0,b&2?f:2,g)}function Ek(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;Ek(b+8|0);Va(b);continue}break}}function $m(a){var b=0;while(1){b=H[a>>2];if(b){H[a>>2]=H[b+8>>2];H[b+8>>2]=0;$m(b+8|0);Va(b);continue}break}}function md(a,b){H[a+12>>2]=0;H[a+16>>2]=0;H[a>>2]=32120;F[a+20|0]=0;Mk(a+60|0);jb(a+4|0,b+4|0,524);return a}function ap(a,b){var c=0,d=0;while(1){if((b|0)!=(c|0)){d=(c<<2)+a|0;L[d>>2]=-L[d>>2];c=c+1|0;continue}break}}function af(a){var b=0;b=H[a+52>>2];if(!b){b=Xa(12);Ya(b,a+40|0);H[a+52>>2]=b;xb(b,H[a+16>>2]+68|0)}return b}function Sf(a,b){var c=0;c=Ha-16|0;Ha=c;H[c+8>>2]=1056964608;uj(a,c+8|0,c+12|0,b);Ha=c+16|0;return L[c+8>>2]}function $d(){var a=0;a=H[11542];H[12729]=0;ca(a|0);a=H[12729];H[12729]=0;if((a|0)==1){ea(_(0)|0)|0}Oi();B()}function mb(a,b,c,d){if(!((c|0)>(d|0)&(d|0)>=0)){H[a+8>>2]=0;H[a>>2]=0;H[a+4>>2]=0;return}Ya(a,N(d,12)+b|0)}function cp(a,b,c){var d=0,e=0;while(1){if((c|0)!=(d|0)){e=d<<2;L[e+a>>2]=L[b+e>>2];d=d+1|0;continue}break}}function xh(){var a=0;a:{a=H[13232];if(!a){break a}Dd(a);a=H[13232];if(!a){break a}nb(a);Va(a);H[13232]=0}}function cc(a,b,c,d,e){var f=0;f=Ha-16|0;Ha=f;L[f+12>>2]=e;L[f+8>>2]=d;L[f+4>>2]=c;Ib(a,b,f+4|0);Ha=f+16|0}function Hu(a,b){a=a|0;b=b|0;Ya(a+8|0,b+8|0);Ya(a+20|0,b+20|0);L[a+32>>2]=L[b+32>>2];L[a+36>>2]=L[b+36>>2]}function rg(a,b,c,d,e,f){var g=0;g=b>>8;if(b&1){g=Ii(H[d>>2],g)}La[H[H[a>>2]+24>>2]](a,c,d+g|0,b&2?e:2,f)}function iq(a){var b=0;hq();b=H[a+4>>2];a=H[a>>2];ra(a|0,b|0,58928);H[14742]=H[(H[14740]?58984:58980)>>2]}function Vj(a,b){a=Yl(a,5,b);H[a+552>>2]=0;H[a+544>>2]=0;H[a+548>>2]=0;H[a>>2]=32940;H[a+4>>2]=5;return a}function tv(a,b,c,d,e){a=a|0;b=b|0;c=O(c);d=d|0;e=e|0;var f=0;if(b){f=a+8|0;a=eh(d);ve(b,f,c,a,e);Va(a)}}function rv(a,b,c,d,e){a=a|0;b=b|0;c=O(c);d=d|0;e=e|0;d=eh(d);ve(b,a+8|0,c,d,e);ve(b,a+20|0,c,d,e);Va(d)}function ph(a,b,c){var d=0;a:{if(!a){break a}d=b;b=fb(H[H[14033]>>2],a);H[d>>2]=b;if(b){break a}ml(c,a)}}function oh(a,b,c){var d=0;a:{if(!a){break a}d=b;b=fb(H[H[14034]>>2],a);H[d>>2]=b;if(b){break a}kl(c,a)}}function ne(a,b,c){var d=0;d=qd(Xa(536),7,5);H[d+532>>2]=c?b:a;H[d+528>>2]=c?a:b;H[d>>2]=33132;return d}function gc(a){var b=0;b=H[a+4>>2];if(b){Va(b);H[a+4>>2]=0}b=H[a>>2];if(b){Va(hb(b));H[a>>2]=0}return a}function Fm(a){var b=0;b=I[a+4|0];L[a+12>>2]=b?L[13150]:O(-1);Em(a,b?L[13149]:F[a+3|0]&1?L[11416]:O(1))}function Bs(a){a=a|0;a=dk(Xa(556),a);H[a+552>>2]=0;H[a+544>>2]=0;H[a+548>>2]=0;H[a>>2]=32940;return a|0}function vh(a){var b=0;G[a+4>>1]=65535;H[a>>2]=0;b=H[a+8>>2];if(b){La[H[H[b>>2]+4>>2]](b);H[a+8>>2]=0}}function _g(a,b){a=jb(a,b,48);Ya(a+48|0,b+48|0);F[a- -64|0]=I[b- -64|0];H[a+60>>2]=H[b+60>>2];return a}function Ak(a){a=zb(a,0,60);H[a+68>>2]=1077936128;H[a+60>>2]=1065353216;H[a+64>>2]=1065353216;return a}function zb(a,b,c){var d=0;if(c){d=a;while(1){F[d|0]=b;d=d+1|0;c=c-1|0;if(c){continue}break}}return a}function hq(){if(!(F[58988]&1)){Ga(58972,58976,58992,59024);H[14746]=59024;H[14745]=58992;F[58988]=1}}function Xt(a,b){a=a|0;b=O(b);L[a+28>>2]=b*L[a+28>>2];L[a+32>>2]=b*L[a+32>>2];L[a+36>>2]=b*L[a+36>>2]}function Wl(a){a=a|0;H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;return a|0}function me(a,b){a:{switch(a-1|0){case 0:return b?3:4;case 1:a=b?4:3;break;default:break a}}return a}function gb(a,b){var c=0;b=(b|0)>0?b:0;while(1){if((b|0)!=(c|0)){Za(a,18823);c=c+1|0;continue}break}}function _a(a,b){var c=0;b=(b|0)>0?b:0;while(1){if((b|0)!=(c|0)){$a(18823,a);c=c+1|0;continue}break}}function Ym(a,b,c){Ub(a,b,c,1);ob(H[13130],Me(a,12062),b|1049600);ob(H[13130],Me(a,11637),b|1049344)}function Oe(a,b){if(a&2){L[b>>2]=-L[b>>2]}if(a&4){L[b+4>>2]=-L[b+4>>2]}if(a&8){L[b+8>>2]=-L[b+8>>2]}}function mt(a,b){a=a|0;b=b|0;var c=0;c=Ha-16|0;Ha=c;if(b){H[c>>2]=a;eb(b,21625,c);Pc(a,b)}Ha=c+16|0}function ao(a,b){a=a|0;b=O(b);if(H[a+60>>2]==1){L[a+80>>2]=b;L[a+76>>2]=b;return}L[a+72>>2]=b;Yn(a)}function Jg(a){var b=0,c=0;while(1){b=I[a|0];if(b){a=a+1|0;c=N(c,1000003)^b;continue}break}return c}function Cm(a,b){var c=0;$e(a,H[b>>2]);c=H[b+4>>2];if(c){H[a+4>>2]=c}F[a+8|0]=(I[a+8|0]|I[b+8|0])&1}function ah(a,b){var c=0,d=0;c=H[b+4>>2];d=H[b>>2];L[a+8>>2]=L[b+8>>2];H[a>>2]=d;H[a+4>>2]=c;sc(a)}function In(a){a=a|0;H[a+44>>2]=0;H[a+48>>2]=0;H[a+60>>2]=0;H[a+64>>2]=0;H[a+52>>2]=0;H[a+56>>2]=0}function ab(a,b,c){var d=0;d=Ha-16|0;Ha=d;L[d+12>>2]=c;ic(a,d+12|0,b);Ha=d+16|0;return L[d+12>>2]}function we(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;d=c+4|0;Ya(d,b);Xb(a+80|0,d);Cn(a,d,52560);Ha=c+16|0}function de(a){var b=0,c=0;while(1){b=I[a|0];if(b){a=a+1|0;c=ky(c,8)+b|0;continue}break}return c}function Pu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=O(d);L[a+20>>2]=O(L[b+20>>2]*O(O(1)-d))+O(d*L[c+20>>2])}function Pe(a){a=a|0;H[a+452>>2]=0;H[a>>2]=32120;H[a+340>>2]=0;H[a+228>>2]=0;H[a+116>>2]=0;Va(a)}function iw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(Cc(a,H[b+8>>2],f)){Li(b,c,d,e)}}function Cj(a){a=a|0;var b=0;H[a>>2]=34028;b=H[a+4>>2];if(b){nb(b);Va(b);H[a+4>>2]=0}return a|0}function xm(a){var b=0;b=vg(Eb(8));H[b>>2]=41208;Ap(b+4|0,a);H[b>>2]=41276;Z(b|0,41288,2);B()}function tj(a,b){a=a|0;b=b|0;b=Ha-16|0;Ha=b;H[b>>2]=H[a+36>>2];Y(48619,34171,b|0)|0;Ha=b+16|0}function hk(a,b){if(L[a>>2]==O(-2)){L[a>>2]=L[b>>2]}if(L[a+4>>2]==O(-2)){L[a+4>>2]=L[b+4>>2]}}function Wa(a,b){var c=0,d=0;c=Ha-16|0;Ha=c;d=H[14711];if(d){H[c+12>>2]=b;$l(d,a,b)}Ha=c+16|0}function Fw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return La[H[H[a>>2]+16>>2]](a,b,c,d,e)|0}function Wg(a,b){if((b|0)>=0){Xj(a,b);if(H[a+12>>2]<=(b|0)){H[a+12>>2]=b+1}F[H[a>>2]+b|0]=0}}function Nt(a,b,c){a=a|0;b=b|0;c=c|0;La[H[H[a>>2]+44>>2]](a,b,1);La[H[H[a>>2]+44>>2]](a,c,0)}function Mt(a,b,c){a=a|0;b=b|0;c=c|0;La[H[H[a>>2]+52>>2]](a,b,1);La[H[H[a>>2]+52>>2]](a,c,0)}function Ko(a,b,c){var d=O(0);d=L[a>>2];if(d<b|O(-d)>b){b=O(10)}else{b=O(c-Lo(a,b))}return b}function Ew(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return La[H[H[a>>2]+32>>2]](a,b,c,d,e)|0}function _h(a,b){var c=0;c=a+40|0;Ya(c,b);b=a+28|0;a=H[a+16>>2];Nb(b,c,a+68|0);Do(a+80|0,b)}function Jd(a,b,c,d,e){if((b|0)==15){return e}if(!((b|0)==27)){c=-1;d=25}H[a>>2]=d;return c}function Vo(a,b,c){gb(b,G[29370]);b=Za(ub(b,60),c);La[H[H[a>>2]+84>>2]](a,b,1);Za(b,21445)}function pt(a){a=a|0;var b=0;b=md(Xa(528),a);H[b>>2]=32460;jb(b+4|0,a+4|0,524);return b|0}function hv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Ha-16|0;Ha=d;oo(po(d,a+8|0),b,c);Ha=d+16|0}function Pj(a,b,c){Pf(a,b);if(c&2){L[a>>2]=-L[a>>2]}if(c&4){L[a+4>>2]=-L[a+4>>2]}return a}function pf(a){var b=0;if(a>>>0>=11){b=a+8&-8;a=b-1|0;a=(a|0)==11?b:a}else{a=10}return a}function ky(a,b){var c=0,d=0;c=b&31;d=(-1>>>c&a)<<c;c=a;a=0-b&31;return d|(c&-1<<a)>>>a}
function Md(a){a=H[a>>2];if((a|0)!=60244){if((Fp(a+4|0)|0)==-1){La[H[H[a>>2]+8>>2]](a)}}}function ub(a,b){var c=0;c=Ha-16|0;Ha=c;F[c+15|0]=b;a=ql(a,c+15|0,1);Ha=c+16|0;return a}function No(a,b,c){var d=0,e=O(0);b=O(b*L[a+8>>2]);d=c,e=Lo(a,b),L[d+8>>2]=e;L[c>>2]=b}function Gm(a,b,c){var d=0;d=Ha-16|0;Ha=d;M[d+8>>3]=b;M[d>>3]=a;pb(c,9118,d);Ha=d+16|0}function nm(a,b){var c=0;c=H[a+32>>2];if(c){mm(c,b+112|0)}a=H[a+28>>2];if(a){mm(a,b)}}function gf(a){var b=0;while(1){if((b|0)!=4){H[(b<<2)+a>>2]=0;b=b+1|0;continue}break}}function Wv(a,b){a=a|0;b=O(b);La[H[H[a>>2]+44>>2]](a,O(0));L[a+68>>2]=b;L[a+64>>2]=b}function zn(a,b){a=a|0;b=b|0;var c=0,d=O(0);c=a,d=O(L[a+20>>2]-vi(b)),L[c+20>>2]=d}function wj(a,b,c,d){b=N(b,c);a:{if(H[d+76>>2]<0){a=Yg(a,b,d);break a}a=Yg(a,b,d)}}function dv(a,b){a=a|0;b=b|0;var c=0,d=O(0);c=a,d=O(vi(b)+L[a+20>>2]),L[c+20>>2]=d}function Hd(a,b){if(b){Ya(a,b);return a}H[a+8>>2]=0;H[a>>2]=0;H[a+4>>2]=0;return a}function dy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return jp(a,b,c,d,e,86,85)|0}function br(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return jp(a,b,c,d,e,65,64)|0}function oe(a,b,c){a=qd(a,9,b);F[a+532|0]=0;H[a+528>>2]=c;H[a>>2]=32844;return a}function bv(a){a=a|0;H[a+16>>2]=0;H[a+20>>2]=1065353216;H[a+8>>2]=0;H[a+12>>2]=0}function Hn(a,b){H[b+12>>2]=0;while(1){if(a){Wc(b,a);a=H[a+8>>2];continue}break}}function nb(a){var b=0;b=H[a>>2];if(b){Va(b);H[a>>2]=0}H[a+8>>2]=0;H[a+12>>2]=0}function ic(a,b,c){var d=0;d=Ha-16|0;Ha=d;a=uj(a,b,d+12|0,c);Ha=d+16|0;return a}function sg(a,b,c){c=c-b|0;if((c|0)>0){b=he(ib(c+1|0),b,c);F[b+c|0]=0;Pb(a,b)}}function pb(a,b,c){var d=0;d=Ha-16|0;Ha=d;H[d+12>>2]=c;Vi(a,b,c,3,0);Ha=d+16|0}function hr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Di(a,b,33,60,34)|0}function gr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Di(a,b,39,61,40)|0}function cy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,13,87,11)|0}function by(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,14,85,11)|0}function Yq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,21,71,17)|0}function Yi(a,b){if((fb(H[a>>2],b)|0)==H[a+12>>2]){Zi(a,G[H[a+4>>2]+12>>1],b)}}function Um(a,b){a=Th(a,4828,b+1|0);return(a-6>>>0<4294967291?b:a-1|0)<<16>>16}function Rq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Di(a,b,39,76,51)|0}function Lq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,38,60,33)|0}function Hq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,13,84,11)|0}function Gq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,14,64,11)|0}function xw(a,b){a=a|0;b=b|0;a=vg(a);H[a>>2]=41228;Ap(a+4|0,Ee(b));return a|0}function nw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Cc(a,H[b+8>>2],0)){Ji(b,c,d)}}function Bc(a){var b=0;return L[a>>2]!=O(0)|L[a+4>>2]!=O(0)?b:L[a+8>>2]==O(0)}function kr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,5,57,3)|0}function jr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Jd(a,b,6,50,3)|0}function oi(a,b){var c=O(0),d=O(0);c=_b(a);d=_b(b);return O(yc(a,b)/O(c*d))}function jt(a,b){a=a|0;b=b|0;H[a+528>>2]=H[b+204>>2];H[a+532>>2]=H[b+92>>2]}function yw(a,b,c){a=a|0;b=b|0;c=c|0;return Gp(a,H[b+4>>2])&H[b>>2]==(c|0)}function jk(a,b){a=Ke(Mh(Xa(76),1,b),a);H[a+56>>2]=0;H[a+72>>2]=b;return a}function eb(a,b,c){var d=0;d=Ha-16|0;Ha=d;H[d+12>>2]=c;jq(a,b,c);Ha=d+16|0}function vw(a,b){a=a|0;b=b|0;return yp(a,Ee(b),wg(H[b+4>>2],I[b+11|0]))|0}function pd(a,b,c){if(b!=O(1)){La[H[H[a>>2]+64>>2]](a,O(b*L[a+40>>2]),c)}}function Wf(a,b,c){se(a,b|1048576,H[H[a+72>>2]+8>>2],c,L[a+380>>2],52904)}function Go(a){L[a>>2]=-L[a>>2];L[a+4>>2]=-L[a+4>>2];L[a+8>>2]=-L[a+8>>2]}function Ee(a){var b=0,c=0,d=0;return b=H[a>>2],c=a,d=De(I[a+11|0]),d?b:c}function lg(a,b){if(b){$a(12802,b);tb(a,b,3);$a(12805,b);ng(a+12|0,b,3)}}function Nj(a,b){var c=0,d=0;if(b){c=a,d=fb(H[H[14588]>>2],b),H[c>>2]=d}}function Jq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ip(a,b,79)|0}function Iq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ip(a,b,81)|0}function $g(a){var b=O(0);b=a;a=L[12738];return O(Ol(O(b+a),L[12737])-a)}function Lp(a){if(De(I[a+11|0])){a=Op(H[a+8>>2])-1|0}else{a=10}return a}function ot(a,b,c){a=a|0;b=b|0;c=c|0;Qc(a,b,c);La[H[H[a>>2]+68>>2]](a)}function Ki(a,b,c){if(!(H[a+28>>2]==1|H[a+4>>2]!=(b|0))){H[a+28>>2]=c}}function Hw(a){a=a|0;H[a+16>>2]=H[a+16>>2]|1;if(F[a+20|0]&1){Da();B()}}function ed(a){var b=0;b=H[a+28>>2];if(b){Va(b);H[a+28>>2]=0}return a}function ev(a,b){a=a|0;b=b|0;var c=0,d=O(0);c=a,d=vi(b),L[c+20>>2]=d}function el(a,b){a=a|0;b=O(b);La[H[H[a>>2]+36>>2]](a,O(b-L[a+4>>2]))}function _v(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return La[a|0](b,c,d)|0}function Un(a,b){var c=O(0);c=ui(a);if(c>O(b*b)){hf(a,O(b/O(W(c))))}}function zx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return yq(a,1,b,c,d)|0}function yx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return yq(a,0,b,c,d)|0}function id(a,b){var c=0;c=Ha-16|0;Ha=c;M[c>>3]=a;Wa(b,c);Ha=c+16|0}function Tv(a,b){a=a|0;b=O(b);if(H[a+60>>2]!=1){L[a+80>>2]=b;Yn(a)}}function Eu(a,b){a=a|0;b=b|0;H[a+4>>2]=H[b+4>>2];jb(a+8|0,b+8|0,64)}function Bu(a,b){a=a|0;b=b|0;H[a+4>>2]=H[b+4>>2];jb(a+8|0,b+8|0,60)}function qg(a,b,c){a=Gi(a,b,c);if(!a){return 0}return H[a+16>>2]>0}function Rm(){var a=0;a=Cp(Eb(4));H[a>>2]=41104;Z(a|0,41132,1);B()}function Qu(a,b){a=a|0;b=b|0;Ya(a+8|0,b+8|0);L[a+20>>2]=L[b+20>>2]}function Ff(a,b){H[a>>2]=b;if((b|0)!=60244){H[b+4>>2]=H[b+4>>2]+1}}function wv(a,b){a=a|0;b=b|0;if(!H[12729]){H[12730]=b;H[12729]=a}}function su(a,b){a=a|0;b=b|0;Db(16659);tb(b,H[14711],3);Db(30279)}function ru(a,b){a=a|0;b=b|0;Db(16402);tb(b,H[14711],3);Db(30279)}function qu(a,b){a=a|0;b=b|0;Db(16556);tb(b,H[14711],3);Db(30279)}function Ti(a,b){H[a>>2]=H[(H[H[b>>2]-12>>2]+b|0)+24>>2];return a}function Su(a,b){a=a|0;b=b|0;Db(16452);tb(b,H[14711],3);Db(30279)}function Ru(a,b){a=a|0;b=b|0;Db(16607);tb(b,H[14711],3);Db(30279)}function Iu(a,b){a=a|0;b=b|0;Db(16503);tb(b,H[14711],3);Db(30279)}function Gd(a,b){var c=O(0);c=_b(a);if(!(c<=O(0))){wb(a,O(b/c))}}function rr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return H[a+268>>2]}function pc(a,b){return(b&3968)!=0|(a&255)-1>>>0<11|(a&252)==12}function nt(a,b){a=a|0;b=b|0;jb(a+60|0,b,224);jb(a+284|0,b,224)}function kq(a){if(a>>>0>=4294963201){H[12604]=0-a;a=-1}return a}function dl(a,b){a=a|0;b=b|0;if(b){La[H[H[a>>2]+44>>2]](a,b,0)}}function Rc(a,b,c,d){a:{if(a){if(Ug(a,b,c)){break a}}F[c|0]=d}}function Qt(a,b,c){a=a|0;b=b|0;c=c|0;La[H[H[a>>2]+40>>2]](a,b)}function zm(a){var b=0,c=0;b=a,c=ib(H[11417]<<2),H[b+28>>2]=c}function xp(a,b){var c=0;c=a;a=H[a>>2]+b|0;H[c>>2]=a;return a}function vc(a){var b=0;b=Xa(28);H[b+20>>2]=a;Ec(b,9);return b}function or(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 0}function lo(a,b,c){var d=O(0);d=yc(a,b);return kb(yc(a,c),d)}
function od(a){a=Zk(a);return O(L[13442]*L[(a<<2)+53900>>2])}function Zi(a,b,c){c=qb(c);Ld(H[a+4>>2],b,c);ob(H[a>>2],c,b)}function Km(a,b,c){a=zd(a+172|0,b);if(a){Mm(a,c,L[a+20>>2])}}function Ax(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Bq(37800,b,c,d)}function lq(a){var b=0;b=H[a+4>>2];if(b){rf(b);H[a+4>>2]=0}}function Uj(a){if(!a){return 0}return dd(H[a>>2])-18>>>0<13}function Fp(a){var b=0;b=a;a=H[a>>2]-1|0;H[b>>2]=a;return a}function Ss(a){a=a|0;a=H[a+696>>2];La[H[H[a>>2]+36>>2]](a)}function Ow(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ka=0;return 0}function Kk(a,b,c){a=a|0;b=b|0;c=c|0;Ya((c?288:400)+a|0,b)}function Jk(a,b,c){a=a|0;b=b|0;c=c|0;lb((c?288:400)+a|0,b)}function Ab(a,b,c,d){yi(a,L[b>>2],L[b+4>>2],L[b+8>>2],c,d)}function cu(a,b,c){a=a|0;b=b|0;c=c|0;Xo(a,b,c,14887,8876)}function _t(a,b,c){a=a|0;b=b|0;c=c|0;Xo(a,b,c,14882,8851)}function Wj(a){gb(a,G[29370]);Za(Za(ub(a,60),7326),21445)}function Uf(a,b){var c=0,d=0;if(b){c=a,d=Pd(b),G[c>>1]=d}}function Kp(a,b){if(De(I[a+11|0])){_d(a,b);return}qf(a,b)}function Fs(a,b,c,d){a=a|0;b=b|0;c=O(c);d=d|0;Zc(a,b,c,d)}function rp(a){a=H[a>>2]-12|0;if((Fp(a+8|0)|0)<0){Va(a)}}function rm(a){a=a|0;H[a>>2]=41208;rp(a+4|0);return a|0}function lt(a,b){a=a|0;b=b|0;gb(b,G[29370]);Za(b,21436)}function Yj(a,b){a=mi(a,b);mi(a+112|0,b+112|0);return a}function Rd(a,b,c){a=a+172|0;b=zd(a,b);if(b){$f(a,c,b)}}function Pi(a){a=a|0;H[a>>2]=41228;rp(a+4|0);return a|0}function Nv(a,b){a=a|0;b=O(b);La[H[H[a>>2]+28>>2]](a,b)}function Av(a,b){a=a|0;b=O(b);La[H[H[a>>2]+44>>2]](a,b)}function of(a,b){var c=0;c=Xa(b);H[a+4>>2]=b;H[a>>2]=c}function Kt(a,b){a=a|0;b=b|0;La[H[H[a>>2]+80>>2]](a,b)}function wn(a,b){a=a|0;b=O(b);L[a+44>>2]=b+L[a+44>>2]}function un(a,b){a=a|0;b=O(b);L[a+48>>2]=b+L[a+48>>2]}function gv(a,b,c,d,e){a=a|0;b=b|0;c=O(c);d=d|0;e=e|0}function Yu(a,b){a=a|0;b=b|0;Ab(b,a+8|0,L[a+20>>2],1)}function Wu(a,b){a=a|0;b=O(b);L[a+20>>2]=b+L[a+20>>2]}function Mu(a,b){a=a|0;b=O(b);L[a+32>>2]=b+L[a+32>>2]}function Le(a,b){a=lk(a,b);lk(a+44|0,b+44|0);return a}function Ku(a,b){a=a|0;b=O(b);L[a+36>>2]=b+L[a+36>>2]}function Jw(a){a=a|0;return La[H[H[a>>2]+24>>2]](a)|0}function le(a,b){a=qd(a,10,b);H[a>>2]=32460;return a}function vr(a,b){a=a|0;b=b|0;return kp(a,b,36432)|0}function ur(a,b){a=a|0;b=b|0;return kp(a,b,36688)|0}function fy(a){if(a){return 31-Q(a-1^a)|0}return 32}function Fj(a,b){return Ve(H[(b?56108:56112)>>2],a)}function yg(a){if(!a){return 0}H[12604]=a;return-1}function Qw(a){a=a|0;return yg(ja(H[a+60>>2])|0)|0}function Pt(a,b,c){a=a|0;b=b|0;c=c|0;$b(a+284|0,b)}function Ix(a,b){a=a|0;b=b|0;return hp(b,36688)|0}function Hx(a,b){a=a|0;b=b|0;return gp(b,36688)|0}function Fx(a,b){a=a|0;b=b|0;return hp(b,36432)|0}function Ex(a,b){a=a|0;b=b|0;return gp(b,36432)|0}function pk(a){F[a+4|0]=0;H[a>>2]=16777217;Fm(a)}function ji(a){a=a|0;La[H[H[a>>2]+8>>2]](a,O(0))}function Lb(){var a=0;a=H[14711];if(a){bb(10,a)}}function Fo(a,b,c){rb(a,c);Go(a);Qb(a,b);Qb(a,c)}function Dn(a){ro(H[a+16>>2]+68|0,a+28|0,a+40|0)}function Db(a){var b=0;b=H[14711];if(b){$a(a,b)}}function yv(a){a=a|0;a=Ha-a&-16;Ha=a;return a|0}function Zn(a){a=ye(a,1);ye(a+112|0,0);return a}function Uv(a,b){a=a|0;b=b|0;L[b>>2]=L[a+76>>2]}function Rv(a,b){a=a|0;b=b|0;L[b>>2]=L[a+80>>2]}function Og(a,b){if(!b){return 0}return fb(a,b)}function Bb(a,b){if(!a){return 0}return Og(a,b)}function vt(a,b,c){a=a|0;b=b|0;c=c|0;Kk(a,b,c)}function ut(a,b,c){a=a|0;b=b|0;c=c|0;Jk(a,b,c)}function fc(a,b,c){if(!(I[a|0]&32)){Yg(b,c,a)}}function ee(a,b,c){a=a|0;b=b|0;c=c|0;ie(a,b,c)}function cv(a){a=a|0;H[a+32>>2]=0;H[a+36>>2]=0}function Cl(a,b){a=a|0;b=b|0;Va(wh(H[b+4>>2]))}function Aw(a,b,c){a=a|0;b=b|0;c=c|0;Tp(a,c,b)}function gg(a){a=a|0;H[a>>2]=30588;return a|0}function Ot(a,b){a=a|0;b=b|0;jb(a+60|0,b,224)}function Cp(a){a=vg(a);H[a>>2]=41084;return a}function $c(a){if(De(I[a+11|0])){Va(H[a>>2])}}function wg(a,b){if(!De(b)){a=Pp(b)}return a}function pu(a,b){a=a|0;b=b|0;rb(a+8|0,b+8|0)}function je(a,b){_c(a,b);_c(a+112|0,b+112|0)}function df(a){if(!a){return 0}return ef(a)}function Sp(a,b,c){if(c){An(a,b,c)}return a}function Np(a,b){return K[a>>2]<K[b>>2]?b:a}function $e(a,b){if(H[a>>2]<(b|0)){Dm(a,b)}}function xn(a,b){a=a|0;b=O(b);L[a+44>>2]=b}function vn(a,b){a=a|0;b=O(b);L[a+48>>2]=b}function se(a,b,c,d,e,f){qc(a,b,c,d,e,f,e)}function gh(a){return!(a&4|(!(a&112)|a&2))}function dd(a){return fb(H[H[14594]>>2],a)}function Xu(a,b){a=a|0;b=O(b);L[a+20>>2]=b}function Oo(a,b,c){xb(c,b);Xb(a,c);lb(c,b)}function Nu(a,b){a=a|0;b=O(b);L[a+32>>2]=b}function Lu(a,b){a=a|0;b=O(b);L[a+36>>2]=b}function Lm(a,b,c,d){Mm(zd(a+172|0,b),c,d)}function Ic(a){return(Ve(H[14031],a)|0)==1}function Fh(a,b,c){em(a,b,c);em(a+4|0,b,c)}function Cu(a,b){a=a|0;b=O(b);L[a+52>>2]=b}function Co(a,b,c){xb(c,b);Do(a,c);lb(c,b)}function zo(a){if(L[a+12>>2]<O(0)){xi(a)}}function yu(a,b){a=a|0;b=O(b);id(b,30104)}function xu(a,b){a=a|0;b=O(b);id(b,30159)}function wu(a,b){a=a|0;b=O(b);id(b,29641)}function vu(a,b){a=a|0;b=O(b);id(b,29754)}function uu(a,b){a=a|0;b=O(b);id(b,29926)}function tn(a,b){a=a|0;b=b|0;Ya(a+32|0,b)}function rt(a,b){a=a|0;b=b|0;Wo(a,b,7311)}function rs(a,b){a=a|0;b=b|0;Uo(a,b,7396)}function ro(a,b,c){Wd(a+12|0,b,c);lb(c,a)}function ft(a,b){a=a|0;b=b|0;Vo(a,b,7287)}function fl(a){a=a|0;return Yo(a,33504)|0}function ds(a,b){a=a|0;b=b|0;Uo(a,b,7407)}function bi(a,b){a=a|0;b=b|0;Ya(a+20|0,b)}function _s(a,b){a=a|0;b=b|0;Vo(a,b,3702)}function Vv(a){a=a|0;return O(L[a+76>>2])}function Vu(a,b){a=a|0;b=O(b);id(b,29697)}function Uu(a,b){a=a|0;b=O(b);id(b,29810)}function Tu(a,b){a=a|0;b=O(b);id(b,30046)}function Tj(a){a=a|0;return Yo(a,33412)|0}function Sv(a){a=a|0;return O(L[a+80>>2])}function Mv(a,b){a=a|0;b=b|0;Ya(a,b+16|0)}function Lv(a,b){a=a|0;b=b|0;Ya(b,a+16|0)}function Kv(a,b){a=a|0;b=b|0;Ya(a+28|0,b)}function Jv(a,b){a=a|0;b=b|0;Ya(a,b+28|0)}function Ju(a,b){a=a|0;b=O(b);id(b,29867)}function Iv(a,b){a=a|0;b=b|0;Ya(b,a+28|0)}function Gw(a){a=a|0;return Rk(a,60236)|0}function Fu(a,b){a=a|0;b=O(b);id(b,29983)}function At(a,b){a=a|0;b=b|0;Wo(a,b,7335)}function $v(a){a=a|0;wa();va(a+128|0);B()}function zu(a,b){a=a|0;b=b|0;rb(b,a+8|0)}function pm(a){H[a+72>>2]=0;return Kh(a)}function ov(a,b){a=a|0;b=b|0;Wa(21203,0)}function nv(a,b){a=a|0;b=b|0;Wa(21310,0)}function nf(a,b){H[a+8>>2]=b|-2147483648}function mv(a,b){a=a|0;b=b|0;Wa(21150,0)}function lv(a,b){a=a|0;b=b|0;Wa(21254,0)}function gd(a,b,c,d){Sh(a,b|1048576,c,d)}function dg(a,b){a=a|0;b=b|0;Ya(a+8|0,b)}function av(a,b){a=a|0;b=b|0;rb(a+8|0,b)}function _u(a,b){a=a|0;b=b|0;Bi(a+8|0,b)}function Zu(a,b){a=a|0;b=b|0;wi(a+8|0,b)}function Tp(a,b,c){H[a+4>>2]=c;H[a>>2]=b}function Kd(a){return(a|0)==32|a-9>>>0<5}function $u(a,b){a=a|0;b=b|0;Qb(a+8|0,b)}function wp(a){return(J[a+2>>1]<<2)+a|0}function uw(a){a=a|0;if(a){xp(tg(a),1)}}function uo(a,b,c){Ya(a,b);rb(a+12|0,c)}function Mi(a){return a-60480>>>2&65535}function $l(a,b,c){return Vi(a,b,c,3,4)}function Lh(a){Kh(a+72|0);return Kh(a)}function vg(a){H[a>>2]=41516;return a}function qo(a,b){Xb(a+12|0,b);lb(b,a)}function pp(a){a=a|0;return H[a+4>>2]}function bd(a,b){return yp(a,b,Yb(b))}function Za(a,b){return ql(a,b,Yb(b))}function Wt(a,b){a=a|0;b=O(b);lh(a,b)}function Vt(a,b){a=a|0;b=O(b);kh(a,b)}function Tc(a,b){return O(W(jg(a,b)))}function Gx(a,b){a=a|0;b=b|0;return 0}function Qe(a,b,c){a=a|0;b=b|0;c=c|0}function Iw(a,b){a=a|0;b=b|0;cl(a,b)}function Dj(a){return Ob(H[14030],a)}function Ch(a){return Ob(H[14025],a)}function jy(a,b,c){return ey(a,b,c)}function cg(a,b){Ya(a+28|0,b);Dn(a)}function bf(a,b){tc(a+80|0,b);Fn(a)}function ai(a,b){Ib(a,H[a+12>>2],b)}function We(a){return Zo(a,33412,2)}function Wc(a,b){Ld(a,H[a+12>>2],b)}function Pb(a,b){Xc(a,H[a+12>>2],b)}function Ni(a){return(a<<2)+60480|0}function Lf(a){return Zo(a,33504,3)}function Jp(a){a=a|0;return Pi(a)|0}function Hc(a,b){cd(a,H[a+12>>2],b)}function Gp(a,b){return(a|0)==(b|0)}function Gb(a,b){Zh(a,H[a+12>>2],b)}function Dp(a,b){H[a>>2]=b;return a}function dc(a,b,c){mc(a,b,c,O(.5))}function Xc(a,b,c){fp(a,b,c,24414)}function Op(a){return a&2147483647}function On(a,b,c){fp(a,b,c,24475)}function Ld(a,b,c){ep(a,b,c,24414)}function Dk(a,b,c){ep(a,b,c,24475)}function De(a){return(a&128)>>>7|0}function ti(a){return O(W(ui(a)))}function fv(a){a=a|0;H[a+20>>2]=0}function ew(a){a=a|0;return 11136}function _b(a){return O(W(sd(a)))}function Ii(a,b){return H[a+b>>2]}function Ep(a,b){return(b<<2)+a|0}function uk(a){return zb(a,0,68)}function qf(a,b){F[a+11|0]=b&127}function jq(a,b,c){Vi(a,b,c,0,0)}function fw(a){a=a|0;return 7272}function dw(a){a=a|0;return 8355}function cw(a){a=a|0;return 4126}function Dw(a){a=a|0;return 8024}function $a(a,b){wj(a,1,Yb(a),b)}function pi(a,b){qi(a,b,b+12|0)}function fd(a){a=a|0;return a|0}function Kg(a,b){return!Hb(a,b)}function yo(a,b,c){_o(a,b,c,4)}function tu(a){a=a|0;Va(pn(a))}function qs(a){a=a|0;Va($j(a))}function qp(a){a=a|0;Va(rm(a))}function kg(a,b,c){_o(a,b,c,3)}function gu(a){a=a|0;Va(fl(a))}function cs(a){a=a|0;Va(Zj(a))}function Zs(a){a=a|0;Va(ok(a))}function Xv(a){a=a|0;Va(Io(a))}function Ud(a,b,c){mc(a,a,b,c)}function Si(a){return a>>>0<11}function Qr(a){a=a|0;Va(Tj(a))}function Qi(a){a=a|0;Va(Pi(a))}function Nr(a){a=a|0;Va(Bj(a))}function Ms(a){a=a|0;Va(kk(a))}function Jt(a){a=a|0;Va(Gk(a))}function Fv(a){a=a|0;Va(gg(a))}function Cs(a){a=a|0;Va(Ah(a))}function vk(a){uk(uk(a)+68|0)}function oc(a){return Bc(a)^1}function aw(a){a=a|0;ug();B()}function ad(a){return zc(a)^1}function Ue(a){return Lc(a)^1}function Sb(a){_a(a,G[29370])}function Pw(a){a=a|0;return 0}function Bk(a){Ak(Ak(a)+72|0)}function tg(a){return a-24|0}function _d(a,b){H[a+4>>2]=b}function Zb(a,b){a=a|0;b=b|0}function Xk(a,b){Jh(a,b,1,1)}function Ui(a,b,c){Tp(a,b,c)}function ik(a,b){fq(a,40,b)}function Pp(a){return a&127}function xo(a,b){bp(a,b,4)}function wb(a,b){$o(a,b,3)}function rb(a,b){cp(a,b,4)}function lb(a,b){bp(a,b,3)}function hf(a,b){$o(a,b,4)}function hc(a){a=a|0;Va(a)}function dn(){xm(5965);B()}function Yd(a,b){H[a>>2]=b}function Ya(a,b){cp(a,b,3)}function Uk(a,b){hg(a,0,b)}function Re(){xm(8554);B()}function Of(a,b){dm(a,b,0)}function Fd(a,b){dc(a,a,b)}function xv(){return Ha|0}function xg(a){return a&1}function sc(a){Gd(a,O(1))}function Zd(a,b){F[a|0]=b}function Hv(a){a=a|0;Ha=a}function zh(a){a=a|0;B()}function zr(){return 1}function xi(a){ap(a,4)}function ug(){za();B()}function sw(){Oi();B()}function so(a){ap(a,3)}function Oi(){ug();B()}function $i(a){a=a|0}
// EMSCRIPTEN_END_FUNCS
e=I;p(q);var La=c([null,fd,rm,Nw,Mw,Jw,Iw,ga,ll,Gw,gl,Ew,Hw,Fw,Pl,Va,zi,ib,Kr,Jr,Or,Pr,rr,qr,pr,or,qj,Ax,zx,yx,Cl,Cl,nu,mu,tj,Cr,Dr,wr,vr,ur,tr,sr,Gg,yr,xr,Cg,bj,nr,mr,lr,kr,jr,ir,hr,gr,fr,er,dr,cr,br,ar,$q,_q,dy,Hq,Gq,Xq,Pq,Vq,Zq,Yq,Wq,Uq,Tq,Sq,Rq,Qq,Oq,Nq,Mq,Lq,Kq,Jq,Iq,$x,cy,by,ay,_x,Tw,Sw,Rw,Qw,Lw,Kw,fd,ww,xw,Bw,Jp,vw,pn,tu,fd,hc,fd,hc,fd,hc,Wv,ji,ao,Vv,Uv,Tv,Sv,Rv,Qv,Pv,Ov,Nv,fd,hc,go,ji,fo,Mv,Lv,Kv,Jv,Iv,Gv,gg,Fv,eo,ji,co,Ev,Dv,bo,Cv,Bv,Av,zv,fd,hc,Yu,fv,ev,dv,zn,zn,Xu,Wu,Vu,Uu,Tu,dg,Su,Ru,vv,uv,tv,Qu,Pu,hc,Ou,cv,Zb,Zb,Zb,Zb,Nu,Mu,Lu,Ku,Ju,dg,bi,Iu,sv,ei,rv,Hu,Gu,hc,pv,Jn,Zb,Zb,Zb,Zb,xn,wn,vn,un,Fu,dg,bi,tn,qv,ei,Bn,Eu,Du,hc,jv,In,ov,nv,mv,lv,xn,wn,vn,un,Cu,dg,bi,tn,kv,ei,Bn,Bu,Au,hc,zu,bv,av,$u,_u,Zu,yu,xu,wu,vu,uu,su,ru,qu,iv,hv,gv,pu,ou,Io,Xv,Yv,Zv,fd,hc,Ut,Tt,St,du,Xt,Wt,el,Vt,Rt,Qt,ku,lu,Wl,zh,sw,Zb,Zb,Qc,Lk,Se,Pt,$i,Ot,Kk,Nt,Jk,Mt,Zc,Af,Lt,Pc,Kt,ie,Gk,Jt,It,Ht,Qe,Pe,Gt,Zb,Ft,Et,Lk,Dt,Ct,Bt,At,zt,Wl,Pe,yt,Zb,xt,wt,vt,ut,tt,st,rt,qt,Pe,pt,Zb,ot,nt,mt,lt,ee,Pe,kt,jt,it,Qe,Qe,ht,gt,ft,et,Pe,dt,ct,bt,Qe,Qe,at,$s,_s,ee,ok,Zs,Ys,Zb,Xs,Ws,Vs,Us,Ts,Ss,Rs,Qs,Ps,Os,Ns,kk,Ms,Ls,Zb,Ks,Js,Is,Hs,Gs,Fs,Es,Ds,ee,Ah,Cs,Bs,Zb,Zb,As,zs,ys,xs,bk,ws,vs,us,ts,ss,rs,ee,$j,qs,ps,Zb,Zb,os,ns,ms,ls,bk,ks,js,is,hs,gs,fs,es,ds,ee,Zj,cs,bs,Zb,as,$r,_r,Zr,Yr,Xr,Wr,Vr,Ur,Tr,Sr,Rr,ee,zh,Tj,Qr,$t,Zt,Yt,hl,bu,el,au,dl,_t,fl,gu,hu,fu,eu,hl,ju,iu,dl,cu,Cj,zh,Bj,Nr,Mr,Lr,Zx,Yx,Xx,Wx,Vx,Ux,Tx,Sx,Rx,Qx,Px,Ox,Bq,Nx,Mx,Lx,Kx,Jx,Ix,Hx,Gx,Fx,Ex,Dx,Cx,Bx,xx,hx,gx,fx,ex,dx,cx,bx,ax,$w,_w,Zw,Yw,Xw,Ww,Vw,Uw,xq,wx,vx,ux,tx,sx,rx,qx,px,ox,nx,mx,lx,kx,jx,ix,Pw,Ow,fd,hc,Dw,Aw,zw,yw,Cw,Qi,pp,Jp,Qi,ug,fd,hc,$i,$i,rw,jw,lw,mw,hc,ew,hc,dw,qp,pp,Pi,Qi,qp,hc,cw,hc,iw,kw,nw,hc,qw,pw,ow,hc,fw,$v,aw]);function Ma(){return E.byteLength/65536|0}function Ra(Sa){Sa=Sa|0;var Na=Ma()|0;var Oa=Na+Sa|0;if(Na<Oa&&Oa<65536){var Pa=new ArrayBuffer(N(Oa,65536));var Qa=new Int8Array(Pa);Qa.set(F);F=new Int8Array(Pa);G=new Int16Array(Pa);H=new Int32Array(Pa);I=new Uint8Array(Pa);J=new Uint16Array(Pa);K=new Uint32Array(Pa);L=new Float32Array(Pa);M=new Float64Array(Pa);E=Pa;e=I}return Na}return{L:Object.create(Object.prototype,{grow:{value:Ra},buffer:{get:function(){return E}}}),M:aj,N:Ir,O:Hr,P:Gr,Q:Fr,R:Er,S:Br,T:Ar,U:zr,V:La,W:bw,X:wv,Y:$i,Z:Hv,_:yv,$:xv,aa:tw,ba:uw,ca:hw,da:gw,ea:_v}}return Ta(Ua)}
// EMSCRIPTEN_END_ASM
)(info)},instantiate:function(binary,info){return{then:function(ok){var module=new WebAssembly.Module(binary);ok({instance:new WebAssembly.Instance(module,info)})}}},RuntimeError:Error,isWasm2js:true};if(WebAssembly.isWasm2js){wasmBinary=[]}var wasmMemory;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module["HEAP8"]=HEAP8=new Int8Array(b);Module["HEAP16"]=HEAP16=new Int16Array(b);Module["HEAPU8"]=HEAPU8=new Uint8Array(b);Module["HEAPU16"]=HEAPU16=new Uint16Array(b);Module["HEAP32"]=HEAP32=new Int32Array(b);Module["HEAPU32"]=HEAPU32=new Uint32Array(b);Module["HEAPF32"]=HEAPF32=new Float32Array(b);Module["HEAPF64"]=HEAPF64=new Float64Array(b)}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;Module["monitorRunDependencies"]?.(runDependencies)}function removeRunDependency(id){runDependencies--;Module["monitorRunDependencies"]?.(runDependencies);if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module["onAbort"]?.(what);what="Aborted("+what+")";err(what);ABORT=true;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix="data:application/octet-stream;base64,";var isDataURI=filename=>filename.startsWith(dataURIPrefix);var isFileURI=filename=>filename.startsWith("file://");function findWasmBinary(){var f="animgencwa.wasm";if(!isDataURI(f)){return locateFile(f)}return f}var wasmBinaryFile;function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw"both async and sync fetching of the wasm failed"}function getBinaryPromise(binaryFile){if(!wasmBinary){return readAsync(binaryFile).then(response=>new Uint8Array(response),()=>getBinarySync(binaryFile))}return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){if(!binary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(binaryFile)&&!isFileURI(binaryFile)&&!ENVIRONMENT_IS_NODE&&typeof fetch=="function"){return fetch(binaryFile,{credentials:"same-origin"}).then(response=>{var result=WebAssembly.instantiateStreaming(response,imports);return result.then(callback,function(reason){err(`wasm streaming compile failed: ${reason}`);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(binaryFile,imports,callback)})})}return instantiateArrayBuffer(binaryFile,imports,callback)}function getWasmImports(){return{a:wasmImports}}function createWasm(){function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports["L"];updateMemoryViews();wasmTable=wasmExports["V"];addOnInit(wasmExports["M"]);removeRunDependency("wasm-instantiate");return wasmExports}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}var info=getWasmImports();if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);return false}}wasmBinaryFile??=findWasmBinary();instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult);return{}}var tempDouble;var tempI64;var ASM_CONSTS={46172:$0=>{jName=Module.UTF8ToString($0);console.log("buildFromXMLCell: filename "+jName+". Found no avatarStaticData")},46289:$0=>{jName=Module.UTF8ToString($0);console.log("buildFromXMLCell: filename "+jName+". Found no avatar")},46396:$0=>{jName=Module.UTF8ToString($0);console.log("buildFromXMLCell: filename "+jName+". Found no skeleton")},46505:$0=>{jName=Module.UTF8ToString($0);console.log("buildFromXMLCell: filename "+jName+". Found no joint")},46611:()=>{Module.Log_Trace("CreateSiGMLTables: Presynchronisation")},46674:()=>{Module.Log_Trace("CreateSiGMLTables: proximityValues")},46734:()=>{Module.Log_Trace("CreateSiGMLTables: loctypes")},46787:()=>{Module.Log_Trace("CreateSiGMLTables: locations")},46841:()=>{Module.Log_Trace("CreateSiGMLTables: relativeBodySides")},46903:()=>{Module.Log_Trace("CreateSiGMLTables: extremityDomSides")},46965:()=>{Module.Log_Trace("CreateSiGMLTables: CreateNonmanualTables")},47031:()=>{Module.Log_Trace("CreateSiGMLTables: Finishing")},47085:($0,$1)=>{Module.Log_Debug("AnimgenInstance::Init: initialized="+$0+" (vs "+$1+") -> debug")},47173:$0=>{jName=Module.UTF8ToString($0);Module.Log_Debug("AnimgenInstance::SetAvatar: Called for avatar: "+jName)},47285:$0=>{jName=Module.UTF8ToString($0);Module.Log_Debug('AnimgenInstance::SetAvatar: Failed for avatar: "'+jName+'" (theAG is NULL)')},47421:($0,$1,$2)=>{jName=Module.UTF8ToString($0);Module.Log_Debug('AnimgenInstance::SetAvatar: For avatar: "'+jName+'" (theAG->animgenState is '+$1+" vs "+$2+")")},47576:($0,$1,$2)=>{jName=Module.UTF8ToString($0);Module.Log_Debug('AnimgenInstance::SetAvatar: Failed for avatar: "'+jName+'" (theAG->animgenState is '+$1+" vs "+$2+")")},47738:$0=>{jName=Module.UTF8ToString($0);Module.Log_Debug("AnimgenInstance::SetAvatar: avatar "+jName+": Finishing")},47852:($0,$1)=>{jName=Module.UTF8ToString($1);Module.Log_Debug("animgenSetAvatar: id="+$0+' avatar="'+jName+'" -> debug')},47968:($0,$1,$2)=>{Module.Log_Debug("AnimgenInstance::AGIStartingStatus: jagid "+$0+": status "+$1+" frames "+$2);Module.CB_SeqStart($0,$1,$2)},48100:($0,$1,$2,$3)=>{jGloss=Module.UTF8ToString($1);Module.CB_SignStart($0,jGloss,$2,$3)},48179:($0,$1,$2,$3,$4)=>{Module.CB_FrameStart($0,$1,$2,$3,$4)},48221:($0,$1,$2)=>{fourCC=Module.UTF8ToString($1);newMorph={id4cc:fourCC};newMorph.amount=$2;Module.CB_Morph($0,newMorph)},48339:($0,$1,$2,$3,$4,$5,$6,$7,$8)=>{fourCC=Module.UTF8ToString($1);transArray=[$6];transArray.push($7);transArray.push($8);newBone={id4cc:fourCC};newBone.trans=transArray;rotArray=[$2];rotArray.push($3);rotArray.push($4);rotArray.push($5);newBone.rot=rotArray;Module.CB_Bone($0,newBone)},48619:$0=>{Module.Log_Debug("AnimgenInstance::AGIPostMortem: Testing Log_Debug");Module.CB_SeqEnd($0)},48716:$0=>{jName=Module.UTF8ToString($0);Module.Log_Debug("animgen_lite_initialise: avatar "+jName+": Starting")},48826:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": setupOptions")},48940:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": processArgs")},49053:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": ProcessOptions")},49169:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": BuildTables")},49282:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": BuildHanimAvatar")},49400:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("animgen_lite_initialise: avatar "+jName+": CreateWaitGesture")},49519:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: CreateMovementTables")},49611:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: CreateSiGMLTables")},49700:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: CreateSiGMLHandlers")},49791:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: CreateTrajectoryTable")},49884:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: GetConfigInfo")},49969:$0=>{jName=Module.UTF8ToString($0);Module.Log_Trace("BuildTables: InitialiseRepetitionSpecs")},50066:()=>{Module.Log_Trace("Hash: makeHash calling vmakeHashJRWG")},50128:()=>{Module.Log_Trace("Hash: vmakeHashJRWG starting")},50182:()=>{Module.Log_Trace("Hash: vmakeHashJRWG inc numKeys")},50239:()=>{Module.Log_Trace("Hash: vmakeHashJRWG first addItem")},50298:()=>{Module.Log_Trace("Hash: vmakeHashJRWG addItem")},50351:()=>{Module.Log_Trace("Hash: vmakeHashJRWG ending")}};class ExitStatus{name="ExitStatus";constructor(status){this.message=`Program terminated with exit(${status})`;this.status=status}}var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var noExitRuntime=Module["noExitRuntime"]||true;var stackRestore=val=>__emscripten_stack_restore(val);var stackSave=()=>_emscripten_stack_get_current();var exceptionCaught=[];var uncaughtExceptionCount=0;var ___cxa_begin_catch=ptr=>{var info=new ExceptionInfo(ptr);if(!info.get_caught()){info.set_caught(true);uncaughtExceptionCount--}info.set_rethrown(false);exceptionCaught.push(info);___cxa_increment_exception_refcount(ptr);return ___cxa_get_exception_ptr(ptr)};var exceptionLast=0;var ___cxa_end_catch=()=>{_setThrew(0,0);var info=exceptionCaught.pop();___cxa_decrement_exception_refcount(info.excPtr);exceptionLast=0};class ExceptionInfo{constructor(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24}set_type(type){HEAPU32[this.ptr+4>>2]=type}get_type(){return HEAPU32[this.ptr+4>>2]}set_destructor(destructor){HEAPU32[this.ptr+8>>2]=destructor}get_destructor(){return HEAPU32[this.ptr+8>>2]}set_caught(caught){caught=caught?1:0;HEAP8[this.ptr+12]=caught}get_caught(){return HEAP8[this.ptr+12]!=0}set_rethrown(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13]=rethrown}get_rethrown(){return HEAP8[this.ptr+13]!=0}init(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor)}set_adjusted_ptr(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr}get_adjusted_ptr(){return HEAPU32[this.ptr+16>>2]}}var ___resumeException=ptr=>{if(!exceptionLast){exceptionLast=ptr}throw exceptionLast};var setTempRet0=val=>__emscripten_tempret_set(val);var findMatchingCatch=args=>{var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0}var info=new ExceptionInfo(thrown);info.set_adjusted_ptr(thrown);var thrownType=info.get_type();if(!thrownType){setTempRet0(0);return thrown}for(var caughtType of args){if(caughtType===0||caughtType===thrownType){break}var adjusted_ptr_addr=info.ptr+16;if(___cxa_can_catch(caughtType,thrownType,adjusted_ptr_addr)){setTempRet0(caughtType);return thrown}}setTempRet0(thrownType);return thrown};var ___cxa_find_matching_catch_2=()=>findMatchingCatch([]);var ___cxa_find_matching_catch_3=arg0=>findMatchingCatch([arg0]);var ___cxa_rethrow=()=>{var info=exceptionCaught.pop();if(!info){abort("no exception to throw")}var ptr=info.excPtr;if(!info.get_rethrown()){exceptionCaught.push(info);info.set_rethrown(true);info.set_caught(false);uncaughtExceptionCount++}exceptionLast=ptr;throw exceptionLast};var ___cxa_throw=(ptr,type,destructor)=>{var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw exceptionLast};var ___cxa_uncaught_exceptions=()=>uncaughtExceptionCount;var syscallGetVarargI=()=>{var ret=HEAP32[+SYSCALLS.varargs>>2];SYSCALLS.varargs+=4;return ret};var syscallGetVarargP=syscallGetVarargI;var PATH={isAbs:path=>path.charAt(0)==="/",splitPath:filename=>{var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:(...paths)=>PATH.normalize(paths.join("/")),join2:(l,r)=>PATH.normalize(l+"/"+r)};var initRandomFill=()=>{if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){return view=>crypto.getRandomValues(view)}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require("crypto");var randomFillSync=crypto_module["randomFillSync"];if(randomFillSync){return view=>crypto_module["randomFillSync"](view)}var randomBytes=crypto_module["randomBytes"];return view=>(view.set(randomBytes(view.byteLength)),view)}catch(e){}}abort("initRandomDevice")};var randomFill=view=>(randomFill=initRandomFill())(view);var PATH_FS={resolve:(...args)=>{var resolvedPath="",resolvedAbsolute=false;for(var i=args.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?args[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder:undefined;var UTF8ArrayToString=(heapOrArray,idx=0,maxBytesToRead=NaN)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var FS_stdin_getChar_buffer=[];var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc(BUFSIZE);var bytesRead=0;var fd=process.stdin.fd;try{bytesRead=fs.readSync(fd,buf,0,BUFSIZE)}catch(e){if(e.toString().includes("EOF"))bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else{}if(!result){return null}FS_stdin_getChar_buffer=intArrayFromString(result,true)}return FS_stdin_getChar_buffer.shift()};var TTY={ttys:[],init(){},shutdown(){},register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close(stream){stream.tty.ops.fsync(stream.tty)},fsync(stream){stream.tty.ops.fsync(stream.tty)},read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char(tty){return FS_stdin_getChar()},put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output));tty.output=[]}},ioctl_tcgets(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets(tty,optional_actions,data){return 0},ioctl_tiocgwinsz(tty){return[24,80]}},default_tty1_ops:{put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output));tty.output=[]}}}};var alignMemory=(size,alignment)=>Math.ceil(size/alignment)*alignment;var mmapAlloc=size=>{abort()};var MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}MEMFS.ops_table||={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup(parent,name){throw MEMFS.doesNotExistError},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp},unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir(node){var entries=[".",".."];for(var key of Object.keys(node.contents)){entries.push(key)}return entries},symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents&&contents.buffer===HEAP8.buffer){allocated=false;ptr=contents.byteOffset}else{allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}if(contents){if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}HEAP8.set(contents,ptr)}}return{ptr,allocated}},msync(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=!noRunDep?getUniqueRunDependency(`al ${url}`):"";readAsync(url).then(arrayBuffer=>{onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},err=>{if(onerror){onerror()}else{throw`Loading data file "${url}" failed.`}});if(dep)addRunDependency(dep)};var FS_createDataFile=(parent,name,fileData,canRead,canWrite,canOwn)=>{FS.createDataFile(parent,name,fileData,canRead,canWrite,canOwn)};var preloadPlugins=Module["preloadPlugins"]||[];var FS_handledByPreloadPlugin=(byteArray,fullname,finish,onerror)=>{if(typeof Browser!="undefined")Browser.init();var handled=false;preloadPlugins.forEach(plugin=>{if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,onerror);handled=true}});return handled};var FS_createPreloadedFile=(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(`cp ${fullname}`);function processData(byteArray){function finish(byteArray){preFinish?.();if(!dontCreateFile){FS_createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}onload?.();removeRunDependency(dep)}if(FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror?.();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,processData,onerror)}else{processData(url)}};var FS_modeStringToFlags=str=>{var flagModes={r:0,"r+":2,w:512|64|1,"w+":512|64|2,a:1024|64|1,"a+":1024|64|2};var flags=flagModes[str];if(typeof flags=="undefined"){throw new Error(`Unknown file open mode: ${str}`)}return flags};var FS_getMode=(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode};var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var NODEFS={isWindows:false,staticInit(){NODEFS.isWindows=!!process.platform.match(/^win/);var flags=process.binding("constants");if(flags["fs"]){flags=flags["fs"]}NODEFS.flagsForNodeMap={1024:flags["O_APPEND"],64:flags["O_CREAT"],128:flags["O_EXCL"],256:flags["O_NOCTTY"],0:flags["O_RDONLY"],2:flags["O_RDWR"],4096:flags["O_SYNC"],512:flags["O_TRUNC"],1:flags["O_WRONLY"],131072:flags["O_NOFOLLOW"]}},convertNodeCode(e){var code=e.code;return ERRNO_CODES[code]},tryFSOperation(f){try{return f()}catch(e){if(!e.code)throw e;if(e.code==="UNKNOWN")throw new FS.ErrnoError(28);throw new FS.ErrnoError(NODEFS.convertNodeCode(e))}},mount(mount){return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)},createNode(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(28)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node},getMode(path){var stat;return NODEFS.tryFSOperation(()=>{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode|=(stat.mode&292)>>2}return stat.mode})},realPath(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join(...parts)},flagsForNode(flags){flags&=~2097152;flags&=~2048;flags&=~32768;flags&=~524288;flags&=~65536;var newFlags=0;for(var k in NODEFS.flagsForNodeMap){if(flags&k){newFlags|=NODEFS.flagsForNodeMap[k];flags^=k}}if(flags){throw new FS.ErrnoError(28)}return newFlags},node_ops:{getattr(node){var path=NODEFS.realPath(node);var stat;NODEFS.tryFSOperation(()=>stat=fs.lstatSync(path));if(NODEFS.isWindows){if(!stat.blksize){stat.blksize=4096}if(!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}stat.mode|=(stat.mode&292)>>2}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}},setattr(node,attr){var path=NODEFS.realPath(node);NODEFS.tryFSOperation(()=>{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}})},lookup(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)},mknod(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);NODEFS.tryFSOperation(()=>{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}});return node},rename(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);NODEFS.tryFSOperation(()=>fs.renameSync(oldPath,newPath));oldNode.name=newName},unlink(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);NODEFS.tryFSOperation(()=>fs.unlinkSync(path))},rmdir(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);NODEFS.tryFSOperation(()=>fs.rmdirSync(path))},readdir(node){var path=NODEFS.realPath(node);return NODEFS.tryFSOperation(()=>fs.readdirSync(path))},symlink(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);NODEFS.tryFSOperation(()=>fs.symlinkSync(oldPath,newPath))},readlink(node){var path=NODEFS.realPath(node);return NODEFS.tryFSOperation(()=>fs.readlinkSync(path))}},stream_ops:{open(stream){var path=NODEFS.realPath(stream.node);NODEFS.tryFSOperation(()=>{if(FS.isFile(stream.node.mode)){stream.shared.refcount=1;stream.nfd=fs.openSync(path,NODEFS.flagsForNode(stream.flags))}})},close(stream){NODEFS.tryFSOperation(()=>{if(FS.isFile(stream.node.mode)&&stream.nfd&&--stream.shared.refcount===0){fs.closeSync(stream.nfd)}})},dup(stream){stream.shared.refcount++},read(stream,buffer,offset,length,position){if(length===0)return 0;return NODEFS.tryFSOperation(()=>fs.readSync(stream.nfd,new Int8Array(buffer.buffer,offset,length),0,length,position))},write(stream,buffer,offset,length,position){return NODEFS.tryFSOperation(()=>fs.writeSync(stream.nfd,new Int8Array(buffer.buffer,offset,length),0,length,position))},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){NODEFS.tryFSOperation(()=>{var stat=fs.fstatSync(stream.nfd);position+=stat.size})}}if(position<0){throw new FS.ErrnoError(28)}return position},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr=mmapAlloc(length);NODEFS.stream_ops.read(stream,HEAP8,ptr,length,position);return{ptr,allocated:true}},msync(stream,buffer,offset,length,mmapFlags){NODEFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:class{name="ErrnoError";constructor(errno){this.errno=errno}},filesystems:null,syncFSRequests:0,readFiles:{},FSStream:class{shared={};get object(){return this.node}set object(val){this.node=val}get isRead(){return(this.flags&2097155)!==1}get isWrite(){return(this.flags&2097155)!==0}get isAppend(){return this.flags&1024}get flags(){return this.shared.flags}set flags(val){this.shared.flags=val}get position(){return this.shared.position}set position(val){this.shared.position=val}},FSNode:class{node_ops={};stream_ops={};readMode=292|73;writeMode=146;mounted=null;constructor(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.rdev=rdev}get read(){return(this.mode&this.readMode)===this.readMode}set read(val){val?this.mode|=this.readMode:this.mode&=~this.readMode}get write(){return(this.mode&this.writeMode)===this.writeMode}set write(val){val?this.mode|=this.writeMode:this.mode&=~this.writeMode}get isFolder(){return FS.isDir(this.mode)}get isDevice(){return FS.isChrdev(this.mode)}},lookupPath(path,opts={}){path=PATH_FS.resolve(path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split("/").filter(p=>!!p);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?`${mount}/${path}`:mount+path}path=path?`${node.name}/${path}`:node.name;node=node.parent}},hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode(node){FS.hashRemoveNode(node)},isRoot(node){return node===node.parent},isMountpoint(node){return!!node.mounted},isFile(mode){return(mode&61440)===32768},isDir(mode){return(mode&61440)===16384},isLink(mode){return(mode&61440)===40960},isChrdev(mode){return(mode&61440)===8192},isBlkdev(mode){return(mode&61440)===24576},isFIFO(mode){return(mode&61440)===4096},isSocket(mode){return(mode&49152)===49152},flagsToPermissionString(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup(dir){if(!FS.isDir(dir.mode))return 54;var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd(){for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStreamChecked(fd){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}return stream},getStream:fd=>FS.streams[fd],createStream(stream,fd=-1){stream=Object.assign(new FS.FSStream,stream);if(fd==-1){fd=FS.nextfd()}stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream(fd){FS.streams[fd]=null},dupStream(origStream,fd=-1){var stream=FS.createStream(origStream,fd);stream.stream_ops?.dup?.(stream);return stream},chrdev_stream_ops:{open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;stream.stream_ops.open?.(stream)},llseek(){throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push(...m.mounts)}return mounts},syncfs(populate,callback){if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`)}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type,opts,mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup(parent,name){return parent.node_ops.lookup(parent,name)},mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev(path,mode,dev){if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);old_node.parent=new_dir}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat(path){return FS.stat(path,true)},chmod(path,mode,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod(path,mode){FS.chmod(path,mode,true)},fchmod(fd,mode){var stream=FS.getStreamChecked(fd);FS.chmod(stream.node,mode)},chown(path,uid,gid,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown(path,uid,gid){FS.chown(path,uid,gid,true)},fchown(fd,uid,gid){var stream=FS.getStreamChecked(fd);FS.chown(stream.node,uid,gid)},truncate(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate(fd,len){var stream=FS.getStreamChecked(fd);if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open(path,flags,mode){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS_modeStringToFlags(flags):flags;if(flags&64){mode=typeof mode=="undefined"?438:mode;mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed(stream){return stream.fd===null},llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap(stream,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}if(!length){throw new FS.ErrnoError(28)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync(stream,buffer,offset,length,mmapFlags){if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile(path,opts={}){opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error(`Invalid encoding type "${opts.encoding}"`)}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile(path,data,opts={}){opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length,llseek:()=>0});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0;var randomByte=()=>{if(randomLeft===0){randomLeft=randomFill(randomBuffer).byteLength}return randomBuffer[--randomLeft]};FS.createDevice("/dev","random",randomByte);FS.createDevice("/dev","urandom",randomByte);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount(){var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup(parent,name){var fd=+name;var stream=FS.getStreamChecked(fd);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams(input,output,error){if(input){FS.createDevice("/dev","stdin",input)}else{FS.symlink("/dev/tty","/dev/stdin")}if(output){FS.createDevice("/dev","stdout",null,output)}else{FS.symlink("/dev/tty","/dev/stdout")}if(error){FS.createDevice("/dev","stderr",null,error)}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},staticInit(){FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={MEMFS,NODEFS}},init(input,output,error){FS.initialized=true;input??=Module["stdin"];output??=Module["stdout"];error??=Module["stderr"];FS.createStandardStreams(input,output,error)},quit(){FS.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath(parent,path,canRead,canWrite){parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS_getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}},createDevice(parent,name,input,output){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(!!input,!!output);FS.createDevice.major??=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open(stream){stream.seekable=false},close(stream){if(output?.buffer?.length){output(10)}},read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else{try{obj.contents=readBinary(obj.url);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}},createLazyFile(parent,name,url,canRead,canWrite){class LazyUint8Array{lengthKnown=false;chunks=[];get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}setDataGetter(getter){this.getter=getter}cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||"",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true}get length(){if(!this.lengthKnown){this.cacheLength()}return this._length}get chunkSize(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=(...args)=>{FS.forceLoadFile(node);return fn(...args)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,HEAP8,ptr,length,position);return{ptr,allocated:true}};node.stream_ops=stream_ops;return node}};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat(func,path,buf){var stat=func(path);HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=stat.mode;HEAPU32[buf+8>>2]=stat.nlink;HEAP32[buf+12>>2]=stat.uid;HEAP32[buf+16>>2]=stat.gid;HEAP32[buf+20>>2]=stat.rdev;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>2]=tempI64[0],HEAP32[buf+28>>2]=tempI64[1];HEAP32[buf+32>>2]=4096;HEAP32[buf+36>>2]=stat.blocks;var atime=stat.atime.getTime();var mtime=stat.mtime.getTime();var ctime=stat.ctime.getTime();tempI64=[Math.floor(atime/1e3)>>>0,(tempDouble=Math.floor(atime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAPU32[buf+48>>2]=atime%1e3*1e3*1e3;tempI64=[Math.floor(mtime/1e3)>>>0,(tempDouble=Math.floor(mtime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>2]=tempI64[0],HEAP32[buf+60>>2]=tempI64[1];HEAPU32[buf+64>>2]=mtime%1e3*1e3*1e3;tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>2]=tempI64[0],HEAP32[buf+76>>2]=tempI64[1];HEAPU32[buf+80>>2]=ctime%1e3*1e3*1e3;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>2]=tempI64[0],HEAP32[buf+92>>2]=tempI64[1];return 0},doMsync(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},getStreamFromFD(fd){var stream=FS.getStreamChecked(fd);return stream},varargs:undefined,getStr(ptr){var ret=UTF8ToString(ptr);return ret}};function ___syscall_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=syscallGetVarargI();if(arg<0){return-28}while(FS.streams[arg]){arg++}var newStream;newStream=FS.dupStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=syscallGetVarargI();stream.flags|=arg;return 0}case 12:{var arg=syscallGetVarargP();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0}return-28}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:{if(!stream.tty)return-59;return 0}case 21505:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcgets){var termios=stream.tty.ops.ioctl_tcgets(stream);var argp=syscallGetVarargP();HEAP32[argp>>2]=termios.c_iflag||0;HEAP32[argp+4>>2]=termios.c_oflag||0;HEAP32[argp+8>>2]=termios.c_cflag||0;HEAP32[argp+12>>2]=termios.c_lflag||0;for(var i=0;i<32;i++){HEAP8[argp+i+17]=termios.c_cc[i]||0}return 0}return 0}case 21510:case 21511:case 21512:{if(!stream.tty)return-59;return 0}case 21506:case 21507:case 21508:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcsets){var argp=syscallGetVarargP();var c_iflag=HEAP32[argp>>2];var c_oflag=HEAP32[argp+4>>2];var c_cflag=HEAP32[argp+8>>2];var c_lflag=HEAP32[argp+12>>2];var c_cc=[];for(var i=0;i<32;i++){c_cc.push(HEAP8[argp+i+17])}return stream.tty.ops.ioctl_tcsets(stream.tty,op,{c_iflag,c_oflag,c_cflag,c_lflag,c_cc})}return 0}case 21519:{if(!stream.tty)return-59;var argp=syscallGetVarargP();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=syscallGetVarargP();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tiocgwinsz){var winsize=stream.tty.ops.ioctl_tiocgwinsz(stream.tty);var argp=syscallGetVarargP();HEAP16[argp>>1]=winsize[0];HEAP16[argp+2>>1]=winsize[1]}return 0}case 21524:{if(!stream.tty)return-59;return 0}case 21515:{if(!stream.tty)return-59;return 0}default:return-28}}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?syscallGetVarargI():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_stat64(path,buf){try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}var __abort_js=()=>{abort("")};var runtimeKeepaliveCounter=0;var __emscripten_runtime_keepalive_clear=()=>{noExitRuntime=false;runtimeKeepaliveCounter=0};var isLeapYear=year=>year%4===0&&(year%100!==0||year%400===0);var MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335];var MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334];var ydayFromDate=date=>{var leap=isLeapYear(date.getFullYear());var monthDaysCumulative=leap?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE;var yday=monthDaysCumulative[date.getMonth()]+date.getDate()-1;return yday};var convertI32PairToI53Checked=(lo,hi)=>hi+2097152>>>0<4194305-!!lo?(lo>>>0)+hi*4294967296:NaN;function __localtime_js(time_low,time_high,tmPtr){var time=convertI32PairToI53Checked(time_low,time_high);var date=new Date(time*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var yday=ydayFromDate(date)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst}var timers={};var handleException=e=>{if(e instanceof ExitStatus||e=="unwind"){return EXITSTATUS}quit_(1,e)};var keepRuntimeAlive=()=>noExitRuntime||runtimeKeepaliveCounter>0;var _proc_exit=code=>{EXITSTATUS=code;if(!keepRuntimeAlive()){Module["onExit"]?.(code);ABORT=true}quit_(code,new ExitStatus(code))};var exitJS=(status,implicit)=>{EXITSTATUS=status;_proc_exit(status)};var _exit=exitJS;var maybeExit=()=>{if(!keepRuntimeAlive()){try{_exit(EXITSTATUS)}catch(e){handleException(e)}}};var callUserCallback=func=>{if(ABORT){return}try{func();maybeExit()}catch(e){handleException(e)}};var _emscripten_get_now=()=>performance.now();var __setitimer_js=(which,timeout_ms)=>{if(timers[which]){clearTimeout(timers[which].id);delete timers[which]}if(!timeout_ms)return 0;var id=setTimeout(()=>{delete timers[which];callUserCallback(()=>__emscripten_timeout(which,_emscripten_get_now()))},timeout_ms);timers[which]={id,timeout_ms};return 0};var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);var __tzset_js=(timezone,daylight,std_name,dst_name)=>{var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAPU32[timezone>>2]=stdTimezoneOffset*60;HEAP32[daylight>>2]=Number(winterOffset!=summerOffset);var extractZone=timezoneOffset=>{var sign=timezoneOffset>=0?"-":"+";var absOffset=Math.abs(timezoneOffset);var hours=String(Math.floor(absOffset/60)).padStart(2,"0");var minutes=String(absOffset%60).padStart(2,"0");return`UTC${sign}${hours}${minutes}`};var winterName=extractZone(winterOffset);var summerName=extractZone(summerOffset);if(summerOffset<winterOffset){stringToUTF8(winterName,std_name,17);stringToUTF8(summerName,dst_name,17)}else{stringToUTF8(winterName,dst_name,17);stringToUTF8(summerName,std_name,17)}};var readEmAsmArgsArray=[];var readEmAsmArgs=(sigPtr,buf)=>{readEmAsmArgsArray.length=0;var ch;while(ch=HEAPU8[sigPtr++]){var wide=ch!=105;wide&=ch!=112;buf+=wide&&buf%8?4:0;readEmAsmArgsArray.push(ch==112?HEAPU32[buf>>2]:ch==105?HEAP32[buf>>2]:HEAPF64[buf>>3]);buf+=wide?8:4}return readEmAsmArgsArray};var runEmAsmFunction=(code,sigPtr,argbuf)=>{var args=readEmAsmArgs(sigPtr,argbuf);return ASM_CONSTS[code](...args)};var _emscripten_asm_const_int=(code,sigPtr,argbuf)=>runEmAsmFunction(code,sigPtr,argbuf);var _emscripten_date_now=()=>Date.now();var getHeapMax=()=>2147483648;var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536|0;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignMemory(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};var ENV={};var getExecutableName=()=>thisProgram||"./this.program";var getEnvStrings=()=>{if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:lang,_:getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(`${x}=${env[x]}`)}getEnvStrings.strings=strings}return getEnvStrings.strings};var stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i){HEAP8[buffer++]=str.charCodeAt(i)}HEAP8[buffer]=0};var _environ_get=(__environ,environ_buf)=>{var bufSize=0;getEnvStrings().forEach((string,i)=>{var ptr=environ_buf+bufSize;HEAPU32[__environ+i*4>>2]=ptr;stringToAscii(string,ptr);bufSize+=string.length+1});return 0};var _environ_sizes_get=(penviron_count,penviron_buf_size)=>{var strings=getEnvStrings();HEAPU32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(string=>bufSize+=string.length+1);HEAPU32[penviron_buf_size>>2]=bufSize;return 0};function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var offset=convertI32PairToI53Checked(offset_low,offset_high);try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len){break}if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var wasmTable;var getWasmTableEntry=funcPtr=>wasmTable.get(funcPtr);var getCFunc=ident=>{var func=Module["_"+ident];return func};var writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer)};var stackAlloc=sz=>__emscripten_stack_alloc(sz);var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8(str,ret,size);return ret};var ccall=(ident,returnType,argTypes,args,opts)=>{var toC={string:str=>{var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=stringToUTF8OnStack(str)}return ret},array:arr=>{var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string"){return UTF8ToString(ret)}if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func(...cArgs);function onDone(ret){if(stack!==0)stackRestore(stack);return convertReturnValue(ret)}ret=onDone(ret);return ret};var cwrap=(ident,returnType,argTypes,opts)=>{var numericArgs=!argTypes||argTypes.every(type=>type==="number"||type==="boolean");var numericRet=returnType!=="string";if(numericRet&&numericArgs&&!opts){return getCFunc(ident)}return(...args)=>ccall(ident,returnType,argTypes,args,opts)};FS.createPreloadedFile=FS_createPreloadedFile;FS.staticInit();MEMFS.doesNotExistError=new FS.ErrnoError(44);MEMFS.doesNotExistError.stack="<generic error, no stack>";if(ENVIRONMENT_IS_NODE){NODEFS.staticInit()}var wasmImports={i:___cxa_begin_catch,k:___cxa_end_catch,e:___cxa_find_matching_catch_2,c:___cxa_find_matching_catch_3,H:___cxa_rethrow,b:___cxa_throw,G:___cxa_uncaught_exceptions,f:___resumeException,o:___syscall_fcntl64,s:___syscall_ioctl,t:___syscall_openat,J:___syscall_stat64,D:__abort_js,A:__emscripten_runtime_keepalive_clear,v:__localtime_js,B:__setitimer_js,K:__tzset_js,a:_emscripten_asm_const_int,l:_emscripten_date_now,I:_emscripten_resize_heap,E:_environ_get,F:_environ_sizes_get,C:_exit,n:_fd_close,r:_fd_read,w:_fd_seek,q:_fd_write,d:invoke_ii,h:invoke_iii,y:invoke_iiiiid,p:invoke_iiiiii,u:invoke_iij,g:invoke_v,m:invoke_vi,j:invoke_vii,x:invoke_viiii,z:_proc_exit};var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports["M"])();var _animgenInit=Module["_animgenInit"]=()=>(_animgenInit=Module["_animgenInit"]=wasmExports["N"])();var _animgenAllocate=Module["_animgenAllocate"]=(a0,a1,a2,a3,a4)=>(_animgenAllocate=Module["_animgenAllocate"]=wasmExports["O"])(a0,a1,a2,a3,a4);var _animgenSetOutput=Module["_animgenSetOutput"]=(a0,a1)=>(_animgenSetOutput=Module["_animgenSetOutput"]=wasmExports["P"])(a0,a1);var _animgenSetAvatar=Module["_animgenSetAvatar"]=(a0,a1,a2,a3,a4,a5)=>(_animgenSetAvatar=Module["_animgenSetAvatar"]=wasmExports["Q"])(a0,a1,a2,a3,a4,a5);var _animgenSetSequence=Module["_animgenSetSequence"]=(a0,a1)=>(_animgenSetSequence=Module["_animgenSetSequence"]=wasmExports["R"])(a0,a1);var _animgenGenerateFrames=Module["_animgenGenerateFrames"]=(a0,a1)=>(_animgenGenerateFrames=Module["_animgenGenerateFrames"]=wasmExports["S"])(a0,a1);var _animgenDeAllocate=Module["_animgenDeAllocate"]=a0=>(_animgenDeAllocate=Module["_animgenDeAllocate"]=wasmExports["T"])(a0);var _animgenTerminate=Module["_animgenTerminate"]=()=>(_animgenTerminate=Module["_animgenTerminate"]=wasmExports["U"])();var __emscripten_timeout=(a0,a1)=>(__emscripten_timeout=wasmExports["W"])(a0,a1);var _setThrew=(a0,a1)=>(_setThrew=wasmExports["X"])(a0,a1);var __emscripten_tempret_set=a0=>(__emscripten_tempret_set=wasmExports["Y"])(a0);var __emscripten_stack_restore=a0=>(__emscripten_stack_restore=wasmExports["Z"])(a0);var __emscripten_stack_alloc=a0=>(__emscripten_stack_alloc=wasmExports["_"])(a0);var _emscripten_stack_get_current=()=>(_emscripten_stack_get_current=wasmExports["$"])();var ___cxa_decrement_exception_refcount=a0=>(___cxa_decrement_exception_refcount=wasmExports["aa"])(a0);var ___cxa_increment_exception_refcount=a0=>(___cxa_increment_exception_refcount=wasmExports["ba"])(a0);var ___cxa_can_catch=(a0,a1,a2)=>(___cxa_can_catch=wasmExports["ca"])(a0,a1,a2);var ___cxa_get_exception_ptr=a0=>(___cxa_get_exception_ptr=wasmExports["da"])(a0);var dynCall_iij=Module["dynCall_iij"]=(a0,a1,a2,a3)=>(dynCall_iij=Module["dynCall_iij"]=wasmExports["ea"])(a0,a1,a2,a3);function invoke_iii(index,a1,a2){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_ii(index,a1){var sp=stackSave();try{return getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_v(index){var sp=stackSave();try{getWasmTableEntry(index)()}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}Module["ccall"]=ccall;Module["cwrap"]=cwrap;Module["UTF8ToString"]=UTF8ToString;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();Module["onRuntimeInitialized"]?.();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(()=>{setTimeout(()=>Module["setStatus"](""),1);doRun()},1)}else{doRun()}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();
// -------- AvDefView.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvDefView, FourCC, Logger, RQ, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar");
FourCC = cwaenv.get("FourCC");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
//--------------
AvDefView = class AvDefView {
//--------------
constructor(av, data, pngURIGen) {
var fpsc;
this.av = av;
this.data = data;
this.pngURIGen = pngURIGen;
//----------
// Avatar def DataView index:
this.i = 0;
//CAS frame indexing/timing data:
[this.ic, this.tc, fpsc] = [0, 0, 25];
}
nextUbyte() {
var ii;
ii = this.i;
this.i += 1;
return this.data.getUint8(ii);
}
//--------
nextUshort() {
var ii;
ii = this.i;
this.i += 2;
return this.data.getUint16(ii, true);
}
//---------
nextUint() {
var ii;
ii = this.i;
this.i += 4;
return this.data.getUint32(ii, true);
}
//-------
nextFloat() {
var ii;
ii = this.i;
this.i += 4;
return this.data.getFloat32(ii, true);
}
//--------
nextBool() {
return this.nextUbyte() !== 0;
}
//-------
nextStr() {
var i, j, len, ref, str;
//------
[len, str] = [this.nextUint(), ""];
for (j = i = 0, ref = len; (0 <= ref ? i < ref : i > ref); j = 0 <= ref ? ++i : --i) {
str += String.fromCharCode(this.nextUbyte());
}
return str;
}
nextStr4cc() {
return FourCC.fourCCInt(this.nextStr());
}
//---------
nextVec2() {
var i, j, results;
results = [];
for (j = i = 0; i < 2; j = ++i) {
results.push(this.nextFloat());
}
return results;
}
//-------
nextVec3() {
var j;
return V3.copyOfV3((function() {
var i, results;
results = [];
for (j = i = 0; i < 3; j = ++i) {
results.push(this.nextFloat());
}
return results;
}).call(this));
}
//-------
nextQuat() {
var j;
return RQ.copyOfQV((function() {
var i, results;
results = [];
for (j = i = 0; i < 4; j = ++i) {
results.push(this.nextFloat());
}
return results;
}).call(this));
}
//-------
nextMorphSet() {
var ms, nml, ost, vtx, wgt;
//-----------
vtx = this.nextUint();
wgt = this.nextFloat();
ost = this.nextVec3();
nml = this.nextVec3();
return ms = {
vertex: vtx,
weight: wgt,
offset: ost,
normal: nml
};
}
nextCASMorph() {
var amt, id4, morph;
//-----------
id4 = this.nextUint();
amt = this.nextFloat();
return morph = {
id4cc: id4,
amount: amt
};
}
nextCASTRSet() {
var id4, rtn, trn, trset;
//-----------
id4 = this.nextUint();
trn = this.nextVec3();
rtn = this.nextQuat();
return trset = {
id4cc: id4,
trans: trn,
rot: rtn
};
}
// CAS Frame sequence data:
resetCASTiming(fps) {
return [this.ic, this.tc, this.fpsc] = [0, 0, fps];
}
//-------------
nextCASFrame() {
var bns, dur, frame, icur, inxt, m, mphs, nm, nt, s, tcur, tnxt;
//-----------
inxt = this.ic + 1;
tnxt = inxt * (1000 / this.fpsc);
[icur, tcur, dur, this.ic, this.tc] = [this.ic, this.tc, tnxt - this.tc, inxt, tnxt];
if (typeof lggr.trace === "function") {
lggr.trace(`AvDefView: iAmb=${icur}  tAmb=${tcur}`);
}
nm = this.nextUint();
mphs = (function() {
var i, ref, results;
results = [];
for (m = i = 0, ref = nm; (0 <= ref ? i < ref : i > ref); m = 0 <= ref ? ++i : --i) {
results.push(this.nextCASMorph());
}
return results;
}).call(this);
nt = this.nextUint();
bns = (function() {
var i, ref, results;
results = [];
for (s = i = 0, ref = nt; (0 <= ref ? i < ref : i > ref); s = 0 <= ref ? ++i : --i) {
results.push(this.nextCASTRSet());
}
return results;
}).call(this);
return frame = {
time: tcur,
duration: dur,
morphs: mphs,
bones: bns
};
}
nextSkelBone() {
var bone, id4, iix, len, pr4, rtn, trn;
//-----------
id4 = this.nextUint();
pr4 = this.nextUint();
trn = this.nextVec3();
rtn = this.nextQuat();
iix = this.nextQuat();
len = this.nextFloat();
return bone = {
id4cc: id4,
parent4cc: pr4,
trans: trn,
rot: rtn,
invInitXRot: iix,
length: len
};
}
checkBytes(lo, n, pfx) {
var bhex, i, ihex, k, lpad, ref, ref1, str, thisadv;
//---------
thisadv = this;
lpad = function(s, w) { // pad numeric string with zeros to width w;
var i, ixs, ns, ref, ref1, ss;
[ss, ns] = [s, s.length];
if (ns < w) {
for (ixs = i = ref = ns, ref1 = w; (ref <= ref1 ? i < ref1 : i > ref1); ixs = ref <= ref1 ? ++i : --i) {
ss = "0" + ss;
}
}
return ss;
};
bhex = function(b) {
return lpad(b.toString(16), 2);
};
ihex = function(z) {
return lpad(z.toString(16), 8);
};
str = "";
for (k = i = ref = lo, ref1 = lo + n; (ref <= ref1 ? i < ref1 : i > ref1); k = ref <= ref1 ? ++i : --i) {
str += (bhex(this.data.getUint8(k))) + " ";
}
return typeof lggr.trace === "function" ? lggr.trace("AvDefView: ") : void 0; //{ihex lo} #{pfx||''}: #{str}"
}
bin2str(getfun, lo, n) {
var k, parts;
//------
parts = (function() {
var i, ref, ref1, results;
results = [];
for (k = i = ref = lo, ref1 = lo + n; (ref <= ref1 ? i < ref1 : i > ref1); k = ref <= ref1 ? ++i : --i) {
results.push(String.fromCharCode(getfun(k)));
}
return results;
})();
return parts.join("");
}
base64Str(getfun, lo, n, pfx) {
var chars, k;
//--------
chars = (function() {
var i, ref, ref1, results;
results = [];
for (k = i = ref = lo, ref1 = lo + n; (ref <= ref1 ? i < ref1 : i > ref1); k = ref <= ref1 ? ++i : --i) {
results.push(String.fromCharCode(getfun(k)));
}
return results;
})();
return window.btoa(chars.join(""));
}
};
// getAllAvData: ->
//   @version = do @nextStr
//   lggr.debug? "Version: #{@version}"
//   lggr.debug "(now i=#{@i})"
//   @scale = do @nextFloat
//   @volMin = do @nextVec3
//   @volMax = do @nextVec3
//   @matRefl = do @nextVec3
//   @skelYOffset = do @nextFloat
//   @nMeshes = do @nextUint
//   lggr.debug "scale: #{@scale}"
//   lggr.debug "Mesh count: #{@nMeshes}"
//   lggr.debug "(now i=#{@i})"
//   for m in [0...@nMeshes]
//     @lodRange = do @nextFloat
//     @nMeshPts = do @nextUint
//     lggr.debug "Mesh points count: #{@nMeshPts}"
//     lggr.debug "(now i=#{@i})"
//     for p in [0...@nMeshPts]
//       @nInfluences = do @nextUint
//       mpiRange = [0...@nInfluences]
//       mpiOffsets = (do @nextVec3 for j in mpiRange)
//       mpiBaseNorms = (do @nextVec3 for j in mpiRange)
//       mpiNames = (do @nextStr for j in mpiRange)
//       mpiWeights = (do @nextFloat for j in mpiRange)
//       mpiBEDistances = (do @nextFloat for j in mpiRange)
//     @nTriStripIxs = do @nextUint
//     lggr.debug "TriStrip Index count: #{@nTriStripIxs}"
//     lggr.debug "(now i=#{@i})"
//     @triStripIndices = (do @nextUshort for j in [0...@nTriStripIxs])
//     @nDupVertices = do @nextUint
//     lggr.debug "Dup Vertices count: #{@nDupVertices}"
//     lggr.debug "(now i=#{@i})"
//     @dupVtxIndices = (do @nextUint for j in [0...@nDupVertices])
//     @nTxtrCoordPairs = do @nextUint
//     lggr.debug "Texture coord pairs count: #{@nTxtrCoordPairs}"
//     lggr.debug "(now i=#{@i})"
//     @textureCoordPairs = (do @nextVec2 for j in [0...@nTxtrCoordPairs])
//     @nMorphTargets = do @nextUint
//     lggr.debug "Morph Target count: #{@nMorphTargets}"
//     lggr.debug "(now i=#{@i})"
//     for t in [0...@nMorphTargets]
//       @mtName = do @nextStr
//       @nMorphSets = do @nextUint
//       @morphSets = (do @nextMorphSet for j in [0...@nMorphSets])
//   @nInitPose = do @nextUint
//   lggr.debug "Init Pose bone count: #{@nInitPose}"
//   lggr.debug "(now i=#{@i})"
//   initPose = (do @nextCASTRSet for j in [0...@nInitPose])
//   @nSkelBones = do @nextUint
//   lggr.debug "Skel bone count: #{@nSkelBones}"
//   lggr.debug "(now i=#{@i})"
//   skelBones = (do @nextSkelBone for j in [0...@nSkelBones])
//   #@checkBytes @i, 16, "at nAmbient"    #++++++++++++++++++++++++
//   @nAmbFrames = do @nextUint
//   lggr.debug "Ambient frames count: #{@nAmbFrames}"
//   lggr.debug "(now i=#{@i})"
//   if @nAmbFrames is 0
//     @ambFPS = -1
//     @ambFrames = []
//   else
//     @ambFPS = do @nextFloat
//     @resetCASTiming @ambFPS
//     @ambFrames = (do @nextCASFrame for j in [0...@nAmbFrames])
//   doLogLastAF = true
//   if doLogLastAF and @nAmbFrames
//     lastAF = @ambFrames[@nAmbFrames-1]
//     lastAFBones = lastAF.bones
//     lastAFBone = lastAFBones[lastAFBones.length-1]
//     lastAFBoneTrans = lastAFBone.trans
//     lggr.debug "Last ambient frame: i=#{@nAmbFrames-1}  t=#{lastAF.time}  "+
//       "nBones=#{lastAFBones.length}  "
//     lggr.debug "... id4cc: #{lastAFBone.id4cc.toString(16)}"
//     lggr.debug "... transX: #{lastAFBone.trans[0]}"
//   #@checkBytes @i, 8, "at tFileName"    #++++++++++++++++++++++++
//   @tFileName = do @nextStr
//   @tFlags = (do @nextBool for j in [0...12])
//   lggr.debug "Texture file:    [#{@tFileName}]"
//   lggr.debug "Embedded flag:   #{@tFlags[0]}"
//   lggr.debug "Compressed flag: #{@tFlags[1]}"
//   lggr.debug "PNG fmt. flag:   #{@tFlags[2]}"
//   lggr.debug "TGA fmt. flag:   #{@tFlags[3]}"
//   lggr.debug "JIB fmt. flag:   #{@tFlags[4]}"
//   lggr.debug "(now i=#{@i})"
//   #@tWidth = do @nextUint
//   #@tHeight = do @nextUint
//   nRemaining = @data.byteLength - @i
//   lggr.debug "Remaining block length: #{nRemaining}."
//   lggr.debug "----------------------------------------"
//   # Test conversion to base64
//   #
//   blockSize = @data.byteLength
//   thedata = @data;  dget = (k) -> thedata.getUint8 k
//   #lggr.debug "====  original  ===="
//   #lggr.debug "#{kk}: #{dget kk}" for kk in [256..264]
//   d64 = @base64Str dget, 0, blockSize
//   #lggr.debug "====  d64 [16384..18432)  ===="
//   #lggr.debug "#{d64[16384...18432]}"
//   invd64 = window.atob d64
//   dcopy = (invd64.charCodeAt kk for kk in [0...invd64.length])
//   lggr.debug "len dcopy: #{dcopy.length}"
//   #lggr.debug "====  copied  ===="
//   #lggr.debug "#{kk}: #{dcopy[kk]}" for kk in [256..264]
//   nMatch = 0
//   nMatch += Number((dget kk) is dcopy[kk]) for kk in [0...blockSize]
//   mmsg = if nMatch is blockSize then "OK" else "fail: nMatch=#{nMatch}"
//   lggr.debug "base64 test #{mmsg}."
// Export
cwaenv.add(AvDefView, "AvDefView");
// (End AvDefView.coffee)
}).call(this);
// -------- AvDataAccess.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvDataAccess, AvDefView, Config, Logger, cwaenv, document, lggr, setTimeout, zip;
document = this.document;
setTimeout = this.setTimeout;
zip = this.zip;
cwaenv = this.getCWAEnv();
Config = cwaenv.get("Config");
AvDefView = cwaenv.get("AvDefView");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar"); // , "trace" # debug
AvDataAccess = (function() {
//-----------------
class AvDataAccess {
static IS_PNG(ename) {
return /.+\.png$/.test(ename);
}
//------
constructor(avName, avDefHandler) {
var aitmap, aittag, ename, ref, tag;
// "Instance" members.
/*
zip.js
------
Readers:
zip.TextReader( txt )
zip.BlobReader( blob )
zip.Data64URIReader( dataURI )
zip.HttpReader( url )
zip.HttpRangeReader( url )
Writers:
zip.TextWriter()
zip.BlobWriter()
zip.FileWriter( fileEntry )
zip.Data64URIWriter( [mimeString] )
* Added to the standard repertoire:
zip.DataViewWriter( bytelength )
*/
this.setStatus = this.setStatus.bind(this);
this.extractAvDefEntry = this.extractAvDefEntry.bind(this);
// Process avatar definition #using provided AvDefHandler
this.procAvDef = this.procAvDef.bind(this);
this.avName = avName;
this.avDefHandler = avDefHandler;
//----------
// avDefHandler may be undefined, but base and avName should be defined
this.setStatus("Initialising");
this.avURL = `${Config.getAvBase(this.avName)}${this.avName}.jar`;
this.avDataView = false;
// Copy the standard filename-->tag map.
aitmap = {};
aittag = [];
ref = AvDataAccess.STD_JARP_ITEM_TAG_MAP;
for (ename in ref) {
tag = ref[ename];
aitmap[ename] = tag;
if ((aittag.indexOf(tag)) === -1) {
aittag.push(tag);
}
}
this.avItemTagMap = aitmap;
this.avItemTags = aittag;
// Promise created by _AsynchAvJARScan
this.scanZIP = null;
//Populated by ZIP scan
this.entries = {};
this.pngEntries = {};
this.XMLs = {};
this._AsynchAvJARScan();
}
setStatus(msg) {
msg = `AvDataAccess for ${this.avName}: ` + msg;
this.status = msg;
return typeof lggr.trace === "function" ? lggr.trace(msg) : void 0;
}
_checksumdv(dv, prev = 0) {
var c, i, j, ref;
//----------
c = prev;
for (i = j = 0, ref = dv.byteLength; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
c = (((((c >>> 1) + ((c & 1) << 15)) | 0) + ((dv.getUint8(i)) & 0xff)) & 0xffff) | 0;
}
return c;
}
_startZIPScan(zURL, entryFun, doneFun, errorFun) {
var entriesFun, failFun;
//------------
entriesFun = function(entries) {
var N, entry, i;
N = entries.length;
if (typeof lggr.debug === "function") {
lggr.debug(`AvDataAccess: ${zURL} has ${N} ZIP entries.`);
}
for (i in entries) {
entry = entries[i];
entryFun(i, entry);
}
return doneFun(N);
};
failFun = (error) => {
lggr.warn(`AvDataAccess: Error for ${zURL}: ${error}`);
return errorFun(`Avatar ${this.avName}: ${error}`);
};
// do doneFun  # entry count arg is undefined
// 3 args: HTTP zip reader, reader callback, error callback
// The reader callback delivers a ZipReader.
return zip.createReader(new zip.HttpReader(zURL), (function(zrdr) {
return zrdr.getEntries(entriesFun);
}), failFun);
}
_AsynchAvJARScan() {
var N_ap, avPfx, jarURL;
//--------------
this.setStatus("Scanning ZIP entries");
jarURL = this.avURL;
avPfx = `${this.avName}/`;
N_ap = avPfx.length;
if (typeof lggr.debug === "function") {
lggr.debug(`AsynchAvJARScan started url=${jarURL}`);
}
return this.scanZIP = new Promise((resolve, reject) => {
var doneAllHandler, entryHandler;
entryHandler = (i, entry) => {
var aitag, efname, ename, szc, szu;
efname = entry.filename;
if ((efname.substring(0, N_ap)) === avPfx) {
ename = efname.substring(N_ap);
aitag = this.avItemTagMap[ename];
if (aitag) {
this.entries[aitag] = entry;
} else if (AvDataAccess.IS_PNG(ename)) {
this.pngEntries[ename] = entry;
}
szc = entry.compressedSize;
szu = entry.uncompressedSize;
if (szc === 0) {
return typeof lggr.trace === "function" ? lggr.trace(`AsynchAvJARScan ${this.avName}: entry '${ename}': (empty)`) : void 0;
} else {
return typeof lggr.trace === "function" ? lggr.trace(`AsynchAvJARScan ${this.avName}: entry '${ename}': ${szc}/${szu}`) : void 0;
}
}
};
doneAllHandler = (N) => {
if (N) {
if (typeof lggr.debug === "function") {
lggr.debug(`AsynchAvJARScan ${this.avName}: Ended url=${jarURL}. Entries=${N}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`AsynchAvJARScan ${this.avName}: Entries:  ${Object.keys(this.entries)}`);
}
this.setStatus(`Found ${N} ZIP entries`);
} else {
// reject new Error "Scan of JAR #{jarURL} failed"
this.setStatus(`Scan of JAR ${jarURL} failed`);
}
return resolve(this);
};
return this._startZIPScan(jarURL, entryHandler, doneAllHandler, reject);
});
}
extractAvDefEntry(ent) {
if (typeof lggr.trace === "function") {
lggr.trace(`extractAvDefEntry: Seeking ${ent} for ${this.avName}`);
}
return this.scanZIP.then((ada) => {
var base, theEntry;
theEntry = ada.entries[ent];
if (theEntry != null) {
if (typeof lggr.trace === "function") {
lggr.trace(`extractAvDefEntry: Valid ${ent} for ${this.avName}`);
}
return (base = ada.XMLs)[ent] != null ? base[ent] : base[ent] = new Promise((resolveXML, rejectXML) => {
var DVWriter, cb;
if (typeof lggr.trace === "function") {
lggr.trace(`extractAvDefEntry: Create Promise for ${ent} for ${this.avName}`);
}
cb = (content) => {
if (ent === AvDataAccess.STD_JARP_TAG) {
if (typeof lggr.trace === "function") {
lggr.trace(`extractAvDefEntry: Loaded ${ent} for ${this.avName}: byteLength=${content.byteLength}`);
}
} else {
if (typeof lggr.trace === "function") {
lggr.trace(`extractAvDefEntry: Loaded ${ent} for ${this.avName}: length=${content.length}`);
}
}
return resolveXML(content);
};
if (ent === AvDataAccess.STD_JARP_TAG) {
DVWriter = new zip.DataViewWriter(theEntry.uncompressedSize);
} else {
DVWriter = new zip.TextWriter("UTF-8");
}
theEntry.getData(DVWriter, cb);
return void 0;
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`extractAvDefEntry: No ${ent} for ${this.avName}`);
}
return Promise.reject(new Error(`No ${ent} for ${this.avName}`));
}
});
}
procAvDef() {
return (this.extractAvDefEntry(AvDataAccess.STD_JARP_TAG)).then((dv) => {
if (typeof lggr.info === "function") {
lggr.info(`AvDataAccess: Process DataView for ${this.avName}: len=${dv.byteLength} chk=${this._checksumdv(dv)}`);
}
this.avDataView = dv;
return new AvDefView(this.avName, this.avDataView, this._getPNGURIGenerator());
});
}
// Returns a function that, given the entry name for a PNG file,
// returns an in-memory data URI string generator for that entry. (If
// there is no PNG entry with the given name the generator will return
// a null URL string.)
// Looks crazily overcomplicated. Considering use, cannot see point of the outer level of function call. JRWG
_getPNGURIGenerator() {
//------------------
// Result: a function returning the URL generator for a given PNG
// file name.
return (pngName) => {
var pngEntry;
pngEntry = this.pngEntries[pngName];
// Result: PNG URI generator for the given PNG file:
return function(pngHandler) {
if (pngEntry) {
// Asynchronous delivery of PNG data.
pngEntry.getData(new zip.Data64URIWriter("image/png"), (function(pngURI) {
return pngHandler(pngURI);
}));
} else {
// Asynchronous delivery of null PNG.
setTimeout((function() {
return pngHandler(null);
}), 0);
}
return void 0; // void result from PNG URI generator
};
};
}
};
//-----------------
// "Static" members.
AvDataAccess.STD_JARP_ITEM_TAG_MAP = {
//------------------
"asd.xml": "asd",
"avatardef.jarp": "avDef",
"avatardef.arp": "avDef",
"config.xml": "config",
"nonmanuals.xml": "nonManuals"
};
AvDataAccess.STD_JARP_TAG = "avDef";
return AvDataAccess;
}).call(this);
// Export
cwaenv.add(AvDataAccess, "AvDataAccess");
// (End AvDataAccess.coffee)
}).call(this);
// -------- AvatarCamera.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvatarCamera, Logger, M4, RQ, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
M4 = cwaenv.get("Mat4");
AvatarCamera = (function() {
// Mangled/extended version of Wayne''s orbit_camera.js .
//-----------------
class AvatarCamera {
//-----------------
constructor(gl, camData, yAdjust, FROM_METRES) {
this.touchstart = this.touchstart.bind(this);
this.touchend = this.touchend.bind(this);
this.touchmove = this.touchmove.bind(this);
this.gl = gl;
this.camData = camData;
this.yAdjust = yAdjust;
this.FROM_METRES = FROM_METRES;
//----------
// Camera parameters -- as for JARP -- in @camData:
// Target (c.o.r.) [X,Y],  CamLoc [R,theta,phi], FOV,
//    Rotation Limits [l,r]
// Target Z==0,  CamLoc theta: from +Z in XZ plane,
//    phi: from XZ towards +Y;
// Lengths (X,Y,R):  in metres.
// Angles (theta,phi,FOV,l,r): in degrees.
// Typical values:  [ 0,0,  4,12,19,  30,  -1,-1 ];
// Psuedo-constants.
this.X_UNIT = V3.makeV3(1, 0, 0);
this.Y_UNIT = V3.makeV3(0, 1, 0);
// FROM_METRES scales lengths from metres to avatar/renderer''s
// internal units.
//@FROM_METRES
// The matrices defined by this camera for the GL Draw*() functions.
this.viewMat = AvatarCamera.makeIdTRMat();
this.projMat = AvatarCamera.makeIdTRMat();
// NB
// These matrices cannot be properly set in this ctor, because we
// need prototype methods that are not yet defined/accessible -- so
// we cache the necessary data now, and rely on the initial
// invocation of checkUpdateViewport() -- via update() -- to complete
// their initialisation.
// Data for projection matrix:
// - Viewport dimensions -- initially unknown, supplied as update
//   parameters;
// - Clip-plane Z values (metres);
// - FoV (degrees).
this.viewWidth = -1;
this.viewHeight = -1;
this.Z_NEAR = 0.05;
this.Z_FAR = 500;
this.FOV = this.camData[5];
// Data defining the camera:
// - rotation of "looking-at" vector(cam/eye to target/c.o.r.);
// - radius, i.e. length of "looking-at" vector;
// - target position.
this.qCamRot = AvatarCamera.createRotation(this.Y_UNIT, 0);
this.orbitRadius = this.camData[2];
this.camTarget = V3.makeV3(this.camData[0], this.camData[1] + this.yAdjust, 0);
// Cache camera rotation angles ("theta", "phi") for first viewport
// update.
this.initCamRots = [this.camData[3], -this.camData[4]];
// Workspace for view matrix computation -- saves dynamic allocation.
this.camEye = V3.make3Vec();
this.camEyeR = V3.make3Vec();
this.camTargetR = V3.make3Vec();
// Mouse-related data for camera control through mouse drags.
// Drag mode values:
// -ve: idle;
// 0:   no modifier keys -- rotate round Y-axis;
// 1:   SHIFT  -- up/down means zoom in/out;
// 2:   CTRL/CMD -- up/down means pan up/down.
this.dragMode = -1;
this.shiftDown = false;
this.ctrlDown = false;
this.prevMouseXY = [0, 0];
this.newMouseXY = [0, 0];
// Reporting on camera updates
// Probably reports before mesh is ready
this.fixCount = 1;
this.vRotTot = 0;
this.hRotTot = 0;
// Touch-related data for camera control through mouse drags.
// Drag mode values:
// -ve: idle;
// 0:   1 finger drag -- rotate round Y-axis;
// 1:   2 finger drag -- up/down means zoom in/out;
// 2:   3 finger drag -- up/down means pan up/down.
this.prevTouchXY = [0, 0];
this.newTouchXY = [0, 0];
// Pseudo-constants for mouse and touch drag sensitivity configuration.
this.SCALE_TIME = 200;
this.DRAG_SENSITIVITY = 0.7;
this.DELTA_DIST_SCALE = 0.01;
if (typeof lggr.debug === "function") {
lggr.debug(`AvatarCamera: Y-adjust (Metres): ${this.yAdjust.toFixed(3)}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`AvatarCamera: Scale from Metres: ${this.FROM_METRES.toFixed(3)}`);
}
}
//------------
//   Creates and returns a new quaternion vector representing the
//   rotation about the given axis about the given angle.
static createRotation(axis, angle) {
//--------------
return RQ.setAxisAngleQV(RQ.makeQV(0, 0, 0, 0), axis, angle);
}
//   Creates and returns an identity TR transform matrix.
static makeIdTRMat() {
var m;
//---------
m = new Float32Array(16);
m[0] = m[5] = m[10] = m[15] = 1;
return m;
}
// "Instance" members.
//================  ACCESSORS  ================
//   Returns the view matrix for this camera.
getViewMatrix() {
return this.viewMat;
}
//------------
//   Returns the projection matrix for this camera..
getProjMatrix() {
return this.projMat;
}
//------------
//================  MAIN SETTER  ================
//   Update camera, with any view shifts driven by mouse dragging,
//   for time lapse of dt (milliseconds), and latest viewport width,
//   height values.
//   Should be invoked before each draw() operation.
update(dt, w, h) {
var dts, dx, dxm, dy, dym, newCamData;
//-----
this.checkUpdateViewport(w, h);
if (0 <= this.dragMode) {
// Allow a combination of touch and mouse events
// Turn mouse-motion and/or touch motion into xy rotation deltas in degrees.
dts = this.SCALE_TIME * dt;
dx = this.newMouseXY[0] - this.prevMouseXY[0] + this.newTouchXY[0] - this.prevTouchXY[0];
dy = this.newMouseXY[1] - this.prevMouseXY[1] + this.newTouchXY[1] - this.prevTouchXY[1];
// The dts value is large in practice -- so this clamping is
// probably redundant without some tweaking:
dx = 0 < dx ? Math.min(dts, dx) : Math.max(-dts, dx);
dy = 0 < dy ? Math.min(dts, dy) : Math.max(-dts, dy);
dxm = dx * this.DRAG_SENSITIVITY;
dym = dy * this.DRAG_SENSITIVITY;
// Check for camera change
if (dx !== 0 || dy !== 0) {
// lggr.debug? "Drag [#{dxm},#{dym}]"
this.fixCount = 10; // Frames without camera change to report setting
}
if (this.dragMode === 0) {
// Neither CTRL nor SHIFT down.
// Horizontal mouse is rotate around y-axis (model-space).
// Vertical mouse is zoom -- up==in, down==out.
this.applyRotsOnVertAndHoriz(-dxm, 0);
this.orbitRadius -= dy * this.DELTA_DIST_SCALE;
} else if (this.dragMode === 1) {
// SHIFT down.
// Horizontal mouse is rotate around y-axis (model-space).
// Vertical mouse is rotate around x-axis (camera-space).
this.applyRotsOnVertAndHoriz(-dxm, -dym);
} else if (this.dragMode === 2) {
// CTRL down.
// Horizontal mouse does nothing.
// Vertical mouse pans up/down y-axis (object-space).
V3.setAddV3(this.camTarget, [0, dy * this.DELTA_DIST_SCALE, 0]);
}
this.prevMouseXY = this.newMouseXY;
this.prevTouchXY = this.newTouchXY;
return this.updateViewMatrix();
// TBD
// Suppress extreme movements -- e.g. z-distance too low, rotate
// over top or under bottom.
} else if (this.fixCount > 0) {
this.fixCount--;
if (this.fixCount === 0) {
newCamData = [this.camTarget[0], this.camTarget[1] - this.yAdjust, this.orbitRadius, this.vRotTot, -this.hRotTot, this.FOV, this.camData[6], this.camData[7]];
return typeof lggr.info === "function" ? lggr.info(`New Camera: [${(newCamData.map(function(v) {
return v.toFixed(2);
})).toString()}]`) : void 0;
}
}
}
// lggr.debug? "Orig Camera: [#{do (@camData.map (v) -> v.toFixed 2).toString}]"
// yAdjust=#{@yAdjust} camTarget=[#{do @camTarget.toString}]
//================  EVENT HANDLERS  ================
setShift(flag) {
return this.shiftDown = Boolean(flag);
}
//-------
setCtrl(flag) {
return this.ctrlDown = Boolean(flag);
}
//------
mouseover(evt) {}
//--------
// We''d like to check if this is the continuation of an earlier
// drag, but currently we have no way of doing so -- see mouseout()
// below -- so this is just a NO-OP.
mouseout(evt) {
//-------
// Without getting into a more elaborate event bubbling/capturing
// set up we have no way of detecting whether or not a subsequent
// mouseover is a continuation of the current drag (assuming
// mousedown is true at the present stage) -- so it''s best for us
// to treat every mouseout as an implicit mouseup, forcing
// termination of any camera-changing drags.
return this.mouseup();
}
mousedown(evt) {
//--------
this.setShift(evt.shiftKey);
this.setCtrl(evt.ctrlKey || evt.metaKey);
this.dragMode = this.shiftDown ? 1 : this.ctrlDown ? 2 : 0;
this.prevMouseXY = [evt.screenX, evt.screenY];
return this.mousemove(evt);
}
mouseup() {
return this.dragMode = -1;
}
//------
mousemove(evt) {
//--------
this.setShift(evt.shiftKey);
this.setCtrl(evt.ctrlKey || evt.metaKey);
if (0 <= this.dragMode) {
return this.newMouseXY = [evt.screenX, evt.screenY];
}
}
touchstart(evt) {
//---------
this.dragMode = Math.min(evt.touches.length - 1, 2);
this.prevTouchXY = [evt.touches[0].pageX, evt.touches[0].pageY];
//stat "Touchstart ln=#{evt.touches.length} mode=#{@dragMode} x=#{evt.touches[0].pageX} y=#{evt.touches[0].pageY}"
return this.touchmove(evt);
}
touchend(evt) {
//-------
//stat "Touchend"
return this.dragMode = -1;
}
touchmove(evt) {
//--------
evt.preventDefault();
evt.stopPropagation();
//stat "Touchmove mode=#{@dragMode} x=#{evt.touches[0].pageX} y=#{evt.touches[0].pageY}"
if (0 <= this.dragMode) {
return this.newTouchXY = [evt.touches[0].pageX, evt.touches[0].pageY];
}
}
//================  INTERNAL  ================
zVecFromViewMat(zXYZ, m4) {
return V3.setV3_xyz(zXYZ, m4[2], m4[6], m4[10]);
}
//--------------
//   Arguments are rotation angles, in degrees, on vertical and
//   horizontal axes.
applyRotsOnVertAndHoriz(vdegs, hdegs) {
var DEGS_TO_RADS, qrotH, qrotV;
//----------------------
DEGS_TO_RADS = AvatarCamera.DEGS_TO_RADS;
if (vdegs !== 0) {
this.vRotTot += vdegs;
qrotV = AvatarCamera.createRotation(this.Y_UNIT, vdegs * DEGS_TO_RADS);
RQ.setProductQV(this.qCamRot, qrotV, this.qCamRot);
}
if (hdegs !== 0) {
this.hRotTot += hdegs;
qrotH = AvatarCamera.createRotation(this.X_UNIT, hdegs * DEGS_TO_RADS);
RQ.setProductQV(this.qCamRot, this.qCamRot, qrotH);
}
// Assume at least one of our arguments is non-zero.
// We need the transpose to give the inversion required for the
// view matrix.
return RQ.setRotMat4x4TransposeFromQV(this.viewMat, this.qCamRot);
}
checkUpdateViewport(w, h) {
var crots;
//------------------
crots = this.initCamRots;
// Check for "first time through".
if (crots) {
// We want to do this in the ctor, but prototype methods aren't
// available at that stage.
this.applyRotsOnVertAndHoriz(crots[0], crots[1]);
this.initCamRots = null;
this.updateViewMatrix(); // ...i.e. set it properly for first time.
}
if (this.viewWidth !== w || this.viewHeight !== h) {
this.viewWidth = w;
this.viewHeight = h;
return this.setProjMatrix();
}
}
setProjMatrix() {
var h, szFar, szNear, w;
//------------
w = this.viewWidth;
h = this.viewHeight;
szNear = this.Z_NEAR * this.FROM_METRES;
szFar = this.Z_FAR * this.FROM_METRES;
return M4.setPerspective(this.projMat, this.FOV, w / h, szNear, szFar);
}
updateViewMatrix() {
//---------------
// Get eye position via view matrix z axis.
this.zVecFromViewMat(this.camEye, this.viewMat);
V3.setScaleV3(this.camEye, this.orbitRadius);
V3.setAddV3(this.camEye, this.camTarget);
// Convert target and eye to renderer length units, and generate
// updated view matrix
V3.setV3(this.camEyeR, this.camEye);
V3.setV3(this.camTargetR, this.camTarget);
V3.setScaleV3(this.camEyeR, this.FROM_METRES);
V3.setScaleV3(this.camTargetR, this.FROM_METRES);
return M4.setLookAt(this.viewMat, this.camEyeR, this.camTargetR, this.Y_UNIT);
}
};
// "Static" members.
//   Conversion factor: degrees to radians.
AvatarCamera.DEGS_TO_RADS = RQ.DEGS_TO_RADS;
return AvatarCamera;
}).call(this);
// Export
cwaenv.add(AvatarCamera, "AvatarCamera");
// (End AvatarCamera.coffee)
}).call(this);
// -------- AvCache.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvCache, AvDataAccess, Logger, cwaenv, document, lggr;
cwaenv = this.getCWAEnv();
AvDataAccess = cwaenv.get("AvDataAccess");
document = this.document;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar"); // , "trace" # debug
AvCache = (function() {
//------------
class AvCache {
//------------
// Automatically create empty entry when accessed
// Constructor should not be used directly
// Holds an AvDataAccess
constructor(avName) {
this.avName = avName;
//----------
this.ADA = new AvDataAccess(this.avName);
this.getZIPEnt = this.ADA.extractAvDefEntry;
this.procAvDef = this.ADA.procAvDef;
this.characters = {};
}
static get(av) {
var cac, ref;
cac = (ref = AvCache._theCache) != null ? ref[av] : void 0;
if (cac != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`AvCache: Get ${av}: Found`);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`AvCache: Get ${av}: Added`);
}
AvCache._theCache[av] = cac = new AvCache(av);
}
return cac;
}
static clear(av) {
var cac, ref, ref1;
cac = (ref = AvCache._theCache) != null ? ref[av] : void 0;
if (cac != null) {
if ((ref1 = AvCache._theCache) != null) {
ref1[av] = null;
}
return typeof lggr.debug === "function" ? lggr.debug(`AvCache: Clear ${av}: Removed`) : void 0;
} else {
return typeof lggr.debug === "function" ? lggr.debug(`AvCache: Clear ${av}: Not Found`) : void 0;
}
}
// "Instance" members.
// getZIPEnt: (ent) -> @ADA.extractAvDefEntry ent   # See constructor
// procAvDef: -> do @ADA.procAvDef   # See constructor
setCharacter(theChar, avIx) {
return this.characters[avIx] = theChar;
}
getCharacter(avIx) {
return this.characters[avIx];
}
};
// "Static" members.
AvCache._theCache = {};
return AvCache;
}).call(this);
// Export
cwaenv.add(AvCache, "AvCache");
// (End AvCache.coffee)
}).call(this);
// -------- CASTRSet.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var CASTRSet, FourCC, Logger, RQ, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("CASAnim");
FourCC = cwaenv.get("FourCC");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
//-------------
CASTRSet = class CASTRSet {
//-------------
constructor() {
//----------
this.fourCCName = 0;
this.rotation = [0, 0, 0, 1];
this.translation = [0, 0, 0];
}
// "Static" members.
//   Creates a new JSA CAS TRSet copied from the given JSON TRSet.
static fromJSON(jsntrset) {
var trset;
//--------
trset = new CASTRSet();
trset.setFromJSON(jsntrset);
return trset;
}
//   Creates a new JSA CAS TRSet copied from the given XML <bone> element.
static fromXML(boneel) {
var trset;
//-------
trset = new CASTRSet();
trset.setFromXML(boneel);
return trset;
}
static fromBin(avdv) {
var trset;
//-------
trset = new CASTRSet();
trset.setFromBin(avdv);
return trset;
}
//   Creates a new JSA CAS TRSet from the given components.
static create(name4cc, rot, trans) {
var trset;
//------
trset = new CASTRSet();
trset.setFrom(name4cc, rot, trans);
return trset;
}
//   Creates a new JSA CAS TRSet from the given components.
static createFromStr(name4ccstr, rot, trans) {
var trset;
//-------------
trset = new CASTRSet();
trset.setFromStr(name4ccstr, rot, trans);
return trset;
}
//   Tests whether the given pair of translations are (exactly) equal.
static equalTrans(ta, tb) {
//----------
return ta[0] === tb[0] && ta[1] === tb[1] && ta[2] === tb[2];
}
//   Checks whether the given pair of values are approximately equal.
static approxEq(x, y) {
var DIFF, EPS, SIZE;
//--------
EPS = 5e-5;
DIFF = Math.abs(x - y);
SIZE = Math.max(Math.abs(x), Math.abs(y));
if (SIZE <= 1) {
return DIFF < EPS;
} else {
return DIFF / SIZE < EPS;
}
}
//   Tests whether the given pair of translations are approximately equal.
static approxEqTrans(ta, tb) {
var aeq, i;
//------–-----
aeq = (function() {
var j, results;
results = [];
for (i = j = 0; j < 3; i = ++j) {
results.push(this.approxEq(ta[i], tb[i]));
}
return results;
}).call(this);
return aeq[0] && aeq[1] && aeq[2];
}
//   Tests whether the given pair of rotations are approximately equal.
static approxEqRots(ra, rb) {
var aeq, i;
//------–-----
aeq = (function() {
var j, results;
results = [];
for (i = j = 0; j < 4; i = ++j) {
results.push(this.approxEq(ra[i], rb[i]));
}
return results;
}).call(this);
return aeq[0] && aeq[1] && aeq[2] && aeq[3];
}
// "Instance" members.
//   Constructs this TR-Set from the given stream.
setFromJSON(jsntrset) {
//----------
// JSON CAS TR Set:
// { "id4cc": "ROOT", "trans": [0,0,0], "rot": [0,0,0.707,0.707] }
this.fourCCName = FourCC.fourCCInt(jsntrset.id4cc);
if (jsntrset.rot) {
// NB Our arrays already exist.
// Allow for the possibility that rot and/or trans are left undefined,
// because unchanged w.r.t. previous frame.
RQ.setQV(this.rotation, jsntrset.rot);
}
if (jsntrset.trans) {
return V3.setV3(this.translation, jsntrset.trans);
}
}
//   Defines this TR-set from the given XML CAS <bone> element.
setFromXML(boneel) {
var bname, brot, btrans, c, pel, rel, xyz, xyzw;
//---------
btrans = null;
brot = null;
bname = boneel.getAttribute("name");
pel = (boneel.getElementsByTagName("position")).item(0);
rel = (boneel.getElementsByTagName("qRotation")).item(0);
if (pel) {
xyz = ["x", "y", "z"];
btrans = (function() {
var j, len, results;
results = [];
for (j = 0, len = xyz.length; j < len; j++) {
c = xyz[j];
results.push(Number(pel.getAttribute(c)));
}
return results;
})();
}
if (rel) {
xyzw = ["x", "y", "z", "w"];
brot = (function() {
var j, len, results;
results = [];
for (j = 0, len = xyzw.length; j < len; j++) {
c = xyzw[j];
results.push(Number(rel.getAttribute(c)));
}
return results;
})();
}
return this.setFromStr(bname, brot, btrans);
}
setFromBin(avdv) {
var id4cc, rot, trans, xyz, xyzw;
//---------
id4cc = avdv.nextUint();
trans = (function() {
var j, len, ref, results;
ref = avdv.nextVec3();
results = [];
for (j = 0, len = ref.length; j < len; j++) {
xyz = ref[j];
results.push(xyz);
}
return results;
})();
rot = (function() {
var j, len, ref, results;
ref = avdv.nextQuat();
results = [];
for (j = 0, len = ref.length; j < len; j++) {
xyzw = ref[j];
results.push(xyzw);
}
return results;
})();
return this.setFrom(id4cc, rot, trans);
}
//   Constructs a new CASTRSet with the given name, and using the
//   given rotation and translation arrays (which are not copied).
setFromStr(name, rot, trans) {
//---------
// Shallow copy.
return this.setFrom(FourCC.fourCCInt(name), rot, trans);
}
//   Constructs a new CASTRSet with the given (4cc) name, and
//   using the given rotation and translation arrays (which are not
//   copied).
setFrom(name4cc, rot, trans) {
//------
// Shallow copy.
this.fourCCName = name4cc;
this.rotation = rot;
return this.translation = trans;
}
//   Constructs a new TR-Set, copied from the given one -- by overwriting
//   the existing rotation and translation arrays.
setFromTRSet(trs) {
//-----------
this.fourCCName = trs.getFourCC();
// Overwrite rotation, translation.
RQ.setQV(this.rotation, trs.getRotation());
return V3.setV3(this.translation, trs.getTranslation());
}
//   Indicates whether or not this TR set has the given 4-CC name.
has4CCName(nm4cc) {
return this.fourCCName === nm4cc;
}
//---------
//   Returns this PR-Set''s name.
getFourCC() {
return this.fourCCName;
}
//--------
//   Returns this TR-Set''s translation array (length 3).
getTranslation() {
return this.translation;
}
//-------------
//   Returns this TR-Set''s rotation array [xyzw] (length 4).
getRotation() {
return this.rotation;
}
//----------
//   Updates this TR-Set to be a copy of the given one.
//   JS/CS version: this is a synonym for setFromTRSet.
//   That is, we copy the array data, not the array refs.
set(trs) {
return this.setFromTRSet(trs);
}
//--
//   Sets this TR-Set''s Four-CC name.
setFourCC(fcctag) {
return this.fourCCName = fcctag;
}
//--------
//   Sets this PR-Set''s rotation values from the given PR-set.
//   (Still needed for JS version?)
setRotation(trs) {
//----------
return this.rotation = RQ.copyOfQV(trs.getRotation());
}
//   Sets this TR-Set''s translation values from the given TR-set.
//   (Still needed for JS version?)
setTranslation(trs) {
//-------------
return this.translation = V3.copyOfV3(trs.getTranslation());
}
//   Returns a hash code value for this object. (Not needed for JS?)
hashCode() {
var rhc, thc;
//-------
// This is rather a crude definition but it respects our
// definition of equals() below.
thc = this.translation === null ? 0 : this.translation.hashCode();
rhc = this.rotation === null ? 0 : this.rotation.hashCode();
return this.fourCCName + thc + rhc;
}
//   Determines whether or not the given object is a CASTRSet
//   whose components match this one -- in the sense that the 4cc
//   tags are equal, the translations are exactly equal, and the
//   rotations are approximately equal.
matches(other) {
var FOURCC, ROT, TRANS, TRS, eq;
//------
TRS = CASTRSet;
eq = this === other;
// (JS: is 'instanceof' going to be OK here?)
if (!eq && (other instanceof TRS)) {
FOURCC = other.getFourCC();
TRANS = other.getTranslation();
ROT = other.getRotation();
if (this.fourCCName === FOURCC) {
if (TRS.equalTrans(this.translation, TRANS)) {
if (TRS.approxEqRots(this.rotation, ROT)) {
eq = true;
}
}
}
}
return eq;
}
//   Return a CASTRSet as an object
asObject() {
return {
id4cc: FourCC.fourCCStr(this.fourCCName),
trans: this.translation,
rot: this.rotation
};
}
};
// Export
cwaenv.add(CASTRSet, "CASTRSet");
// (End CASTRSet.coffee)
}).call(this);
// -------- CASMorph.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var CASMorph, FourCC, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("CASAnim");
FourCC = cwaenv.get("FourCC");
CASMorph = (function() {
//-------------
class CASMorph {
//-------------
constructor() {
this.fourCCName = 0;
this.amount = 0;
}
//---------
//   Creates a new JSA CAS Morph copied from the given JSON morph.
static fromJSON(jsnmorph) {
var morph;
//--------
morph = new CASMorph();
morph.setFromJSON(jsnmorph);
return morph;
}
//   Creates a new JSA CAS Morph copied from the given XML <morph> element.
static fromXML(mrphel) {
var morph;
//-------
morph = new CASMorph();
morph.setFromXML(mrphel);
return morph;
}
static fromBin(avdv) {
var morph;
//-------
morph = new CASMorph();
morph.setFromBin(avdv);
return morph;
}
//   Creates a new JSA CAS Morph from the given argument values.
static create(name4cc, value) {
var morph;
//------
morph = new CASMorph();
morph.set(name4cc, value);
return morph;
}
//   Creates a new JSA CAS Morph from the given argument values.
static createFromStr(name4ccstr, value) {
var morph;
//-------------
morph = new CASMorph();
morph.setFromStr(name4ccstr, value);
return morph;
}
// "Instance" members.
//   Defines this morph from the given JSON morph object.
setFromJSON(jsnmrph) {
//----------
// JSON morph:  { "id4cc" : "eylc", "amount" : 0.16 }
this.fourCCName = FourCC.fourCCInt(jsnmrph.id4cc);
return this.amount = jsnmrph.amount;
}
//   Defines this morph from the given XML CAS <morph> element.
setFromXML(mrphel) {
//---------
return this.setFromStr(mrphel.getAttribute("name"), Number(mrphel.getAttribute("amount")));
}
setFromBin(avdv) {
//---------
this.fourCCName = avdv.nextUint();
return this.amount = avdv.nextFloat();
}
//   Constructs a shape morph with the given name and amount value.
setFromStr(name, value) {
//---------
return this.set(FourCC.fourCCInt(name), value);
}
//   Redefines this morph from the given (4cc) name and amount values.
set(name4cc, value) {
this.fourCCName = name4cc;
return this.amount = value;
}
//--
//   Constructs a copy of the given morph.
setFromMorph(morph) {
//-----------
this.fourCCName = morph.getName();
return this.amount = morph.getAmount();
}
//   Indicates whether or not this morph has the given Four-CC name.
hasName(nm4cc) {
return this.fourCCName === nm4cc;
}
//------
//   Returns this morph''s Four-CC name.
getName() {
return this.fourCCName;
}
//------
//   Returns this morph''s Four-CC name.
getFourCC() {
return this.fourCCName;
}
//--------
//   Returns this morph''s Four-CC name as a string.
getFourCCStr() {
return FourCC.fourCCStr(this.fourCCName);
}
//-----------
//   Returns this morph''s amount value.
getAmount() {
return this.amount;
}
//--------
//   Private method: returns a text string representing this
//   morph, using the given amount string.
_makeText(amtstr) {
var NX, nmstr, pad;
//--------
nmstr = FourCC.fourCCString(this.fourCCName);
NX = 4 - nmstr.length;
pad = 0 < NX ? "    ".slice(0, NX) : "";
return `${nmstr}${pad}  ${this.amtstr}`;
}
//   Returns a string representation of this morph.
asText() {
return this._makeText(`${this.amount}`);
}
//-----
//   Returns a string representation of this morph, with the amount
//   value represented restricted to four fractional digits.
asText4() {
return this._makeText(`${this.amount.toFixed(4)}`);
}
//-----
//   Return a CASMorph as an object
asObject() {
return {
id4cc: FourCC.fourCCStr(this.fourCCName),
amount: this.amount
};
}
};
//----------
// "Static" members.
//   Standard empty set of morphs.
CASMorph.NO_MORPHS = [];
return CASMorph;
}).call(this);
// Export
cwaenv.add(CASMorph, "CASMorph");
// (End CASMorph.coffee)
}).call(this);
// -------- CASFrame.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var CASFrame, CASMorph, CASTRSet, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("CASAnim");
CASTRSet = cwaenv.get("CASTRSet");
CASMorph = cwaenv.get("CASMorph");
CASFrame = (function() {
//-------------
class CASFrame {
//-------------
constructor() {
//----------
this.timeStamp = this.duration = 0;
this.trSets = this.morphs = this.trSetMap = this.morphMap = null;
this.sign = null;
}
//---------
//   Creates a new JSA CAS Frame from the given JSON frame.
static fromJSON(jsnframe) {
var frame;
//--------
frame = new CASFrame();
frame.setFromJSON(jsnframe);
return frame;
}
//   Creates a new JSA CAS Frame from the given XML <frame> element.
static fromXML(frmel) {
var frame;
//-------
frame = new CASFrame();
frame.setFromXML(frmel);
return frame;
}
//   Creates a new JSA CAS Frame from the given binary avatar
//   definition view.
static fromBin(avdv) {
var frame;
//-------
frame = new CASFrame();
frame.setFromBin(avdv);
return frame;
}
//   Creates a new CAS Frame with the given components.
static create(time, dur, bones, morphs) {
var frame;
//------
frame = new CASFrame();
frame.set(time, dur, bones, morphs);
return frame;
}
//   Returns the frame rate for the given frames array, calculated
//   from the duration of the initial frame.
static getFrameRate(frames) {
var frameok;
//------------
// Use 25fps as the somewhat arbitrary default value.
frameok = frames && frames.length !== 0;
if (frameok) {
return 1000 / frames[0].duration;
} else {
return 25;
}
}
// "Instance" members.
//   Constructs a frame by copying all the data from the given one.
//   [==  CURRENTLY UNUSED  ==]
copyCASFrame(frame) {
//-----------
return this.copy(frame.getTime(), frame.getDuration(), frame.getTRSets(), frame.getMorphs());
}
//   Completely redefines this frame by creating its own copies
//   of all the given data.
//   [==  CURRENTLY UNUSED  ==]
copy(time, dur, bones, morphvec) {
//---
// Was: @set time, dur, (do bones.slice), (do morphvec?.slice)
return this.set(time, dur, bones.slice(), morphvec != null ? morphvec.slice() : void 0);
}
//   Constructs a frame using the given arrays.
setCASFrameBM(bones, morphs) {
return this.set(-1, 0, bones, morphs);
}
//------------
//   Constructs a frame using the given time-stamp and data arrays.
setCASFrameTBM(time, bones, morphs) {
return this.set(time, 0, bones, morphs);
}
//-------------
//   Constructs a new frame with the given timing values
//   and the morphs and bones data taken from the given JSON frame.
//   JRWG: Unused, which is good as @time should presumably be @timeStamp
setFromJSON_TD(jsnframe, t, dur) {
//-------------
this.setFromJSON(jsnframe);
this.time = t;
return this.duration = dur;
}
//   Constructs a new frame from the given JSON frame.
setFromJSON(jsnframe) {
var JMPHS, bones, morphs;
//----------
JMPHS = jsnframe.morphs;
morphs = JMPHS.length === 0 ? null : JMPHS.map(CASMorph.fromJSON);
bones = jsnframe.bones.map(CASTRSet.fromJSON);
return this.set(jsnframe.time, jsnframe.duration, bones, morphs);
}
//   Constructs a new frame from the given XML <frame> element.
setFromXML(frmel) {
var NB, NM, b, bones, dur, fbones, fmphs, j, k, m, morphs, ref, ref1, time;
//---------
morphs = null;
bones = [];
time = Number(frmel.getAttribute("time"));
dur = Number(frmel.getAttribute("duration"));
fmphs = frmel.getElementsByTagName("morph");
fbones = frmel.getElementsByTagName("bone");
NM = fmphs.length;
NB = fbones.length;
if (NM !== 0) {
morphs = [];
for (m = j = 0, ref = NM; (0 <= ref ? j < ref : j > ref); m = 0 <= ref ? ++j : --j) {
morphs.push(CASMorph.fromXML(fmphs.item(m)));
}
}
for (b = k = 0, ref1 = NB; (0 <= ref1 ? k < ref1 : k > ref1); b = 0 <= ref1 ? ++k : --k) {
bones.push(CASTRSet.fromXML(fbones.item(b)));
}
return this.set(time, dur, bones, morphs);
}
//   Constructs a new frame from the given binary avatar definition
//   view.
setFromBin(avdv) {
var b, bones, m, morphs, nBones, nMorphs;
//---------
nMorphs = avdv.nextUint();
morphs = nMorphs === 0 ? null : (function() {
var j, ref, results;
results = [];
for (m = j = 0, ref = nMorphs; (0 <= ref ? j < ref : j > ref); m = 0 <= ref ? ++j : --j) {
results.push(CASMorph.fromBin(avdv));
}
return results;
})();
nBones = avdv.nextUint();
bones = (function() {
var j, ref, results;
results = [];
for (b = j = 0, ref = nBones; (0 <= ref ? j < ref : j > ref); b = 0 <= ref ? ++j : --j) {
results.push(CASTRSet.fromBin(avdv));
}
return results;
})();
return this.set(-1, -1, bones, morphs);
}
//   Completely redefines this frame by attaching the given
//   data to it -- that is, the array references are copied, not
//   the arrays themselves.
set(time, dur, bones, morphs) {
//--
this.timeStamp = time;
this.duration = dur;
this.trSets = bones;
this.morphs = morphs || CASMorph.NO_MORPHS;
// In JARP, the decision to create maps was determined by the array
// sizes.  In JSARP, we always have a map (a sparse array).
// For now we assume the map is always used (or the context is not
// time-critical), so we create it here and now.
// (But this assumption may need to be reviewed.)
this.makeTRSetMap();
return this.makeMorphMap();
}
//   Returns this frame's timestamp.
getTime() {
return this.timeStamp;
}
//------
//   Returns this frame's timestamp.
getDuration() {
return this.duration;
}
//----------
//   Returns this frame's TR-Set (bones) array.
getTRSets() {
return this.trSets;
}
//--------
//   Returns this frame's morph array.
getMorphs() {
return this.morphs;
}
//--------
//   Returns this frame''s TR-set of the given name, if it has one,
//   or {@code null} otherwise.
getTRSet(bone4cc) {
return this.trSetMap[bone4cc] || null;
}
//-------
//   Returns this frame''s morph of the given name if it has one, or
//   {@code null} otherwise.
getMorph(morph4cc) {
return this.morphMap[morph4cc] || null;
}
//-------
//   Sets the timestamp for this frame.
setTime(ts) {
return this.timeStamp = ts;
}
//------
//   Increases this frame''s timestamp by the given amount.
adjustTime(tadj) {
return this.timeStamp += tadj;
}
//---------
//   Sets the duration for this frame.
setDuration(dur) {
return this.duration = dur;
}
//----------
//   Creates the TRSet map for this frame, mapping the name of each
//   of the frame''s bones to its entry in the frame''s {@link CASTRSet}
//   list.
makeTRSetMap() {
var NS, TRSETS, TRSMAP, i, j, ref, trs;
//-----------
TRSETS = this.trSets;
NS = TRSETS.length;
TRSMAP = [];
for (i = j = 0, ref = NS; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
(trs = TRSETS[i], TRSMAP[trs.getFourCC()] = trs);
}
return this.trSetMap = TRSMAP;
}
//   Creates the morph map for this frame, mapping each of the
//   morph names used in the frame to its entry in the frame''s
//   {@link CASMorph} list.
makeMorphMap() {
var MORPHS, MPHMAP, NM, i, j, mph, ref;
//-----------
MORPHS = this.morphs;
NM = MORPHS.length;
MPHMAP = [];
for (i = j = 0, ref = NM; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
// Empty MORPHS should always be represented as [], rather than null.
// (See set() method above.)
(mph = MORPHS[i], MPHMAP[mph.getFourCC()] = mph);
}
return this.morphMap = MPHMAP;
}
//   Return a CASFrame as an object
asObject() {
var mp, ts;
return {
sign: this.sign,
time: this.timeStamp,
duration: this.duration,
sign: this.sign,
morphs: (function() {
var j, len, ref, results;
ref = this.morphs;
results = [];
for (j = 0, len = ref.length; j < len; j++) {
mp = ref[j];
results.push(mp.asObject());
}
return results;
}).call(this),
bones: (function() {
var j, len, ref, results;
ref = this.trSets;
results = [];
for (j = 0, len = ref.length; j < len; j++) {
ts = ref[j];
results.push(ts.asObject());
}
return results;
}).call(this)
};
}
};
// "Static" members.
//   Threshold value for size at which a map is used
//   (From Java version -- not used in JS).
CASFrame.MAP_LO_SIZE = 8;
//-----------
//   Empty array of CASMorphs.
CASFrame.NO_MORPHS = [];
return CASFrame;
}).call(this);
// Export
cwaenv.add(CASFrame, "CASFrame");
// (End CASFrame.coffee)
}).call(this);
// -------- Bone.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Bone, FourCC, Logger, RQ, TRX, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
FourCC = cwaenv.get("FourCC");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
TRX = cwaenv.get("TRXform");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
Bone = (function() {
//---------
class Bone {
//---------
constructor() {
//----------
this.parent = null;
this.fourCCName = this.parentFourCCName = 0;
// Local translation is a 3-vector, rotation is a 4-vector.
this.localTrans = null;
this.localRot = null;
this.inverseInitRotationX = null;
this.length = 0;
this.doWristTwist = this.doShoulderTwist = false;
this.childBones = [];
this.globalTRX = TRX.create();
this.bindPoseTRX = TRX.create();
this.invBindPoseTRX = TRX.create();
this.skinTRX = TRX.create();
}
//--------
static fromJSON(jsnbone) {
var bone;
//--------
bone = new Bone();
bone.setFromJSON(jsnbone);
return bone;
}
static fromBin(avdv) {
var bone;
//-------
bone = new Bone();
bone.setFromBin(avdv);
return bone;
}
// "Instance" members.
setFromJSON(jsnbone) {
var CVT4cc;
//----------
// Get own and parent 4cc codes.
CVT4cc = FourCC.fourCCInt;
this.fourCCName = CVT4cc(jsnbone.id4cc);
this.parentFourCCName = CVT4cc(jsnbone.parent4cc);
// Get the initial translation and rotation (as float-arrays).
this.localTrans = V3.copyOfV3(jsnbone.trans);
this.localRot = RQ.copyOfQV(jsnbone.rot);
// Get (the inverse of) the initial X-rotation.
this.inverseInitRotationX = jsnbone.invInitXRot;
// Get the length.
this.length = jsnbone.length;
return this.setSlideFlags();
}
setFromBin(avdv) {
var xyz, xyzw;
//---------
// Get own and parent 4cc codes.
this.fourCCName = avdv.nextUint();
this.parentFourCCName = avdv.nextUint();
// Get the initial translation and rotation (as float-arrays).
this.localTrans = (function() {
var j, len, ref, results;
ref = avdv.nextVec3();
results = [];
for (j = 0, len = ref.length; j < len; j++) {
xyz = ref[j];
results.push(xyz);
}
return results;
})();
this.localRot = (function() {
var j, len, ref, results;
ref = avdv.nextQuat();
results = [];
for (j = 0, len = ref.length; j < len; j++) {
xyzw = ref[j];
results.push(xyzw);
}
return results;
})();
// Get the inverse of the initial X-rotation.
this.inverseInitRotationX = (function() {
var j, len, ref, results;
ref = avdv.nextQuat();
results = [];
for (j = 0, len = ref.length; j < len; j++) {
xyzw = ref[j];
results.push(xyzw);
}
return results;
})();
// Get the length.
this.length = avdv.nextFloat();
return this.setSlideFlags();
}
setSlideFlags() {
var B, ID4;
//------------
B = Bone;
ID4 = this.fourCCName;
this.doShoulderTwist = ID4 === B.LUPA_4CC || ID4 === B.RUPA_4CC;
return this.doWristTwist = ID4 === B.LLRA_4CC || ID4 === B.RLRA_4CC;
}
//   Sets this bone''s parent.
setParent(prnt) {
return this.parent = prnt;
}
//--------
//   Returns this bone''s current global transform.
getGlobalTRX() {
return this.globalTRX;
}
//-----------
//   Returns this bone''s parent bone.
getParent() {
return this.parent;
}
//--------
//   Returns the child bone of this bone with the given index.
getChild(i) {
return this.childBones[i];
}
//-------
//   Adds the given bone to this bone''s dynamic children list.
addChild(cb) {
return this.childBones.push(cb);
}
//-------
//   Determines whether or not this bone is at the root of its
//   hierarchy (by testing whether or not it has a parent).
isRoot() {
return this.parent === null;
}
//-----
//   Returns this bone''s Four-CC name.
get4CC() {
return this.fourCCName;
}
//-----
//   Returns the Four-CC name of this bone''s parent.
getParent4CC() {
return this.parentFourCCName;
}
//-----------
//   Returns this bone''s length.
getLength() {
return this.length;
}
//--------
//   Returns this bone's current rotation in local coordinates,
//   as an XYZ vector.
getLocalRot() {
return this.localRot;
}
//----------
//   Returns this bone's "inverse initial rotation on X", i.e. the
//   inverse of its initial twist rotation.
getInvInitRotX() {
return this.inverseInitRotationX;
}
//-------------
//   Indicate if this bone does twisting.
doesTwist() {
//--------
return this.doShoulderTwist || this.doWristTwist || this.parentDoesWristTwist();
}
//   Indicate if this bone''s parent (if any) does skin-sliding.
parentDoesWristTwist() {
return this.parent !== null && (this.parent.doWristTwist());
}
//-------------------
doesShoulderTwist() {
return this.doShoulderTwist;
}
//----------------
doesWristTwist() {
return this.doWristTwist;
}
//-------------
//   Returns this bone's bind pose TR transform.
getBindPoseTRX() {
return this.bindPoseTRX;
}
//-------------
//   Returns this bone's bind pose TR transform.
getInvBindPoseTRX() {
return this.invBindPoseTRX;
}
//----------------
//   Update this bone''s local translation and rotation from the given
//   TR-Set data.
updateLocalTransAndRot(newtrs) {
//---------------------
this.localTrans = newtrs.getTranslation();
return this.localRot = newtrs.getRotation();
}
//   Update this bone''s local rotation from the given TR-Set data
//   (so the given translation is ignored).
updateLocalRot(newtrs) {
return this.localRot = newtrs.getRotation();
}
//-------------
//   Computes this bone''s gobal transform from that of its parent
//   (unless this is the root bone) together with its own current
//   TR transform, and then does the same recursively for its
//   descendants in the hierarchy.
computeGlobalTransforms() {
var child, j, len, ref, results;
//----------------------
this.globalTRX.copyTRV(this.localTrans, this.localRot);
if (!this.isRoot()) {
this.globalTRX.setPreStar(this.parent.getGlobalTRX());
}
ref = this.childBones;
results = [];
for (j = 0, len = ref.length; j < len; j++) {
child = ref[j];
results.push(child.computeGlobalTransforms());
}
return results;
}
//   Generates bind pose data for this bone from its current global
//   TR transform
generateBindPoseData() {
//-------------------
// We need to retain TR xforms for both the bind pose and its inverse.
this.bindPoseTRX.copyTRX(this.globalTRX);
this.invBindPoseTRX.copyTRX(this.globalTRX);
return this.invBindPoseTRX.setInvert();
}
//   Generates this bone's skinning matrix data, from its current global
//   TR transform, in the given 3x4 row-major matrix.
generateSkinMatRows(m) {
//------------------
this.skinTRX.copyTRX(this.globalTRX);
this.skinTRX.setPostStar(this.invBindPoseTRX);
this.skinTRX.convertToRowsMat3x4(m);
return m; // return the given skin matrix
}
idStr() {
return FourCC.fourCCStr(this.fourCCName);
}
};
// "Static" members.
Bone.DEGS_TO_RADS = RQ.DEGS_TO_RADS;
//------------
Bone.RADS_TO_DEGS = RQ.RADS_TO_DEGS;
//------------
Bone.LUPA_4CC = FourCC.fourCCInt("LUPA");
//--------
Bone.RUPA_4CC = FourCC.fourCCInt("RUPA");
//--------
Bone.LLRA_4CC = FourCC.fourCCInt("LLRA");
//--------
Bone.RLRA_4CC = FourCC.fourCCInt("RLRA");
return Bone;
}).call(this);
/*-------- for debugging --------
idStr: -> FourCC.fourCCStr @fourCCName
#----
showTRMat: (tag, m) ->
#--------
SP = " "
rowStr = (i) -> RQ.qStr (m[i+4*j] for j in [0...4]), 2
id = do @idStr
lggr.debug? "#{id} #{tag}:"
lggr.debug? "        #{rowStr i}" for i in [0...4]
*/
// Export
cwaenv.add(Bone, "Bone");
// (End Bone.coffee)
}).call(this);
// -------- Skeleton.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Bone, FourCC, Logger, RQ, Skeleton, cwaenv, document, lggr, setTimeout,
splice = [].splice;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
FourCC = cwaenv.get("FourCC");
RQ = cwaenv.get("RotQuat");
Bone = cwaenv.get("Bone");
Skeleton = (function() {
//-------------
class Skeleton {
//-------------
constructor(usetrx, cputrx2mat) {
//----------
this.root = null;
// To support access to the individual bones we have two arrays:
// the bones as a contiguous array, and a (sparse) map from the bones'
// 4cc names to the bones' primary indices, i.e their indices in the
// first array.  These indices give a topological sort w.r.t. the
// skeleton hierarchy -- i.e. the root bone comes first and every
// other bone appears later than its parent. Considering these arrays
// as mappings, the composition of the first with the second gives a
// mapping to the bones from their 4cc names.
this.bones = null;
this.boneIndicesBy4CC = null;
this.skinMatRows = null;
this.boneSkinMatRows = null;
this.USE_TRX_BONE_DATA = usetrx;
this.TEST_CPU_TRX_TO_MAT = cputrx2mat;
this.skelTexWidth = 0;
this.skelTexHeight = 0;
this.skelXformsData = null;
this.twistData = null;
this.ntdchk = 0;
//----
this.nchk = 0;
}
//-------
static create(jsnskel, usetrx, cputrx2mat) {
var skeleton;
//------
skeleton = new Skeleton(usetrx, cputrx2mat);
skeleton.setFromJSON(jsnskel);
return skeleton;
}
static fromBin(avdv, usetrx, cputrx2mat) {
var skeleton;
//------
skeleton = new Skeleton(usetrx, cputrx2mat);
skeleton.setFromBin(avdv);
return skeleton;
}
// "Instance" members.
setFromJSON(jsnbones) {
//----------
return this.buildSkeleton(jsnbones.length, (function(b) {
return Bone.fromJSON(jsnbones[b]);
}));
}
setFromBin(avdv) {
//---------
return this.buildSkeleton(avdv.nextUint(), (function() {
return Bone.fromBin(avdv);
}));
}
buildSkeleton(nbones, nextBoneFun) {
var b, bone, k, ref;
//------------
this.bones = new Array(nbones);
this.boneIndicesBy4CC = [];
for (b = k = 0, ref = nbones; (0 <= ref ? k < ref : k > ref); b = 0 <= ref ? ++k : --k) {
this.bones[b] = bone = nextBoneFun(b);
this.setExtraDataForBone(b, bone);
}
this.createTwistData();
return this.generateBindPoseData();
}
setExtraDataForBone(b, bone) {
var b4cc, p4cc, parentBone;
//------------------
b4cc = bone.get4CC();
if (b4cc === Skeleton.ROOT4cc) {
// Check for root bone.
this.root = bone;
}
// Record the mapping of the bone''s 4cc name to its index in this
// skeleton''s main @bones array.
this.boneIndicesBy4CC[b4cc] = b;
if (typeof lggr.trace === "function") {
lggr.trace(`boneIndicesBy4CC[\"${FourCC.fourCCStr(b4cc)}\"(${b4cc})] = ${this.boneIndicesBy4CC[b4cc]}`);
}
// If the bone has a parent, then make the links in both directions
// between parent and child.
// JRWG: relies on parent being defined first
p4cc = bone.getParent4CC();
if (p4cc) {
if (typeof lggr.trace === "function") {
lggr.trace(`getBoneBy4CC parent \"${FourCC.fourCCStr(p4cc)}\"(${p4cc}) bone ix=${this.boneIndicesBy4CC[p4cc]}`);
}
parentBone = this.getBoneBy4CC(p4cc);
bone.setParent(parentBone);
return parentBone.addChild(bone);
}
}
calcTexSize(elFloats, elRows) {
var texHeight, texWidth;
//----------
texWidth = 1;
while (texWidth < elFloats) {
texWidth *= 2;
}
// Sanity Check
if (elFloats !== texWidth) {
lggr.warn(`calTexSize: WARNING: Element size ${elFloats} for data as texture needs to be power of two`);
}
// Width at least one 4-float pixel
texWidth = Math.max(4, texWidth);
texHeight = 1;
while (texWidth * texHeight < elRows * elFloats) {
texHeight *= 2;
}
if (typeof lggr.trace === "function") {
lggr.trace(`calcTexSize(${elFloats},${elRows}) -> [${texWidth * texHeight},${texWidth / 4},${texHeight}]`);
}
return [texWidth * texHeight, texWidth / 4, texHeight];
}
createTwistData() {
var NB, SKEL, b, b4, bTwData, bone, flags, i, k, len, p4cc, parentID, ref, results, rotW, rotX, vecSize;
//--------------
NB = this.bones.length;
SKEL = Skeleton;
[vecSize, this.twistTexWidth, this.twistTexHeight] = this.calcTexSize(4, NB);
this.twistData = new Float32Array(vecSize);
ref = this.bones;
results = [];
for (b = k = 0, len = ref.length; k < len; b = ++k) {
bone = ref[b];
b4 = 4 * b;
flags = 1;
if (bone.doesShoulderTwist()) {
flags *= SKEL.SHOULDER_TWIST_FLAG_VALUE;
}
if (bone.doesWristTwist()) {
flags *= SKEL.WRIST_TWIST_FLAG_VALUE;
}
p4cc = bone.getParent4CC();
parentID = p4cc === 0 ? -1 : this.boneIndicesBy4CC[p4cc];
rotX = rotW = -1;
bTwData = [rotX, rotW, parentID, flags];
results.push((function() {
var l, results1;
results1 = [];
for (i = l = 0; l < 4; i = ++l) {
results1.push(this.twistData[b4 + i] = bTwData[i]);
}
return results1;
}).call(this));
}
return results;
}
updateTwistData() {
var b, b4, bone, iirxRQ, k, len, ref, tbone, twistRQ;
//--------------
twistRQ = RQ.create();
iirxRQ = RQ.create();
ref = this.bones;
for (b = k = 0, len = ref.length; k < len; b = ++k) {
bone = ref[b];
b4 = 4 * b;
// Flags value > 1 implies twisting on this bone.
if (this.twistData[b4 + 3] !== 1) {
// For upper arm (shoulder) twist it's the twist of the bone
// itself (w.r.t. its parent) that we want; for lower arm (wrist)
// twist it's the twist of the bone's first child.
tbone = bone;
if (bone.doesWristTwist()) {
tbone = bone.getChild(0);
}
iirxRQ.setVec(tbone.getInvInitRotX());
twistRQ.setVec(tbone.getLocalRot());
twistRQ.setExtractRotX();
twistRQ.setPostMultiply(iirxRQ);
if (bone.doesShoulderTwist()) {
// For a shoulder twist we effectively invert the hierarchy at
// that joint, so the rotation of the "child" (under this inversion)
// is the inverse of the rotation of the actual child.
twistRQ.setInvertX();
}
// For a rotation on the x-axis, the y- and z- components are
// both zero and need not be transmitted.
this.twistData[b4 + 0] = twistRQ.xyzw[0];
this.twistData[b4 + 1] = twistRQ.xyzw[3];
}
}
//     if @ntdchk < 10
//       lggr.trace? "____  skel twist data #{@ntdchk}"
//       for bone,b in @bones
//         bStr = do bone.idStr
//         [tda, tdb, tdc, tdd] = (@twistData[b*4+i] for i in [0...4])
//         if @ntdchk is 0 or tdc is 39
//           tdas = RQ.fStr tda, 3;  tdbs = RQ.fStr tdb, 3
//           tdcs = ""+Math.floor tdc;    tdds = ""+Math.floor tdd
//           lggr.trace? "#{bStr}: #{tdas} #{tdbs} #{tdcs} #{tdds}"
return ++this.ntdchk;
}
generateBindPoseData() {
var NB, bone, k, len, ref, vecSize;
//-------------------
// Generate bind pose data from our bones' current (presumably
// initial) translation and rotation data.
this.root.computeGlobalTransforms();
ref = this.bones;
for (k = 0, len = ref.length; k < len; k++) {
bone = ref[k];
bone.generateBindPoseData();
}
if (this.USE_TRX_BONE_DATA) {
// The shader needs transform data (translation + rotation)
// for the inverse bind pose and for the current pose.  To overcome
// limitations in older GLES implementations, we pack these four
// items into a single 4x4 matrix.
NB = this.bones.length;
[vecSize, this.skelTexWidth, this.skelTexHeight] = this.calcTexSize(16, NB);
// For bone texture skinning
this.skelXformsData = new Float32Array(vecSize);
if (this.TEST_CPU_TRX_TO_MAT) {
//---- Testing: do (rotation) matrix version as well.
this.skinMatRows = new Float32Array(this.bones.length * 3 * 4);
this.boneSkinMatRows = new Float32Array(3 * 4);
// Our spoof of the vertex shader skin mat.
this.vsSkinMatRows = new Array(this.bones.length * 3 * 4);
}
this.setInvBindPoseTRXData();
this.updateCurGlobalPoseTRXData();
this.updateTwistData();
} else {
this.skinMatRows = new Float32Array(this.bones.length * 3 * 4);
this.boneSkinMatRows = new Float32Array(3 * 4);
this.updateSkinMatRows();
}
return void 0; // void result
}
setInvBindPoseTRXData() {
var boneIBPFun;
//-----------------
boneIBPFun = function(bone) {
return bone.getInvBindPoseTRX();
};
return this._setTRXDataBuffers(0, boneIBPFun);
}
updateCurGlobalPoseTRXData() {
var boneCGPFun;
//----------------------
boneCGPFun = function(bone) {
return bone.getGlobalTRX();
};
this._setTRXDataBuffers(2 * 4, boneCGPFun);
if (this.TEST_CPU_TRX_TO_MAT) {
//----  Testing: do the skin mat as well.
this.updateSkinMatRows();
return this.updateVSSkinMatRows();
}
}
//----
_setTRXDataBuffers(offset, btrxfun) {
var b, bone, br, brot, bt, btrans, btrx, i, k, l, len, ref, results;
ref = this.bones;
//-----------------
// Offsets within each @skelXforms 4 x 4 block:
//     Inverse Bind Pose Translation:  0
//     Inverse Bind Pose Rotation:     4
//     Current Pose Translation:       8
//     Current Pose Rotation:         12
// so the offset parameter should be either 0 for the Inverse
// Bind Pose, or 8 for the Current Pose.
results = [];
for (b = k = 0, len = ref.length; k < len; b = ++k) {
bone = ref[b];
bt = b * 4 * 4 + offset;
br = bt + 4;
btrx = btrxfun(bone);
btrans = (btrx.trans()).xyz;
brot = (btrx.rot()).xyzw;
for (i = l = 0; l < 3; i = ++l) {
this.skelXformsData[bt + i] = btrans[i];
}
results.push((function() {
var m, results1;
results1 = [];
for (i = m = 0; m < 4; i = ++m) {
results1.push(this.skelXformsData[br + i] = brot[i]);
}
return results1;
}).call(this));
}
return results;
}
updateSkinMatRows() {
var b, b12, bSMR, bone, i, k, l, len, len1, ref, ref1, s, sMR;
//----------------
// Collect all bones' skinning matrix data, in row-major order,
// for use by the GL shader.
sMR = this.skinMatRows;
bSMR = this.boneSkinMatRows;
b12 = 0;
ref = this.bones;
for (b = k = 0, len = ref.length; k < len; b = ++k) {
bone = ref[b];
ref1 = bone.generateSkinMatRows(bSMR);
for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
s = ref1[i];
sMR[b12 + i] = s;
}
b12 += 3 * 4;
}
return void 0; // void result
}
// Returns the entire bones array.
getBones() {
return this.bones;
}
//-------
// Returns the number of bones in this skeleton.
getBonesCount() {
if (this.bones) {
return this.bones.length;
} else {
return 0;
}
}
//------------
// Returns the bone with the given 4CC name.
getBoneBy4CC(fourcc) {
return this.bones[this.boneIndicesBy4CC[fourcc]];
}
//-----------
// Returns the bone with the given index.
getBone(b) {
return this.bones[b];
}
//------
// Returns the bone index for the given 4CC name
getBoneIndex(fourcc) {
return this.boneIndicesBy4CC[fourcc];
}
//-----------
// Updates the skeleton's bones with the given local
// translation/rotation data -- the translation data being ignored
// for all bones except the root bone.
setBones(trsets) {
var bone, k, len, trset;
//-------
for (k = 0, len = trsets.length; k < len; k++) {
trset = trsets[k];
bone = this.getBoneBy4CC(trset.getFourCC());
if (bone) {
if (bone.isRoot()) {
bone.updateLocalTransAndRot(trset);
} else {
bone.updateLocalRot(trset);
}
}
}
this.root.computeGlobalTransforms();
if (this.USE_TRX_BONE_DATA) {
this.updateCurGlobalPoseTRXData();
return this.updateTwistData();
} else {
return this.updateSkinMatRows();
}
}
// Returns the current skinning matrix rows array, containing
// 3 * 4 matrix components per bone.
getSkinMatRows() {
return this.skinMatRows;
}
//-------------
getSkelXformsData() {
return this.skelXformsData;
}
//-----------------
getSkelTexWidth() {
return this.skelTexWidth;
}
//--------------
getSkelTexHeight() {
return this.skelTexHeight;
}
//---------------
getBoneTwistData() {
return this.twistData;
}
//---------------
getTwistTexWidth() {
return this.twistTexWidth;
}
//---------------
getTwistTexHeight() {
return this.twistTexHeight;
}
//----------------
//   Returns the result of our spoof of the vertex shader's skinning
//   matrix generation (which does not happen unless @USE_TRX_BONE_DATA
//   and TEST_CPU_TRX_TO_MAT are both true).
getVSSkinMatRows() {
return this.vsSkinMatRows;
}
//---------------
updateVSSkinMatRows() {
var b, b12, bone, i, i4, j, k, l, len, m, ref, vsbsmr;
//------------------
vsbsmr = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
ref = this.bones;
for (b = k = 0, len = ref.length; k < len; b = ++k) {
bone = ref[b];
b12 = b * 3 * 4;
this._vsSetSkinMatRowsForBone(vsbsmr, b);
for (i = l = 0; l < 3; i = ++l) {
i4 = i * 4;
for (j = m = 0; m < 4; j = ++m) {
this.vsSkinMatRows[b12 + i4 + j] = vsbsmr[i][j];
}
}
}
return this.checkSkinningTRXs();
}
checkSkinningTRXs() {
var b, b12, bok, i, k, l, m, n, nmatch, ref, rowstr, smrb, vssmrb;
//----------------
if (this.nchk === 0) {
rowstr = (mat, b, i) => {
var base, j, row;
base = (b * 3 + i) * 4;
row = (function() {
var k, results;
results = [];
for (j = k = 0; k < 4; j = ++k) {
results.push(mat[base + j]);
}
return results;
})();
return RQ.qStr(row, 3);
};
nmatch = 0;
for (b = k = 0, ref = this.bones.length; (0 <= ref ? k < ref : k > ref); b = 0 <= ref ? ++k : --k) {
if (typeof lggr.trace === "function") {
lggr.trace(`--------  bone ${b} SMR  --------`);
}
for (i = l = 0; l < 3; i = ++l) {
if (typeof lggr.trace === "function") {
lggr.trace(`${rowstr(this.skinMatRows, b, i)}`);
}
}
if (typeof lggr.trace === "function") {
lggr.trace(`--------  bone ${b} VS-SMR  --------`);
}
for (i = m = 0; m < 3; i = ++m) {
if (typeof lggr.trace === "function") {
lggr.trace(`${rowstr(this.vsSkinMatRows, b, i)}`);
}
}
if (typeof lggr.trace === "function") {
lggr.trace("----------------");
}
b12 = b * 3 * 4;
smrb = (function() {
var n, results;
results = [];
for (i = n = 0; n < 12; i = ++n) {
results.push(this.skinMatRows[b12 + i]);
}
return results;
}).call(this);
vssmrb = (function() {
var n, results;
results = [];
for (i = n = 0; n < 12; i = ++n) {
results.push(this.vsSkinMatRows[b12 + i]);
}
return results;
}).call(this);
bok = true;
for (i = n = 0; n <= 12; i = ++n) {
if (1e-4 <= Math.abs(smrb[i] - vssmrb[i])) {
bok = false;
}
}
if (!bok) {
if (typeof lggr.debug === "function") {
lggr.debug(`skin mats match FAILS for bone ${b}`);
}
}
if (bok) {
++nmatch;
}
}
if (typeof lggr.debug === "function") {
lggr.debug(`matching skin mat count: ${nmatch} / ${this.bones.length}`);
}
return ++this.nchk;
}
}
//--------  Our spoof of the vertex shader skin mat generation  --------
_setQProd(qr, qa, qb) {
var i, k, rc, rd, re, va, vb, wa, wb;
va = [qa[0], qa[1], qa[2]];
vb = [qb[0], qb[1], qb[2]];
wa = qa[3];
wb = qb[3];
qr[3] = (wa * wb) - (va[0] * vb[0] + va[1] * vb[1] + va[2] * vb[2]);
rc = [wa * vb[0], wa * vb[1], wa * vb[2]];
rd = [wb * va[0], wb * va[1], wb * va[2]];
re = [va[1] * vb[2] - va[2] * vb[1], va[2] * vb[0] - va[0] * vb[2], va[0] * vb[1] - va[1] * vb[0]];
for (i = k = 0; k < 3; i = ++k) {
qr[i] = rc[i] + rd[i] + re[i];
}
return void 0;
}
_setRotate(tr, t, q) {
var i, k, qc, qq, qr, qt;
qc = [-q[0], -q[1], -q[2], q[3]];
qt = [t[0], t[1], t[2], 0];
qq = [0, 0, 0, 0];
qr = [0, 0, 0, 0];
this._setQProd(qq, qt, qc);
this._setQProd(qr, q, qq);
for (i = k = 0; k < 3; i = ++k) {
tr[i] = qr[i];
}
return void 0;
}
_setTRXProd(tr, rr, ta, ra, tb, rb) {
var i, k, tba;
tba = [0, 0, 0];
this._setRotate(tba, tb, ra);
for (i = k = 0; k < 3; i = ++k) {
tr[i] = ta[i] + tba[i];
}
this._setQProd(rr, ra, rb);
return void 0;
}
_setTRMatRows(smr, t, r) {
var ref, ref1, ref2, w, wx2, wy2, wz2, x, x2, xx2, xy2, xz2, y, y2, yy2, yz2, z, z2, zz2;
x = r[0];
y = r[1];
z = r[2];
w = r[3];
x2 = x + x;
y2 = y + y;
z2 = z + z;
wx2 = w * x2;
wy2 = w * y2;
wz2 = w * z2;
xx2 = x * x2;
xy2 = x * y2;
xz2 = x * z2;
yy2 = y * y2;
yz2 = y * z2;
zz2 = z * z2;
splice.apply(smr[0], [0, 4].concat(ref = [1.0 - yy2 - zz2, xy2 - wz2, xz2 + wy2, t[0]])), ref;
splice.apply(smr[1], [0, 4].concat(ref1 = [xy2 + wz2, 1.0 - xx2 - zz2, yz2 - wx2, t[1]])), ref1;
return (splice.apply(smr[2], [0, 4].concat(ref2 = [xz2 - wy2, yz2 + wx2, 1.0 - xx2 - yy2, t[2]])), ref2);
}
//   Spoof of vertex shader's setSkinMatRowsForBone() function.
_vsSetSkinMatRowsForBone(bsmr, b) {
var i, icgr, icgt, iibr, iibt, rCGb, rIBb, rSkinb, tCGb, tIBb, tSkinb;
iibt = b * 4 * 4;
iibr = iibt + 4; //  Inverse Bind Pose
icgt = iibr + 4;
icgr = icgt + 4; //  Current (global) Pose
tSkinb = [0, 0, 0];
rSkinb = [0, 0, 0, 0];
tCGb = (function() {
var k, results;
results = [];
for (i = k = 0; k < 3; i = ++k) {
results.push(this.skelXforms[icgt + i]);
}
return results;
}).call(this);
rCGb = (function() {
var k, results;
results = [];
for (i = k = 0; k < 4; i = ++k) {
results.push(this.skelXforms[icgr + i]);
}
return results;
}).call(this);
tIBb = (function() {
var k, results;
results = [];
for (i = k = 0; k < 3; i = ++k) {
results.push(this.skelXforms[iibt + i]);
}
return results;
}).call(this);
rIBb = (function() {
var k, results;
results = [];
for (i = k = 0; k < 4; i = ++k) {
results.push(this.skelXforms[iibr + i]);
}
return results;
}).call(this);
this._setTRXProd(tSkinb, rSkinb, tCGb, rCGb, tIBb, rIBb);
return this._setTRMatRows(bsmr, tSkinb, rSkinb);
}
};
// "Static" members.
Skeleton.SHOULDER_TWIST_FLAG_VALUE = 2;
Skeleton.WRIST_TWIST_FLAG_VALUE = 3;
//@PARENT_WRIST_TWIST_FLAG_VALUE = 5
Skeleton.ROOT4cc = FourCC.fourCCInt("ROOT");
void 0; // void result
return Skeleton;
}).call(this);
// Export
cwaenv.add(Skeleton, "Skeleton");
// (End Skeleton.coffee)
}).call(this);
// -------- MorphVertex.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, MorphVertex, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Morphs");
V3 = cwaenv.get("E3Vec");
//----------------
MorphVertex = class MorphVertex {
//----------------
constructor() {
this.ixVertex = -1;
this.offset = this.normal = null;
}
//----------
// "Static" members.
//   Creates a new JSA Morph Set from the given JSON morph set.
static fromJSON(jsnmphvtx) {
var mphvtx;
//--------
mphvtx = new MorphVertex();
mphvtx.setFromJSON(jsnmphvtx);
return mphvtx;
}
static fromBin(avdv) {
var mphvtx;
//--------
mphvtx = new MorphVertex();
mphvtx.setFromBin(avdv);
return mphvtx;
}
// "Instance" members.
setFromJSON(jsnmphvtx) {
//----------
//	{ "vertex" : 3242, "weight" : 0.92,
//   "offset" : [ 0.0, -0.124, 0.0 ],
//   "normal" : [ 0.344, 0.042, 0.93i ] }
this.ixVertex = jsnmphvtx.vertex;
this.offset = V3.copyOfV3(jsnmphvtx.offset);
return this.normal = V3.copyOfV3(jsnmphvtx.normal);
}
setFromBin(avdv) {
var weight;
//----------
this.ixVertex = avdv.nextUint();
weight = avdv.nextFloat();
this.offset = avdv.nextVec3();
return this.normal = avdv.nextVec3();
}
//   Returns this morph-set''s vertex index.
getVertexId() {
return this.ixVertex;
}
//----------
//   Returns this morph-set''s offset (distortion) vector.
getOffset() {
return this.offset;
}
//--------
//   Returns this morph-set''s normal vector.
getNormal() {
return this.normal;
}
};
//--------
// Export
cwaenv.add(MorphVertex, "MorphVertex");
// (End MorphVertex.coffee)
}).call(this);
// -------- MorphTarget.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var FourCC, Logger, MorphTarget, MorphVertex, RQ, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Morphs");
FourCC = cwaenv.get("FourCC");
RQ = cwaenv.get("RotQuat");
MorphVertex = cwaenv.get("MorphVertex");
//----------------
MorphTarget = class MorphTarget {
//----------------
constructor() {
//----------
this.fourCCName = 0;
this.vertices = null;
this.stdVerticesDesc = [-1, 0, [], []];
this.dupVerticesDesc = [-1, 0, [], []];
}
// "Static" members.
//   Creates a new JSA Morph Target from the given JSON morph target.
static fromJSON(jsnmphtgt) {
var mphtgt;
//--------
mphtgt = new MorphTarget();
mphtgt.setFromJSON(jsnmphtgt);
return mphtgt;
}
static fromBin(avdv) {
var mphtgt;
//--------
mphtgt = new MorphTarget();
mphtgt.setFromBin(avdv);
return mphtgt;
}
//   Constructs this MorphTarget from the given stream.
//   The boolean parameter indicates whether or not each morph target
//   has its own normal.
setFromJSON(jsnmphtgt) {
//----------
this.fourCCName = FourCC.fourCCInt(jsnmphtgt.morphTargetName);
return this.vertices = jsnmphtgt.morphSets.map(MorphVertex.fromJSON);
}
setFromBin(avdv) {
var nMorphSets, s;
//----------
this.fourCCName = avdv.nextStr4cc();
nMorphSets = avdv.nextUint();
return this.vertices = (function() {
var j, ref, results;
results = [];
for (s = j = 0, ref = nMorphSets; (0 <= ref ? j < ref : j > ref); s = 0 <= ref ? ++j : --j) {
results.push(MorphVertex.fromBin(avdv));
}
return results;
})();
}
//   Returns the Four-CC name of this xmorph-target. */
getFourCCName() {
return this.fourCCName;
}
//------------
//   Returns the number of MorphVertexes for this morph-target. */
getVertexCount() {
return this.vertices.length;
}
//-------------
//   Returns the MorphVertex array for this morph-target. */
getVertices() {
return this.vertices;
}
//-----------
//   Returns the MorphVertex with the given index. */
getVertex(i) {
return this.vertices[i];
}
//--------
getVertexSegments() {
return [this.stdVerticesDesc, this.dupVerticesDesc];
}
//----------------
vertexRangeLimits(NV, NVNoDups, dupLists) {
var dhi, dlo, dv, hi, j, l, len, len1, lo, ref, ref1, v, vtx;
//----------------
lo = NVNoDups;
hi = 0;
dlo = NV;
dhi = NVNoDups;
ref = this.vertices;
for (j = 0, len = ref.length; j < len; j++) {
vtx = ref[j];
v = vtx.getVertexId();
if (v < lo) {
lo = v;
}
if (hi <= v) {
hi = v + 1;
}
ref1 = dupLists[v];
for (l = 0, len1 = ref1.length; l < len1; l++) {
dv = ref1[l];
if (dv < dlo) {
dlo = dv;
}
if (dhi <= dv) {
dhi = dv + 1;
}
}
}
if (hi <= lo) {
lo = hi = -1;
}
if (dhi <= dlo) {
dlo = dhi = -1;
}
return [lo, hi, dlo, dhi];
}
makeVertexArraySegments(NV, NVNoDups, dupLists, headRotQV) {
var NM, NM3, NMD, NMD3, NV3, NVND, delta, dhi, dlo, dmnorm, dmpos, dmv, dmv3, hi, j, k, l, len, len1, lo, m, mnorm, mpos, mtItem, mv, mv3, n, ref, ref1, ref2, ref3;
//----------------------
NV3 = NV * 3;
NVND = NVNoDups;
[lo, hi, dlo, dhi] = this.vertexRangeLimits(NV, NVND, dupLists);
NM = hi - lo;
NMD = dhi - dlo;
NM3 = 3 * NM;
NMD3 = 3 * NMD;
mpos = new Float32Array(NM3);
mnorm = new Float32Array(NM3);
for (k = j = 0, ref = NM3; (0 <= ref ? j < ref : j > ref); k = 0 <= ref ? ++j : --j) {
(mpos[k] = 0, mnorm[k] = 0);
}
dmpos = new Float32Array(NMD3);
dmnorm = new Float32Array(NMD3);
for (k = l = 0, ref1 = NM3; (0 <= ref1 ? l < ref1 : l > ref1); k = 0 <= ref1 ? ++l : --l) {
(dmpos[k] = 0, dmnorm[k] = 0);
}
delta = [0, 0, 0];
ref2 = this.vertices;
for (m = 0, len = ref2.length; m < len; m++) {
mtItem = ref2[m];
// Get the vertex index.
mv = mtItem.getVertexId();
mv3 = 3 * (mv - lo);
// Update vertex offset, via rotated morph target data in delta.
RQ.rotateV3(delta, mtItem.getOffset(), headRotQV);
mpos[mv3] = delta[0];
mpos[mv3 + 1] = delta[1];
mpos[mv3 + 2] = delta[2];
// Update vertex normal, via rotated morph target data in delta.
RQ.rotateV3(delta, mtItem.getNormal(), headRotQV);
mnorm[mv3] = delta[0];
mnorm[mv3 + 1] = delta[1];
mnorm[mv3 + 2] = delta[2];
// Do the same updates for any duplicates of vertex mv.
if (dupLists[mv].length !== 0) {
ref3 = dupLists[mv];
for (n = 0, len1 = ref3.length; n < len1; n++) {
dmv = ref3[n];
dmv3 = 3 * (dmv - dlo);
dmpos[dmv3] = mpos[mv3];
dmpos[dmv3 + 1] = mpos[mv3 + 1];
dmpos[dmv3 + 2] = mpos[mv3 + 2];
dmnorm[dmv3] = mnorm[mv3];
dmnorm[dmv3 + 1] = mnorm[mv3 + 1];
dmnorm[dmv3 + 2] = mnorm[mv3 + 2];
}
}
}
//     @stdVerticesDesc = [lo, NM, mpos, mnorm]
//     @dupVerticesDesc = [dlo, NMD, dmpos, dmnorm]
this.stdVerticesDesc = {
range: {
base: lo,
size: NM
},
buffers: {
pos: mpos,
norm: mnorm
}
};
this.dupVerticesDesc = {
range: {
base: dlo,
size: NMD
},
buffers: {
pos: dmpos,
norm: dmnorm
}
};
return void 0; // void result
}
};
// Export
cwaenv.add(MorphTarget, "MorphTarget");
// (End MorphTarget.coffee)
}).call(this);
// -------- MorphsManager.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, MorphTarget, MorphsManager, RQ, VBO, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
// No Logger uses. Need to reintroduce tracing calls in place of log calls
Logger = cwaenv.get("Logger");
lggr = Logger.get("Morphs");
VBO = cwaenv.get("VBO");
RQ = cwaenv.get("RotQuat");
MorphTarget = cwaenv.get("MorphTarget");
//------------------
MorphsManager = class MorphsManager {
//------------------
constructor(mtags) {
//----------
// Context
// -------
// A morphs manager holds the definitions for the set of morph
// targets associated with a given character's surface mesh.
// Each morph target effectively defines a deformation for each
// vertex in some subset of the mesh's vertices, that vertex
// deformation being represented by a 3D offset (w.r.t. the vertex's
// standard postion) and the 3D vertex normal caused by the
// deformation.
// The morphs manager also manages a fixed set of OpenGL (GPU)
// VBO slots used to apply morph targets during animation (i.e.
// rendering) of the associated character mesh.  Typically this set
// will contain exactly or around 4 slots.  Each VBO slot consists
// of a pair of vertex buffers, one to hold the offset data and one
// to hold the normal data, either (a) for a given morph target, or
// possibly (b) the weighted sum of such data for several morph
// targets.  Case (a) occurs when the number of morph targets
// required to render a given frame does not exceed the number of
// VBO slots; case (b) arises when the former number does exceed the
// latter, meaning that the data from two or more morph targets must
// be combined (by methods in this class) into a single VBO slot
// prior to upload to the VBO slot's GPU buffers.
// The tags corresponding to the morph target VBO slots -- e.g.
// ['A', 'B', 'C', 'D'] assuming the vertex shader has 4 morph target
// slots.
this.MORPH_TAGS = mtags;
// Array of MorphTarget objects for the mesh associated with this
// morph manager.
this.morphTargets = [];
// Array mapping the morph targets' 4cc codes to their indices, i.e.
// indices in the @morphTargets array.
this.mtIndicesBy4CC = null;
//---
// The number of vertices for the associated Mesh.
this.nVertices = -1;
// The number of mesh vertices excluding duplicates,
// so @nVerticesNoDups <= @nVertices
this.nVerticesNoDups = -1;
// Arrays of morph offset (position) and normal buffer references,
// indexed by morph-target: each array has one entry per morph target
// and each entry is a link to a buffer containing 3 * @nVertices
// float values.
this.morphOffsetBufs = [];
this.morphNormBufs = [];
// Position (offset) and normal VBO arrays for this morph manager.
// Each array has one entry per VBO slot.
// Usually the actual VBO holds the contents of the pair of
// @morphOffsetBufs and @morphNormBufs entries for the particular
// morph target assigned to that VBO slot.  But when the VBO slot
// is assigned "multiple morphs" (as described above) the pair of
// VBOs for that slot will hold the appropriately weighted sums of
// the contents of several pairs of @morphOffsetBufs and
// @morphNormBufs entries from @morphOffsetBufs.
this.posVBOs = null;
this.normVBOs = null;
// A morph target buffer (of length 3 * @nVertices) containing all
// zeros -- used to clear both position (offset) and normal VBOs.
this.zeroMorphBuf = null;
// The pair of morph target buffers (in CPU memory) used to build
// weighted sums of individual per-vertex morph target data (from
// @morphOffsetBufs and @morphNormBufs) for uploading to the
// "multiple morphs" pair of VBOs.
this.multiMorphOffsetBuf = null;
this.multiMorphNormBuf = null;
// Records the current usage status for the morph target VBOs:
// there is one entry for each VBO slot, each holding a pair of
// vertex segment definitions (i.e. vertex index ranges) -- one for
// the "main" vertices of the current mesh (i.e. those with indices
// below @nVerticesNoDups) and one for the mesh's duplicate vertices
// -- i.e. those with indices in the range
// [@nVerticesNoDups .. @nVertices).
this.vbosUsage = null;
// Array, with one entry per morph target VBO slot), recording the
// current assignment of morph targets to the VBO slots.  Each entry
// either is the relevant morph target index or is negative,
// indicating either that the slot is currently unused or that it
// is currently assigned multiple morph targets.
this.morphAlloc = null;
// Array of flags, one per VBO slot, indicating whether or not the
// current morph target assignment to that slot is newly made, i.e.
// whether it was made for the current rendering operation
// (automatically false if there is no current assignment for the
// given slot, or if multiple morphs are assigned to it).
this.morphAllocIsNew = null;
// The index of the current multiple morphs VBO slot if there is one,
// or a negative value otherwise.
this.iMulti = -1;
// Array containing the indices of the morph targets included in the
// current multiple morphs set.
this.multiMorphs = [];
// Array defining the weight (i.e. CASMorph amount) to be applied
// for each currently active morph target VBO slot, i.e. for each
// non-negative entry in @morphAlloc; always set to 1.0 for the
// current multiple morphs slot if there is one (i.e. when @iMulti
// is non-negative).
this.morphWeights = null;
// A copy of @morphAlloc as was during the previous rendering
// operation -- supports the updating of @morphAllocIsNew.
this.prevMorphAlloc = null;
// The pair of effective vertex ranges for the current set of multiple
// morph targets -- the smallest superset range of the individual
// morph target ranges in both cases.
this.mmRanges = null;
// Array containing one entry for each morph target in the current
// multiple morph targets set, each entry itself contains a pair of
// items, for main and duplicate vertex ranges, holding the morph
// target weight and vertex data in each case -- unless there is
// no vertex data for the given range in which case the entire
// entry is null.
this.mmWeightedSegsList = null;
}
// "Static" members.
//   Creates a new JSA Morph Handler from the given JSON morph target
//   list.
static fromJSON(jsnmtl, mtags) {
var mm;
//--------
mm = new MorphsManager(mtags);
mm.setFromJSON(jsnmtl);
return mm;
}
static fromBin(avdv, mtags) {
var mm;
//-------
mm = new MorphsManager(mtags);
mm.setFromBin(avdv);
return mm;
}
// "Instance" members.
_lohi(lo, hi) {
return [lo, hi];
}
//---
_lohistr(lohi) {
var hi, lo;
[lo, hi] = lohi;
return `[${lo}..${hi})`;
}
//-------
_lohi2str(lo, hi) {
return this._lohistr(this._lohi(lo, hi));
}
//--------
_limits(rng) {
var lo, sz;
lo = rng.base;
sz = rng.size;
return this._lohi(lo, lo + sz);
}
//------
_rngstr(rng) {
return this._lohistr(this._limits(rng));
}
//-------
_jstr(j) {
if (j === 0) {
return "main";
} else {
return " dup";
}
}
//----
//   Constructs this MorphHandler from the given JSON morph target list.
setFromJSON(jsnmtl) {
var NMT, json2mt, t;
//----------
json2mt = MorphTarget.fromJSON;
NMT = jsnmtl.length;
this.morphTargets = (function() {
var k, ref, results;
results = [];
for (t = k = 0, ref = NMT; (0 <= ref ? k < ref : k > ref); t = 0 <= ref ? ++k : --k) {
results.push(json2mt(jsnmtl[t]));
}
return results;
})();
return this.set4CCIndex();
}
setFromBin(avdv) {
var NMT, t;
//---------
NMT = avdv.nextUint();
this.morphTargets = (function() {
var k, ref, results;
results = [];
for (t = k = 0, ref = NMT; (0 <= ref ? k < ref : k > ref); t = 0 <= ref ? ++k : --k) {
results.push(MorphTarget.fromBin(avdv));
}
return results;
})();
return this.set4CCIndex();
}
set4CCIndex() {
var k, len, m, mBy4cc, mtgt, ref;
//----------
mBy4cc = [];
ref = this.morphTargets;
for (m = k = 0, len = ref.length; k < len; m = ++k) {
mtgt = ref[m];
mBy4cc[mtgt.getFourCCName()] = m;
}
return this.mtIndicesBy4CC = mBy4cc;
}
enableMorphVBOs() {
var i, k, len, ref, w;
ref = this.morphWeights;
//--------------
for (i = k = 0, len = ref.length; k < len; i = ++k) {
w = ref[i];
if (!(w !== 0)) {
continue;
}
this.posVBOs[i].enableAttrib();
this.normVBOs[i].enableAttrib();
}
return void 0; // (void result)
}
disableMorphVBOs() {
var i, k, len, ref, w;
ref = this.morphWeights;
//---------------
for (i = k = 0, len = ref.length; k < len; i = ++k) {
w = ref[i];
if (!(w !== 0)) {
continue;
}
this.posVBOs[i].disableAttrib();
this.normVBOs[i].disableAttrib();
}
return void 0; // (void result)
}
getMorphWeights() {
return this.morphWeights;
}
//--------------
createCPUVertexBuffers(nv) {
var nV3;
//---------------------
this.nVertices = nv;
nV3 = nv * 3;
this.zeroMorphBuf = new Float32Array(nV3);
this.multiMorphOffsetBuf = new Float32Array(nV3);
return this.multiMorphNormBuf = new Float32Array(nV3);
}
createGLVBOs(gl, getAttrLoc) {
var abcd, k, len, ref, setVBO;
//-----------
// Auxiliary definitions.
this.gl = gl;
this.posVBOs = [];
this.normVBOs = [];
setVBO = (vbos, id, buf) => {
return vbos.push(VBO.makeDyn(gl, 3, buf, getAttrLoc(id)));
};
ref = this.MORPH_TAGS;
for (k = 0, len = ref.length; k < len; k++) {
abcd = ref[k];
setVBO(this.posVBOs, `MorphPos${abcd}`, this.zeroMorphBuf);
setVBO(this.normVBOs, `MorphNorm${abcd}`, this.zeroMorphBuf);
}
return void 0; // dummy result, simplifies JS output
}
makeVertexArrays(vDupIndices, globalHeadRot) {
var NMT, NV, NV3, NVND, d, dupLists, i, k, l, len, len1, m, mtgt, n, ref, ref1, t, v;
//---------------
NV = this.nVertices;
NV3 = 3 * NV;
this.nVerticesNoDups = NVND = NV - vDupIndices.length;
NMT = this.morphTargets.length;
dupLists = (function() {
var k, ref, results;
results = [];
for (i = k = 0, ref = NVND; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
results.push([]);
}
return results;
})();
for (d = k = 0, len = vDupIndices.length; k < len; d = ++k) {
v = vDupIndices[d];
dupLists[v].push(NVND + d);
}
ref = this.morphTargets;
for (m = l = 0, len1 = ref.length; l < len1; m = ++l) {
mtgt = ref[m];
mtgt.makeVertexArraySegments(NV, NVND, dupLists, globalHeadRot.xyzw);
}
this.morphAlloc = [];
this.morphWeights = [];
this.vbosUsage = [];
for (t = n = 0, ref1 = this.MORPH_TAGS.length; (0 <= ref1 ? n < ref1 : n > ref1); t = 0 <= ref1 ? ++n : --n) {
this.morphAlloc.push(-1);
this.morphWeights.push(0);
this.vbosUsage.push([
{
base: -1,
size: 0
},
{
base: -1,
size: 0
}
]);
}
// LOGGING
//     log "--------  Morph Target ranges  --------"
//     for mtgt,m in @morphTargets
//       [mrng, drng] = (vs.range for vs in do mtgt.getVertexSegments)
//       dstr = (if drng.size is 0 then "none" else @_rngstr drng)
//       log "#{m}:  #{@_rngstr mrng}  #{dstr}"
//     log "----------------------------------------"
// TEST
//    do @testDirtyRangesForVBOClean
return void 0;
}
setGLDataForDraw(currentMorphs) {
var activeMorphs, k, len, m, morph, t;
//---------------
this.prevMorphAlloc = this.morphAlloc;
this.morphWeights = (function() {
var k, ref, results;
results = [];
for (t = k = 0, ref = this.MORPH_TAGS.length; (0 <= ref ? k < ref : k > ref); t = 0 <= ref ? ++k : --k) {
results.push(0);
}
return results;
}).call(this);
// Active morphs in the new cycle: record index and weight for each.
activeMorphs = [];
for (k = 0, len = currentMorphs.length; k < len; k++) {
morph = currentMorphs[k];
if (!((morph.getAmount()) !== 0)) {
continue;
}
m = this.mtIndicesBy4CC[morph.getName()];
activeMorphs.push([m, morph.getAmount()]);
}
if (activeMorphs.length !== 0) {
this.allocGLMorphSlots(activeMorphs);
this.morphDataToGPU();
}
//       if 4 < activeMorphs.length
//         ma = @morphAlloc;  mw = @morphWeights
//         log "____  uGLM #{@nUGLM}"+
//           "  alloc: #{ma[0]} #{ma[1]} #{ma[2]} #{ma[3]}"+
//           "  wghts:  #{mw[0]} #{mw[1]} #{mw[2]} #{mw[3]}"
//         if 0 <= @iMulti
//           mstr = (mlt[0] for mlt in @multiMorphs).join " "
//           log "              ... multiMorphs @ #{iMulti}: #{mstr}"
return void 0;
}
allocGLMorphSlots(activeMorphs) {
var NMT, a, aMph, aa, assignSlot, getFreeSlot, i, iMulti, k, l, len, multi, nUnalloc, nUsed, pm, ref, ref1, t, uLimit;
//----------------
// activeMorphs Format:
//    [ [morphIndex, morphAmount], ... ]
// @morphAlloc, @prevMorphAlloc
// Each of these has one entry per GPU morph slot, each entry being
// the index of the morph allocated to the given slot, or negative
// (-1) for an inactive/as-yet-unallocated slot.
// For each active slot, @morphWeights has the weight for the morph
// allocated to that slot, i.e. for the matching @morphAlloc entry.
NMT = this.MORPH_TAGS.length;
this.morphAlloc = [];
this.morphAllocIsNew = [];
for (t = k = 0, ref = NMT; (0 <= ref ? k < ref : k > ref); t = 0 <= ref ? ++k : --k) {
(this.morphAlloc.push(-1), this.morphAllocIsNew.push(false));
}
nUsed = 0;
nUnalloc = activeMorphs.length;
// Number of slots we can use for single morphs.
uLimit = (activeMorphs.length <= NMT ? NMT : NMT - 1);
// Function to allocate a given active morph to a given slot.
assignSlot = (i, aMph) => {
this.morphAlloc[i] = aMph[0];
this.morphWeights[i] = aMph[1];
++nUsed;
--nUnalloc;
return aMph[0] = -1; // (mark aMph as allocated)
};
ref1 = this.prevMorphAlloc;
// Deal with morphs from the previous cycle that are still active
// in this one.
for (i = l = 0, len = ref1.length; l < len; i = ++l) {
pm = ref1[i];
if (!(0 <= pm && nUsed !== uLimit)) {
continue;
}
a = 0;
aa = activeMorphs.length;
// Bounded linear search for pm in activeMorphs: if pm is found
// then re-use its slot -- i.e. the slot with index i.
while (a !== aa) {
if (activeMorphs[a][0] === pm) {
aa = a;
} else {
++a;
}
}
if (a !== activeMorphs.length) {
assignSlot(i, activeMorphs[a]);
}
}
// Function to find the next free slot (which must exist).
getFreeSlot = () => {
i = 0;
((function() {
var results;
results = [];
while (0 <= this.morphAlloc[i]) {
results.push(++i);
}
return results;
}).call(this));
return i;
};
// Deal with remaining unallocated active morphs, if any.
multi = [];
iMulti = -1;
a = 0;
while (nUnalloc !== 0) {
// Test that we've not reached an overloaded final slot.
if (nUsed !== uLimit) {
// Find the next unallocated morph for this cycle.
while (activeMorphs[a][0] < 0) {
++a;
}
// Allocate a free slot to the unallocated morph, and
// flag the fact that the slot's data must be updated.
i = getFreeSlot();
this.morphAllocIsNew[i] = true;
assignSlot(i, activeMorphs[a]);
++a;
} else {
// We're at the final slot and it's overloaded: collect the
// activeMorphs entries for this slot in multi, determine
// the slot index, and fix the slot weight at 1, since we shall
// apply the individual weights before uploading to the GPU.
multi = (function() {
var len1, n, results;
results = [];
for (n = 0, len1 = activeMorphs.length; n < len1; n++) {
aMph = activeMorphs[n];
if (0 <= aMph[0]) {
results.push(aMph);
}
}
return results;
})();
iMulti = getFreeSlot();
this.morphWeights[iMulti] = 1;
++nUsed;
nUnalloc -= multi.length; // (should force termination)
}
}
// Caller expects us to have set @morphAlloc, @morphWeights,
// @morphAllocIsNew, @iMulti, @multiMorphs .
this.iMulti = iMulti;
this.multiMorphs = multi;
return void 0; // void result
}
dirtyRangesForVBOClean(usedrange, newrange) {
var hi, k, len, limslist, lo, results, uhi, ulo;
//---------------------
// ASSERT: usedrange.size isnt 0 AND newrange.size isnt 0
ulo = usedrange.base;
uhi = ulo + usedrange.size;
lo = newrange.base;
hi = lo + newrange.size;
// We want the set difference, [ulo..uhi) \ [lo..hi),
// expressed as a list of non-empty ranges.
if (ulo < lo && hi < uhi) {
// ranges.length = 2
limslist = [[ulo, lo], [hi, uhi]];
} else if (lo <= ulo && uhi <= hi) {
// ranges.length = 0
limslist = [];
} else {
// ranges.length = 1
// (ulo < lo AND uhi <= hi) NEQ (lo <= ulo AND hi < uhi)
if (uhi <= hi) {
limslist = [[ulo, (lo < uhi ? lo : uhi)]];
}
// We could replace the next "if ... then" with "else"
// but for symmetry's sake we leave it.
if (lo <= ulo) {
limslist = [[(ulo < hi ? hi : ulo), uhi]];
}
}
results = [];
for (k = 0, len = limslist.length; k < len; k++) {
[lo, hi] = limslist[k];
results.push({
// Result is a list of range objects.
base: lo,
size: hi - lo
});
}
return results;
}
cleanMorphVBOs(i, m, newsegs) {
var cleanBuf, dhi, dlo, dr, drngs, j, k, l, len, len1, newrng, ref, usedrng, vbou_i;
//-------------
vbou_i = this.vbosUsage[i];
ref = [0, 1];
//     for j in [0,1]
//       log "____  cleanMphVBOS #{i},#{m} (#{@_jstr j}):"+
//         "  old #{@_rngstr vbou_i[j]}  new #{@_rngstr newsegs[j].range}"
for (k = 0, len = ref.length; k < len; k++) {
j = ref[k];
//       sjstr = "slot #{i} #{@_jstr j}"
usedrng = vbou_i[j];
newrng = newsegs[j].range;
if (usedrng.size === 0 || newrng.size === 0) {
} else {
//         log "____  #{sjstr}:  (skip cleaning check)"
drngs = this.dirtyRangesForVBOClean(usedrng, newrng);
for (l = 0, len1 = drngs.length; l < len1; l++) {
dr = drngs[l];
dlo = dr.base;
dhi = dlo + dr.size;
cleanBuf = this.zeroMorphBuf.subarray(3 * dlo, 3 * dhi);
this.posVBOs[i].uploadPartialData(dlo, cleanBuf);
this.normVBOs[i].uploadPartialData(dlo, cleanBuf);
}
}
// LOGGING ...
//         pfxstr =
//           "#{sjstr}: #{@_rngstr usedrng} \\ #{@_rngstr newrng} (#{m})"
//         drstr =
//           if drngs.length is 0 then "EMPTY"
//           else if drngs[0].size isnt usedrng.size
//                 "NEW "+(@_rngstr dr for dr in drngs).join ","
//           else "SAME"
//         log "____  #{pfxstr} --> #{drstr}"
// Update @vbosUsage if there is a new segment.
if (newrng.size !== 0) {
usedrng.base = newrng.base;
usedrng.size = newrng.size;
}
}
//       log "____  ... new @vbosUsage is:  #{@_rngstr @vbosUsage[i][j]}"
return void 0;
}
setMorphVBOs(i, mVtxSegs) {
var bufs, j, k, len, mvsegs, ref, rng;
ref = [0, 1];
// main vertices, duplicate vertices
//-----------
for (k = 0, len = ref.length; k < len; k++) {
j = ref[k];
mvsegs = mVtxSegs[j];
rng = mvsegs.range;
bufs = mvsegs.buffers;
if (rng.size !== 0) {
this.posVBOs[i].uploadPartialData(rng.base, bufs.pos);
this.normVBOs[i].uploadPartialData(rng.base, bufs.norm);
}
}
return void 0;
}
generateMultiMorphsSegsDescs() {
var NV, NVND, hi, j, k, l, len, len1, limits, lo, lohi, m, mmrng, mweight, ref, ref1, segs, segsj, shi, slo, srng, ssz, wSegs, wSegsList, wSegs_j, wSegsj;
//---------------------------
// Determine (for both vertex ranges -- main and duplicate)
// the limits of the effective vertex range and the list
// of individual morph vertex segments (each with the appropriate
// weight) contributing to the composite morph definition.
NV = this.nVertices;
NVND = this.nVerticesNoDups;
// Initial segment limits, and initial segments.
limits = [[NVND, 0], [NV, NVND]];
wSegsList = [];
ref = this.multiMorphs;
// Iterate over the contributing morphs.
for (k = 0, len = ref.length; k < len; k++) {
[m, mweight] = ref[k];
segs = this.morphTargets[m].getVertexSegments();
wSegs = [];
ref1 = [0, 1];
// main vertices, duplicate vertices
for (l = 0, len1 = ref1.length; l < len1; l++) {
j = ref1[l];
segsj = segs[j];
srng = segsj.range;
slo = srng.base;
ssz = srng.size;
shi = slo + ssz;
[lo, hi] = lohi = limits[j];
// Segment for morph m makes no contribution if it's empty.
wSegs_j = null;
if (ssz !== 0) {
if (slo < lo) {
// Determine whether the overall range needs to be extended
// at either or both ends on account of segsj
//log "____  morph #{m} #{@_jstr j}: #{@_rngstr srng}"
lohi[0] = slo;
}
if (hi < shi) {
lohi[1] = shi;
}
// Data for segsj's contribution.
wSegsj = {
range: segsj.range,
buffers: segsj.buffers,
weight: mweight
};
}
// Record segsj's (i.e. morph m's) contribution for vertex
// range j.
wSegs.push(wSegsj);
}
// Record morph m's pair of contributions.
wSegsList.push(wSegs);
}
mmrng = function(lohi) {
[lo, hi] = lohi;
if (hi <= lo) {
lo = hi = -1;
}
return {
base: lo,
size: hi - lo
};
};
// LOGGING
//     for j in [0,1]
//       log "____  #{@_jstr j} limits: #{@_rngstr (mmrng limits[j])}"
this.mmRanges = (function() {
var len2, n, results;
results = [];
for (n = 0, len2 = limits.length; n < len2; n++) {
lohi = limits[n];
results.push(mmrng(lohi));
}
return results;
})();
this.mmWeightedSegsList = wSegsList;
return void 0;
}
generateMultiMorphsVBOs() {
var hi, hi3, j, k, k3, l, len, len1, lo, lo3, mmNBuf, mmPBuf, n, nbseg, normbuf, o, pbseg, posbuf, ranges, ref, ref1, ref2, ref3, rng, slo, slo3, ssz, ssz3, wSegs, wSegsList, wSegsj, weight;
//----------------------
ranges = this.mmRanges;
wSegsList = this.mmWeightedSegsList;
mmPBuf = this.multiMorphOffsetBuf;
mmNBuf = this.multiMorphNormBuf;
ref = [0, 1];
// main vertices, duplicate vertices
for (k = 0, len = ref.length; k < len; k++) {
j = ref[k];
rng = ranges[j];
lo = rng.base;
hi = lo + rng.size;
if (lo < hi) {
lo3 = 3 * lo;
hi3 = 3 * hi;
for (k3 = l = ref1 = lo3, ref2 = hi3; (ref1 <= ref2 ? l < ref2 : l > ref2); k3 = ref1 <= ref2 ? ++l : --l) {
// Clear the relevant segments of our local offset/normal buffers.
(mmPBuf[k3] = 0, mmNBuf[k3] = 0);
}
// Iterate over those morphs which contribute to vertex range j.
for (n = 0, len1 = wSegsList.length; n < len1; n++) {
wSegs = wSegsList[n];
if (!wSegs[j]) {
continue;
}
// Extract the weight, range data and offset/normal values
// for the given morph and accumulate its weighted
// contribution in our local offset/normal buffers.
wSegsj = wSegs[j];
weight = wSegsj.weight;
rng = wSegsj.range;
slo = rng.base;
ssz = rng.size;
posbuf = wSegsj.buffers.pos;
normbuf = wSegsj.buffers.norm;
slo3 = 3 * slo;
ssz3 = 3 * ssz;
for (k3 = o = 0, ref3 = ssz3; (0 <= ref3 ? o < ref3 : o > ref3); k3 = 0 <= ref3 ? ++o : --o) {
mmPBuf[slo3 + k3] += weight * posbuf[k3];
mmNBuf[slo3 + k3] += weight * normbuf[k3];
}
}
// Create typed arrays for the operative segments of
// our local offset/normal buffers, and upload them to the GL
// VBOs.
pbseg = mmPBuf.subarray(lo3, hi3);
nbseg = mmNBuf.subarray(lo3, hi3);
this.posVBOs[this.iMulti].uploadPartialData(lo, pbseg);
this.normVBOs[this.iMulti].uploadPartialData(lo, nbseg);
}
}
return void 0;
}
morphDataToGPU() {
var GL, GL_A_BUF, i, k, len, m, mmrng, mmvsegs, mvsegs, ref;
//-------------
GL = this.gl;
GL_A_BUF = GL.ARRAY_BUFFER;
ref = this.morphAlloc;
// LOGGING
//     imnew = ([i,m] for m,i in @morphAlloc when 0<=m and @morphAllocIsNew[i])
//     nnew = imnew.length
//     if (nnew isnt 0 or 0 <= @iMulti) and (@_f isnt undefined)
//       log "____  ----------------------------------------"
//       log "____  f=#{@_f}  n_new=#{nnew} ..."
//       log "____  newAlloc [i,m] pairs:  "+("#{nn}" for nn in imnew).join "  "
// Update the GL data for those slots to which a single
// morph has been newly allocated in this cycle.
for (i = k = 0, len = ref.length; k < len; i = ++k) {
m = ref[i];
if (!(0 <= m && this.morphAllocIsNew[i])) {
continue;
}
mvsegs = this.morphTargets[m].getVertexSegments();
this.cleanMorphVBOs(i, m, mvsegs);
this.setMorphVBOs(i, mvsegs);
}
// Is there also a multi-morph slot on this cycle?
if (0 <= this.iMulti) {
// LOGGING
//       mms = ("#{m}" for [m,w] in @multiMorphs when 0 <= m).join ","
//       log "____  --------"
//       log "____  iMulti=#{@iMulti}  morphs: #{mms}"
//       cstr = ("#{@_rngstr urng}" for urng in @vbosUsage[@iMulti]).join "  "
//       log "____  CURRENTLY USED ranges:  #{cstr}"
// Generate multi-morphs segments data.
this.generateMultiMorphsSegsDescs();
// Pseudo-segments pair for the multi-morph VBO slot.
mmvsegs = (function() {
var l, len1, ref1, results;
ref1 = this.mmRanges;
results = [];
for (l = 0, len1 = ref1.length; l < len1; l++) {
mmrng = ref1[l];
results.push({
range: mmrng
});
}
return results;
}).call(this);
// Clean slot @iMulti's VBOs.
this.cleanMorphVBOs(this.iMulti, -1, mmvsegs);
// Use the multi-morphs segments data to generate and upload
// their VBOs.
this.generateMultiMorphsVBOs();
}
return void 0; // void result
}
};
//   testDirtyRangesForVBOClean: ->
//     urec = {base:8, size: 5}
//     check = (lo, hi) =>
//       rr = @dirtyRangesForVBOClean urec, {base: lo, size: hi-lo}
//       ulo = urec.base;  uhi = ulo + urec.size
//       rrstr = ("#{@_rngstr r}" for r in rr).join ", "
//       log "old: #{@_rngstr urec}, new: #{@_lohi2str lo, hi} --> #{rrstr}  (N=#{rr.length})"
//     log "----------------------------------------"
//     check 5, 6
//     check 5, 8
//     check 5, 9
//     check 8, 9
//     check 8, 10
//     check 8, 13
//     check 7, 13
//     check 7, 14
//     check 7, 12
//     check 8, 12
//     check 9, 12
//     check 10,11
//     check 11,12
//     check 11,13
//     check 12,13
//     check 13,14
//     check 14,15
//     check 14,20
//     log "----------------------------------------"
// Export
cwaenv.add(MorphsManager, "MorphsManager");
// (End MorphsManager.coffee)
}).call(this);
// -------- MeshVertex.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var FourCC, Logger, MeshVertex, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
FourCC = cwaenv.get("FourCC");
V3 = cwaenv.get("E3Vec");
//---------------
MeshVertex = class MeshVertex {
//---------------
constructor() {
//----------
this.index = -1;
this.countBones = 0;
this.bone4cc = null;
this.weight = null;
this.offsetVector = null;
this.baseNormal = null;
this.distance = null;
}
// "Static" members.
//   Creates a new JSA Mesh Vertex from the given JSON mesh vertex
//   and index (of the vertex within the enclosing array).
static fromJSON(jsnmvtx, ix) {
var mvtx;
//--------
mvtx = new MeshVertex();
mvtx.setFromJSON(jsnmvtx, ix);
return mvtx;
}
static fromBin(avdv, ix) {
var mvtx;
//-------
mvtx = new MeshVertex();
mvtx.setFromBin(avdv, ix);
return mvtx;
}
// "Instance" members.
//   Constructs this MeshVertex from the given JSON mesh vertex object
//   assigning it the given index.
setFromJSON(jsnmvtx, ix) {
var CVT_4CC, MAKE_V3F;
//----------
CVT_4CC = FourCC.fourCCInt;
MAKE_V3F = V3.fromVec.bind(V3);
// Index within the enclosing mesh vertex list.
this.index = ix;
// Get the actual number of influencing-bones for this mesh-point.
this.countBones = jsnmvtx.countInfluences;
// Offset Vectors.
this.offsetVector = jsnmvtx.offsets.map(MAKE_V3F);
// Base-Normal Vectors.
this.baseNormal = jsnmvtx.baseNormals.map(MAKE_V3F);
// Influencing-Bone-IDs -- later these will be replaced by
// a matching array of references to the bones themselves.
this.bone4cc = jsnmvtx.influenceNames.map(CVT_4CC);
// Influence weights.
this.weight = jsnmvtx.weights.slice();
// Distances to ends of influencing bones.
return this.distance = jsnmvtx.xDistances.slice();
}
setFromBin(avdv, ix) {
var b, i, ibRange, ref, ref1;
//---------
this.index = ix;
this.countBones = avdv.nextUint(); // No. of influencing bones.
ibRange = (function() {
var results = [];
for (var i = 0, ref = this.countBones; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
return results;
}).apply(this);
this.offsetVector = (function() {
var i, len, results;
results = [];
for (i = 0, len = ibRange.length; i < len; i++) {
b = ibRange[i];
results.push(V3.fromVec(avdv.nextVec3()));
}
return results;
})();
this.baseNormal = (function() {
var i, len, results;
results = [];
for (i = 0, len = ibRange.length; i < len; i++) {
b = ibRange[i];
results.push(V3.fromVec(avdv.nextVec3()));
}
return results;
})();
// JRWG Could also try UInt32Array. And is using a named range a problem?
//@bone4cc      = (do avdv.nextStr4cc for b in ibRange)
this.bone4cc = new Array(this.countBones);
for (b = i = 0, ref1 = this.countBones; (0 <= ref1 ? i < ref1 : i > ref1); b = 0 <= ref1 ? ++i : --i) {
this.bone4cc[b] = avdv.nextStr4cc();
}
this.weight = (function() {
var j, len, results;
results = [];
for (j = 0, len = ibRange.length; j < len; j++) {
b = ibRange[j];
results.push(avdv.nextFloat());
}
return results;
})();
return this.distance = (function() {
var j, len, results;
results = [];
for (j = 0, len = ibRange.length; j < len; j++) {
b = ibRange[j];
results.push(avdv.nextFloat());
}
return results;
})();
}
//   Returns the distance from this point to its (main) bone-end.
getBoneEndDistance(b) {
return this.distance[b];
}
//-----------------
//   Returns this point''s index, w.r.t. its mesh''s points array.
getIndex() {
return this.index;
}
//-------
//   Returns the number of bones influencing this point.
getNumBones() {
return this.countBones;
}
//----------
//   Returns the specified influencing bone for this mesh-point.
getBone4cc(b) {
return this.bone4cc[b];
}
//---------
//   Returns the specified weight component for this mesh-point.
getWeight(b) {
return this.weight[b];
}
//--------
//   Returns the specified offset vector for this mesh-point.
getOffset(b) {
return this.offsetVector[b];
}
//--------
//   Returns the base-normal vector for this mesh-point.
getBaseNormal(b) {
return this.baseNormal[b];
}
};
//------------
// Export
//this.MeshVertex = MeshVertex
cwaenv.add(MeshVertex, "MeshVertex");
// (End MeshVertex.coffee)
}).call(this);
// -------- Mesh.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Config, Data, FourCC, Logger, M4, Mesh, MeshVertex, MorphsManager, RQ, Shader, Texture, V3, VBO, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animate");
Config = cwaenv.get("Config");
Data = cwaenv.get("Data");
Shader = cwaenv.get("Shader");
Texture = cwaenv.get("Texture");
VBO = cwaenv.get("VBO");
FourCC = cwaenv.get("FourCC");
V3 = cwaenv.get("E3Vec");
RQ = cwaenv.get("RotQuat");
M4 = cwaenv.get("Mat4");
MorphsManager = cwaenv.get("MorphsManager");
MeshVertex = cwaenv.get("MeshVertex");
Mesh = (function() {
//---------
class Mesh {
static _fetchShaders(callback) {
var fsloc, sroot, vsloc;
sroot = "qskin";
this._shaderPath.vert = `shaders/${sroot}.vert`;
this._shaderPath.frag = `shaders/${sroot}.frag`;
vsloc = Data.absoluteURI(this._shaderPath.vert, Config.theConfig.cwaBase);
this._vertProm = Data.fetchText(vsloc).catch(function(err) {
lggr.warn(`Vert Shader ${this._shaderPath.frag}: ${err.errMsg}`);
throw err;
}).then((vstxt) => {
if (typeof lggr.debug === "function") {
lggr.debug(`Fetched vert shader source ${this._shaderPath.vert}`);
}
this._shaderSource.vert = vstxt;
return vstxt;
});
fsloc = Data.absoluteURI(this._shaderPath.frag, Config.theConfig.cwaBase);
this._fragProm = Data.fetchText(fsloc).catch(function(err) {
lggr.warn(`Frag Shader ${this._shaderPath.frag}: ${err.errMsg}`);
throw err;
}).then((fstxt) => {
if (typeof lggr.debug === "function") {
lggr.debug(`Fetched frag shader source ${this._shaderPath.frag}`);
}
this._shaderSource.frag = fstxt;
return fstxt;
});
return Promise.all([this._vertProm, this._fragProm]).then((shaders) => {
if (typeof lggr.debug === "function") {
lggr.debug("Fetched shader sources");
}
return callback();
}).catch(function(err) {
return lggr.warn(`Shader load failure: ${err}`);
});
}
// throw err
constructor(gl, usebonetrx, cputrx2mat) {
var floatext, ref, ref1;
this.gl = gl;
//----------
this.modelMat = M4.makeMat4();
this.modelViewMat = M4.makeMat4();
this.modelViewProjMat = M4.makeMat4();
this.skinningShader = null;
// boneIDs: bone indices (w.r.t. skeleton bones array) -- 4 per
// vertex, with the value 0 (i.e. ROOT) indicating an unused entry.
this.vertices = null;
this.vertexDuplicateIndices = null;
this.texture = null;
this.texCoords = null;
this.boneIxs = null; // i.e. bone indices, 4 per vertex (see above);
this.boneWeights = null;
this.triStripIndices = null;
this.bindPos = null;
this.bindNorm = null;
this.vbos = [];
this.morphsManager = null;
this.uniformMVMat = null;
this.uniformMVPMat = null;
this.uniformBones = null;
this.uniformMorphWeights = null;
this.uniformTexture = null;
this.DO_TRX_BONE_UNIFORMS = usebonetrx;
this.TEST_CPU_TRX_TO_MAT = cputrx2mat;
this.boneTexture = null;
this.twistTexture = null;
this.uniformSkelXforms = null;
this.uniformSkelXformsWidth = null;
this.uniformSkelXformsHeight = null;
this.boneTwists = null;
this.uniformBoneTwistData = null;
this.uniformBoneTwistWidth = null;
this.uniformBoneTwistHeight = null;
// Shader and Texture loaded
this.isReady = false;
this.reportReady = true;
if (typeof lggr.debug === "function") {
lggr.debug(`WebGL extensions available: ${(ref = this.gl) != null ? ref.getSupportedExtensions() : void 0}`);
}
floatext = (ref1 = this.gl) != null ? ref1.getExtension('OES_texture_float') : void 0;
this.DO_ARM_TWISTS = true;
this._SUPPRESS_A_T = false;
this.USE_TEXTURES = floatext != null;
if (typeof lggr.debug === "function") {
lggr.debug(`Mesh: DO_TRX_BONE_UNIFORMS: ${this.DO_TRX_BONE_UNIFORMS}, TEST_CPU_TRX_TO_MAT: ${this.TEST_CPU_TRX_TO_MAT}, DO_ARM_TWISTS: ${this.DO_ARM_TWISTS}, SUPPRESS_A_T: ${this._SUPPRESS_A_T}, USE_TEXTURES: ${this.USE_TEXTURES}`);
}
}
setFromJSON(jsnmesh) {
//----------
// Raw I/O.
this.loadVertices(jsnmesh.meshPoints);
this.loadTriangleStripIndices(jsnmesh.triangleStripIndices);
this.loadVertexDuplicateData(jsnmesh.duplicateVertexIndices);
this.loadTextureCoords(jsnmesh.textureCoordinatePairs);
this.morphsManager = MorphsManager.fromJSON(jsnmesh.morphTargets, Mesh.MORPH_TAGS);
return this.createCPUVertexBuffers();
}
// (Defer shader creation until character provides skeleton bones count.)
// (Defer texture creation until character provides its URL.)
setFromBin(avdv) {
//---------
this.lodRange = avdv.nextFloat();
this.loadVerticesBin(avdv);
this.loadTriangleStripIndicesBin(avdv);
this.loadVertexDuplicateDataBin(avdv);
this.loadTextureCoordsBin(avdv);
this.morphsManager = MorphsManager.fromBin(avdv, Mesh.MORPH_TAGS);
return this.createCPUVertexBuffers();
}
// (Defer shader creation until character provides skeleton bones count.)
// (Defer texture creation until character provides its filename.)
//   Loads the mesh-points array from the given stream.
loadVertices(jsnmpts) {
//-----------
this.vertices = jsnmpts.map(MeshVertex.fromJSON);
return this.nVertsNoDups = this.vertices.length;
}
loadVerticesBin(avdv) {
var nMV, v;
//--------------
nMV = avdv.nextUint();
this.vertices = (function() {
var l, ref, results;
results = [];
for (v = l = 0, ref = nMV; (0 <= ref ? l < ref : l > ref); v = 0 <= ref ? ++l : --l) {
results.push(MeshVertex.fromBin(avdv, v));
}
return results;
})();
return this.nVertsNoDups = this.vertices.length;
}
//   Loads the index list for this mesh from the given stream.
loadTriangleStripIndices(jsntsis) {
//-----------------------
return this.triStripIndices = new Uint16Array(jsntsis);
}
loadTriangleStripIndicesBin(avdv) {
var l, nTSI, ref, t, tsi;
//--------------------------
nTSI = avdv.nextUint();
tsi = new Uint16Array(nTSI);
for (t = l = 0, ref = nTSI; (0 <= ref ? l < ref : l > ref); t = 0 <= ref ? ++l : --l) {
tsi[t] = avdv.nextUshort();
}
return this.triStripIndices = tsi;
}
appendDuplicatedVertices() {
var l, len, ref, results, vdi;
ref = this.vertexDuplicateIndices;
results = [];
for (l = 0, len = ref.length; l < len; l++) {
vdi = ref[l];
//-----------------------
results.push(this.vertices.push(this.vertices[vdi]));
}
return results;
}
//   Loads the duplicate vertices map for this mesh.
loadVertexDuplicateData(jsndvis) {
//----------------------
this.vertexDuplicateIndices = jsndvis;
return this.appendDuplicatedVertices();
}
loadVertexDuplicateDataBin(avdv) {
var j, nDupVertices;
//-------------------------
nDupVertices = avdv.nextUint();
this.vertexDuplicateIndices = (function() {
var l, ref, results;
results = [];
for (j = l = 0, ref = nDupVertices; (0 <= ref ? l < ref : l > ref); j = 0 <= ref ? ++l : --l) {
results.push(avdv.nextUint());
}
return results;
})();
return this.appendDuplicatedVertices();
}
//   Loads the mesh-points array from the given stream.
loadTextureCoords(jsntcpairs) {
var i, tca;
//----------------
// Flatten the JSON TC pairs on insertion into the texCoords array.
tca = new Float32Array(2 * jsntcpairs.length);
i = 0;
jsntcpairs.forEach((function(cc) {
this[i] = cc[0];
this[i + 1] = cc[1];
return i += 2;
}), tca);
return this.texCoords = tca;
}
loadTextureCoordsBin(avdv) {
var c, cc, i, l, nTC2, ref, tca;
//-------------------
// Create a flattened array of coord pairs.
nTC2 = avdv.nextUint();
tca = new Float32Array(2 * nTC2);
i = 0;
for (c = l = 0, ref = nTC2; (0 <= ref ? l < ref : l > ref); c = 0 <= ref ? ++l : --l) {
cc = avdv.nextVec2();
tca[i] = cc[0];
tca[i + 1] = cc[1];
i += 2;
}
return this.texCoords = tca;
}
createCPUVertexBuffers() {
var nV, nV3, nV4;
//---------------------
nV = this.vertices.length;
nV3 = nV * 3;
nV4 = nV * 4;
this.bindPos = new Float32Array(nV3);
this.bindNorm = new Float32Array(nV3);
this.boneIxs = new Float32Array(nV4);
this.boneWeights = new Float32Array(nV4);
if (this.DO_ARM_TWISTS) {
this.boneTwists = new Float32Array(nV4);
}
return this.morphsManager.createCPUVertexBuffers(nV);
}
createShaders(callback, nbones) {
var allLoaded, useQSkin, vssubs;
//------------
// We always use qskin shaders
useQSkin = this.DO_TRX_BONE_UNIFORMS && !this.TEST_CPU_TRX_TO_MAT;
if (!useQSkin) {
if (typeof lggr.info === "function") {
lggr.info("Only \"qskin\" shaders supported");
}
}
// Global substitution lists -- to be applied to shader sources
// before compilations.
vssubs = [["N_BONES", `${nbones}`], ["DO_TWIST", this.DO_ARM_TWISTS ? "1" : "0"], ["USE_TXTR", this.USE_TEXTURES ? "1" : "0"]];
allLoaded = () => {
if (typeof lggr.debug === "function") {
lggr.debug("Creating Shader");
}
this.skinningShader = new Shader(this.gl, Mesh._shaderPath.vert, Mesh._shaderPath.frag, Mesh._shaderSource.vert, Mesh._shaderSource.frag, vssubs);
return callback();
};
return Mesh._fetchShaders(allLoaded);
}
createTextureFromJSON(tURL) {
if (typeof lggr.debug === "function") {
lggr.debug(`Texture directly from URL ${tURL}`);
}
// Assumes that texture does not need to be flipped
return this.texture = new Texture(this.gl, (function(tURLHandler) {
return tURLHandler(tURL);
}), false);
}
createTextureFromAvDV(avdv, tName, mustFlip) {
if (typeof lggr.debug === "function") {
lggr.debug(`Asynchronous texture PNG URI via AvDef entry for ${tName}`);
}
// Have inspected JARP flag to decide whether to flip
return this.texture = new Texture(this.gl, avdv.pngURIGen(tName), mustFlip);
}
bindTextureForGL(tName) {
if (typeof lggr.debug === "function") {
lggr.debug(`Bind texture for GL for ${tName}`);
}
return this.texture.bind();
}
releaseMesh(tName) {
if (typeof lggr.debug === "function") {
lggr.debug(`Release Mesh from GL for ${tName}`);
}
this.isReady = false;
this.reportReady = true;
return this.texture.release();
}
prepareSkeleton(skel) {
//--------------
this.makeVertexArraysForBones(skel);
this.makeVertexArraysForMorphs(skel);
return this.generateBindPose(skel);
}
prepareForGL(skel) {
var finishShaders;
//-----------
if (this.USE_TEXTURES) {
this.boneTexture = this.gl.createTexture();
this.twistTexture = this.gl.createTexture();
}
finishShaders = () => {
if (this.skinningShader.isValid()) {
this.createGLVBOs(skel);
return this.cacheGLUniformLocations();
}
};
// Moved after creation of vertex arrays and bindpose
return this.createShaders(finishShaders, skel.getBonesCount());
}
makeVertexArraysForBones(skel) {
var b, bb, bone, k, l, len, m, nV4, o, ref, ref1, ref2, results, scale, stw, v, v4, vertex, wtw;
//-----------------------
nV4 = this.vertices.length * 4;
for (k = l = 0, ref = nV4; (0 <= ref ? l < ref : l > ref); k = 0 <= ref ? ++l : --l) {
// Initialise bone index & weight streams.
(this.boneIxs[k] = 0, this.boneWeights[k] = 0);
}
if (this.DO_ARM_TWISTS) {
for (k = m = 0, ref1 = nV4; (0 <= ref1 ? m < ref1 : m > ref1); k = 0 <= ref1 ? ++m : --m) {
this.boneTwists[k] = -1;
}
}
ref2 = this.vertices;
// Scan vertices
results = [];
for (v = o = 0, len = ref2.length; o < len; v = ++o) {
vertex = ref2[v];
v4 = v * 4;
results.push((function() {
var p, ref3, results1;
// For each of the (<=4) vertex''s influencing-bones, record
// the bone index and influence weight.
results1 = [];
for (b = p = 0, ref3 = vertex.getNumBones(); (0 <= ref3 ? p < ref3 : p > ref3); b = 0 <= ref3 ? ++p : --p) {
bb = skel.getBoneIndex(vertex.getBone4cc(b));
this.boneIxs[v4 + b] = bb;
this.boneWeights[v4 + b] = vertex.getWeight(b);
if (this.DO_ARM_TWISTS && !this._SUPPRESS_A_T) {
scale = -1;
bone = skel.getBone(bb);
stw = bone.doesShoulderTwist();
wtw = bone.doesWristTwist();
if (stw || wtw) {
scale = (vertex.getBoneEndDistance(b)) / (bone.getLength());
if (scale < 0) {
scale = 0;
}
if (1 < scale) {
scale = 1;
}
if (stw) {
// Invert scale for upper arm (shoulder) twist, since this
// twist occurs at the base of the bone, not at its farther end.
scale = 1 - scale;
}
if (typeof lggr.trace === "function") {
lggr.trace(`____ Vtx,B ${v},${b}: scale=${RQ.fStr(scale, 3)}`);
}
}
results1.push(this.boneTwists[v4 + b] = scale);
} else {
results1.push(void 0);
}
}
return results1;
}).call(this));
}
return results;
}
makeVertexArraysForMorphs(skel) {
var globalHeadRot, headBone;
//------------------------
// Get global transform for the frame given by rotating the head bone
// frame through a negative quarter circle, so that x and y axes point
// (approximately) rightwards and upwards, respectively.
headBone = skel.getBoneBy4CC(FourCC.fourCCInt("HEAD"));
// NB Although in the past we've always used a TR transform here,
// only the rotation part gets used, so now we make that explicit.
globalHeadRot = RQ.fromRQ((headBone.getGlobalTRX()).rot());
globalHeadRot.setPostMultiply(RQ.ROT_NEG_PI_BY_2_ON_Z);
return this.morphsManager.makeVertexArrays(this.vertexDuplicateIndices, globalHeadRot);
}
generateBindPose(skeleton) {
var b, bone, bpTRX, i, l, len, m, norm3V, normXYZ, o, offset3V, offsetXYZ, ref, ref1, v, v3, v4, vertex, weight;
//---------------
// Workspace for offset and normal vectors -
offset3V = V3.create();
offsetXYZ = offset3V.xyz;
norm3V = V3.create();
normXYZ = norm3V.xyz;
ref = this.vertices;
// For each mesh point...
for (v = l = 0, len = ref.length; l < len; v = ++l) {
vertex = ref[v];
v3 = v * 3;
v4 = v * 4;
// For each of the vertex''s influencing-bones ...
for (b = m = 0, ref1 = vertex.getNumBones(); (0 <= ref1 ? m < ref1 : m > ref1); b = 0 <= ref1 ? ++m : --m) {
bone = skeleton.getBone(this.boneIxs[v4 + b]);
weight = this.boneWeights[v4 + b];
bpTRX = bone.getBindPoseTRX();
// Get vertex's offset and normal vectors for bone b.
offset3V.setFromE3V(vertex.getOffset(b));
norm3V.setFromE3V(vertex.getBaseNormal(b));
// Apply bone's BP xform to offset and normal and add the results
// into our BP offset and normal arrays.
bpTRX.transform(offset3V); // effectively updates offsetXYZ
(bpTRX.rot()).rotate(norm3V); // effectively updates normXYZ
for (i = o = 0; o < 3; i = ++o) {
this.bindPos[v3 + i] += offsetXYZ[i] * weight;
this.bindNorm[v3 + i] += normXYZ[i] * weight;
}
}
}
return void 0; // (dummy result, simplifies JS output)
}
// Builds all the VBOs.
createGLVBOs(skeleton) {
var GL, setVBO_std, ssal;
//-----------
// Auxiliary definitions.
GL = this.gl;
ssal = (id) => {
return this.skinningShader.getAttributeLocation(id);
};
setVBO_std = (id, n, buf) => {
this.vbos[id] = VBO.makeStd(GL, n, buf, ssal(id));
return void 0;
};
// Create the buffers.
setVBO_std("BindPos", 3, this.bindPos);
setVBO_std("BindNorm", 3, this.bindNorm);
setVBO_std("BoneIxs", 4, this.boneIxs);
setVBO_std("BoneWeights", 4, this.boneWeights);
if (this.DO_ARM_TWISTS) {
setVBO_std("BoneTwists", 4, this.boneTwists);
}
setVBO_std("VSTexCoord0", 2, this.texCoords);
this.morphsManager.createGLVBOs(GL, ssal);
this.vbos["TriStripIndices"] = VBO.makeEls(GL, 1, this.triStripIndices, GL.TRIANGLE_STRIP, false);
return void 0; // (dummy result, simplifies JS output)
}
// Gets locations for vertex shader uniform variables.
cacheGLUniformLocations() {
var ssuLoc, ssuaLoc;
//----------------------
ssuLoc = (unm) => {
return this.skinningShader.getUniformLocation(unm);
};
ssuaLoc = function(uanm) {
return ssuLoc(`${uanm}[0]`);
};
this.uniformMVMat = ssuLoc("ModelViewMat");
this.uniformMVPMat = ssuLoc("ModelViewProjMat");
if (this.DO_TRX_BONE_UNIFORMS) {
if (!this.TEST_CPU_TRX_TO_MAT) {
if (this.USE_TEXTURES) {
this.uniformSkelXformsWidth = ssuLoc("SkelXformsWidth");
this.uniformSkelXformsHeight = ssuLoc("SkelXformsHeight");
this.uniformSkelXforms = ssuLoc("SkelXforms");
if (this.DO_ARM_TWISTS) {
this.uniformBoneTwistWidth = ssuLoc("BoneTwistWidth");
this.uniformBoneTwistHeight = ssuLoc("BoneTwistHeight");
this.uniformBoneTwistData = ssuLoc("BoneTwistData");
}
} else {
this.uniformSkelXforms = ssuaLoc("SkelXforms");
if (this.DO_ARM_TWISTS) {
this.uniformBoneTwistData = ssuaLoc("BoneTwistData");
}
}
} else {
this.uniformBones = ssuaLoc("Bones");
}
} else {
this.uniformBones = ssuaLoc("Bones");
}
this.uniformMorphWeights = ssuLoc("MorphWeights");
return this.uniformTexture = ssuLoc("Texture");
}
checkReady() {
var ready;
// Was: ready = @skinningShader? && do @skinningShader?.isValid && do @texture?.isValid
ready = (this.skinningShader != null) && this.skinningShader.isValid() && (this.texture != null) && this.texture.isValid();
if (ready || this.reportReady) {
this.reportReady = false;
if (typeof lggr.debug === "function") {
lggr.debug(`Mesh Ready is ${ready}`);
}
}
return ready;
}
draw(skeleton, currentMorphs, x, y, z, viewMat, projMat) {
var wasReady;
//---
// Delay if shaders or image not ready
wasReady = this.isReady;
if (this.isReady || (this.isReady = this.checkReady())) {
this.doDraw(skeleton, currentMorphs, x, y, z, viewMat, projMat);
if (!wasReady) {
return Logger.callHook("avatarready");
}
}
}
doDraw(skeleton, currentMorphs, x, y, z, viewMat, projMat) {
var GL, GL_A_BUF, GL_EL_A_BUF, avbo, avbos, avids, id, l, len, len1, m, mWeights, skelXforms, texHeight, texWidth, twistData;
//-----
this.morphsManager.setGLDataForDraw(currentMorphs);
// Standard ModelViewProj matrices.
M4.setTRComposeT(this.modelViewMat, viewMat, x, y, z);
M4.setProduct(this.modelViewProjMat, projMat, this.modelViewMat);
// Cache oft-used GL values
GL = this.gl;
GL_A_BUF = GL.ARRAY_BUFFER;
GL_EL_A_BUF = GL.ELEMENT_ARRAY_BUFFER;
GL.useProgram(this.skinningShader.getHandle());
// Upload transforms, bones data, and morph weights.
// Bones new: TR transform data for inverse bind pose, and current
// pose (allowing the possibility of arm sliding).
// Bones old: first three rows of each bone's global skinning matrix
// (bind pose -> current pose).
GL.uniformMatrix4fv(this.uniformMVMat, false, this.modelViewMat);
GL.uniformMatrix4fv(this.uniformMVPMat, false, this.modelViewProjMat);
if (this.DO_TRX_BONE_UNIFORMS) {
if (!this.TEST_CPU_TRX_TO_MAT) {
skelXforms = skeleton.getSkelXformsData();
twistData = skeleton.getBoneTwistData();
if (this.USE_TEXTURES) {
// Skel Xforms on Texture 1
texWidth = skeleton.getSkelTexWidth();
texHeight = skeleton.getSkelTexHeight();
GL.activeTexture(GL.TEXTURE1);
GL.bindTexture(GL.TEXTURE_2D, this.boneTexture);
GL.uniform1i(this.uniformSkelXforms, 1); // Link to Active Texture presumably
// Set bone texture
// All copied from three.js but may not all be necessary
GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, false);
GL.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
GL.pixelStorei(GL.UNPACK_ALIGNMENT, 4);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.NEAREST);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.NEAREST);
if (typeof lggr.trace === "function") {
lggr.trace(`texImage2D: l=${skelXforms.length} w=${texWidth} h=${texHeight} glFormat=${GL.RGBA} glType=${GL.FLOAT}`);
}
GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, texWidth, texHeight, 0, GL.RGBA, GL.FLOAT, skelXforms);
GL.uniform1i(this.uniformSkelXformsWidth, texWidth);
GL.uniform1i(this.uniformSkelXformsHeight, texHeight);
if (this.DO_ARM_TWISTS) {
// Bone twists on Texture 2
texWidth = skeleton.getTwistTexWidth();
texHeight = skeleton.getTwistTexHeight();
GL.activeTexture(GL.TEXTURE2);
GL.bindTexture(GL.TEXTURE_2D, this.twistTexture);
GL.uniform1i(this.uniformBoneTwistData, 2); // Link to Active Texture presumably
// Set twist texture
// All copied from three.js but may not all be necessary
GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, false);
GL.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
GL.pixelStorei(GL.UNPACK_ALIGNMENT, 4);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.NEAREST);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.NEAREST);
if (typeof lggr.trace === "function") {
lggr.trace(`texImage2D: l=${twistData.length} w=${texWidth} h=${texHeight} glFormat=${GL.RGBA} glType=${GL.FLOAT}`);
}
GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, texWidth, texHeight, 0, GL.RGBA, GL.FLOAT, twistData);
GL.uniform1i(this.uniformBoneTwistWidth, texWidth);
GL.uniform1i(this.uniformBoneTwistHeight, texHeight);
}
} else {
GL.uniformMatrix4fv(this.uniformSkelXforms, false, skelXforms);
if (this.DO_ARM_TWISTS) {
GL.uniform4fv(this.uniformBoneTwistData, twistData);
}
}
} else {
GL.uniform4fv(this.uniformBones, skeleton.getVSSkinMatRows());
}
} else {
GL.uniform4fv(this.uniformBones, skeleton.getSkinMatRows());
}
mWeights = this.morphsManager.getMorphWeights(); // to suppress morphs, use: [0,0,0,0]
GL.uniform4fv(this.uniformMorphWeights, mWeights);
// Texturing.
GL.activeTexture(GL.TEXTURE0);
GL.bindTexture(GL.TEXTURE_2D, this.texture.getHandle());
GL.uniform1i(this.uniformTexture, 0);
// Make a list of active vertex attribute VBOs (apart from morph VBOs).
avids = ["BindPos", "BindNorm", "BoneIxs", "BoneWeights"];
if (this.DO_ARM_TWISTS) {
// avids.push "SkelXformsN"  if @USE_TEXTURES
avids.push("BoneTwists");
}
avids.push("VSTexCoord0");
avbos = (function() {
var l, len, results;
results = [];
for (l = 0, len = avids.length; l < len; l++) {
id = avids[l];
results.push(this.vbos[id]);
}
return results;
}).call(this);
for (l = 0, len = avbos.length; l < len; l++) {
avbo = avbos[l];
// Turn on vertex data streams.
avbo.enableAttrib();
}
this.morphsManager.enableMorphVBOs();
// Draw.
this.vbos["TriStripIndices"].drawElements();
// Turn off vertex streams.
this.morphsManager.disableMorphVBOs();
for (m = 0, len1 = avbos.length; m < len1; m++) {
avbo = avbos[m];
avbo.disableAttrib();
}
GL.useProgram(null);
return void 0; // (dummy result, simplifies JS output)
}
checkMesh(tag, skel) {
var b, b4cc, bb, l, len, max4cc, nb, nondup, ref, results, sb, v, vertex, vl;
//--------
max4cc = Math.pow(2, 32) - 1;
// Was: sb = do skel?.getBonesCount
sb = skel != null ? skel.getBonesCount() : void 0;
vl = this.vertices.length;
nondup = vl - this.vertexDuplicateIndices.length;
if (typeof lggr.debug === "function") {
lggr.debug(`* ${tag} Check Mesh: vertices=${vl} of which duplicates=${this.vertexDuplicateIndices.length}`);
}
ref = this.vertices;
// Check valid influencing bones
results = [];
for (v = l = 0, len = ref.length; l < len; v = ++l) {
vertex = ref[v];
if (v < nondup && v !== vertex.getIndex()) {
if (typeof lggr.debug === "function") {
lggr.debug(`* Mesh: Mismatch pos=${v} index=${vertex.getIndex()}`);
}
}
nb = vertex.getNumBones();
if (nb == null) {
results.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: undefined getNumBones for v=${v}`) : void 0);
} else if (nb < 0 || nb > 4) {
results.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: bad ib count (${nb}) for v=${v}/${vl}`) : void 0);
} else {
results.push((function() {
var m, ref1, results1;
results1 = [];
for (b = m = 0, ref1 = nb; (0 <= ref1 ? m < ref1 : m > ref1); b = 0 <= ref1 ? ++m : --m) {
b4cc = vertex.getBone4cc(b);
if (b4cc == null) {
results1.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: undefined getBone4cc for v=${v} ib=${b}/${nb}`) : void 0);
} else if (b4cc < 0 || b4cc > max4cc) {
results1.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: invalid getBone4cc for v=${v} ib=${b}/${nb} b4cc=${b4cc}(\"${FourCC.fourCCStr(b4cc)}\")`) : void 0);
} else if (skel != null) {
bb = skel.getBoneBy4CC(b4cc);
if (bb == null) {
results1.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: missing bone for v=${v}/${vl} ib=${b}/${nb} b4cc=${b4cc}(\"${FourCC.fourCCStr(b4cc)}\")`) : void 0);
} else if (bb < 0 || bb >= sb) {
results1.push(typeof lggr.debug === "function" ? lggr.debug(`* Mesh: bad bone number for v=${v}/${vl} ib=${b}/${nb} b4cc=${b4cc}(\"${FourCC.fourCCStr(b4cc)}\") bb=${bb}/${sb}`) : void 0);
} else {
results1.push(void 0);
}
} else {
results1.push(void 0);
}
}
return results1;
})());
}
}
return results;
}
};
//---------
// Statics cacheing skinning templates
Mesh._shaderPath = {};
Mesh._shaderSource = {};
Mesh.MORPH_TAGS = ["A", "B", "C", "D"];
return Mesh;
}).call(this);
// ----------------------------------------------------------------------
// _checkBEDistClamping: (skel) ->
// #-------------------
//   # We need the skel, so this must be called from Character, where
//   # the skel is available.
//   nV = 0;  nBI = 0;  nLo = 0;  nHi = 0;  nXHi = 0
//   for vtx,v in @vertices
//     ++ nV
//     for b in [0...do vtx.getNumBones]
//       ++ nBI
//       blen = do (skel.getBoneBy4CC (vtx.getBone4cc b)).getLength
//       vx = (vtx.getOffset b).xyz[0]
//       vxd = vtx.getBoneEndDistance b
//       ++ nLo if vx < vxd     # Count clamping at low-end.
//       ++ nHi if vxd < vx     # Count clamping at high-end.
//       ++ nXHi if blen < vx   # Count opportunities for high-end clamp.
//   lggr.debug? "$$$$  mesh bone-end dist clamping:  nV=#{nV}  nBI=#{nBI}"
//   lggr.debug? "$$$$                               nLo=#{nLo}  nHi=#{nHi}  nXHi=#{nXHi}"
// RESULT (for luna):
// $$$$  mesh bone-end dist clamping:  nV=6704  nBI=9269
// $$$$                               nLo=1631  nHi=0  nXHi=2349
// So, it appears that a clamp is applied at the bottom end, but
// not at the top: 2349 cases (i.e. about 25% of the total) where
// bone length < vertex x-offset, but the B-E distance is nevertheless
// not clamped.
// ----------------------------------------------------------------------
// Export
cwaenv.add(Mesh, "Mesh");
// (End Mesh.coffee)
}).call(this);
// -------- HNSDefs.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Definitions fo H-SiGML and G-SiGML files
var HNSDefs, Logger, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
lggr = Logger.get("SiGML");
HNSDefs = (function() {
class HNSDefs {};
// Statics
HNSDefs.tokenNameMap = [
"", // 00   0
"", // 01   1
"", // 02   2
"", // 03   3
"", // 04   4
"", // 05   5
"", // 06   6
"", // 07   7
"", // 08   8
"hamtab", // 09   9
"hamlinefeed", // 0a  10
"", // 0b  11
"hampagebreak", // 0c  12
"hamreturn", // 0d  13
"", // 0e  14
"", // 0f  15
"", // 10  16
"", // 11  17
"", // 12  18
"", // 13  19
"hamversion40", // 14  20
"", // 15  21
"", // 16  22
"", // 17  23
"", // 18  24
"", // 19  25
"", // 1a  26
"", // 1b  27
"", // 1c  28
"", // 1d  29
"", // 1e  30
"", // 1f  31
"hamspace", // 20  32
"hamexclaim", // 21  33
"hamquery", // 22  34
"hamfullstop", // 23  35
"hamcomma", // 24  36
"hamplus", // 25  37
"hammetaalt", // 26  38
"hamclocku", // 27  39
"hamclockul", // 28  40
"hamclockl", // 29  41
"hamclockdl", // 2a  42
"hamclockd", // 2b  43
"hamclockdr", // 2c  44
"hamclockr", // 2d  45
"hamclockur", // 2e  46
"hamclockfull", // 2f  47
"hamsymmpar", // 30  48
"hamsymmlr", // 31  49
"hamfist", // 32  50
"hamflathand", // 33  51
"hamfinger2", // 34  52
"hamfinger23", // 35  53
"hamfinger23spread", // 36  54
"hamfinger2345", // 37  55
"hamthumboutmod", // 38  56
"hamthumbacrossmod", // 39  57
"hampinch12", // 3a  58
"hampinchall", // 3b  59
"hampinch12open", // 3c  60
"hamcee12", // 3d  61
"hamceeall", // 3e  62
"hamcee12open hamceeopen", // 3f  63
"hamthumbopenmod", // 40  64
"hamfingerstraightmod", // 41  65
"hamfingerbendmod", // 42  66
"hamfingerhookedmod hamfingerhookmod", // 43  67
"hamnondominant", // 44  68
"hamdoublebent", // 45  69
"hamdoublehooked", // 46  70
"", // 47  71
"hamextfingeru", // 48  72
"hamextfingerur", // 49  73
"hamextfingerr", // 4a  74
"hamextfingerdr", // 4b  75
"hamextfingerd", // 4c  76
"hamextfingerdl", // 4d  77
"hamextfingerl", // 4e  78
"hamextfingerul", // 4f  79
"hamextfingerol", // 50  80
"hamextfingero", // 51  81
"hamextfingeror", // 52  82
"hamextfingeril", // 53  83
"hamextfingeri", // 54  84
"hamextfingerir", // 55  85
"hamextfingerui", // 56  86
"hamextfingerdi", // 57  87
"hamextfingerdo", // 58  88
"hamextfingeruo", // 59  89
"", // 5a  90
"", // 5b  91
"", // 5c  92
"hamearlobe", // 5d  93
"hamnostrils", // 5e  94
"hamshouldertop", // 5f  95
"hampalmu", // 60  96
"hampalmur", // 61  97
"hampalmr", // 62  98
"hampalmdr", // 63  99
"hampalmd", // 64 100
"hampalmdl", // 65 101
"hampalml", // 66 102
"hampalmul", // 67 103
"hamreplace", // 68 104
"hamarmextended", // 69 105
"hambehind", // 6a 106
"hametc", // 6b 107
"hamorirelative", // 6c 108
"hamtongue", // 6d 109
"hamteeth", // 6e 110
"hamstomach", // 6f 111
"hamneutralspace", // 70 112
"hamhead", // 71 113
"hamheadtop", // 72 114
"hamforehead", // 73 115
"hameyebrows", // 74 116
"hameyes", // 75 117
"hamnose", // 76 118
"hamear", // 77 119
"hamcheek", // 78 120
"hamlips", // 79 121
"hamchin", // 7a 122
"hamunderchin", // 7b 123
"hamneck", // 7c 124
"hamshoulders", // 7d 125
"hamchest", // 7e 126
"hamstomach", // 7f 127
"hambelowstomach", // 80 128
"hamlrbeside", // 129
"hamlrat", // 130
"hamUpperarm", // 131
"hamelbow", // 132
"hamelbowinside", // 133
"hamlowerarm", // 134
"hamwristback", // 135
"hamwristpulse", // 136
"hamthumbball", // 137
"hampalm", // 138
"hamhandback", // 139
"hamthumb", // 140
"hamindexfinger", // 141
"hammiddlefinger", // 142
"hamringfinger", // 143
"hampinky", // 144
"hamthumbside", // 145
"hampinkyside", // 146
"hambetween", // 147
"hamfingertip", // 148
"hamfingernail", // 149
"hamfingerpad", // 150
"hamfingermidjoint", // 151
"hamfingerbase", // 152
"hamfingerside", // 153
"hamwristtopulse", // 154
"hamwristtoback", // 155
"hamwristtothumb", // 156
"hamwristtopinky", // 157
"hamcoreftag", // 158
"hamcorefref", // 159
"hamnomotion", // 160
"hammoveu", // 161
"hammoveur", // 162
"hammover", // 163
"hammovedr", // 164
"hammoved", // 165
"hammovedl", // 166
"hammovel", // 167
"hammoveul", // 168
"hammoveol", // 169
"hammoveo", // 170
"hammoveor", // 171
"hammoveil", // 172
"hammovei", // 173
"hammoveir", // 174
"hammoveui", // 175
"hammovedi", // 176
"hammovedo", // 177
"hammoveuo", // 178
"hammovecross", // 179
"hammovex", // 180
"hamsmallmod", // 181
"hamlargemod", // 182
"hamarcl", // 183
"hamarcu", // 184
"hamarcr", // 185
"hamarcd", // 186
"hamwavy", // 187
"hamzigzag", // 188
"hamfingerplay", // 189
"hamparbegin", // 190
"hamparend", // 191
"hamcircleo", // 192
"hamcirclei", // 193
"hamcircled", // 194
"hamcircleu", // 195
"hamcirclel", // 196
"hamcircler", // 197
"hamincreasing", // 198
"hamdecreasing", // 199
"hamclose", // 200
"hamtouch", // 201
"haminterlock", // 202
"hamcross", // 203
"hamfast", // 204
"hamslow", // 205
"hamtense", // 206
"hamrest", // 207
"hamhalt", // 208
"hamrepeatfromstart", // 209
"hamrepeatfromstartseveral", // 210
"hamrepeatcontinue", // 211
"hamrepeatcontinueseveral", // 212
"hamseqbegin", // 213
"hamseqend", // 214
"hamalternatingmotion", // 215
"hamrepeatreverse", // 216
"hambrushing", // 217
"hamnonipsi", // 218
"", // 219
"hamellipseh", // 220
"hamellipseur", // 221
"hamellipsev", // 222
"hamellipseul", // 223
"hammime", // 224
"hamaltbegin", // 225
"hamaltend", // 226
"hamnodding", // 227
"hamswinging", // 228
"hamtwisting", // 229
"hamstircw", // 230
"hamstirccw", // 231
"", // 232
"", // 233
"", // 234
"", // 235
"hamfusionbegin", // 236
"hamfusionend", // 237
"", // 238
"", // 239
"hamcircleul", // 240
"hamcircledr", // 241
"hamcircleur", // 242
"hamcircledl", // 243
"hamcircleol", // 244
"hamcircleir", // 245
"hamcircleor", // 246
"hamcircleil", // 247
"hamcircledo", // 248
"hamcircleui", // 249
"hamcircledi", // 250
"hamcircleuo", // 251
"", // 252
"", // 253
"hamnbs", // 254
"" // 255
];
HNSDefs.hamMap = (function() {
var i, ix, j, len, len1, ref, ref1, str, strs, theMap;
theMap = {};
if (typeof lggr.debug === "function") {
lggr.debug(`Building hamMap ${HNSDefs.tokenNameMap.length}`);
}
ref = HNSDefs.tokenNameMap;
for (ix = i = 0, len = ref.length; i < len; ix = ++i) {
strs = ref[ix];
if (typeof lggr.trace === "function") {
lggr.trace(`HNSDefs: ${strs} at ${ix}`);
}
ref1 = strs.split(" ");
for (j = 0, len1 = ref1.length; j < len1; j++) {
str = ref1[j];
theMap[str] = String.fromCharCode(ix);
}
}
return theMap;
})();
HNSDefs.MOUTH_PICTURE_LETTER = "m";
HNSDefs.EYES_LETTER = "e";
HNSDefs.MOUTH_GESTURE_LETTERS = "djlct";
HNSDefs.NON_MOUTH_RELATED_LETTERS = "sbh" + HNSDefs.EYES_LETTER + "n";
HNSDefs.EYES_TAG_LISTS = [
// Eyes - Gaze:
"AD FR HD HI HC UP DN LE RI NO RO LU LD RU RD",
// Eyes - Brows:
"RB RR RL FU",
// Eyes - Lids:
"WB WR WL SB SR SL CB CR CL TB TR TL BB"
];
HNSDefs.HNS_SHOULDER_TAG = "hnm_shoulder";
HNSDefs.HNS_BODY_TAG = "hnm_body";
HNSDefs.HNS_HEAD_TAG = "hnm_head";
HNSDefs.HNS_NOSE_TAG = "hnm_nose";
HNSDefs.NON_MOUTH_RELATED_HML_TAGS = [HNSDefs.HNS_SHOULDER_TAG, HNSDefs.HNS_BODY_TAG, HNSDefs.HNS_HEAD_TAG, null, HNSDefs.HNS_NOSE_TAG];
HNSDefs.HNS_EYEGAZE_TAG = "hnm_eyegaze";
HNSDefs.HNS_EYEBROWS_TAG = "hnm_eyebrows";
HNSDefs.HNS_EYELIDS_TAG = "hnm_eyelids";
HNSDefs.EYE_RELATED_HML_TAGS = [HNSDefs.HNS_EYEGAZE_TAG, HNSDefs.HNS_EYEBROWS_TAG, HNSDefs.HNS_EYELIDS_TAG];
HNSDefs.HNS_MOUTHGESTURE_TAG = "hnm_mouthgesture";
HNSDefs.HNS_MOUTHPICTURE_TAG = "hnm_mouthpicture";
HNSDefs.HNS_EXTRA_TAG = "hnm_extra";
HNSDefs.HNS_NONMAN_TAG = "hamnosys_nonmanual";
HNSDefs.PICTURE_ATTR = "picture";
HNSDefs.TAG_ATTR = "tag";
HNSDefs.xmlSpecials = "<>&\'\"";
HNSDefs.xmlEscapes = ["&lt;", "&gt;", "&amp;", "&apos;", "&quot;"];
return HNSDefs;
}).call(this);
// Export
cwaenv.add(HNSDefs, "HNSDefs");
// (End HNSDefs.coffee)
}).call(this);
// -------- antlr3-all-min.js --------
/*
Copyright (c) 2003-2008 Terence Parr. All rights reserved.
Code licensed under the BSD License:
http://www.antlr.org/license.html
Some parts of the ANTLR class:
Copyright (c) 2008, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.net/yui/license.txt
*/
if(typeof org=="undefined"||!org){var org={}}if(typeof org.antlr=="undefined"||!org.antlr){org.antlr={}}org.antlr.global=(function(){return this}).call(null);org.antlr.namespace=function(){var A=arguments,E=null,C,B,D;for(C=0;C<A.length;C=C+1){D=A[C].split(".");E=org.antlr.global;for(B=0;B<D.length;B=B+1){E[D[B]]=E[D[B]]||{};E=E[D[B]]}}return E};org.antlr.env=org.antlr.env||{};org.antlr.env.ua=function(){var D={ie:0,opera:0,gecko:0,webkit:0,mobile:null,air:0,rhino:false};var B,A;try{B=navigator.userAgent;if((/KHTML/).test(B)){D.webkit=1}A=B.match(/AppleWebKit\/([^\s]*)/);if(A&&A[1]){D.webkit=parseFloat(A[1]);if(/ Mobile\//.test(B)){D.mobile="Apple"}else{A=B.match(/NokiaN[^\/]*/);if(A){D.mobile=A[0]}}A=B.match(/AdobeAIR\/([^\s]*)/);if(A){D.air=A[0]}}if(!D.webkit){A=B.match(/Opera[\s\/]([^\s]*)/);if(A&&A[1]){D.opera=parseFloat(A[1]);A=B.match(/Opera Mini[^;]*/);if(A){D.mobile=A[0]}}else{A=B.match(/MSIE\s([^;]*)/);if(A&&A[1]){D.ie=parseFloat(A[1])}else{A=B.match(/Gecko\/([^\s]*)/);if(A){D.gecko=1;A=B.match(/rv:([^\s\)]*)/);if(A&&A[1]){D.gecko=parseFloat(A[1])}}}}}}catch(C){}try{if(typeof window=="undefined"&&loadClass){D.rhino=true}}catch(C){}return D}();org.antlr.namespace("org.antlr.runtime.tree");org.antlr.lang=org.antlr.lang||{isArray:function(B){if(B){var A=org.antlr.lang;return A.isNumber(B.length)&&A.isFunction(B.splice)}return false},isBoolean:function(A){return typeof A==="boolean"},isFunction:function(A){return typeof A==="function"},isNull:function(A){return A===null},isNumber:function(A){return typeof A==="number"&&isFinite(A)},isObject:function(A){return(A&&(typeof A==="object"||org.antlr.lang.isFunction(A)))||false},isString:function(A){return typeof A==="string"},isUndefined:function(A){return typeof A==="undefined"},_IEEnumFix:function(C,B){if(org.antlr.env.ua.ie){var E=["toString","valueOf"],A;for(A=0;A<E.length;A=A+1){var F=E[A],D=B[F];if(org.antlr.lang.isFunction(D)&&D!=Object.prototype[F]){C[F]=D}}}},extend:function(D,E,C){if(!E||!D){throw new Error("org.antlr.lang.extend failed, please check that all dependencies are included.")}var B=function(){};B.prototype=E.prototype;D.prototype=new B();D.prototype.constructor=D;D.superclass=E.prototype;if(E.prototype.constructor==Object.prototype.constructor){E.prototype.constructor=E}if(C){for(var A in C){D.prototype[A]=C[A]}org.antlr.lang._IEEnumFix(D.prototype,C)}},augmentObject:function(E,D){if(!D||!E){throw new Error("Absorb failed, verify dependencies.")}var A=arguments,C,F,B=A[2];if(B&&B!==true){for(C=2;C<A.length;C=C+1){E[A[C]]=D[A[C]]}}else{for(F in D){if(B||!E[F]){E[F]=D[F]}}org.antlr.lang._IEEnumFix(E,D)}},augmentProto:function(D,C){if(!C||!D){throw new Error("Augment failed, verify dependencies.")}var A=[D.prototype,C.prototype];for(var B=2;B<arguments.length;B=B+1){A.push(arguments[B])}org.antlr.lang.augmentObject.apply(this,A)},merge:function(){var D={},B=arguments;for(var C=0,A=B.length;C<A;C=C+1){org.antlr.lang.augmentObject(D,B[C],true)}return D},isValue:function(B){var A=org.antlr.lang;return(A.isObject(B)||A.isString(B)||A.isNumber(B)||A.isBoolean(B))},array:{peek:function(B){if(!org.antlr.lang.isArray(B)){throw new Error("org.antlr.lang.array.peek: a is not an array.")}var A=B.length;if(A<=0){throw new Error("org.antlr.lang.array.peek: a is empty.")}return B[A-1]}}};org.antlr.runtime.RecognizerSharedState=function(){this.following=[];this._fsp=-1;this.errorRecovery=false;this.lastErrorIndex=-1;this.failed=false;this.syntaxErrors=0;this.backtracking=0;this.ruleMemo=null;this.token=null;this.tokenStartCharIndex=-1;this.text=null};org.antlr.runtime.IndexOutOfBoundsException=function(A){org.antlr.runtime.IndexOutOfBoundsException.superclass.constructor.call(this,A)};org.antlr.lang.extend(org.antlr.runtime.IndexOutOfBoundsException,Error,{name:"org.antlr.runtime.IndexOutOfBoundsException"});org.antlr.runtime.RecognitionException=function(A){org.antlr.runtime.RecognitionException.superclass.constructor.call(this);this.input=A;this.index=A.index();if(A instanceof org.antlr.runtime.CommonTokenStream){this.token=A.LT(1);this.line=this.token.getLine();this.charPositionInLine=this.token.getCharPositionInLine()}if(A instanceof org.antlr.runtime.tree.TreeNodeStream){this.extractInformationFromTreeNodeStream(A)}else{if(A instanceof org.antlr.runtime.ANTLRStringStream){this.c=A.LA(1);this.line=A.getLine();this.charPositionInLine=A.getCharPositionInLine()}else{this.c=A.LA(1)}}this.message=this.toString()};org.antlr.lang.extend(org.antlr.runtime.RecognitionException,Error,{input:null,index:null,token:null,node:null,c:null,line:null,name:"org.antlr.runtime.RecognitionException",charPositionInLine:null,approximateLineInfo:null,extractInformationFromTreeNodeStream:function(F){var A=F,E,I,D,H,C;this.node=A.LT(1);var B=A.getTreeAdaptor(),G=B.getToken(this.node);if(G){this.token=G;if(G.getLine()<=0){C=-1;E=A.LT(C);while(E){priorPayload=B.getToken(E);if(priorPayload&&priorPayload.getLine()>0){this.line=priorPayload.getLine();this.charPositionInLine=priorPayload.getCharPositionInLine();this.approximateLineInfo=true;break}--C;E=A.LT(C)}}else{this.line=G.getLine();this.charPositionInLine=G.getCharPositionInLine()}}else{if(this.node instanceof org.antlr.runtime.tree.CommonTree){this.line=this.node.getLine();this.charPositionInLine=this.node.getCharPositionInLine();if(this.node instanceof org.antlr.runtime.tree.CommonTree){this.token=this.node.token}}else{D=B.getType(this.node);H=B.getText(this.node);this.token=new org.antlr.runtime.CommonToken(D,H)}}},getUnexpectedType:function(){if(this.input instanceof org.antlr.runtime.CommonTokenStream){return this.token.getType()}else{if(this.input instanceof org.antlr.runtime.tree.TreeNodeStream){var A=this.input;var B=A.getTreeAdaptor();return B.getType(this.node)}else{return this.c}}}});org.antlr.runtime.MismatchedTokenException=function(B,A){if(arguments.length===0){this.expecting=org.antlr.runtime.Token.INVALID_TOKEN_TYPE}else{org.antlr.runtime.MismatchedTokenException.superclass.constructor.call(this,A);this.expecting=B}};org.antlr.lang.extend(org.antlr.runtime.MismatchedTokenException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedTokenException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedTokenException"});org.antlr.runtime.UnwantedTokenException=function(B,A){if(arguments.length>0){org.antlr.runtime.UnwantedTokenException.superclass.constructor.call(this,B,A)}};org.antlr.lang.extend(org.antlr.runtime.UnwantedTokenException,org.antlr.runtime.MismatchedTokenException,{getUnexpectedToken:function(){return this.token},toString:function(){var A=", expected "+this.expecting;if(this.expecting===org.antlr.runtime.Token.INVALID_TOKEN_TYPE){A=""}if(!org.antlr.lang.isValue(this.token)){return"UnwantedTokenException(found="+A+")"}return"UnwantedTokenException(found="+this.token.getText()+A+")"},name:"org.antlr.runtime.UnwantedTokenException"});org.antlr.runtime.MissingTokenException=function(B,A,C){if(arguments.length>0){org.antlr.runtime.MissingTokenException.superclass.constructor.call(this,B,A);this.inserted=C}};org.antlr.lang.extend(org.antlr.runtime.MissingTokenException,org.antlr.runtime.MismatchedTokenException,{getMissingType:function(){return this.expecting},toString:function(){if(org.antlr.lang.isValue(this.inserted)&&org.antlr.lang.isValue(this.token)){return"MissingTokenException(inserted "+this.inserted+" at "+this.token.getText()+")"}if(org.antlr.lang.isValue(this.token)){return"MissingTokenException(at "+this.token.getText()+")"}return"MissingTokenException"},name:"org.antlr.runtime.MissingTokenException"});org.antlr.runtime.NoViableAltException=function(C,B,D,A){org.antlr.runtime.NoViableAltException.superclass.constructor.call(this,A);this.grammarDecisionDescription=C;this.decisionNumber=B;this.stateNumber=D};org.antlr.lang.extend(org.antlr.runtime.NoViableAltException,org.antlr.runtime.RecognitionException,{toString:function(){if(this.input instanceof org.antlr.runtime.ANTLRStringStream){return"NoViableAltException('"+this.getUnexpectedType()+"'@["+this.grammarDecisionDescription+"])"}else{return"NoViableAltException("+this.getUnexpectedType()+"@["+this.grammarDecisionDescription+"])"}},name:"org.antlr.runtime.NoViableAltException"});org.antlr.runtime.EarlyExitException=function(B,A){org.antlr.runtime.EarlyExitException.superclass.constructor.call(this,A);this.decisionNumber=B};org.antlr.lang.extend(org.antlr.runtime.EarlyExitException,org.antlr.runtime.RecognitionException,{name:"org.antlr.runtime.EarlyExitException"});org.antlr.runtime.MismatchedSetException=function(B,A){org.antlr.runtime.MismatchedSetException.superclass.constructor.call(this,A);this.expecting=B};org.antlr.lang.extend(org.antlr.runtime.MismatchedSetException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedSetException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedSetException"});org.antlr.runtime.MismatchedNotSetException=function(B,A){org.antlr.runtime.MismatchedNotSetException.superclass.constructor.call(this,B,A)};org.antlr.lang.extend(org.antlr.runtime.MismatchedNotSetException,org.antlr.runtime.MismatchedSetException,{toString:function(){return"MismatchedNotSetException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedNotSetException"});org.antlr.runtime.MismatchedRangeException=function(B,A,C){if(arguments.length===0){return this}org.antlr.runtime.MismatchedRangeException.superclass.constructor.call(this,C);this.a=B;this.b=A};org.antlr.lang.extend(org.antlr.runtime.MismatchedRangeException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedRangeException("+this.getUnexpectedType()+" not in ["+this.a+","+this.b+"])"},name:"org.antlr.runtime.MismatchedRangeException"});org.antlr.runtime.FailedPredicateException=function(A,C,B){org.antlr.runtime.FailedPredicateException.superclass.constructor.call(this,A);this.ruleName=C;this.predicateText=B};org.antlr.lang.extend(org.antlr.runtime.FailedPredicateException,org.antlr.runtime.RecognitionException,{toString:function(){return"FailedPredicateException("+this.ruleName+",{"+this.predicateText+"}?)"},name:"org.antlr.runtime.FailedPredicateException"});org.antlr.runtime.BitSet=function(A){if(!A){A=org.antlr.runtime.BitSet.BITS}if(org.antlr.lang.isArray(A)){this.bits=A}else{if(org.antlr.lang.isNumber(A)){this.bits=[]}}};org.antlr.lang.augmentObject(org.antlr.runtime.BitSet,{BITS:32,LOG_BITS:5,MOD_MASK:31,bitMask:function(B){var A=B&org.antlr.runtime.BitSet.MOD_MASK;return 1<<A},numWordsToHold:function(A){return(A>>org.antlr.runtime.BitSet.LOG_BITS)+1},wordNumber:function(A){return A>>org.antlr.runtime.BitSet.LOG_BITS},of:function(D,A){var B,F,C,E;if(org.antlr.lang.isNumber(D)){if(org.antlr.lang.isNumber(A)){C=new org.antlr.runtime.BitSet(A+1);for(B=D;B<=A;B++){F=org.antlr.runtime.BitSet.wordNumber(B);C.bits[F]|=org.antlr.runtime.BitSet.bitMask(B)}return C}else{C=new org.antlr.runtime.BitSet(D+1);C.add(D);return C}}else{if(org.antlr.lang.isArray(D)){C=new org.antlr.runtime.BitSet();for(B=D.length-1;B>=0;B--){C.add(D[B])}return C}else{if(D instanceof org.antlr.runtime.BitSet){if(!D){return null}return D}else{if(D instanceof org.antlr.runtime.IntervalSet){if(!D){return null}C=new org.antlr.runtime.BitSet();C.addAll(D);return C}else{if(org.antlr.lang.isObject(D)){E=[];for(B in D){if(org.antlr.lang.isNumber(B)){E.push(B)}}return org.antlr.runtime.BitSet.of(E)}}}}}}});org.antlr.runtime.BitSet.prototype={add:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){this.growToInclude(A)}this.bits[B]|=org.antlr.runtime.BitSet.bitMask(A)},addAll:function(C){var A,B,D;if(C instanceof org.antlr.runtime.BitSet){this.orInPlace(C)}else{if(C instanceof org.antlr.runtime.IntervalSet){A=C}else{if(org.antlr.lang.isArray(C)){for(B=0;B<C.length;B++){D=C[B];this.add(D)}}else{return }}}},and:function(A){var B=this.clone();B.andInPlace(A);return B},andInPlace:function(A){var C=Math.min(this.bits.length,A.bits.length),B;for(B=C-1;B>=0;B--){this.bits[B]&=A.bits[B]}for(B=C;B<this.bits.length;B++){this.bits[B]=0}},clear:function(B){if(arguments.length===0){var A;for(A=this.bits.length-1;A>=0;A--){this.bits[A]=0}return }var C=org.antlr.runtime.BitSet.wordNumber(B);if(C>=this.bits.length){this.growToInclude(B)}this.bits[C]&=~org.antlr.runtime.BitSet.bitMask(B)},clone:function(){var C,B,A=[];for(C=0,B=this.bits.length;C<B;C++){A[C]=this.bits[C]}return new org.antlr.runtime.BitSet(A)},size:function(){var B=0,A,C,D;for(A=this.bits.length-1;A>=0;A--){C=this.bits[A];if(C!==0){for(D=org.antlr.runtime.BitSet.BITS-1;D>=0;D--){if((C&(1<<D))!==0){B++}}}}return B},equals:function(A){if(!A||!(A instanceof org.antlr.runtime.BitSet)){return false}var B=A,C,D=Math.min(this.bits.length,B.bits.length);for(C=0;C<D;C++){if(this.bits[C]!=B.bits[C]){return false}}if(this.bits.length>D){for(C=D+1;C<this.bits.length;C++){if(this.bits[C]!==0){return false}}}else{if(B.bits.length>D){for(C=D+1;C<B.bits.length;C++){if(B.bits[C]!==0){return false}}}}return true},growToInclude:function(D){var A=Math.max(this.bits.length<<1,org.antlr.runtime.BitSet.numWordsToHold(D)),C=[],B;for(B=0,len=this.bits.length;B<len;B++){C[B]=this.bits[B]}this.bits=C},member:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){return false}return(this.bits[B]&org.antlr.runtime.BitSet.bitMask(A))!==0},getSingleElement:function(){var A;for(A=0;A<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);A++){if(this.member(A)){return A}}return -1},isNil:function(){var A;for(A=this.bits.length-1;A>=0;A--){if(this.bits[A]!==0){return false}}return true},complement:function(B){if(B){return B.subtract(this)}else{var A=this.clone();A.notInPlace();return A}},notInPlace:function(){var A,D,B,C;if(arguments.length===0){for(B=this.bits.length-1;B>=0;B--){this.bits[B]=~this.bits[B]}}else{if(arguments.length===1){A=0;D=arguments[0]}else{A=arguments[0];D=arguments[1]}this.growToInclude(D);for(B=A;B<=D;B++){C=org.antlr.runtime.BitSet.wordNumber(B);this.bits[C]^=org.antlr.runtime.BitSet.bitMask(B)}}},or:function(A){if(!A){return this}var B=this.clone();B.orInPlace(A);return B},orInPlace:function(A){if(!A){return }if(A.bits.length>this.bits.length){this.setSize(A.bits.length)}var C=Math.min(this.bits.length,A.bits.length),B;for(B=C-1;B>=0;B--){this.bits[B]|=A.bits[B]}},remove:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){this.growToInclude(A)}this.bits[B]&=~org.antlr.runtime.BitSet.bitMask(A)},setSize:function(A){var B=A-this.bits.length;while(B>=0){this.bits.push(0);B--}},numBits:function(){return this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS},lengthInLongWords:function(){return this.bits.length},subset:function(A){if(!A){return false}return this.and(A).equals(this)},subtractInPlace:function(A){if(!A){return }var B;for(B=0;B<this.bits.length&&B<A.bits.length;B++){this.bits[B]&=~A.bits[B]}},subtract:function(A){if(!A||!(A instanceof org.antlr.runtime.BitSet)){return null}var B=this.clone();B.subtractInPlace(A);return B},toArray:function(){var A=[],C,B=0;for(C=0;C<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);C++){if(this.member(C)){A[B++]=C}}return A},toPackedArray:function(){return this.bits},toString:function(){if(arguments.length===0){return this.toString1(null)}else{if(org.antlr.lang.isString(arguments[0])){if(!org.antlr.lang.isValue(arguments[1])){return this.toString1(null)}else{return this.toString2(arguments[0],arguments[1])}}else{return this.toString1(arguments[0])}}},toString1:function(D){var A="{",E=",",B,C=false;for(B=0;B<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);B++){if(this.member(B)){if(B>0&&C){A+=E}if(D){A+=D.getTokenDisplayName(B)}else{A+=B.toString()}C=true}}return A+"}"},toString2:function(C,B){var D="",A;for(A=0;A<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);A++){if(this.member(A)){if(D.length>0){D+=C}if(A>=B.size()){D+="'"+A+"'"}else{if(!org.antlr.lang.isValue(B.get(A))){D+="'"+A+"'"}else{D+=B.get(A)}}}}return D}};org.antlr.runtime.CharStream={EOF:-1};org.antlr.runtime.CommonToken=function(){var A;this.charPositionInLine=-1;this.channel=0;this.index=-1;if(arguments.length==1){if(org.antlr.lang.isNumber(arguments[0])){this.type=arguments[0]}else{A=arguments[0];this.text=A.getText();this.type=A.getType();this.line=A.getLine();this.index=A.getTokenIndex();this.charPositionInLine=A.getCharPositionInLine();this.channel=A.getChannel();if(A instanceof org.antlr.runtime.CommonToken){this.start=A.start;this.stop=A.stop}}}else{if(arguments.length==2){this.type=arguments[0];this.text=arguments[1];this.channel=0}else{if(arguments.length==5){this.input=arguments[0];this.type=arguments[1];this.channel=arguments[2];this.start=arguments[3];this.stop=arguments[4]}}}};org.antlr.runtime.CommonToken.prototype={getType:function(){return this.type},setLine:function(A){this.line=A},getText:function(){if(org.antlr.lang.isString(this.text)){return this.text}if(!this.input){return null}this.text=this.input.substring(this.start,this.stop);return this.text},setText:function(A){this.text=A},getLine:function(){return this.line},getCharPositionInLine:function(){return this.charPositionInLine},setCharPositionInLine:function(A){this.charPositionInLine=A},getChannel:function(){return this.channel},setChannel:function(A){this.channel=A},setType:function(A){this.type=A},getStartIndex:function(){return this.start},setStartIndex:function(A){this.start=A},getStopIndex:function(){return this.stop},setStopIndex:function(A){this.stop=A},getTokenIndex:function(){return this.index},setTokenIndex:function(A){this.index=A},getInputStream:function(){return this.input},setInputStream:function(A){this.input=A},toString:function(){var B="";if(this.channel>0){B=",channel="+this.channel}var A=this.getText();if(!org.antlr.lang.isNull(A)){A=A.replace(/\n/g,"\\\\n");A=A.replace(/\r/g,"\\\\r");A=A.replace(/\t/g,"\\\\t")}else{A="<no text>"}return"[@"+this.getTokenIndex()+","+this.start+":"+this.stop+"='"+A+"',<"+this.type+">"+B+","+this.line+":"+this.getCharPositionInLine()+"]"}};org.antlr.runtime.Token=function(){};org.antlr.lang.augmentObject(org.antlr.runtime.Token,{EOR_TOKEN_TYPE:1,DOWN:2,UP:3,MIN_TOKEN_TYPE:4,EOF:org.antlr.runtime.CharStream.EOF,EOF_TOKEN:new org.antlr.runtime.CommonToken(org.antlr.runtime.CharStream.EOF),INVALID_TOKEN_TYPE:0,INVALID_TOKEN:new org.antlr.runtime.CommonToken(0),SKIP_TOKEN:new org.antlr.runtime.CommonToken(0),DEFAULT_CHANNEL:0,HIDDEN_CHANNEL:99});org.antlr.lang.augmentObject(org.antlr.runtime.CommonToken,org.antlr.runtime.Token);org.antlr.runtime.tree.RewriteCardinalityException=function(A){this.elementDescription=A};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteCardinalityException,Error,{getMessage:function(){if(org.antlr.lang.isString(this.elementDescription)){return this.elementDescription}return null},name:function(){return"org.antlr.runtime.tree.RewriteCardinalityException"}});org.antlr.runtime.tree.RewriteEmptyStreamException=function(B){var A=org.antlr.runtime.tree.RewriteEmptyStreamException.superclass;A.constructor.call(this,B)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteEmptyStreamException,org.antlr.runtime.tree.RewriteCardinalityException,{name:function(){return"org.antlr.runtime.tree.RewriteEmptyStreamException"}});org.antlr.runtime.tree.RewriteEarlyExitException=function(B){var A=org.antlr.runtime.tree.RewriteEarlyExitException.superclass;if(org.antlr.lang.isUndefined(B)){B=null}A.constructor.call(this,B)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteEarlyExitException,org.antlr.runtime.tree.RewriteCardinalityException,{name:function(){return"org.antlr.runtime.tree.RewriteEarlyExitException"}});org.antlr.runtime.MismatchedTreeNodeException=function(B,A){if(B&&A){org.antlr.runtime.MismatchedTreeNodeException.superclass.constructor.call(this,A);this.expecting=B}};org.antlr.lang.extend(org.antlr.runtime.MismatchedTreeNodeException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedTreeNodeException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedTreeNodeException"});org.antlr.runtime.tree.BaseTree=function(){};org.antlr.runtime.tree.BaseTree.prototype={getChild:function(A){if(!this.children||A>=this.children.length){return null}return this.children[A]},getChildren:function(){return this.children},getFirstChildWithType:function(C){var B,A;for(B=0;this.children&&B<this.children.length;B++){A=this.children[B];if(A.getType()===C){return A}}return null},getChildCount:function(){if(!this.children){return 0}return this.children.length},addChild:function(B){if(!org.antlr.lang.isValue(B)){return }var C=B,E,A,D;if(C.isNil()){if(this.children&&this.children==C.children){throw new Error("attempt to add child list to itself")}if(C.children){if(this.children){E=C.children.length;for(A=0;A<E;A++){D=C.children[A];this.children.push(D);D.setParent(this);D.setChildIndex(this.children.length-1)}}else{this.children=C.children;this.freshenParentAndChildIndexes()}}}else{if(!this.children){this.children=this.createChildrenList()}this.children.push(B);C.setParent(this);C.setChildIndex(this.children.length-1)}},addChildren:function(A){var C,B;for(C=0;C<A.length;C++){B=A[C];this.addChild(B)}},setChild:function(B,A){if(!A){return }if(A.isNil()){throw new Error("Can't set single child to a list")}if(!this.children){this.children=this.createChildrenList()}this.children[B]=A;A.setParent(this);A.setChildIndex(B)},deleteChild:function(B){if(!this.children){return null}if(B<0||B>=this.children.length){throw new Error("Index out of bounds.")}var A=this.children.splice(B,1)[0];this.freshenParentAndChildIndexes(B);return A},replaceChildren:function(H,I,P){if(!this.children){throw new Error("indexes invalid; no children in list")}var O=I-H+1;var A;var K=P;var D=null;if(K.isNil()){D=K.children}else{D=[];D.push(K)}A=D.length;var B=D.length;var N=O-A;var F,G,C,E,M,J,L;if(N===0){F=0;for(G=H;G<=I;G++){C=D[F];this.children[G]=C;C.setParent(this);C.setChildIndex(G);F++}}else{if(N>0){for(F=0;F<B;F++){this.children[H+F]=D[F]}E=H+B;for(M=E;M<=I;M++){J=this.children.splice(E,1)[0]}this.freshenParentAndChildIndexes(H)}else{for(F=0;F<O;F++){this.children[H+F]=D[F]}L=A-O;for(F=O;F<A;F++){this.children.splice(H+F,0,D[F])}this.freshenParentAndChildIndexes(H)}}},createChildrenList:function(){return[]},isNil:function(){return false},freshenParentAndChildIndexes:function(A){if(!org.antlr.lang.isNumber(A)){A=0}var D=this.getChildCount(),C,B;for(C=A;C<D;C++){B=this.getChild(C);B.setChildIndex(C);B.setParent(this)}},sanityCheckParentAndChildIndexes:function(B,A){if(arguments.length===0){B=null;A=-1}if(B!==this.getParent()){throw new Error("parents don't match; expected "+B+" found "+this.getParent())}if(A!==this.getChildIndex()){throw new Error("child indexes don't match; expected "+A+" found "+this.getChildIndex())}var E=this.getChildCount(),D,C;for(D=0;D<E;D++){C=this.getChild(D);C.sanityCheckParentAndChildIndexes(this,D)}},getChildIndex:function(){return 0},setChildIndex:function(A){},getParent:function(){return null},setParent:function(A){},getTree:function(){return this},toStringTree:function(){if(!this.children||this.children.length===0){return this.toString()}var A="",C,B;if(!this.isNil()){A+="(";A+=this.toString();A+=" "}for(C=0;this.children&&C<this.children.length;C++){B=this.children[C];if(C>0){A+=" "}A+=B.toStringTree()}if(!this.isNil()){A+=")"}return A},getLine:function(){return 0},getCharPositionInLine:function(){return 0}};org.antlr.runtime.tree.CommonTree=function(A){this.startIndex=-1;this.stopIndex=-1;this.childIndex=-1;this.parent=null;this.token=null;if(A instanceof org.antlr.runtime.tree.CommonTree){org.antlr.runtime.tree.CommonTree.superclass.constructor.call(this,A);this.token=A.token;this.startIndex=A.startIndex;this.stopIndex=A.stopIndex}else{if(A instanceof org.antlr.runtime.CommonToken){this.token=A}}};org.antlr.lang.extend(org.antlr.runtime.tree.CommonTree,org.antlr.runtime.tree.BaseTree,{getToken:function(){return this.token},dupNode:function(){return new org.antlr.runtime.tree.CommonTree(this)},isNil:function(){return !this.token},getType:function(){if(!this.token){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE}return this.token.getType()},getText:function(){if(!this.token){return null}return this.token.getText()},getLine:function(){if(!this.token||this.token.getLine()===0){if(this.getChildCount()>0){return this.getChild(0).getLine()}return 0}return this.token.getLine()},getCharPositionInLine:function(){if(!this.token||this.token.getCharPositionInLine()===-1){if(this.getChildCount()>0){return this.getChild(0).getCharPositionInLine()}return 0}return this.token.getCharPositionInLine()},getTokenStartIndex:function(){if(this.token){return this.token.getTokenIndex()}return this.startIndex},setTokenStartIndex:function(A){this.startIndex=A},getTokenStopIndex:function(){if(this.token){return this.token.getTokenIndex()}return this.stopIndex},setTokenStopIndex:function(A){this.stopIndex=A},getChildIndex:function(){return this.childIndex},getParent:function(){return this.parent},setParent:function(A){this.parent=A},setChildIndex:function(A){this.childIndex=A},toString:function(){if(this.isNil()){return"nil"}if(this.getType()===org.antlr.runtime.Token.INVALID_TOKEN_TYPE){return"<errornode>"}if(!this.token){return null}return this.token.getText()}});org.antlr.runtime.tree.Tree={INVALID_NODE:new org.antlr.runtime.tree.CommonTree(org.antlr.runtime.Token.INVALID_TOKEN)};org.antlr.runtime.tree.CommonErrorNode=function(A,D,B,C){if(!B||(B.getTokenIndex()<D.getTokenIndex()&&B.getType()!=org.antlr.runtime.Token.EOF)){B=D}this.input=A;this.start=D;this.stop=B;this.trappedException=C};org.antlr.lang.extend(org.antlr.runtime.tree.CommonErrorNode,org.antlr.runtime.tree.CommonTree,{isNil:function(){return false},getType:function(){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE},getText:function(){var C=null;if(this.start instanceof org.antlr.runtime.CommonToken){var B=this.start.getTokenIndex();var A=this.stop.getTokenIndex();if(this.stop.getType()===org.antlr.runtime.Token.EOF){A=this.input.size()}C=this.input.toString(B,A)}else{if(this.start instanceof org.antlr.runtime.tree.CommonTree){C=this.input.toString(this.start,this.stop)}else{C="<unknown>"}}return C},toString:function(){if(this.trappedException instanceof org.antlr.runtime.MissingTokenException){return"<missing type: "+this.trappedException.getMissingType()+">"}else{if(this.trappedException instanceof org.antlr.runtime.UnwantedTokenException){return"<extraneous: "+this.trappedException.getUnexpectedToken()+", resync="+this.getText()+">"}else{if(this.trappedException instanceof org.antlr.runtime.MismatchedTokenException){return"<mismatched token: "+this.trappedException.token+", resync="+this.getText()+">"}else{if(this.trappedException instanceof org.antlr.runtime.NoViableAltException){return"<unexpected: "+this.trappedException.token+", resync="+this.getText()+">"}}}}return"<error: "+this.getText()+">"}});org.antlr.runtime.tree.BaseTreeAdaptor=function(){this.uniqueNodeID=1};org.antlr.runtime.tree.BaseTreeAdaptor.prototype={nil:function(){return this.create(null)},errorNode:function(A,E,C,D){var B=new org.antlr.runtime.tree.CommonErrorNode(A,E,C,D);return B},isNil:function(A){return A.isNil()},dupTree:function(B,C){if(arguments.length===1){C=null}if(!B){return null}var D=this.dupNode(B);this.setChildIndex(D,this.getChildIndex(B));this.setParent(D,C);var G=this.getChildCount(B),A,F,E;for(A=0;A<G;A++){F=this.getChild(B,A);E=this.dupTree(F,B);this.addChild(D,E)}return D},addChild:function(A,B){if(A&&org.antlr.lang.isValue(B)){A.addChild(B)}},becomeRoot:function(D,C){if(D instanceof org.antlr.runtime.CommonToken||!D){D=this.create(D)}var A=D,B=C;if(!C){return D}if(A.isNil()){if(A.getChildCount()>1){throw new Error("more than one node as root (TODO: make exception hierarchy)")}A=A.getChild(0)}A.addChild(B);return A},rulePostProcessing:function(A){var B=A;if(B&&B.isNil()){if(B.getChildCount()===0){B=null}else{if(B.getChildCount()===1){B=B.getChild(0);B.setParent(null);B.setChildIndex(-1)}}}return B},create:function(C,B){var D,A;if(arguments.length===2){if(org.antlr.lang.isString(arguments[1])){D=arguments[1];B=this.createToken(C,D);A=this.create(B);return A}else{B=this.createToken(B);B.setType(C);A=this.create(B);return A}}else{if(arguments.length===3){D=arguments[2];B=this.createToken(B);B.setType(C);B.setText(D);A=this.create(B);return A}}},getType:function(A){A.getType();return 0},setType:function(A,B){throw new Error("don't know enough about Tree node")},getText:function(A){return A.getText()},setText:function(A,B){throw new Error("don't know enough about Tree node")},getChild:function(B,A){return B.getChild(A)},setChild:function(B,A,C){B.setChild(A,C)},deleteChild:function(B,A){return B.deleteChild(A)},getChildCount:function(A){return A.getChildCount()},getUniqueID:function(B){if(!this.treeToUniqueIDMap){this.treeToUniqueIDMap={}}var C=this.treeToUniqueIDMap[B];if(org.antlr.lang.isValue(C)){return C}var A=this.uniqueNodeID;this.treeToUniqueIDMap[B]=A;this.uniqueNodeID++;return A}};org.antlr.runtime.tree.CommonTreeAdaptor=function(){};org.antlr.lang.extend(org.antlr.runtime.tree.CommonTreeAdaptor,org.antlr.runtime.tree.BaseTreeAdaptor,{dupNode:function(A){if(!org.antlr.lang.isValue(A)){return null}return A.dupNode()},create:function(A){if(arguments.length>1){return org.antlr.runtime.tree.CommonTreeAdaptor.superclass.create.apply(this,arguments)}return new org.antlr.runtime.tree.CommonTree(A)},createToken:function(A){if(arguments.length===2){return new org.antlr.runtime.CommonToken(arguments[0],arguments[1])}else{return new org.antlr.runtime.CommonToken(arguments[0])}},setTokenBoundaries:function(C,E,A){if(!org.antlr.lang.isValue(C)){return }var D=0,B=0;if(org.antlr.lang.isValue(E)){if(E.getTokenIndex){D=E.getTokenIndex()}else{if(E.getStartIndex){D=E.getStartIndex()}else{D=E.getTokenStartIndex()}}}if(org.antlr.lang.isValue(A)){if(B.getTokenIndex){B=A.getTokenIndex()}else{if(A.getStopIndex){B=A.getStopIndex()}else{B=A.getTokenStopIndex()}}}C.setTokenStartIndex(D);C.setTokenStopIndex(B)},getTokenStartIndex:function(A){if(!A){return -1}return A.getTokenStartIndex()},getTokenStopIndex:function(A){if(!A){return -1}return A.getTokenStopIndex()},getText:function(A){if(!A){return null}return A.getText()},getType:function(A){if(!A){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE}return A.getType()},getToken:function(A){if(A instanceof org.antlr.runtime.tree.CommonTree){return A.getToken()}return null},getChild:function(B,A){if(!B){return null}return B.getChild(A)},getChildCount:function(A){if(!A){return 0}return A.getChildCount()},getParent:function(A){return A.getParent()},setParent:function(A,B){A.setParent(B)},getChildIndex:function(A){return A.getChildIndex()},setChildIndex:function(B,A){B.setChildIndex(A)},replaceChildren:function(D,B,A,C){if(D){D.replaceChildren(B,A,C)}}});org.antlr.runtime.ANTLRStringStream=function(A){this.p=0;this.line=1;this.charPositionInLine=0;this.markDepth=0;this.markers=null;this.lastMarker=null;this.data=A;this.n=A.length};org.antlr.runtime.ANTLRStringStream.prototype={reset:function(){this.p=0;this.line=1;this.charPositionInLine=0;this.markDepth=0},consume:function(){if(this.p<this.n){this.charPositionInLine++;if(this.data.charAt(this.p)==="\n"){this.line++;this.charPositionInLine=0}this.p++}},LA:function(B){if(B<0){B++}var A=this.p+B-1;if(A>=this.n||A<0){return org.antlr.runtime.CharStream.EOF}return this.data.charAt(A)},index:function(){return this.p},size:function(){return this.n},mark:function(){if(!this.markers){this.markers=[];this.markers.push(null)}this.markDepth++;var A=null;if(this.markDepth>=this.markers.length){A={};this.markers.push(A)}else{A=this.markers[this.markDepth]}A.p=this.p;A.line=this.line;A.charPositionInLine=this.charPositionInLine;this.lastMarker=this.markDepth;return this.markDepth},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}var B=this.markers[A];this.seek(B.p);this.line=B.line;this.charPositionInLine=B.charPositionInLine;this.release(A)},release:function(A){this.markDepth=A;this.markDepth--},seek:function(A){if(A<=this.p){this.p=A;return }while(this.p<A){this.consume()}},substring:function(B,A){return this.data.substr(B,A-B+1)},getLine:function(){return this.line},getCharPositionInLine:function(){return this.charPositionInLine},setLine:function(A){this.line=A},setCharPositionInLine:function(A){this.charPositionInLine=A},getSourceName:function(){return null}};org.antlr.runtime.ANTLRStringStream.LT=org.antlr.runtime.ANTLRStringStream.LA;org.antlr.runtime.CommonTokenStream=function(A,B){this.p=-1;this.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.v_discardOffChannelTokens=false;this.tokens=[];if(arguments.length>=2){this.channel=B}else{if(arguments.length===1){this.tokenSource=A}}};org.antlr.runtime.CommonTokenStream.prototype={setTokenSource:function(A){this.tokenSource=A;this.tokens=[];this.p=-1;this.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL},fillBuffer:function(){var B=0,C=this.tokenSource.nextToken(),A,D;while(org.antlr.lang.isValue(C)&&C.getType()!=org.antlr.runtime.CharStream.EOF){A=false;if(this.channelOverrideMap){D=this.channelOverrideMap[C.getType()];if(org.antlr.lang.isValue(D)){C.setChannel(D)}}if(this.discardSet&&this.discardSet[C.getType()]){A=true}else{if(this.v_discardOffChannelTokens&&C.getChannel()!=this.channel){A=true}}if(!A){C.setTokenIndex(B);this.tokens.push(C);B++}C=this.tokenSource.nextToken()}this.p=0;this.p=this.skipOffTokenChannels(this.p)},consume:function(){if(this.p<this.tokens.length){this.p++;this.p=this.skipOffTokenChannels(this.p)}},skipOffTokenChannels:function(A){var B=this.tokens.length;while(A<B&&(this.tokens[A]).getChannel()!=this.channel){A++}return A},skipOffTokenChannelsReverse:function(A){while(A>=0&&(this.tokens[A]).getChannel()!=this.channel){A--}return A},setTokenTypeChannel:function(B,A){if(!this.channelOverrideMap){this.channelOverrideMap={}}this.channelOverrideMap[B]=A},discardTokenType:function(A){if(!this.discardSet){this.discardSet={}}this.discardSet[A]=true},discardOffChannelTokens:function(A){this.v_discardOffChannelTokens=A},getTokens:function(F,D,C){if(this.p===-1){this.fillBuffer()}if(arguments.length===0){return this.tokens}if(org.antlr.lang.isArray(C)){C=new org.antlr.runtime.BitSet(C)}else{if(org.antlr.lang.isNumber(C)){C=org.antlr.runtime.BitSet.of(C)}}if(D>=this.tokens.length){D=this.tokens.length-1}if(F<0){F=0}if(F>D){return null}var E=[],B,A;for(B=F;B<=D;B++){A=this.tokens[B];if(!this.types||C.member(A.getType())){E.push(A)}}if(E.length===0){E=null}return E},LT:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if(A<0){return this.LB(-1*A)}if((this.p+A-1)>=this.tokens.length){return org.antlr.runtime.Token.EOF_TOKEN}var B=this.p,C=1;while(C<A){B=this.skipOffTokenChannels(B+1);C++}if(B>=this.tokens.length){return org.antlr.runtime.Token.EOF_TOKEN}return this.tokens[B]},LB:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if((this.p-A)<0){return null}var B=this.p,C=1;while(C<=A){B=this.skipOffTokenChannelsReverse(B-1);C++}if(B<0){return null}return this.tokens[B]},get:function(A){return this.tokens[A]},LA:function(A){return this.LT(A).getType()},mark:function(){if(this.p===-1){this.fillBuffer()}this.lastMarker=this.index();return this.lastMarker},release:function(A){},size:function(){return this.tokens.length},index:function(){return this.p},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}this.seek(A)},reset:function(){this.p=-1;this.lastMarker=0},seek:function(A){this.p=A},getTokenSource:function(){return this.tokenSource},getSourceName:function(){return this.getTokenSource().getSourceName()},toString:function(D,C){if(arguments.length===0){if(this.p===-1){this.fillBuffer()}D=0;C=this.tokens.length-1}if(!org.antlr.lang.isNumber(D)&&!org.antlr.lang.isNumber(C)){if(org.antlr.lang.isValue(D)&&org.antlr.lang.isValue(C)){D=D.getTokenIndex();C=C.getTokenIndex()}else{return null}}var A="",B;if(D<0||C<0){return null}if(this.p==-1){this.fillBuffer()}if(C>=this.tokens.length){C=this.tokens.length-1}for(B=D;B<=C;B++){t=this.tokens[B];A=A+this.tokens[B].getText()}return A}};org.antlr.runtime.TokenRewriteStream=function(){var A=org.antlr.runtime.TokenRewriteStream.superclass;this.programs=null;this.lastRewriteTokenIndexes=null;if(arguments.length===0){this.init()}else{A.constructor.apply(this,arguments);this.init()}};(function(){var A=org.antlr.runtime.TokenRewriteStream;org.antlr.lang.augmentObject(A,{DEFAULT_PROGRAM_NAME:"default",PROGRAM_INIT_SIZE:100,MIN_TOKEN_INDEX:0});A.RewriteOperation=function(B,C){this.index=B;this.text=C};A.RewriteOperation.prototype={execute:function(B){return this.index},toString:function(){return this.text}};A.InsertBeforeOp=function(B,C){A.InsertBeforeOp.superclass.constructor.call(this,B,C)};org.antlr.lang.extend(A.InsertBeforeOp,A.RewriteOperation,{execute:function(B){B.push(this.text);return this.index}});A.ReplaceOp=function(D,C,B){A.ReplaceOp.superclass.constructor.call(this,D,B);this.lastIndex=C};org.antlr.lang.extend(A.ReplaceOp,A.RewriteOperation,{execute:function(B){if(org.antlr.lang.isValue(this.text)){B.push(this.text)}return this.lastIndex+1}});A.DeleteOp=function(C,B){A.DeleteOp.superclass.constructor.call(this,C,B)};org.antlr.lang.extend(A.DeleteOp,A.ReplaceOp);org.antlr.lang.extend(A,org.antlr.runtime.CommonTokenStream,{init:function(){this.programs={};this.programs[A.DEFAULT_PROGRAM_NAME]=[];this.lastRewriteTokenIndexes={}},rollback:function(){var B,C;if(arguments.length===1){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0]}else{if(arguments.length===2){B=arguments[0];C=arguments[1]}}var D=this.programs[B];if(D){programs[B]=D.slice(A.MIN_TOKEN_INDEX,this.instructionIndex)}},deleteProgram:function(B){B=B||A.DEFAULT_PROGRAM_NAME;this.rollback(B,A.MIN_TOKEN_INDEX)},addToSortedRewriteList:function(){var H,E;if(arguments.length===1){H=A.DEFAULT_PROGRAM_NAME;E=arguments[0]}else{if(arguments.length===2){H=arguments[0];E=arguments[1]}}var F=this.getProgram(H);var G,I,D,J,B,C;for(I=0,G=F.length;I<G;I++){D=F[I];if(D.index===E.index){if(E instanceof A.ReplaceOp){J=false;for(C=I;C<F.length;C++){B=F[I];if(B.index!==E.index){break}if(B instanceof A.ReplaceOp){F[I]=E;J=true;break}}if(!J){F.splice(C,0,E)}}else{F.splice(I,0,E)}break}else{if(D.index>E.index){F.splice(I,0,E);break}}}if(I===G){F.push(E)}},insertAfter:function(){var C,B,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=arguments[0];C=arguments[1];D=arguments[2]}}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}this.insertBefore(B,C+1,D)},insertBefore:function(){var C,B,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=arguments[0];C=arguments[1];D=arguments[2]}}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}this.addToSortedRewriteList(B,new A.InsertBeforeOp(C,D))},replace:function(){var B,E,C,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;E=arguments[0];C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=A.DEFAULT_PROGRAM_NAME;E=arguments[0];C=arguments[1];D=arguments[2]}}if(arguments.length===4){B=arguments[0];E=arguments[1];C=arguments[2];D=arguments[3]}if(E instanceof org.antlr.runtime.CommonToken){E=E.index}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}if(E>C||C<0||E<0){return }this.addToSortedRewriteList(B,new A.ReplaceOp(E,C,D))},remove:function(){var B=[],C=arguments.length-1;while(C>=0){B[C]=arguments[C];C--}B.push("");this.replace.apply(this,B)},getLastRewriteTokenIndex:function(B){B=B||A.DEFAULT_PROGRAM_NAME;return this.lastRewriteTokenIndexes[B]||-1},setLastRewriteTokenIndex:function(B,C){this.lastRewriteTokenIndexes[B]=C},getProgram:function(B){var C=this.programs[B];if(!C){C=this.initializeProgram(B)}return C},initializeProgram:function(B){var C=[];this.programs[B]=C;return C},toOriginalString:function(E,B){if(!org.antlr.lang.isNumber(E)){E=A.MIN_TOKEN_INDEX}if(!org.antlr.lang.isNumber(B)){B=this.size()-1}var C=[],D;for(D=E;D>=A.MIN_TOKEN_INDEX&&D<=B&&D<this.tokens.length;D++){C.push(this.get(D).getText())}return C.join("")},toString:function(){var J,B,F;if(arguments.length===0){J=A.DEFAULT_PROGRAM_NAME;B=A.MIN_TOKEN_INDEX;F=this.size()-1}else{if(arguments.length===1){J=arguments[0];B=A.MIN_TOKEN_INDEX;F=this.size()-1}else{if(arguments.length===2){J=A.DEFAULT_PROGRAM_NAME;B=arguments[0];F=arguments[1]}}}var H=this.programs[J];if(!H||H.length===0){return this.toOriginalString(B,F)}var E=0,D=B,C=[],G;while(D>=A.MIN_TOKEN_INDEX&&D<=F&&D<this.tokens.length){if(E<H.length){G=H[E];while(G.index<D&&E<H.length){E++;if(E<H.length){G=H[E]}}while(D===G.index&&E<H.length){D=G.execute(C);E++;if(E<H.length){G=H[E]}}}if(D<=F){C.push(this.get(D).getText());D++}}var I;for(I=E;I<H.length;I++){G=H[I];if(G.index>=this.size()){G.execute(C)}}return C.join("")},toDebugString:function(E,B){if(!org.antlr.lang.isNumber(E)){E=A.MIN_TOKEN_INDEX}if(!org.antlr.lang.isNumber(B)){B=this.size()-1}var C=[],D;for(D=E;D>=A.MIN_TOKEN_INDEX&&D<=B&&D<this.tokens.length;D++){C.push(this.get(D))}return C.join("")}})})();org.antlr.runtime.tree.TreeNodeStream=function(){};org.antlr.runtime.tree.CommonTreeNodeStream=function(D,A,B){if(arguments.length===1){A=D;D=new org.antlr.runtime.tree.CommonTreeAdaptor()}if(arguments.length<=2){B=org.antlr.runtime.tree.CommonTreeNodeStream.DEFAULT_INITIAL_BUFFER_SIZE}this.uniqueNavigationNodes=false;this.p=-1;var C=org.antlr.runtime.Token;this.root=A;this.adaptor=D;this.nodes=[];this.down=this.adaptor.create(C.DOWN,"DOWN");this.up=this.adaptor.create(C.UP,"UP");this.eof=this.adaptor.create(C.EOF,"EOF")};org.antlr.lang.augmentObject(org.antlr.runtime.tree.CommonTreeNodeStream,{DEFAULT_INITIAL_BUFFER_SIZE:100,INITIAL_CALL_STACK_SIZE:10});org.antlr.lang.extend(org.antlr.runtime.tree.CommonTreeNodeStream,org.antlr.runtime.tree.TreeNodeStream,{StreamIterator:function(){var C=0,B=this.nodes,A=this.eof;return{hasNext:function(){return C<B.length},next:function(){var D=C;C++;if(D<B.length){return B[D]}return A},remove:function(){throw new Error("cannot remove nodes from stream")}}},fillBuffer:function(C){var B=false;if(org.antlr.lang.isUndefined(C)){C=this.root;B=true}var A=this.adaptor.isNil(C);if(!A){this.nodes.push(C)}var F=this.adaptor.getChildCount(C);if(!A&&F>0){this.addNavigationNode(org.antlr.runtime.Token.DOWN)}var E,D;for(E=0;E<F;E++){D=this.adaptor.getChild(C,E);this.fillBuffer(D)}if(!A&&F>0){this.addNavigationNode(org.antlr.runtime.Token.UP)}if(B){this.p=0}},getNodeIndex:function(C){if(this.p==-1){this.fillBuffer()}var B,A;for(B=0;B<this.nodes.length;B++){A=this.nodes[B];if(A===C){return B}}return -1},addNavigationNode:function(B){var A=null;if(B===org.antlr.runtime.Token.DOWN){if(this.hasUniqueNavigationNodes()){A=this.adaptor.create(org.antlr.runtime.Token.DOWN,"DOWN")}else{A=this.down}}else{if(this.hasUniqueNavigationNodes()){A=this.adaptor.create(org.antlr.runtime.Token.UP,"UP")}else{A=this.up}}this.nodes.push(A)},get:function(A){if(this.p===-1){this.fillBuffer()}return this.nodes[A]},LT:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if(A<0){return this.LB(-1*A)}if((this.p+A-1)>=this.nodes.length){return this.eof}return this.nodes[this.p+A-1]},getCurrentSymbol:function(){return this.LT(1)},LB:function(A){if(A===0){return null}if((this.p-A)<0){return null}return this.nodes[this.p-A]},getTreeSource:function(){return this.root},getSourceName:function(){return this.getTokenStream().getSourceName()},getTokenStream:function(){return this.tokens},setTokenStream:function(A){this.tokens=A},getTreeAdaptor:function(){return this.adaptor},setTreeAdaptor:function(A){this.adaptor=A},hasUniqueNavigationNodes:function(){return this.uniqueNavigationNodes},setUniqueNavigationNodes:function(A){this.uniqueNavigationNodes=A},consume:function(){if(this.p===-1){this.fillBuffer()}this.p++},LA:function(A){return this.adaptor.getType(this.LT(A))},mark:function(){if(this.p===-1){this.fillBuffer()}this.lastMarker=this.index();return this.lastMarker},release:function(A){},index:function(){return this.p},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}this.seek(A)},seek:function(A){if(this.p===-1){this.fillBuffer()}this.p=A},push:function(A){if(!this.calls){this.calls=[]}this.calls.push(this.p);this.seek(A)},pop:function(){var A=this.calls.pop();this.seek(A);return A},reset:function(){this.p=-1;this.lastMarker=0;if(this.calls){this.calls=[]}},size:function(){if(this.p===-1){this.fillBuffer()}return this.nodes.length},iterator:function(){if(this.p===-1){this.fillBuffer()}return this.StreamIterator()},replaceChildren:function(D,B,A,C){if(D){this.adaptor.replaceChildren(D,B,A,C)}},toTokenString:function(E,D){if(this.p===-1){this.fillBuffer()}var A="",C,B;for(C=E;C<this.nodes.length&&C<=D;C++){B=this.nodes[C];A+=" "+this.adaptor.getToken(B)}return A},toString:function(H,D){var A="",E,C,B;if(arguments.length===0){if(this.p===-1){this.fillBuffer()}for(B=0;B<this.nodes.length;B++){C=this.nodes[B];A+=" ";A+=this.adaptor.getType(C)}return A}else{if(!org.antlr.lang.isNumber(H)||!org.antlr.lang.isNumber(D)){return null}if(this.p===-1){this.fillBuffer()}if(H instanceof org.antlr.runtime.tree.CommonTree){}else{}if(D instanceof org.antlr.runtime.tree.CommonTree){}else{}var G,F;if(this.tokens){G=this.adaptor.getTokenStartIndex(H);F=this.adaptor.getTokenStopIndex(D);if(this.adaptor.getType(D)===org.antlr.runtime.Token.UP){F=this.adaptor.getTokenStopIndex(H)}else{if(this.adaptor.getType(D)==org.antlr.runtime.Token.EOF){F=this.size()-2}}return this.tokens.toString(G,F)}C=null;B=0;for(;B<this.nodes.length;B++){C=this.nodes[B];if(C===H){break}}A=E="";C=this.nodes[B];while(C!==D){E=this.adaptor.getText(C);if(!org.antlr.lang.isString(E)){E=" "+this.adaptor.getType(C).toString()}A+=E;B++;C=nodes[B]}E=this.adaptor.getText(D);if(!org.antlr.lang.isString(E)){E=" "+this.adaptor.getType(D).toString()}A+=E;return A}}});org.antlr.runtime.tree.RewriteRuleElementStream=function(C,B,A){this.cursor=0;this.dirty=false;this.elementDescription=B;this.adaptor=C;if(A){if(org.antlr.lang.isArray(A)){this.singleElement=null;this.elements=A}else{this.add(A)}}};org.antlr.runtime.tree.RewriteRuleElementStream.prototype={reset:function(){this.cursor=0;this.dirty=true},add:function(A){if(!org.antlr.lang.isValue(A)){return }if(this.elements){this.elements.push(A);return }if(!org.antlr.lang.isValue(this.singleElement)){this.singleElement=A;return }this.elements=[];this.elements.push(this.singleElement);this.singleElement=null;this.elements.push(A)},nextTree:function(){var B=this.size(),A;if(this.dirty||(this.cursor>=B&&B==1)){A=this._next();return this.dup(A)}A=this._next();return A},_next:function(){var B=this.size();if(B===0){throw new org.antlr.runtime.tree.RewriteEmptyStreamException(this.elementDescription)}if(this.cursor>=B){if(B===1){return this.toTree(this.singleElement)}throw new org.antlr.runtime.tree.RewriteCardinalityException(this.elementDescription)}if(org.antlr.lang.isValue(this.singleElement)){this.cursor++;return this.toTree(this.singleElement)}var A=this.toTree(this.elements[this.cursor]);this.cursor++;return A},toTree:function(A){if(A&&A.getTree){return A.getTree()}return A},hasNext:function(){return(org.antlr.lang.isValue(this.singleElement)&&this.cursor<1)||(this.elements&&this.cursor<this.elements.length)},size:function(){var A=0;if(org.antlr.lang.isValue(this.singleElement)){A=1}if(this.elements){return this.elements.length}return A},getDescription:function(){return this.elementDescription}};org.antlr.runtime.tree.RewriteRuleNodeStream=function(C,B,A){org.antlr.runtime.tree.RewriteRuleNodeStream.superclass.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleNodeStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){return this._next()},toTree:function(A){return this.adaptor.dupNode(A)},dup:function(){throw new Error("dup can't be called for a node stream.")}});org.antlr.runtime.tree.RewriteRuleTokenStream=function(D,C,B){var A=org.antlr.runtime.tree.RewriteRuleTokenStream.superclass;A.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleTokenStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){var A=this._next();return this.adaptor.create(A)},nextToken:function(){return this._next()},toTree:function(A){return A},dup:function(A){throw new Error("dup can't be called for a token stream.")}});org.antlr.runtime.tree.RewriteRuleSubtreeStream=function(){var A=org.antlr.runtime.tree.RewriteRuleSubtreeStream.superclass;A.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleSubtreeStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){var B=this.size(),A;if(this.dirty||(this.cursor>=B&&B===1)){A=this._next();return this.adaptor.dupNode(A)}A=this._next();return A},dup:function(A){return this.adaptor.dupTree(A)}});org.antlr.runtime.BaseRecognizer=function(A){this.state=A||new org.antlr.runtime.RecognizerSharedState()};org.antlr.lang.augmentObject(org.antlr.runtime.BaseRecognizer,{MEMO_RULE_FAILED:-2,MEMO_RULE_UNKNOWN:-1,INITIAL_FOLLOW_STACK_SIZE:100,MEMO_RULE_FAILED_I:-2,DEFAULT_TOKEN_CHANNEL:org.antlr.runtime.Token.DEFAULT_CHANNEL,HIDDEN:org.antlr.runtime.Token.HIDDEN_CHANNEL,NEXT_TOKEN_RULE_NAME:"nextToken"});org.antlr.runtime.BaseRecognizer.prototype={reset:function(){var B,A;if(!this.state){return }this.state._fsp=-1;this.state.errorRecovery=false;this.state.lastErrorIndex=-1;this.state.failed=false;this.state.syntaxErrors=0;this.state.backtracking=0;if(this.state.ruleMemo){for(B=0,A=this.state.ruleMemo.length;B<A;B++){this.state.ruleMemo[B]=null}}},match:function(B,D,A){var C=this.getCurrentInputSymbol(B);if(B.LA(1)===D){B.consume();this.state.errorRecovery=false;this.state.failed=false;return C}if(this.state.backtracking>0){this.state.failed=true;return C}C=this.recoverFromMismatchedToken(B,D,A);return C},matchAny:function(A){this.state.errorRecovery=false;this.state.failed=false;A.consume()},mismatchIsUnwantedToken:function(A,B){return A.LA(2)===B},mismatchIsMissingToken:function(C,A){if(!A){return false}if(A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){if(this.state._fsp>=0){A.remove(org.antlr.runtime.Token.EOR_TOKEN_TYPE)}var B=this.computeContextSensitiveRuleFOLLOW();A=A.or(this.viableTokensFollowingThisRule)}if(A.member(C.LA(1))||A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){return true}return false},mismatch:function(B,C,A){if(this.mismatchIsUnwantedToken(B,C)){throw new org.antlr.runtime.UnwantedTokenException(C,B)}else{if(this.mismatchIsMissingToken(B,A)){throw new org.antlr.runtime.MissingTokenException(C,B,null)}}throw new org.antlr.runtime.MismatchedTokenException(C,B)},reportError:function(A){if(this.state.errorRecovery){return }this.state.syntaxErrors++;this.state.errorRecovery=true;this.displayRecognitionError(this.getTokenNames(),A)},displayRecognitionError:function(A,B){var D=this.getErrorHeader(B),C=this.getErrorMessage(B,A);this.emitErrorMessage(D+" "+C)},getErrorHeader:function(A){if(!org.antlr.lang.isNumber(A.line)){A.line=0}return"line "+A.line+":"+A.charPositionInLine},emitErrorMessage:function(A){if(typeof (window)!="undefined"&&window.alert){alert(A)}else{print(A)}},getErrorMessage:function(E,D){var F=(E&&E.getMessage)?E.getMessage():null,A,C;if(E instanceof org.antlr.runtime.UnwantedTokenException){var B=E;C="<unknown>";if(B.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[B.expecting]}F="extraneous input "+this.getTokenErrorDisplay(B.getUnexpectedToken())+" expecting "+C}else{if(E instanceof org.antlr.runtime.MissingTokenException){A=E;C="<unknown>";if(A.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[A.expecting]}F="missing "+C+" at "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.MismatchedTokenException){A=E;C="<unknown>";if(A.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[A.expecting]}F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting "+C}else{if(E instanceof org.antlr.runtime.NoViableAltException){F="no viable alternative at input "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.EarlyExitException){F="required (...)+ loop did not match anything at input "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.MismatchedSetException){F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting set "+E.expecting}else{if(E instanceof org.antlr.runtime.MismatchedNotSetException){F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting set "+E.expecting}else{if(E instanceof org.antlr.runtime.FailedPredicateException){F="rule "+E.ruleName+" failed predicate: {"+E.predicateText+"}?"}}}}}}}}return F},getNumberOfSyntaxErrors:function(){return this.state.syntaxErrors},getTokenErrorDisplay:function(A){var B=A.getText();if(!org.antlr.lang.isValue(B)){if(A.getType()==org.antlr.runtime.Token.EOF){B="<EOF>"}else{B="<"+A.getType()+">"}}B=B.replace(/\n/g,"\\n");B=B.replace(/\r/g,"\\r");B=B.replace(/\t/g,"\\t");return"'"+B+"'"},recover:function(A,B){if(this.state.lastErrorIndex==A.index()){A.consume()}this.state.lastErrorIndex=A.index();var C=this.computeErrorRecoverySet();this.beginResync();this.consumeUntil(A,C);this.endResync()},beginResync:function(){},endResync:function(){},computeErrorRecoverySet:function(){return this.combineFollows(false)},computeContextSensitiveRuleFOLLOW:function(){return this.combineFollows(true)},combineFollows:function(C){var E=this.state._fsp,B,A,D=new org.antlr.runtime.BitSet();for(B=E;B>=0;B--){A=this.state.following[B];D.orInPlace(A);if(C){if(A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){if(B>0){D.remove(org.antlr.runtime.Token.EOR_TOKEN_TYPE)}}else{break}}}return D},recoverFromMismatchedToken:function(B,F,A){var E=null;if(this.mismatchIsUnwantedToken(B,F)){E=new org.antlr.runtime.UnwantedTokenException(F,B);this.beginResync();B.consume();this.endResync();this.reportError(E);var D=this.getCurrentInputSymbol(B);B.consume();return D}if(this.mismatchIsMissingToken(B,A)){var C=this.getMissingSymbol(B,E,F,A);E=new org.antlr.runtime.MissingTokenException(F,B,C);this.reportError(E);return C}E=new org.antlr.runtime.MismatchedTokenException(F,B);throw E},recoverFromMismatchedSet:function(B,C,A){if(this.mismatchIsMissingToken(B,A)){this.reportError(C);return this.getMissingSymbol(B,C,org.antlr.runtime.Token.INVALID_TOKEN_TYPE,A)}throw C},getCurrentInputSymbol:function(A){return null},getMissingSymbol:function(B,D,C,A){return null},consumeUntil:function(A,C){var B=A.LA(1);while(B!=org.antlr.runtime.Token.EOF&&!C.member(B)){A.consume();B=A.LA(1)}},pushFollow:function(A){if((this.state._fsp+1)>=this.state.following.length){var C=[];var B;for(B=this.state.following.length-1;B>=0;B--){C[B]=this.state.following[B]}this.state.following=C}this.state._fsp++;this.state.following[this.state._fsp]=A},getRuleInvocationStack:function(B,A){throw new Error("Not implemented.")},getBacktrackingLevel:function(){return this.state.backtracking},getTokenNames:function(){return null},getGrammarFileName:function(){return null},toStrings:function(C){if(!C){return null}var A=[];var B;for(B=0;B<C.length;B++){A.push(C[B].getText())}return A},getRuleMemoization:function(B,A){if(!this.state.ruleMemo[B]){this.state.ruleMemo[B]={}}var C=this.state.ruleMemo[B][A];if(!org.antlr.lang.isNumber(C)){return org.antlr.runtime.BaseRecognizer.MEMO_RULE_UNKNOWN}return C},alreadyParsedRule:function(B,C){var A=this.getRuleMemoization(C,B.index());if(A==org.antlr.runtime.BaseRecognizer.MEMO_RULE_UNKNOWN){return false}if(A==org.antlr.runtime.BaseRecognizer.MEMO_RULE_FAILED){this.state.failed=true}else{B.seek(A+1)}return true},memoize:function(C,D,B){var A=this.state.failed?org.antlr.runtime.BaseRecognizer.MEMO_RULE_FAILED:C.index()-1;if(!org.antlr.lang.isValue(this.state.ruleMemo)){throw new Error("!!!!!!!!! memo array is null for "+this.getGrammarFileName())}if(D>=this.state.ruleMemo.length){throw new Error("!!!!!!!!! memo size is "+this.state.ruleMemo.length+", but rule index is "+D)}if(org.antlr.lang.isValue(this.state.ruleMemo[D])){this.state.ruleMemo[D][B]=A}},getRuleMemoizationCacheSize:function(){var C=0,A;for(A=0;this.state.ruleMemo&&A<this.state.ruleMemo.length;A++){var B=this.state.ruleMemo[A];if(B){C+=B.length}}return C},traceIn:function(C,B,A){this.emitErrorMessage("enter "+C+" "+A);if(this.state.failed){this.emitErrorMessage(" failed="+this.failed)}if(this.state.backtracking>0){this.emitErrorMessage(" backtracking="+this.state.backtracking)}},traceOut:function(C,B,A){this.emitErrorMessage("exit "+C+" "+A);if(this.state.failed){this.emitErrorMessage(" failed="+this.state.failed)}if(this.state.backtracking>0){this.emitErrorMessage(" backtracking="+this.state.backtracking)}}};org.antlr.runtime.Lexer=function(A,B){if(B){org.antlr.runtime.Lexer.superclass.constructor.call(this,B)}if(A){this.input=A}};org.antlr.lang.extend(org.antlr.runtime.Lexer,org.antlr.runtime.BaseRecognizer,{reset:function(){org.antlr.runtime.Lexer.superclass.reset.call(this);if(org.antlr.lang.isValue(this.input)){this.input.seek(0)}if(!org.antlr.lang.isValue(this.state)){return }this.state.token=null;this.state.type=org.antlr.runtime.Token.INVALID_TOKEN_TYPE;this.state.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.state.tokenStartCharIndex=-1;this.state.tokenStartCharPositionInLine=-1;this.state.tokenStartLine=-1;this.state.text=null},nextToken:function(){while(true){this.state.token=null;this.state.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.state.tokenStartCharIndex=this.input.index();this.state.tokenStartCharPositionInLine=this.input.getCharPositionInLine();this.state.tokenStartLine=this.input.getLine();this.state.text=null;if(this.input.LA(1)===org.antlr.runtime.CharStream.EOF){return org.antlr.runtime.Token.EOF_TOKEN}try{this.mTokens();if(!org.antlr.lang.isValue(this.state.token)){this.emit()}else{if(this.state.token==org.antlr.runtime.Token.SKIP_TOKEN){continue}}return this.state.token}catch(A){if(A instanceof org.antlr.runtime.RecognitionException){this.reportError(A)}else{if(A instanceof org.antlr.runtime.NoViableAltException){this.reportError(A);this.recover(A)}else{throw A}}}}},skip:function(){this.state.token=org.antlr.runtime.Token.SKIP_TOKEN},setCharStream:function(A){this.input=null;this.reset();this.input=A},getCharStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},emit:function(){if(arguments.length===0){var A=new org.antlr.runtime.CommonToken(this.input,this.state.type,this.state.channel,this.state.tokenStartCharIndex,this.getCharIndex()-1);A.setLine(this.state.tokenStartLine);A.setText(this.state.text);A.setCharPositionInLine(this.state.tokenStartCharPositionInLine);this.state.token=A;return A}else{this.state.token=arguments[0]}},match:function(C){var B=0,A;if(org.antlr.lang.isString(C)){while(B<C.length){if(this.input.LA(1)!=C.charAt(B)){if(this.state.backtracking>0){this.state.failed=true;return }A=new org.antlr.runtime.MismatchedTokenException(C.charAt(B),this.input);this.recover(A);throw A}B++;this.input.consume();this.state.failed=false}}else{if(org.antlr.lang.isNumber(C)){if(this.input.LA(1)!=C){if(this.state.backtracking>0){this.state.failed=true;return }A=new org.antlr.runtime.MismatchedTokenException(C,this.input);this.recover(A);throw A}this.input.consume();this.state.failed=false}}},matchAny:function(){this.input.consume()},matchRange:function(B,A){if(this.input.LA(1)<B||this.input.LA(1)>A){if(this.state.backtracking>0){this.state.failed=true;return }mre=new org.antlr.runtime.MismatchedRangeException(B,A,this.input);this.recover(mre);throw mre}this.input.consume();this.state.failed=false},getLine:function(){return this.input.getLine()},getCharPositionInLine:function(){return this.input.getCharPositionInLine()},getCharIndex:function(){return this.input.index()},getText:function(){if(org.antlr.lang.isString(this.state.text)){return this.state.text}return this.input.substring(this.state.tokenStartCharIndex,this.getCharIndex()-1)},setText:function(A){this.state.text=A},reportError:function(A){this.displayRecognitionError(this.getTokenNames(),A)},getErrorMessage:function(B,A){var C=null;if(B instanceof org.antlr.runtime.MismatchedTokenException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting "+this.getCharErrorDisplay(B.expecting)}else{if(B instanceof org.antlr.runtime.NoViableAltException){C="no viable alternative at character "+this.getCharErrorDisplay(B.c)}else{if(B instanceof org.antlr.runtime.EarlyExitException){C="required (...)+ loop did not match anything at character "+this.getCharErrorDisplay(B.c)}else{if(B instanceof org.antlr.runtime.MismatchedNotSetException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+B.expecting}else{if(B instanceof org.antlr.runtime.MismatchedSetException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+B.expecting}else{if(B instanceof org.antlr.runtime.MismatchedRangeException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+this.getCharErrorDisplay(B.a)+".."+this.getCharErrorDisplay(B.b)}else{C=org.antlr.runtime.Lexer.superclass.getErrorMessage.call(this,B,A)}}}}}}return C},getCharErrorDisplay:function(B){var A=B;switch(A){case org.antlr.runtime.Token.EOF:A="<EOF>";break;case"\n":A="\\n";break;case"\t":A="\\t";break;case"\r":A="\\r";break}return"'"+A+"'"},recover:function(A){this.input.consume()},traceIn:function(C,B){var A=String.fromCharCode(this.input.LT(1))+" line="+this.getLine()+":"+this.getCharPositionInLine();org.antlr.runtime.Lexer.superclass.traceIn.call(this,C,B,A)},traceOut:function(C,B){var A=String.fromCharCode(this.input.LT(1))+" line="+this.getLine()+":"+this.getCharPositionInLine();org.antlr.runtime.Lexer.superclass.traceOut.call(this,C,B,A)}});org.antlr.runtime.ParserRuleReturnScope=function(){};org.antlr.runtime.ParserRuleReturnScope.prototype={getStart:function(){return this.start},getStop:function(){return this.stop}};org.antlr.runtime.tree.TreeRuleReturnScope=function(){};org.antlr.runtime.tree.TreeRuleReturnScope.prototype={getStart:function(){return this.start}};org.antlr.runtime.Parser=function(A,B){org.antlr.runtime.Parser.superclass.constructor.call(this,B);this.setTokenStream(A)};org.antlr.lang.extend(org.antlr.runtime.Parser,org.antlr.runtime.BaseRecognizer,{reset:function(){org.antlr.runtime.Parser.superclass.reset.call(this);if(org.antlr.lang.isValue(this.input)){this.input.seek(0)}},getCurrentInputSymbol:function(A){return A.LT(1)},getMissingSymbol:function(C,G,E,A){var B="<missing "+this.getTokenNames()[E]+">";var D=new org.antlr.runtime.CommonToken(E,B);var F=C.LT(1);var H;if(F.getType()===org.antlr.runtime.Token.EOF){H=F;F=C.LT(-1);if(!F){F=H}}D.line=F.getLine();D.charPositionInLine=F.getCharPositionInLine();D.channel=org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;return D},setTokenStream:function(A){this.input=null;this.reset();this.input=A},getTokenStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},traceIn:function(B,A){org.antlr.runtime.Parser.superclass.traceIn.call(this,B,A,this.input.LT(1))},traceOut:function(B,A){org.antlr.runtime.Parser.superclass.traceOut.call(this,B,A,this.input.LT(1))}});org.antlr.runtime.DFA=function(){};org.antlr.runtime.DFA.prototype={predict:function(C){var F=C.mark(),D=0,B,E,A;try{while(true){B=this.special[D];if(B>=0){D=this.specialStateTransition(B,C);if(D===-1){this.noViableAlt(D,C);return 0}C.consume();continue}if(this.accept[D]>=1){return this.accept[D]}E=C.LA(1);if(E===org.antlr.runtime.Token.EOF){E=-1}else{if(org.antlr.lang.isString(E)){E=E.charCodeAt(0)}}if(E>=this.min[D]&&E<=this.max[D]){A=this.transition[D][E-this.min[D]];if(A<0){if(this.eot[D]>=0){D=this.eot[D];C.consume();continue}this.noViableAlt(D,C);return 0}D=A;C.consume();continue}if(this.eot[D]>=0){D=this.eot[D];C.consume();continue}if(E==org.antlr.runtime.Token.EOF&&this.eof[D]>=0){return this.accept[this.eof[D]]}this.noViableAlt(D,C);return 0}}finally{C.rewind(F)}},noViableAlt:function(C,A){if(this.recognizer.state.backtracking>0){this.recognizer.state.failed=true;return }var B=new org.antlr.runtime.NoViableAltException(this.getDescription(),this.decisionNumber,C,A);this.error(B);throw B},error:function(A){},specialStateTransition:function(B,A){return -1},getDescription:function(){return"n/a"}};org.antlr.lang.augmentObject(org.antlr.runtime.DFA,{unpackEncodedString:function(D){var C,F=[],E=0,G,A,B;for(C=0;C<D.length;C+=2){G=D.charCodeAt(C);A=D.charCodeAt(C+1);if(A===65535){A=-1}for(B=1;B<=G;B++){F[E++]=A}}return F},unpackEncodedStringToUnsignedChars:function(A){return org.antlr.runtime.DFA.unpackEncodedString(A)}});org.antlr.runtime.tree.TreeParser=function(A){org.antlr.runtime.tree.TreeParser.superclass.constructor.call(this,arguments[1]);this.setTreeNodeStream(A)};(function(){var A=org.antlr.runtime.tree.TreeParser;org.antlr.lang.augmentObject(A,{DOWN:org.antlr.runtime.Token.DOWN,UP:org.antlr.runtime.Token.UP});org.antlr.lang.extend(A,org.antlr.runtime.BaseRecognizer,{reset:function(){A.superclass.reset.call(this);if(this.input){this.input.seek(0)}},setTreeNodeStream:function(B){this.input=B},getTreeNodeStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},getCurrentInputSymbol:function(B){return B.LT(1)},getMissingSymbol:function(D,F,E,B){var C="<missing "+this.getTokenNames()[E]+">";return new org.antlr.runtime.tree.CommonTree(new org.antlr.runtime.CommonToken(E,C))},matchAny:function(E){this.state.errorRecovery=false;this.state.failed=false;var B=this.input.LT(1);if(this.input.getTreeAdaptor().getChildCount(B)===0){this.input.consume();return }var D=0,C=this.input.getTreeAdaptor().getType(B);while(C!==org.antlr.runtime.Token.EOF&&!(C===A.UP&&D===0)){this.input.consume();B=this.input.LT(1);C=this.input.getTreeAdaptor().getType(B);if(C===A.DOWN){D++}else{if(C===A.UP){D--}}}this.input.consume()},mismatch:function(C,D,B){throw new org.antlr.runtime.MismatchedTreeNodeException(D,C)},getErrorHeader:function(B){return this.getGrammarFileName()+": node from "+(B.approximateLineInfo?"after ":"")+"line "+B.line+":"+B.charPositionInLine},getErrorMessage:function(C,B){var D;if(this instanceof A){D=C.input.getTreeAdaptor();C.token=D.getToken(C.node);if(!org.antlr.lang.isValue(C.token)){C.token=new org.antlr.runtime.CommonToken(D.getType(C.node),D.getText(C.node))}}return A.superclass.getErrorMessage.call(this,C,B)},traceIn:function(C,B){A.superclass.traceIn.call(this,C,B,this.input.LT(1))},traceOut:function(C,B){A.superclass.traceOut.call(this,C,B,this.input.LT(1))}})})();
// -------- Ham4Parser.js --------
// $ANTLR 3.3 Nov 30, 2010 12:50:56 Ham4Parser.g 2024-06-11 18:08:12
// Parser header: Start
// var Data = this.getCWAEnv().get("Data");
// Logger enhanced when run from HtoG Tool
var Logger = this.getCWAEnv().get("Logger");
var H4PLogger = Logger.get("SiGML");
// Parser header: End
var Ham4Parser = function(input, state) {
if (!state) {
state = new org.antlr.runtime.RecognizerSharedState();
}
(function(){
// Parser members
var errorRec = null;
var errorCount = 0;
var stats = [];
this.reportError = function(ex) {
// Revised error format
var pfx = errorCount == 0 ? "" : "\n";
var tix = this.input.index();
var tok = this.input.getType(tix, 'reportError');
var tokNom = this.input.tokName(tok);
var newErrorRec = { errNum: Logger.errNum('EPERM'), errMsg: 'SiGML parsing error', errDetail: '[' + ex + '] at ' + tix + ' ' + tokNom };
if (errorRec != null) {
newErrorRec.errLink = errorRec;
}
errorRec = newErrorRec;
errorCount++;
if (typeof H4PLogger.debug === "function") {
H4PLogger.debug('ANTLR State on Error: ' + JSON.stringify(stats));
if (typeof H4PLogger.trace === "function") {
logString = 'Parsing Error '+errorCount+':['+JSON.stringify(ex)+'|'+ex+'] at '+tix+' ('+tok+') '+tokNom;
H4PLogger.trace(logString);
}
}
}
this.checkErrors = function() {
if (errorCount == 0)
return { errNum: 0 };
else
return errorRec;
}
// Prefer to use traceIn and traceOut
this.trace = function(str) {
// if (typeof H4PLogger.trace === "function") H4PLogger.trace(str);
};
// Override : Default has more detail on parser state : See antlr3-all-fix.js
this.traceIn = function(rul,num) {
if (typeof H4PLogger.trace === "function") {
H4PLogger.trace('ANTLR TraceIn: ' + rul + ' (' + this.state.backtracking + ')');
// H4PLogger.trace('ANTLR State: ' + JSON.stringify(stats));
}
}
this.traceOut = function(rul,num) {
var tracing = (typeof H4PLogger.trace === "function");
var tix = this.input.index();
if (tracing) {
H4PLogger.trace('ANTLR TraceOut: '+rul+' ('+this.state.backtracking+') OK='+!this.state.failed+' at '+tix);
}
if (this.state.failed) {
// Clear later entries on failure: Not sure this ever applies
while (stats.length > this.state.backtracking+1) {
stats.pop();
}
// if (tracing) {
//     H4PLogger.trace('ANTLR State on Failure: ' + JSON.stringify(stats) + ' at ' + tix);
// }
} else {
while (this.state.backtracking >= stats.length) {
stats.push(0);
}
// if (tracing && (stats[this.state.backtracking] < tix)) {
//     H4PLogger.trace('ANTLR State Before Update: ' + JSON.stringify(stats) + ' at ' + tix);
// }
// Update if increased and clear later entries
if (stats[this.state.backtracking] < tix) {
while (stats.length > this.state.backtracking+1) {
stats.pop();
}
stats[this.state.backtracking] = tix;
if (tracing) {
H4PLogger.trace('ANTLR State Updated: ' + JSON.stringify(stats));
}
}
}
}
// //########  BEGIN GENERATED CODE  ########
}).call(this);
Ham4Parser.superclass.constructor.call(this, input, state);
this.dfa13 = new Ham4Parser.DFA13(this);
this.dfa14 = new Ham4Parser.DFA14(this);
this.dfa16 = new Ham4Parser.DFA16(this);
this.dfa15 = new Ham4Parser.DFA15(this);
this.dfa18 = new Ham4Parser.DFA18(this);
this.dfa21 = new Ham4Parser.DFA21(this);
this.dfa25 = new Ham4Parser.DFA25(this);
this.dfa23 = new Ham4Parser.DFA23(this);
this.dfa26 = new Ham4Parser.DFA26(this);
this.dfa33 = new Ham4Parser.DFA33(this);
this.dfa34 = new Ham4Parser.DFA34(this);
this.dfa35 = new Ham4Parser.DFA35(this);
this.dfa36 = new Ham4Parser.DFA36(this);
this.dfa49 = new Ham4Parser.DFA49(this);
this.dfa54 = new Ham4Parser.DFA54(this);
this.dfa56 = new Ham4Parser.DFA56(this);
this.dfa57 = new Ham4Parser.DFA57(this);
this.dfa58 = new Ham4Parser.DFA58(this);
this.dfa59 = new Ham4Parser.DFA59(this);
this.dfa60 = new Ham4Parser.DFA60(this);
this.dfa61 = new Ham4Parser.DFA61(this);
this.dfa92 = new Ham4Parser.DFA92(this);
this.dfa93 = new Ham4Parser.DFA93(this);
this.dfa95 = new Ham4Parser.DFA95(this);
this.dfa98 = new Ham4Parser.DFA98(this);
this.dfa97 = new Ham4Parser.DFA97(this);
this.dfa96 = new Ham4Parser.DFA96(this);
this.dfa102 = new Ham4Parser.DFA102(this);
this.dfa103 = new Ham4Parser.DFA103(this);
this.dfa104 = new Ham4Parser.DFA104(this);
this.dfa105 = new Ham4Parser.DFA105(this);
this.dfa106 = new Ham4Parser.DFA106(this);
this.dfa107 = new Ham4Parser.DFA107(this);
this.dfa108 = new Ham4Parser.DFA108(this);
this.dfa111 = new Ham4Parser.DFA111(this);
this.dfa109 = new Ham4Parser.DFA109(this);
this.dfa110 = new Ham4Parser.DFA110(this);
this.dfa112 = new Ham4Parser.DFA112(this);
this.dfa113 = new Ham4Parser.DFA113(this);
this.dfa114 = new Ham4Parser.DFA114(this);
this.dfa115 = new Ham4Parser.DFA115(this);
this.dfa116 = new Ham4Parser.DFA116(this);
this.dfa127 = new Ham4Parser.DFA127(this);
this.dfa128 = new Ham4Parser.DFA128(this);
this.dfa129 = new Ham4Parser.DFA129(this);
this.dfa130 = new Ham4Parser.DFA130(this);
this.dfa131 = new Ham4Parser.DFA131(this);
this.dfa132 = new Ham4Parser.DFA132(this);
this.dfa133 = new Ham4Parser.DFA133(this);
this.dfa134 = new Ham4Parser.DFA134(this);
this.dfa136 = new Ham4Parser.DFA136(this);
this.dfa137 = new Ham4Parser.DFA137(this);
this.dfa157 = new Ham4Parser.DFA157(this);
this.dfa171 = new Ham4Parser.DFA171(this);
this.dfa173 = new Ham4Parser.DFA173(this);
this.dfa180 = new Ham4Parser.DFA180(this);
this.dfa181 = new Ham4Parser.DFA181(this);
this.dfa182 = new Ham4Parser.DFA182(this);
/* @todo only create adaptor if output=AST */
this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();
};
org.antlr.lang.augmentObject(Ham4Parser, {
EOF: -1,
WS: 4,
HamTab: 5,
HamLinefeed: 6,
HamPagebreak: 7,
HamReturn: 8,
HamVersion40: 9,
HamSpace: 10,
HamExclaim: 11,
HamQuery: 12,
HamFullstop: 13,
HamComma: 14,
HamPlus: 15,
HamMetaalt: 16,
HamClocku: 17,
HamClockul: 18,
HamClockl: 19,
HamClockdl: 20,
HamClockd: 21,
HamClockdr: 22,
HamClockr: 23,
HamClockur: 24,
HamClockfull: 25,
HamSymmpar: 26,
HamSymmlr: 27,
HamFist: 28,
HamFlathand: 29,
HamFinger2: 30,
HamFinger23: 31,
HamFinger23spread: 32,
HamFinger2345: 33,
HamThumboutmod: 34,
HamThumbacrossmod: 35,
HamPinch12: 36,
HamPinchall: 37,
HamPinch12open: 38,
HamCee12: 39,
HamCeeall: 40,
HamCee12open: 41,
HamThumbopenmod: 42,
HamFingerstraightmod: 43,
HamFingerbendmod: 44,
HamFingerhookedmod: 45,
HamNondominant: 46,
HamDoublebent: 47,
HamDoublehooked: 48,
HamExtfingeru: 49,
HamExtfingerur: 50,
HamExtfingerr: 51,
HamExtfingerdr: 52,
HamExtfingerd: 53,
HamExtfingerdl: 54,
HamExtfingerl: 55,
HamExtfingerul: 56,
HamExtfingerol: 57,
HamExtfingero: 58,
HamExtfingeror: 59,
HamExtfingeril: 60,
HamExtfingeri: 61,
HamExtfingerir: 62,
HamExtfingerui: 63,
HamExtfingerdi: 64,
HamExtfingerdo: 65,
HamExtfingeruo: 66,
HamEarlobe: 67,
HamNostrils: 68,
HamShouldertop: 69,
HamPalmu: 70,
HamPalmur: 71,
HamPalmr: 72,
HamPalmdr: 73,
HamPalmd: 74,
HamPalmdl: 75,
HamPalml: 76,
HamPalmul: 77,
HamReplace: 78,
HamArmextended: 79,
HamBehind: 80,
HamEtc: 81,
HamOrirelative: 82,
HamTongue: 83,
HamTeeth: 84,
HamStomach: 85,
HamNeutralspace: 86,
HamHead: 87,
HamHeadtop: 88,
HamForehead: 89,
HamEyebrows: 90,
HamEyes: 91,
HamNose: 92,
HamEar: 93,
HamCheek: 94,
HamLips: 95,
HamChin: 96,
HamUnderchin: 97,
HamNeck: 98,
HamShoulders: 99,
HamChest: 100,
HamBelowstomach: 101,
HamLrbeside: 102,
HamLrat: 103,
HamUpperarm: 104,
HamElbow: 105,
HamElbowinside: 106,
HamLowerarm: 107,
HamWristback: 108,
HamWristpulse: 109,
HamThumbball: 110,
HamPalm: 111,
HamHandback: 112,
HamThumb: 113,
HamIndexfinger: 114,
HamMiddlefinger: 115,
HamRingfinger: 116,
HamPinky: 117,
HamThumbside: 118,
HamPinkyside: 119,
HamBetween: 120,
HamFingertip: 121,
HamFingernail: 122,
HamFingerpad: 123,
HamFingermidjoint: 124,
HamFingerbase: 125,
HamFingerside: 126,
HamWristtopulse: 127,
HamWristtoback: 128,
HamWristtothumb: 129,
HamWristtopinky: 130,
HamCoreftag: 131,
HamCorefref: 132,
HamNomotion: 133,
HamMoveu: 134,
HamMoveur: 135,
HamMover: 136,
HamMovedr: 137,
HamMoved: 138,
HamMovedl: 139,
HamMovel: 140,
HamMoveul: 141,
HamMoveol: 142,
HamMoveo: 143,
HamMoveor: 144,
HamMoveil: 145,
HamMovei: 146,
HamMoveir: 147,
HamMoveui: 148,
HamMovedi: 149,
HamMovedo: 150,
HamMoveuo: 151,
HamMovecross: 152,
HamMovex: 153,
HamSmallmod: 154,
HamLargemod: 155,
HamArcl: 156,
HamArcu: 157,
HamArcr: 158,
HamArcd: 159,
HamWavy: 160,
HamZigzag: 161,
HamFingerplay: 162,
HamParbegin: 163,
HamParend: 164,
HamCircleo: 165,
HamCirclei: 166,
HamCircled: 167,
HamCircleu: 168,
HamCirclel: 169,
HamCircler: 170,
HamIncreasing: 171,
HamDecreasing: 172,
HamClose: 173,
HamTouch: 174,
HamInterlock: 175,
HamCross: 176,
HamFast: 177,
HamSlow: 178,
HamTense: 179,
HamRest: 180,
HamHalt: 181,
HamRepeatfromstart: 182,
HamRepeatfromstartseveral: 183,
HamRepeatcontinue: 184,
HamRepeatcontinueseveral: 185,
HamSeqbegin: 186,
HamSeqend: 187,
HamAlternatingmotion: 188,
HamRepeatreverse: 189,
HamBrushing: 190,
HamNonipsi: 191,
HamEllipseh: 192,
HamEllipseur: 193,
HamEllipsev: 194,
HamEllipseul: 195,
HamMime: 196,
HamAltbegin: 197,
HamAltend: 198,
HamNodding: 199,
HamSwinging: 200,
HamTwisting: 201,
HamStircw: 202,
HamStirccw: 203,
HamFusionbegin: 204,
HamFusionend: 205,
HamCircleul: 206,
HamCircledr: 207,
HamCircleur: 208,
HamCircledl: 209,
HamCircleol: 210,
HamCircleir: 211,
HamCircleor: 212,
HamCircleil: 213,
HamCircledo: 214,
HamCircleui: 215,
HamCircledi: 216,
HamCircleuo: 217,
HamNbs: 218,
HAMSIGNS: 219,
SIGN2: 220,
SIGN1: 221,
ICFG2: 222,
ICFG1: 223,
NMICLIST: 224,
NMICUNIT: 225,
MICFG2: 226,
MICFG1: 227,
HDCONFIG2: 228,
HDCONFIG1: 229,
SPLITHDCFG2: 230,
HDCFGTAIL2: 231,
HSHAPE2: 232,
HSHAPE1: 233,
BASICHDSHP1: 234,
BASICHDSHP: 235,
HSCLASS: 236,
FIBENDING: 237,
THUMBPOS: 238,
FINGERLIST: 239,
FISHPLIST: 240,
FICRSSLIST: 241,
FSHAPE: 242,
FCROSSING: 243,
THSPECIAL: 244,
EXTFIDIR2: 245,
EXTFIDIR1: 246,
EXTFIDIR: 247,
PALMOR2: 248,
PALMOR1: 249,
LOC2: 250,
LOC1: 251,
LOCTNBODYARM: 252,
LOCTNBODY: 253,
LOCTNHAND: 254,
LOCTNARM: 255,
LEVBODY: 256,
LEVHAND: 257,
LEVARM: 258,
HCONSTLLN: 259,
CNTCTBODY: 260,
CNTCTHAND: 261,
CNTCTOFHAND: 262,
A2TLIST: 263,
A1TLIST: 264,
A1LIST: 265,
ACTION2T: 266,
ACTION1T: 267,
ACTION2: 268,
ACTION1: 269,
PARACT2T: 270,
SEQACT2T: 271,
SPLITACT2LOC2: 272,
SPLITACT2T: 273,
PARACT1T: 274,
SEQACT1T: 275,
NMACT1T: 276,
PARACT1: 277,
REPETITIONS: 278,
SIMPLEMVMT: 279,
STRGHTMVMT: 280,
CRCLRMVMT: 281,
REPLACE: 282,
SPLITREPLACETL: 283,
REPLACETAIL1: 284,
HSFINGERITEM: 285,
LOCBODY: 286,
MOVINGREPETITION: 287,
SEQACT1: 288,
SEQFUSEDACT2T: 289,
SEQFUSEDACT1T: 290,
SEQFUSEDACT1: 291,
CNTCTOHHAND: 292,
CNTCTOHARM: 293
});
(function(){
// public class variables
var EOF= -1,
WS= 4,
HamTab= 5,
HamLinefeed= 6,
HamPagebreak= 7,
HamReturn= 8,
HamVersion40= 9,
HamSpace= 10,
HamExclaim= 11,
HamQuery= 12,
HamFullstop= 13,
HamComma= 14,
HamPlus= 15,
HamMetaalt= 16,
HamClocku= 17,
HamClockul= 18,
HamClockl= 19,
HamClockdl= 20,
HamClockd= 21,
HamClockdr= 22,
HamClockr= 23,
HamClockur= 24,
HamClockfull= 25,
HamSymmpar= 26,
HamSymmlr= 27,
HamFist= 28,
HamFlathand= 29,
HamFinger2= 30,
HamFinger23= 31,
HamFinger23spread= 32,
HamFinger2345= 33,
HamThumboutmod= 34,
HamThumbacrossmod= 35,
HamPinch12= 36,
HamPinchall= 37,
HamPinch12open= 38,
HamCee12= 39,
HamCeeall= 40,
HamCee12open= 41,
HamThumbopenmod= 42,
HamFingerstraightmod= 43,
HamFingerbendmod= 44,
HamFingerhookedmod= 45,
HamNondominant= 46,
HamDoublebent= 47,
HamDoublehooked= 48,
HamExtfingeru= 49,
HamExtfingerur= 50,
HamExtfingerr= 51,
HamExtfingerdr= 52,
HamExtfingerd= 53,
HamExtfingerdl= 54,
HamExtfingerl= 55,
HamExtfingerul= 56,
HamExtfingerol= 57,
HamExtfingero= 58,
HamExtfingeror= 59,
HamExtfingeril= 60,
HamExtfingeri= 61,
HamExtfingerir= 62,
HamExtfingerui= 63,
HamExtfingerdi= 64,
HamExtfingerdo= 65,
HamExtfingeruo= 66,
HamEarlobe= 67,
HamNostrils= 68,
HamShouldertop= 69,
HamPalmu= 70,
HamPalmur= 71,
HamPalmr= 72,
HamPalmdr= 73,
HamPalmd= 74,
HamPalmdl= 75,
HamPalml= 76,
HamPalmul= 77,
HamReplace= 78,
HamArmextended= 79,
HamBehind= 80,
HamEtc= 81,
HamOrirelative= 82,
HamTongue= 83,
HamTeeth= 84,
HamStomach= 85,
HamNeutralspace= 86,
HamHead= 87,
HamHeadtop= 88,
HamForehead= 89,
HamEyebrows= 90,
HamEyes= 91,
HamNose= 92,
HamEar= 93,
HamCheek= 94,
HamLips= 95,
HamChin= 96,
HamUnderchin= 97,
HamNeck= 98,
HamShoulders= 99,
HamChest= 100,
HamBelowstomach= 101,
HamLrbeside= 102,
HamLrat= 103,
HamUpperarm= 104,
HamElbow= 105,
HamElbowinside= 106,
HamLowerarm= 107,
HamWristback= 108,
HamWristpulse= 109,
HamThumbball= 110,
HamPalm= 111,
HamHandback= 112,
HamThumb= 113,
HamIndexfinger= 114,
HamMiddlefinger= 115,
HamRingfinger= 116,
HamPinky= 117,
HamThumbside= 118,
HamPinkyside= 119,
HamBetween= 120,
HamFingertip= 121,
HamFingernail= 122,
HamFingerpad= 123,
HamFingermidjoint= 124,
HamFingerbase= 125,
HamFingerside= 126,
HamWristtopulse= 127,
HamWristtoback= 128,
HamWristtothumb= 129,
HamWristtopinky= 130,
HamCoreftag= 131,
HamCorefref= 132,
HamNomotion= 133,
HamMoveu= 134,
HamMoveur= 135,
HamMover= 136,
HamMovedr= 137,
HamMoved= 138,
HamMovedl= 139,
HamMovel= 140,
HamMoveul= 141,
HamMoveol= 142,
HamMoveo= 143,
HamMoveor= 144,
HamMoveil= 145,
HamMovei= 146,
HamMoveir= 147,
HamMoveui= 148,
HamMovedi= 149,
HamMovedo= 150,
HamMoveuo= 151,
HamMovecross= 152,
HamMovex= 153,
HamSmallmod= 154,
HamLargemod= 155,
HamArcl= 156,
HamArcu= 157,
HamArcr= 158,
HamArcd= 159,
HamWavy= 160,
HamZigzag= 161,
HamFingerplay= 162,
HamParbegin= 163,
HamParend= 164,
HamCircleo= 165,
HamCirclei= 166,
HamCircled= 167,
HamCircleu= 168,
HamCirclel= 169,
HamCircler= 170,
HamIncreasing= 171,
HamDecreasing= 172,
HamClose= 173,
HamTouch= 174,
HamInterlock= 175,
HamCross= 176,
HamFast= 177,
HamSlow= 178,
HamTense= 179,
HamRest= 180,
HamHalt= 181,
HamRepeatfromstart= 182,
HamRepeatfromstartseveral= 183,
HamRepeatcontinue= 184,
HamRepeatcontinueseveral= 185,
HamSeqbegin= 186,
HamSeqend= 187,
HamAlternatingmotion= 188,
HamRepeatreverse= 189,
HamBrushing= 190,
HamNonipsi= 191,
HamEllipseh= 192,
HamEllipseur= 193,
HamEllipsev= 194,
HamEllipseul= 195,
HamMime= 196,
HamAltbegin= 197,
HamAltend= 198,
HamNodding= 199,
HamSwinging= 200,
HamTwisting= 201,
HamStircw= 202,
HamStirccw= 203,
HamFusionbegin= 204,
HamFusionend= 205,
HamCircleul= 206,
HamCircledr= 207,
HamCircleur= 208,
HamCircledl= 209,
HamCircleol= 210,
HamCircleir= 211,
HamCircleor= 212,
HamCircleil= 213,
HamCircledo= 214,
HamCircleui= 215,
HamCircledi= 216,
HamCircleuo= 217,
HamNbs= 218,
HAMSIGNS= 219,
SIGN2= 220,
SIGN1= 221,
ICFG2= 222,
ICFG1= 223,
NMICLIST= 224,
NMICUNIT= 225,
MICFG2= 226,
MICFG1= 227,
HDCONFIG2= 228,
HDCONFIG1= 229,
SPLITHDCFG2= 230,
HDCFGTAIL2= 231,
HSHAPE2= 232,
HSHAPE1= 233,
BASICHDSHP1= 234,
BASICHDSHP= 235,
HSCLASS= 236,
FIBENDING= 237,
THUMBPOS= 238,
FINGERLIST= 239,
FISHPLIST= 240,
FICRSSLIST= 241,
FSHAPE= 242,
FCROSSING= 243,
THSPECIAL= 244,
EXTFIDIR2= 245,
EXTFIDIR1= 246,
EXTFIDIR= 247,
PALMOR2= 248,
PALMOR1= 249,
LOC2= 250,
LOC1= 251,
LOCTNBODYARM= 252,
LOCTNBODY= 253,
LOCTNHAND= 254,
LOCTNARM= 255,
LEVBODY= 256,
LEVHAND= 257,
LEVARM= 258,
HCONSTLLN= 259,
CNTCTBODY= 260,
CNTCTHAND= 261,
CNTCTOFHAND= 262,
A2TLIST= 263,
A1TLIST= 264,
A1LIST= 265,
ACTION2T= 266,
ACTION1T= 267,
ACTION2= 268,
ACTION1= 269,
PARACT2T= 270,
SEQACT2T= 271,
SPLITACT2LOC2= 272,
SPLITACT2T= 273,
PARACT1T= 274,
SEQACT1T= 275,
NMACT1T= 276,
PARACT1= 277,
REPETITIONS= 278,
SIMPLEMVMT= 279,
STRGHTMVMT= 280,
CRCLRMVMT= 281,
REPLACE= 282,
SPLITREPLACETL= 283,
REPLACETAIL1= 284,
HSFINGERITEM= 285,
LOCBODY= 286,
MOVINGREPETITION= 287,
SEQACT1= 288,
SEQFUSEDACT2T= 289,
SEQFUSEDACT1T= 290,
SEQFUSEDACT1= 291,
CNTCTOHHAND= 292,
CNTCTOHARM= 293;
// public instance methods/vars
org.antlr.lang.extend(Ham4Parser, org.antlr.runtime.Parser, {
setTreeAdaptor: function(adaptor) {
this.adaptor = adaptor;
},
getTreeAdaptor: function() {
return this.adaptor;
},
getTokenNames: function() { return Ham4Parser.tokenNames; },
getGrammarFileName: function() { return "Ham4Parser.g"; }
});
org.antlr.lang.augmentObject(Ham4Parser.prototype, {
// inline static return class
hamsinglesign_return: (function() {
Ham4Parser.hamsinglesign_return = function(){};
org.antlr.lang.extend(Ham4Parser.hamsinglesign_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:205:1: hamsinglesign : hamsignseq EOF -> ^( HAMSIGNS ( hamsignseq )? ) ;
// $ANTLR start "hamsinglesign"
hamsinglesign: function() {
this.traceIn("hamsinglesign", 1);
var retval = new Ham4Parser.hamsinglesign_return();
retval.start = this.input.LT(1);
var root_0 = null;
var EOF2 = null;
var hamsignseq1 = null;
var EOF2_tree=null;
var stream_EOF=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EOF");
var stream_hamsignseq=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule hamsignseq");
this.trace("ANTLR Parse: hamsinglesign starts "+this.state.backtracking);
try {
// Ham4Parser.g:222:5: ( hamsignseq EOF -> ^( HAMSIGNS ( hamsignseq )? ) )
// Ham4Parser.g:222:9: hamsignseq EOF
this.pushFollow(Ham4Parser.FOLLOW_hamsignseq_in_hamsinglesign747);
hamsignseq1=this.hamsignseq();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_hamsignseq.add(hamsignseq1.getTree());
EOF2=this.match(this.input,EOF,Ham4Parser.FOLLOW_EOF_in_hamsinglesign757); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_EOF.add(EOF2);
// AST REWRITE
// elements: hamsignseq
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 225:5: -> ^( HAMSIGNS ( hamsignseq )? )
{
// Ham4Parser.g:225:8: ^( HAMSIGNS ( hamsignseq )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HAMSIGNS, "HAMSIGNS"), root_1);
// Ham4Parser.g:225:19: ( hamsignseq )?
if ( stream_hamsignseq.hasNext() ) {
this.adaptor.addChild(root_1, stream_hamsignseq.nextTree());
}
stream_hamsignseq.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: hamsinglesign finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("hamsinglesign", 1);
}
return retval;
},
// inline static return class
hamsignseq_return: (function() {
Ham4Parser.hamsignseq_return = function(){};
org.antlr.lang.extend(Ham4Parser.hamsignseq_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:231:1: hamsignseq : ( sign2or1 ( HamPlus sign2or1 )* )? ;
// $ANTLR start "hamsignseq"
hamsignseq: function() {
this.traceIn("hamsignseq", 2);
var retval = new Ham4Parser.hamsignseq_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamPlus4 = null;
var sign2or13 = null;
var sign2or15 = null;
var HamPlus4_tree=null;
this.trace("ANTLR Parse: hamsignseq starts "+this.state.backtracking);
try {
// Ham4Parser.g:252:5: ( ( sign2or1 ( HamPlus sign2or1 )* )? )
// Ham4Parser.g:253:9: ( sign2or1 ( HamPlus sign2or1 )* )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:253:9: ( sign2or1 ( HamPlus sign2or1 )* )?
var alt2=2;
var LA2_0 = this.input.LA(1);
if ( ((LA2_0>=HamSymmpar && LA2_0<=HamFinger2345)||(LA2_0>=HamPinch12 && LA2_0<=HamCee12open)||LA2_0==HamNondominant||LA2_0==HamNomotion||LA2_0==HamParbegin||LA2_0==HamSeqbegin) ) {
alt2=1;
}
switch (alt2) {
case 1 :
// Ham4Parser.g:254:13: sign2or1 ( HamPlus sign2or1 )*
this.pushFollow(Ham4Parser.FOLLOW_sign2or1_in_hamsignseq831);
sign2or13=this.sign2or1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, sign2or13.getTree());
// Ham4Parser.g:255:13: ( HamPlus sign2or1 )*
loop1:
do {
var alt1=2;
var LA1_0 = this.input.LA(1);
if ( (LA1_0==HamPlus) ) {
alt1=1;
}
switch (alt1) {
case 1 :
// Ham4Parser.g:256:17: HamPlus sign2or1
HamPlus4=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_hamsignseq863); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_sign2or1_in_hamsignseq883);
sign2or15=this.sign2or1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, sign2or15.getTree());
break;
default :
break loop1;
}
} while (true);
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: hamsignseq finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("hamsignseq", 2);
}
return retval;
},
// inline static return class
sign2or1_return: (function() {
Ham4Parser.sign2or1_return = function(){};
org.antlr.lang.extend(Ham4Parser.sign2or1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:262:1: sign2or1 : ( ( HamNondominant initialconfig1 )=> nondomsign1 | sign2 );
// $ANTLR start "sign2or1"
sign2or1: function() {
this.traceIn("sign2or1", 3);
var retval = new Ham4Parser.sign2or1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var nondomsign16 = null;
var sign27 = null;
this.trace("ANTLR Parse: sign2or1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:281:5: ( ( HamNondominant initialconfig1 )=> nondomsign1 | sign2 )
var alt3=2;
var LA3_0 = this.input.LA(1);
if ( (LA3_0==HamNondominant) ) {
var LA3_1 = this.input.LA(2);
if ( (this.synpred1_Ham4Parser()) ) {
alt3=1;
}
else if ( (true) ) {
alt3=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 3, 1, this.input);
throw nvae;
}
}
else if ( ((LA3_0>=HamSymmpar && LA3_0<=HamFinger2345)||(LA3_0>=HamPinch12 && LA3_0<=HamCee12open)||LA3_0==HamNomotion||LA3_0==HamParbegin||LA3_0==HamSeqbegin) ) {
alt3=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 3, 0, this.input);
throw nvae;
}
switch (alt3) {
case 1 :
// Ham4Parser.g:282:9: ( HamNondominant initialconfig1 )=> nondomsign1
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_nondomsign1_in_sign2or1970);
nondomsign16=this.nondomsign1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, nondomsign16.getTree());
break;
case 2 :
// Ham4Parser.g:286:9: sign2
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_sign2_in_sign2or1986);
sign27=this.sign2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, sign27.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: sign2or1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("sign2or1", 3);
}
return retval;
},
// inline static return class
sign2_return: (function() {
Ham4Parser.sign2_return = function(){};
org.antlr.lang.extend(Ham4Parser.sign2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:289:1: sign2 : ( symmoperator initialconfig2 a2tstar -> ^( SIGN2 symmoperator initialconfig2 a2tstar ) | initialconfig2 a1tstar -> ^( SIGN2 initialconfig2 a1tstar ) | ( HamNomotion HamNondominant initialconfig1 )=> HamNomotion HamNondominant initialconfig1 a1tstar -> ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar ) | HamNomotion initialconfig1 a1tstar -> ^( SIGN2 HamNomotion initialconfig1 a1tstar ) ) ;
// $ANTLR start "sign2"
sign2: function() {
this.traceIn("sign2", 4);
var retval = new Ham4Parser.sign2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNomotion13 = null;
var HamNondominant14 = null;
var HamNomotion17 = null;
var symmoperator8 = null;
var initialconfig29 = null;
var a2tstar10 = null;
var initialconfig211 = null;
var a1tstar12 = null;
var initialconfig115 = null;
var a1tstar16 = null;
var initialconfig118 = null;
var a1tstar19 = null;
var HamNomotion13_tree=null;
var HamNondominant14_tree=null;
var HamNomotion17_tree=null;
var stream_HamNomotion=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNomotion");
var stream_HamNondominant=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNondominant");
var stream_symmoperator=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule symmoperator");
var stream_a2tstar=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule a2tstar");
var stream_initialconfig2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule initialconfig2");
var stream_a1tstar=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule a1tstar");
var stream_initialconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule initialconfig1");
this.trace("ANTLR Parse: sign2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:333:5: ( ( symmoperator initialconfig2 a2tstar -> ^( SIGN2 symmoperator initialconfig2 a2tstar ) | initialconfig2 a1tstar -> ^( SIGN2 initialconfig2 a1tstar ) | ( HamNomotion HamNondominant initialconfig1 )=> HamNomotion HamNondominant initialconfig1 a1tstar -> ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar ) | HamNomotion initialconfig1 a1tstar -> ^( SIGN2 HamNomotion initialconfig1 a1tstar ) ) )
// Ham4Parser.g:334:5: ( symmoperator initialconfig2 a2tstar -> ^( SIGN2 symmoperator initialconfig2 a2tstar ) | initialconfig2 a1tstar -> ^( SIGN2 initialconfig2 a1tstar ) | ( HamNomotion HamNondominant initialconfig1 )=> HamNomotion HamNondominant initialconfig1 a1tstar -> ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar ) | HamNomotion initialconfig1 a1tstar -> ^( SIGN2 HamNomotion initialconfig1 a1tstar ) )
// Ham4Parser.g:334:5: ( symmoperator initialconfig2 a2tstar -> ^( SIGN2 symmoperator initialconfig2 a2tstar ) | initialconfig2 a1tstar -> ^( SIGN2 initialconfig2 a1tstar ) | ( HamNomotion HamNondominant initialconfig1 )=> HamNomotion HamNondominant initialconfig1 a1tstar -> ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar ) | HamNomotion initialconfig1 a1tstar -> ^( SIGN2 HamNomotion initialconfig1 a1tstar ) )
var alt4=4;
switch ( this.input.LA(1) ) {
case HamSymmpar:
case HamSymmlr:
alt4=1;
break;
case HamFist:
case HamFlathand:
case HamFinger2:
case HamFinger23:
case HamFinger23spread:
case HamFinger2345:
case HamPinch12:
case HamPinchall:
case HamPinch12open:
case HamCee12:
case HamCeeall:
case HamCee12open:
case HamNondominant:
case HamParbegin:
case HamSeqbegin:
alt4=2;
break;
case HamNomotion:
var LA4_6 = this.input.LA(2);
if ( (this.synpred2_Ham4Parser()) ) {
alt4=3;
}
else if ( (true) ) {
alt4=4;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 4, 6, this.input);
throw nvae;
}
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 4, 0, this.input);
throw nvae;
}
switch (alt4) {
case 1 :
// Ham4Parser.g:335:9: symmoperator initialconfig2 a2tstar
this.pushFollow(Ham4Parser.FOLLOW_symmoperator_in_sign21027);
symmoperator8=this.symmoperator();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_symmoperator.add(symmoperator8.getTree());
this.pushFollow(Ham4Parser.FOLLOW_initialconfig2_in_sign21037);
initialconfig29=this.initialconfig2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_initialconfig2.add(initialconfig29.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a2tstar_in_sign21047);
a2tstar10=this.a2tstar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a2tstar.add(a2tstar10.getTree());
// AST REWRITE
// elements: a2tstar, symmoperator, initialconfig2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 338:9: -> ^( SIGN2 symmoperator initialconfig2 a2tstar )
{
// Ham4Parser.g:338:12: ^( SIGN2 symmoperator initialconfig2 a2tstar )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIGN2, "SIGN2"), root_1);
this.adaptor.addChild(root_1, stream_symmoperator.nextTree());
this.adaptor.addChild(root_1, stream_initialconfig2.nextTree());
this.adaptor.addChild(root_1, stream_a2tstar.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:340:9: initialconfig2 a1tstar
this.pushFollow(Ham4Parser.FOLLOW_initialconfig2_in_sign21083);
initialconfig211=this.initialconfig2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_initialconfig2.add(initialconfig211.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a1tstar_in_sign21093);
a1tstar12=this.a1tstar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a1tstar.add(a1tstar12.getTree());
// AST REWRITE
// elements: a1tstar, initialconfig2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 342:9: -> ^( SIGN2 initialconfig2 a1tstar )
{
// Ham4Parser.g:342:12: ^( SIGN2 initialconfig2 a1tstar )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIGN2, "SIGN2"), root_1);
this.adaptor.addChild(root_1, stream_initialconfig2.nextTree());
this.adaptor.addChild(root_1, stream_a1tstar.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:351:9: ( HamNomotion HamNondominant initialconfig1 )=> HamNomotion HamNondominant initialconfig1 a1tstar
HamNomotion13=this.match(this.input,HamNomotion,Ham4Parser.FOLLOW_HamNomotion_in_sign21162); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNomotion.add(HamNomotion13);
HamNondominant14=this.match(this.input,HamNondominant,Ham4Parser.FOLLOW_HamNondominant_in_sign21172); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNondominant.add(HamNondominant14);
this.pushFollow(Ham4Parser.FOLLOW_initialconfig1_in_sign21182);
initialconfig115=this.initialconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_initialconfig1.add(initialconfig115.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a1tstar_in_sign21192);
a1tstar16=this.a1tstar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a1tstar.add(a1tstar16.getTree());
// AST REWRITE
// elements: a1tstar, HamNomotion, initialconfig1, HamNondominant
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 357:9: -> ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar )
{
// Ham4Parser.g:357:12: ^( SIGN2 HamNomotion HamNondominant initialconfig1 a1tstar )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIGN2, "SIGN2"), root_1);
this.adaptor.addChild(root_1, stream_HamNomotion.nextNode());
this.adaptor.addChild(root_1, stream_HamNondominant.nextNode());
this.adaptor.addChild(root_1, stream_initialconfig1.nextTree());
this.adaptor.addChild(root_1, stream_a1tstar.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 4 :
// Ham4Parser.g:359:9: HamNomotion initialconfig1 a1tstar
HamNomotion17=this.match(this.input,HamNomotion,Ham4Parser.FOLLOW_HamNomotion_in_sign21230); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNomotion.add(HamNomotion17);
this.pushFollow(Ham4Parser.FOLLOW_initialconfig1_in_sign21240);
initialconfig118=this.initialconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_initialconfig1.add(initialconfig118.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a1tstar_in_sign21250);
a1tstar19=this.a1tstar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a1tstar.add(a1tstar19.getTree());
// AST REWRITE
// elements: HamNomotion, initialconfig1, a1tstar
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 362:9: -> ^( SIGN2 HamNomotion initialconfig1 a1tstar )
{
// Ham4Parser.g:362:12: ^( SIGN2 HamNomotion initialconfig1 a1tstar )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIGN2, "SIGN2"), root_1);
this.adaptor.addChild(root_1, stream_HamNomotion.nextNode());
this.adaptor.addChild(root_1, stream_initialconfig1.nextTree());
this.adaptor.addChild(root_1, stream_a1tstar.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: sign2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("sign2", 4);
}
return retval;
},
// inline static return class
nondomsign1_return: (function() {
Ham4Parser.nondomsign1_return = function(){};
org.antlr.lang.extend(Ham4Parser.nondomsign1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:366:1: nondomsign1 : HamNondominant initialconfig1 a1tstar -> ^( SIGN1 HamNondominant initialconfig1 a1tstar ) ;
// $ANTLR start "nondomsign1"
nondomsign1: function() {
this.traceIn("nondomsign1", 5);
var retval = new Ham4Parser.nondomsign1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNondominant20 = null;
var initialconfig121 = null;
var a1tstar22 = null;
var HamNondominant20_tree=null;
var stream_HamNondominant=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNondominant");
var stream_initialconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule initialconfig1");
var stream_a1tstar=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule a1tstar");
this.trace("ANTLR Parse: nondomsign1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:384:5: ( HamNondominant initialconfig1 a1tstar -> ^( SIGN1 HamNondominant initialconfig1 a1tstar ) )
// Ham4Parser.g:384:9: HamNondominant initialconfig1 a1tstar
HamNondominant20=this.match(this.input,HamNondominant,Ham4Parser.FOLLOW_HamNondominant_in_nondomsign11305); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNondominant.add(HamNondominant20);
this.pushFollow(Ham4Parser.FOLLOW_initialconfig1_in_nondomsign11315);
initialconfig121=this.initialconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_initialconfig1.add(initialconfig121.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a1tstar_in_nondomsign11325);
a1tstar22=this.a1tstar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a1tstar.add(a1tstar22.getTree());
// AST REWRITE
// elements: initialconfig1, HamNondominant, a1tstar
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 388:9: -> ^( SIGN1 HamNondominant initialconfig1 a1tstar )
{
// Ham4Parser.g:388:12: ^( SIGN1 HamNondominant initialconfig1 a1tstar )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIGN1, "SIGN1"), root_1);
this.adaptor.addChild(root_1, stream_HamNondominant.nextNode());
this.adaptor.addChild(root_1, stream_initialconfig1.nextTree());
this.adaptor.addChild(root_1, stream_a1tstar.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: nondomsign1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("nondomsign1", 5);
}
return retval;
},
// inline static return class
symmoperator_return: (function() {
Ham4Parser.symmoperator_return = function(){};
org.antlr.lang.extend(Ham4Parser.symmoperator_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:391:1: symmoperator : ( HamSymmpar | HamSymmlr ) ( HamFingerstraightmod ( HamLargemod )? | HamLargemod ( HamFingerstraightmod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? ;
// $ANTLR start "symmoperator"
symmoperator: function() {
this.traceIn("symmoperator", 6);
var retval = new Ham4Parser.symmoperator_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set23 = null;
var HamFingerstraightmod24 = null;
var HamLargemod25 = null;
var HamLargemod26 = null;
var HamFingerstraightmod27 = null;
var HamAlternatingmotion28 = null;
var HamNonipsi29 = null;
var set23_tree=null;
var HamFingerstraightmod24_tree=null;
var HamLargemod25_tree=null;
var HamLargemod26_tree=null;
var HamFingerstraightmod27_tree=null;
var HamAlternatingmotion28_tree=null;
var HamNonipsi29_tree=null;
this.trace("ANTLR Parse: symmoperator starts "+this.state.backtracking);
try {
// Ham4Parser.g:418:5: ( ( HamSymmpar | HamSymmlr ) ( HamFingerstraightmod ( HamLargemod )? | HamLargemod ( HamFingerstraightmod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? )
// Ham4Parser.g:418:9: ( HamSymmpar | HamSymmlr ) ( HamFingerstraightmod ( HamLargemod )? | HamLargemod ( HamFingerstraightmod )? )? ( HamAlternatingmotion )? ( HamNonipsi )?
root_0 = this.adaptor.nil();
set23=this.input.LT(1);
if ( (this.input.LA(1)>=HamSymmpar && this.input.LA(1)<=HamSymmlr) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set23));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
// Ham4Parser.g:423:9: ( HamFingerstraightmod ( HamLargemod )? | HamLargemod ( HamFingerstraightmod )? )?
var alt7=3;
var LA7_0 = this.input.LA(1);
if ( (LA7_0==HamFingerstraightmod) ) {
alt7=1;
}
else if ( (LA7_0==HamLargemod) ) {
alt7=2;
}
switch (alt7) {
case 1 :
// Ham4Parser.g:424:13: HamFingerstraightmod ( HamLargemod )?
HamFingerstraightmod24=this.match(this.input,HamFingerstraightmod,Ham4Parser.FOLLOW_HamFingerstraightmod_in_symmoperator1455); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamFingerstraightmod24_tree = this.adaptor.create(HamFingerstraightmod24);
this.adaptor.addChild(root_0, HamFingerstraightmod24_tree);
}
// Ham4Parser.g:425:13: ( HamLargemod )?
var alt5=2;
var LA5_0 = this.input.LA(1);
if ( (LA5_0==HamLargemod) ) {
alt5=1;
}
switch (alt5) {
case 1 :
// Ham4Parser.g:425:15: HamLargemod
HamLargemod25=this.match(this.input,HamLargemod,Ham4Parser.FOLLOW_HamLargemod_in_symmoperator1471); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamLargemod25_tree = this.adaptor.create(HamLargemod25);
this.adaptor.addChild(root_0, HamLargemod25_tree);
}
break;
}
break;
case 2 :
// Ham4Parser.g:427:13: HamLargemod ( HamFingerstraightmod )?
HamLargemod26=this.match(this.input,HamLargemod,Ham4Parser.FOLLOW_HamLargemod_in_symmoperator1498); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamLargemod26_tree = this.adaptor.create(HamLargemod26);
this.adaptor.addChild(root_0, HamLargemod26_tree);
}
// Ham4Parser.g:428:13: ( HamFingerstraightmod )?
var alt6=2;
var LA6_0 = this.input.LA(1);
if ( (LA6_0==HamFingerstraightmod) ) {
alt6=1;
}
switch (alt6) {
case 1 :
// Ham4Parser.g:428:15: HamFingerstraightmod
HamFingerstraightmod27=this.match(this.input,HamFingerstraightmod,Ham4Parser.FOLLOW_HamFingerstraightmod_in_symmoperator1514); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamFingerstraightmod27_tree = this.adaptor.create(HamFingerstraightmod27);
this.adaptor.addChild(root_0, HamFingerstraightmod27_tree);
}
break;
}
break;
}
// Ham4Parser.g:430:9: ( HamAlternatingmotion )?
var alt8=2;
var LA8_0 = this.input.LA(1);
if ( (LA8_0==HamAlternatingmotion) ) {
alt8=1;
}
switch (alt8) {
case 1 :
// Ham4Parser.g:430:11: HamAlternatingmotion
HamAlternatingmotion28=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_symmoperator1540); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamAlternatingmotion28_tree = this.adaptor.create(HamAlternatingmotion28);
this.adaptor.addChild(root_0, HamAlternatingmotion28_tree);
}
break;
}
// Ham4Parser.g:431:9: ( HamNonipsi )?
var alt9=2;
var LA9_0 = this.input.LA(1);
if ( (LA9_0==HamNonipsi) ) {
alt9=1;
}
switch (alt9) {
case 1 :
// Ham4Parser.g:431:11: HamNonipsi
HamNonipsi29=this.match(this.input,HamNonipsi,Ham4Parser.FOLLOW_HamNonipsi_in_symmoperator1555); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamNonipsi29_tree = this.adaptor.create(HamNonipsi29);
this.adaptor.addChild(root_0, HamNonipsi29_tree);
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: symmoperator finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("symmoperator", 6);
}
return retval;
},
// inline static return class
initialconfig2_return: (function() {
Ham4Parser.initialconfig2_return = function(){};
org.antlr.lang.extend(Ham4Parser.initialconfig2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:437:1: initialconfig2 : ( nminitialconfig )? minitialconfig2 -> ^( ICFG2 ( nminitialconfig )? minitialconfig2 ) ;
// $ANTLR start "initialconfig2"
initialconfig2: function() {
this.traceIn("initialconfig2", 7);
var retval = new Ham4Parser.initialconfig2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var nminitialconfig30 = null;
var minitialconfig231 = null;
var stream_minitialconfig2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule minitialconfig2");
var stream_nminitialconfig=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule nminitialconfig");
this.trace("ANTLR Parse: initialconfig2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:454:5: ( ( nminitialconfig )? minitialconfig2 -> ^( ICFG2 ( nminitialconfig )? minitialconfig2 ) )
// Ham4Parser.g:454:9: ( nminitialconfig )? minitialconfig2
// Ham4Parser.g:454:9: ( nminitialconfig )?
var alt10=2;
var LA10_0 = this.input.LA(1);
if ( (LA10_0==HamSeqbegin) ) {
alt10=1;
}
switch (alt10) {
case 1 :
// Ham4Parser.g:454:11: nminitialconfig
this.pushFollow(Ham4Parser.FOLLOW_nminitialconfig_in_initialconfig21592);
nminitialconfig30=this.nminitialconfig();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_nminitialconfig.add(nminitialconfig30.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_minitialconfig2_in_initialconfig21605);
minitialconfig231=this.minitialconfig2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_minitialconfig2.add(minitialconfig231.getTree());
// AST REWRITE
// elements: nminitialconfig, minitialconfig2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 457:9: -> ^( ICFG2 ( nminitialconfig )? minitialconfig2 )
{
// Ham4Parser.g:457:12: ^( ICFG2 ( nminitialconfig )? minitialconfig2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ICFG2, "ICFG2"), root_1);
// Ham4Parser.g:457:20: ( nminitialconfig )?
if ( stream_nminitialconfig.hasNext() ) {
this.adaptor.addChild(root_1, stream_nminitialconfig.nextTree());
}
stream_nminitialconfig.reset();
this.adaptor.addChild(root_1, stream_minitialconfig2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: initialconfig2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("initialconfig2", 7);
}
return retval;
},
// inline static return class
initialconfig1_return: (function() {
Ham4Parser.initialconfig1_return = function(){};
org.antlr.lang.extend(Ham4Parser.initialconfig1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:460:1: initialconfig1 : ( nminitialconfig )? minitialconfig1 -> ^( ICFG1 ( nminitialconfig )? minitialconfig1 ) ;
// $ANTLR start "initialconfig1"
initialconfig1: function() {
this.traceIn("initialconfig1", 8);
var retval = new Ham4Parser.initialconfig1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var nminitialconfig32 = null;
var minitialconfig133 = null;
var stream_minitialconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule minitialconfig1");
var stream_nminitialconfig=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule nminitialconfig");
this.trace("ANTLR Parse: initialconfig1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:477:5: ( ( nminitialconfig )? minitialconfig1 -> ^( ICFG1 ( nminitialconfig )? minitialconfig1 ) )
// Ham4Parser.g:477:9: ( nminitialconfig )? minitialconfig1
// Ham4Parser.g:477:9: ( nminitialconfig )?
var alt11=2;
var LA11_0 = this.input.LA(1);
if ( (LA11_0==HamSeqbegin) ) {
alt11=1;
}
switch (alt11) {
case 1 :
// Ham4Parser.g:477:11: nminitialconfig
this.pushFollow(Ham4Parser.FOLLOW_nminitialconfig_in_initialconfig11664);
nminitialconfig32=this.nminitialconfig();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_nminitialconfig.add(nminitialconfig32.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_minitialconfig1_in_initialconfig11677);
minitialconfig133=this.minitialconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_minitialconfig1.add(minitialconfig133.getTree());
// AST REWRITE
// elements: nminitialconfig, minitialconfig1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 480:9: -> ^( ICFG1 ( nminitialconfig )? minitialconfig1 )
{
// Ham4Parser.g:480:12: ^( ICFG1 ( nminitialconfig )? minitialconfig1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ICFG1, "ICFG1"), root_1);
// Ham4Parser.g:480:20: ( nminitialconfig )?
if ( stream_nminitialconfig.hasNext() ) {
this.adaptor.addChild(root_1, stream_nminitialconfig.nextTree());
}
stream_nminitialconfig.reset();
this.adaptor.addChild(root_1, stream_minitialconfig1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: initialconfig1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("initialconfig1", 8);
}
return retval;
},
// inline static return class
nminitialconfig_return: (function() {
Ham4Parser.nminitialconfig_return = function(){};
org.antlr.lang.extend(Ham4Parser.nminitialconfig_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:483:1: nminitialconfig : ( nmicunit )+ -> ^( NMICLIST ( nmicunit )* ) ;
// $ANTLR start "nminitialconfig"
nminitialconfig: function() {
this.traceIn("nminitialconfig", 9);
var retval = new Ham4Parser.nminitialconfig_return();
retval.start = this.input.LT(1);
var root_0 = null;
var nmicunit34 = null;
var stream_nmicunit=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule nmicunit");
this.trace("ANTLR Parse: nminitialconfig starts "+this.state.backtracking);
try {
// Ham4Parser.g:500:5: ( ( nmicunit )+ -> ^( NMICLIST ( nmicunit )* ) )
// Ham4Parser.g:500:9: ( nmicunit )+
// Ham4Parser.g:500:9: ( nmicunit )+
var cnt12=0;
loop12:
do {
var alt12=2;
var LA12_0 = this.input.LA(1);
if ( (LA12_0==HamSeqbegin) ) {
alt12=1;
}
switch (alt12) {
case 1 :
// Ham4Parser.g:501:13: nmicunit
this.pushFollow(Ham4Parser.FOLLOW_nmicunit_in_nminitialconfig1748);
nmicunit34=this.nmicunit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_nmicunit.add(nmicunit34.getTree());
break;
default :
if ( cnt12 >= 1 ) {
break loop12;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(12, this.input);
throw eee;
}
cnt12++;
} while (true);
// AST REWRITE
// elements: nmicunit
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 503:9: -> ^( NMICLIST ( nmicunit )* )
{
// Ham4Parser.g:503:12: ^( NMICLIST ( nmicunit )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(NMICLIST, "NMICLIST"), root_1);
// Ham4Parser.g:503:23: ( nmicunit )*
while ( stream_nmicunit.hasNext() ) {
this.adaptor.addChild(root_1, stream_nmicunit.nextTree());
}
stream_nmicunit.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: nminitialconfig finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("nminitialconfig", 9);
}
return retval;
},
// inline static return class
nmicunit_return: (function() {
Ham4Parser.nmicunit_return = function(){};
org.antlr.lang.extend(Ham4Parser.nmicunit_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:506:1: nmicunit : HamSeqbegin ( ( levelbody )=> levelbody | levelarm ) action1 HamSeqend -> ^( NMICUNIT ( levelbody )? ( levelarm )? action1 ) ;
// $ANTLR start "nmicunit"
nmicunit: function() {
this.traceIn("nmicunit", 10);
var retval = new Ham4Parser.nmicunit_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin35 = null;
var HamSeqend39 = null;
var levelbody36 = null;
var levelarm37 = null;
var action138 = null;
var HamSeqbegin35_tree=null;
var HamSeqend39_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_levelbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelbody");
var stream_levelarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelarm");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
this.trace("ANTLR Parse: nmicunit starts "+this.state.backtracking);
try {
// Ham4Parser.g:530:5: ( HamSeqbegin ( ( levelbody )=> levelbody | levelarm ) action1 HamSeqend -> ^( NMICUNIT ( levelbody )? ( levelarm )? action1 ) )
// Ham4Parser.g:531:9: HamSeqbegin ( ( levelbody )=> levelbody | levelarm ) action1 HamSeqend
HamSeqbegin35=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_nmicunit1811); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin35);
// Ham4Parser.g:532:9: ( ( levelbody )=> levelbody | levelarm )
var alt13=2;
alt13 = this.dfa13.predict(this.input);
switch (alt13) {
case 1 :
// Ham4Parser.g:533:11: ( levelbody )=> levelbody
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_nmicunit1842);
levelbody36=this.levelbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelbody.add(levelbody36.getTree());
break;
case 2 :
// Ham4Parser.g:535:11: levelarm
this.pushFollow(Ham4Parser.FOLLOW_levelarm_in_nmicunit1864);
levelarm37=this.levelarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelarm.add(levelarm37.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_action1_in_nmicunit1884);
action138=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action138.getTree());
HamSeqend39=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_nmicunit1894); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend39);
// AST REWRITE
// elements: levelbody, levelarm, action1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 540:9: -> ^( NMICUNIT ( levelbody )? ( levelarm )? action1 )
{
// Ham4Parser.g:540:12: ^( NMICUNIT ( levelbody )? ( levelarm )? action1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(NMICUNIT, "NMICUNIT"), root_1);
// Ham4Parser.g:540:23: ( levelbody )?
if ( stream_levelbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_levelbody.nextTree());
}
stream_levelbody.reset();
// Ham4Parser.g:540:34: ( levelarm )?
if ( stream_levelarm.hasNext() ) {
this.adaptor.addChild(root_1, stream_levelarm.nextTree());
}
stream_levelarm.reset();
this.adaptor.addChild(root_1, stream_action1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: nmicunit finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("nmicunit", 10);
}
return retval;
},
// inline static return class
minitialconfig2_return: (function() {
Ham4Parser.minitialconfig2_return = function(){};
org.antlr.lang.extend(Ham4Parser.minitialconfig2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:544:1: minitialconfig2 : ( ( handconfig2 )=> handconfig2 ( ( location2 )=> location2 )? -> ^( MICFG2 handconfig2 ( location2 )? ) | HamParbegin handconfig1 ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) ) ) ;
// $ANTLR start "minitialconfig2"
minitialconfig2: function() {
this.traceIn("minitialconfig2", 11);
var retval = new Ham4Parser.minitialconfig2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin42 = null;
var HamPlus44 = null;
var HamParend46 = null;
var HamPlus47 = null;
var HamParend48 = null;
var loc = null;
var ploc = null;
var handconfig240 = null;
var location241 = null;
var handconfig143 = null;
var location145 = null;
var HamParbegin42_tree=null;
var HamPlus44_tree=null;
var HamParend46_tree=null;
var HamPlus47_tree=null;
var HamParend48_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_location1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location1");
var stream_location2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location2");
var stream_handconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconfig1");
var stream_handconfig2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconfig2");
this.trace("ANTLR Parse: minitialconfig2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:588:5: ( ( ( handconfig2 )=> handconfig2 ( ( location2 )=> location2 )? -> ^( MICFG2 handconfig2 ( location2 )? ) | HamParbegin handconfig1 ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) ) ) )
// Ham4Parser.g:589:5: ( ( handconfig2 )=> handconfig2 ( ( location2 )=> location2 )? -> ^( MICFG2 handconfig2 ( location2 )? ) | HamParbegin handconfig1 ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) ) )
// Ham4Parser.g:589:5: ( ( handconfig2 )=> handconfig2 ( ( location2 )=> location2 )? -> ^( MICFG2 handconfig2 ( location2 )? ) | HamParbegin handconfig1 ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) ) )
var alt17=2;
var LA17_0 = this.input.LA(1);
if ( ((LA17_0>=HamFist && LA17_0<=HamFinger2345)||(LA17_0>=HamPinch12 && LA17_0<=HamCee12open)) && (this.synpred4_Ham4Parser())) {
alt17=1;
}
else if ( (LA17_0==HamNondominant) && (this.synpred4_Ham4Parser())) {
alt17=1;
}
else if ( (LA17_0==HamParbegin) ) {
var LA17_3 = this.input.LA(2);
if ( (this.synpred4_Ham4Parser()) ) {
alt17=1;
}
else if ( (true) ) {
alt17=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 17, 3, this.input);
throw nvae;
}
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 17, 0, this.input);
throw nvae;
}
switch (alt17) {
case 1 :
// Ham4Parser.g:590:9: ( handconfig2 )=> handconfig2 ( ( location2 )=> location2 )?
this.pushFollow(Ham4Parser.FOLLOW_handconfig2_in_minitialconfig21992);
handconfig240=this.handconfig2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfig2.add(handconfig240.getTree());
// Ham4Parser.g:593:9: ( ( location2 )=> location2 )?
var alt14=2;
alt14 = this.dfa14.predict(this.input);
switch (alt14) {
case 1 :
// Ham4Parser.g:594:13: ( location2 )=> location2
this.pushFollow(Ham4Parser.FOLLOW_location2_in_minitialconfig22048);
location241=this.location2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location2.add(location241.getTree());
break;
}
// AST REWRITE
// elements: location2, handconfig2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 598:9: -> ^( MICFG2 handconfig2 ( location2 )? )
{
// Ham4Parser.g:598:12: ^( MICFG2 handconfig2 ( location2 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(MICFG2, "MICFG2"), root_1);
this.adaptor.addChild(root_1, stream_handconfig2.nextTree());
// Ham4Parser.g:598:33: ( location2 )?
if ( stream_location2.hasNext() ) {
this.adaptor.addChild(root_1, stream_location2.nextTree());
}
stream_location2.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:600:9: HamParbegin handconfig1 ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) )
HamParbegin42=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_minitialconfig22094); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin42);
this.pushFollow(Ham4Parser.FOLLOW_handconfig1_in_minitialconfig22105);
handconfig143=this.handconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfig1.add(handconfig143.getTree());
// Ham4Parser.g:602:9: ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) )
var alt16=2;
alt16 = this.dfa16.predict(this.input);
switch (alt16) {
case 1 :
// Ham4Parser.g:603:13: ( HamPlus )=> HamPlus location1 HamParend
HamPlus44=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_minitialconfig22161); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus44);
this.pushFollow(Ham4Parser.FOLLOW_location1_in_minitialconfig22176);
location145=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location145.getTree());
HamParend46=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_minitialconfig22190); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend46);
// AST REWRITE
// elements: location1, handconfig1, HamPlus
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 609:9: -> ^( MICFG2 handconfig1 HamPlus location1 )
{
// Ham4Parser.g:609:12: ^( MICFG2 handconfig1 HamPlus location1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(MICFG2, "MICFG2"), root_1);
this.adaptor.addChild(root_1, stream_handconfig1.nextTree());
this.adaptor.addChild(root_1, stream_HamPlus.nextNode());
this.adaptor.addChild(root_1, stream_location1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:611:13: loc= location1 HamPlus (ploc= location1 )? HamParend
this.pushFollow(Ham4Parser.FOLLOW_location1_in_minitialconfig22237);
loc=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(loc.getTree());
HamPlus47=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_minitialconfig22251); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus47);
// Ham4Parser.g:614:13: (ploc= location1 )?
var alt15=2;
alt15 = this.dfa15.predict(this.input);
switch (alt15) {
case 1 :
// Ham4Parser.g:614:15: ploc= location1
this.pushFollow(Ham4Parser.FOLLOW_location1_in_minitialconfig22270);
ploc=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(ploc.getTree());
break;
}
HamParend48=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_minitialconfig22287); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend48);
// AST REWRITE
// elements: loc, ploc, handconfig1, HamPlus
// token labels: 
// rule labels: loc, ploc, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_loc=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token loc",loc!=null?loc.tree:null);
var stream_ploc=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ploc",ploc!=null?ploc.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 616:9: -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? )
{
// Ham4Parser.g:616:12: ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(MICFG2, "MICFG2"), root_1);
this.adaptor.addChild(root_1, stream_handconfig1.nextTree());
this.adaptor.addChild(root_1, stream_loc.nextTree());
this.adaptor.addChild(root_1, stream_HamPlus.nextNode());
// Ham4Parser.g:616:46: ( $ploc)?
if ( stream_ploc.hasNext() ) {
this.adaptor.addChild(root_1, stream_ploc.nextTree());
}
stream_ploc.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: minitialconfig2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("minitialconfig2", 11);
}
return retval;
},
// inline static return class
minitialconfig1_return: (function() {
Ham4Parser.minitialconfig1_return = function(){};
org.antlr.lang.extend(Ham4Parser.minitialconfig1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:621:1: minitialconfig1 : handconfig1 ( location1 )? -> ^( MICFG1 handconfig1 ( location1 )? ) ;
// $ANTLR start "minitialconfig1"
minitialconfig1: function() {
this.traceIn("minitialconfig1", 12);
var retval = new Ham4Parser.minitialconfig1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var handconfig149 = null;
var location150 = null;
var stream_location1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location1");
var stream_handconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconfig1");
this.trace("ANTLR Parse: minitialconfig1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:639:5: ( handconfig1 ( location1 )? -> ^( MICFG1 handconfig1 ( location1 )? ) )
// Ham4Parser.g:640:9: handconfig1 ( location1 )?
this.pushFollow(Ham4Parser.FOLLOW_handconfig1_in_minitialconfig12364);
handconfig149=this.handconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfig1.add(handconfig149.getTree());
// Ham4Parser.g:641:9: ( location1 )?
var alt18=2;
alt18 = this.dfa18.predict(this.input);
switch (alt18) {
case 1 :
// Ham4Parser.g:641:11: location1
this.pushFollow(Ham4Parser.FOLLOW_location1_in_minitialconfig12376);
location150=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location150.getTree());
break;
}
// AST REWRITE
// elements: handconfig1, location1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 643:9: -> ^( MICFG1 handconfig1 ( location1 )? )
{
// Ham4Parser.g:643:12: ^( MICFG1 handconfig1 ( location1 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(MICFG1, "MICFG1"), root_1);
this.adaptor.addChild(root_1, stream_handconfig1.nextTree());
// Ham4Parser.g:643:33: ( location1 )?
if ( stream_location1.hasNext() ) {
this.adaptor.addChild(root_1, stream_location1.nextTree());
}
stream_location1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: minitialconfig1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("minitialconfig1", 12);
}
return retval;
},
// inline static return class
handconfig2_return: (function() {
Ham4Parser.handconfig2_return = function(){};
org.antlr.lang.extend(Ham4Parser.handconfig2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:649:1: handconfig2 : ( ( handshape2 ( HamParbegin )? extfidir1 )=> handshape2 handconfigtail2 -> ^( HDCONFIG2 handshape2 handconfigtail2 ) | ( handshape2 )=> handshape2 -> ^( HDCONFIG2 handshape2 ) | splithandconfig2 -> ^( HDCONFIG2 splithandconfig2 ) ) ;
// $ANTLR start "handconfig2"
handconfig2: function() {
this.traceIn("handconfig2", 13);
var retval = new Ham4Parser.handconfig2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var handshape251 = null;
var handconfigtail252 = null;
var handshape253 = null;
var splithandconfig254 = null;
var stream_handshape2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshape2");
var stream_handconfigtail2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconfigtail2");
var stream_splithandconfig2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splithandconfig2");
this.trace("ANTLR Parse: handconfig2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:678:5: ( ( ( handshape2 ( HamParbegin )? extfidir1 )=> handshape2 handconfigtail2 -> ^( HDCONFIG2 handshape2 handconfigtail2 ) | ( handshape2 )=> handshape2 -> ^( HDCONFIG2 handshape2 ) | splithandconfig2 -> ^( HDCONFIG2 splithandconfig2 ) ) )
// Ham4Parser.g:679:5: ( ( handshape2 ( HamParbegin )? extfidir1 )=> handshape2 handconfigtail2 -> ^( HDCONFIG2 handshape2 handconfigtail2 ) | ( handshape2 )=> handshape2 -> ^( HDCONFIG2 handshape2 ) | splithandconfig2 -> ^( HDCONFIG2 splithandconfig2 ) )
// Ham4Parser.g:679:5: ( ( handshape2 ( HamParbegin )? extfidir1 )=> handshape2 handconfigtail2 -> ^( HDCONFIG2 handshape2 handconfigtail2 ) | ( handshape2 )=> handshape2 -> ^( HDCONFIG2 handshape2 ) | splithandconfig2 -> ^( HDCONFIG2 splithandconfig2 ) )
var alt19=3;
switch ( this.input.LA(1) ) {
case HamFist:
case HamFlathand:
case HamFinger2:
case HamFinger23:
case HamFinger23spread:
case HamFinger2345:
case HamPinch12:
case HamPinchall:
case HamPinch12open:
case HamCee12:
case HamCeeall:
case HamCee12open:
var LA19_1 = this.input.LA(2);
if ( (this.synpred7_Ham4Parser()) ) {
alt19=1;
}
else if ( (this.synpred8_Ham4Parser()) ) {
alt19=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 19, 1, this.input);
throw nvae;
}
break;
case HamNondominant:
var LA19_2 = this.input.LA(2);
if ( (this.synpred7_Ham4Parser()) ) {
alt19=1;
}
else if ( (this.synpred8_Ham4Parser()) ) {
alt19=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 19, 2, this.input);
throw nvae;
}
break;
case HamParbegin:
var LA19_3 = this.input.LA(2);
if ( (this.synpred7_Ham4Parser()) ) {
alt19=1;
}
else if ( (this.synpred8_Ham4Parser()) ) {
alt19=2;
}
else if ( (true) ) {
alt19=3;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 19, 3, this.input);
throw nvae;
}
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 19, 0, this.input);
throw nvae;
}
switch (alt19) {
case 1 :
// Ham4Parser.g:680:9: ( handshape2 ( HamParbegin )? extfidir1 )=> handshape2 handconfigtail2
this.pushFollow(Ham4Parser.FOLLOW_handshape2_in_handconfig22484);
handshape251=this.handshape2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape2.add(handshape251.getTree());
this.pushFollow(Ham4Parser.FOLLOW_handconfigtail2_in_handconfig22494);
handconfigtail252=this.handconfigtail2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfigtail2.add(handconfigtail252.getTree());
// AST REWRITE
// elements: handconfigtail2, handshape2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 684:9: -> ^( HDCONFIG2 handshape2 handconfigtail2 )
{
// Ham4Parser.g:684:12: ^( HDCONFIG2 handshape2 handconfigtail2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCONFIG2, "HDCONFIG2"), root_1);
this.adaptor.addChild(root_1, stream_handshape2.nextTree());
this.adaptor.addChild(root_1, stream_handconfigtail2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:686:9: ( handshape2 )=> handshape2
this.pushFollow(Ham4Parser.FOLLOW_handshape2_in_handconfig22552);
handshape253=this.handshape2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape2.add(handshape253.getTree());
// AST REWRITE
// elements: handshape2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 689:9: -> ^( HDCONFIG2 handshape2 )
{
// Ham4Parser.g:689:12: ^( HDCONFIG2 handshape2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCONFIG2, "HDCONFIG2"), root_1);
this.adaptor.addChild(root_1, stream_handshape2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:691:9: splithandconfig2
this.pushFollow(Ham4Parser.FOLLOW_splithandconfig2_in_handconfig22584);
splithandconfig254=this.splithandconfig2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splithandconfig2.add(splithandconfig254.getTree());
// AST REWRITE
// elements: splithandconfig2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 692:9: -> ^( HDCONFIG2 splithandconfig2 )
{
// Ham4Parser.g:692:12: ^( HDCONFIG2 splithandconfig2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCONFIG2, "HDCONFIG2"), root_1);
this.adaptor.addChild(root_1, stream_splithandconfig2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handconfig2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handconfig2", 13);
}
return retval;
},
// inline static return class
handconfig1_return: (function() {
Ham4Parser.handconfig1_return = function(){};
org.antlr.lang.extend(Ham4Parser.handconfig1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:697:1: handconfig1 : handshape1 ( extfidir1 palmor1 )? -> ^( HDCONFIG1 handshape1 ( extfidir1 )? ( palmor1 )? ) ;
// $ANTLR start "handconfig1"
handconfig1: function() {
this.traceIn("handconfig1", 14);
var retval = new Ham4Parser.handconfig1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var handshape155 = null;
var extfidir156 = null;
var palmor157 = null;
var stream_handshape1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshape1");
var stream_palmor1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor1");
var stream_extfidir1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir1");
this.trace("ANTLR Parse: handconfig1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:717:5: ( handshape1 ( extfidir1 palmor1 )? -> ^( HDCONFIG1 handshape1 ( extfidir1 )? ( palmor1 )? ) )
// Ham4Parser.g:717:9: handshape1 ( extfidir1 palmor1 )?
this.pushFollow(Ham4Parser.FOLLOW_handshape1_in_handconfig12636);
handshape155=this.handshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape1.add(handshape155.getTree());
// Ham4Parser.g:718:9: ( extfidir1 palmor1 )?
var alt20=2;
var LA20_0 = this.input.LA(1);
if ( ((LA20_0>=HamExtfingeru && LA20_0<=HamExtfingeruo)) ) {
alt20=1;
}
switch (alt20) {
case 1 :
// Ham4Parser.g:719:13: extfidir1 palmor1
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_handconfig12660);
extfidir156=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(extfidir156.getTree());
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_handconfig12674);
palmor157=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor157.getTree());
break;
}
// AST REWRITE
// elements: handshape1, palmor1, extfidir1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 723:9: -> ^( HDCONFIG1 handshape1 ( extfidir1 )? ( palmor1 )? )
{
// Ham4Parser.g:723:12: ^( HDCONFIG1 handshape1 ( extfidir1 )? ( palmor1 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCONFIG1, "HDCONFIG1"), root_1);
this.adaptor.addChild(root_1, stream_handshape1.nextTree());
// Ham4Parser.g:723:35: ( extfidir1 )?
if ( stream_extfidir1.hasNext() ) {
this.adaptor.addChild(root_1, stream_extfidir1.nextTree());
}
stream_extfidir1.reset();
// Ham4Parser.g:723:46: ( palmor1 )?
if ( stream_palmor1.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
}
stream_palmor1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handconfig1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handconfig1", 14);
}
return retval;
},
// inline static return class
splithandconfig2_return: (function() {
Ham4Parser.splithandconfig2_return = function(){};
org.antlr.lang.extend(Ham4Parser.splithandconfig2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:728:1: splithandconfig2 : HamParbegin handconfig1 HamPlus handconfig1 HamParend -> ^( SPLITHDCFG2 ( handconfig1 )* ) ;
// $ANTLR start "splithandconfig2"
splithandconfig2: function() {
this.traceIn("splithandconfig2", 15);
var retval = new Ham4Parser.splithandconfig2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin58 = null;
var HamPlus60 = null;
var HamParend62 = null;
var handconfig159 = null;
var handconfig161 = null;
var HamParbegin58_tree=null;
var HamPlus60_tree=null;
var HamParend62_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_handconfig1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconfig1");
this.trace("ANTLR Parse: splithandconfig2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:748:5: ( HamParbegin handconfig1 HamPlus handconfig1 HamParend -> ^( SPLITHDCFG2 ( handconfig1 )* ) )
// Ham4Parser.g:748:9: HamParbegin handconfig1 HamPlus handconfig1 HamParend
HamParbegin58=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splithandconfig22747); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin58);
this.pushFollow(Ham4Parser.FOLLOW_handconfig1_in_splithandconfig22758);
handconfig159=this.handconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfig1.add(handconfig159.getTree());
HamPlus60=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splithandconfig22768); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus60);
this.pushFollow(Ham4Parser.FOLLOW_handconfig1_in_splithandconfig22779);
handconfig161=this.handconfig1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconfig1.add(handconfig161.getTree());
HamParend62=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splithandconfig22789); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend62);
// AST REWRITE
// elements: handconfig1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 754:9: -> ^( SPLITHDCFG2 ( handconfig1 )* )
{
// Ham4Parser.g:754:12: ^( SPLITHDCFG2 ( handconfig1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SPLITHDCFG2, "SPLITHDCFG2"), root_1);
// Ham4Parser.g:754:26: ( handconfig1 )*
while ( stream_handconfig1.hasNext() ) {
this.adaptor.addChild(root_1, stream_handconfig1.nextTree());
}
stream_handconfig1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splithandconfig2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splithandconfig2", 15);
}
return retval;
},
// inline static return class
handconfigtail2_return: (function() {
Ham4Parser.handconfigtail2_return = function(){};
org.antlr.lang.extend(Ham4Parser.handconfigtail2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:757:1: handconfigtail2 : ( ( extfidir2 )=> extfidir2 palmor2 -> ^( HDCFGTAIL2 extfidir2 palmor2 ) | HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2) ) ;
// $ANTLR start "handconfigtail2"
handconfigtail2: function() {
this.traceIn("handconfigtail2", 16);
var retval = new Ham4Parser.handconfigtail2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin65 = null;
var HamPlus66 = null;
var HamParend67 = null;
var efd1 = null;
var por1 = null;
var efd2 = null;
var por2 = null;
var extfidir263 = null;
var palmor264 = null;
var HamParbegin65_tree=null;
var HamPlus66_tree=null;
var HamParend67_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_palmor2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor2");
var stream_palmor1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor1");
var stream_extfidir1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir1");
var stream_extfidir2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir2");
this.trace("ANTLR Parse: handconfigtail2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:787:5: ( ( ( extfidir2 )=> extfidir2 palmor2 -> ^( HDCFGTAIL2 extfidir2 palmor2 ) | HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2) ) )
// Ham4Parser.g:788:5: ( ( extfidir2 )=> extfidir2 palmor2 -> ^( HDCFGTAIL2 extfidir2 palmor2 ) | HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2) )
// Ham4Parser.g:788:5: ( ( extfidir2 )=> extfidir2 palmor2 -> ^( HDCFGTAIL2 extfidir2 palmor2 ) | HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2) )
var alt21=2;
alt21 = this.dfa21.predict(this.input);
switch (alt21) {
case 1 :
// Ham4Parser.g:789:9: ( extfidir2 )=> extfidir2 palmor2
this.pushFollow(Ham4Parser.FOLLOW_extfidir2_in_handconfigtail22881);
extfidir263=this.extfidir2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir2.add(extfidir263.getTree());
this.pushFollow(Ham4Parser.FOLLOW_palmor2_in_handconfigtail22891);
palmor264=this.palmor2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor2.add(palmor264.getTree());
// AST REWRITE
// elements: palmor2, extfidir2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 793:5: -> ^( HDCFGTAIL2 extfidir2 palmor2 )
{
// Ham4Parser.g:793:8: ^( HDCFGTAIL2 extfidir2 palmor2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCFGTAIL2, "HDCFGTAIL2"), root_1);
this.adaptor.addChild(root_1, stream_extfidir2.nextTree());
this.adaptor.addChild(root_1, stream_palmor2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:795:9: HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend
HamParbegin65=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_handconfigtail22921); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin65);
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_handconfigtail22934);
efd1=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(efd1.getTree());
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_handconfigtail22946);
por1=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(por1.getTree());
HamPlus66=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_handconfigtail22956); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus66);
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_handconfigtail22969);
efd2=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(efd2.getTree());
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_handconfigtail22981);
por2=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(por2.getTree());
HamParend67=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_handconfigtail22991); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend67);
// AST REWRITE
// elements: por1, efd2, por2, efd1
// token labels: 
// rule labels: efd2, efd1, por1, por2, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_efd2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token efd2",efd2!=null?efd2.tree:null);
var stream_efd1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token efd1",efd1!=null?efd1.tree:null);
var stream_por1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token por1",por1!=null?por1.tree:null);
var stream_por2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token por2",por2!=null?por2.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 802:5: -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2)
{
// Ham4Parser.g:802:8: ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2)
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HDCFGTAIL2, "HDCFGTAIL2"), root_1);
this.adaptor.addChild(root_1, stream_efd1.nextTree());
this.adaptor.addChild(root_1, stream_por1.nextTree());
this.adaptor.addChild(root_1, stream_efd2.nextTree());
this.adaptor.addChild(root_1, stream_por2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handconfigtail2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handconfigtail2", 16);
}
return retval;
},
// inline static return class
handshape2_return: (function() {
Ham4Parser.handshape2_return = function(){};
org.antlr.lang.extend(Ham4Parser.handshape2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:809:1: handshape2 : ( handshape1 -> ^( HSHAPE2 handshape1 ) | HamParbegin hs1= handshape1 HamPlus hs2= handshape1 HamParend -> ^( HSHAPE2 $hs1 $hs2) ) ;
// $ANTLR start "handshape2"
handshape2: function() {
this.traceIn("handshape2", 17);
var retval = new Ham4Parser.handshape2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin69 = null;
var HamPlus70 = null;
var HamParend71 = null;
var hs1 = null;
var hs2 = null;
var handshape168 = null;
var HamParbegin69_tree=null;
var HamPlus70_tree=null;
var HamParend71_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_handshape1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshape1");
this.trace("ANTLR Parse: handshape2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:834:5: ( ( handshape1 -> ^( HSHAPE2 handshape1 ) | HamParbegin hs1= handshape1 HamPlus hs2= handshape1 HamParend -> ^( HSHAPE2 $hs1 $hs2) ) )
// Ham4Parser.g:835:5: ( handshape1 -> ^( HSHAPE2 handshape1 ) | HamParbegin hs1= handshape1 HamPlus hs2= handshape1 HamParend -> ^( HSHAPE2 $hs1 $hs2) )
// Ham4Parser.g:835:5: ( handshape1 -> ^( HSHAPE2 handshape1 ) | HamParbegin hs1= handshape1 HamPlus hs2= handshape1 HamParend -> ^( HSHAPE2 $hs1 $hs2) )
var alt22=2;
var LA22_0 = this.input.LA(1);
if ( ((LA22_0>=HamFist && LA22_0<=HamFinger2345)||(LA22_0>=HamPinch12 && LA22_0<=HamCee12open)||LA22_0==HamNondominant) ) {
alt22=1;
}
else if ( (LA22_0==HamParbegin) ) {
alt22=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 22, 0, this.input);
throw nvae;
}
switch (alt22) {
case 1 :
// Ham4Parser.g:836:9: handshape1
this.pushFollow(Ham4Parser.FOLLOW_handshape1_in_handshape23064);
handshape168=this.handshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape1.add(handshape168.getTree());
// AST REWRITE
// elements: handshape1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 837:9: -> ^( HSHAPE2 handshape1 )
{
// Ham4Parser.g:837:12: ^( HSHAPE2 handshape1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HSHAPE2, "HSHAPE2"), root_1);
this.adaptor.addChild(root_1, stream_handshape1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:839:9: HamParbegin hs1= handshape1 HamPlus hs2= handshape1 HamParend
HamParbegin69=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_handshape23096); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin69);
this.pushFollow(Ham4Parser.FOLLOW_handshape1_in_handshape23111);
hs1=this.handshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape1.add(hs1.getTree());
HamPlus70=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_handshape23121); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus70);
this.pushFollow(Ham4Parser.FOLLOW_handshape1_in_handshape23136);
hs2=this.handshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape1.add(hs2.getTree());
HamParend71=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_handshape23146); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend71);
// AST REWRITE
// elements: hs1, hs2
// token labels: 
// rule labels: hs2, hs1, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_hs2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token hs2",hs2!=null?hs2.tree:null);
var stream_hs1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token hs1",hs1!=null?hs1.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 844:9: -> ^( HSHAPE2 $hs1 $hs2)
{
// Ham4Parser.g:844:12: ^( HSHAPE2 $hs1 $hs2)
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HSHAPE2, "HSHAPE2"), root_1);
this.adaptor.addChild(root_1, stream_hs1.nextTree());
this.adaptor.addChild(root_1, stream_hs2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handshape2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handshape2", 17);
}
return retval;
},
// inline static return class
handshape1_return: (function() {
Ham4Parser.handshape1_return = function(){};
org.antlr.lang.extend(Ham4Parser.handshape1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:848:1: handshape1 : basichandshape1 ( ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit | ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )? | ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra ) | fingerlist fingershapelist fingercrossinglist ) -> ^( HSHAPE1 basichandshape1 ( cautiousfingerlist )? ( fingerlist )? ( fingershapelist )? ( fingercrossinglist )? ( thumbbetweenexplicit )? ( thumbspecial )? ( thumbbetweendefault )? ( thumbextra )? ) ;
// $ANTLR start "handshape1"
handshape1: function() {
this.traceIn("handshape1", 18);
var retval = new Ham4Parser.handshape1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var basichandshape172 = null;
var cautiousfingerlist73 = null;
var fingershapelist74 = null;
var fingercrossinglist75 = null;
var thumbbetweenexplicit76 = null;
var cautiousfingerlist77 = null;
var fingershapelist78 = null;
var fingercrossinglist79 = null;
var thumbspecial80 = null;
var fingerlist81 = null;
var fingershapelist82 = null;
var fingercrossinglist83 = null;
var thumbbetweendefault84 = null;
var thumbextra85 = null;
var fingerlist86 = null;
var fingershapelist87 = null;
var fingercrossinglist88 = null;
var stream_thumbbetweenexplicit=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumbbetweenexplicit");
var stream_cautiousfingerlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule cautiousfingerlist");
var stream_thumbspecial=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumbspecial");
var stream_thumbbetweendefault=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumbbetweendefault");
var stream_basichandshape1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule basichandshape1");
var stream_fingershapelist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingershapelist");
var stream_fingercrossinglist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingercrossinglist");
var stream_fingerlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingerlist");
var stream_thumbextra=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumbextra");
this.trace("ANTLR Parse: handshape1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:896:5: ( basichandshape1 ( ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit | ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )? | ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra ) | fingerlist fingershapelist fingercrossinglist ) -> ^( HSHAPE1 basichandshape1 ( cautiousfingerlist )? ( fingerlist )? ( fingershapelist )? ( fingercrossinglist )? ( thumbbetweenexplicit )? ( thumbspecial )? ( thumbbetweendefault )? ( thumbextra )? ) )
// Ham4Parser.g:896:10: basichandshape1 ( ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit | ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )? | ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra ) | fingerlist fingershapelist fingercrossinglist )
this.pushFollow(Ham4Parser.FOLLOW_basichandshape1_in_handshape13203);
basichandshape172=this.basichandshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_basichandshape1.add(basichandshape172.getTree());
// Ham4Parser.g:897:9: ( ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit | ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )? | ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra ) | fingerlist fingershapelist fingercrossinglist )
var alt25=4;
alt25 = this.dfa25.predict(this.input);
switch (alt25) {
case 1 :
// Ham4Parser.g:898:13: ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit
this.pushFollow(Ham4Parser.FOLLOW_cautiousfingerlist_in_handshape13268);
cautiousfingerlist73=this.cautiousfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_cautiousfingerlist.add(cautiousfingerlist73.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingershapelist_in_handshape13282);
fingershapelist74=this.fingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingershapelist.add(fingershapelist74.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingercrossinglist_in_handshape13296);
fingercrossinglist75=this.fingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingercrossinglist.add(fingercrossinglist75.getTree());
this.pushFollow(Ham4Parser.FOLLOW_thumbbetweenexplicit_in_handshape13310);
thumbbetweenexplicit76=this.thumbbetweenexplicit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumbbetweenexplicit.add(thumbbetweenexplicit76.getTree());
break;
case 2 :
// Ham4Parser.g:906:13: ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )?
this.pushFollow(Ham4Parser.FOLLOW_cautiousfingerlist_in_handshape13394);
cautiousfingerlist77=this.cautiousfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_cautiousfingerlist.add(cautiousfingerlist77.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingershapelist_in_handshape13408);
fingershapelist78=this.fingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingershapelist.add(fingershapelist78.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingercrossinglist_in_handshape13422);
fingercrossinglist79=this.fingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingercrossinglist.add(fingercrossinglist79.getTree());
// Ham4Parser.g:911:13: ( ( thumbspecial )=> thumbspecial )?
var alt23=2;
alt23 = this.dfa23.predict(this.input);
switch (alt23) {
case 1 :
// Ham4Parser.g:911:15: ( thumbspecial )=> thumbspecial
this.pushFollow(Ham4Parser.FOLLOW_thumbspecial_in_handshape13446);
thumbspecial80=this.thumbspecial();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumbspecial.add(thumbspecial80.getTree());
break;
}
break;
case 3 :
// Ham4Parser.g:914:13: ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra )
this.pushFollow(Ham4Parser.FOLLOW_fingerlist_in_handshape13533);
fingerlist81=this.fingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerlist.add(fingerlist81.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingershapelist_in_handshape13547);
fingershapelist82=this.fingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingershapelist.add(fingershapelist82.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingercrossinglist_in_handshape13561);
fingercrossinglist83=this.fingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingercrossinglist.add(fingercrossinglist83.getTree());
// Ham4Parser.g:919:13: ( thumbbetweendefault | thumbextra )
var alt24=2;
var LA24_0 = this.input.LA(1);
if ( (LA24_0==HamBetween) ) {
alt24=1;
}
else if ( (LA24_0==HamThumb||(LA24_0>=HamFingertip && LA24_0<=HamFingerside)) ) {
alt24=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 24, 0, this.input);
throw nvae;
}
switch (alt24) {
case 1 :
// Ham4Parser.g:919:15: thumbbetweendefault
this.pushFollow(Ham4Parser.FOLLOW_thumbbetweendefault_in_handshape13577);
thumbbetweendefault84=this.thumbbetweendefault();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumbbetweendefault.add(thumbbetweendefault84.getTree());
break;
case 2 :
// Ham4Parser.g:919:37: thumbextra
this.pushFollow(Ham4Parser.FOLLOW_thumbextra_in_handshape13581);
thumbextra85=this.thumbextra();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumbextra.add(thumbextra85.getTree());
break;
}
break;
case 4 :
// Ham4Parser.g:922:13: fingerlist fingershapelist fingercrossinglist
this.pushFollow(Ham4Parser.FOLLOW_fingerlist_in_handshape13620);
fingerlist86=this.fingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerlist.add(fingerlist86.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingershapelist_in_handshape13634);
fingershapelist87=this.fingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingershapelist.add(fingershapelist87.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingercrossinglist_in_handshape13648);
fingercrossinglist88=this.fingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingercrossinglist.add(fingercrossinglist88.getTree());
break;
}
// AST REWRITE
// elements: thumbspecial, thumbbetweendefault, cautiousfingerlist, basichandshape1, fingershapelist, fingercrossinglist, thumbbetweenexplicit, fingerlist, thumbextra
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 929:5: -> ^( HSHAPE1 basichandshape1 ( cautiousfingerlist )? ( fingerlist )? ( fingershapelist )? ( fingercrossinglist )? ( thumbbetweenexplicit )? ( thumbspecial )? ( thumbbetweendefault )? ( thumbextra )? )
{
// Ham4Parser.g:929:8: ^( HSHAPE1 basichandshape1 ( cautiousfingerlist )? ( fingerlist )? ( fingershapelist )? ( fingercrossinglist )? ( thumbbetweenexplicit )? ( thumbspecial )? ( thumbbetweendefault )? ( thumbextra )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HSHAPE1, "HSHAPE1"), root_1);
this.adaptor.addChild(root_1, stream_basichandshape1.nextTree());
// Ham4Parser.g:929:34: ( cautiousfingerlist )?
if ( stream_cautiousfingerlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_cautiousfingerlist.nextTree());
}
stream_cautiousfingerlist.reset();
// Ham4Parser.g:929:54: ( fingerlist )?
if ( stream_fingerlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_fingerlist.nextTree());
}
stream_fingerlist.reset();
// Ham4Parser.g:929:66: ( fingershapelist )?
if ( stream_fingershapelist.hasNext() ) {
this.adaptor.addChild(root_1, stream_fingershapelist.nextTree());
}
stream_fingershapelist.reset();
// Ham4Parser.g:929:83: ( fingercrossinglist )?
if ( stream_fingercrossinglist.hasNext() ) {
this.adaptor.addChild(root_1, stream_fingercrossinglist.nextTree());
}
stream_fingercrossinglist.reset();
// Ham4Parser.g:930:13: ( thumbbetweenexplicit )?
if ( stream_thumbbetweenexplicit.hasNext() ) {
this.adaptor.addChild(root_1, stream_thumbbetweenexplicit.nextTree());
}
stream_thumbbetweenexplicit.reset();
// Ham4Parser.g:930:35: ( thumbspecial )?
if ( stream_thumbspecial.hasNext() ) {
this.adaptor.addChild(root_1, stream_thumbspecial.nextTree());
}
stream_thumbspecial.reset();
// Ham4Parser.g:930:49: ( thumbbetweendefault )?
if ( stream_thumbbetweendefault.hasNext() ) {
this.adaptor.addChild(root_1, stream_thumbbetweendefault.nextTree());
}
stream_thumbbetweendefault.reset();
// Ham4Parser.g:930:70: ( thumbextra )?
if ( stream_thumbextra.hasNext() ) {
this.adaptor.addChild(root_1, stream_thumbextra.nextTree());
}
stream_thumbextra.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handshape1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handshape1", 18);
}
return retval;
},
// inline static return class
basichandshape1_return: (function() {
Ham4Parser.basichandshape1_return = function(){};
org.antlr.lang.extend(Ham4Parser.basichandshape1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:933:1: basichandshape1 : basichandshape ( ( HamBetween handshapeclass )=> HamBetween basichandshape )? -> ^( BASICHDSHP1 ( basichandshape )* ) ;
// $ANTLR start "basichandshape1"
basichandshape1: function() {
this.traceIn("basichandshape1", 19);
var retval = new Ham4Parser.basichandshape1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween90 = null;
var basichandshape89 = null;
var basichandshape91 = null;
var HamBetween90_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_basichandshape=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule basichandshape");
this.trace("ANTLR Parse: basichandshape1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:954:5: ( basichandshape ( ( HamBetween handshapeclass )=> HamBetween basichandshape )? -> ^( BASICHDSHP1 ( basichandshape )* ) )
// Ham4Parser.g:954:9: basichandshape ( ( HamBetween handshapeclass )=> HamBetween basichandshape )?
this.pushFollow(Ham4Parser.FOLLOW_basichandshape_in_basichandshape13758);
basichandshape89=this.basichandshape();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_basichandshape.add(basichandshape89.getTree());
// Ham4Parser.g:955:9: ( ( HamBetween handshapeclass )=> HamBetween basichandshape )?
var alt26=2;
alt26 = this.dfa26.predict(this.input);
switch (alt26) {
case 1 :
// Ham4Parser.g:956:13: ( HamBetween handshapeclass )=> HamBetween basichandshape
HamBetween90=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_basichandshape13823); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween90);
this.pushFollow(Ham4Parser.FOLLOW_basichandshape_in_basichandshape13838);
basichandshape91=this.basichandshape();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_basichandshape.add(basichandshape91.getTree());
break;
}
// AST REWRITE
// elements: basichandshape
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 961:9: -> ^( BASICHDSHP1 ( basichandshape )* )
{
// Ham4Parser.g:961:12: ^( BASICHDSHP1 ( basichandshape )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(BASICHDSHP1, "BASICHDSHP1"), root_1);
// Ham4Parser.g:961:26: ( basichandshape )*
while ( stream_basichandshape.hasNext() ) {
this.adaptor.addChild(root_1, stream_basichandshape.nextTree());
}
stream_basichandshape.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: basichandshape1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("basichandshape1", 19);
}
return retval;
},
// inline static return class
basichandshape_return: (function() {
Ham4Parser.basichandshape_return = function(){};
org.antlr.lang.extend(Ham4Parser.basichandshape_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:964:1: basichandshape : ( handshapeclass | HamNondominant ) ( HamEtc )? ( handbendandthumb )? -> ^( BASICHDSHP ( handshapeclass )? ( HamNondominant )? ( HamEtc )? ( handbendandthumb )? ) ;
// $ANTLR start "basichandshape"
basichandshape: function() {
this.traceIn("basichandshape", 20);
var retval = new Ham4Parser.basichandshape_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNondominant93 = null;
var HamEtc94 = null;
var handshapeclass92 = null;
var handbendandthumb95 = null;
var HamNondominant93_tree=null;
var HamEtc94_tree=null;
var stream_HamNondominant=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNondominant");
var stream_HamEtc=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamEtc");
var stream_handshapeclass=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshapeclass");
var stream_handbendandthumb=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handbendandthumb");
this.trace("ANTLR Parse: basichandshape starts "+this.state.backtracking);
try {
// Ham4Parser.g:986:5: ( ( handshapeclass | HamNondominant ) ( HamEtc )? ( handbendandthumb )? -> ^( BASICHDSHP ( handshapeclass )? ( HamNondominant )? ( HamEtc )? ( handbendandthumb )? ) )
// Ham4Parser.g:986:9: ( handshapeclass | HamNondominant ) ( HamEtc )? ( handbendandthumb )?
// Ham4Parser.g:986:9: ( handshapeclass | HamNondominant )
var alt27=2;
var LA27_0 = this.input.LA(1);
if ( ((LA27_0>=HamFist && LA27_0<=HamFinger2345)||(LA27_0>=HamPinch12 && LA27_0<=HamCee12open)) ) {
alt27=1;
}
else if ( (LA27_0==HamNondominant) ) {
alt27=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 27, 0, this.input);
throw nvae;
}
switch (alt27) {
case 1 :
// Ham4Parser.g:987:13: handshapeclass
this.pushFollow(Ham4Parser.FOLLOW_handshapeclass_in_basichandshape3909);
handshapeclass92=this.handshapeclass();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshapeclass.add(handshapeclass92.getTree());
break;
case 2 :
// Ham4Parser.g:989:13: HamNondominant
HamNondominant93=this.match(this.input,HamNondominant,Ham4Parser.FOLLOW_HamNondominant_in_basichandshape3933); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNondominant.add(HamNondominant93);
break;
}
// Ham4Parser.g:991:9: ( HamEtc )?
var alt28=2;
var LA28_0 = this.input.LA(1);
if ( (LA28_0==HamEtc) ) {
alt28=1;
}
switch (alt28) {
case 1 :
// Ham4Parser.g:991:11: HamEtc
HamEtc94=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_basichandshape3955); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc94);
break;
}
// Ham4Parser.g:992:9: ( handbendandthumb )?
var alt29=2;
var LA29_0 = this.input.LA(1);
if ( ((LA29_0>=HamThumboutmod && LA29_0<=HamThumbacrossmod)||(LA29_0>=HamThumbopenmod && LA29_0<=HamFingerhookedmod)||(LA29_0>=HamDoublebent && LA29_0<=HamDoublehooked)) ) {
alt29=1;
}
switch (alt29) {
case 1 :
// Ham4Parser.g:992:9: handbendandthumb
this.pushFollow(Ham4Parser.FOLLOW_handbendandthumb_in_basichandshape3968);
handbendandthumb95=this.handbendandthumb();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handbendandthumb.add(handbendandthumb95.getTree());
break;
}
// AST REWRITE
// elements: handbendandthumb, handshapeclass, HamEtc, HamNondominant
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 994:9: -> ^( BASICHDSHP ( handshapeclass )? ( HamNondominant )? ( HamEtc )? ( handbendandthumb )? )
{
// Ham4Parser.g:994:12: ^( BASICHDSHP ( handshapeclass )? ( HamNondominant )? ( HamEtc )? ( handbendandthumb )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(BASICHDSHP, "BASICHDSHP"), root_1);
// Ham4Parser.g:994:25: ( handshapeclass )?
if ( stream_handshapeclass.hasNext() ) {
this.adaptor.addChild(root_1, stream_handshapeclass.nextTree());
}
stream_handshapeclass.reset();
// Ham4Parser.g:994:41: ( HamNondominant )?
if ( stream_HamNondominant.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamNondominant.nextNode());
}
stream_HamNondominant.reset();
// Ham4Parser.g:994:57: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:994:65: ( handbendandthumb )?
if ( stream_handbendandthumb.hasNext() ) {
this.adaptor.addChild(root_1, stream_handbendandthumb.nextTree());
}
stream_handbendandthumb.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: basichandshape finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("basichandshape", 20);
}
return retval;
},
// inline static return class
handbendandthumb_return: (function() {
Ham4Parser.handbendandthumb_return = function(){};
org.antlr.lang.extend(Ham4Parser.handbendandthumb_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:997:1: handbendandthumb : ( thumbpos ( fingerbending )? | fingerbending ( thumbpos )? );
// $ANTLR start "handbendandthumb"
handbendandthumb: function() {
this.traceIn("handbendandthumb", 21);
var retval = new Ham4Parser.handbendandthumb_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumbpos96 = null;
var fingerbending97 = null;
var fingerbending98 = null;
var thumbpos99 = null;
this.trace("ANTLR Parse: handbendandthumb starts "+this.state.backtracking);
try {
// Ham4Parser.g:1016:5: ( thumbpos ( fingerbending )? | fingerbending ( thumbpos )? )
var alt32=2;
var LA32_0 = this.input.LA(1);
if ( ((LA32_0>=HamThumboutmod && LA32_0<=HamThumbacrossmod)||LA32_0==HamThumbopenmod) ) {
alt32=1;
}
else if ( ((LA32_0>=HamFingerstraightmod && LA32_0<=HamFingerhookedmod)||(LA32_0>=HamDoublebent && LA32_0<=HamDoublehooked)) ) {
alt32=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 32, 0, this.input);
throw nvae;
}
switch (alt32) {
case 1 :
// Ham4Parser.g:1017:9: thumbpos ( fingerbending )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumbpos_in_handbendandthumb4039);
thumbpos96=this.thumbpos();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbpos96.getTree());
// Ham4Parser.g:1018:9: ( fingerbending )?
var alt30=2;
var LA30_0 = this.input.LA(1);
if ( ((LA30_0>=HamFingerstraightmod && LA30_0<=HamFingerhookedmod)||(LA30_0>=HamDoublebent && LA30_0<=HamDoublehooked)) ) {
alt30=1;
}
switch (alt30) {
case 1 :
// Ham4Parser.g:1018:11: fingerbending
this.pushFollow(Ham4Parser.FOLLOW_fingerbending_in_handbendandthumb4051);
fingerbending97=this.fingerbending();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingerbending97.getTree());
break;
}
break;
case 2 :
// Ham4Parser.g:1020:9: fingerbending ( thumbpos )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_fingerbending_in_handbendandthumb4070);
fingerbending98=this.fingerbending();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingerbending98.getTree());
// Ham4Parser.g:1021:9: ( thumbpos )?
var alt31=2;
var LA31_0 = this.input.LA(1);
if ( ((LA31_0>=HamThumboutmod && LA31_0<=HamThumbacrossmod)||LA31_0==HamThumbopenmod) ) {
alt31=1;
}
switch (alt31) {
case 1 :
// Ham4Parser.g:1021:11: thumbpos
this.pushFollow(Ham4Parser.FOLLOW_thumbpos_in_handbendandthumb4082);
thumbpos99=this.thumbpos();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbpos99.getTree());
break;
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handbendandthumb finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handbendandthumb", 21);
}
return retval;
},
// inline static return class
fingerlist_return: (function() {
Ham4Parser.fingerlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingerlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1024:1: fingerlist : recfingerlist -> ^( FINGERLIST ( recfingerlist )? ) ;
// $ANTLR start "fingerlist"
fingerlist: function() {
this.traceIn("fingerlist", 22);
var retval = new Ham4Parser.fingerlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var recfingerlist100 = null;
var stream_recfingerlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule recfingerlist");
this.trace("ANTLR Parse: fingerlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1039:5: ( recfingerlist -> ^( FINGERLIST ( recfingerlist )? ) )
// Ham4Parser.g:1039:9: recfingerlist
this.pushFollow(Ham4Parser.FOLLOW_recfingerlist_in_fingerlist4114);
recfingerlist100=this.recfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_recfingerlist.add(recfingerlist100.getTree());
// AST REWRITE
// elements: recfingerlist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1040:5: -> ^( FINGERLIST ( recfingerlist )? )
{
// Ham4Parser.g:1040:8: ^( FINGERLIST ( recfingerlist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FINGERLIST, "FINGERLIST"), root_1);
// Ham4Parser.g:1040:21: ( recfingerlist )?
if ( stream_recfingerlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_recfingerlist.nextTree());
}
stream_recfingerlist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingerlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingerlist", 22);
}
return retval;
},
// inline static return class
recfingerlist_return: (function() {
Ham4Parser.recfingerlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.recfingerlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1043:1: recfingerlist : ( ( hsfingeritem )=> hsfingeritem recfingerlist )? ;
// $ANTLR start "recfingerlist"
recfingerlist: function() {
this.traceIn("recfingerlist", 23);
var retval = new Ham4Parser.recfingerlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var hsfingeritem101 = null;
var recfingerlist102 = null;
this.trace("ANTLR Parse: recfingerlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1063:5: ( ( ( hsfingeritem )=> hsfingeritem recfingerlist )? )
// Ham4Parser.g:1064:9: ( ( hsfingeritem )=> hsfingeritem recfingerlist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:1064:9: ( ( hsfingeritem )=> hsfingeritem recfingerlist )?
var alt33=2;
alt33 = this.dfa33.predict(this.input);
switch (alt33) {
case 1 :
// Ham4Parser.g:1065:13: ( hsfingeritem )=> hsfingeritem recfingerlist
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_recfingerlist4223);
hsfingeritem101=this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, hsfingeritem101.getTree());
this.pushFollow(Ham4Parser.FOLLOW_recfingerlist_in_recfingerlist4237);
recfingerlist102=this.recfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, recfingerlist102.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: recfingerlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("recfingerlist", 23);
}
return retval;
},
// inline static return class
cautiousfingerlist_return: (function() {
Ham4Parser.cautiousfingerlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.cautiousfingerlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1072:1: cautiousfingerlist : reccautiousfingerlist -> ^( FINGERLIST ( reccautiousfingerlist )? ) ;
// $ANTLR start "cautiousfingerlist"
cautiousfingerlist: function() {
this.traceIn("cautiousfingerlist", 24);
var retval = new Ham4Parser.cautiousfingerlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var reccautiousfingerlist103 = null;
var stream_reccautiousfingerlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule reccautiousfingerlist");
this.trace("ANTLR Parse: cautiousfingerlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1087:5: ( reccautiousfingerlist -> ^( FINGERLIST ( reccautiousfingerlist )? ) )
// Ham4Parser.g:1087:9: reccautiousfingerlist
this.pushFollow(Ham4Parser.FOLLOW_reccautiousfingerlist_in_cautiousfingerlist4277);
reccautiousfingerlist103=this.reccautiousfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_reccautiousfingerlist.add(reccautiousfingerlist103.getTree());
// AST REWRITE
// elements: reccautiousfingerlist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1088:5: -> ^( FINGERLIST ( reccautiousfingerlist )? )
{
// Ham4Parser.g:1088:8: ^( FINGERLIST ( reccautiousfingerlist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FINGERLIST, "FINGERLIST"), root_1);
// Ham4Parser.g:1088:21: ( reccautiousfingerlist )?
if ( stream_reccautiousfingerlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_reccautiousfingerlist.nextTree());
}
stream_reccautiousfingerlist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: cautiousfingerlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("cautiousfingerlist", 24);
}
return retval;
},
// inline static return class
reccautiousfingerlist_return: (function() {
Ham4Parser.reccautiousfingerlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.reccautiousfingerlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1091:1: reccautiousfingerlist : ( ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist )? ;
// $ANTLR start "reccautiousfingerlist"
reccautiousfingerlist: function() {
this.traceIn("reccautiousfingerlist", 25);
var retval = new Ham4Parser.reccautiousfingerlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var hsfingeritem104 = null;
var reccautiousfingerlist105 = null;
this.trace("ANTLR Parse: reccautiousfingerlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1111:5: ( ( ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist )? )
// Ham4Parser.g:1112:9: ( ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:1112:9: ( ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist )?
var alt34=2;
alt34 = this.dfa34.predict(this.input);
switch (alt34) {
case 1 :
// Ham4Parser.g:1113:13: ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_reccautiousfingerlist4380);
hsfingeritem104=this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, hsfingeritem104.getTree());
this.pushFollow(Ham4Parser.FOLLOW_reccautiousfingerlist_in_reccautiousfingerlist4394);
reccautiousfingerlist105=this.reccautiousfingerlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, reccautiousfingerlist105.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: reccautiousfingerlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("reccautiousfingerlist", 25);
}
return retval;
},
// inline static return class
fingershapelist_return: (function() {
Ham4Parser.fingershapelist_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingershapelist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1120:1: fingershapelist : recfingershapelist -> ^( FISHPLIST ( recfingershapelist )? ) ;
// $ANTLR start "fingershapelist"
fingershapelist: function() {
this.traceIn("fingershapelist", 26);
var retval = new Ham4Parser.fingershapelist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var recfingershapelist106 = null;
var stream_recfingershapelist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule recfingershapelist");
this.trace("ANTLR Parse: fingershapelist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1135:5: ( recfingershapelist -> ^( FISHPLIST ( recfingershapelist )? ) )
// Ham4Parser.g:1135:9: recfingershapelist
this.pushFollow(Ham4Parser.FOLLOW_recfingershapelist_in_fingershapelist4434);
recfingershapelist106=this.recfingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_recfingershapelist.add(recfingershapelist106.getTree());
// AST REWRITE
// elements: recfingershapelist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1136:5: -> ^( FISHPLIST ( recfingershapelist )? )
{
// Ham4Parser.g:1136:8: ^( FISHPLIST ( recfingershapelist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FISHPLIST, "FISHPLIST"), root_1);
// Ham4Parser.g:1136:20: ( recfingershapelist )?
if ( stream_recfingershapelist.hasNext() ) {
this.adaptor.addChild(root_1, stream_recfingershapelist.nextTree());
}
stream_recfingershapelist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingershapelist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingershapelist", 26);
}
return retval;
},
// inline static return class
recfingershapelist_return: (function() {
Ham4Parser.recfingershapelist_return = function(){};
org.antlr.lang.extend(Ham4Parser.recfingershapelist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1139:1: recfingershapelist : ( ( fingershape )=> fingershape recfingershapelist )? ;
// $ANTLR start "recfingershapelist"
recfingershapelist: function() {
this.traceIn("recfingershapelist", 27);
var retval = new Ham4Parser.recfingershapelist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var fingershape107 = null;
var recfingershapelist108 = null;
this.trace("ANTLR Parse: recfingershapelist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1159:5: ( ( ( fingershape )=> fingershape recfingershapelist )? )
// Ham4Parser.g:1160:9: ( ( fingershape )=> fingershape recfingershapelist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:1160:9: ( ( fingershape )=> fingershape recfingershapelist )?
var alt35=2;
alt35 = this.dfa35.predict(this.input);
switch (alt35) {
case 1 :
// Ham4Parser.g:1161:13: ( fingershape )=> fingershape recfingershapelist
this.pushFollow(Ham4Parser.FOLLOW_fingershape_in_recfingershapelist4538);
fingershape107=this.fingershape();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingershape107.getTree());
this.pushFollow(Ham4Parser.FOLLOW_recfingershapelist_in_recfingershapelist4552);
recfingershapelist108=this.recfingershapelist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, recfingershapelist108.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: recfingershapelist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("recfingershapelist", 27);
}
return retval;
},
// inline static return class
fingercrossinglist_return: (function() {
Ham4Parser.fingercrossinglist_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingercrossinglist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1168:1: fingercrossinglist : recfingercrossinglist -> ^( FICRSSLIST ( recfingercrossinglist )? ) ;
// $ANTLR start "fingercrossinglist"
fingercrossinglist: function() {
this.traceIn("fingercrossinglist", 28);
var retval = new Ham4Parser.fingercrossinglist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var recfingercrossinglist109 = null;
var stream_recfingercrossinglist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule recfingercrossinglist");
this.trace("ANTLR Parse: fingercrossinglist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1183:5: ( recfingercrossinglist -> ^( FICRSSLIST ( recfingercrossinglist )? ) )
// Ham4Parser.g:1183:9: recfingercrossinglist
this.pushFollow(Ham4Parser.FOLLOW_recfingercrossinglist_in_fingercrossinglist4592);
recfingercrossinglist109=this.recfingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_recfingercrossinglist.add(recfingercrossinglist109.getTree());
// AST REWRITE
// elements: recfingercrossinglist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1184:5: -> ^( FICRSSLIST ( recfingercrossinglist )? )
{
// Ham4Parser.g:1184:8: ^( FICRSSLIST ( recfingercrossinglist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FICRSSLIST, "FICRSSLIST"), root_1);
// Ham4Parser.g:1184:21: ( recfingercrossinglist )?
if ( stream_recfingercrossinglist.hasNext() ) {
this.adaptor.addChild(root_1, stream_recfingercrossinglist.nextTree());
}
stream_recfingercrossinglist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingercrossinglist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingercrossinglist", 28);
}
return retval;
},
// inline static return class
recfingercrossinglist_return: (function() {
Ham4Parser.recfingercrossinglist_return = function(){};
org.antlr.lang.extend(Ham4Parser.recfingercrossinglist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1187:1: recfingercrossinglist : ( ( fingercrossing )=> fingercrossing recfingercrossinglist )? ;
// $ANTLR start "recfingercrossinglist"
recfingercrossinglist: function() {
this.traceIn("recfingercrossinglist", 29);
var retval = new Ham4Parser.recfingercrossinglist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var fingercrossing110 = null;
var recfingercrossinglist111 = null;
this.trace("ANTLR Parse: recfingercrossinglist starts "+this.state.backtracking);
try {
// Ham4Parser.g:1207:5: ( ( ( fingercrossing )=> fingercrossing recfingercrossinglist )? )
// Ham4Parser.g:1208:9: ( ( fingercrossing )=> fingercrossing recfingercrossinglist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:1208:9: ( ( fingercrossing )=> fingercrossing recfingercrossinglist )?
var alt36=2;
alt36 = this.dfa36.predict(this.input);
switch (alt36) {
case 1 :
// Ham4Parser.g:1209:13: ( fingercrossing )=> fingercrossing recfingercrossinglist
this.pushFollow(Ham4Parser.FOLLOW_fingercrossing_in_recfingercrossinglist4693);
fingercrossing110=this.fingercrossing();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingercrossing110.getTree());
this.pushFollow(Ham4Parser.FOLLOW_recfingercrossinglist_in_recfingercrossinglist4707);
recfingercrossinglist111=this.recfingercrossinglist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, recfingercrossinglist111.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: recfingercrossinglist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("recfingercrossinglist", 29);
}
return retval;
},
// inline static return class
hsfingeritem_return: (function() {
Ham4Parser.hsfingeritem_return = function(){};
org.antlr.lang.extend(Ham4Parser.hsfingeritem_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1216:1: hsfingeritem : finger ( HamLargemod )? -> ^( HSFINGERITEM finger ( HamLargemod )? ) ;
// $ANTLR start "hsfingeritem"
hsfingeritem: function() {
this.traceIn("hsfingeritem", 30);
var retval = new Ham4Parser.hsfingeritem_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamLargemod113 = null;
var finger112 = null;
var HamLargemod113_tree=null;
var stream_HamLargemod=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamLargemod");
var stream_finger=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule finger");
this.trace("ANTLR Parse: hsfingeritem starts "+this.state.backtracking);
try {
// Ham4Parser.g:1233:5: ( finger ( HamLargemod )? -> ^( HSFINGERITEM finger ( HamLargemod )? ) )
// Ham4Parser.g:1233:9: finger ( HamLargemod )?
this.pushFollow(Ham4Parser.FOLLOW_finger_in_hsfingeritem4763);
finger112=this.finger();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_finger.add(finger112.getTree());
// Ham4Parser.g:1234:9: ( HamLargemod )?
var alt37=2;
var LA37_0 = this.input.LA(1);
if ( (LA37_0==HamLargemod) ) {
alt37=1;
}
switch (alt37) {
case 1 :
// Ham4Parser.g:1234:11: HamLargemod
HamLargemod113=this.match(this.input,HamLargemod,Ham4Parser.FOLLOW_HamLargemod_in_hsfingeritem4775); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamLargemod.add(HamLargemod113);
break;
}
// AST REWRITE
// elements: HamLargemod, finger
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1236:9: -> ^( HSFINGERITEM finger ( HamLargemod )? )
{
// Ham4Parser.g:1236:12: ^( HSFINGERITEM finger ( HamLargemod )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HSFINGERITEM, "HSFINGERITEM"), root_1);
this.adaptor.addChild(root_1, stream_finger.nextTree());
// Ham4Parser.g:1236:34: ( HamLargemod )?
if ( stream_HamLargemod.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamLargemod.nextNode());
}
stream_HamLargemod.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: hsfingeritem finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("hsfingeritem", 30);
}
return retval;
},
// inline static return class
digit_return: (function() {
Ham4Parser.digit_return = function(){};
org.antlr.lang.extend(Ham4Parser.digit_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1239:1: digit : ( thumb | finger );
// $ANTLR start "digit"
digit: function() {
this.traceIn("digit", 31);
var retval = new Ham4Parser.digit_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumb114 = null;
var finger115 = null;
this.trace("ANTLR Parse: digit starts "+this.state.backtracking);
try {
// Ham4Parser.g:1254:5: ( thumb | finger )
var alt38=2;
var LA38_0 = this.input.LA(1);
if ( (LA38_0==HamThumb) ) {
alt38=1;
}
else if ( ((LA38_0>=HamIndexfinger && LA38_0<=HamPinky)) ) {
alt38=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 38, 0, this.input);
throw nvae;
}
switch (alt38) {
case 1 :
// Ham4Parser.g:1254:9: thumb
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumb_in_digit4835);
thumb114=this.thumb();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumb114.getTree());
break;
case 2 :
// Ham4Parser.g:1255:9: finger
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_finger_in_digit4845);
finger115=this.finger();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, finger115.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: digit finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("digit", 31);
}
return retval;
},
// inline static return class
hsdigit_return: (function() {
Ham4Parser.hsdigit_return = function(){};
org.antlr.lang.extend(Ham4Parser.hsdigit_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1258:1: hsdigit : ( thumb | hsfingeritem );
// $ANTLR start "hsdigit"
hsdigit: function() {
this.traceIn("hsdigit", 32);
var retval = new Ham4Parser.hsdigit_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumb116 = null;
var hsfingeritem117 = null;
this.trace("ANTLR Parse: hsdigit starts "+this.state.backtracking);
try {
// Ham4Parser.g:1273:5: ( thumb | hsfingeritem )
var alt39=2;
var LA39_0 = this.input.LA(1);
if ( (LA39_0==HamThumb) ) {
alt39=1;
}
else if ( ((LA39_0>=HamIndexfinger && LA39_0<=HamPinky)) ) {
alt39=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 39, 0, this.input);
throw nvae;
}
switch (alt39) {
case 1 :
// Ham4Parser.g:1273:9: thumb
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumb_in_hsdigit4895);
thumb116=this.thumb();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumb116.getTree());
break;
case 2 :
// Ham4Parser.g:1274:9: hsfingeritem
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_hsdigit4905);
hsfingeritem117=this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, hsfingeritem117.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: hsdigit finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("hsdigit", 32);
}
return retval;
},
// inline static return class
fingershape_return: (function() {
Ham4Parser.fingershape_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingershape_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1277:1: fingershape : digit fingerbending -> ^( FSHAPE digit fingerbending ) ;
// $ANTLR start "fingershape"
fingershape: function() {
this.traceIn("fingershape", 33);
var retval = new Ham4Parser.fingershape_return();
retval.start = this.input.LT(1);
var root_0 = null;
var digit118 = null;
var fingerbending119 = null;
var stream_fingerbending=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingerbending");
var stream_digit=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule digit");
this.trace("ANTLR Parse: fingershape starts "+this.state.backtracking);
try {
// Ham4Parser.g:1294:5: ( digit fingerbending -> ^( FSHAPE digit fingerbending ) )
// Ham4Parser.g:1294:9: digit fingerbending
this.pushFollow(Ham4Parser.FOLLOW_digit_in_fingershape4934);
digit118=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_digit.add(digit118.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingerbending_in_fingershape4944);
fingerbending119=this.fingerbending();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerbending.add(fingerbending119.getTree());
// AST REWRITE
// elements: fingerbending, digit
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1297:9: -> ^( FSHAPE digit fingerbending )
{
// Ham4Parser.g:1297:12: ^( FSHAPE digit fingerbending )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FSHAPE, "FSHAPE"), root_1);
this.adaptor.addChild(root_1, stream_digit.nextTree());
this.adaptor.addChild(root_1, stream_fingerbending.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingershape finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingershape", 33);
}
return retval;
},
// inline static return class
fingercrossing_return: (function() {
Ham4Parser.fingercrossing_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingercrossing_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1300:1: fingercrossing : d1= digit fingerpart d2= digit -> ^( FCROSSING $d1 fingerpart $d2) ;
// $ANTLR start "fingercrossing"
fingercrossing: function() {
this.traceIn("fingercrossing", 34);
var retval = new Ham4Parser.fingercrossing_return();
retval.start = this.input.LT(1);
var root_0 = null;
var d1 = null;
var d2 = null;
var fingerpart120 = null;
var stream_fingerpart=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingerpart");
var stream_digit=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule digit");
this.trace("ANTLR Parse: fingercrossing starts "+this.state.backtracking);
try {
// Ham4Parser.g:1318:5: (d1= digit fingerpart d2= digit -> ^( FCROSSING $d1 fingerpart $d2) )
// Ham4Parser.g:1318:9: d1= digit fingerpart d2= digit
this.pushFollow(Ham4Parser.FOLLOW_digit_in_fingercrossing5004);
d1=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_digit.add(d1.getTree());
this.pushFollow(Ham4Parser.FOLLOW_fingerpart_in_fingercrossing5014);
fingerpart120=this.fingerpart();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerpart.add(fingerpart120.getTree());
this.pushFollow(Ham4Parser.FOLLOW_digit_in_fingercrossing5028);
d2=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_digit.add(d2.getTree());
// AST REWRITE
// elements: d1, fingerpart, d2
// token labels: 
// rule labels: d1, d2, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_d1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token d1",d1!=null?d1.tree:null);
var stream_d2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token d2",d2!=null?d2.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1322:9: -> ^( FCROSSING $d1 fingerpart $d2)
{
// Ham4Parser.g:1322:12: ^( FCROSSING $d1 fingerpart $d2)
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FCROSSING, "FCROSSING"), root_1);
this.adaptor.addChild(root_1, stream_d1.nextTree());
this.adaptor.addChild(root_1, stream_fingerpart.nextTree());
this.adaptor.addChild(root_1, stream_d2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingercrossing finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingercrossing", 34);
}
return retval;
},
// inline static return class
thumbspecial_return: (function() {
Ham4Parser.thumbspecial_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbspecial_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1325:1: thumbspecial : ( thumbbetween | thumbextra );
// $ANTLR start "thumbspecial"
thumbspecial: function() {
this.traceIn("thumbspecial", 35);
var retval = new Ham4Parser.thumbspecial_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumbbetween121 = null;
var thumbextra122 = null;
this.trace("ANTLR Parse: thumbspecial starts "+this.state.backtracking);
try {
// Ham4Parser.g:1340:5: ( thumbbetween | thumbextra )
var alt40=2;
var LA40_0 = this.input.LA(1);
if ( ((LA40_0>=HamIndexfinger && LA40_0<=HamPinky)||LA40_0==HamBetween) ) {
alt40=1;
}
else if ( (LA40_0==HamThumb||(LA40_0>=HamFingertip && LA40_0<=HamFingerside)) ) {
alt40=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 40, 0, this.input);
throw nvae;
}
switch (alt40) {
case 1 :
// Ham4Parser.g:1340:9: thumbbetween
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumbbetween_in_thumbspecial5088);
thumbbetween121=this.thumbbetween();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbbetween121.getTree());
break;
case 2 :
// Ham4Parser.g:1341:9: thumbextra
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumbextra_in_thumbspecial5098);
thumbextra122=this.thumbextra();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbextra122.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbspecial finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbspecial", 35);
}
return retval;
},
// inline static return class
thumbbetween_return: (function() {
Ham4Parser.thumbbetween_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbbetween_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1344:1: thumbbetween : ( thumbbetweenexplicit | thumbbetweendefault );
// $ANTLR start "thumbbetween"
thumbbetween: function() {
this.traceIn("thumbbetween", 36);
var retval = new Ham4Parser.thumbbetween_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumbbetweenexplicit123 = null;
var thumbbetweendefault124 = null;
this.trace("ANTLR Parse: thumbbetween starts "+this.state.backtracking);
try {
// Ham4Parser.g:1359:5: ( thumbbetweenexplicit | thumbbetweendefault )
var alt41=2;
var LA41_0 = this.input.LA(1);
if ( ((LA41_0>=HamIndexfinger && LA41_0<=HamPinky)) ) {
alt41=1;
}
else if ( (LA41_0==HamBetween) ) {
alt41=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 41, 0, this.input);
throw nvae;
}
switch (alt41) {
case 1 :
// Ham4Parser.g:1359:9: thumbbetweenexplicit
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumbbetweenexplicit_in_thumbbetween5127);
thumbbetweenexplicit123=this.thumbbetweenexplicit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbbetweenexplicit123.getTree());
break;
case 2 :
// Ham4Parser.g:1360:9: thumbbetweendefault
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_thumbbetweendefault_in_thumbbetween5137);
thumbbetweendefault124=this.thumbbetweendefault();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, thumbbetweendefault124.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbbetween finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbbetween", 36);
}
return retval;
},
// inline static return class
thumbbetweenexplicit_return: (function() {
Ham4Parser.thumbbetweenexplicit_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbbetweenexplicit_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1363:1: thumbbetweenexplicit : finger HamBetween finger -> ^( THSPECIAL ^( HamBetween ( finger )* ) ) ;
// $ANTLR start "thumbbetweenexplicit"
thumbbetweenexplicit: function() {
this.traceIn("thumbbetweenexplicit", 37);
var retval = new Ham4Parser.thumbbetweenexplicit_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween126 = null;
var finger125 = null;
var finger127 = null;
var HamBetween126_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_finger=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule finger");
this.trace("ANTLR Parse: thumbbetweenexplicit starts "+this.state.backtracking);
try {
// Ham4Parser.g:1381:5: ( finger HamBetween finger -> ^( THSPECIAL ^( HamBetween ( finger )* ) ) )
// Ham4Parser.g:1381:9: finger HamBetween finger
this.pushFollow(Ham4Parser.FOLLOW_finger_in_thumbbetweenexplicit5166);
finger125=this.finger();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_finger.add(finger125.getTree());
HamBetween126=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_thumbbetweenexplicit5176); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween126);
this.pushFollow(Ham4Parser.FOLLOW_finger_in_thumbbetweenexplicit5187);
finger127=this.finger();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_finger.add(finger127.getTree());
// AST REWRITE
// elements: HamBetween, finger
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1385:9: -> ^( THSPECIAL ^( HamBetween ( finger )* ) )
{
// Ham4Parser.g:1385:12: ^( THSPECIAL ^( HamBetween ( finger )* ) )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(THSPECIAL, "THSPECIAL"), root_1);
// Ham4Parser.g:1385:24: ^( HamBetween ( finger )* )
{
var root_2 = this.adaptor.nil();
root_2 = this.adaptor.becomeRoot(stream_HamBetween.nextNode(), root_2);
// Ham4Parser.g:1385:37: ( finger )*
while ( stream_finger.hasNext() ) {
this.adaptor.addChild(root_2, stream_finger.nextTree());
}
stream_finger.reset();
this.adaptor.addChild(root_1, root_2);
}
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbbetweenexplicit finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbbetweenexplicit", 37);
}
return retval;
},
// inline static return class
thumbbetweendefault_return: (function() {
Ham4Parser.thumbbetweendefault_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbbetweendefault_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1388:1: thumbbetweendefault : HamBetween -> ^( THSPECIAL HamBetween ) ;
// $ANTLR start "thumbbetweendefault"
thumbbetweendefault: function() {
this.traceIn("thumbbetweendefault", 38);
var retval = new Ham4Parser.thumbbetweendefault_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween128 = null;
var HamBetween128_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
this.trace("ANTLR Parse: thumbbetweendefault starts "+this.state.backtracking);
try {
// Ham4Parser.g:1404:5: ( HamBetween -> ^( THSPECIAL HamBetween ) )
// Ham4Parser.g:1404:9: HamBetween
HamBetween128=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_thumbbetweendefault5246); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween128);
// AST REWRITE
// elements: HamBetween
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1406:9: -> ^( THSPECIAL HamBetween )
{
// Ham4Parser.g:1406:12: ^( THSPECIAL HamBetween )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(THSPECIAL, "THSPECIAL"), root_1);
this.adaptor.addChild(root_1, stream_HamBetween.nextNode());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbbetweendefault finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbbetweendefault", 38);
}
return retval;
},
// inline static return class
thumbextra_return: (function() {
Ham4Parser.thumbextra_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbextra_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1409:1: thumbextra : ( thumb | fingerpart ) -> ^( THSPECIAL ( thumb )? ( fingerpart )? ) ;
// $ANTLR start "thumbextra"
thumbextra: function() {
this.traceIn("thumbextra", 39);
var retval = new Ham4Parser.thumbextra_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumb129 = null;
var fingerpart130 = null;
var stream_fingerpart=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingerpart");
var stream_thumb=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumb");
this.trace("ANTLR Parse: thumbextra starts "+this.state.backtracking);
try {
// Ham4Parser.g:1429:5: ( ( thumb | fingerpart ) -> ^( THSPECIAL ( thumb )? ( fingerpart )? ) )
// Ham4Parser.g:1430:5: ( thumb | fingerpart )
// Ham4Parser.g:1430:5: ( thumb | fingerpart )
var alt42=2;
var LA42_0 = this.input.LA(1);
if ( (LA42_0==HamThumb) ) {
alt42=1;
}
else if ( ((LA42_0>=HamFingertip && LA42_0<=HamFingerside)) ) {
alt42=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 42, 0, this.input);
throw nvae;
}
switch (alt42) {
case 1 :
// Ham4Parser.g:1431:9: thumb
this.pushFollow(Ham4Parser.FOLLOW_thumb_in_thumbextra5312);
thumb129=this.thumb();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumb.add(thumb129.getTree());
break;
case 2 :
// Ham4Parser.g:1433:9: fingerpart
this.pushFollow(Ham4Parser.FOLLOW_fingerpart_in_thumbextra5328);
fingerpart130=this.fingerpart();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerpart.add(fingerpart130.getTree());
break;
}
// AST REWRITE
// elements: fingerpart, thumb
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1435:5: -> ^( THSPECIAL ( thumb )? ( fingerpart )? )
{
// Ham4Parser.g:1435:8: ^( THSPECIAL ( thumb )? ( fingerpart )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(THSPECIAL, "THSPECIAL"), root_1);
// Ham4Parser.g:1435:20: ( thumb )?
if ( stream_thumb.hasNext() ) {
this.adaptor.addChild(root_1, stream_thumb.nextTree());
}
stream_thumb.reset();
// Ham4Parser.g:1435:27: ( fingerpart )?
if ( stream_fingerpart.hasNext() ) {
this.adaptor.addChild(root_1, stream_fingerpart.nextTree());
}
stream_fingerpart.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbextra finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbextra", 39);
}
return retval;
},
// inline static return class
extfidir2_return: (function() {
Ham4Parser.extfidir2_return = function(){};
org.antlr.lang.extend(Ham4Parser.extfidir2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1441:1: extfidir2 : ( extfidir1 | splitextfidir2 ) -> ^( EXTFIDIR2 ( extfidir1 )? ( splitextfidir2 )? ) ;
// $ANTLR start "extfidir2"
extfidir2: function() {
this.traceIn("extfidir2", 40);
var retval = new Ham4Parser.extfidir2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var extfidir1131 = null;
var splitextfidir2132 = null;
var stream_splitextfidir2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splitextfidir2");
var stream_extfidir1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir1");
this.trace("ANTLR Parse: extfidir2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1461:5: ( ( extfidir1 | splitextfidir2 ) -> ^( EXTFIDIR2 ( extfidir1 )? ( splitextfidir2 )? ) )
// Ham4Parser.g:1462:5: ( extfidir1 | splitextfidir2 )
// Ham4Parser.g:1462:5: ( extfidir1 | splitextfidir2 )
var alt43=2;
var LA43_0 = this.input.LA(1);
if ( ((LA43_0>=HamExtfingeru && LA43_0<=HamExtfingeruo)) ) {
alt43=1;
}
else if ( (LA43_0==HamParbegin) ) {
alt43=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 43, 0, this.input);
throw nvae;
}
switch (alt43) {
case 1 :
// Ham4Parser.g:1463:9: extfidir1
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_extfidir25394);
extfidir1131=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(extfidir1131.getTree());
break;
case 2 :
// Ham4Parser.g:1465:9: splitextfidir2
this.pushFollow(Ham4Parser.FOLLOW_splitextfidir2_in_extfidir25410);
splitextfidir2132=this.splitextfidir2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitextfidir2.add(splitextfidir2132.getTree());
break;
}
// AST REWRITE
// elements: splitextfidir2, extfidir1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1467:5: -> ^( EXTFIDIR2 ( extfidir1 )? ( splitextfidir2 )? )
{
// Ham4Parser.g:1467:8: ^( EXTFIDIR2 ( extfidir1 )? ( splitextfidir2 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(EXTFIDIR2, "EXTFIDIR2"), root_1);
// Ham4Parser.g:1467:20: ( extfidir1 )?
if ( stream_extfidir1.hasNext() ) {
this.adaptor.addChild(root_1, stream_extfidir1.nextTree());
}
stream_extfidir1.reset();
// Ham4Parser.g:1467:31: ( splitextfidir2 )?
if ( stream_splitextfidir2.hasNext() ) {
this.adaptor.addChild(root_1, stream_splitextfidir2.nextTree());
}
stream_splitextfidir2.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: extfidir2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("extfidir2", 40);
}
return retval;
},
// inline static return class
splitextfidir2_return: (function() {
Ham4Parser.splitextfidir2_return = function(){};
org.antlr.lang.extend(Ham4Parser.splitextfidir2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1470:1: splitextfidir2 : HamParbegin extfidir1 HamPlus extfidir1 HamParend ;
// $ANTLR start "splitextfidir2"
splitextfidir2: function() {
this.traceIn("splitextfidir2", 41);
var retval = new Ham4Parser.splitextfidir2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin133 = null;
var HamPlus135 = null;
var HamParend137 = null;
var extfidir1134 = null;
var extfidir1136 = null;
var HamParbegin133_tree=null;
var HamPlus135_tree=null;
var HamParend137_tree=null;
this.trace("ANTLR Parse: splitextfidir2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1488:5: ( HamParbegin extfidir1 HamPlus extfidir1 HamParend )
// Ham4Parser.g:1488:9: HamParbegin extfidir1 HamPlus extfidir1 HamParend
root_0 = this.adaptor.nil();
HamParbegin133=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splitextfidir25461); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_splitextfidir25473);
extfidir1134=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, extfidir1134.getTree());
HamPlus135=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splitextfidir25483); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_splitextfidir25495);
extfidir1136=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, extfidir1136.getTree());
HamParend137=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splitextfidir25505); if (this.state.failed) return retval;
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splitextfidir2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splitextfidir2", 41);
}
return retval;
},
// inline static return class
extfidir1_return: (function() {
Ham4Parser.extfidir1_return = function(){};
org.antlr.lang.extend(Ham4Parser.extfidir1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1495:1: extfidir1 : extfidir ( HamBetween extfidir )? ( HamOrirelative )? -> ^( EXTFIDIR1 ( extfidir )* ( HamOrirelative )* ) ;
// $ANTLR start "extfidir1"
extfidir1: function() {
this.traceIn("extfidir1", 42);
var retval = new Ham4Parser.extfidir1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween139 = null;
var HamOrirelative141 = null;
var extfidir138 = null;
var extfidir140 = null;
var HamBetween139_tree=null;
var HamOrirelative141_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_HamOrirelative=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamOrirelative");
var stream_extfidir=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir");
this.trace("ANTLR Parse: extfidir1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1517:5: ( extfidir ( HamBetween extfidir )? ( HamOrirelative )? -> ^( EXTFIDIR1 ( extfidir )* ( HamOrirelative )* ) )
// Ham4Parser.g:1517:9: extfidir ( HamBetween extfidir )? ( HamOrirelative )?
this.pushFollow(Ham4Parser.FOLLOW_extfidir_in_extfidir15536);
extfidir138=this.extfidir();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir.add(extfidir138.getTree());
// Ham4Parser.g:1518:9: ( HamBetween extfidir )?
var alt44=2;
var LA44_0 = this.input.LA(1);
if ( (LA44_0==HamBetween) ) {
alt44=1;
}
switch (alt44) {
case 1 :
// Ham4Parser.g:1519:13: HamBetween extfidir
HamBetween139=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_extfidir15560); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween139);
this.pushFollow(Ham4Parser.FOLLOW_extfidir_in_extfidir15574);
extfidir140=this.extfidir();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir.add(extfidir140.getTree());
break;
}
// Ham4Parser.g:1522:9: ( HamOrirelative )?
var alt45=2;
var LA45_0 = this.input.LA(1);
if ( (LA45_0==HamOrirelative) ) {
alt45=1;
}
switch (alt45) {
case 1 :
// Ham4Parser.g:1523:13: HamOrirelative
HamOrirelative141=this.match(this.input,HamOrirelative,Ham4Parser.FOLLOW_HamOrirelative_in_extfidir15609); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamOrirelative.add(HamOrirelative141);
break;
}
// AST REWRITE
// elements: HamOrirelative, extfidir
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1525:9: -> ^( EXTFIDIR1 ( extfidir )* ( HamOrirelative )* )
{
// Ham4Parser.g:1525:12: ^( EXTFIDIR1 ( extfidir )* ( HamOrirelative )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(EXTFIDIR1, "EXTFIDIR1"), root_1);
// Ham4Parser.g:1525:24: ( extfidir )*
while ( stream_extfidir.hasNext() ) {
this.adaptor.addChild(root_1, stream_extfidir.nextTree());
}
stream_extfidir.reset();
// Ham4Parser.g:1525:34: ( HamOrirelative )*
while ( stream_HamOrirelative.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamOrirelative.nextNode());
}
stream_HamOrirelative.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: extfidir1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("extfidir1", 42);
}
return retval;
},
// inline static return class
palmor2_return: (function() {
Ham4Parser.palmor2_return = function(){};
org.antlr.lang.extend(Ham4Parser.palmor2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1531:1: palmor2 : ( palmor1 | splitpalmor2 ) -> ^( PALMOR2 ( palmor1 )? ( splitpalmor2 )? ) ;
// $ANTLR start "palmor2"
palmor2: function() {
this.traceIn("palmor2", 43);
var retval = new Ham4Parser.palmor2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var palmor1142 = null;
var splitpalmor2143 = null;
var stream_splitpalmor2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splitpalmor2");
var stream_palmor1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor1");
this.trace("ANTLR Parse: palmor2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1551:5: ( ( palmor1 | splitpalmor2 ) -> ^( PALMOR2 ( palmor1 )? ( splitpalmor2 )? ) )
// Ham4Parser.g:1552:5: ( palmor1 | splitpalmor2 )
// Ham4Parser.g:1552:5: ( palmor1 | splitpalmor2 )
var alt46=2;
var LA46_0 = this.input.LA(1);
if ( ((LA46_0>=HamPalmu && LA46_0<=HamPalmul)) ) {
alt46=1;
}
else if ( (LA46_0==HamParbegin) ) {
alt46=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 46, 0, this.input);
throw nvae;
}
switch (alt46) {
case 1 :
// Ham4Parser.g:1553:9: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_palmor25684);
palmor1142=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1142.getTree());
break;
case 2 :
// Ham4Parser.g:1555:9: splitpalmor2
this.pushFollow(Ham4Parser.FOLLOW_splitpalmor2_in_palmor25700);
splitpalmor2143=this.splitpalmor2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitpalmor2.add(splitpalmor2143.getTree());
break;
}
// AST REWRITE
// elements: splitpalmor2, palmor1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1557:5: -> ^( PALMOR2 ( palmor1 )? ( splitpalmor2 )? )
{
// Ham4Parser.g:1557:8: ^( PALMOR2 ( palmor1 )? ( splitpalmor2 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(PALMOR2, "PALMOR2"), root_1);
// Ham4Parser.g:1557:18: ( palmor1 )?
if ( stream_palmor1.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
}
stream_palmor1.reset();
// Ham4Parser.g:1557:27: ( splitpalmor2 )?
if ( stream_splitpalmor2.hasNext() ) {
this.adaptor.addChild(root_1, stream_splitpalmor2.nextTree());
}
stream_splitpalmor2.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: palmor2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("palmor2", 43);
}
return retval;
},
// inline static return class
splitpalmor2_return: (function() {
Ham4Parser.splitpalmor2_return = function(){};
org.antlr.lang.extend(Ham4Parser.splitpalmor2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1560:1: splitpalmor2 : HamParbegin palmor1 HamPlus palmor1 HamParend ;
// $ANTLR start "splitpalmor2"
splitpalmor2: function() {
this.traceIn("splitpalmor2", 44);
var retval = new Ham4Parser.splitpalmor2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin144 = null;
var HamPlus146 = null;
var HamParend148 = null;
var palmor1145 = null;
var palmor1147 = null;
var HamParbegin144_tree=null;
var HamPlus146_tree=null;
var HamParend148_tree=null;
this.trace("ANTLR Parse: splitpalmor2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1578:5: ( HamParbegin palmor1 HamPlus palmor1 HamParend )
// Ham4Parser.g:1578:9: HamParbegin palmor1 HamPlus palmor1 HamParend
root_0 = this.adaptor.nil();
HamParbegin144=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splitpalmor25751); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_splitpalmor25763);
palmor1145=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, palmor1145.getTree());
HamPlus146=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splitpalmor25773); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_splitpalmor25785);
palmor1147=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, palmor1147.getTree());
HamParend148=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splitpalmor25795); if (this.state.failed) return retval;
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splitpalmor2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splitpalmor2", 44);
}
return retval;
},
// inline static return class
palmor1_return: (function() {
Ham4Parser.palmor1_return = function(){};
org.antlr.lang.extend(Ham4Parser.palmor1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1585:1: palmor1 : palmor ( HamBetween palmor | HamEtc )? ( HamOrirelative )? -> ^( PALMOR1 ( palmor )* ( HamEtc )* ( HamOrirelative )* ) ;
// $ANTLR start "palmor1"
palmor1: function() {
this.traceIn("palmor1", 45);
var retval = new Ham4Parser.palmor1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween150 = null;
var HamEtc152 = null;
var HamOrirelative153 = null;
var palmor149 = null;
var palmor151 = null;
var HamBetween150_tree=null;
var HamEtc152_tree=null;
var HamOrirelative153_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_HamEtc=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamEtc");
var stream_HamOrirelative=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamOrirelative");
var stream_palmor=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor");
this.trace("ANTLR Parse: palmor1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1609:5: ( palmor ( HamBetween palmor | HamEtc )? ( HamOrirelative )? -> ^( PALMOR1 ( palmor )* ( HamEtc )* ( HamOrirelative )* ) )
// Ham4Parser.g:1609:9: palmor ( HamBetween palmor | HamEtc )? ( HamOrirelative )?
this.pushFollow(Ham4Parser.FOLLOW_palmor_in_palmor15826);
palmor149=this.palmor();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor.add(palmor149.getTree());
// Ham4Parser.g:1610:9: ( HamBetween palmor | HamEtc )?
var alt47=3;
var LA47_0 = this.input.LA(1);
if ( (LA47_0==HamBetween) ) {
alt47=1;
}
else if ( (LA47_0==HamEtc) ) {
alt47=2;
}
switch (alt47) {
case 1 :
// Ham4Parser.g:1611:13: HamBetween palmor
HamBetween150=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_palmor15850); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween150);
this.pushFollow(Ham4Parser.FOLLOW_palmor_in_palmor15864);
palmor151=this.palmor();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor.add(palmor151.getTree());
break;
case 2 :
// Ham4Parser.g:1614:13: HamEtc
HamEtc152=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_palmor15888); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc152);
break;
}
// Ham4Parser.g:1616:9: ( HamOrirelative )?
var alt48=2;
var LA48_0 = this.input.LA(1);
if ( (LA48_0==HamOrirelative) ) {
alt48=1;
}
switch (alt48) {
case 1 :
// Ham4Parser.g:1617:13: HamOrirelative
HamOrirelative153=this.match(this.input,HamOrirelative,Ham4Parser.FOLLOW_HamOrirelative_in_palmor15923); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamOrirelative.add(HamOrirelative153);
break;
}
// AST REWRITE
// elements: palmor, HamEtc, HamOrirelative
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1619:9: -> ^( PALMOR1 ( palmor )* ( HamEtc )* ( HamOrirelative )* )
{
// Ham4Parser.g:1619:12: ^( PALMOR1 ( palmor )* ( HamEtc )* ( HamOrirelative )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(PALMOR1, "PALMOR1"), root_1);
// Ham4Parser.g:1619:22: ( palmor )*
while ( stream_palmor.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor.nextTree());
}
stream_palmor.reset();
// Ham4Parser.g:1619:30: ( HamEtc )*
while ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:1619:38: ( HamOrirelative )*
while ( stream_HamOrirelative.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamOrirelative.nextNode());
}
stream_HamOrirelative.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: palmor1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("palmor1", 45);
}
return retval;
},
// inline static return class
location2_return: (function() {
Ham4Parser.location2_return = function(){};
org.antlr.lang.extend(Ham4Parser.location2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1625:1: location2 : ( location1as2 | location2not1 ) ;
// $ANTLR start "location2"
location2: function() {
this.traceIn("location2", 46);
var retval = new Ham4Parser.location2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var location1as2154 = null;
var location2not1155 = null;
this.trace("ANTLR Parse: location2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1644:5: ( ( location1as2 | location2not1 ) )
// Ham4Parser.g:1645:5: ( location1as2 | location2not1 )
root_0 = this.adaptor.nil();
// Ham4Parser.g:1645:5: ( location1as2 | location2not1 )
var alt49=2;
alt49 = this.dfa49.predict(this.input);
switch (alt49) {
case 1 :
// Ham4Parser.g:1646:9: location1as2
this.pushFollow(Ham4Parser.FOLLOW_location1as2_in_location26001);
location1as2154=this.location1as2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, location1as2154.getTree());
break;
case 2 :
// Ham4Parser.g:1648:9: location2not1
this.pushFollow(Ham4Parser.FOLLOW_location2not1_in_location26017);
location2not1155=this.location2not1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, location2not1155.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: location2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("location2", 46);
}
return retval;
},
// inline static return class
location1as2_return: (function() {
Ham4Parser.location1as2_return = function(){};
org.antlr.lang.extend(Ham4Parser.location1as2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1652:1: location1as2 : location1 -> ^( LOC2 location1 ) ;
// $ANTLR start "location1as2"
location1as2: function() {
this.traceIn("location1as2", 47);
var retval = new Ham4Parser.location1as2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var location1156 = null;
var stream_location1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location1");
this.trace("ANTLR Parse: location1as2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1667:5: ( location1 -> ^( LOC2 location1 ) )
// Ham4Parser.g:1667:9: location1
this.pushFollow(Ham4Parser.FOLLOW_location1_in_location1as26052);
location1156=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location1156.getTree());
// AST REWRITE
// elements: location1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1668:9: -> ^( LOC2 location1 )
{
// Ham4Parser.g:1668:12: ^( LOC2 location1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOC2, "LOC2"), root_1);
this.adaptor.addChild(root_1, stream_location1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: location1as2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("location1as2", 47);
}
return retval;
},
// inline static return class
location2not1_return: (function() {
Ham4Parser.location2not1_return = function(){};
org.antlr.lang.extend(Ham4Parser.location2not1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1671:1: location2not1 : ( ( handconstellation )=> handconstellation ( HamNeutralspace ( HamArmextended )? | ( locationbody )? ) -> ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? ) | HamParbegin location1 HamPlus location1 HamParend -> ^( LOC2 ( location1 )* ) ) ;
// $ANTLR start "location2not1"
location2not1: function() {
this.traceIn("location2not1", 48);
var retval = new Ham4Parser.location2not1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNeutralspace158 = null;
var HamArmextended159 = null;
var HamParbegin161 = null;
var HamPlus163 = null;
var HamParend165 = null;
var handconstellation157 = null;
var locationbody160 = null;
var location1162 = null;
var location1164 = null;
var HamNeutralspace158_tree=null;
var HamArmextended159_tree=null;
var HamParbegin161_tree=null;
var HamPlus163_tree=null;
var HamParend165_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamArmextended=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamArmextended");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_HamNeutralspace=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNeutralspace");
var stream_location1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location1");
var stream_locationbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationbody");
var stream_handconstellation=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconstellation");
this.trace("ANTLR Parse: location2not1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1704:5: ( ( ( handconstellation )=> handconstellation ( HamNeutralspace ( HamArmextended )? | ( locationbody )? ) -> ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? ) | HamParbegin location1 HamPlus location1 HamParend -> ^( LOC2 ( location1 )* ) ) )
// Ham4Parser.g:1705:5: ( ( handconstellation )=> handconstellation ( HamNeutralspace ( HamArmextended )? | ( locationbody )? ) -> ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? ) | HamParbegin location1 HamPlus location1 HamParend -> ^( LOC2 ( location1 )* ) )
// Ham4Parser.g:1705:5: ( ( handconstellation )=> handconstellation ( HamNeutralspace ( HamArmextended )? | ( locationbody )? ) -> ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? ) | HamParbegin location1 HamPlus location1 HamParend -> ^( LOC2 ( location1 )* ) )
var alt53=2;
var LA53_0 = this.input.LA(1);
if ( (LA53_0==HamParbegin) ) {
var LA53_1 = this.input.LA(2);
if ( (this.synpred19_Ham4Parser()) ) {
alt53=1;
}
else if ( (true) ) {
alt53=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 53, 1, this.input);
throw nvae;
}
}
else if ( ((LA53_0>=HamClose && LA53_0<=HamTouch)) && (this.synpred19_Ham4Parser())) {
alt53=1;
}
else if ( ((LA53_0>=HamInterlock && LA53_0<=HamCross)) && (this.synpred19_Ham4Parser())) {
alt53=1;
}
else if ( (LA53_0==HamSeqbegin) && (this.synpred19_Ham4Parser())) {
alt53=1;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 53, 0, this.input);
throw nvae;
}
switch (alt53) {
case 1 :
// Ham4Parser.g:1706:9: ( handconstellation )=> handconstellation ( HamNeutralspace ( HamArmextended )? | ( locationbody )? )
this.pushFollow(Ham4Parser.FOLLOW_handconstellation_in_location2not16133);
handconstellation157=this.handconstellation();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconstellation.add(handconstellation157.getTree());
// Ham4Parser.g:1709:9: ( HamNeutralspace ( HamArmextended )? | ( locationbody )? )
var alt52=2;
var LA52_0 = this.input.LA(1);
if ( (LA52_0==HamNeutralspace) ) {
alt52=1;
}
else if ( (LA52_0==EOF||LA52_0==HamPlus||(LA52_0>=HamEarlobe && LA52_0<=HamShouldertop)||LA52_0==HamReplace||(LA52_0>=HamTongue && LA52_0<=HamStomach)||(LA52_0>=HamHead && LA52_0<=HamLrat)||(LA52_0>=HamNomotion && LA52_0<=HamMovex)||(LA52_0>=HamFingerplay && LA52_0<=HamCircler)||(LA52_0>=HamRepeatfromstart && LA52_0<=HamRepeatreverse)||(LA52_0>=HamNodding && LA52_0<=HamCircleuo)) ) {
alt52=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 52, 0, this.input);
throw nvae;
}
switch (alt52) {
case 1 :
// Ham4Parser.g:1710:13: HamNeutralspace ( HamArmextended )?
HamNeutralspace158=this.match(this.input,HamNeutralspace,Ham4Parser.FOLLOW_HamNeutralspace_in_location2not16157); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNeutralspace.add(HamNeutralspace158);
// Ham4Parser.g:1711:13: ( HamArmextended )?
var alt50=2;
var LA50_0 = this.input.LA(1);
if ( (LA50_0==HamArmextended) ) {
alt50=1;
}
switch (alt50) {
case 1 :
// Ham4Parser.g:1711:15: HamArmextended
HamArmextended159=this.match(this.input,HamArmextended,Ham4Parser.FOLLOW_HamArmextended_in_location2not16173); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamArmextended.add(HamArmextended159);
break;
}
break;
case 2 :
// Ham4Parser.g:1713:13: ( locationbody )?
// Ham4Parser.g:1713:13: ( locationbody )?
var alt51=2;
var LA51_0 = this.input.LA(1);
if ( ((LA51_0>=HamEarlobe && LA51_0<=HamShouldertop)||(LA51_0>=HamTongue && LA51_0<=HamStomach)||(LA51_0>=HamHead && LA51_0<=HamLrat)) ) {
alt51=1;
}
switch (alt51) {
case 1 :
// Ham4Parser.g:1713:15: locationbody
this.pushFollow(Ham4Parser.FOLLOW_locationbody_in_location2not16202);
locationbody160=this.locationbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationbody.add(locationbody160.getTree());
break;
}
break;
}
// AST REWRITE
// elements: handconstellation, locationbody, HamArmextended
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1715:9: -> ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? )
{
// Ham4Parser.g:1715:12: ^( LOC2 handconstellation ( HamArmextended )? ( locationbody )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOC2, "LOC2"), root_1);
this.adaptor.addChild(root_1, stream_handconstellation.nextTree());
// Ham4Parser.g:1715:37: ( HamArmextended )?
if ( stream_HamArmextended.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamArmextended.nextNode());
}
stream_HamArmextended.reset();
// Ham4Parser.g:1715:53: ( locationbody )?
if ( stream_locationbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationbody.nextTree());
}
stream_locationbody.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:1717:9: HamParbegin location1 HamPlus location1 HamParend
HamParbegin161=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_location2not16253); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin161);
this.pushFollow(Ham4Parser.FOLLOW_location1_in_location2not16263);
location1162=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location1162.getTree());
HamPlus163=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_location2not16273); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus163);
this.pushFollow(Ham4Parser.FOLLOW_location1_in_location2not16283);
location1164=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location1164.getTree());
HamParend165=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_location2not16293); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend165);
// AST REWRITE
// elements: location1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1722:9: -> ^( LOC2 ( location1 )* )
{
// Ham4Parser.g:1722:12: ^( LOC2 ( location1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOC2, "LOC2"), root_1);
// Ham4Parser.g:1722:19: ( location1 )*
while ( stream_location1.hasNext() ) {
this.adaptor.addChild(root_1, stream_location1.nextTree());
}
stream_location1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: location2not1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("location2not1", 48);
}
return retval;
},
// inline static return class
location1_return: (function() {
Ham4Parser.location1_return = function(){};
org.antlr.lang.extend(Ham4Parser.location1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1726:1: location1 : ( ( locationindexuse )=> locationindexuse | ( levelhand )=> locationhand | locationbodyarm ) -> ^( LOC1 ( locationindexuse )? ( locationhand )? ( locationbodyarm )? ) ;
// $ANTLR start "location1"
location1: function() {
this.traceIn("location1", 49);
var retval = new Ham4Parser.location1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var locationindexuse166 = null;
var locationhand167 = null;
var locationbodyarm168 = null;
var stream_locationindexuse=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationindexuse");
var stream_locationhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationhand");
var stream_locationbodyarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationbodyarm");
this.trace("ANTLR Parse: location1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:1752:5: ( ( ( locationindexuse )=> locationindexuse | ( levelhand )=> locationhand | locationbodyarm ) -> ^( LOC1 ( locationindexuse )? ( locationhand )? ( locationbodyarm )? ) )
// Ham4Parser.g:1753:5: ( ( locationindexuse )=> locationindexuse | ( levelhand )=> locationhand | locationbodyarm )
// Ham4Parser.g:1753:5: ( ( locationindexuse )=> locationindexuse | ( levelhand )=> locationhand | locationbodyarm )
var alt54=3;
alt54 = this.dfa54.predict(this.input);
switch (alt54) {
case 1 :
// Ham4Parser.g:1754:9: ( locationindexuse )=> locationindexuse
this.pushFollow(Ham4Parser.FOLLOW_locationindexuse_in_location16401);
locationindexuse166=this.locationindexuse();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationindexuse.add(locationindexuse166.getTree());
break;
case 2 :
// Ham4Parser.g:1758:9: ( levelhand )=> locationhand
this.pushFollow(Ham4Parser.FOLLOW_locationhand_in_location16441);
locationhand167=this.locationhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationhand.add(locationhand167.getTree());
break;
case 3 :
// Ham4Parser.g:1762:9: locationbodyarm
this.pushFollow(Ham4Parser.FOLLOW_locationbodyarm_in_location16457);
locationbodyarm168=this.locationbodyarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationbodyarm.add(locationbodyarm168.getTree());
break;
}
// AST REWRITE
// elements: locationhand, locationbodyarm, locationindexuse
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1764:5: -> ^( LOC1 ( locationindexuse )? ( locationhand )? ( locationbodyarm )? )
{
// Ham4Parser.g:1764:8: ^( LOC1 ( locationindexuse )? ( locationhand )? ( locationbodyarm )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOC1, "LOC1"), root_1);
// Ham4Parser.g:1764:15: ( locationindexuse )?
if ( stream_locationindexuse.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationindexuse.nextTree());
}
stream_locationindexuse.reset();
// Ham4Parser.g:1764:33: ( locationhand )?
if ( stream_locationhand.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationhand.nextTree());
}
stream_locationhand.reset();
// Ham4Parser.g:1764:47: ( locationbodyarm )?
if ( stream_locationbodyarm.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationbodyarm.nextTree());
}
stream_locationbodyarm.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: location1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("location1", 49);
}
return retval;
},
// inline static return class
locationindexdefine_return: (function() {
Ham4Parser.locationindexdefine_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationindexdefine_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1767:1: locationindexdefine : digit HamCoreftag ;
// $ANTLR start "locationindexdefine"
locationindexdefine: function() {
this.traceIn("locationindexdefine", 50);
var retval = new Ham4Parser.locationindexdefine_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamCoreftag170 = null;
var digit169 = null;
var HamCoreftag170_tree=null;
this.trace("ANTLR Parse: locationindexdefine starts "+this.state.backtracking);
try {
// Ham4Parser.g:1783:5: ( digit HamCoreftag )
// Ham4Parser.g:1784:9: digit HamCoreftag
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_digit_in_locationindexdefine6517);
digit169=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, digit169.getTree());
HamCoreftag170=this.match(this.input,HamCoreftag,Ham4Parser.FOLLOW_HamCoreftag_in_locationindexdefine6527); if (this.state.failed) return retval;
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationindexdefine finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationindexdefine", 50);
}
return retval;
},
// inline static return class
locationindexuse_return: (function() {
Ham4Parser.locationindexuse_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationindexuse_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1788:1: locationindexuse : digit HamCorefref ;
// $ANTLR start "locationindexuse"
locationindexuse: function() {
this.traceIn("locationindexuse", 51);
var retval = new Ham4Parser.locationindexuse_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamCorefref172 = null;
var digit171 = null;
var HamCorefref172_tree=null;
this.trace("ANTLR Parse: locationindexuse starts "+this.state.backtracking);
try {
// Ham4Parser.g:1804:5: ( digit HamCorefref )
// Ham4Parser.g:1805:9: digit HamCorefref
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_digit_in_locationindexuse6564);
digit171=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, digit171.getTree());
HamCorefref172=this.match(this.input,HamCorefref,Ham4Parser.FOLLOW_HamCorefref_in_locationindexuse6574); if (this.state.failed) return retval;
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationindexuse finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationindexuse", 51);
}
return retval;
},
// inline static return class
locationbodyarm_return: (function() {
Ham4Parser.locationbodyarm_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationbodyarm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1809:1: locationbodyarm : ( HamNeutralspace ( HamArmextended )? | ( levelbody )=> locationbody | locationarm ) -> ^( LOCTNBODYARM ( HamArmextended )* ( locationbody )* ( locationarm )* ) ;
// $ANTLR start "locationbodyarm"
locationbodyarm: function() {
this.traceIn("locationbodyarm", 52);
var retval = new Ham4Parser.locationbodyarm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNeutralspace173 = null;
var HamArmextended174 = null;
var locationbody175 = null;
var locationarm176 = null;
var HamNeutralspace173_tree=null;
var HamArmextended174_tree=null;
var stream_HamArmextended=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamArmextended");
var stream_HamNeutralspace=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNeutralspace");
var stream_locationbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationbody");
var stream_locationarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationarm");
this.trace("ANTLR Parse: locationbodyarm starts "+this.state.backtracking);
try {
// Ham4Parser.g:1834:5: ( ( HamNeutralspace ( HamArmextended )? | ( levelbody )=> locationbody | locationarm ) -> ^( LOCTNBODYARM ( HamArmextended )* ( locationbody )* ( locationarm )* ) )
// Ham4Parser.g:1835:5: ( HamNeutralspace ( HamArmextended )? | ( levelbody )=> locationbody | locationarm )
// Ham4Parser.g:1835:5: ( HamNeutralspace ( HamArmextended )? | ( levelbody )=> locationbody | locationarm )
var alt56=3;
alt56 = this.dfa56.predict(this.input);
switch (alt56) {
case 1 :
// Ham4Parser.g:1836:9: HamNeutralspace ( HamArmextended )?
HamNeutralspace173=this.match(this.input,HamNeutralspace,Ham4Parser.FOLLOW_HamNeutralspace_in_locationbodyarm6617); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNeutralspace.add(HamNeutralspace173);
// Ham4Parser.g:1837:9: ( HamArmextended )?
var alt55=2;
var LA55_0 = this.input.LA(1);
if ( (LA55_0==HamArmextended) ) {
alt55=1;
}
switch (alt55) {
case 1 :
// Ham4Parser.g:1837:11: HamArmextended
HamArmextended174=this.match(this.input,HamArmextended,Ham4Parser.FOLLOW_HamArmextended_in_locationbodyarm6629); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamArmextended.add(HamArmextended174);
break;
}
break;
case 2 :
// Ham4Parser.g:1839:9: ( levelbody )=> locationbody
this.pushFollow(Ham4Parser.FOLLOW_locationbody_in_locationbodyarm6672);
locationbody175=this.locationbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationbody.add(locationbody175.getTree());
break;
case 3 :
// Ham4Parser.g:1843:9: locationarm
this.pushFollow(Ham4Parser.FOLLOW_locationarm_in_locationbodyarm6688);
locationarm176=this.locationarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationarm.add(locationarm176.getTree());
break;
}
// AST REWRITE
// elements: HamArmextended, locationarm, locationbody
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1845:5: -> ^( LOCTNBODYARM ( HamArmextended )* ( locationbody )* ( locationarm )* )
{
// Ham4Parser.g:1845:8: ^( LOCTNBODYARM ( HamArmextended )* ( locationbody )* ( locationarm )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOCTNBODYARM, "LOCTNBODYARM"), root_1);
// Ham4Parser.g:1845:23: ( HamArmextended )*
while ( stream_HamArmextended.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamArmextended.nextNode());
}
stream_HamArmextended.reset();
// Ham4Parser.g:1845:39: ( locationbody )*
while ( stream_locationbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationbody.nextTree());
}
stream_locationbody.reset();
// Ham4Parser.g:1845:53: ( locationarm )*
while ( stream_locationarm.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationarm.nextTree());
}
stream_locationarm.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationbodyarm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationbodyarm", 52);
}
return retval;
},
// inline static return class
locationbody_return: (function() {
Ham4Parser.locationbody_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationbody_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1848:1: locationbody : levelcomplexbody ( HamBehind )? ( ( contactbody )=> contactbody )? -> ^( LOCTNBODY levelcomplexbody ( HamBehind )? ( contactbody )? ) ;
// $ANTLR start "locationbody"
locationbody: function() {
this.traceIn("locationbody", 53);
var retval = new Ham4Parser.locationbody_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBehind178 = null;
var levelcomplexbody177 = null;
var contactbody179 = null;
var HamBehind178_tree=null;
var stream_HamBehind=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBehind");
var stream_levelcomplexbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelcomplexbody");
var stream_contactbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactbody");
this.trace("ANTLR Parse: locationbody starts "+this.state.backtracking);
try {
// Ham4Parser.g:1866:5: ( levelcomplexbody ( HamBehind )? ( ( contactbody )=> contactbody )? -> ^( LOCTNBODY levelcomplexbody ( HamBehind )? ( contactbody )? ) )
// Ham4Parser.g:1866:9: levelcomplexbody ( HamBehind )? ( ( contactbody )=> contactbody )?
this.pushFollow(Ham4Parser.FOLLOW_levelcomplexbody_in_locationbody6742);
levelcomplexbody177=this.levelcomplexbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelcomplexbody.add(levelcomplexbody177.getTree());
// Ham4Parser.g:1867:9: ( HamBehind )?
var alt57=2;
alt57 = this.dfa57.predict(this.input);
switch (alt57) {
case 1 :
// Ham4Parser.g:1867:11: HamBehind
HamBehind178=this.match(this.input,HamBehind,Ham4Parser.FOLLOW_HamBehind_in_locationbody6754); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBehind.add(HamBehind178);
break;
}
// Ham4Parser.g:1868:9: ( ( contactbody )=> contactbody )?
var alt58=2;
alt58 = this.dfa58.predict(this.input);
switch (alt58) {
case 1 :
// Ham4Parser.g:1868:11: ( contactbody )=> contactbody
this.pushFollow(Ham4Parser.FOLLOW_contactbody_in_locationbody6777);
contactbody179=this.contactbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactbody.add(contactbody179.getTree());
break;
}
// AST REWRITE
// elements: levelcomplexbody, HamBehind, contactbody
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1870:13: -> ^( LOCTNBODY levelcomplexbody ( HamBehind )? ( contactbody )? )
{
// Ham4Parser.g:1870:16: ^( LOCTNBODY levelcomplexbody ( HamBehind )? ( contactbody )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOCTNBODY, "LOCTNBODY"), root_1);
this.adaptor.addChild(root_1, stream_levelcomplexbody.nextTree());
// Ham4Parser.g:1870:45: ( HamBehind )?
if ( stream_HamBehind.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamBehind.nextNode());
}
stream_HamBehind.reset();
// Ham4Parser.g:1870:56: ( contactbody )?
if ( stream_contactbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactbody.nextTree());
}
stream_contactbody.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationbody finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationbody", 53);
}
return retval;
},
// inline static return class
locationhand_return: (function() {
Ham4Parser.locationhand_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationhand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1873:1: locationhand : levelcomplexhand ( ( contacthand )=> contacthand )? -> ^( LOCTNHAND levelcomplexhand ( contacthand )? ) ;
// $ANTLR start "locationhand"
locationhand: function() {
this.traceIn("locationhand", 54);
var retval = new Ham4Parser.locationhand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var levelcomplexhand180 = null;
var contacthand181 = null;
var stream_levelcomplexhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelcomplexhand");
var stream_contacthand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contacthand");
this.trace("ANTLR Parse: locationhand starts "+this.state.backtracking);
try {
// Ham4Parser.g:1890:5: ( levelcomplexhand ( ( contacthand )=> contacthand )? -> ^( LOCTNHAND levelcomplexhand ( contacthand )? ) )
// Ham4Parser.g:1890:9: levelcomplexhand ( ( contacthand )=> contacthand )?
this.pushFollow(Ham4Parser.FOLLOW_levelcomplexhand_in_locationhand6844);
levelcomplexhand180=this.levelcomplexhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelcomplexhand.add(levelcomplexhand180.getTree());
// Ham4Parser.g:1891:9: ( ( contacthand )=> contacthand )?
var alt59=2;
alt59 = this.dfa59.predict(this.input);
switch (alt59) {
case 1 :
// Ham4Parser.g:1891:11: ( contacthand )=> contacthand
this.pushFollow(Ham4Parser.FOLLOW_contacthand_in_locationhand6862);
contacthand181=this.contacthand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contacthand.add(contacthand181.getTree());
break;
}
// AST REWRITE
// elements: contacthand, levelcomplexhand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1893:13: -> ^( LOCTNHAND levelcomplexhand ( contacthand )? )
{
// Ham4Parser.g:1893:16: ^( LOCTNHAND levelcomplexhand ( contacthand )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOCTNHAND, "LOCTNHAND"), root_1);
this.adaptor.addChild(root_1, stream_levelcomplexhand.nextTree());
// Ham4Parser.g:1893:45: ( contacthand )?
if ( stream_contacthand.hasNext() ) {
this.adaptor.addChild(root_1, stream_contacthand.nextTree());
}
stream_contacthand.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationhand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationhand", 54);
}
return retval;
},
// inline static return class
locationarm_return: (function() {
Ham4Parser.locationarm_return = function(){};
org.antlr.lang.extend(Ham4Parser.locationarm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1896:1: locationarm : levelcomplexarm ( HamBehind )? ( ( contactbody )=> contactbody )? -> ^( LOCTNARM levelcomplexarm ( HamBehind )? ( contactbody )? ) ;
// $ANTLR start "locationarm"
locationarm: function() {
this.traceIn("locationarm", 55);
var retval = new Ham4Parser.locationarm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBehind183 = null;
var levelcomplexarm182 = null;
var contactbody184 = null;
var HamBehind183_tree=null;
var stream_HamBehind=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBehind");
var stream_contactbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactbody");
var stream_levelcomplexarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelcomplexarm");
this.trace("ANTLR Parse: locationarm starts "+this.state.backtracking);
try {
// Ham4Parser.g:1914:5: ( levelcomplexarm ( HamBehind )? ( ( contactbody )=> contactbody )? -> ^( LOCTNARM levelcomplexarm ( HamBehind )? ( contactbody )? ) )
// Ham4Parser.g:1914:9: levelcomplexarm ( HamBehind )? ( ( contactbody )=> contactbody )?
this.pushFollow(Ham4Parser.FOLLOW_levelcomplexarm_in_locationarm6926);
levelcomplexarm182=this.levelcomplexarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelcomplexarm.add(levelcomplexarm182.getTree());
// Ham4Parser.g:1915:9: ( HamBehind )?
var alt60=2;
alt60 = this.dfa60.predict(this.input);
switch (alt60) {
case 1 :
// Ham4Parser.g:1915:11: HamBehind
HamBehind183=this.match(this.input,HamBehind,Ham4Parser.FOLLOW_HamBehind_in_locationarm6938); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBehind.add(HamBehind183);
break;
}
// Ham4Parser.g:1916:9: ( ( contactbody )=> contactbody )?
var alt61=2;
alt61 = this.dfa61.predict(this.input);
switch (alt61) {
case 1 :
// Ham4Parser.g:1916:11: ( contactbody )=> contactbody
this.pushFollow(Ham4Parser.FOLLOW_contactbody_in_locationarm6961);
contactbody184=this.contactbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactbody.add(contactbody184.getTree());
break;
}
// AST REWRITE
// elements: levelcomplexarm, HamBehind, contactbody
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 1918:13: -> ^( LOCTNARM levelcomplexarm ( HamBehind )? ( contactbody )? )
{
// Ham4Parser.g:1918:16: ^( LOCTNARM levelcomplexarm ( HamBehind )? ( contactbody )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOCTNARM, "LOCTNARM"), root_1);
this.adaptor.addChild(root_1, stream_levelcomplexarm.nextTree());
// Ham4Parser.g:1918:43: ( HamBehind )?
if ( stream_HamBehind.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamBehind.nextNode());
}
stream_HamBehind.reset();
// Ham4Parser.g:1918:54: ( contactbody )?
if ( stream_contactbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactbody.nextTree());
}
stream_contactbody.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locationarm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locationarm", 55);
}
return retval;
},
// inline static return class
levelcomplexbody_return: (function() {
Ham4Parser.levelcomplexbody_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelcomplexbody_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1921:1: levelcomplexbody : levelbody ( HamBetween levelbody )? ;
// $ANTLR start "levelcomplexbody"
levelcomplexbody: function() {
this.traceIn("levelcomplexbody", 56);
var retval = new Ham4Parser.levelcomplexbody_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween186 = null;
var levelbody185 = null;
var levelbody187 = null;
var HamBetween186_tree=null;
this.trace("ANTLR Parse: levelcomplexbody starts "+this.state.backtracking);
try {
// Ham4Parser.g:1939:5: ( levelbody ( HamBetween levelbody )? )
// Ham4Parser.g:1939:9: levelbody ( HamBetween levelbody )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_levelcomplexbody7028);
levelbody185=this.levelbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelbody185.getTree());
// Ham4Parser.g:1940:9: ( HamBetween levelbody )?
var alt62=2;
var LA62_0 = this.input.LA(1);
if ( (LA62_0==HamBetween) ) {
alt62=1;
}
switch (alt62) {
case 1 :
// Ham4Parser.g:1941:13: HamBetween levelbody
HamBetween186=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_levelcomplexbody7052); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_levelcomplexbody7068);
levelbody187=this.levelbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelbody187.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelcomplexbody finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelcomplexbody", 56);
}
return retval;
},
// inline static return class
levelcomplexhand_return: (function() {
Ham4Parser.levelcomplexhand_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelcomplexhand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1946:1: levelcomplexhand : levelhand ( HamBetween levelhand )? ;
// $ANTLR start "levelcomplexhand"
levelcomplexhand: function() {
this.traceIn("levelcomplexhand", 57);
var retval = new Ham4Parser.levelcomplexhand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween189 = null;
var levelhand188 = null;
var levelhand190 = null;
var HamBetween189_tree=null;
this.trace("ANTLR Parse: levelcomplexhand starts "+this.state.backtracking);
try {
// Ham4Parser.g:1964:5: ( levelhand ( HamBetween levelhand )? )
// Ham4Parser.g:1964:9: levelhand ( HamBetween levelhand )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_levelhand_in_levelcomplexhand7108);
levelhand188=this.levelhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelhand188.getTree());
// Ham4Parser.g:1965:9: ( HamBetween levelhand )?
var alt63=2;
var LA63_0 = this.input.LA(1);
if ( (LA63_0==HamBetween) ) {
alt63=1;
}
switch (alt63) {
case 1 :
// Ham4Parser.g:1966:13: HamBetween levelhand
HamBetween189=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_levelcomplexhand7132); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_levelhand_in_levelcomplexhand7148);
levelhand190=this.levelhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelhand190.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelcomplexhand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelcomplexhand", 57);
}
return retval;
},
// inline static return class
levelcomplexarm_return: (function() {
Ham4Parser.levelcomplexarm_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelcomplexarm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1971:1: levelcomplexarm : levelarm ( HamBetween levelarm )? ;
// $ANTLR start "levelcomplexarm"
levelcomplexarm: function() {
this.traceIn("levelcomplexarm", 58);
var retval = new Ham4Parser.levelcomplexarm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween192 = null;
var levelarm191 = null;
var levelarm193 = null;
var HamBetween192_tree=null;
this.trace("ANTLR Parse: levelcomplexarm starts "+this.state.backtracking);
try {
// Ham4Parser.g:1989:5: ( levelarm ( HamBetween levelarm )? )
// Ham4Parser.g:1989:9: levelarm ( HamBetween levelarm )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_levelarm_in_levelcomplexarm7188);
levelarm191=this.levelarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelarm191.getTree());
// Ham4Parser.g:1990:9: ( HamBetween levelarm )?
var alt64=2;
var LA64_0 = this.input.LA(1);
if ( (LA64_0==HamBetween) ) {
alt64=1;
}
switch (alt64) {
case 1 :
// Ham4Parser.g:1991:13: HamBetween levelarm
HamBetween192=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_levelcomplexarm7212); if (this.state.failed) return retval;
this.pushFollow(Ham4Parser.FOLLOW_levelarm_in_levelcomplexarm7228);
levelarm193=this.levelarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, levelarm193.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelcomplexarm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelcomplexarm", 58);
}
return retval;
},
// inline static return class
levelbody_return: (function() {
Ham4Parser.levelbody_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelbody_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:1996:1: levelbody : ( locbody ( HamEtc )? ( side )? -> ^( LEVBODY locbody ( HamEtc )? ( side )? ) | locsided ( HamEtc )? ( side )? -> ^( LEVBODY locsided ( HamEtc )? ( side )? ) | side ( locbody ( HamEtc )? | locsided ( HamEtc )? ) -> ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? ) ) ;
// $ANTLR start "levelbody"
levelbody: function() {
this.traceIn("levelbody", 59);
var retval = new Ham4Parser.levelbody_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamEtc195 = null;
var HamEtc198 = null;
var HamEtc202 = null;
var HamEtc204 = null;
var locbody194 = null;
var side196 = null;
var locsided197 = null;
var side199 = null;
var side200 = null;
var locbody201 = null;
var locsided203 = null;
var HamEtc195_tree=null;
var HamEtc198_tree=null;
var HamEtc202_tree=null;
var HamEtc204_tree=null;
var stream_HamEtc=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamEtc");
var stream_side=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule side");
var stream_locsided=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locsided");
var stream_locbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locbody");
this.trace("ANTLR Parse: levelbody starts "+this.state.backtracking);
try {
// Ham4Parser.g:2031:5: ( ( locbody ( HamEtc )? ( side )? -> ^( LEVBODY locbody ( HamEtc )? ( side )? ) | locsided ( HamEtc )? ( side )? -> ^( LEVBODY locsided ( HamEtc )? ( side )? ) | side ( locbody ( HamEtc )? | locsided ( HamEtc )? ) -> ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? ) ) )
// Ham4Parser.g:2032:5: ( locbody ( HamEtc )? ( side )? -> ^( LEVBODY locbody ( HamEtc )? ( side )? ) | locsided ( HamEtc )? ( side )? -> ^( LEVBODY locsided ( HamEtc )? ( side )? ) | side ( locbody ( HamEtc )? | locsided ( HamEtc )? ) -> ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? ) )
// Ham4Parser.g:2032:5: ( locbody ( HamEtc )? ( side )? -> ^( LEVBODY locbody ( HamEtc )? ( side )? ) | locsided ( HamEtc )? ( side )? -> ^( LEVBODY locsided ( HamEtc )? ( side )? ) | side ( locbody ( HamEtc )? | locsided ( HamEtc )? ) -> ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? ) )
var alt72=3;
switch ( this.input.LA(1) ) {
case HamNostrils:
case HamShouldertop:
case HamTongue:
case HamTeeth:
case HamStomach:
case HamHead:
case HamHeadtop:
case HamForehead:
case HamEyebrows:
case HamEyes:
case HamNose:
case HamLips:
case HamChin:
case HamUnderchin:
case HamNeck:
case HamShoulders:
case HamChest:
case HamBelowstomach:
alt72=1;
break;
case HamEarlobe:
case HamEar:
case HamCheek:
alt72=2;
break;
case HamLrbeside:
case HamLrat:
alt72=3;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 72, 0, this.input);
throw nvae;
}
switch (alt72) {
case 1 :
// Ham4Parser.g:2033:9: locbody ( HamEtc )? ( side )?
this.pushFollow(Ham4Parser.FOLLOW_locbody_in_levelbody7280);
locbody194=this.locbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locbody.add(locbody194.getTree());
// Ham4Parser.g:2034:9: ( HamEtc )?
var alt65=2;
var LA65_0 = this.input.LA(1);
if ( (LA65_0==HamEtc) ) {
alt65=1;
}
switch (alt65) {
case 1 :
// Ham4Parser.g:2034:11: HamEtc
HamEtc195=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelbody7292); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc195);
break;
}
// Ham4Parser.g:2035:9: ( side )?
var alt66=2;
var LA66_0 = this.input.LA(1);
if ( ((LA66_0>=HamLrbeside && LA66_0<=HamLrat)) ) {
alt66=1;
}
switch (alt66) {
case 1 :
// Ham4Parser.g:2035:11: side
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelbody7307);
side196=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side196.getTree());
break;
}
// AST REWRITE
// elements: HamEtc, locbody, side
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2036:12: -> ^( LEVBODY locbody ( HamEtc )? ( side )? )
{
// Ham4Parser.g:2036:15: ^( LEVBODY locbody ( HamEtc )? ( side )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVBODY, "LEVBODY"), root_1);
this.adaptor.addChild(root_1, stream_locbody.nextTree());
// Ham4Parser.g:2036:33: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:2036:41: ( side )?
if ( stream_side.hasNext() ) {
this.adaptor.addChild(root_1, stream_side.nextTree());
}
stream_side.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2038:9: locsided ( HamEtc )? ( side )?
this.pushFollow(Ham4Parser.FOLLOW_locsided_in_levelbody7351);
locsided197=this.locsided();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locsided.add(locsided197.getTree());
// Ham4Parser.g:2039:9: ( HamEtc )?
var alt67=2;
var LA67_0 = this.input.LA(1);
if ( (LA67_0==HamEtc) ) {
alt67=1;
}
switch (alt67) {
case 1 :
// Ham4Parser.g:2039:11: HamEtc
HamEtc198=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelbody7363); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc198);
break;
}
// Ham4Parser.g:2040:9: ( side )?
var alt68=2;
var LA68_0 = this.input.LA(1);
if ( ((LA68_0>=HamLrbeside && LA68_0<=HamLrat)) ) {
alt68=1;
}
switch (alt68) {
case 1 :
// Ham4Parser.g:2040:11: side
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelbody7378);
side199=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side199.getTree());
break;
}
// AST REWRITE
// elements: side, locsided, HamEtc
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2041:12: -> ^( LEVBODY locsided ( HamEtc )? ( side )? )
{
// Ham4Parser.g:2041:15: ^( LEVBODY locsided ( HamEtc )? ( side )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVBODY, "LEVBODY"), root_1);
this.adaptor.addChild(root_1, stream_locsided.nextTree());
// Ham4Parser.g:2041:34: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:2041:42: ( side )?
if ( stream_side.hasNext() ) {
this.adaptor.addChild(root_1, stream_side.nextTree());
}
stream_side.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:2043:9: side ( locbody ( HamEtc )? | locsided ( HamEtc )? )
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelbody7422);
side200=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side200.getTree());
// Ham4Parser.g:2044:9: ( locbody ( HamEtc )? | locsided ( HamEtc )? )
var alt71=2;
var LA71_0 = this.input.LA(1);
if ( ((LA71_0>=HamNostrils && LA71_0<=HamShouldertop)||(LA71_0>=HamTongue && LA71_0<=HamStomach)||(LA71_0>=HamHead && LA71_0<=HamNose)||(LA71_0>=HamLips && LA71_0<=HamBelowstomach)) ) {
alt71=1;
}
else if ( (LA71_0==HamEarlobe||(LA71_0>=HamEar && LA71_0<=HamCheek)) ) {
alt71=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 71, 0, this.input);
throw nvae;
}
switch (alt71) {
case 1 :
// Ham4Parser.g:2045:13: locbody ( HamEtc )?
this.pushFollow(Ham4Parser.FOLLOW_locbody_in_levelbody7446);
locbody201=this.locbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locbody.add(locbody201.getTree());
// Ham4Parser.g:2046:13: ( HamEtc )?
var alt69=2;
var LA69_0 = this.input.LA(1);
if ( (LA69_0==HamEtc) ) {
alt69=1;
}
switch (alt69) {
case 1 :
// Ham4Parser.g:2046:15: HamEtc
HamEtc202=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelbody7462); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc202);
break;
}
break;
case 2 :
// Ham4Parser.g:2048:13: locsided ( HamEtc )?
this.pushFollow(Ham4Parser.FOLLOW_locsided_in_levelbody7489);
locsided203=this.locsided();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locsided.add(locsided203.getTree());
// Ham4Parser.g:2049:13: ( HamEtc )?
var alt70=2;
var LA70_0 = this.input.LA(1);
if ( (LA70_0==HamEtc) ) {
alt70=1;
}
switch (alt70) {
case 1 :
// Ham4Parser.g:2049:15: HamEtc
HamEtc204=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelbody7505); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc204);
break;
}
break;
}
// AST REWRITE
// elements: side, locbody, HamEtc, locsided
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2051:12: -> ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? )
{
// Ham4Parser.g:2051:15: ^( LEVBODY side ( locbody )? ( locsided )? ( HamEtc )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVBODY, "LEVBODY"), root_1);
this.adaptor.addChild(root_1, stream_side.nextTree());
// Ham4Parser.g:2051:30: ( locbody )?
if ( stream_locbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_locbody.nextTree());
}
stream_locbody.reset();
// Ham4Parser.g:2051:39: ( locsided )?
if ( stream_locsided.hasNext() ) {
this.adaptor.addChild(root_1, stream_locsided.nextTree());
}
stream_locsided.reset();
// Ham4Parser.g:2051:49: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelbody finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelbody", 59);
}
return retval;
},
// inline static return class
levelhand_return: (function() {
Ham4Parser.levelhand_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelhand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2055:1: levelhand : ( lochand ( dorsalorpalmar )? ( side )? -> ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? ) | side lochand ( dorsalorpalmar )? -> ^( LEVHAND side lochand ( dorsalorpalmar )? ) ) ;
// $ANTLR start "levelhand"
levelhand: function() {
this.traceIn("levelhand", 60);
var retval = new Ham4Parser.levelhand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var lochand205 = null;
var dorsalorpalmar206 = null;
var side207 = null;
var side208 = null;
var lochand209 = null;
var dorsalorpalmar210 = null;
var stream_lochand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule lochand");
var stream_side=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule side");
var stream_dorsalorpalmar=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule dorsalorpalmar");
this.trace("ANTLR Parse: levelhand starts "+this.state.backtracking);
try {
// Ham4Parser.g:2080:5: ( ( lochand ( dorsalorpalmar )? ( side )? -> ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? ) | side lochand ( dorsalorpalmar )? -> ^( LEVHAND side lochand ( dorsalorpalmar )? ) ) )
// Ham4Parser.g:2081:5: ( lochand ( dorsalorpalmar )? ( side )? -> ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? ) | side lochand ( dorsalorpalmar )? -> ^( LEVHAND side lochand ( dorsalorpalmar )? ) )
// Ham4Parser.g:2081:5: ( lochand ( dorsalorpalmar )? ( side )? -> ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? ) | side lochand ( dorsalorpalmar )? -> ^( LEVHAND side lochand ( dorsalorpalmar )? ) )
var alt76=2;
var LA76_0 = this.input.LA(1);
if ( ((LA76_0>=HamWristback && LA76_0<=HamPinkyside)||(LA76_0>=HamFingertip && LA76_0<=HamFingerside)) ) {
alt76=1;
}
else if ( ((LA76_0>=HamLrbeside && LA76_0<=HamLrat)) ) {
alt76=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 76, 0, this.input);
throw nvae;
}
switch (alt76) {
case 1 :
// Ham4Parser.g:2082:9: lochand ( dorsalorpalmar )? ( side )?
this.pushFollow(Ham4Parser.FOLLOW_lochand_in_levelhand7593);
lochand205=this.lochand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_lochand.add(lochand205.getTree());
// Ham4Parser.g:2083:9: ( dorsalorpalmar )?
var alt73=2;
var LA73_0 = this.input.LA(1);
if ( ((LA73_0>=HamPalm && LA73_0<=HamHandback)) ) {
alt73=1;
}
switch (alt73) {
case 1 :
// Ham4Parser.g:2083:11: dorsalorpalmar
this.pushFollow(Ham4Parser.FOLLOW_dorsalorpalmar_in_levelhand7605);
dorsalorpalmar206=this.dorsalorpalmar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_dorsalorpalmar.add(dorsalorpalmar206.getTree());
break;
}
// Ham4Parser.g:2084:9: ( side )?
var alt74=2;
var LA74_0 = this.input.LA(1);
if ( ((LA74_0>=HamLrbeside && LA74_0<=HamLrat)) ) {
alt74=1;
}
switch (alt74) {
case 1 :
// Ham4Parser.g:2084:11: side
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelhand7620);
side207=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side207.getTree());
break;
}
// AST REWRITE
// elements: dorsalorpalmar, lochand, side
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2085:8: -> ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? )
{
// Ham4Parser.g:2085:11: ^( LEVHAND lochand ( dorsalorpalmar )? ( side )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVHAND, "LEVHAND"), root_1);
this.adaptor.addChild(root_1, stream_lochand.nextTree());
// Ham4Parser.g:2085:29: ( dorsalorpalmar )?
if ( stream_dorsalorpalmar.hasNext() ) {
this.adaptor.addChild(root_1, stream_dorsalorpalmar.nextTree());
}
stream_dorsalorpalmar.reset();
// Ham4Parser.g:2085:45: ( side )?
if ( stream_side.hasNext() ) {
this.adaptor.addChild(root_1, stream_side.nextTree());
}
stream_side.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2087:9: side lochand ( dorsalorpalmar )?
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelhand7660);
side208=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side208.getTree());
this.pushFollow(Ham4Parser.FOLLOW_lochand_in_levelhand7670);
lochand209=this.lochand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_lochand.add(lochand209.getTree());
// Ham4Parser.g:2089:9: ( dorsalorpalmar )?
var alt75=2;
var LA75_0 = this.input.LA(1);
if ( ((LA75_0>=HamPalm && LA75_0<=HamHandback)) ) {
alt75=1;
}
switch (alt75) {
case 1 :
// Ham4Parser.g:2089:11: dorsalorpalmar
this.pushFollow(Ham4Parser.FOLLOW_dorsalorpalmar_in_levelhand7682);
dorsalorpalmar210=this.dorsalorpalmar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_dorsalorpalmar.add(dorsalorpalmar210.getTree());
break;
}
// AST REWRITE
// elements: side, dorsalorpalmar, lochand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2090:8: -> ^( LEVHAND side lochand ( dorsalorpalmar )? )
{
// Ham4Parser.g:2090:11: ^( LEVHAND side lochand ( dorsalorpalmar )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVHAND, "LEVHAND"), root_1);
this.adaptor.addChild(root_1, stream_side.nextTree());
this.adaptor.addChild(root_1, stream_lochand.nextTree());
// Ham4Parser.g:2090:34: ( dorsalorpalmar )?
if ( stream_dorsalorpalmar.hasNext() ) {
this.adaptor.addChild(root_1, stream_dorsalorpalmar.nextTree());
}
stream_dorsalorpalmar.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelhand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelhand", 60);
}
return retval;
},
// inline static return class
levelarm_return: (function() {
Ham4Parser.levelarm_return = function(){};
org.antlr.lang.extend(Ham4Parser.levelarm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2094:1: levelarm : ( locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? -> ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? ) | side locarm ( HamEtc )? ( dorsalorpalmar )? -> ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? ) ) ;
// $ANTLR start "levelarm"
levelarm: function() {
this.traceIn("levelarm", 61);
var retval = new Ham4Parser.levelarm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamEtc212 = null;
var HamEtc217 = null;
var locarm211 = null;
var dorsalorpalmar213 = null;
var side214 = null;
var side215 = null;
var locarm216 = null;
var dorsalorpalmar218 = null;
var HamEtc212_tree=null;
var HamEtc217_tree=null;
var stream_HamEtc=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamEtc");
var stream_side=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule side");
var stream_dorsalorpalmar=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule dorsalorpalmar");
var stream_locarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locarm");
this.trace("ANTLR Parse: levelarm starts "+this.state.backtracking);
try {
// Ham4Parser.g:2121:5: ( ( locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? -> ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? ) | side locarm ( HamEtc )? ( dorsalorpalmar )? -> ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? ) ) )
// Ham4Parser.g:2122:5: ( locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? -> ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? ) | side locarm ( HamEtc )? ( dorsalorpalmar )? -> ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? ) )
// Ham4Parser.g:2122:5: ( locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? -> ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? ) | side locarm ( HamEtc )? ( dorsalorpalmar )? -> ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? ) )
var alt82=2;
var LA82_0 = this.input.LA(1);
if ( ((LA82_0>=HamUpperarm && LA82_0<=HamLowerarm)) ) {
alt82=1;
}
else if ( ((LA82_0>=HamLrbeside && LA82_0<=HamLrat)) ) {
alt82=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 82, 0, this.input);
throw nvae;
}
switch (alt82) {
case 1 :
// Ham4Parser.g:2123:9: locarm ( HamEtc )? ( dorsalorpalmar )? ( side )?
this.pushFollow(Ham4Parser.FOLLOW_locarm_in_levelarm7752);
locarm211=this.locarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locarm.add(locarm211.getTree());
// Ham4Parser.g:2124:9: ( HamEtc )?
var alt77=2;
var LA77_0 = this.input.LA(1);
if ( (LA77_0==HamEtc) ) {
alt77=1;
}
switch (alt77) {
case 1 :
// Ham4Parser.g:2124:11: HamEtc
HamEtc212=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelarm7764); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc212);
break;
}
// Ham4Parser.g:2125:9: ( dorsalorpalmar )?
var alt78=2;
var LA78_0 = this.input.LA(1);
if ( ((LA78_0>=HamPalm && LA78_0<=HamHandback)) ) {
alt78=1;
}
switch (alt78) {
case 1 :
// Ham4Parser.g:2125:11: dorsalorpalmar
this.pushFollow(Ham4Parser.FOLLOW_dorsalorpalmar_in_levelarm7779);
dorsalorpalmar213=this.dorsalorpalmar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_dorsalorpalmar.add(dorsalorpalmar213.getTree());
break;
}
// Ham4Parser.g:2126:9: ( side )?
var alt79=2;
var LA79_0 = this.input.LA(1);
if ( ((LA79_0>=HamLrbeside && LA79_0<=HamLrat)) ) {
alt79=1;
}
switch (alt79) {
case 1 :
// Ham4Parser.g:2126:11: side
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelarm7794);
side214=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side214.getTree());
break;
}
// AST REWRITE
// elements: locarm, HamEtc, side, dorsalorpalmar
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2127:12: -> ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? )
{
// Ham4Parser.g:2127:15: ^( LEVARM locarm ( HamEtc )? ( dorsalorpalmar )? ( side )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVARM, "LEVARM"), root_1);
this.adaptor.addChild(root_1, stream_locarm.nextTree());
// Ham4Parser.g:2127:31: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:2127:39: ( dorsalorpalmar )?
if ( stream_dorsalorpalmar.hasNext() ) {
this.adaptor.addChild(root_1, stream_dorsalorpalmar.nextTree());
}
stream_dorsalorpalmar.reset();
// Ham4Parser.g:2127:55: ( side )?
if ( stream_side.hasNext() ) {
this.adaptor.addChild(root_1, stream_side.nextTree());
}
stream_side.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2129:9: side locarm ( HamEtc )? ( dorsalorpalmar )?
this.pushFollow(Ham4Parser.FOLLOW_side_in_levelarm7841);
side215=this.side();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_side.add(side215.getTree());
this.pushFollow(Ham4Parser.FOLLOW_locarm_in_levelarm7851);
locarm216=this.locarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locarm.add(locarm216.getTree());
// Ham4Parser.g:2131:9: ( HamEtc )?
var alt80=2;
var LA80_0 = this.input.LA(1);
if ( (LA80_0==HamEtc) ) {
alt80=1;
}
switch (alt80) {
case 1 :
// Ham4Parser.g:2131:11: HamEtc
HamEtc217=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_levelarm7863); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc217);
break;
}
// Ham4Parser.g:2132:9: ( dorsalorpalmar )?
var alt81=2;
var LA81_0 = this.input.LA(1);
if ( ((LA81_0>=HamPalm && LA81_0<=HamHandback)) ) {
alt81=1;
}
switch (alt81) {
case 1 :
// Ham4Parser.g:2132:11: dorsalorpalmar
this.pushFollow(Ham4Parser.FOLLOW_dorsalorpalmar_in_levelarm7878);
dorsalorpalmar218=this.dorsalorpalmar();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_dorsalorpalmar.add(dorsalorpalmar218.getTree());
break;
}
// AST REWRITE
// elements: side, dorsalorpalmar, HamEtc, locarm
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2133:12: -> ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? )
{
// Ham4Parser.g:2133:15: ^( LEVARM side locarm ( HamEtc )? ( dorsalorpalmar )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LEVARM, "LEVARM"), root_1);
this.adaptor.addChild(root_1, stream_side.nextTree());
this.adaptor.addChild(root_1, stream_locarm.nextTree());
// Ham4Parser.g:2133:36: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:2133:44: ( dorsalorpalmar )?
if ( stream_dorsalorpalmar.hasNext() ) {
this.adaptor.addChild(root_1, stream_dorsalorpalmar.nextTree());
}
stream_dorsalorpalmar.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: levelarm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("levelarm", 61);
}
return retval;
},
// inline static return class
contactbody_return: (function() {
Ham4Parser.contactbody_return = function(){};
org.antlr.lang.extend(Ham4Parser.contactbody_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2137:1: contactbody : ( pcontact | HamArmextended | contactofhand ) -> ^( CNTCTBODY ( pcontact )? ( HamArmextended )? ( contactofhand )? ) ;
// $ANTLR start "contactbody"
contactbody: function() {
this.traceIn("contactbody", 62);
var retval = new Ham4Parser.contactbody_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamArmextended220 = null;
var pcontact219 = null;
var contactofhand221 = null;
var HamArmextended220_tree=null;
var stream_HamArmextended=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamArmextended");
var stream_pcontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pcontact");
var stream_contactofhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactofhand");
this.trace("ANTLR Parse: contactbody starts "+this.state.backtracking);
try {
// Ham4Parser.g:2159:5: ( ( pcontact | HamArmextended | contactofhand ) -> ^( CNTCTBODY ( pcontact )? ( HamArmextended )? ( contactofhand )? ) )
// Ham4Parser.g:2160:5: ( pcontact | HamArmextended | contactofhand )
// Ham4Parser.g:2160:5: ( pcontact | HamArmextended | contactofhand )
var alt83=3;
switch ( this.input.LA(1) ) {
case HamClose:
case HamTouch:
alt83=1;
break;
case HamArmextended:
alt83=2;
break;
case HamSeqbegin:
alt83=3;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 83, 0, this.input);
throw nvae;
}
switch (alt83) {
case 1 :
// Ham4Parser.g:2161:9: pcontact
this.pushFollow(Ham4Parser.FOLLOW_pcontact_in_contactbody7955);
pcontact219=this.pcontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_pcontact.add(pcontact219.getTree());
break;
case 2 :
// Ham4Parser.g:2163:9: HamArmextended
HamArmextended220=this.match(this.input,HamArmextended,Ham4Parser.FOLLOW_HamArmextended_in_contactbody7971); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamArmextended.add(HamArmextended220);
break;
case 3 :
// Ham4Parser.g:2165:9: contactofhand
this.pushFollow(Ham4Parser.FOLLOW_contactofhand_in_contactbody7987);
contactofhand221=this.contactofhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactofhand.add(contactofhand221.getTree());
break;
}
// AST REWRITE
// elements: pcontact, contactofhand, HamArmextended
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2167:8: -> ^( CNTCTBODY ( pcontact )? ( HamArmextended )? ( contactofhand )? )
{
// Ham4Parser.g:2167:11: ^( CNTCTBODY ( pcontact )? ( HamArmextended )? ( contactofhand )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CNTCTBODY, "CNTCTBODY"), root_1);
// Ham4Parser.g:2167:23: ( pcontact )?
if ( stream_pcontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_pcontact.nextTree());
}
stream_pcontact.reset();
// Ham4Parser.g:2167:33: ( HamArmextended )?
if ( stream_HamArmextended.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamArmextended.nextNode());
}
stream_HamArmextended.reset();
// Ham4Parser.g:2167:49: ( contactofhand )?
if ( stream_contactofhand.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactofhand.nextTree());
}
stream_contactofhand.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: contactbody finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("contactbody", 62);
}
return retval;
},
// inline static return class
contacthand_return: (function() {
Ham4Parser.contacthand_return = function(){};
org.antlr.lang.extend(Ham4Parser.contacthand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2170:1: contacthand : ( pcontact | ccontact | contactofhand ) -> ^( CNTCTHAND ( pcontact )? ( ccontact )? ( contactofhand )? ) ;
// $ANTLR start "contacthand"
contacthand: function() {
this.traceIn("contacthand", 63);
var retval = new Ham4Parser.contacthand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var pcontact222 = null;
var ccontact223 = null;
var contactofhand224 = null;
var stream_ccontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule ccontact");
var stream_pcontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pcontact");
var stream_contactofhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactofhand");
this.trace("ANTLR Parse: contacthand starts "+this.state.backtracking);
try {
// Ham4Parser.g:2192:5: ( ( pcontact | ccontact | contactofhand ) -> ^( CNTCTHAND ( pcontact )? ( ccontact )? ( contactofhand )? ) )
// Ham4Parser.g:2193:5: ( pcontact | ccontact | contactofhand )
// Ham4Parser.g:2193:5: ( pcontact | ccontact | contactofhand )
var alt84=3;
switch ( this.input.LA(1) ) {
case HamClose:
case HamTouch:
alt84=1;
break;
case HamInterlock:
case HamCross:
alt84=2;
break;
case HamSeqbegin:
alt84=3;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 84, 0, this.input);
throw nvae;
}
switch (alt84) {
case 1 :
// Ham4Parser.g:2194:9: pcontact
this.pushFollow(Ham4Parser.FOLLOW_pcontact_in_contacthand8056);
pcontact222=this.pcontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_pcontact.add(pcontact222.getTree());
break;
case 2 :
// Ham4Parser.g:2196:9: ccontact
this.pushFollow(Ham4Parser.FOLLOW_ccontact_in_contacthand8072);
ccontact223=this.ccontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_ccontact.add(ccontact223.getTree());
break;
case 3 :
// Ham4Parser.g:2198:9: contactofhand
this.pushFollow(Ham4Parser.FOLLOW_contactofhand_in_contacthand8088);
contactofhand224=this.contactofhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactofhand.add(contactofhand224.getTree());
break;
}
// AST REWRITE
// elements: ccontact, pcontact, contactofhand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2200:8: -> ^( CNTCTHAND ( pcontact )? ( ccontact )? ( contactofhand )? )
{
// Ham4Parser.g:2200:11: ^( CNTCTHAND ( pcontact )? ( ccontact )? ( contactofhand )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CNTCTHAND, "CNTCTHAND"), root_1);
// Ham4Parser.g:2200:23: ( pcontact )?
if ( stream_pcontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_pcontact.nextTree());
}
stream_pcontact.reset();
// Ham4Parser.g:2200:33: ( ccontact )?
if ( stream_ccontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_ccontact.nextTree());
}
stream_ccontact.reset();
// Ham4Parser.g:2200:43: ( contactofhand )?
if ( stream_contactofhand.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactofhand.nextTree());
}
stream_contactofhand.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: contacthand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("contacthand", 63);
}
return retval;
},
// inline static return class
handconstellation_return: (function() {
Ham4Parser.handconstellation_return = function(){};
org.antlr.lang.extend(Ham4Parser.handconstellation_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2203:1: handconstellation : ( HamParbegin locationhand HamPlus locationhand HamParend )? contacthand -> ^( HCONSTLLN ( locationhand )* contacthand ) ;
// $ANTLR start "handconstellation"
handconstellation: function() {
this.traceIn("handconstellation", 64);
var retval = new Ham4Parser.handconstellation_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin225 = null;
var HamPlus227 = null;
var HamParend229 = null;
var locationhand226 = null;
var locationhand228 = null;
var contacthand230 = null;
var HamParbegin225_tree=null;
var HamPlus227_tree=null;
var HamParend229_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_contacthand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contacthand");
var stream_locationhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationhand");
this.trace("ANTLR Parse: handconstellation starts "+this.state.backtracking);
try {
// Ham4Parser.g:2226:5: ( ( HamParbegin locationhand HamPlus locationhand HamParend )? contacthand -> ^( HCONSTLLN ( locationhand )* contacthand ) )
// Ham4Parser.g:2226:9: ( HamParbegin locationhand HamPlus locationhand HamParend )? contacthand
// Ham4Parser.g:2226:9: ( HamParbegin locationhand HamPlus locationhand HamParend )?
var alt85=2;
var LA85_0 = this.input.LA(1);
if ( (LA85_0==HamParbegin) ) {
alt85=1;
}
switch (alt85) {
case 1 :
// Ham4Parser.g:2227:13: HamParbegin locationhand HamPlus locationhand HamParend
HamParbegin225=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_handconstellation8159); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin225);
this.pushFollow(Ham4Parser.FOLLOW_locationhand_in_handconstellation8174);
locationhand226=this.locationhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationhand.add(locationhand226.getTree());
HamPlus227=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_handconstellation8188); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus227);
this.pushFollow(Ham4Parser.FOLLOW_locationhand_in_handconstellation8203);
locationhand228=this.locationhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationhand.add(locationhand228.getTree());
HamParend229=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_handconstellation8217); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend229);
break;
}
this.pushFollow(Ham4Parser.FOLLOW_contacthand_in_handconstellation8239);
contacthand230=this.contacthand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contacthand.add(contacthand230.getTree());
// AST REWRITE
// elements: contacthand, locationhand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2235:12: -> ^( HCONSTLLN ( locationhand )* contacthand )
{
// Ham4Parser.g:2235:15: ^( HCONSTLLN ( locationhand )* contacthand )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HCONSTLLN, "HCONSTLLN"), root_1);
// Ham4Parser.g:2235:27: ( locationhand )*
while ( stream_locationhand.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationhand.nextTree());
}
stream_locationhand.reset();
this.adaptor.addChild(root_1, stream_contacthand.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handconstellation finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handconstellation", 64);
}
return retval;
},
// inline static return class
contactofhand_return: (function() {
Ham4Parser.contactofhand_return = function(){};
org.antlr.lang.extend(Ham4Parser.contactofhand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2238:1: contactofhand : HamSeqbegin ( pcontact | ccontact ) ( ( levelhand )=> contactohhand | contactoharm ) HamSeqend -> ^( CNTCTOFHAND ( pcontact )? ( ccontact )? ( contactohhand )? ( contactoharm )? ) ;
// $ANTLR start "contactofhand"
contactofhand: function() {
this.traceIn("contactofhand", 65);
var retval = new Ham4Parser.contactofhand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin231 = null;
var HamSeqend236 = null;
var pcontact232 = null;
var ccontact233 = null;
var contactohhand234 = null;
var contactoharm235 = null;
var HamSeqbegin231_tree=null;
var HamSeqend236_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_contactoharm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactoharm");
var stream_ccontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule ccontact");
var stream_pcontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pcontact");
var stream_contactohhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule contactohhand");
this.trace("ANTLR Parse: contactofhand starts "+this.state.backtracking);
try {
// Ham4Parser.g:2267:5: ( HamSeqbegin ( pcontact | ccontact ) ( ( levelhand )=> contactohhand | contactoharm ) HamSeqend -> ^( CNTCTOFHAND ( pcontact )? ( ccontact )? ( contactohhand )? ( contactoharm )? ) )
// Ham4Parser.g:2267:9: HamSeqbegin ( pcontact | ccontact ) ( ( levelhand )=> contactohhand | contactoharm ) HamSeqend
HamSeqbegin231=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_contactofhand8299); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin231);
// Ham4Parser.g:2268:9: ( pcontact | ccontact )
var alt86=2;
var LA86_0 = this.input.LA(1);
if ( ((LA86_0>=HamClose && LA86_0<=HamTouch)) ) {
alt86=1;
}
else if ( ((LA86_0>=HamInterlock && LA86_0<=HamCross)) ) {
alt86=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 86, 0, this.input);
throw nvae;
}
switch (alt86) {
case 1 :
// Ham4Parser.g:2269:13: pcontact
this.pushFollow(Ham4Parser.FOLLOW_pcontact_in_contactofhand8324);
pcontact232=this.pcontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_pcontact.add(pcontact232.getTree());
break;
case 2 :
// Ham4Parser.g:2271:13: ccontact
this.pushFollow(Ham4Parser.FOLLOW_ccontact_in_contactofhand8348);
ccontact233=this.ccontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_ccontact.add(ccontact233.getTree());
break;
}
// Ham4Parser.g:2273:9: ( ( levelhand )=> contactohhand | contactoharm )
var alt87=2;
var LA87_0 = this.input.LA(1);
if ( ((LA87_0>=HamWristback && LA87_0<=HamHandback)||(LA87_0>=HamThumbside && LA87_0<=HamPinkyside)) && (this.synpred26_Ham4Parser())) {
alt87=1;
}
else if ( ((LA87_0>=HamFingertip && LA87_0<=HamFingerside)) && (this.synpred26_Ham4Parser())) {
alt87=1;
}
else if ( (LA87_0==HamThumb) && (this.synpred26_Ham4Parser())) {
alt87=1;
}
else if ( ((LA87_0>=HamIndexfinger && LA87_0<=HamPinky)) && (this.synpred26_Ham4Parser())) {
alt87=1;
}
else if ( ((LA87_0>=HamLrbeside && LA87_0<=HamLrat)) ) {
var LA87_5 = this.input.LA(2);
if ( (this.synpred26_Ham4Parser()) ) {
alt87=1;
}
else if ( (true) ) {
alt87=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 87, 5, this.input);
throw nvae;
}
}
else if ( ((LA87_0>=HamUpperarm && LA87_0<=HamLowerarm)) ) {
alt87=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 87, 0, this.input);
throw nvae;
}
switch (alt87) {
case 1 :
// Ham4Parser.g:2274:13: ( levelhand )=> contactohhand
this.pushFollow(Ham4Parser.FOLLOW_contactohhand_in_contactofhand8414);
contactohhand234=this.contactohhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactohhand.add(contactohhand234.getTree());
break;
case 2 :
// Ham4Parser.g:2278:13: contactoharm
this.pushFollow(Ham4Parser.FOLLOW_contactoharm_in_contactofhand8438);
contactoharm235=this.contactoharm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_contactoharm.add(contactoharm235.getTree());
break;
}
HamSeqend236=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_contactofhand8458); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend236);
// AST REWRITE
// elements: contactoharm, ccontact, pcontact, contactohhand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2282:12: -> ^( CNTCTOFHAND ( pcontact )? ( ccontact )? ( contactohhand )? ( contactoharm )? )
{
// Ham4Parser.g:2282:15: ^( CNTCTOFHAND ( pcontact )? ( ccontact )? ( contactohhand )? ( contactoharm )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CNTCTOFHAND, "CNTCTOFHAND"), root_1);
// Ham4Parser.g:2282:29: ( pcontact )?
if ( stream_pcontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_pcontact.nextTree());
}
stream_pcontact.reset();
// Ham4Parser.g:2282:39: ( ccontact )?
if ( stream_ccontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_ccontact.nextTree());
}
stream_ccontact.reset();
// Ham4Parser.g:2282:49: ( contactohhand )?
if ( stream_contactohhand.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactohhand.nextTree());
}
stream_contactohhand.reset();
// Ham4Parser.g:2282:64: ( contactoharm )?
if ( stream_contactoharm.hasNext() ) {
this.adaptor.addChild(root_1, stream_contactoharm.nextTree());
}
stream_contactoharm.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: contactofhand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("contactofhand", 65);
}
return retval;
},
// inline static return class
contactohhand_return: (function() {
Ham4Parser.contactohhand_return = function(){};
org.antlr.lang.extend(Ham4Parser.contactohhand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2285:1: contactohhand : levelcomplexhand -> ^( CNTCTOHHAND levelcomplexhand ) ;
// $ANTLR start "contactohhand"
contactohhand: function() {
this.traceIn("contactohhand", 66);
var retval = new Ham4Parser.contactohhand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var levelcomplexhand237 = null;
var stream_levelcomplexhand=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelcomplexhand");
this.trace("ANTLR Parse: contactohhand starts "+this.state.backtracking);
try {
// Ham4Parser.g:2301:5: ( levelcomplexhand -> ^( CNTCTOHHAND levelcomplexhand ) )
// Ham4Parser.g:2301:9: levelcomplexhand
this.pushFollow(Ham4Parser.FOLLOW_levelcomplexhand_in_contactohhand8526);
levelcomplexhand237=this.levelcomplexhand();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelcomplexhand.add(levelcomplexhand237.getTree());
// AST REWRITE
// elements: levelcomplexhand
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2303:12: -> ^( CNTCTOHHAND levelcomplexhand )
{
// Ham4Parser.g:2303:15: ^( CNTCTOHHAND levelcomplexhand )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CNTCTOHHAND, "CNTCTOHHAND"), root_1);
this.adaptor.addChild(root_1, stream_levelcomplexhand.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: contactohhand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("contactohhand", 66);
}
return retval;
},
// inline static return class
contactoharm_return: (function() {
Ham4Parser.contactoharm_return = function(){};
org.antlr.lang.extend(Ham4Parser.contactoharm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2306:1: contactoharm : levelcomplexarm -> ^( CNTCTOHARM levelcomplexarm ) ;
// $ANTLR start "contactoharm"
contactoharm: function() {
this.traceIn("contactoharm", 67);
var retval = new Ham4Parser.contactoharm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var levelcomplexarm238 = null;
var stream_levelcomplexarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelcomplexarm");
this.trace("ANTLR Parse: contactoharm starts "+this.state.backtracking);
try {
// Ham4Parser.g:2322:5: ( levelcomplexarm -> ^( CNTCTOHARM levelcomplexarm ) )
// Ham4Parser.g:2322:9: levelcomplexarm
this.pushFollow(Ham4Parser.FOLLOW_levelcomplexarm_in_contactoharm8583);
levelcomplexarm238=this.levelcomplexarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelcomplexarm.add(levelcomplexarm238.getTree());
// AST REWRITE
// elements: levelcomplexarm
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2324:12: -> ^( CNTCTOHARM levelcomplexarm )
{
// Ham4Parser.g:2324:15: ^( CNTCTOHARM levelcomplexarm )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CNTCTOHARM, "CNTCTOHARM"), root_1);
this.adaptor.addChild(root_1, stream_levelcomplexarm.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: contactoharm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("contactoharm", 67);
}
return retval;
},
// inline static return class
lochand_return: (function() {
Ham4Parser.lochand_return = function(){};
org.antlr.lang.extend(Ham4Parser.lochand_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2327:1: lochand : ( handpart | fingerpart ( digit )* | ( digit )+ ( fingerpart )? ) ;
// $ANTLR start "lochand"
lochand: function() {
this.traceIn("lochand", 68);
var retval = new Ham4Parser.lochand_return();
retval.start = this.input.LT(1);
var root_0 = null;
var handpart239 = null;
var fingerpart240 = null;
var digit241 = null;
var digit242 = null;
var fingerpart243 = null;
this.trace("ANTLR Parse: lochand starts "+this.state.backtracking);
try {
// Ham4Parser.g:2350:5: ( ( handpart | fingerpart ( digit )* | ( digit )+ ( fingerpart )? ) )
// Ham4Parser.g:2351:5: ( handpart | fingerpart ( digit )* | ( digit )+ ( fingerpart )? )
root_0 = this.adaptor.nil();
// Ham4Parser.g:2351:5: ( handpart | fingerpart ( digit )* | ( digit )+ ( fingerpart )? )
var alt91=3;
switch ( this.input.LA(1) ) {
case HamWristback:
case HamWristpulse:
case HamThumbball:
case HamPalm:
case HamHandback:
case HamThumbside:
case HamPinkyside:
alt91=1;
break;
case HamFingertip:
case HamFingernail:
case HamFingerpad:
case HamFingermidjoint:
case HamFingerbase:
case HamFingerside:
alt91=2;
break;
case HamThumb:
case HamIndexfinger:
case HamMiddlefinger:
case HamRingfinger:
case HamPinky:
alt91=3;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 91, 0, this.input);
throw nvae;
}
switch (alt91) {
case 1 :
// Ham4Parser.g:2352:9: handpart
this.pushFollow(Ham4Parser.FOLLOW_handpart_in_lochand8652);
handpart239=this.handpart();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, handpart239.getTree());
break;
case 2 :
// Ham4Parser.g:2354:9: fingerpart ( digit )*
this.pushFollow(Ham4Parser.FOLLOW_fingerpart_in_lochand8668);
fingerpart240=this.fingerpart();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingerpart240.getTree());
// Ham4Parser.g:2355:9: ( digit )*
loop88:
do {
var alt88=2;
var LA88_0 = this.input.LA(1);
if ( ((LA88_0>=HamThumb && LA88_0<=HamPinky)) ) {
alt88=1;
}
switch (alt88) {
case 1 :
// Ham4Parser.g:2355:11: digit
this.pushFollow(Ham4Parser.FOLLOW_digit_in_lochand8680);
digit241=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, digit241.getTree());
break;
default :
break loop88;
}
} while (true);
break;
case 3 :
// Ham4Parser.g:2357:9: ( digit )+ ( fingerpart )?
// Ham4Parser.g:2357:9: ( digit )+
var cnt89=0;
loop89:
do {
var alt89=2;
var LA89_0 = this.input.LA(1);
if ( ((LA89_0>=HamThumb && LA89_0<=HamPinky)) ) {
alt89=1;
}
switch (alt89) {
case 1 :
// Ham4Parser.g:2357:11: digit
this.pushFollow(Ham4Parser.FOLLOW_digit_in_lochand8701);
digit242=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, digit242.getTree());
break;
default :
if ( cnt89 >= 1 ) {
break loop89;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(89, this.input);
throw eee;
}
cnt89++;
} while (true);
// Ham4Parser.g:2358:9: ( fingerpart )?
var alt90=2;
var LA90_0 = this.input.LA(1);
if ( ((LA90_0>=HamFingertip && LA90_0<=HamFingerside)) ) {
alt90=1;
}
switch (alt90) {
case 1 :
// Ham4Parser.g:2358:11: fingerpart
this.pushFollow(Ham4Parser.FOLLOW_fingerpart_in_lochand8716);
fingerpart243=this.fingerpart();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, fingerpart243.getTree());
break;
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: lochand finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("lochand", 68);
}
return retval;
},
// inline static return class
a2tstar_return: (function() {
Ham4Parser.a2tstar_return = function(){};
org.antlr.lang.extend(Ham4Parser.a2tstar_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2365:1: a2tstar : a2tlist -> ^( A2TLIST ( a2tlist )? ) ;
// $ANTLR start "a2tstar"
a2tstar: function() {
this.traceIn("a2tstar", 69);
var retval = new Ham4Parser.a2tstar_return();
retval.start = this.input.LT(1);
var root_0 = null;
var a2tlist244 = null;
var stream_a2tlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule a2tlist");
this.trace("ANTLR Parse: a2tstar starts "+this.state.backtracking);
try {
// Ham4Parser.g:2381:5: ( a2tlist -> ^( A2TLIST ( a2tlist )? ) )
// Ham4Parser.g:2381:9: a2tlist
this.pushFollow(Ham4Parser.FOLLOW_a2tlist_in_a2tstar8757);
a2tlist244=this.a2tlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a2tlist.add(a2tlist244.getTree());
// AST REWRITE
// elements: a2tlist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2383:12: -> ^( A2TLIST ( a2tlist )? )
{
// Ham4Parser.g:2383:15: ^( A2TLIST ( a2tlist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(A2TLIST, "A2TLIST"), root_1);
// Ham4Parser.g:2383:25: ( a2tlist )?
if ( stream_a2tlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_a2tlist.nextTree());
}
stream_a2tlist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: a2tstar finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("a2tstar", 69);
}
return retval;
},
// inline static return class
a1tstar_return: (function() {
Ham4Parser.a1tstar_return = function(){};
org.antlr.lang.extend(Ham4Parser.a1tstar_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2386:1: a1tstar : a1tlist -> ^( A1TLIST ( a1tlist )? ) ;
// $ANTLR start "a1tstar"
a1tstar: function() {
this.traceIn("a1tstar", 70);
var retval = new Ham4Parser.a1tstar_return();
retval.start = this.input.LT(1);
var root_0 = null;
var a1tlist245 = null;
var stream_a1tlist=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule a1tlist");
this.trace("ANTLR Parse: a1tstar starts "+this.state.backtracking);
try {
// Ham4Parser.g:2402:5: ( a1tlist -> ^( A1TLIST ( a1tlist )? ) )
// Ham4Parser.g:2402:9: a1tlist
this.pushFollow(Ham4Parser.FOLLOW_a1tlist_in_a1tstar8815);
a1tlist245=this.a1tlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_a1tlist.add(a1tlist245.getTree());
// AST REWRITE
// elements: a1tlist
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2404:12: -> ^( A1TLIST ( a1tlist )? )
{
// Ham4Parser.g:2404:15: ^( A1TLIST ( a1tlist )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(A1TLIST, "A1TLIST"), root_1);
// Ham4Parser.g:2404:25: ( a1tlist )?
if ( stream_a1tlist.hasNext() ) {
this.adaptor.addChild(root_1, stream_a1tlist.nextTree());
}
stream_a1tlist.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: a1tstar finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("a1tstar", 70);
}
return retval;
},
// inline static return class
a2tlist_return: (function() {
Ham4Parser.a2tlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.a2tlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2407:1: a2tlist : ( action2t a2tlist )? ;
// $ANTLR start "a2tlist"
a2tlist: function() {
this.traceIn("a2tlist", 71);
var retval = new Ham4Parser.a2tlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var action2t246 = null;
var a2tlist247 = null;
this.trace("ANTLR Parse: a2tlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:2425:5: ( ( action2t a2tlist )? )
// Ham4Parser.g:2426:9: ( action2t a2tlist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:2426:9: ( action2t a2tlist )?
var alt92=2;
alt92 = this.dfa92.predict(this.input);
switch (alt92) {
case 1 :
// Ham4Parser.g:2427:13: action2t a2tlist
this.pushFollow(Ham4Parser.FOLLOW_action2t_in_a2tlist8893);
action2t246=this.action2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, action2t246.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a2tlist_in_a2tlist8907);
a2tlist247=this.a2tlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, a2tlist247.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: a2tlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("a2tlist", 71);
}
return retval;
},
// inline static return class
a1tlist_return: (function() {
Ham4Parser.a1tlist_return = function(){};
org.antlr.lang.extend(Ham4Parser.a1tlist_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2432:1: a1tlist : ( action1t a1tlist )? ;
// $ANTLR start "a1tlist"
a1tlist: function() {
this.traceIn("a1tlist", 72);
var retval = new Ham4Parser.a1tlist_return();
retval.start = this.input.LT(1);
var root_0 = null;
var action1t248 = null;
var a1tlist249 = null;
this.trace("ANTLR Parse: a1tlist starts "+this.state.backtracking);
try {
// Ham4Parser.g:2450:5: ( ( action1t a1tlist )? )
// Ham4Parser.g:2451:9: ( action1t a1tlist )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:2451:9: ( action1t a1tlist )?
var alt93=2;
alt93 = this.dfa93.predict(this.input);
switch (alt93) {
case 1 :
// Ham4Parser.g:2452:13: action1t a1tlist
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_a1tlist8967);
action1t248=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, action1t248.getTree());
this.pushFollow(Ham4Parser.FOLLOW_a1tlist_in_a1tlist8981);
a1tlist249=this.a1tlist();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, a1tlist249.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: a1tlist finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("a1tlist", 72);
}
return retval;
},
// inline static return class
action2t_return: (function() {
Ham4Parser.action2t_return = function(){};
org.antlr.lang.extend(Ham4Parser.action2t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2457:1: action2t : ( ( action1 location2not1 )=> action1 location2not1 repetitionsoption -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? ) | ( action1t )=> action1t -> ^( ACTION2T action1t ) | ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? ) ) ;
// $ANTLR start "action2t"
action2t: function() {
this.traceIn("action2t", 73);
var retval = new Ham4Parser.action2t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var action1250 = null;
var location2not1251 = null;
var repetitionsoption252 = null;
var action1t253 = null;
var splitaction2loc2254 = null;
var splitaction2t255 = null;
var paraction2t256 = null;
var seqaction2t257 = null;
var seqfusedaction2t258 = null;
var repetitionsoption259 = null;
var stream_seqfusedaction2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqfusedaction2t");
var stream_action1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1t");
var stream_seqaction2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqaction2t");
var stream_location2not1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location2not1");
var stream_repetitionsoption=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule repetitionsoption");
var stream_splitaction2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splitaction2t");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
var stream_paraction2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule paraction2t");
var stream_splitaction2loc2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splitaction2loc2");
this.trace("ANTLR Parse: action2t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2503:5: ( ( ( action1 location2not1 )=> action1 location2not1 repetitionsoption -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? ) | ( action1t )=> action1t -> ^( ACTION2T action1t ) | ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? ) ) )
// Ham4Parser.g:2504:5: ( ( action1 location2not1 )=> action1 location2not1 repetitionsoption -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? ) | ( action1t )=> action1t -> ^( ACTION2T action1t ) | ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? ) )
// Ham4Parser.g:2504:5: ( ( action1 location2not1 )=> action1 location2not1 repetitionsoption -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? ) | ( action1t )=> action1t -> ^( ACTION2T action1t ) | ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? ) )
var alt95=3;
alt95 = this.dfa95.predict(this.input);
switch (alt95) {
case 1 :
// Ham4Parser.g:2505:9: ( action1 location2not1 )=> action1 location2not1 repetitionsoption
this.pushFollow(Ham4Parser.FOLLOW_action1_in_action2t9059);
action1250=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action1250.getTree());
this.pushFollow(Ham4Parser.FOLLOW_location2not1_in_action2t9069);
location2not1251=this.location2not1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location2not1.add(location2not1251.getTree());
this.pushFollow(Ham4Parser.FOLLOW_repetitionsoption_in_action2t9079);
repetitionsoption252=this.repetitionsoption();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetitionsoption.add(repetitionsoption252.getTree());
// AST REWRITE
// elements: action1, location2not1, repetitionsoption
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2510:12: -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? )
{
// Ham4Parser.g:2510:15: ^( ACTION2T action1 location2not1 ( repetitionsoption )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION2T, "ACTION2T"), root_1);
this.adaptor.addChild(root_1, stream_action1.nextTree());
this.adaptor.addChild(root_1, stream_location2not1.nextTree());
// Ham4Parser.g:2510:48: ( repetitionsoption )?
if ( stream_repetitionsoption.hasNext() ) {
this.adaptor.addChild(root_1, stream_repetitionsoption.nextTree());
}
stream_repetitionsoption.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2512:9: ( action1t )=> action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_action2t9143);
action1t253=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1t.add(action1t253.getTree());
// AST REWRITE
// elements: action1t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2515:12: -> ^( ACTION2T action1t )
{
// Ham4Parser.g:2515:15: ^( ACTION2T action1t )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION2T, "ACTION2T"), root_1);
this.adaptor.addChild(root_1, stream_action1t.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:2517:9: ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption
// Ham4Parser.g:2517:9: ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t )
var alt94=5;
switch ( this.input.LA(1) ) {
case HamParbegin:
var LA94_1 = this.input.LA(2);
if ( (this.synpred29_Ham4Parser()) ) {
alt94=1;
}
else if ( (this.synpred30_Ham4Parser()) ) {
alt94=2;
}
else if ( (true) ) {
alt94=3;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 94, 1, this.input);
throw nvae;
}
break;
case HamSeqbegin:
alt94=4;
break;
case HamFusionbegin:
alt94=5;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 94, 0, this.input);
throw nvae;
}
switch (alt94) {
case 1 :
// Ham4Parser.g:2518:13: ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2
this.pushFollow(Ham4Parser.FOLLOW_splitaction2loc2_in_action2t9258);
splitaction2loc2254=this.splitaction2loc2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitaction2loc2.add(splitaction2loc2254.getTree());
break;
case 2 :
// Ham4Parser.g:2523:13: ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t
this.pushFollow(Ham4Parser.FOLLOW_splitaction2t_in_action2t9323);
splitaction2t255=this.splitaction2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitaction2t.add(splitaction2t255.getTree());
break;
case 3 :
// Ham4Parser.g:2527:13: paraction2t
this.pushFollow(Ham4Parser.FOLLOW_paraction2t_in_action2t9347);
paraction2t256=this.paraction2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_paraction2t.add(paraction2t256.getTree());
break;
case 4 :
// Ham4Parser.g:2529:13: seqaction2t
this.pushFollow(Ham4Parser.FOLLOW_seqaction2t_in_action2t9371);
seqaction2t257=this.seqaction2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqaction2t.add(seqaction2t257.getTree());
break;
case 5 :
// Ham4Parser.g:2531:13: seqfusedaction2t
this.pushFollow(Ham4Parser.FOLLOW_seqfusedaction2t_in_action2t9395);
seqfusedaction2t258=this.seqfusedaction2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqfusedaction2t.add(seqfusedaction2t258.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_repetitionsoption_in_action2t9415);
repetitionsoption259=this.repetitionsoption();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetitionsoption.add(repetitionsoption259.getTree());
// AST REWRITE
// elements: splitaction2t, repetitionsoption, paraction2t, seqfusedaction2t, seqaction2t, splitaction2loc2
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2534:12: -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? )
{
// Ham4Parser.g:2534:15: ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION2T, "ACTION2T"), root_1);
// Ham4Parser.g:2534:26: ( splitaction2loc2 )?
if ( stream_splitaction2loc2.hasNext() ) {
this.adaptor.addChild(root_1, stream_splitaction2loc2.nextTree());
}
stream_splitaction2loc2.reset();
// Ham4Parser.g:2534:44: ( splitaction2t )?
if ( stream_splitaction2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_splitaction2t.nextTree());
}
stream_splitaction2t.reset();
// Ham4Parser.g:2534:59: ( paraction2t )?
if ( stream_paraction2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_paraction2t.nextTree());
}
stream_paraction2t.reset();
// Ham4Parser.g:2534:72: ( seqaction2t )?
if ( stream_seqaction2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_seqaction2t.nextTree());
}
stream_seqaction2t.reset();
// Ham4Parser.g:2534:85: ( seqfusedaction2t )?
if ( stream_seqfusedaction2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_seqfusedaction2t.nextTree());
}
stream_seqfusedaction2t.reset();
// Ham4Parser.g:2534:103: ( repetitionsoption )?
if ( stream_repetitionsoption.hasNext() ) {
this.adaptor.addChild(root_1, stream_repetitionsoption.nextTree());
}
stream_repetitionsoption.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: action2t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("action2t", 73);
}
return retval;
},
// inline static return class
action1t_return: (function() {
Ham4Parser.action1t_return = function(){};
org.antlr.lang.extend(Ham4Parser.action1t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2538:1: action1t : ( ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? ) | paraction1t | seqnmoraction1t | seqfusedaction1t ) repetitionsoption -> ^( ACTION1T ( action1 )? ( handconstellation )? ( location1 )? ( HamLargemod )? ( paraction1t )? ( seqnmoraction1t )? ( seqfusedaction1t )? ( repetitionsoption )? ) ;
// $ANTLR start "action1t"
action1t: function() {
this.traceIn("action1t", 74);
var retval = new Ham4Parser.action1t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamLargemod263 = null;
var action1260 = null;
var handconstellation261 = null;
var location1262 = null;
var paraction1t264 = null;
var seqnmoraction1t265 = null;
var seqfusedaction1t266 = null;
var repetitionsoption267 = null;
var HamLargemod263_tree=null;
var stream_HamLargemod=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamLargemod");
var stream_seqfusedaction1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqfusedaction1t");
var stream_repetitionsoption=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule repetitionsoption");
var stream_location1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location1");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
var stream_seqnmoraction1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqnmoraction1t");
var stream_handconstellation=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handconstellation");
var stream_paraction1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule paraction1t");
this.trace("ANTLR Parse: action1t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2581:5: ( ( ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? ) | paraction1t | seqnmoraction1t | seqfusedaction1t ) repetitionsoption -> ^( ACTION1T ( action1 )? ( handconstellation )? ( location1 )? ( HamLargemod )? ( paraction1t )? ( seqnmoraction1t )? ( seqfusedaction1t )? ( repetitionsoption )? ) )
// Ham4Parser.g:2582:9: ( ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? ) | paraction1t | seqnmoraction1t | seqfusedaction1t ) repetitionsoption
// Ham4Parser.g:2582:9: ( ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? ) | paraction1t | seqnmoraction1t | seqfusedaction1t )
var alt98=4;
alt98 = this.dfa98.predict(this.input);
switch (alt98) {
case 1 :
// Ham4Parser.g:2583:13: ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? )
// Ham4Parser.g:2585:13: ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? )
// Ham4Parser.g:2586:17: action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )?
this.pushFollow(Ham4Parser.FOLLOW_action1_in_action1t9555);
action1260=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action1260.getTree());
// Ham4Parser.g:2587:17: ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )?
var alt97=3;
alt97 = this.dfa97.predict(this.input);
switch (alt97) {
case 1 :
// Ham4Parser.g:2588:21: ( handconstellation )=> handconstellation
this.pushFollow(Ham4Parser.FOLLOW_handconstellation_in_action1t9643);
handconstellation261=this.handconstellation();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handconstellation.add(handconstellation261.getTree());
break;
case 2 :
// Ham4Parser.g:2592:21: location1 ( HamLargemod )?
this.pushFollow(Ham4Parser.FOLLOW_location1_in_action1t9683);
location1262=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location1.add(location1262.getTree());
// Ham4Parser.g:2593:21: ( HamLargemod )?
var alt96=2;
alt96 = this.dfa96.predict(this.input);
switch (alt96) {
case 1 :
// Ham4Parser.g:2593:23: HamLargemod
HamLargemod263=this.match(this.input,HamLargemod,Ham4Parser.FOLLOW_HamLargemod_in_action1t9707); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamLargemod.add(HamLargemod263);
break;
}
break;
}
break;
case 2 :
// Ham4Parser.g:2597:13: paraction1t
this.pushFollow(Ham4Parser.FOLLOW_paraction1t_in_action1t9767);
paraction1t264=this.paraction1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_paraction1t.add(paraction1t264.getTree());
break;
case 3 :
// Ham4Parser.g:2599:13: seqnmoraction1t
this.pushFollow(Ham4Parser.FOLLOW_seqnmoraction1t_in_action1t9791);
seqnmoraction1t265=this.seqnmoraction1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqnmoraction1t.add(seqnmoraction1t265.getTree());
break;
case 4 :
// Ham4Parser.g:2601:13: seqfusedaction1t
this.pushFollow(Ham4Parser.FOLLOW_seqfusedaction1t_in_action1t9819);
seqfusedaction1t266=this.seqfusedaction1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqfusedaction1t.add(seqfusedaction1t266.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_repetitionsoption_in_action1t9839);
repetitionsoption267=this.repetitionsoption();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetitionsoption.add(repetitionsoption267.getTree());
// AST REWRITE
// elements: paraction1t, location1, seqnmoraction1t, repetitionsoption, handconstellation, action1, seqfusedaction1t, HamLargemod
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2605:12: -> ^( ACTION1T ( action1 )? ( handconstellation )? ( location1 )? ( HamLargemod )? ( paraction1t )? ( seqnmoraction1t )? ( seqfusedaction1t )? ( repetitionsoption )? )
{
// Ham4Parser.g:2605:15: ^( ACTION1T ( action1 )? ( handconstellation )? ( location1 )? ( HamLargemod )? ( paraction1t )? ( seqnmoraction1t )? ( seqfusedaction1t )? ( repetitionsoption )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1T, "ACTION1T"), root_1);
// Ham4Parser.g:2606:24: ( action1 )?
if ( stream_action1.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1.nextTree());
}
stream_action1.reset();
// Ham4Parser.g:2606:33: ( handconstellation )?
if ( stream_handconstellation.hasNext() ) {
this.adaptor.addChild(root_1, stream_handconstellation.nextTree());
}
stream_handconstellation.reset();
// Ham4Parser.g:2606:52: ( location1 )?
if ( stream_location1.hasNext() ) {
this.adaptor.addChild(root_1, stream_location1.nextTree());
}
stream_location1.reset();
// Ham4Parser.g:2606:63: ( HamLargemod )?
if ( stream_HamLargemod.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamLargemod.nextNode());
}
stream_HamLargemod.reset();
// Ham4Parser.g:2607:24: ( paraction1t )?
if ( stream_paraction1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_paraction1t.nextTree());
}
stream_paraction1t.reset();
// Ham4Parser.g:2608:21: ( seqnmoraction1t )?
if ( stream_seqnmoraction1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_seqnmoraction1t.nextTree());
}
stream_seqnmoraction1t.reset();
// Ham4Parser.g:2609:24: ( seqfusedaction1t )?
if ( stream_seqfusedaction1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_seqfusedaction1t.nextTree());
}
stream_seqfusedaction1t.reset();
// Ham4Parser.g:2610:20: ( repetitionsoption )?
if ( stream_repetitionsoption.hasNext() ) {
this.adaptor.addChild(root_1, stream_repetitionsoption.nextTree());
}
stream_repetitionsoption.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: action1t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("action1t", 74);
}
return retval;
},
// inline static return class
action1_return: (function() {
Ham4Parser.action1_return = function(){};
org.antlr.lang.extend(Ham4Parser.action1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2613:1: action1 : ( HamNomotion -> ^( ACTION1 HamNomotion ) | simplemovement ( ( modifier )+ ( HamLargemod )? )? -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? ) | ( HamSeqbegin digit )=> specialfingerplaymovement -> ^( ACTION1 specialfingerplaymovement ) | paraction1 -> ^( ACTION1 paraction1 ) | seqaction1 -> ^( ACTION1 seqaction1 ) | seqfusedaction1 -> ^( ACTION1 seqfusedaction1 ) ) ;
// $ANTLR start "action1"
action1: function() {
this.traceIn("action1", 75);
var retval = new Ham4Parser.action1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamNomotion268 = null;
var HamLargemod271 = null;
var simplemovement269 = null;
var modifier270 = null;
var specialfingerplaymovement272 = null;
var paraction1273 = null;
var seqaction1274 = null;
var seqfusedaction1275 = null;
var HamNomotion268_tree=null;
var HamLargemod271_tree=null;
var stream_HamNomotion=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNomotion");
var stream_HamLargemod=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamLargemod");
var stream_specialfingerplaymovement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule specialfingerplaymovement");
var stream_modifier=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule modifier");
var stream_seqaction1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqaction1");
var stream_simplemovement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule simplemovement");
var stream_paraction1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule paraction1");
var stream_seqfusedaction1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule seqfusedaction1");
this.trace("ANTLR Parse: action1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:2652:5: ( ( HamNomotion -> ^( ACTION1 HamNomotion ) | simplemovement ( ( modifier )+ ( HamLargemod )? )? -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? ) | ( HamSeqbegin digit )=> specialfingerplaymovement -> ^( ACTION1 specialfingerplaymovement ) | paraction1 -> ^( ACTION1 paraction1 ) | seqaction1 -> ^( ACTION1 seqaction1 ) | seqfusedaction1 -> ^( ACTION1 seqfusedaction1 ) ) )
// Ham4Parser.g:2653:5: ( HamNomotion -> ^( ACTION1 HamNomotion ) | simplemovement ( ( modifier )+ ( HamLargemod )? )? -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? ) | ( HamSeqbegin digit )=> specialfingerplaymovement -> ^( ACTION1 specialfingerplaymovement ) | paraction1 -> ^( ACTION1 paraction1 ) | seqaction1 -> ^( ACTION1 seqaction1 ) | seqfusedaction1 -> ^( ACTION1 seqfusedaction1 ) )
// Ham4Parser.g:2653:5: ( HamNomotion -> ^( ACTION1 HamNomotion ) | simplemovement ( ( modifier )+ ( HamLargemod )? )? -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? ) | ( HamSeqbegin digit )=> specialfingerplaymovement -> ^( ACTION1 specialfingerplaymovement ) | paraction1 -> ^( ACTION1 paraction1 ) | seqaction1 -> ^( ACTION1 seqaction1 ) | seqfusedaction1 -> ^( ACTION1 seqfusedaction1 ) )
var alt102=6;
alt102 = this.dfa102.predict(this.input);
switch (alt102) {
case 1 :
// Ham4Parser.g:2654:9: HamNomotion
HamNomotion268=this.match(this.input,HamNomotion,Ham4Parser.FOLLOW_HamNomotion_in_action110038); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNomotion.add(HamNomotion268);
// AST REWRITE
// elements: HamNomotion
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2655:12: -> ^( ACTION1 HamNomotion )
{
// Ham4Parser.g:2655:15: ^( ACTION1 HamNomotion )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_HamNomotion.nextNode());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2657:9: simplemovement ( ( modifier )+ ( HamLargemod )? )?
this.pushFollow(Ham4Parser.FOLLOW_simplemovement_in_action110073);
simplemovement269=this.simplemovement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_simplemovement.add(simplemovement269.getTree());
// Ham4Parser.g:2658:9: ( ( modifier )+ ( HamLargemod )? )?
var alt101=2;
var LA101_0 = this.input.LA(1);
if ( ((LA101_0>=HamFast && LA101_0<=HamHalt)) ) {
alt101=1;
}
switch (alt101) {
case 1 :
// Ham4Parser.g:2659:13: ( modifier )+ ( HamLargemod )?
// Ham4Parser.g:2659:13: ( modifier )+
var cnt99=0;
loop99:
do {
var alt99=2;
var LA99_0 = this.input.LA(1);
if ( ((LA99_0>=HamFast && LA99_0<=HamHalt)) ) {
alt99=1;
}
switch (alt99) {
case 1 :
// Ham4Parser.g:2659:15: modifier
this.pushFollow(Ham4Parser.FOLLOW_modifier_in_action110099);
modifier270=this.modifier();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_modifier.add(modifier270.getTree());
break;
default :
if ( cnt99 >= 1 ) {
break loop99;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(99, this.input);
throw eee;
}
cnt99++;
} while (true);
// Ham4Parser.g:2660:13: ( HamLargemod )?
var alt100=2;
var LA100_0 = this.input.LA(1);
if ( (LA100_0==HamLargemod) ) {
alt100=1;
}
switch (alt100) {
case 1 :
// Ham4Parser.g:2660:15: HamLargemod
HamLargemod271=this.match(this.input,HamLargemod,Ham4Parser.FOLLOW_HamLargemod_in_action110118); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamLargemod.add(HamLargemod271);
break;
}
break;
}
// AST REWRITE
// elements: modifier, simplemovement, HamLargemod
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2662:12: -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? )
{
// Ham4Parser.g:2662:15: ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_simplemovement.nextTree());
// Ham4Parser.g:2662:40: ( modifier )*
while ( stream_modifier.hasNext() ) {
this.adaptor.addChild(root_1, stream_modifier.nextTree());
}
stream_modifier.reset();
// Ham4Parser.g:2662:50: ( HamLargemod )?
if ( stream_HamLargemod.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamLargemod.nextNode());
}
stream_HamLargemod.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:2664:9: ( HamSeqbegin digit )=> specialfingerplaymovement
this.pushFollow(Ham4Parser.FOLLOW_specialfingerplaymovement_in_action110199);
specialfingerplaymovement272=this.specialfingerplaymovement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_specialfingerplaymovement.add(specialfingerplaymovement272.getTree());
// AST REWRITE
// elements: specialfingerplaymovement
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2667:12: -> ^( ACTION1 specialfingerplaymovement )
{
// Ham4Parser.g:2667:15: ^( ACTION1 specialfingerplaymovement )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_specialfingerplaymovement.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 4 :
// Ham4Parser.g:2669:9: paraction1
this.pushFollow(Ham4Parser.FOLLOW_paraction1_in_action110234);
paraction1273=this.paraction1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_paraction1.add(paraction1273.getTree());
// AST REWRITE
// elements: paraction1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2670:12: -> ^( ACTION1 paraction1 )
{
// Ham4Parser.g:2670:15: ^( ACTION1 paraction1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_paraction1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 5 :
// Ham4Parser.g:2672:9: seqaction1
this.pushFollow(Ham4Parser.FOLLOW_seqaction1_in_action110269);
seqaction1274=this.seqaction1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqaction1.add(seqaction1274.getTree());
// AST REWRITE
// elements: seqaction1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2673:12: -> ^( ACTION1 seqaction1 )
{
// Ham4Parser.g:2673:15: ^( ACTION1 seqaction1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_seqaction1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 6 :
// Ham4Parser.g:2675:9: seqfusedaction1
this.pushFollow(Ham4Parser.FOLLOW_seqfusedaction1_in_action110304);
seqfusedaction1275=this.seqfusedaction1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_seqfusedaction1.add(seqfusedaction1275.getTree());
// AST REWRITE
// elements: seqfusedaction1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2676:12: -> ^( ACTION1 seqfusedaction1 )
{
// Ham4Parser.g:2676:15: ^( ACTION1 seqfusedaction1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(ACTION1, "ACTION1"), root_1);
this.adaptor.addChild(root_1, stream_seqfusedaction1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: action1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("action1", 75);
}
return retval;
},
// inline static return class
action1seq_return: (function() {
Ham4Parser.action1seq_return = function(){};
org.antlr.lang.extend(Ham4Parser.action1seq_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2683:1: action1seq : ( action1 )+ ;
// $ANTLR start "action1seq"
action1seq: function() {
this.traceIn("action1seq", 76);
var retval = new Ham4Parser.action1seq_return();
retval.start = this.input.LT(1);
var root_0 = null;
var action1276 = null;
this.trace("ANTLR Parse: action1seq starts "+this.state.backtracking);
try {
// Ham4Parser.g:2697:5: ( ( action1 )+ )
// Ham4Parser.g:2697:7: ( action1 )+
root_0 = this.adaptor.nil();
// Ham4Parser.g:2697:7: ( action1 )+
var cnt103=0;
loop103:
do {
var alt103=2;
alt103 = this.dfa103.predict(this.input);
switch (alt103) {
case 1 :
// Ham4Parser.g:2697:7: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_action1seq10359);
action1276=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, action1276.getTree());
break;
default :
if ( cnt103 >= 1 ) {
break loop103;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(103, this.input);
throw eee;
}
cnt103++;
} while (true);
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: action1seq finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("action1seq", 76);
}
return retval;
},
// inline static return class
action1tseq_return: (function() {
Ham4Parser.action1tseq_return = function(){};
org.antlr.lang.extend(Ham4Parser.action1tseq_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2700:1: action1tseq : ( action1t )+ ;
// $ANTLR start "action1tseq"
action1tseq: function() {
this.traceIn("action1tseq", 77);
var retval = new Ham4Parser.action1tseq_return();
retval.start = this.input.LT(1);
var root_0 = null;
var action1t277 = null;
this.trace("ANTLR Parse: action1tseq starts "+this.state.backtracking);
try {
// Ham4Parser.g:2714:5: ( ( action1t )+ )
// Ham4Parser.g:2714:7: ( action1t )+
root_0 = this.adaptor.nil();
// Ham4Parser.g:2714:7: ( action1t )+
var cnt104=0;
loop104:
do {
var alt104=2;
alt104 = this.dfa104.predict(this.input);
switch (alt104) {
case 1 :
// Ham4Parser.g:2714:7: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_action1tseq10387);
action1t277=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, action1t277.getTree());
break;
default :
if ( cnt104 >= 1 ) {
break loop104;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(104, this.input);
throw eee;
}
cnt104++;
} while (true);
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: action1tseq finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("action1tseq", 77);
}
return retval;
},
// inline static return class
paraction2t_return: (function() {
Ham4Parser.paraction2t_return = function(){};
org.antlr.lang.extend(Ham4Parser.paraction2t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2717:1: paraction2t : HamParbegin ( action2t )+ HamParend -> ^( PARACT2T ( action2t )* ) ;
// $ANTLR start "paraction2t"
paraction2t: function() {
this.traceIn("paraction2t", 78);
var retval = new Ham4Parser.paraction2t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin278 = null;
var HamParend280 = null;
var action2t279 = null;
var HamParbegin278_tree=null;
var HamParend280_tree=null;
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_action2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action2t");
this.trace("ANTLR Parse: paraction2t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2735:5: ( HamParbegin ( action2t )+ HamParend -> ^( PARACT2T ( action2t )* ) )
// Ham4Parser.g:2735:9: HamParbegin ( action2t )+ HamParend
HamParbegin278=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_paraction2t10417); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin278);
// Ham4Parser.g:2736:9: ( action2t )+
var cnt105=0;
loop105:
do {
var alt105=2;
alt105 = this.dfa105.predict(this.input);
switch (alt105) {
case 1 :
// Ham4Parser.g:2736:11: action2t
this.pushFollow(Ham4Parser.FOLLOW_action2t_in_paraction2t10430);
action2t279=this.action2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action2t.add(action2t279.getTree());
break;
default :
if ( cnt105 >= 1 ) {
break loop105;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(105, this.input);
throw eee;
}
cnt105++;
} while (true);
HamParend280=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_paraction2t10443); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend280);
// AST REWRITE
// elements: action2t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2739:12: -> ^( PARACT2T ( action2t )* )
{
// Ham4Parser.g:2739:15: ^( PARACT2T ( action2t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(PARACT2T, "PARACT2T"), root_1);
// Ham4Parser.g:2739:26: ( action2t )*
while ( stream_action2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action2t.nextTree());
}
stream_action2t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: paraction2t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("paraction2t", 78);
}
return retval;
},
// inline static return class
seqaction2t_return: (function() {
Ham4Parser.seqaction2t_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqaction2t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2742:1: seqaction2t : HamSeqbegin ( action2t )+ HamSeqend -> ^( SEQACT2T ( action2t )* ) ;
// $ANTLR start "seqaction2t"
seqaction2t: function() {
this.traceIn("seqaction2t", 79);
var retval = new Ham4Parser.seqaction2t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin281 = null;
var HamSeqend283 = null;
var action2t282 = null;
var HamSeqbegin281_tree=null;
var HamSeqend283_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_action2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action2t");
this.trace("ANTLR Parse: seqaction2t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2760:5: ( HamSeqbegin ( action2t )+ HamSeqend -> ^( SEQACT2T ( action2t )* ) )
// Ham4Parser.g:2760:9: HamSeqbegin ( action2t )+ HamSeqend
HamSeqbegin281=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_seqaction2t10502); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin281);
// Ham4Parser.g:2761:9: ( action2t )+
var cnt106=0;
loop106:
do {
var alt106=2;
alt106 = this.dfa106.predict(this.input);
switch (alt106) {
case 1 :
// Ham4Parser.g:2761:11: action2t
this.pushFollow(Ham4Parser.FOLLOW_action2t_in_seqaction2t10515);
action2t282=this.action2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action2t.add(action2t282.getTree());
break;
default :
if ( cnt106 >= 1 ) {
break loop106;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(106, this.input);
throw eee;
}
cnt106++;
} while (true);
HamSeqend283=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_seqaction2t10528); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend283);
// AST REWRITE
// elements: action2t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2764:12: -> ^( SEQACT2T ( action2t )* )
{
// Ham4Parser.g:2764:15: ^( SEQACT2T ( action2t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQACT2T, "SEQACT2T"), root_1);
// Ham4Parser.g:2764:26: ( action2t )*
while ( stream_action2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action2t.nextTree());
}
stream_action2t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqaction2t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqaction2t", 79);
}
return retval;
},
// inline static return class
seqfusedaction2t_return: (function() {
Ham4Parser.seqfusedaction2t_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqfusedaction2t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2767:1: seqfusedaction2t : HamFusionbegin ( action2t )+ HamFusionend -> ^( SEQFUSEDACT2T ( action2t )* ) ;
// $ANTLR start "seqfusedaction2t"
seqfusedaction2t: function() {
this.traceIn("seqfusedaction2t", 80);
var retval = new Ham4Parser.seqfusedaction2t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamFusionbegin284 = null;
var HamFusionend286 = null;
var action2t285 = null;
var HamFusionbegin284_tree=null;
var HamFusionend286_tree=null;
var stream_HamFusionbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionbegin");
var stream_HamFusionend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionend");
var stream_action2t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action2t");
this.trace("ANTLR Parse: seqfusedaction2t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2785:5: ( HamFusionbegin ( action2t )+ HamFusionend -> ^( SEQFUSEDACT2T ( action2t )* ) )
// Ham4Parser.g:2785:9: HamFusionbegin ( action2t )+ HamFusionend
HamFusionbegin284=this.match(this.input,HamFusionbegin,Ham4Parser.FOLLOW_HamFusionbegin_in_seqfusedaction2t10587); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionbegin.add(HamFusionbegin284);
// Ham4Parser.g:2786:9: ( action2t )+
var cnt107=0;
loop107:
do {
var alt107=2;
alt107 = this.dfa107.predict(this.input);
switch (alt107) {
case 1 :
// Ham4Parser.g:2786:11: action2t
this.pushFollow(Ham4Parser.FOLLOW_action2t_in_seqfusedaction2t10600);
action2t285=this.action2t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action2t.add(action2t285.getTree());
break;
default :
if ( cnt107 >= 1 ) {
break loop107;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(107, this.input);
throw eee;
}
cnt107++;
} while (true);
HamFusionend286=this.match(this.input,HamFusionend,Ham4Parser.FOLLOW_HamFusionend_in_seqfusedaction2t10613); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionend.add(HamFusionend286);
// AST REWRITE
// elements: action2t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2789:12: -> ^( SEQFUSEDACT2T ( action2t )* )
{
// Ham4Parser.g:2789:15: ^( SEQFUSEDACT2T ( action2t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQFUSEDACT2T, "SEQFUSEDACT2T"), root_1);
// Ham4Parser.g:2789:31: ( action2t )*
while ( stream_action2t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action2t.nextTree());
}
stream_action2t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqfusedaction2t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqfusedaction2t", 80);
}
return retval;
},
// inline static return class
splitaction2loc2_return: (function() {
Ham4Parser.splitaction2loc2_return = function(){};
org.antlr.lang.extend(Ham4Parser.splitaction2loc2_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2792:1: splitaction2loc2 : HamParbegin acta= action1seq HamPlus actb= action1seq HamParend location2 -> ^( SPLITACT2LOC2 $acta HamPlus $actb location2 ) ;
// $ANTLR start "splitaction2loc2"
splitaction2loc2: function() {
this.traceIn("splitaction2loc2", 81);
var retval = new Ham4Parser.splitaction2loc2_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin287 = null;
var HamPlus288 = null;
var HamParend289 = null;
var acta = null;
var actb = null;
var location2290 = null;
var HamParbegin287_tree=null;
var HamPlus288_tree=null;
var HamParend289_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_action1seq=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1seq");
var stream_location2=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule location2");
this.trace("ANTLR Parse: splitaction2loc2 starts "+this.state.backtracking);
try {
// Ham4Parser.g:2813:5: ( HamParbegin acta= action1seq HamPlus actb= action1seq HamParend location2 -> ^( SPLITACT2LOC2 $acta HamPlus $actb location2 ) )
// Ham4Parser.g:2813:9: HamParbegin acta= action1seq HamPlus actb= action1seq HamParend location2
HamParbegin287=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splitaction2loc210672); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin287);
this.pushFollow(Ham4Parser.FOLLOW_action1seq_in_splitaction2loc210685);
acta=this.action1seq();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1seq.add(acta.getTree());
HamPlus288=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splitaction2loc210695); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus288);
this.pushFollow(Ham4Parser.FOLLOW_action1seq_in_splitaction2loc210707);
actb=this.action1seq();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1seq.add(actb.getTree());
HamParend289=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splitaction2loc210717); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend289);
this.pushFollow(Ham4Parser.FOLLOW_location2_in_splitaction2loc210728);
location2290=this.location2();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_location2.add(location2290.getTree());
// AST REWRITE
// elements: acta, HamPlus, location2, actb
// token labels: 
// rule labels: acta, actb, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_acta=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token acta",acta!=null?acta.tree:null);
var stream_actb=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token actb",actb!=null?actb.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2820:12: -> ^( SPLITACT2LOC2 $acta HamPlus $actb location2 )
{
// Ham4Parser.g:2820:15: ^( SPLITACT2LOC2 $acta HamPlus $actb location2 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SPLITACT2LOC2, "SPLITACT2LOC2"), root_1);
this.adaptor.addChild(root_1, stream_acta.nextTree());
this.adaptor.addChild(root_1, stream_HamPlus.nextNode());
this.adaptor.addChild(root_1, stream_actb.nextTree());
this.adaptor.addChild(root_1, stream_location2.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splitaction2loc2 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splitaction2loc2", 81);
}
return retval;
},
// inline static return class
splitaction2t_return: (function() {
Ham4Parser.splitaction2t_return = function(){};
org.antlr.lang.extend(Ham4Parser.splitaction2t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2823:1: splitaction2t : HamParbegin acta= action1tseq HamPlus actb= action1tseq HamParend -> ^( SPLITACT2T $acta HamPlus $actb) ;
// $ANTLR start "splitaction2t"
splitaction2t: function() {
this.traceIn("splitaction2t", 82);
var retval = new Ham4Parser.splitaction2t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin291 = null;
var HamPlus292 = null;
var HamParend293 = null;
var acta = null;
var actb = null;
var HamParbegin291_tree=null;
var HamPlus292_tree=null;
var HamParend293_tree=null;
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_action1tseq=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1tseq");
this.trace("ANTLR Parse: splitaction2t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2843:5: ( HamParbegin acta= action1tseq HamPlus actb= action1tseq HamParend -> ^( SPLITACT2T $acta HamPlus $actb) )
// Ham4Parser.g:2843:9: HamParbegin acta= action1tseq HamPlus actb= action1tseq HamParend
HamParbegin291=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splitaction2t10793); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin291);
this.pushFollow(Ham4Parser.FOLLOW_action1tseq_in_splitaction2t10806);
acta=this.action1tseq();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1tseq.add(acta.getTree());
HamPlus292=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splitaction2t10816); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus292);
this.pushFollow(Ham4Parser.FOLLOW_action1tseq_in_splitaction2t10828);
actb=this.action1tseq();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1tseq.add(actb.getTree());
HamParend293=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splitaction2t10838); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend293);
// AST REWRITE
// elements: actb, acta, HamPlus
// token labels: 
// rule labels: acta, actb, retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_acta=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token acta",acta!=null?acta.tree:null);
var stream_actb=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token actb",actb!=null?actb.tree:null);
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2849:12: -> ^( SPLITACT2T $acta HamPlus $actb)
{
// Ham4Parser.g:2849:15: ^( SPLITACT2T $acta HamPlus $actb)
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SPLITACT2T, "SPLITACT2T"), root_1);
this.adaptor.addChild(root_1, stream_acta.nextTree());
this.adaptor.addChild(root_1, stream_HamPlus.nextNode());
this.adaptor.addChild(root_1, stream_actb.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splitaction2t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splitaction2t", 82);
}
return retval;
},
// inline static return class
paraction1t_return: (function() {
Ham4Parser.paraction1t_return = function(){};
org.antlr.lang.extend(Ham4Parser.paraction1t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2852:1: paraction1t : HamParbegin ( action1t )+ HamParend -> ^( PARACT1T ( action1t )* ) ;
// $ANTLR start "paraction1t"
paraction1t: function() {
this.traceIn("paraction1t", 83);
var retval = new Ham4Parser.paraction1t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin294 = null;
var HamParend296 = null;
var action1t295 = null;
var HamParbegin294_tree=null;
var HamParend296_tree=null;
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_action1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1t");
this.trace("ANTLR Parse: paraction1t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2871:5: ( HamParbegin ( action1t )+ HamParend -> ^( PARACT1T ( action1t )* ) )
// Ham4Parser.g:2872:9: HamParbegin ( action1t )+ HamParend
HamParbegin294=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_paraction1t10908); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin294);
// Ham4Parser.g:2873:9: ( action1t )+
var cnt108=0;
loop108:
do {
var alt108=2;
alt108 = this.dfa108.predict(this.input);
switch (alt108) {
case 1 :
// Ham4Parser.g:2873:11: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_paraction1t10921);
action1t295=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1t.add(action1t295.getTree());
break;
default :
if ( cnt108 >= 1 ) {
break loop108;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(108, this.input);
throw eee;
}
cnt108++;
} while (true);
HamParend296=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_paraction1t10934); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend296);
// AST REWRITE
// elements: action1t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2876:12: -> ^( PARACT1T ( action1t )* )
{
// Ham4Parser.g:2876:15: ^( PARACT1T ( action1t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(PARACT1T, "PARACT1T"), root_1);
// Ham4Parser.g:2876:26: ( action1t )*
while ( stream_action1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1t.nextTree());
}
stream_action1t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: paraction1t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("paraction1t", 83);
}
return retval;
},
// inline static return class
seqnmoraction1t_return: (function() {
Ham4Parser.seqnmoraction1t_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqnmoraction1t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2879:1: seqnmoraction1t : HamSeqbegin ( ( ( levelbody )=> levelbody | levelarm ) action1t -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t ) | ( action1t )+ -> ^( SEQACT1T ( action1t )* ) ) HamSeqend ;
// $ANTLR start "seqnmoraction1t"
seqnmoraction1t: function() {
this.traceIn("seqnmoraction1t", 84);
var retval = new Ham4Parser.seqnmoraction1t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin297 = null;
var HamSeqend302 = null;
var levelbody298 = null;
var levelarm299 = null;
var action1t300 = null;
var action1t301 = null;
var HamSeqbegin297_tree=null;
var HamSeqend302_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_action1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1t");
var stream_levelbody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelbody");
var stream_levelarm=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule levelarm");
this.trace("ANTLR Parse: seqnmoraction1t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2908:5: ( HamSeqbegin ( ( ( levelbody )=> levelbody | levelarm ) action1t -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t ) | ( action1t )+ -> ^( SEQACT1T ( action1t )* ) ) HamSeqend )
// Ham4Parser.g:2909:9: HamSeqbegin ( ( ( levelbody )=> levelbody | levelarm ) action1t -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t ) | ( action1t )+ -> ^( SEQACT1T ( action1t )* ) ) HamSeqend
HamSeqbegin297=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_seqnmoraction1t10999); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin297);
// Ham4Parser.g:2910:9: ( ( ( levelbody )=> levelbody | levelarm ) action1t -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t ) | ( action1t )+ -> ^( SEQACT1T ( action1t )* ) )
var alt111=2;
alt111 = this.dfa111.predict(this.input);
switch (alt111) {
case 1 :
// Ham4Parser.g:2911:13: ( ( levelbody )=> levelbody | levelarm ) action1t
// Ham4Parser.g:2911:13: ( ( levelbody )=> levelbody | levelarm )
var alt109=2;
alt109 = this.dfa109.predict(this.input);
switch (alt109) {
case 1 :
// Ham4Parser.g:2912:15: ( levelbody )=> levelbody
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_seqnmoraction1t11048);
levelbody298=this.levelbody();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelbody.add(levelbody298.getTree());
break;
case 2 :
// Ham4Parser.g:2914:15: levelarm
this.pushFollow(Ham4Parser.FOLLOW_levelarm_in_seqnmoraction1t11078);
levelarm299=this.levelarm();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_levelarm.add(levelarm299.getTree());
break;
}
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_seqnmoraction1t11106);
action1t300=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1t.add(action1t300.getTree());
// AST REWRITE
// elements: action1t, levelbody, levelarm
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2917:15: -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t )
{
// Ham4Parser.g:2917:18: ^( NMACT1T ( levelbody )* ( levelarm )* action1t )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(NMACT1T, "NMACT1T"), root_1);
// Ham4Parser.g:2917:28: ( levelbody )*
while ( stream_levelbody.hasNext() ) {
this.adaptor.addChild(root_1, stream_levelbody.nextTree());
}
stream_levelbody.reset();
// Ham4Parser.g:2917:39: ( levelarm )*
while ( stream_levelarm.hasNext() ) {
this.adaptor.addChild(root_1, stream_levelarm.nextTree());
}
stream_levelarm.reset();
this.adaptor.addChild(root_1, stream_action1t.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:2919:13: ( action1t )+
// Ham4Parser.g:2919:13: ( action1t )+
var cnt110=0;
loop110:
do {
var alt110=2;
alt110 = this.dfa110.predict(this.input);
switch (alt110) {
case 1 :
// Ham4Parser.g:2919:15: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_seqnmoraction1t11160);
action1t301=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1t.add(action1t301.getTree());
break;
default :
if ( cnt110 >= 1 ) {
break loop110;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(110, this.input);
throw eee;
}
cnt110++;
} while (true);
// AST REWRITE
// elements: action1t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2920:15: -> ^( SEQACT1T ( action1t )* )
{
// Ham4Parser.g:2920:18: ^( SEQACT1T ( action1t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQACT1T, "SEQACT1T"), root_1);
// Ham4Parser.g:2920:29: ( action1t )*
while ( stream_action1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1t.nextTree());
}
stream_action1t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
HamSeqend302=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_seqnmoraction1t11206); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend302);
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqnmoraction1t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqnmoraction1t", 84);
}
return retval;
},
// inline static return class
seqfusedaction1t_return: (function() {
Ham4Parser.seqfusedaction1t_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqfusedaction1t_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2926:1: seqfusedaction1t : HamFusionbegin ( action1t )+ HamFusionend -> ^( SEQFUSEDACT1T ( action1t )* ) ;
// $ANTLR start "seqfusedaction1t"
seqfusedaction1t: function() {
this.traceIn("seqfusedaction1t", 85);
var retval = new Ham4Parser.seqfusedaction1t_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamFusionbegin303 = null;
var HamFusionend305 = null;
var action1t304 = null;
var HamFusionbegin303_tree=null;
var HamFusionend305_tree=null;
var stream_HamFusionbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionbegin");
var stream_HamFusionend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionend");
var stream_action1t=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1t");
this.trace("ANTLR Parse: seqfusedaction1t starts "+this.state.backtracking);
try {
// Ham4Parser.g:2945:5: ( HamFusionbegin ( action1t )+ HamFusionend -> ^( SEQFUSEDACT1T ( action1t )* ) )
// Ham4Parser.g:2946:9: HamFusionbegin ( action1t )+ HamFusionend
HamFusionbegin303=this.match(this.input,HamFusionbegin,Ham4Parser.FOLLOW_HamFusionbegin_in_seqfusedaction1t11251); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionbegin.add(HamFusionbegin303);
// Ham4Parser.g:2947:9: ( action1t )+
var cnt112=0;
loop112:
do {
var alt112=2;
alt112 = this.dfa112.predict(this.input);
switch (alt112) {
case 1 :
// Ham4Parser.g:2947:11: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_seqfusedaction1t11264);
action1t304=this.action1t();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1t.add(action1t304.getTree());
break;
default :
if ( cnt112 >= 1 ) {
break loop112;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(112, this.input);
throw eee;
}
cnt112++;
} while (true);
HamFusionend305=this.match(this.input,HamFusionend,Ham4Parser.FOLLOW_HamFusionend_in_seqfusedaction1t11277); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionend.add(HamFusionend305);
// AST REWRITE
// elements: action1t
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2950:11: -> ^( SEQFUSEDACT1T ( action1t )* )
{
// Ham4Parser.g:2950:14: ^( SEQFUSEDACT1T ( action1t )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQFUSEDACT1T, "SEQFUSEDACT1T"), root_1);
// Ham4Parser.g:2950:30: ( action1t )*
while ( stream_action1t.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1t.nextTree());
}
stream_action1t.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqfusedaction1t finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqfusedaction1t", 85);
}
return retval;
},
// inline static return class
paraction1_return: (function() {
Ham4Parser.paraction1_return = function(){};
org.antlr.lang.extend(Ham4Parser.paraction1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2953:1: paraction1 : HamParbegin ( action1 )+ HamParend -> ^( PARACT1 ( action1 )* ) ;
// $ANTLR start "paraction1"
paraction1: function() {
this.traceIn("paraction1", 86);
var retval = new Ham4Parser.paraction1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin306 = null;
var HamParend308 = null;
var action1307 = null;
var HamParbegin306_tree=null;
var HamParend308_tree=null;
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
this.trace("ANTLR Parse: paraction1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:2972:5: ( HamParbegin ( action1 )+ HamParend -> ^( PARACT1 ( action1 )* ) )
// Ham4Parser.g:2973:9: HamParbegin ( action1 )+ HamParend
HamParbegin306=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_paraction111341); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin306);
// Ham4Parser.g:2974:9: ( action1 )+
var cnt113=0;
loop113:
do {
var alt113=2;
alt113 = this.dfa113.predict(this.input);
switch (alt113) {
case 1 :
// Ham4Parser.g:2974:11: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_paraction111354);
action1307=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action1307.getTree());
break;
default :
if ( cnt113 >= 1 ) {
break loop113;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(113, this.input);
throw eee;
}
cnt113++;
} while (true);
HamParend308=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_paraction111367); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend308);
// AST REWRITE
// elements: action1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 2977:11: -> ^( PARACT1 ( action1 )* )
{
// Ham4Parser.g:2977:14: ^( PARACT1 ( action1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(PARACT1, "PARACT1"), root_1);
// Ham4Parser.g:2977:24: ( action1 )*
while ( stream_action1.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1.nextTree());
}
stream_action1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: paraction1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("paraction1", 86);
}
return retval;
},
// inline static return class
seqaction1_return: (function() {
Ham4Parser.seqaction1_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqaction1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:2980:1: seqaction1 : HamSeqbegin ( action1 )+ HamSeqend -> ^( SEQACT1 ( action1 )* ) ;
// $ANTLR start "seqaction1"
seqaction1: function() {
this.traceIn("seqaction1", 87);
var retval = new Ham4Parser.seqaction1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin309 = null;
var HamSeqend311 = null;
var action1310 = null;
var HamSeqbegin309_tree=null;
var HamSeqend311_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
this.trace("ANTLR Parse: seqaction1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:2999:5: ( HamSeqbegin ( action1 )+ HamSeqend -> ^( SEQACT1 ( action1 )* ) )
// Ham4Parser.g:3000:9: HamSeqbegin ( action1 )+ HamSeqend
HamSeqbegin309=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_seqaction111431); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin309);
// Ham4Parser.g:3001:9: ( action1 )+
var cnt114=0;
loop114:
do {
var alt114=2;
alt114 = this.dfa114.predict(this.input);
switch (alt114) {
case 1 :
// Ham4Parser.g:3001:11: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_seqaction111444);
action1310=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action1310.getTree());
break;
default :
if ( cnt114 >= 1 ) {
break loop114;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(114, this.input);
throw eee;
}
cnt114++;
} while (true);
HamSeqend311=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_seqaction111457); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend311);
// AST REWRITE
// elements: action1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3004:11: -> ^( SEQACT1 ( action1 )* )
{
// Ham4Parser.g:3004:14: ^( SEQACT1 ( action1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQACT1, "SEQACT1"), root_1);
// Ham4Parser.g:3004:24: ( action1 )*
while ( stream_action1.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1.nextTree());
}
stream_action1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqaction1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqaction1", 87);
}
return retval;
},
// inline static return class
seqfusedaction1_return: (function() {
Ham4Parser.seqfusedaction1_return = function(){};
org.antlr.lang.extend(Ham4Parser.seqfusedaction1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3007:1: seqfusedaction1 : HamFusionbegin ( action1 )+ HamFusionend -> ^( SEQFUSEDACT1 ( action1 )* ) ;
// $ANTLR start "seqfusedaction1"
seqfusedaction1: function() {
this.traceIn("seqfusedaction1", 88);
var retval = new Ham4Parser.seqfusedaction1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamFusionbegin312 = null;
var HamFusionend314 = null;
var action1313 = null;
var HamFusionbegin312_tree=null;
var HamFusionend314_tree=null;
var stream_HamFusionbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionbegin");
var stream_HamFusionend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFusionend");
var stream_action1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule action1");
this.trace("ANTLR Parse: seqfusedaction1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:3026:5: ( HamFusionbegin ( action1 )+ HamFusionend -> ^( SEQFUSEDACT1 ( action1 )* ) )
// Ham4Parser.g:3027:9: HamFusionbegin ( action1 )+ HamFusionend
HamFusionbegin312=this.match(this.input,HamFusionbegin,Ham4Parser.FOLLOW_HamFusionbegin_in_seqfusedaction111521); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionbegin.add(HamFusionbegin312);
// Ham4Parser.g:3028:9: ( action1 )+
var cnt115=0;
loop115:
do {
var alt115=2;
alt115 = this.dfa115.predict(this.input);
switch (alt115) {
case 1 :
// Ham4Parser.g:3028:11: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_seqfusedaction111534);
action1313=this.action1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_action1.add(action1313.getTree());
break;
default :
if ( cnt115 >= 1 ) {
break loop115;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(115, this.input);
throw eee;
}
cnt115++;
} while (true);
HamFusionend314=this.match(this.input,HamFusionend,Ham4Parser.FOLLOW_HamFusionend_in_seqfusedaction111547); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFusionend.add(HamFusionend314);
// AST REWRITE
// elements: action1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3031:11: -> ^( SEQFUSEDACT1 ( action1 )* )
{
// Ham4Parser.g:3031:14: ^( SEQFUSEDACT1 ( action1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SEQFUSEDACT1, "SEQFUSEDACT1"), root_1);
// Ham4Parser.g:3031:29: ( action1 )*
while ( stream_action1.hasNext() ) {
this.adaptor.addChild(root_1, stream_action1.nextTree());
}
stream_action1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: seqfusedaction1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("seqfusedaction1", 88);
}
return retval;
},
// inline static return class
repetitionsoption_return: (function() {
Ham4Parser.repetitionsoption_return = function(){};
org.antlr.lang.extend(Ham4Parser.repetitionsoption_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3034:1: repetitionsoption : ( ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions )? ;
// $ANTLR start "repetitionsoption"
repetitionsoption: function() {
this.traceIn("repetitionsoption", 89);
var retval = new Ham4Parser.repetitionsoption_return();
retval.start = this.input.LT(1);
var root_0 = null;
var repetitions315 = null;
this.trace("ANTLR Parse: repetitionsoption starts "+this.state.backtracking);
try {
// Ham4Parser.g:3053:5: ( ( ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions )? )
// Ham4Parser.g:3054:9: ( ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions )?
root_0 = this.adaptor.nil();
// Ham4Parser.g:3054:9: ( ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions )?
var alt116=2;
alt116 = this.dfa116.predict(this.input);
switch (alt116) {
case 1 :
// Ham4Parser.g:3055:13: ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions
this.pushFollow(Ham4Parser.FOLLOW_repetitions_in_repetitionsoption11668);
repetitions315=this.repetitions();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, repetitions315.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: repetitionsoption finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("repetitionsoption", 89);
}
return retval;
},
// inline static return class
repetitions_return: (function() {
Ham4Parser.repetitions_return = function(){};
org.antlr.lang.extend(Ham4Parser.repetitions_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3061:1: repetitions : ( ( HamSeqbegin HamRepeatfromstartseveral HamEtc )=> HamSeqbegin HamRepeatfromstartseveral HamEtc ellipsedirection HamSeqend -> ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection ) | ( repetition ( HamEtc | repetition )? | movingrepetition ) ( sizechangenonlinear )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? -> ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* ) | HamAlternatingmotion ( HamAlternatingmotion )? -> ^( REPETITIONS ( HamAlternatingmotion )* ) ) ;
// $ANTLR start "repetitions"
repetitions: function() {
this.traceIn("repetitions", 90);
var retval = new Ham4Parser.repetitions_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin316 = null;
var HamRepeatfromstartseveral317 = null;
var HamEtc318 = null;
var HamSeqend320 = null;
var HamEtc322 = null;
var HamAlternatingmotion326 = null;
var HamAlternatingmotion327 = null;
var HamAlternatingmotion328 = null;
var HamAlternatingmotion329 = null;
var ellipsedirection319 = null;
var repetition321 = null;
var repetition323 = null;
var movingrepetition324 = null;
var sizechangenonlinear325 = null;
var HamSeqbegin316_tree=null;
var HamRepeatfromstartseveral317_tree=null;
var HamEtc318_tree=null;
var HamSeqend320_tree=null;
var HamEtc322_tree=null;
var HamAlternatingmotion326_tree=null;
var HamAlternatingmotion327_tree=null;
var HamAlternatingmotion328_tree=null;
var HamAlternatingmotion329_tree=null;
var stream_HamAlternatingmotion=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamAlternatingmotion");
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamEtc=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamEtc");
var stream_HamRepeatfromstartseveral=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamRepeatfromstartseveral");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_movingrepetition=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule movingrepetition");
var stream_ellipsedirection=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule ellipsedirection");
var stream_sizechangenonlinear=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule sizechangenonlinear");
var stream_repetition=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule repetition");
this.trace("ANTLR Parse: repetitions starts "+this.state.backtracking);
try {
// Ham4Parser.g:3106:5: ( ( ( HamSeqbegin HamRepeatfromstartseveral HamEtc )=> HamSeqbegin HamRepeatfromstartseveral HamEtc ellipsedirection HamSeqend -> ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection ) | ( repetition ( HamEtc | repetition )? | movingrepetition ) ( sizechangenonlinear )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? -> ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* ) | HamAlternatingmotion ( HamAlternatingmotion )? -> ^( REPETITIONS ( HamAlternatingmotion )* ) ) )
// Ham4Parser.g:3107:5: ( ( HamSeqbegin HamRepeatfromstartseveral HamEtc )=> HamSeqbegin HamRepeatfromstartseveral HamEtc ellipsedirection HamSeqend -> ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection ) | ( repetition ( HamEtc | repetition )? | movingrepetition ) ( sizechangenonlinear )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? -> ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* ) | HamAlternatingmotion ( HamAlternatingmotion )? -> ^( REPETITIONS ( HamAlternatingmotion )* ) )
// Ham4Parser.g:3107:5: ( ( HamSeqbegin HamRepeatfromstartseveral HamEtc )=> HamSeqbegin HamRepeatfromstartseveral HamEtc ellipsedirection HamSeqend -> ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection ) | ( repetition ( HamEtc | repetition )? | movingrepetition ) ( sizechangenonlinear )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? -> ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* ) | HamAlternatingmotion ( HamAlternatingmotion )? -> ^( REPETITIONS ( HamAlternatingmotion )* ) )
var alt123=3;
switch ( this.input.LA(1) ) {
case HamSeqbegin:
var LA123_1 = this.input.LA(2);
if ( (this.synpred36_Ham4Parser()) ) {
alt123=1;
}
else if ( (true) ) {
alt123=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 123, 1, this.input);
throw nvae;
}
break;
case HamRepeatfromstart:
case HamRepeatfromstartseveral:
case HamRepeatcontinue:
case HamRepeatcontinueseveral:
case HamRepeatreverse:
alt123=2;
break;
case HamAlternatingmotion:
alt123=3;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 123, 0, this.input);
throw nvae;
}
switch (alt123) {
case 1 :
// Ham4Parser.g:3108:9: ( HamSeqbegin HamRepeatfromstartseveral HamEtc )=> HamSeqbegin HamRepeatfromstartseveral HamEtc ellipsedirection HamSeqend
HamSeqbegin316=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_repetitions11748); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin316);
HamRepeatfromstartseveral317=this.match(this.input,HamRepeatfromstartseveral,Ham4Parser.FOLLOW_HamRepeatfromstartseveral_in_repetitions11759); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamRepeatfromstartseveral.add(HamRepeatfromstartseveral317);
HamEtc318=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_repetitions11769); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc318);
this.pushFollow(Ham4Parser.FOLLOW_ellipsedirection_in_repetitions11779);
ellipsedirection319=this.ellipsedirection();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_ellipsedirection.add(ellipsedirection319.getTree());
HamSeqend320=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_repetitions11789); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend320);
// AST REWRITE
// elements: HamEtc, ellipsedirection, HamRepeatfromstartseveral
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3115:11: -> ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection )
{
// Ham4Parser.g:3115:14: ^( REPETITIONS HamRepeatfromstartseveral HamEtc ellipsedirection )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPETITIONS, "REPETITIONS"), root_1);
this.adaptor.addChild(root_1, stream_HamRepeatfromstartseveral.nextNode());
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
this.adaptor.addChild(root_1, stream_ellipsedirection.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:3117:9: ( repetition ( HamEtc | repetition )? | movingrepetition ) ( sizechangenonlinear )? ( HamAlternatingmotion ( HamAlternatingmotion )? )?
// Ham4Parser.g:3117:9: ( repetition ( HamEtc | repetition )? | movingrepetition )
var alt118=2;
var LA118_0 = this.input.LA(1);
if ( ((LA118_0>=HamRepeatfromstart && LA118_0<=HamRepeatcontinueseveral)||LA118_0==HamRepeatreverse) ) {
alt118=1;
}
else if ( (LA118_0==HamSeqbegin) ) {
alt118=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 118, 0, this.input);
throw nvae;
}
switch (alt118) {
case 1 :
// Ham4Parser.g:3118:13: repetition ( HamEtc | repetition )?
this.pushFollow(Ham4Parser.FOLLOW_repetition_in_repetitions11842);
repetition321=this.repetition();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetition.add(repetition321.getTree());
// Ham4Parser.g:3119:13: ( HamEtc | repetition )?
var alt117=3;
var LA117_0 = this.input.LA(1);
if ( (LA117_0==HamEtc) ) {
alt117=1;
}
else if ( ((LA117_0>=HamRepeatfromstart && LA117_0<=HamRepeatcontinueseveral)||LA117_0==HamRepeatreverse) ) {
alt117=2;
}
switch (alt117) {
case 1 :
// Ham4Parser.g:3120:17: HamEtc
HamEtc322=this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_repetitions11874); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamEtc.add(HamEtc322);
break;
case 2 :
// Ham4Parser.g:3122:17: repetition
this.pushFollow(Ham4Parser.FOLLOW_repetition_in_repetitions11906);
repetition323=this.repetition();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetition.add(repetition323.getTree());
break;
}
break;
case 2 :
// Ham4Parser.g:3125:13: movingrepetition
this.pushFollow(Ham4Parser.FOLLOW_movingrepetition_in_repetitions11945);
movingrepetition324=this.movingrepetition();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movingrepetition.add(movingrepetition324.getTree());
break;
}
// Ham4Parser.g:3127:9: ( sizechangenonlinear )?
var alt119=2;
var LA119_0 = this.input.LA(1);
if ( ((LA119_0>=HamIncreasing && LA119_0<=HamDecreasing)) ) {
alt119=1;
}
switch (alt119) {
case 1 :
// Ham4Parser.g:3127:11: sizechangenonlinear
this.pushFollow(Ham4Parser.FOLLOW_sizechangenonlinear_in_repetitions11967);
sizechangenonlinear325=this.sizechangenonlinear();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_sizechangenonlinear.add(sizechangenonlinear325.getTree());
break;
}
// Ham4Parser.g:3128:9: ( HamAlternatingmotion ( HamAlternatingmotion )? )?
var alt121=2;
var LA121_0 = this.input.LA(1);
if ( (LA121_0==HamAlternatingmotion) ) {
alt121=1;
}
switch (alt121) {
case 1 :
// Ham4Parser.g:3129:13: HamAlternatingmotion ( HamAlternatingmotion )?
HamAlternatingmotion326=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_repetitions11994); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamAlternatingmotion.add(HamAlternatingmotion326);
// Ham4Parser.g:3130:13: ( HamAlternatingmotion )?
var alt120=2;
var LA120_0 = this.input.LA(1);
if ( (LA120_0==HamAlternatingmotion) ) {
alt120=1;
}
switch (alt120) {
case 1 :
// Ham4Parser.g:3130:15: HamAlternatingmotion
HamAlternatingmotion327=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_repetitions12010); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamAlternatingmotion.add(HamAlternatingmotion327);
break;
}
break;
}
// AST REWRITE
// elements: HamEtc, HamAlternatingmotion, movingrepetition, repetition, sizechangenonlinear
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3132:11: -> ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* )
{
// Ham4Parser.g:3132:14: ^( REPETITIONS ( repetition )* ( HamEtc )? ( movingrepetition )? ( sizechangenonlinear )? ( HamAlternatingmotion )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPETITIONS, "REPETITIONS"), root_1);
// Ham4Parser.g:3132:28: ( repetition )*
while ( stream_repetition.hasNext() ) {
this.adaptor.addChild(root_1, stream_repetition.nextTree());
}
stream_repetition.reset();
// Ham4Parser.g:3132:40: ( HamEtc )?
if ( stream_HamEtc.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamEtc.nextNode());
}
stream_HamEtc.reset();
// Ham4Parser.g:3132:48: ( movingrepetition )?
if ( stream_movingrepetition.hasNext() ) {
this.adaptor.addChild(root_1, stream_movingrepetition.nextTree());
}
stream_movingrepetition.reset();
// Ham4Parser.g:3132:66: ( sizechangenonlinear )?
if ( stream_sizechangenonlinear.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechangenonlinear.nextTree());
}
stream_sizechangenonlinear.reset();
// Ham4Parser.g:3132:87: ( HamAlternatingmotion )*
while ( stream_HamAlternatingmotion.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamAlternatingmotion.nextNode());
}
stream_HamAlternatingmotion.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:3134:9: HamAlternatingmotion ( HamAlternatingmotion )?
HamAlternatingmotion328=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_repetitions12071); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamAlternatingmotion.add(HamAlternatingmotion328);
// Ham4Parser.g:3135:9: ( HamAlternatingmotion )?
var alt122=2;
var LA122_0 = this.input.LA(1);
if ( (LA122_0==HamAlternatingmotion) ) {
alt122=1;
}
switch (alt122) {
case 1 :
// Ham4Parser.g:3135:11: HamAlternatingmotion
HamAlternatingmotion329=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_repetitions12083); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamAlternatingmotion.add(HamAlternatingmotion329);
break;
}
// AST REWRITE
// elements: HamAlternatingmotion
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3136:11: -> ^( REPETITIONS ( HamAlternatingmotion )* )
{
// Ham4Parser.g:3136:14: ^( REPETITIONS ( HamAlternatingmotion )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPETITIONS, "REPETITIONS"), root_1);
// Ham4Parser.g:3136:28: ( HamAlternatingmotion )*
while ( stream_HamAlternatingmotion.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamAlternatingmotion.nextNode());
}
stream_HamAlternatingmotion.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: repetitions finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("repetitions", 90);
}
return retval;
},
// inline static return class
alternations_return: (function() {
Ham4Parser.alternations_return = function(){};
org.antlr.lang.extend(Ham4Parser.alternations_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3140:1: alternations : HamAlternatingmotion ( HamAlternatingmotion )? ;
// $ANTLR start "alternations"
alternations: function() {
this.traceIn("alternations", 91);
var retval = new Ham4Parser.alternations_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamAlternatingmotion330 = null;
var HamAlternatingmotion331 = null;
var HamAlternatingmotion330_tree=null;
var HamAlternatingmotion331_tree=null;
this.trace("ANTLR Parse: alternations starts "+this.state.backtracking);
try {
// Ham4Parser.g:3155:5: ( HamAlternatingmotion ( HamAlternatingmotion )? )
// Ham4Parser.g:3155:9: HamAlternatingmotion ( HamAlternatingmotion )?
root_0 = this.adaptor.nil();
HamAlternatingmotion330=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_alternations12140); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamAlternatingmotion330_tree = this.adaptor.create(HamAlternatingmotion330);
this.adaptor.addChild(root_0, HamAlternatingmotion330_tree);
}
// Ham4Parser.g:3156:9: ( HamAlternatingmotion )?
var alt124=2;
var LA124_0 = this.input.LA(1);
if ( (LA124_0==HamAlternatingmotion) ) {
alt124=1;
}
switch (alt124) {
case 1 :
// Ham4Parser.g:3156:11: HamAlternatingmotion
HamAlternatingmotion331=this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_alternations12152); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamAlternatingmotion331_tree = this.adaptor.create(HamAlternatingmotion331);
this.adaptor.addChild(root_0, HamAlternatingmotion331_tree);
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: alternations finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("alternations", 91);
}
return retval;
},
// inline static return class
movingrepetition_return: (function() {
Ham4Parser.movingrepetition_return = function(){};
org.antlr.lang.extend(Ham4Parser.movingrepetition_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3159:1: movingrepetition : HamSeqbegin repetition movementarrow ( size )? ( sizechangenonlinear )? HamSeqend -> ^( MOVINGREPETITION repetition movementarrow ( size )* ( sizechangenonlinear )* ) ;
// $ANTLR start "movingrepetition"
movingrepetition: function() {
this.traceIn("movingrepetition", 92);
var retval = new Ham4Parser.movingrepetition_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin332 = null;
var HamSeqend337 = null;
var repetition333 = null;
var movementarrow334 = null;
var size335 = null;
var sizechangenonlinear336 = null;
var HamSeqbegin332_tree=null;
var HamSeqend337_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_movementarrow=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule movementarrow");
var stream_size=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule size");
var stream_sizechangenonlinear=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule sizechangenonlinear");
var stream_repetition=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule repetition");
this.trace("ANTLR Parse: movingrepetition starts "+this.state.backtracking);
try {
// Ham4Parser.g:3181:5: ( HamSeqbegin repetition movementarrow ( size )? ( sizechangenonlinear )? HamSeqend -> ^( MOVINGREPETITION repetition movementarrow ( size )* ( sizechangenonlinear )* ) )
// Ham4Parser.g:3182:9: HamSeqbegin repetition movementarrow ( size )? ( sizechangenonlinear )? HamSeqend
HamSeqbegin332=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_movingrepetition12190); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin332);
this.pushFollow(Ham4Parser.FOLLOW_repetition_in_movingrepetition12201);
repetition333=this.repetition();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_repetition.add(repetition333.getTree());
this.pushFollow(Ham4Parser.FOLLOW_movementarrow_in_movingrepetition12211);
movementarrow334=this.movementarrow();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementarrow.add(movementarrow334.getTree());
// Ham4Parser.g:3185:9: ( size )?
var alt125=2;
var LA125_0 = this.input.LA(1);
if ( ((LA125_0>=HamSmallmod && LA125_0<=HamLargemod)) ) {
alt125=1;
}
switch (alt125) {
case 1 :
// Ham4Parser.g:3185:11: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_movingrepetition12223);
size335=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_size.add(size335.getTree());
break;
}
// Ham4Parser.g:3186:9: ( sizechangenonlinear )?
var alt126=2;
var LA126_0 = this.input.LA(1);
if ( ((LA126_0>=HamIncreasing && LA126_0<=HamDecreasing)) ) {
alt126=1;
}
switch (alt126) {
case 1 :
// Ham4Parser.g:3186:11: sizechangenonlinear
this.pushFollow(Ham4Parser.FOLLOW_sizechangenonlinear_in_movingrepetition12238);
sizechangenonlinear336=this.sizechangenonlinear();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_sizechangenonlinear.add(sizechangenonlinear336.getTree());
break;
}
HamSeqend337=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_movingrepetition12251); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend337);
// AST REWRITE
// elements: movementarrow, repetition, size, sizechangenonlinear
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3189:7: -> ^( MOVINGREPETITION repetition movementarrow ( size )* ( sizechangenonlinear )* )
{
// Ham4Parser.g:3189:10: ^( MOVINGREPETITION repetition movementarrow ( size )* ( sizechangenonlinear )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(MOVINGREPETITION, "MOVINGREPETITION"), root_1);
this.adaptor.addChild(root_1, stream_repetition.nextTree());
this.adaptor.addChild(root_1, stream_movementarrow.nextTree());
// Ham4Parser.g:3189:54: ( size )*
while ( stream_size.hasNext() ) {
this.adaptor.addChild(root_1, stream_size.nextTree());
}
stream_size.reset();
// Ham4Parser.g:3189:60: ( sizechangenonlinear )*
while ( stream_sizechangenonlinear.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechangenonlinear.nextTree());
}
stream_sizechangenonlinear.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: movingrepetition finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("movingrepetition", 92);
}
return retval;
},
// inline static return class
simplemovement_return: (function() {
Ham4Parser.simplemovement_return = function(){};
org.antlr.lang.extend(Ham4Parser.simplemovement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3195:1: simplemovement : ( straightmovement ( size )? ( arckind | zigzag )? | circularmovement ( size )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? | movementcross ( size )? | wristmovement ( size )? | replacement | HamFingerplay ) ( ( HamSeqbegin HamBrushing )=> brushingcontact )? ( ( locationindexdefine )=> locationindexdefine )? -> ^( SIMPLEMVMT ( straightmovement )? ( circularmovement )? ( movementcross )? ( wristmovement )? ( size )? ( arckind )? ( zigzag )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? ( replacement )? ( HamFingerplay )? ( brushingcontact )? ( locationindexdefine )? ) ;
// $ANTLR start "simplemovement"
simplemovement: function() {
this.traceIn("simplemovement", 93);
var retval = new Ham4Parser.simplemovement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamFingerplay352 = null;
var straightmovement338 = null;
var size339 = null;
var arckind340 = null;
var zigzag341 = null;
var circularmovement342 = null;
var size343 = null;
var revolutions344 = null;
var ellipse345 = null;
var sizechangenonlinear346 = null;
var movementcross347 = null;
var size348 = null;
var wristmovement349 = null;
var size350 = null;
var replacement351 = null;
var brushingcontact353 = null;
var locationindexdefine354 = null;
var HamFingerplay352_tree=null;
var stream_HamFingerplay=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFingerplay");
var stream_locationindexdefine=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locationindexdefine");
var stream_movementcross=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule movementcross");
var stream_brushingcontact=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule brushingcontact");
var stream_sizechangenonlinear=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule sizechangenonlinear");
var stream_arckind=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule arckind");
var stream_straightmovement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule straightmovement");
var stream_zigzag=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule zigzag");
var stream_circularmovement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule circularmovement");
var stream_revolutions=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule revolutions");
var stream_size=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule size");
var stream_ellipse=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule ellipse");
var stream_wristmovement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule wristmovement");
var stream_replacement=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule replacement");
this.trace("ANTLR Parse: simplemovement starts "+this.state.backtracking);
try {
// Ham4Parser.g:3250:5: ( ( straightmovement ( size )? ( arckind | zigzag )? | circularmovement ( size )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? | movementcross ( size )? | wristmovement ( size )? | replacement | HamFingerplay ) ( ( HamSeqbegin HamBrushing )=> brushingcontact )? ( ( locationindexdefine )=> locationindexdefine )? -> ^( SIMPLEMVMT ( straightmovement )? ( circularmovement )? ( movementcross )? ( wristmovement )? ( size )? ( arckind )? ( zigzag )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? ( replacement )? ( HamFingerplay )? ( brushingcontact )? ( locationindexdefine )? ) )
// Ham4Parser.g:3251:9: ( straightmovement ( size )? ( arckind | zigzag )? | circularmovement ( size )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? | movementcross ( size )? | wristmovement ( size )? | replacement | HamFingerplay ) ( ( HamSeqbegin HamBrushing )=> brushingcontact )? ( ( locationindexdefine )=> locationindexdefine )?
// Ham4Parser.g:3251:9: ( straightmovement ( size )? ( arckind | zigzag )? | circularmovement ( size )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? | movementcross ( size )? | wristmovement ( size )? | replacement | HamFingerplay )
var alt135=6;
switch ( this.input.LA(1) ) {
case HamMoveu:
case HamMoveur:
case HamMover:
case HamMovedr:
case HamMoved:
case HamMovedl:
case HamMovel:
case HamMoveul:
case HamMoveol:
case HamMoveo:
case HamMoveor:
case HamMoveil:
case HamMovei:
case HamMoveir:
case HamMoveui:
case HamMovedi:
case HamMovedo:
case HamMoveuo:
alt135=1;
break;
case HamCircleo:
case HamCirclei:
case HamCircled:
case HamCircleu:
case HamCirclel:
case HamCircler:
case HamCircleul:
case HamCircledr:
case HamCircleur:
case HamCircledl:
case HamCircleol:
case HamCircleir:
case HamCircleor:
case HamCircleil:
case HamCircledo:
case HamCircleui:
case HamCircledi:
case HamCircleuo:
alt135=2;
break;
case HamMovecross:
case HamMovex:
alt135=3;
break;
case HamNodding:
case HamSwinging:
case HamTwisting:
case HamStircw:
case HamStirccw:
alt135=4;
break;
case HamReplace:
alt135=5;
break;
case HamFingerplay:
alt135=6;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 135, 0, this.input);
throw nvae;
}
switch (alt135) {
case 1 :
// Ham4Parser.g:3252:13: straightmovement ( size )? ( arckind | zigzag )?
this.pushFollow(Ham4Parser.FOLLOW_straightmovement_in_simplemovement12335);
straightmovement338=this.straightmovement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_straightmovement.add(straightmovement338.getTree());
// Ham4Parser.g:3253:13: ( size )?
var alt127=2;
alt127 = this.dfa127.predict(this.input);
switch (alt127) {
case 1 :
// Ham4Parser.g:3253:15: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_simplemovement12351);
size339=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_size.add(size339.getTree());
break;
}
// Ham4Parser.g:3254:13: ( arckind | zigzag )?
var alt128=3;
alt128 = this.dfa128.predict(this.input);
switch (alt128) {
case 1 :
// Ham4Parser.g:3255:17: arckind
this.pushFollow(Ham4Parser.FOLLOW_arckind_in_simplemovement12386);
arckind340=this.arckind();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_arckind.add(arckind340.getTree());
break;
case 2 :
// Ham4Parser.g:3257:17: zigzag
this.pushFollow(Ham4Parser.FOLLOW_zigzag_in_simplemovement12418);
zigzag341=this.zigzag();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_zigzag.add(zigzag341.getTree());
break;
}
break;
case 2 :
// Ham4Parser.g:3260:13: circularmovement ( size )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )?
this.pushFollow(Ham4Parser.FOLLOW_circularmovement_in_simplemovement12457);
circularmovement342=this.circularmovement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_circularmovement.add(circularmovement342.getTree());
// Ham4Parser.g:3261:13: ( size )?
var alt129=2;
alt129 = this.dfa129.predict(this.input);
switch (alt129) {
case 1 :
// Ham4Parser.g:3261:15: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_simplemovement12473);
size343=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_size.add(size343.getTree());
break;
}
// Ham4Parser.g:3262:13: ( revolutions )?
var alt130=2;
alt130 = this.dfa130.predict(this.input);
switch (alt130) {
case 1 :
// Ham4Parser.g:3262:15: revolutions
this.pushFollow(Ham4Parser.FOLLOW_revolutions_in_simplemovement12492);
revolutions344=this.revolutions();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_revolutions.add(revolutions344.getTree());
break;
}
// Ham4Parser.g:3263:13: ( ellipse )?
var alt131=2;
alt131 = this.dfa131.predict(this.input);
switch (alt131) {
case 1 :
// Ham4Parser.g:3263:15: ellipse
this.pushFollow(Ham4Parser.FOLLOW_ellipse_in_simplemovement12511);
ellipse345=this.ellipse();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_ellipse.add(ellipse345.getTree());
break;
}
// Ham4Parser.g:3264:13: ( sizechangenonlinear )?
var alt132=2;
alt132 = this.dfa132.predict(this.input);
switch (alt132) {
case 1 :
// Ham4Parser.g:3264:15: sizechangenonlinear
this.pushFollow(Ham4Parser.FOLLOW_sizechangenonlinear_in_simplemovement12530);
sizechangenonlinear346=this.sizechangenonlinear();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_sizechangenonlinear.add(sizechangenonlinear346.getTree());
break;
}
break;
case 3 :
// Ham4Parser.g:3266:13: movementcross ( size )?
this.pushFollow(Ham4Parser.FOLLOW_movementcross_in_simplemovement12557);
movementcross347=this.movementcross();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementcross.add(movementcross347.getTree());
// Ham4Parser.g:3267:13: ( size )?
var alt133=2;
alt133 = this.dfa133.predict(this.input);
switch (alt133) {
case 1 :
// Ham4Parser.g:3267:15: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_simplemovement12573);
size348=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_size.add(size348.getTree());
break;
}
break;
case 4 :
// Ham4Parser.g:3269:13: wristmovement ( size )?
this.pushFollow(Ham4Parser.FOLLOW_wristmovement_in_simplemovement12600);
wristmovement349=this.wristmovement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_wristmovement.add(wristmovement349.getTree());
// Ham4Parser.g:3270:13: ( size )?
var alt134=2;
alt134 = this.dfa134.predict(this.input);
switch (alt134) {
case 1 :
// Ham4Parser.g:3270:15: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_simplemovement12616);
size350=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_size.add(size350.getTree());
break;
}
break;
case 5 :
// Ham4Parser.g:3272:13: replacement
this.pushFollow(Ham4Parser.FOLLOW_replacement_in_simplemovement12643);
replacement351=this.replacement();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_replacement.add(replacement351.getTree());
break;
case 6 :
// Ham4Parser.g:3274:13: HamFingerplay
HamFingerplay352=this.match(this.input,HamFingerplay,Ham4Parser.FOLLOW_HamFingerplay_in_simplemovement12667); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFingerplay.add(HamFingerplay352);
break;
}
// Ham4Parser.g:3276:9: ( ( HamSeqbegin HamBrushing )=> brushingcontact )?
var alt136=2;
alt136 = this.dfa136.predict(this.input);
switch (alt136) {
case 1 :
// Ham4Parser.g:3277:11: ( HamSeqbegin HamBrushing )=> brushingcontact
this.pushFollow(Ham4Parser.FOLLOW_brushingcontact_in_simplemovement12729);
brushingcontact353=this.brushingcontact();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_brushingcontact.add(brushingcontact353.getTree());
break;
}
// Ham4Parser.g:3281:9: ( ( locationindexdefine )=> locationindexdefine )?
var alt137=2;
alt137 = this.dfa137.predict(this.input);
switch (alt137) {
case 1 :
// Ham4Parser.g:3282:11: ( locationindexdefine )=> locationindexdefine
this.pushFollow(Ham4Parser.FOLLOW_locationindexdefine_in_simplemovement12824);
locationindexdefine354=this.locationindexdefine();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locationindexdefine.add(locationindexdefine354.getTree());
break;
}
// AST REWRITE
// elements: revolutions, movementcross, circularmovement, HamFingerplay, ellipse, brushingcontact, size, locationindexdefine, straightmovement, replacement, zigzag, arckind, wristmovement, sizechangenonlinear
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3287:7: -> ^( SIMPLEMVMT ( straightmovement )? ( circularmovement )? ( movementcross )? ( wristmovement )? ( size )? ( arckind )? ( zigzag )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? ( replacement )? ( HamFingerplay )? ( brushingcontact )? ( locationindexdefine )? )
{
// Ham4Parser.g:3287:10: ^( SIMPLEMVMT ( straightmovement )? ( circularmovement )? ( movementcross )? ( wristmovement )? ( size )? ( arckind )? ( zigzag )? ( revolutions )? ( ellipse )? ( sizechangenonlinear )? ( replacement )? ( HamFingerplay )? ( brushingcontact )? ( locationindexdefine )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIMPLEMVMT, "SIMPLEMVMT"), root_1);
// Ham4Parser.g:3287:23: ( straightmovement )?
if ( stream_straightmovement.hasNext() ) {
this.adaptor.addChild(root_1, stream_straightmovement.nextTree());
}
stream_straightmovement.reset();
// Ham4Parser.g:3287:41: ( circularmovement )?
if ( stream_circularmovement.hasNext() ) {
this.adaptor.addChild(root_1, stream_circularmovement.nextTree());
}
stream_circularmovement.reset();
// Ham4Parser.g:3287:59: ( movementcross )?
if ( stream_movementcross.hasNext() ) {
this.adaptor.addChild(root_1, stream_movementcross.nextTree());
}
stream_movementcross.reset();
// Ham4Parser.g:3287:74: ( wristmovement )?
if ( stream_wristmovement.hasNext() ) {
this.adaptor.addChild(root_1, stream_wristmovement.nextTree());
}
stream_wristmovement.reset();
// Ham4Parser.g:3287:89: ( size )?
if ( stream_size.hasNext() ) {
this.adaptor.addChild(root_1, stream_size.nextTree());
}
stream_size.reset();
// Ham4Parser.g:3288:15: ( arckind )?
if ( stream_arckind.hasNext() ) {
this.adaptor.addChild(root_1, stream_arckind.nextTree());
}
stream_arckind.reset();
// Ham4Parser.g:3288:24: ( zigzag )?
if ( stream_zigzag.hasNext() ) {
this.adaptor.addChild(root_1, stream_zigzag.nextTree());
}
stream_zigzag.reset();
// Ham4Parser.g:3289:15: ( revolutions )?
if ( stream_revolutions.hasNext() ) {
this.adaptor.addChild(root_1, stream_revolutions.nextTree());
}
stream_revolutions.reset();
// Ham4Parser.g:3289:28: ( ellipse )?
if ( stream_ellipse.hasNext() ) {
this.adaptor.addChild(root_1, stream_ellipse.nextTree());
}
stream_ellipse.reset();
// Ham4Parser.g:3289:37: ( sizechangenonlinear )?
if ( stream_sizechangenonlinear.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechangenonlinear.nextTree());
}
stream_sizechangenonlinear.reset();
// Ham4Parser.g:3290:15: ( replacement )?
if ( stream_replacement.hasNext() ) {
this.adaptor.addChild(root_1, stream_replacement.nextTree());
}
stream_replacement.reset();
// Ham4Parser.g:3290:28: ( HamFingerplay )?
if ( stream_HamFingerplay.hasNext() ) {
this.adaptor.addChild(root_1, stream_HamFingerplay.nextNode());
}
stream_HamFingerplay.reset();
// Ham4Parser.g:3291:15: ( brushingcontact )?
if ( stream_brushingcontact.hasNext() ) {
this.adaptor.addChild(root_1, stream_brushingcontact.nextTree());
}
stream_brushingcontact.reset();
// Ham4Parser.g:3291:32: ( locationindexdefine )?
if ( stream_locationindexdefine.hasNext() ) {
this.adaptor.addChild(root_1, stream_locationindexdefine.nextTree());
}
stream_locationindexdefine.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: simplemovement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("simplemovement", 93);
}
return retval;
},
// inline static return class
specialfingerplaymovement_return: (function() {
Ham4Parser.specialfingerplaymovement_return = function(){};
org.antlr.lang.extend(Ham4Parser.specialfingerplaymovement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3294:1: specialfingerplaymovement : HamSeqbegin ( digit )+ HamFingerplay HamSeqend -> ^( SIMPLEMVMT ( digit )* HamFingerplay ) ;
// $ANTLR start "specialfingerplaymovement"
specialfingerplaymovement: function() {
this.traceIn("specialfingerplaymovement", 94);
var retval = new Ham4Parser.specialfingerplaymovement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin355 = null;
var HamFingerplay357 = null;
var HamSeqend358 = null;
var digit356 = null;
var HamSeqbegin355_tree=null;
var HamFingerplay357_tree=null;
var HamSeqend358_tree=null;
var stream_HamSeqbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqbegin");
var stream_HamFingerplay=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamFingerplay");
var stream_HamSeqend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamSeqend");
var stream_digit=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule digit");
this.trace("ANTLR Parse: specialfingerplaymovement starts "+this.state.backtracking);
try {
// Ham4Parser.g:3313:5: ( HamSeqbegin ( digit )+ HamFingerplay HamSeqend -> ^( SIMPLEMVMT ( digit )* HamFingerplay ) )
// Ham4Parser.g:3314:9: HamSeqbegin ( digit )+ HamFingerplay HamSeqend
HamSeqbegin355=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_specialfingerplaymovement13023); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqbegin.add(HamSeqbegin355);
// Ham4Parser.g:3315:9: ( digit )+
var cnt138=0;
loop138:
do {
var alt138=2;
var LA138_0 = this.input.LA(1);
if ( ((LA138_0>=HamThumb && LA138_0<=HamPinky)) ) {
alt138=1;
}
switch (alt138) {
case 1 :
// Ham4Parser.g:3315:11: digit
this.pushFollow(Ham4Parser.FOLLOW_digit_in_specialfingerplaymovement13036);
digit356=this.digit();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_digit.add(digit356.getTree());
break;
default :
if ( cnt138 >= 1 ) {
break loop138;
}
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var eee = new org.antlr.runtime.EarlyExitException(138, this.input);
throw eee;
}
cnt138++;
} while (true);
HamFingerplay357=this.match(this.input,HamFingerplay,Ham4Parser.FOLLOW_HamFingerplay_in_specialfingerplaymovement13049); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamFingerplay.add(HamFingerplay357);
HamSeqend358=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_specialfingerplaymovement13059); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamSeqend.add(HamSeqend358);
// AST REWRITE
// elements: digit, HamFingerplay
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3318:11: -> ^( SIMPLEMVMT ( digit )* HamFingerplay )
{
// Ham4Parser.g:3318:14: ^( SIMPLEMVMT ( digit )* HamFingerplay )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SIMPLEMVMT, "SIMPLEMVMT"), root_1);
// Ham4Parser.g:3318:27: ( digit )*
while ( stream_digit.hasNext() ) {
this.adaptor.addChild(root_1, stream_digit.nextTree());
}
stream_digit.reset();
this.adaptor.addChild(root_1, stream_HamFingerplay.nextNode());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: specialfingerplaymovement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("specialfingerplaymovement", 94);
}
return retval;
},
// inline static return class
straightmovement_return: (function() {
Ham4Parser.straightmovement_return = function(){};
org.antlr.lang.extend(Ham4Parser.straightmovement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3321:1: straightmovement : movementarrow ( HamBetween movementarrow )? -> ^( STRGHTMVMT ( movementarrow )* ) ;
// $ANTLR start "straightmovement"
straightmovement: function() {
this.traceIn("straightmovement", 95);
var retval = new Ham4Parser.straightmovement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween360 = null;
var movementarrow359 = null;
var movementarrow361 = null;
var HamBetween360_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_movementarrow=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule movementarrow");
this.trace("ANTLR Parse: straightmovement starts "+this.state.backtracking);
try {
// Ham4Parser.g:3340:5: ( movementarrow ( HamBetween movementarrow )? -> ^( STRGHTMVMT ( movementarrow )* ) )
// Ham4Parser.g:3340:9: movementarrow ( HamBetween movementarrow )?
this.pushFollow(Ham4Parser.FOLLOW_movementarrow_in_straightmovement13110);
movementarrow359=this.movementarrow();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementarrow.add(movementarrow359.getTree());
// Ham4Parser.g:3341:9: ( HamBetween movementarrow )?
var alt139=2;
var LA139_0 = this.input.LA(1);
if ( (LA139_0==HamBetween) ) {
alt139=1;
}
switch (alt139) {
case 1 :
// Ham4Parser.g:3342:13: HamBetween movementarrow
HamBetween360=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_straightmovement13134); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween360);
this.pushFollow(Ham4Parser.FOLLOW_movementarrow_in_straightmovement13149);
movementarrow361=this.movementarrow();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementarrow.add(movementarrow361.getTree());
break;
}
// AST REWRITE
// elements: movementarrow
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3345:11: -> ^( STRGHTMVMT ( movementarrow )* )
{
// Ham4Parser.g:3345:14: ^( STRGHTMVMT ( movementarrow )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(STRGHTMVMT, "STRGHTMVMT"), root_1);
// Ham4Parser.g:3345:27: ( movementarrow )*
while ( stream_movementarrow.hasNext() ) {
this.adaptor.addChild(root_1, stream_movementarrow.nextTree());
}
stream_movementarrow.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: straightmovement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("straightmovement", 95);
}
return retval;
},
// inline static return class
circularmovement_return: (function() {
Ham4Parser.circularmovement_return = function(){};
org.antlr.lang.extend(Ham4Parser.circularmovement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3348:1: circularmovement : movementcircle ( HamBetween movementcircle )? -> ^( CRCLRMVMT ( movementcircle )* ) ;
// $ANTLR start "circularmovement"
circularmovement: function() {
this.traceIn("circularmovement", 96);
var retval = new Ham4Parser.circularmovement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamBetween363 = null;
var movementcircle362 = null;
var movementcircle364 = null;
var HamBetween363_tree=null;
var stream_HamBetween=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamBetween");
var stream_movementcircle=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule movementcircle");
this.trace("ANTLR Parse: circularmovement starts "+this.state.backtracking);
try {
// Ham4Parser.g:3367:5: ( movementcircle ( HamBetween movementcircle )? -> ^( CRCLRMVMT ( movementcircle )* ) )
// Ham4Parser.g:3367:9: movementcircle ( HamBetween movementcircle )?
this.pushFollow(Ham4Parser.FOLLOW_movementcircle_in_circularmovement13208);
movementcircle362=this.movementcircle();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementcircle.add(movementcircle362.getTree());
// Ham4Parser.g:3368:9: ( HamBetween movementcircle )?
var alt140=2;
var LA140_0 = this.input.LA(1);
if ( (LA140_0==HamBetween) ) {
alt140=1;
}
switch (alt140) {
case 1 :
// Ham4Parser.g:3369:13: HamBetween movementcircle
HamBetween363=this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_circularmovement13232); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamBetween.add(HamBetween363);
this.pushFollow(Ham4Parser.FOLLOW_movementcircle_in_circularmovement13247);
movementcircle364=this.movementcircle();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_movementcircle.add(movementcircle364.getTree());
break;
}
// AST REWRITE
// elements: movementcircle
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3372:11: -> ^( CRCLRMVMT ( movementcircle )* )
{
// Ham4Parser.g:3372:14: ^( CRCLRMVMT ( movementcircle )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(CRCLRMVMT, "CRCLRMVMT"), root_1);
// Ham4Parser.g:3372:26: ( movementcircle )*
while ( stream_movementcircle.hasNext() ) {
this.adaptor.addChild(root_1, stream_movementcircle.nextTree());
}
stream_movementcircle.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: circularmovement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("circularmovement", 96);
}
return retval;
},
// inline static return class
arckind_return: (function() {
Ham4Parser.arckind_return = function(){};
org.antlr.lang.extend(Ham4Parser.arckind_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3375:1: arckind : arc ( arc )? ( size )? ;
// $ANTLR start "arckind"
arckind: function() {
this.traceIn("arckind", 97);
var retval = new Ham4Parser.arckind_return();
retval.start = this.input.LT(1);
var root_0 = null;
var arc365 = null;
var arc366 = null;
var size367 = null;
this.trace("ANTLR Parse: arckind starts "+this.state.backtracking);
try {
// Ham4Parser.g:3391:5: ( arc ( arc )? ( size )? )
// Ham4Parser.g:3391:9: arc ( arc )? ( size )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_arc_in_arckind13306);
arc365=this.arc();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arc365.getTree());
// Ham4Parser.g:3392:9: ( arc )?
var alt141=2;
var LA141_0 = this.input.LA(1);
if ( ((LA141_0>=HamArcl && LA141_0<=HamArcd)) ) {
alt141=1;
}
switch (alt141) {
case 1 :
// Ham4Parser.g:3392:11: arc
this.pushFollow(Ham4Parser.FOLLOW_arc_in_arckind13318);
arc366=this.arc();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arc366.getTree());
break;
}
// Ham4Parser.g:3393:9: ( size )?
var alt142=2;
var LA142_0 = this.input.LA(1);
if ( ((LA142_0>=HamSmallmod && LA142_0<=HamLargemod)) ) {
alt142=1;
}
switch (alt142) {
case 1 :
// Ham4Parser.g:3393:11: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_arckind13333);
size367=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, size367.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: arckind finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("arckind", 97);
}
return retval;
},
// inline static return class
zigzag_return: (function() {
Ham4Parser.zigzag_return = function(){};
org.antlr.lang.extend(Ham4Parser.zigzag_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3396:1: zigzag : ( HamZigzag | HamWavy ) ( size )? ( ellipsedirection )? ( sizechangenonlinear )? ;
// $ANTLR start "zigzag"
zigzag: function() {
this.traceIn("zigzag", 98);
var retval = new Ham4Parser.zigzag_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set368 = null;
var size369 = null;
var ellipsedirection370 = null;
var sizechangenonlinear371 = null;
var set368_tree=null;
this.trace("ANTLR Parse: zigzag starts "+this.state.backtracking);
try {
// Ham4Parser.g:3417:5: ( ( HamZigzag | HamWavy ) ( size )? ( ellipsedirection )? ( sizechangenonlinear )? )
// Ham4Parser.g:3417:9: ( HamZigzag | HamWavy ) ( size )? ( ellipsedirection )? ( sizechangenonlinear )?
root_0 = this.adaptor.nil();
set368=this.input.LT(1);
if ( (this.input.LA(1)>=HamWavy && this.input.LA(1)<=HamZigzag) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set368));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
// Ham4Parser.g:3422:9: ( size )?
var alt143=2;
var LA143_0 = this.input.LA(1);
if ( ((LA143_0>=HamSmallmod && LA143_0<=HamLargemod)) ) {
alt143=1;
}
switch (alt143) {
case 1 :
// Ham4Parser.g:3422:11: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_zigzag13425);
size369=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, size369.getTree());
break;
}
// Ham4Parser.g:3423:9: ( ellipsedirection )?
var alt144=2;
var LA144_0 = this.input.LA(1);
if ( ((LA144_0>=HamEllipseh && LA144_0<=HamEllipseul)) ) {
alt144=1;
}
switch (alt144) {
case 1 :
// Ham4Parser.g:3423:11: ellipsedirection
this.pushFollow(Ham4Parser.FOLLOW_ellipsedirection_in_zigzag13440);
ellipsedirection370=this.ellipsedirection();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, ellipsedirection370.getTree());
break;
}
// Ham4Parser.g:3424:9: ( sizechangenonlinear )?
var alt145=2;
var LA145_0 = this.input.LA(1);
if ( ((LA145_0>=HamIncreasing && LA145_0<=HamDecreasing)) ) {
alt145=1;
}
switch (alt145) {
case 1 :
// Ham4Parser.g:3424:11: sizechangenonlinear
this.pushFollow(Ham4Parser.FOLLOW_sizechangenonlinear_in_zigzag13455);
sizechangenonlinear371=this.sizechangenonlinear();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, sizechangenonlinear371.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: zigzag finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("zigzag", 98);
}
return retval;
},
// inline static return class
sizechangenonlinear_return: (function() {
Ham4Parser.sizechangenonlinear_return = function(){};
org.antlr.lang.extend(Ham4Parser.sizechangenonlinear_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3427:1: sizechangenonlinear : sizechange ( size )? ;
// $ANTLR start "sizechangenonlinear"
sizechangenonlinear: function() {
this.traceIn("sizechangenonlinear", 99);
var retval = new Ham4Parser.sizechangenonlinear_return();
retval.start = this.input.LT(1);
var root_0 = null;
var sizechange372 = null;
var size373 = null;
this.trace("ANTLR Parse: sizechangenonlinear starts "+this.state.backtracking);
try {
// Ham4Parser.g:3442:5: ( sizechange ( size )? )
// Ham4Parser.g:3442:9: sizechange ( size )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_sizechange_in_sizechangenonlinear13487);
sizechange372=this.sizechange();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, sizechange372.getTree());
// Ham4Parser.g:3443:9: ( size )?
var alt146=2;
var LA146_0 = this.input.LA(1);
if ( ((LA146_0>=HamSmallmod && LA146_0<=HamLargemod)) ) {
alt146=1;
}
switch (alt146) {
case 1 :
// Ham4Parser.g:3443:11: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_sizechangenonlinear13499);
size373=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, size373.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: sizechangenonlinear finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("sizechangenonlinear", 99);
}
return retval;
},
// inline static return class
ellipse_return: (function() {
Ham4Parser.ellipse_return = function(){};
org.antlr.lang.extend(Ham4Parser.ellipse_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3446:1: ellipse : ellipsedirection ( size )? ;
// $ANTLR start "ellipse"
ellipse: function() {
this.traceIn("ellipse", 100);
var retval = new Ham4Parser.ellipse_return();
retval.start = this.input.LT(1);
var root_0 = null;
var ellipsedirection374 = null;
var size375 = null;
this.trace("ANTLR Parse: ellipse starts "+this.state.backtracking);
try {
// Ham4Parser.g:3461:5: ( ellipsedirection ( size )? )
// Ham4Parser.g:3461:9: ellipsedirection ( size )?
root_0 = this.adaptor.nil();
this.pushFollow(Ham4Parser.FOLLOW_ellipsedirection_in_ellipse13531);
ellipsedirection374=this.ellipsedirection();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, ellipsedirection374.getTree());
// Ham4Parser.g:3462:9: ( size )?
var alt147=2;
var LA147_0 = this.input.LA(1);
if ( ((LA147_0>=HamSmallmod && LA147_0<=HamLargemod)) ) {
alt147=1;
}
switch (alt147) {
case 1 :
// Ham4Parser.g:3462:11: size
this.pushFollow(Ham4Parser.FOLLOW_size_in_ellipse13543);
size375=this.size();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, size375.getTree());
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: ellipse finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("ellipse", 100);
}
return retval;
},
// inline static return class
revolutions_return: (function() {
Ham4Parser.revolutions_return = function(){};
org.antlr.lang.extend(Ham4Parser.revolutions_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3465:1: revolutions : ( clock ( HamClockfull ( HamClockfull )? )? ( clock )? | HamClockfull ( HamClockfull )? ( clock )? ) ;
// $ANTLR start "revolutions"
revolutions: function() {
this.traceIn("revolutions", 101);
var retval = new Ham4Parser.revolutions_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamClockfull377 = null;
var HamClockfull378 = null;
var HamClockfull380 = null;
var HamClockfull381 = null;
var clock376 = null;
var clock379 = null;
var clock382 = null;
var HamClockfull377_tree=null;
var HamClockfull378_tree=null;
var HamClockfull380_tree=null;
var HamClockfull381_tree=null;
this.trace("ANTLR Parse: revolutions starts "+this.state.backtracking);
try {
// Ham4Parser.g:3491:5: ( ( clock ( HamClockfull ( HamClockfull )? )? ( clock )? | HamClockfull ( HamClockfull )? ( clock )? ) )
// Ham4Parser.g:3492:5: ( clock ( HamClockfull ( HamClockfull )? )? ( clock )? | HamClockfull ( HamClockfull )? ( clock )? )
root_0 = this.adaptor.nil();
// Ham4Parser.g:3492:5: ( clock ( HamClockfull ( HamClockfull )? )? ( clock )? | HamClockfull ( HamClockfull )? ( clock )? )
var alt153=2;
var LA153_0 = this.input.LA(1);
if ( ((LA153_0>=HamClocku && LA153_0<=HamClockur)) ) {
alt153=1;
}
else if ( (LA153_0==HamClockfull) ) {
alt153=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 153, 0, this.input);
throw nvae;
}
switch (alt153) {
case 1 :
// Ham4Parser.g:3493:9: clock ( HamClockfull ( HamClockfull )? )? ( clock )?
this.pushFollow(Ham4Parser.FOLLOW_clock_in_revolutions13587);
clock376=this.clock();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, clock376.getTree());
// Ham4Parser.g:3494:9: ( HamClockfull ( HamClockfull )? )?
var alt149=2;
var LA149_0 = this.input.LA(1);
if ( (LA149_0==HamClockfull) ) {
alt149=1;
}
switch (alt149) {
case 1 :
// Ham4Parser.g:3495:13: HamClockfull ( HamClockfull )?
HamClockfull377=this.match(this.input,HamClockfull,Ham4Parser.FOLLOW_HamClockfull_in_revolutions13611); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamClockfull377_tree = this.adaptor.create(HamClockfull377);
this.adaptor.addChild(root_0, HamClockfull377_tree);
}
// Ham4Parser.g:3496:13: ( HamClockfull )?
var alt148=2;
var LA148_0 = this.input.LA(1);
if ( (LA148_0==HamClockfull) ) {
alt148=1;
}
switch (alt148) {
case 1 :
// Ham4Parser.g:3496:15: HamClockfull
HamClockfull378=this.match(this.input,HamClockfull,Ham4Parser.FOLLOW_HamClockfull_in_revolutions13627); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamClockfull378_tree = this.adaptor.create(HamClockfull378);
this.adaptor.addChild(root_0, HamClockfull378_tree);
}
break;
}
break;
}
// Ham4Parser.g:3498:9: ( clock )?
var alt150=2;
var LA150_0 = this.input.LA(1);
if ( ((LA150_0>=HamClocku && LA150_0<=HamClockur)) ) {
alt150=1;
}
switch (alt150) {
case 1 :
// Ham4Parser.g:3498:11: clock
this.pushFollow(Ham4Parser.FOLLOW_clock_in_revolutions13653);
clock379=this.clock();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, clock379.getTree());
break;
}
break;
case 2 :
// Ham4Parser.g:3500:9: HamClockfull ( HamClockfull )? ( clock )?
HamClockfull380=this.match(this.input,HamClockfull,Ham4Parser.FOLLOW_HamClockfull_in_revolutions13672); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamClockfull380_tree = this.adaptor.create(HamClockfull380);
this.adaptor.addChild(root_0, HamClockfull380_tree);
}
// Ham4Parser.g:3501:9: ( HamClockfull )?
var alt151=2;
var LA151_0 = this.input.LA(1);
if ( (LA151_0==HamClockfull) ) {
alt151=1;
}
switch (alt151) {
case 1 :
// Ham4Parser.g:3501:11: HamClockfull
HamClockfull381=this.match(this.input,HamClockfull,Ham4Parser.FOLLOW_HamClockfull_in_revolutions13684); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamClockfull381_tree = this.adaptor.create(HamClockfull381);
this.adaptor.addChild(root_0, HamClockfull381_tree);
}
break;
}
// Ham4Parser.g:3502:9: ( clock )?
var alt152=2;
var LA152_0 = this.input.LA(1);
if ( ((LA152_0>=HamClocku && LA152_0<=HamClockur)) ) {
alt152=1;
}
switch (alt152) {
case 1 :
// Ham4Parser.g:3502:11: clock
this.pushFollow(Ham4Parser.FOLLOW_clock_in_revolutions13699);
clock382=this.clock();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, clock382.getTree());
break;
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: revolutions finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("revolutions", 101);
}
return retval;
},
// inline static return class
replacement_return: (function() {
Ham4Parser.replacement_return = function(){};
org.antlr.lang.extend(Ham4Parser.replacement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3506:1: replacement : HamReplace ( sizechange )? ( handshape1 ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? ) -> ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* ) | splitreplacetail -> ^( REPLACE ( sizechange )* splitreplacetail ) | extfidir1 ( palmor1 )? -> ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* ) | palmor1 -> ^( REPLACE ( sizechange )* palmor1 ) ) ;
// $ANTLR start "replacement"
replacement: function() {
this.traceIn("replacement", 102);
var retval = new Ham4Parser.replacement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamReplace383 = null;
var sizechange384 = null;
var handshape1385 = null;
var splitreplacetail386 = null;
var extfidir1387 = null;
var palmor1388 = null;
var splitreplacetail389 = null;
var extfidir1390 = null;
var palmor1391 = null;
var palmor1392 = null;
var HamReplace383_tree=null;
var stream_HamReplace=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamReplace");
var stream_handshape1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshape1");
var stream_palmor1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor1");
var stream_sizechange=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule sizechange");
var stream_extfidir1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir1");
var stream_splitreplacetail=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule splitreplacetail");
this.trace("ANTLR Parse: replacement starts "+this.state.backtracking);
try {
// Ham4Parser.g:3543:5: ( HamReplace ( sizechange )? ( handshape1 ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? ) -> ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* ) | splitreplacetail -> ^( REPLACE ( sizechange )* splitreplacetail ) | extfidir1 ( palmor1 )? -> ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* ) | palmor1 -> ^( REPLACE ( sizechange )* palmor1 ) ) )
// Ham4Parser.g:3543:9: HamReplace ( sizechange )? ( handshape1 ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? ) -> ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* ) | splitreplacetail -> ^( REPLACE ( sizechange )* splitreplacetail ) | extfidir1 ( palmor1 )? -> ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* ) | palmor1 -> ^( REPLACE ( sizechange )* palmor1 ) )
HamReplace383=this.match(this.input,HamReplace,Ham4Parser.FOLLOW_HamReplace_in_replacement13737); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamReplace.add(HamReplace383);
// Ham4Parser.g:3544:9: ( sizechange )?
var alt154=2;
var LA154_0 = this.input.LA(1);
if ( ((LA154_0>=HamIncreasing && LA154_0<=HamDecreasing)) ) {
alt154=1;
}
switch (alt154) {
case 1 :
// Ham4Parser.g:3544:11: sizechange
this.pushFollow(Ham4Parser.FOLLOW_sizechange_in_replacement13750);
sizechange384=this.sizechange();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_sizechange.add(sizechange384.getTree());
break;
}
// Ham4Parser.g:3545:9: ( handshape1 ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? ) -> ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* ) | splitreplacetail -> ^( REPLACE ( sizechange )* splitreplacetail ) | extfidir1 ( palmor1 )? -> ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* ) | palmor1 -> ^( REPLACE ( sizechange )* palmor1 ) )
var alt159=4;
switch ( this.input.LA(1) ) {
case HamFist:
case HamFlathand:
case HamFinger2:
case HamFinger23:
case HamFinger23spread:
case HamFinger2345:
case HamPinch12:
case HamPinchall:
case HamPinch12open:
case HamCee12:
case HamCeeall:
case HamCee12open:
case HamNondominant:
alt159=1;
break;
case HamParbegin:
alt159=2;
break;
case HamExtfingeru:
case HamExtfingerur:
case HamExtfingerr:
case HamExtfingerdr:
case HamExtfingerd:
case HamExtfingerdl:
case HamExtfingerl:
case HamExtfingerul:
case HamExtfingerol:
case HamExtfingero:
case HamExtfingeror:
case HamExtfingeril:
case HamExtfingeri:
case HamExtfingerir:
case HamExtfingerui:
case HamExtfingerdi:
case HamExtfingerdo:
case HamExtfingeruo:
alt159=3;
break;
case HamPalmu:
case HamPalmur:
case HamPalmr:
case HamPalmdr:
case HamPalmd:
case HamPalmdl:
case HamPalml:
case HamPalmul:
alt159=4;
break;
default:
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 159, 0, this.input);
throw nvae;
}
switch (alt159) {
case 1 :
// Ham4Parser.g:3546:13: handshape1 ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? )
this.pushFollow(Ham4Parser.FOLLOW_handshape1_in_replacement13777);
handshape1385=this.handshape1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshape1.add(handshape1385.getTree());
// Ham4Parser.g:3547:13: ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? )
var alt157=2;
alt157 = this.dfa157.predict(this.input);
switch (alt157) {
case 1 :
// Ham4Parser.g:3548:17: ( splitreplacetail )=> splitreplacetail
this.pushFollow(Ham4Parser.FOLLOW_splitreplacetail_in_replacement13849);
splitreplacetail386=this.splitreplacetail();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitreplacetail.add(splitreplacetail386.getTree());
break;
case 2 :
// Ham4Parser.g:3552:17: ( extfidir1 )? ( palmor1 )?
// Ham4Parser.g:3552:17: ( extfidir1 )?
var alt155=2;
var LA155_0 = this.input.LA(1);
if ( ((LA155_0>=HamExtfingeru && LA155_0<=HamExtfingeruo)) ) {
alt155=1;
}
switch (alt155) {
case 1 :
// Ham4Parser.g:3552:19: extfidir1
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_replacement13883);
extfidir1387=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(extfidir1387.getTree());
break;
}
// Ham4Parser.g:3553:17: ( palmor1 )?
var alt156=2;
var LA156_0 = this.input.LA(1);
if ( ((LA156_0>=HamPalmu && LA156_0<=HamPalmul)) ) {
alt156=1;
}
switch (alt156) {
case 1 :
// Ham4Parser.g:3553:19: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_replacement13906);
palmor1388=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1388.getTree());
break;
}
break;
}
// AST REWRITE
// elements: sizechange, extfidir1, splitreplacetail, handshape1, palmor1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3555:15: -> ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* )
{
// Ham4Parser.g:3555:18: ^( REPLACE ( sizechange )* handshape1 ( splitreplacetail )* ( extfidir1 )* ( palmor1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPLACE, "REPLACE"), root_1);
// Ham4Parser.g:3555:28: ( sizechange )*
while ( stream_sizechange.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechange.nextTree());
}
stream_sizechange.reset();
this.adaptor.addChild(root_1, stream_handshape1.nextTree());
// Ham4Parser.g:3555:51: ( splitreplacetail )*
while ( stream_splitreplacetail.hasNext() ) {
this.adaptor.addChild(root_1, stream_splitreplacetail.nextTree());
}
stream_splitreplacetail.reset();
// Ham4Parser.g:3555:69: ( extfidir1 )*
while ( stream_extfidir1.hasNext() ) {
this.adaptor.addChild(root_1, stream_extfidir1.nextTree());
}
stream_extfidir1.reset();
// Ham4Parser.g:3555:80: ( palmor1 )*
while ( stream_palmor1.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
}
stream_palmor1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 2 :
// Ham4Parser.g:3557:13: splitreplacetail
this.pushFollow(Ham4Parser.FOLLOW_splitreplacetail_in_replacement13981);
splitreplacetail389=this.splitreplacetail();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_splitreplacetail.add(splitreplacetail389.getTree());
// AST REWRITE
// elements: splitreplacetail, sizechange
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3558:14: -> ^( REPLACE ( sizechange )* splitreplacetail )
{
// Ham4Parser.g:3558:17: ^( REPLACE ( sizechange )* splitreplacetail )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPLACE, "REPLACE"), root_1);
// Ham4Parser.g:3558:27: ( sizechange )*
while ( stream_sizechange.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechange.nextTree());
}
stream_sizechange.reset();
this.adaptor.addChild(root_1, stream_splitreplacetail.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 3 :
// Ham4Parser.g:3560:13: extfidir1 ( palmor1 )?
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_replacement14029);
extfidir1390=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(extfidir1390.getTree());
// Ham4Parser.g:3561:13: ( palmor1 )?
var alt158=2;
var LA158_0 = this.input.LA(1);
if ( ((LA158_0>=HamPalmu && LA158_0<=HamPalmul)) ) {
alt158=1;
}
switch (alt158) {
case 1 :
// Ham4Parser.g:3561:15: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_replacement14045);
palmor1391=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1391.getTree());
break;
}
// AST REWRITE
// elements: palmor1, sizechange, extfidir1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3562:14: -> ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* )
{
// Ham4Parser.g:3562:17: ^( REPLACE ( sizechange )* extfidir1 ( palmor1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPLACE, "REPLACE"), root_1);
// Ham4Parser.g:3562:27: ( sizechange )*
while ( stream_sizechange.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechange.nextTree());
}
stream_sizechange.reset();
this.adaptor.addChild(root_1, stream_extfidir1.nextTree());
// Ham4Parser.g:3562:49: ( palmor1 )*
while ( stream_palmor1.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
}
stream_palmor1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
case 4 :
// Ham4Parser.g:3564:13: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_replacement14099);
palmor1392=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1392.getTree());
// AST REWRITE
// elements: sizechange, palmor1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3565:14: -> ^( REPLACE ( sizechange )* palmor1 )
{
// Ham4Parser.g:3565:17: ^( REPLACE ( sizechange )* palmor1 )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPLACE, "REPLACE"), root_1);
// Ham4Parser.g:3565:27: ( sizechange )*
while ( stream_sizechange.hasNext() ) {
this.adaptor.addChild(root_1, stream_sizechange.nextTree());
}
stream_sizechange.reset();
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: replacement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("replacement", 102);
}
return retval;
},
// inline static return class
splitreplacetail_return: (function() {
Ham4Parser.splitreplacetail_return = function(){};
org.antlr.lang.extend(Ham4Parser.splitreplacetail_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3569:1: splitreplacetail : HamParbegin replacetail1 HamPlus ( HamNomotion | replacetail1 ) HamParend -> ^( SPLITREPLACETL ( replacetail1 )* ) ;
// $ANTLR start "splitreplacetail"
splitreplacetail: function() {
this.traceIn("splitreplacetail", 103);
var retval = new Ham4Parser.splitreplacetail_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamParbegin393 = null;
var HamPlus395 = null;
var HamNomotion396 = null;
var HamParend398 = null;
var replacetail1394 = null;
var replacetail1397 = null;
var HamParbegin393_tree=null;
var HamPlus395_tree=null;
var HamNomotion396_tree=null;
var HamParend398_tree=null;
var stream_HamNomotion=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamNomotion");
var stream_HamPlus=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamPlus");
var stream_HamParend=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParend");
var stream_HamParbegin=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token HamParbegin");
var stream_replacetail1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule replacetail1");
this.trace("ANTLR Parse: splitreplacetail starts "+this.state.backtracking);
try {
// Ham4Parser.g:3593:5: ( HamParbegin replacetail1 HamPlus ( HamNomotion | replacetail1 ) HamParend -> ^( SPLITREPLACETL ( replacetail1 )* ) )
// Ham4Parser.g:3593:9: HamParbegin replacetail1 HamPlus ( HamNomotion | replacetail1 ) HamParend
HamParbegin393=this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_splitreplacetail14162); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParbegin.add(HamParbegin393);
this.pushFollow(Ham4Parser.FOLLOW_replacetail1_in_splitreplacetail14173);
replacetail1394=this.replacetail1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_replacetail1.add(replacetail1394.getTree());
HamPlus395=this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_splitreplacetail14183); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamPlus.add(HamPlus395);
// Ham4Parser.g:3596:9: ( HamNomotion | replacetail1 )
var alt160=2;
var LA160_0 = this.input.LA(1);
if ( (LA160_0==HamNomotion) ) {
alt160=1;
}
else if ( ((LA160_0>=HamExtfingeru && LA160_0<=HamExtfingeruo)||(LA160_0>=HamPalmu && LA160_0<=HamPalmul)) ) {
alt160=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 160, 0, this.input);
throw nvae;
}
switch (alt160) {
case 1 :
// Ham4Parser.g:3597:13: HamNomotion
HamNomotion396=this.match(this.input,HamNomotion,Ham4Parser.FOLLOW_HamNomotion_in_splitreplacetail14208); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamNomotion.add(HamNomotion396);
break;
case 2 :
// Ham4Parser.g:3599:13: replacetail1
this.pushFollow(Ham4Parser.FOLLOW_replacetail1_in_splitreplacetail14233);
replacetail1397=this.replacetail1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_replacetail1.add(replacetail1397.getTree());
break;
}
HamParend398=this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_splitreplacetail14253); if (this.state.failed) return retval; 
if ( this.state.backtracking===0 ) stream_HamParend.add(HamParend398);
// AST REWRITE
// elements: replacetail1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3603:11: -> ^( SPLITREPLACETL ( replacetail1 )* )
{
// Ham4Parser.g:3603:14: ^( SPLITREPLACETL ( replacetail1 )* )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(SPLITREPLACETL, "SPLITREPLACETL"), root_1);
// Ham4Parser.g:3603:31: ( replacetail1 )*
while ( stream_replacetail1.hasNext() ) {
this.adaptor.addChild(root_1, stream_replacetail1.nextTree());
}
stream_replacetail1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: splitreplacetail finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("splitreplacetail", 103);
}
return retval;
},
// inline static return class
replacetail1_return: (function() {
Ham4Parser.replacetail1_return = function(){};
org.antlr.lang.extend(Ham4Parser.replacetail1_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3606:1: replacetail1 : ( extfidir1 ( palmor1 )? | palmor1 ) -> ^( REPLACETAIL1 ( extfidir1 )? ( palmor1 )? ) ;
// $ANTLR start "replacetail1"
replacetail1: function() {
this.traceIn("replacetail1", 104);
var retval = new Ham4Parser.replacetail1_return();
retval.start = this.input.LT(1);
var root_0 = null;
var extfidir1399 = null;
var palmor1400 = null;
var palmor1401 = null;
var stream_palmor1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule palmor1");
var stream_extfidir1=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidir1");
this.trace("ANTLR Parse: replacetail1 starts "+this.state.backtracking);
try {
// Ham4Parser.g:3627:5: ( ( extfidir1 ( palmor1 )? | palmor1 ) -> ^( REPLACETAIL1 ( extfidir1 )? ( palmor1 )? ) )
// Ham4Parser.g:3628:5: ( extfidir1 ( palmor1 )? | palmor1 )
// Ham4Parser.g:3628:5: ( extfidir1 ( palmor1 )? | palmor1 )
var alt162=2;
var LA162_0 = this.input.LA(1);
if ( ((LA162_0>=HamExtfingeru && LA162_0<=HamExtfingeruo)) ) {
alt162=1;
}
else if ( ((LA162_0>=HamPalmu && LA162_0<=HamPalmul)) ) {
alt162=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 162, 0, this.input);
throw nvae;
}
switch (alt162) {
case 1 :
// Ham4Parser.g:3629:9: extfidir1 ( palmor1 )?
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_replacetail114323);
extfidir1399=this.extfidir1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidir1.add(extfidir1399.getTree());
// Ham4Parser.g:3630:9: ( palmor1 )?
var alt161=2;
var LA161_0 = this.input.LA(1);
if ( ((LA161_0>=HamPalmu && LA161_0<=HamPalmul)) ) {
alt161=1;
}
switch (alt161) {
case 1 :
// Ham4Parser.g:3630:11: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_replacetail114335);
palmor1400=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1400.getTree());
break;
}
break;
case 2 :
// Ham4Parser.g:3632:9: palmor1
this.pushFollow(Ham4Parser.FOLLOW_palmor1_in_replacetail114354);
palmor1401=this.palmor1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_palmor1.add(palmor1401.getTree());
break;
}
// AST REWRITE
// elements: palmor1, extfidir1
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3634:7: -> ^( REPLACETAIL1 ( extfidir1 )? ( palmor1 )? )
{
// Ham4Parser.g:3634:10: ^( REPLACETAIL1 ( extfidir1 )? ( palmor1 )? )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(REPLACETAIL1, "REPLACETAIL1"), root_1);
// Ham4Parser.g:3634:25: ( extfidir1 )?
if ( stream_extfidir1.hasNext() ) {
this.adaptor.addChild(root_1, stream_extfidir1.nextTree());
}
stream_extfidir1.reset();
// Ham4Parser.g:3634:36: ( palmor1 )?
if ( stream_palmor1.hasNext() ) {
this.adaptor.addChild(root_1, stream_palmor1.nextTree());
}
stream_palmor1.reset();
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: replacetail1 finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("replacetail1", 104);
}
return retval;
},
// inline static return class
brushingcontact_return: (function() {
Ham4Parser.brushingcontact_return = function(){};
org.antlr.lang.extend(Ham4Parser.brushingcontact_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3637:1: brushingcontact : HamSeqbegin HamBrushing location1 HamSeqend ;
// $ANTLR start "brushingcontact"
brushingcontact: function() {
this.traceIn("brushingcontact", 105);
var retval = new Ham4Parser.brushingcontact_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamSeqbegin402 = null;
var HamBrushing403 = null;
var HamSeqend405 = null;
var location1404 = null;
var HamSeqbegin402_tree=null;
var HamBrushing403_tree=null;
var HamSeqend405_tree=null;
this.trace("ANTLR Parse: brushingcontact starts "+this.state.backtracking);
try {
// Ham4Parser.g:3655:5: ( HamSeqbegin HamBrushing location1 HamSeqend )
// Ham4Parser.g:3656:9: HamSeqbegin HamBrushing location1 HamSeqend
root_0 = this.adaptor.nil();
HamSeqbegin402=this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_brushingcontact14413); if (this.state.failed) return retval;
HamBrushing403=this.match(this.input,HamBrushing,Ham4Parser.FOLLOW_HamBrushing_in_brushingcontact14425); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamBrushing403_tree = this.adaptor.create(HamBrushing403);
this.adaptor.addChild(root_0, HamBrushing403_tree);
}
this.pushFollow(Ham4Parser.FOLLOW_location1_in_brushingcontact14435);
location1404=this.location1();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, location1404.getTree());
HamSeqend405=this.match(this.input,HamSeqend,Ham4Parser.FOLLOW_HamSeqend_in_brushingcontact14445); if (this.state.failed) return retval;
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: brushingcontact finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("brushingcontact", 105);
}
return retval;
},
// inline static return class
handshapeclasstok_return: (function() {
Ham4Parser.handshapeclasstok_return = function(){};
org.antlr.lang.extend(Ham4Parser.handshapeclasstok_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3665:1: handshapeclasstok : ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open ) ;
// $ANTLR start "handshapeclasstok"
handshapeclasstok: function() {
this.traceIn("handshapeclasstok", 106);
var retval = new Ham4Parser.handshapeclasstok_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set406 = null;
var set406_tree=null;
this.trace("ANTLR Parse: handshapeclasstok starts "+this.state.backtracking);
try {
// Ham4Parser.g:3694:5: ( ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open ) )
// Ham4Parser.g:3695:5: ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open )
root_0 = this.adaptor.nil();
set406=this.input.LT(1);
if ( (this.input.LA(1)>=HamFist && this.input.LA(1)<=HamFinger2345)||(this.input.LA(1)>=HamPinch12 && this.input.LA(1)<=HamCee12open) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set406));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handshapeclasstok finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handshapeclasstok", 106);
}
return retval;
},
// inline static return class
handshapeclass_return: (function() {
Ham4Parser.handshapeclass_return = function(){};
org.antlr.lang.extend(Ham4Parser.handshapeclass_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3712:1: handshapeclass : handshapeclasstok -> ^( HSCLASS handshapeclasstok ) ;
// $ANTLR start "handshapeclass"
handshapeclass: function() {
this.traceIn("handshapeclass", 107);
var retval = new Ham4Parser.handshapeclass_return();
retval.start = this.input.LT(1);
var root_0 = null;
var handshapeclasstok407 = null;
var stream_handshapeclasstok=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule handshapeclasstok");
this.trace("ANTLR Parse: handshapeclass starts "+this.state.backtracking);
try {
// Ham4Parser.g:3727:5: ( handshapeclasstok -> ^( HSCLASS handshapeclasstok ) )
// Ham4Parser.g:3727:10: handshapeclasstok
this.pushFollow(Ham4Parser.FOLLOW_handshapeclasstok_in_handshapeclass14633);
handshapeclasstok407=this.handshapeclasstok();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_handshapeclasstok.add(handshapeclasstok407.getTree());
// AST REWRITE
// elements: handshapeclasstok
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3728:5: -> ^( HSCLASS handshapeclasstok )
{
// Ham4Parser.g:3728:8: ^( HSCLASS handshapeclasstok )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(HSCLASS, "HSCLASS"), root_1);
this.adaptor.addChild(root_1, stream_handshapeclasstok.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handshapeclass finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handshapeclass", 107);
}
return retval;
},
// inline static return class
fingerbendingtok_return: (function() {
Ham4Parser.fingerbendingtok_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingerbendingtok_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3731:1: fingerbendingtok : ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked ) ;
// $ANTLR start "fingerbendingtok"
fingerbendingtok: function() {
this.traceIn("fingerbendingtok", 108);
var retval = new Ham4Parser.fingerbendingtok_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set408 = null;
var set408_tree=null;
this.trace("ANTLR Parse: fingerbendingtok starts "+this.state.backtracking);
try {
// Ham4Parser.g:3751:5: ( ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked ) )
// Ham4Parser.g:3752:5: ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked )
root_0 = this.adaptor.nil();
set408=this.input.LT(1);
if ( (this.input.LA(1)>=HamFingerstraightmod && this.input.LA(1)<=HamFingerhookedmod)||(this.input.LA(1)>=HamDoublebent && this.input.LA(1)<=HamDoublehooked) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set408));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingerbendingtok finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingerbendingtok", 108);
}
return retval;
},
// inline static return class
fingerbending_return: (function() {
Ham4Parser.fingerbending_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingerbending_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3760:1: fingerbending : fingerbendingtok -> ^( FIBENDING fingerbendingtok ) ;
// $ANTLR start "fingerbending"
fingerbending: function() {
this.traceIn("fingerbending", 109);
var retval = new Ham4Parser.fingerbending_return();
retval.start = this.input.LT(1);
var root_0 = null;
var fingerbendingtok409 = null;
var stream_fingerbendingtok=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule fingerbendingtok");
this.trace("ANTLR Parse: fingerbending starts "+this.state.backtracking);
try {
// Ham4Parser.g:3775:5: ( fingerbendingtok -> ^( FIBENDING fingerbendingtok ) )
// Ham4Parser.g:3775:7: fingerbendingtok
this.pushFollow(Ham4Parser.FOLLOW_fingerbendingtok_in_fingerbending14753);
fingerbendingtok409=this.fingerbendingtok();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_fingerbendingtok.add(fingerbendingtok409.getTree());
// AST REWRITE
// elements: fingerbendingtok
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3776:7: -> ^( FIBENDING fingerbendingtok )
{
// Ham4Parser.g:3776:10: ^( FIBENDING fingerbendingtok )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(FIBENDING, "FIBENDING"), root_1);
this.adaptor.addChild(root_1, stream_fingerbendingtok.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingerbending finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingerbending", 109);
}
return retval;
},
// inline static return class
thumbpostok_return: (function() {
Ham4Parser.thumbpostok_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbpostok_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3779:1: thumbpostok : ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod ) ;
// $ANTLR start "thumbpostok"
thumbpostok: function() {
this.traceIn("thumbpostok", 110);
var retval = new Ham4Parser.thumbpostok_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set410 = null;
var set410_tree=null;
this.trace("ANTLR Parse: thumbpostok starts "+this.state.backtracking);
try {
// Ham4Parser.g:3797:5: ( ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod ) )
// Ham4Parser.g:3798:5: ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod )
root_0 = this.adaptor.nil();
set410=this.input.LT(1);
if ( (this.input.LA(1)>=HamThumboutmod && this.input.LA(1)<=HamThumbacrossmod)||this.input.LA(1)==HamThumbopenmod ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set410));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbpostok finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbpostok", 110);
}
return retval;
},
// inline static return class
thumbpos_return: (function() {
Ham4Parser.thumbpos_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumbpos_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3804:1: thumbpos : thumbpostok -> ^( THUMBPOS thumbpostok ) ;
// $ANTLR start "thumbpos"
thumbpos: function() {
this.traceIn("thumbpos", 111);
var retval = new Ham4Parser.thumbpos_return();
retval.start = this.input.LT(1);
var root_0 = null;
var thumbpostok411 = null;
var stream_thumbpostok=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule thumbpostok");
this.trace("ANTLR Parse: thumbpos starts "+this.state.backtracking);
try {
// Ham4Parser.g:3819:5: ( thumbpostok -> ^( THUMBPOS thumbpostok ) )
// Ham4Parser.g:3819:7: thumbpostok
this.pushFollow(Ham4Parser.FOLLOW_thumbpostok_in_thumbpos14855);
thumbpostok411=this.thumbpostok();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_thumbpostok.add(thumbpostok411.getTree());
// AST REWRITE
// elements: thumbpostok
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 3820:7: -> ^( THUMBPOS thumbpostok )
{
// Ham4Parser.g:3820:10: ^( THUMBPOS thumbpostok )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(THUMBPOS, "THUMBPOS"), root_1);
this.adaptor.addChild(root_1, stream_thumbpostok.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumbpos finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumbpos", 111);
}
return retval;
},
// inline static return class
thumb_return: (function() {
Ham4Parser.thumb_return = function(){};
org.antlr.lang.extend(Ham4Parser.thumb_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3823:1: thumb : HamThumb ;
// $ANTLR start "thumb"
thumb: function() {
this.traceIn("thumb", 112);
var retval = new Ham4Parser.thumb_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamThumb412 = null;
var HamThumb412_tree=null;
this.trace("ANTLR Parse: thumb starts "+this.state.backtracking);
try {
// Ham4Parser.g:3837:5: ( HamThumb )
// Ham4Parser.g:3837:9: HamThumb
root_0 = this.adaptor.nil();
HamThumb412=this.match(this.input,HamThumb,Ham4Parser.FOLLOW_HamThumb_in_thumb14898); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamThumb412_tree = this.adaptor.create(HamThumb412);
this.adaptor.addChild(root_0, HamThumb412_tree);
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: thumb finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("thumb", 112);
}
return retval;
},
// inline static return class
finger_return: (function() {
Ham4Parser.finger_return = function(){};
org.antlr.lang.extend(Ham4Parser.finger_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3840:1: finger : ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky );
// $ANTLR start "finger"
finger: function() {
this.traceIn("finger", 113);
var retval = new Ham4Parser.finger_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set413 = null;
var set413_tree=null;
this.trace("ANTLR Parse: finger starts "+this.state.backtracking);
try {
// Ham4Parser.g:3857:5: ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set413=this.input.LT(1);
if ( (this.input.LA(1)>=HamIndexfinger && this.input.LA(1)<=HamPinky) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set413));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: finger finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("finger", 113);
}
return retval;
},
// inline static return class
fingerpart_return: (function() {
Ham4Parser.fingerpart_return = function(){};
org.antlr.lang.extend(Ham4Parser.fingerpart_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3863:1: fingerpart : ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside );
// $ANTLR start "fingerpart"
fingerpart: function() {
this.traceIn("fingerpart", 114);
var retval = new Ham4Parser.fingerpart_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set414 = null;
var set414_tree=null;
this.trace("ANTLR Parse: fingerpart starts "+this.state.backtracking);
try {
// Ham4Parser.g:3882:5: ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set414=this.input.LT(1);
if ( (this.input.LA(1)>=HamFingertip && this.input.LA(1)<=HamFingerside) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set414));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: fingerpart finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("fingerpart", 114);
}
return retval;
},
// inline static return class
extfidirtok_return: (function() {
Ham4Parser.extfidirtok_return = function(){};
org.antlr.lang.extend(Ham4Parser.extfidirtok_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:3890:1: extfidirtok : ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) ) ;
// $ANTLR start "extfidirtok"
extfidirtok: function() {
this.traceIn("extfidirtok", 115);
var retval = new Ham4Parser.extfidirtok_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamExtfingeru415 = null;
var HamExtfingerur416 = null;
var HamExtfingerr417 = null;
var HamExtfingerdr418 = null;
var HamExtfingerd419 = null;
var HamExtfingerdl420 = null;
var HamExtfingerl421 = null;
var HamExtfingerul422 = null;
var HamExtfingerol423 = null;
var set424 = null;
var HamExtfingero425 = null;
var HamExtfingeror426 = null;
var set427 = null;
var HamExtfingeril428 = null;
var set429 = null;
var HamExtfingeri430 = null;
var HamExtfingerir431 = null;
var set432 = null;
var HamExtfingerui433 = null;
var set434 = null;
var HamExtfingerdi435 = null;
var set436 = null;
var HamExtfingerdo437 = null;
var set438 = null;
var HamExtfingeruo439 = null;
var set440 = null;
var HamExtfingeru415_tree=null;
var HamExtfingerur416_tree=null;
var HamExtfingerr417_tree=null;
var HamExtfingerdr418_tree=null;
var HamExtfingerd419_tree=null;
var HamExtfingerdl420_tree=null;
var HamExtfingerl421_tree=null;
var HamExtfingerul422_tree=null;
var HamExtfingerol423_tree=null;
var set424_tree=null;
var HamExtfingero425_tree=null;
var HamExtfingeror426_tree=null;
var set427_tree=null;
var HamExtfingeril428_tree=null;
var set429_tree=null;
var HamExtfingeri430_tree=null;
var HamExtfingerir431_tree=null;
var set432_tree=null;
var HamExtfingerui433_tree=null;
var set434_tree=null;
var HamExtfingerdi435_tree=null;
var set436_tree=null;
var HamExtfingerdo437_tree=null;
var set438_tree=null;
var HamExtfingeruo439_tree=null;
var set440_tree=null;
this.trace("ANTLR Parse: extfidirtok starts "+this.state.backtracking);
try {
// Ham4Parser.g:3971:5: ( ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) ) )
// Ham4Parser.g:3972:5: ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) )
root_0 = this.adaptor.nil();
// Ham4Parser.g:3972:5: ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) )
var alt171=18;
alt171 = this.dfa171.predict(this.input);
switch (alt171) {
case 1 :
// Ham4Parser.g:3972:9: HamExtfingeru
HamExtfingeru415=this.match(this.input,HamExtfingeru,Ham4Parser.FOLLOW_HamExtfingeru_in_extfidirtok15071); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingeru415_tree = this.adaptor.create(HamExtfingeru415);
this.adaptor.addChild(root_0, HamExtfingeru415_tree);
}
break;
case 2 :
// Ham4Parser.g:3973:9: HamExtfingerur
HamExtfingerur416=this.match(this.input,HamExtfingerur,Ham4Parser.FOLLOW_HamExtfingerur_in_extfidirtok15081); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerur416_tree = this.adaptor.create(HamExtfingerur416);
this.adaptor.addChild(root_0, HamExtfingerur416_tree);
}
break;
case 3 :
// Ham4Parser.g:3974:9: HamExtfingerr
HamExtfingerr417=this.match(this.input,HamExtfingerr,Ham4Parser.FOLLOW_HamExtfingerr_in_extfidirtok15091); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerr417_tree = this.adaptor.create(HamExtfingerr417);
this.adaptor.addChild(root_0, HamExtfingerr417_tree);
}
break;
case 4 :
// Ham4Parser.g:3975:9: HamExtfingerdr
HamExtfingerdr418=this.match(this.input,HamExtfingerdr,Ham4Parser.FOLLOW_HamExtfingerdr_in_extfidirtok15101); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerdr418_tree = this.adaptor.create(HamExtfingerdr418);
this.adaptor.addChild(root_0, HamExtfingerdr418_tree);
}
break;
case 5 :
// Ham4Parser.g:3976:9: HamExtfingerd
HamExtfingerd419=this.match(this.input,HamExtfingerd,Ham4Parser.FOLLOW_HamExtfingerd_in_extfidirtok15111); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerd419_tree = this.adaptor.create(HamExtfingerd419);
this.adaptor.addChild(root_0, HamExtfingerd419_tree);
}
break;
case 6 :
// Ham4Parser.g:3977:9: HamExtfingerdl
HamExtfingerdl420=this.match(this.input,HamExtfingerdl,Ham4Parser.FOLLOW_HamExtfingerdl_in_extfidirtok15121); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerdl420_tree = this.adaptor.create(HamExtfingerdl420);
this.adaptor.addChild(root_0, HamExtfingerdl420_tree);
}
break;
case 7 :
// Ham4Parser.g:3978:9: HamExtfingerl
HamExtfingerl421=this.match(this.input,HamExtfingerl,Ham4Parser.FOLLOW_HamExtfingerl_in_extfidirtok15131); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerl421_tree = this.adaptor.create(HamExtfingerl421);
this.adaptor.addChild(root_0, HamExtfingerl421_tree);
}
break;
case 8 :
// Ham4Parser.g:3979:9: HamExtfingerul
HamExtfingerul422=this.match(this.input,HamExtfingerul,Ham4Parser.FOLLOW_HamExtfingerul_in_extfidirtok15141); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerul422_tree = this.adaptor.create(HamExtfingerul422);
this.adaptor.addChild(root_0, HamExtfingerul422_tree);
}
break;
case 9 :
// Ham4Parser.g:3980:9: ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4Parser.g:3980:9: ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4Parser.g:3981:13: HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )?
HamExtfingerol423=this.match(this.input,HamExtfingerol,Ham4Parser.FOLLOW_HamExtfingerol_in_extfidirtok15165); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerol423_tree = this.adaptor.create(HamExtfingerol423);
this.adaptor.addChild(root_0, HamExtfingerol423_tree);
}
// Ham4Parser.g:3982:13: ( HamExtfingeruo | HamExtfingerdo )?
var alt163=2;
var LA163_0 = this.input.LA(1);
if ( ((LA163_0>=HamExtfingerdo && LA163_0<=HamExtfingeruo)) ) {
alt163=1;
}
switch (alt163) {
case 1 :
// Ham4Parser.g:
set424=this.input.LT(1);
if ( (this.input.LA(1)>=HamExtfingerdo && this.input.LA(1)<=HamExtfingeruo) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set424));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 10 :
// Ham4Parser.g:3987:9: HamExtfingero
HamExtfingero425=this.match(this.input,HamExtfingero,Ham4Parser.FOLLOW_HamExtfingero_in_extfidirtok15250); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingero425_tree = this.adaptor.create(HamExtfingero425);
this.adaptor.addChild(root_0, HamExtfingero425_tree);
}
break;
case 11 :
// Ham4Parser.g:3988:9: ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4Parser.g:3988:9: ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4Parser.g:3989:13: HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )?
HamExtfingeror426=this.match(this.input,HamExtfingeror,Ham4Parser.FOLLOW_HamExtfingeror_in_extfidirtok15274); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingeror426_tree = this.adaptor.create(HamExtfingeror426);
this.adaptor.addChild(root_0, HamExtfingeror426_tree);
}
// Ham4Parser.g:3990:13: ( HamExtfingeruo | HamExtfingerdo )?
var alt164=2;
var LA164_0 = this.input.LA(1);
if ( ((LA164_0>=HamExtfingerdo && LA164_0<=HamExtfingeruo)) ) {
alt164=1;
}
switch (alt164) {
case 1 :
// Ham4Parser.g:
set427=this.input.LT(1);
if ( (this.input.LA(1)>=HamExtfingerdo && this.input.LA(1)<=HamExtfingeruo) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set427));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 12 :
// Ham4Parser.g:3995:9: ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? )
// Ham4Parser.g:3995:9: ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? )
// Ham4Parser.g:3996:13: HamExtfingeril ( HamExtfingerui | HamExtfingerdi )?
HamExtfingeril428=this.match(this.input,HamExtfingeril,Ham4Parser.FOLLOW_HamExtfingeril_in_extfidirtok15373); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingeril428_tree = this.adaptor.create(HamExtfingeril428);
this.adaptor.addChild(root_0, HamExtfingeril428_tree);
}
// Ham4Parser.g:3997:13: ( HamExtfingerui | HamExtfingerdi )?
var alt165=2;
var LA165_0 = this.input.LA(1);
if ( ((LA165_0>=HamExtfingerui && LA165_0<=HamExtfingerdi)) ) {
alt165=1;
}
switch (alt165) {
case 1 :
// Ham4Parser.g:
set429=this.input.LT(1);
if ( (this.input.LA(1)>=HamExtfingerui && this.input.LA(1)<=HamExtfingerdi) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set429));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 13 :
// Ham4Parser.g:4002:9: HamExtfingeri
HamExtfingeri430=this.match(this.input,HamExtfingeri,Ham4Parser.FOLLOW_HamExtfingeri_in_extfidirtok15458); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingeri430_tree = this.adaptor.create(HamExtfingeri430);
this.adaptor.addChild(root_0, HamExtfingeri430_tree);
}
break;
case 14 :
// Ham4Parser.g:4003:9: ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? )
// Ham4Parser.g:4003:9: ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? )
// Ham4Parser.g:4004:13: HamExtfingerir ( HamExtfingerui | HamExtfingerdi )?
HamExtfingerir431=this.match(this.input,HamExtfingerir,Ham4Parser.FOLLOW_HamExtfingerir_in_extfidirtok15482); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerir431_tree = this.adaptor.create(HamExtfingerir431);
this.adaptor.addChild(root_0, HamExtfingerir431_tree);
}
// Ham4Parser.g:4005:13: ( HamExtfingerui | HamExtfingerdi )?
var alt166=2;
var LA166_0 = this.input.LA(1);
if ( ((LA166_0>=HamExtfingerui && LA166_0<=HamExtfingerdi)) ) {
alt166=1;
}
switch (alt166) {
case 1 :
// Ham4Parser.g:
set432=this.input.LT(1);
if ( (this.input.LA(1)>=HamExtfingerui && this.input.LA(1)<=HamExtfingerdi) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set432));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 15 :
// Ham4Parser.g:4010:9: ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? )
// Ham4Parser.g:4010:9: ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? )
// Ham4Parser.g:4011:13: HamExtfingerui ( HamExtfingeril | HamExtfingerir )?
HamExtfingerui433=this.match(this.input,HamExtfingerui,Ham4Parser.FOLLOW_HamExtfingerui_in_extfidirtok15581); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerui433_tree = this.adaptor.create(HamExtfingerui433);
this.adaptor.addChild(root_0, HamExtfingerui433_tree);
}
// Ham4Parser.g:4012:13: ( HamExtfingeril | HamExtfingerir )?
var alt167=2;
var LA167_0 = this.input.LA(1);
if ( (LA167_0==HamExtfingeril||LA167_0==HamExtfingerir) ) {
alt167=1;
}
switch (alt167) {
case 1 :
// Ham4Parser.g:
set434=this.input.LT(1);
if ( this.input.LA(1)==HamExtfingeril||this.input.LA(1)==HamExtfingerir ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set434));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 16 :
// Ham4Parser.g:4017:9: ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? )
// Ham4Parser.g:4017:9: ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? )
// Ham4Parser.g:4018:13: HamExtfingerdi ( HamExtfingeril | HamExtfingerir )?
HamExtfingerdi435=this.match(this.input,HamExtfingerdi,Ham4Parser.FOLLOW_HamExtfingerdi_in_extfidirtok15680); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerdi435_tree = this.adaptor.create(HamExtfingerdi435);
this.adaptor.addChild(root_0, HamExtfingerdi435_tree);
}
// Ham4Parser.g:4019:13: ( HamExtfingeril | HamExtfingerir )?
var alt168=2;
var LA168_0 = this.input.LA(1);
if ( (LA168_0==HamExtfingeril||LA168_0==HamExtfingerir) ) {
alt168=1;
}
switch (alt168) {
case 1 :
// Ham4Parser.g:
set436=this.input.LT(1);
if ( this.input.LA(1)==HamExtfingeril||this.input.LA(1)==HamExtfingerir ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set436));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 17 :
// Ham4Parser.g:4024:9: ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? )
// Ham4Parser.g:4024:9: ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? )
// Ham4Parser.g:4025:13: HamExtfingerdo ( HamExtfingerol | HamExtfingeror )?
HamExtfingerdo437=this.match(this.input,HamExtfingerdo,Ham4Parser.FOLLOW_HamExtfingerdo_in_extfidirtok15779); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingerdo437_tree = this.adaptor.create(HamExtfingerdo437);
this.adaptor.addChild(root_0, HamExtfingerdo437_tree);
}
// Ham4Parser.g:4026:13: ( HamExtfingerol | HamExtfingeror )?
var alt169=2;
var LA169_0 = this.input.LA(1);
if ( (LA169_0==HamExtfingerol||LA169_0==HamExtfingeror) ) {
alt169=1;
}
switch (alt169) {
case 1 :
// Ham4Parser.g:
set438=this.input.LT(1);
if ( this.input.LA(1)==HamExtfingerol||this.input.LA(1)==HamExtfingeror ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set438));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 18 :
// Ham4Parser.g:4031:9: ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? )
// Ham4Parser.g:4031:9: ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? )
// Ham4Parser.g:4032:13: HamExtfingeruo ( HamExtfingerol | HamExtfingeror )?
HamExtfingeruo439=this.match(this.input,HamExtfingeruo,Ham4Parser.FOLLOW_HamExtfingeruo_in_extfidirtok15878); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamExtfingeruo439_tree = this.adaptor.create(HamExtfingeruo439);
this.adaptor.addChild(root_0, HamExtfingeruo439_tree);
}
// Ham4Parser.g:4033:13: ( HamExtfingerol | HamExtfingeror )?
var alt170=2;
var LA170_0 = this.input.LA(1);
if ( (LA170_0==HamExtfingerol||LA170_0==HamExtfingeror) ) {
alt170=1;
}
switch (alt170) {
case 1 :
// Ham4Parser.g:
set440=this.input.LT(1);
if ( this.input.LA(1)==HamExtfingerol||this.input.LA(1)==HamExtfingeror ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set440));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: extfidirtok finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("extfidirtok", 115);
}
return retval;
},
// inline static return class
extfidir_return: (function() {
Ham4Parser.extfidir_return = function(){};
org.antlr.lang.extend(Ham4Parser.extfidir_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4041:1: extfidir : extfidirtok -> ^( EXTFIDIR extfidirtok ) ;
// $ANTLR start "extfidir"
extfidir: function() {
this.traceIn("extfidir", 116);
var retval = new Ham4Parser.extfidir_return();
retval.start = this.input.LT(1);
var root_0 = null;
var extfidirtok441 = null;
var stream_extfidirtok=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule extfidirtok");
this.trace("ANTLR Parse: extfidir starts "+this.state.backtracking);
try {
// Ham4Parser.g:4056:5: ( extfidirtok -> ^( EXTFIDIR extfidirtok ) )
// Ham4Parser.g:4056:7: extfidirtok
this.pushFollow(Ham4Parser.FOLLOW_extfidirtok_in_extfidir15986);
extfidirtok441=this.extfidirtok();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_extfidirtok.add(extfidirtok441.getTree());
// AST REWRITE
// elements: extfidirtok
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 4057:5: -> ^( EXTFIDIR extfidirtok )
{
// Ham4Parser.g:4057:8: ^( EXTFIDIR extfidirtok )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(EXTFIDIR, "EXTFIDIR"), root_1);
this.adaptor.addChild(root_1, stream_extfidirtok.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: extfidir finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("extfidir", 116);
}
return retval;
},
// inline static return class
palmor_return: (function() {
Ham4Parser.palmor_return = function(){};
org.antlr.lang.extend(Ham4Parser.palmor_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4060:1: palmor : ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul );
// $ANTLR start "palmor"
palmor: function() {
this.traceIn("palmor", 117);
var retval = new Ham4Parser.palmor_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set442 = null;
var set442_tree=null;
this.trace("ANTLR Parse: palmor starts "+this.state.backtracking);
try {
// Ham4Parser.g:4081:5: ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set442=this.input.LT(1);
if ( (this.input.LA(1)>=HamPalmu && this.input.LA(1)<=HamPalmul) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set442));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: palmor finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("palmor", 117);
}
return retval;
},
// inline static return class
locarm_return: (function() {
Ham4Parser.locarm_return = function(){};
org.antlr.lang.extend(Ham4Parser.locarm_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4094:1: locarm : ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm );
// $ANTLR start "locarm"
locarm: function() {
this.traceIn("locarm", 118);
var retval = new Ham4Parser.locarm_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set443 = null;
var set443_tree=null;
this.trace("ANTLR Parse: locarm starts "+this.state.backtracking);
try {
// Ham4Parser.g:4111:5: ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set443=this.input.LT(1);
if ( (this.input.LA(1)>=HamUpperarm && this.input.LA(1)<=HamLowerarm) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set443));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locarm finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locarm", 118);
}
return retval;
},
// inline static return class
locbodytok_return: (function() {
Ham4Parser.locbodytok_return = function(){};
org.antlr.lang.extend(Ham4Parser.locbodytok_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4117:1: locbodytok : ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamNose | HamNostrils | HamTongue | ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? ) | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach ) ;
// $ANTLR start "locbodytok"
locbodytok: function() {
this.traceIn("locbodytok", 119);
var retval = new Ham4Parser.locbodytok_return();
retval.start = this.input.LT(1);
var root_0 = null;
var HamHead444 = null;
var HamHeadtop445 = null;
var HamForehead446 = null;
var HamEyebrows447 = null;
var HamNose448 = null;
var HamNostrils449 = null;
var HamTongue450 = null;
var set451 = null;
var set452 = null;
var HamChin453 = null;
var HamUnderchin454 = null;
var HamNeck455 = null;
var HamShouldertop456 = null;
var HamShoulders457 = null;
var HamChest458 = null;
var HamStomach459 = null;
var HamBelowstomach460 = null;
var HamHead444_tree=null;
var HamHeadtop445_tree=null;
var HamForehead446_tree=null;
var HamEyebrows447_tree=null;
var HamNose448_tree=null;
var HamNostrils449_tree=null;
var HamTongue450_tree=null;
var set451_tree=null;
var set452_tree=null;
var HamChin453_tree=null;
var HamUnderchin454_tree=null;
var HamNeck455_tree=null;
var HamShouldertop456_tree=null;
var HamShoulders457_tree=null;
var HamChest458_tree=null;
var HamStomach459_tree=null;
var HamBelowstomach460_tree=null;
this.trace("ANTLR Parse: locbodytok starts "+this.state.backtracking);
try {
// Ham4Parser.g:4158:5: ( ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamNose | HamNostrils | HamTongue | ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? ) | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach ) )
// Ham4Parser.g:4159:5: ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamNose | HamNostrils | HamTongue | ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? ) | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach )
root_0 = this.adaptor.nil();
// Ham4Parser.g:4159:5: ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamNose | HamNostrils | HamTongue | ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? ) | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach )
var alt173=16;
alt173 = this.dfa173.predict(this.input);
switch (alt173) {
case 1 :
// Ham4Parser.g:4159:9: HamHead
HamHead444=this.match(this.input,HamHead,Ham4Parser.FOLLOW_HamHead_in_locbodytok16194); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamHead444_tree = this.adaptor.create(HamHead444);
this.adaptor.addChild(root_0, HamHead444_tree);
}
break;
case 2 :
// Ham4Parser.g:4160:9: HamHeadtop
HamHeadtop445=this.match(this.input,HamHeadtop,Ham4Parser.FOLLOW_HamHeadtop_in_locbodytok16204); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamHeadtop445_tree = this.adaptor.create(HamHeadtop445);
this.adaptor.addChild(root_0, HamHeadtop445_tree);
}
break;
case 3 :
// Ham4Parser.g:4161:9: HamForehead
HamForehead446=this.match(this.input,HamForehead,Ham4Parser.FOLLOW_HamForehead_in_locbodytok16214); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamForehead446_tree = this.adaptor.create(HamForehead446);
this.adaptor.addChild(root_0, HamForehead446_tree);
}
break;
case 4 :
// Ham4Parser.g:4162:9: HamEyebrows
HamEyebrows447=this.match(this.input,HamEyebrows,Ham4Parser.FOLLOW_HamEyebrows_in_locbodytok16224); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamEyebrows447_tree = this.adaptor.create(HamEyebrows447);
this.adaptor.addChild(root_0, HamEyebrows447_tree);
}
break;
case 5 :
// Ham4Parser.g:4163:9: HamNose
HamNose448=this.match(this.input,HamNose,Ham4Parser.FOLLOW_HamNose_in_locbodytok16234); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamNose448_tree = this.adaptor.create(HamNose448);
this.adaptor.addChild(root_0, HamNose448_tree);
}
break;
case 6 :
// Ham4Parser.g:4164:9: HamNostrils
HamNostrils449=this.match(this.input,HamNostrils,Ham4Parser.FOLLOW_HamNostrils_in_locbodytok16244); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamNostrils449_tree = this.adaptor.create(HamNostrils449);
this.adaptor.addChild(root_0, HamNostrils449_tree);
}
break;
case 7 :
// Ham4Parser.g:4165:9: HamTongue
HamTongue450=this.match(this.input,HamTongue,Ham4Parser.FOLLOW_HamTongue_in_locbodytok16254); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamTongue450_tree = this.adaptor.create(HamTongue450);
this.adaptor.addChild(root_0, HamTongue450_tree);
}
break;
case 8 :
// Ham4Parser.g:4166:9: ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? )
// Ham4Parser.g:4166:9: ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? )
// Ham4Parser.g:4167:13: ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )?
set451=this.input.LT(1);
if ( this.input.LA(1)==HamTeeth||this.input.LA(1)==HamEyes||this.input.LA(1)==HamLips ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set451));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
// Ham4Parser.g:4172:13: ( HamDoublebent | HamDoublehooked )?
var alt172=2;
var LA172_0 = this.input.LA(1);
if ( ((LA172_0>=HamDoublebent && LA172_0<=HamDoublehooked)) ) {
alt172=1;
}
switch (alt172) {
case 1 :
// Ham4Parser.g:
set452=this.input.LT(1);
if ( (this.input.LA(1)>=HamDoublebent && this.input.LA(1)<=HamDoublehooked) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set452));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
break;
}
break;
case 9 :
// Ham4Parser.g:4177:9: HamChin
HamChin453=this.match(this.input,HamChin,Ham4Parser.FOLLOW_HamChin_in_locbodytok16431); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamChin453_tree = this.adaptor.create(HamChin453);
this.adaptor.addChild(root_0, HamChin453_tree);
}
break;
case 10 :
// Ham4Parser.g:4178:9: HamUnderchin
HamUnderchin454=this.match(this.input,HamUnderchin,Ham4Parser.FOLLOW_HamUnderchin_in_locbodytok16441); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamUnderchin454_tree = this.adaptor.create(HamUnderchin454);
this.adaptor.addChild(root_0, HamUnderchin454_tree);
}
break;
case 11 :
// Ham4Parser.g:4179:9: HamNeck
HamNeck455=this.match(this.input,HamNeck,Ham4Parser.FOLLOW_HamNeck_in_locbodytok16451); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamNeck455_tree = this.adaptor.create(HamNeck455);
this.adaptor.addChild(root_0, HamNeck455_tree);
}
break;
case 12 :
// Ham4Parser.g:4180:9: HamShouldertop
HamShouldertop456=this.match(this.input,HamShouldertop,Ham4Parser.FOLLOW_HamShouldertop_in_locbodytok16461); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamShouldertop456_tree = this.adaptor.create(HamShouldertop456);
this.adaptor.addChild(root_0, HamShouldertop456_tree);
}
break;
case 13 :
// Ham4Parser.g:4181:9: HamShoulders
HamShoulders457=this.match(this.input,HamShoulders,Ham4Parser.FOLLOW_HamShoulders_in_locbodytok16471); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamShoulders457_tree = this.adaptor.create(HamShoulders457);
this.adaptor.addChild(root_0, HamShoulders457_tree);
}
break;
case 14 :
// Ham4Parser.g:4182:9: HamChest
HamChest458=this.match(this.input,HamChest,Ham4Parser.FOLLOW_HamChest_in_locbodytok16481); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamChest458_tree = this.adaptor.create(HamChest458);
this.adaptor.addChild(root_0, HamChest458_tree);
}
break;
case 15 :
// Ham4Parser.g:4183:9: HamStomach
HamStomach459=this.match(this.input,HamStomach,Ham4Parser.FOLLOW_HamStomach_in_locbodytok16491); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamStomach459_tree = this.adaptor.create(HamStomach459);
this.adaptor.addChild(root_0, HamStomach459_tree);
}
break;
case 16 :
// Ham4Parser.g:4184:9: HamBelowstomach
HamBelowstomach460=this.match(this.input,HamBelowstomach,Ham4Parser.FOLLOW_HamBelowstomach_in_locbodytok16501); if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) {
HamBelowstomach460_tree = this.adaptor.create(HamBelowstomach460);
this.adaptor.addChild(root_0, HamBelowstomach460_tree);
}
break;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locbodytok finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locbodytok", 119);
}
return retval;
},
// inline static return class
locbody_return: (function() {
Ham4Parser.locbody_return = function(){};
org.antlr.lang.extend(Ham4Parser.locbody_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4188:1: locbody : locbodytok -> ^( LOCBODY locbodytok ) ;
// $ANTLR start "locbody"
locbody: function() {
this.traceIn("locbody", 120);
var retval = new Ham4Parser.locbody_return();
retval.start = this.input.LT(1);
var root_0 = null;
var locbodytok461 = null;
var stream_locbodytok=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule locbodytok");
this.trace("ANTLR Parse: locbody starts "+this.state.backtracking);
try {
// Ham4Parser.g:4203:5: ( locbodytok -> ^( LOCBODY locbodytok ) )
// Ham4Parser.g:4203:7: locbodytok
this.pushFollow(Ham4Parser.FOLLOW_locbodytok_in_locbody16534);
locbodytok461=this.locbodytok();
this.state._fsp--;
if (this.state.failed) return retval;
if ( this.state.backtracking===0 ) stream_locbodytok.add(locbodytok461.getTree());
// AST REWRITE
// elements: locbodytok
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
if ( this.state.backtracking===0 ) {
retval.tree = root_0;
var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
root_0 = this.adaptor.nil();
// 4204:7: -> ^( LOCBODY locbodytok )
{
// Ham4Parser.g:4204:10: ^( LOCBODY locbodytok )
{
var root_1 = this.adaptor.nil();
root_1 = this.adaptor.becomeRoot(this.adaptor.create(LOCBODY, "LOCBODY"), root_1);
this.adaptor.addChild(root_1, stream_locbodytok.nextTree());
this.adaptor.addChild(root_0, root_1);
}
}
retval.tree = root_0;}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locbody finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locbody", 120);
}
return retval;
},
// inline static return class
locsided_return: (function() {
Ham4Parser.locsided_return = function(){};
org.antlr.lang.extend(Ham4Parser.locsided_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4207:1: locsided : ( HamEar | HamEarlobe | HamCheek );
// $ANTLR start "locsided"
locsided: function() {
this.traceIn("locsided", 121);
var retval = new Ham4Parser.locsided_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set462 = null;
var set462_tree=null;
this.trace("ANTLR Parse: locsided starts "+this.state.backtracking);
try {
// Ham4Parser.g:4223:5: ( HamEar | HamEarlobe | HamCheek )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set462=this.input.LT(1);
if ( this.input.LA(1)==HamEarlobe||(this.input.LA(1)>=HamEar && this.input.LA(1)<=HamCheek) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set462));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: locsided finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("locsided", 121);
}
return retval;
},
// inline static return class
handpart_return: (function() {
Ham4Parser.handpart_return = function(){};
org.antlr.lang.extend(Ham4Parser.handpart_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4228:1: handpart : ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside );
// $ANTLR start "handpart"
handpart: function() {
this.traceIn("handpart", 122);
var retval = new Ham4Parser.handpart_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set463 = null;
var set463_tree=null;
this.trace("ANTLR Parse: handpart starts "+this.state.backtracking);
try {
// Ham4Parser.g:4248:5: ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set463=this.input.LT(1);
if ( (this.input.LA(1)>=HamWristback && this.input.LA(1)<=HamHandback)||(this.input.LA(1)>=HamThumbside && this.input.LA(1)<=HamPinkyside) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set463));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: handpart finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("handpart", 122);
}
return retval;
},
// inline static return class
side_return: (function() {
Ham4Parser.side_return = function(){};
org.antlr.lang.extend(Ham4Parser.side_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4257:1: side : ( HamLrbeside | HamLrat );
// $ANTLR start "side"
side: function() {
this.traceIn("side", 123);
var retval = new Ham4Parser.side_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set464 = null;
var set464_tree=null;
this.trace("ANTLR Parse: side starts "+this.state.backtracking);
try {
// Ham4Parser.g:4272:5: ( HamLrbeside | HamLrat )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set464=this.input.LT(1);
if ( (this.input.LA(1)>=HamLrbeside && this.input.LA(1)<=HamLrat) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set464));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: side finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("side", 123);
}
return retval;
},
// inline static return class
dorsalorpalmar_return: (function() {
Ham4Parser.dorsalorpalmar_return = function(){};
org.antlr.lang.extend(Ham4Parser.dorsalorpalmar_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4276:1: dorsalorpalmar : ( HamHandback | HamPalm );
// $ANTLR start "dorsalorpalmar"
dorsalorpalmar: function() {
this.traceIn("dorsalorpalmar", 124);
var retval = new Ham4Parser.dorsalorpalmar_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set465 = null;
var set465_tree=null;
this.trace("ANTLR Parse: dorsalorpalmar starts "+this.state.backtracking);
try {
// Ham4Parser.g:4291:5: ( HamHandback | HamPalm )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set465=this.input.LT(1);
if ( (this.input.LA(1)>=HamPalm && this.input.LA(1)<=HamHandback) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set465));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: dorsalorpalmar finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("dorsalorpalmar", 124);
}
return retval;
},
// inline static return class
pcontact_return: (function() {
Ham4Parser.pcontact_return = function(){};
org.antlr.lang.extend(Ham4Parser.pcontact_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4295:1: pcontact : ( HamTouch | HamClose );
// $ANTLR start "pcontact"
pcontact: function() {
this.traceIn("pcontact", 125);
var retval = new Ham4Parser.pcontact_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set466 = null;
var set466_tree=null;
this.trace("ANTLR Parse: pcontact starts "+this.state.backtracking);
try {
// Ham4Parser.g:4310:5: ( HamTouch | HamClose )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set466=this.input.LT(1);
if ( (this.input.LA(1)>=HamClose && this.input.LA(1)<=HamTouch) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set466));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: pcontact finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("pcontact", 125);
}
return retval;
},
// inline static return class
ccontact_return: (function() {
Ham4Parser.ccontact_return = function(){};
org.antlr.lang.extend(Ham4Parser.ccontact_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4314:1: ccontact : ( HamInterlock | HamCross );
// $ANTLR start "ccontact"
ccontact: function() {
this.traceIn("ccontact", 126);
var retval = new Ham4Parser.ccontact_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set467 = null;
var set467_tree=null;
this.trace("ANTLR Parse: ccontact starts "+this.state.backtracking);
try {
// Ham4Parser.g:4329:5: ( HamInterlock | HamCross )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set467=this.input.LT(1);
if ( (this.input.LA(1)>=HamInterlock && this.input.LA(1)<=HamCross) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set467));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: ccontact finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("ccontact", 126);
}
return retval;
},
// inline static return class
sizechange_return: (function() {
Ham4Parser.sizechange_return = function(){};
org.antlr.lang.extend(Ham4Parser.sizechange_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4336:1: sizechange : ( HamIncreasing | HamDecreasing );
// $ANTLR start "sizechange"
sizechange: function() {
this.traceIn("sizechange", 127);
var retval = new Ham4Parser.sizechange_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set468 = null;
var set468_tree=null;
this.trace("ANTLR Parse: sizechange starts "+this.state.backtracking);
try {
// Ham4Parser.g:4351:5: ( HamIncreasing | HamDecreasing )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set468=this.input.LT(1);
if ( (this.input.LA(1)>=HamIncreasing && this.input.LA(1)<=HamDecreasing) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set468));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: sizechange finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("sizechange", 127);
}
return retval;
},
// inline static return class
repetition_return: (function() {
Ham4Parser.repetition_return = function(){};
org.antlr.lang.extend(Ham4Parser.repetition_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4355:1: repetition : ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse );
// $ANTLR start "repetition"
repetition: function() {
this.traceIn("repetition", 128);
var retval = new Ham4Parser.repetition_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set469 = null;
var set469_tree=null;
this.trace("ANTLR Parse: repetition starts "+this.state.backtracking);
try {
// Ham4Parser.g:4373:5: ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set469=this.input.LT(1);
if ( (this.input.LA(1)>=HamRepeatfromstart && this.input.LA(1)<=HamRepeatcontinueseveral)||this.input.LA(1)==HamRepeatreverse ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set469));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: repetition finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("repetition", 128);
}
return retval;
},
// inline static return class
movementarrow_return: (function() {
Ham4Parser.movementarrow_return = function(){};
org.antlr.lang.extend(Ham4Parser.movementarrow_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4380:1: movementarrow : ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo );
// $ANTLR start "movementarrow"
movementarrow: function() {
this.traceIn("movementarrow", 129);
var retval = new Ham4Parser.movementarrow_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set470 = null;
var set470_tree=null;
this.trace("ANTLR Parse: movementarrow starts "+this.state.backtracking);
try {
// Ham4Parser.g:4411:5: ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set470=this.input.LT(1);
if ( (this.input.LA(1)>=HamMoveu && this.input.LA(1)<=HamMoveuo) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set470));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: movementarrow finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("movementarrow", 129);
}
return retval;
},
// inline static return class
movementcross_return: (function() {
Ham4Parser.movementcross_return = function(){};
org.antlr.lang.extend(Ham4Parser.movementcross_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4431:1: movementcross : ( HamMovecross | HamMovex );
// $ANTLR start "movementcross"
movementcross: function() {
this.traceIn("movementcross", 130);
var retval = new Ham4Parser.movementcross_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set471 = null;
var set471_tree=null;
this.trace("ANTLR Parse: movementcross starts "+this.state.backtracking);
try {
// Ham4Parser.g:4446:5: ( HamMovecross | HamMovex )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set471=this.input.LT(1);
if ( (this.input.LA(1)>=HamMovecross && this.input.LA(1)<=HamMovex) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set471));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: movementcross finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("movementcross", 130);
}
return retval;
},
// inline static return class
wristmovement_return: (function() {
Ham4Parser.wristmovement_return = function(){};
org.antlr.lang.extend(Ham4Parser.wristmovement_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4450:1: wristmovement : ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw );
// $ANTLR start "wristmovement"
wristmovement: function() {
this.traceIn("wristmovement", 131);
var retval = new Ham4Parser.wristmovement_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set472 = null;
var set472_tree=null;
this.trace("ANTLR Parse: wristmovement starts "+this.state.backtracking);
try {
// Ham4Parser.g:4468:5: ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set472=this.input.LT(1);
if ( (this.input.LA(1)>=HamNodding && this.input.LA(1)<=HamStirccw) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set472));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: wristmovement finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("wristmovement", 131);
}
return retval;
},
// inline static return class
movementcircle_return: (function() {
Ham4Parser.movementcircle_return = function(){};
org.antlr.lang.extend(Ham4Parser.movementcircle_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4475:1: movementcircle : ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo );
// $ANTLR start "movementcircle"
movementcircle: function() {
this.traceIn("movementcircle", 132);
var retval = new Ham4Parser.movementcircle_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set473 = null;
var set473_tree=null;
this.trace("ANTLR Parse: movementcircle starts "+this.state.backtracking);
try {
// Ham4Parser.g:4506:5: ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set473=this.input.LT(1);
if ( (this.input.LA(1)>=HamCircleo && this.input.LA(1)<=HamCircler)||(this.input.LA(1)>=HamCircleul && this.input.LA(1)<=HamCircleuo) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set473));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: movementcircle finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("movementcircle", 132);
}
return retval;
},
// inline static return class
ellipsedirection_return: (function() {
Ham4Parser.ellipsedirection_return = function(){};
org.antlr.lang.extend(Ham4Parser.ellipsedirection_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4526:1: ellipsedirection : ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul );
// $ANTLR start "ellipsedirection"
ellipsedirection: function() {
this.traceIn("ellipsedirection", 133);
var retval = new Ham4Parser.ellipsedirection_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set474 = null;
var set474_tree=null;
this.trace("ANTLR Parse: ellipsedirection starts "+this.state.backtracking);
try {
// Ham4Parser.g:4543:5: ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set474=this.input.LT(1);
if ( (this.input.LA(1)>=HamEllipseh && this.input.LA(1)<=HamEllipseul) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set474));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: ellipsedirection finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("ellipsedirection", 133);
}
return retval;
},
// inline static return class
clock_return: (function() {
Ham4Parser.clock_return = function(){};
org.antlr.lang.extend(Ham4Parser.clock_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4549:1: clock : ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur );
// $ANTLR start "clock"
clock: function() {
this.traceIn("clock", 134);
var retval = new Ham4Parser.clock_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set475 = null;
var set475_tree=null;
this.trace("ANTLR Parse: clock starts "+this.state.backtracking);
try {
// Ham4Parser.g:4570:5: ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set475=this.input.LT(1);
if ( (this.input.LA(1)>=HamClocku && this.input.LA(1)<=HamClockur) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set475));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: clock finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("clock", 134);
}
return retval;
},
// inline static return class
modifier_return: (function() {
Ham4Parser.modifier_return = function(){};
org.antlr.lang.extend(Ham4Parser.modifier_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4580:1: modifier : ( HamFast | HamSlow | HamTense | HamRest | HamHalt );
// $ANTLR start "modifier"
modifier: function() {
this.traceIn("modifier", 135);
var retval = new Ham4Parser.modifier_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set476 = null;
var set476_tree=null;
this.trace("ANTLR Parse: modifier starts "+this.state.backtracking);
try {
// Ham4Parser.g:4598:5: ( HamFast | HamSlow | HamTense | HamRest | HamHalt )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set476=this.input.LT(1);
if ( (this.input.LA(1)>=HamFast && this.input.LA(1)<=HamHalt) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set476));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: modifier finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("modifier", 135);
}
return retval;
},
// inline static return class
arc_return: (function() {
Ham4Parser.arc_return = function(){};
org.antlr.lang.extend(Ham4Parser.arc_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4605:1: arc : ( HamArcl | HamArcu | HamArcr | HamArcd );
// $ANTLR start "arc"
arc: function() {
this.traceIn("arc", 136);
var retval = new Ham4Parser.arc_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set477 = null;
var set477_tree=null;
this.trace("ANTLR Parse: arc starts "+this.state.backtracking);
try {
// Ham4Parser.g:4622:5: ( HamArcl | HamArcu | HamArcr | HamArcd )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set477=this.input.LT(1);
if ( (this.input.LA(1)>=HamArcl && this.input.LA(1)<=HamArcd) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set477));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: arc finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("arc", 136);
}
return retval;
},
// inline static return class
size_return: (function() {
Ham4Parser.size_return = function(){};
org.antlr.lang.extend(Ham4Parser.size_return,
org.antlr.runtime.ParserRuleReturnScope,
{
getTree: function() { return this.tree; }
});
return;
})(),
// Ham4Parser.g:4628:1: size : ( HamSmallmod | HamLargemod );
// $ANTLR start "size"
size: function() {
this.traceIn("size", 137);
var retval = new Ham4Parser.size_return();
retval.start = this.input.LT(1);
var root_0 = null;
var set478 = null;
var set478_tree=null;
this.trace("ANTLR Parse: size starts "+this.state.backtracking);
try {
// Ham4Parser.g:4643:5: ( HamSmallmod | HamLargemod )
// Ham4Parser.g:
root_0 = this.adaptor.nil();
set478=this.input.LT(1);
if ( (this.input.LA(1)>=HamSmallmod && this.input.LA(1)<=HamLargemod) ) {
this.input.consume();
if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set478));
this.state.errorRecovery=false;this.state.failed=false;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return retval;}
var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
throw mse;
}
retval.stop = this.input.LT(-1);
if ( this.state.backtracking===0 ) {
retval.tree = this.adaptor.rulePostProcessing(root_0);
this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
}
if ( this.state.backtracking===0 ) {
this.trace("ANTLR Parse: size finish "+this.state.backtracking);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
} else {
throw re;
}
}
finally {
this.traceOut("size", 137);
}
return retval;
},
// $ANTLR start "synpred1_Ham4Parser"
synpred1_Ham4Parser_fragment: function() {
this.traceIn("synpred1_Ham4Parser_fragment", 138);
try {
// Ham4Parser.g:282:9: ( HamNondominant initialconfig1 )
// Ham4Parser.g:282:11: HamNondominant initialconfig1
this.match(this.input,HamNondominant,Ham4Parser.FOLLOW_HamNondominant_in_synpred1_Ham4Parser946); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_initialconfig1_in_synpred1_Ham4Parser948);
this.initialconfig1();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred1_Ham4Parser_fragment", 138);
}},
// $ANTLR end "synpred1_Ham4Parser",
// $ANTLR start "synpred2_Ham4Parser"
synpred2_Ham4Parser_fragment: function() {
this.traceIn("synpred2_Ham4Parser_fragment", 139);
try {
// Ham4Parser.g:351:9: ( HamNomotion HamNondominant initialconfig1 )
// Ham4Parser.g:351:11: HamNomotion HamNondominant initialconfig1
this.match(this.input,HamNomotion,Ham4Parser.FOLLOW_HamNomotion_in_synpred2_Ham4Parser1136); if (this.state.failed) return ;
this.match(this.input,HamNondominant,Ham4Parser.FOLLOW_HamNondominant_in_synpred2_Ham4Parser1138); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_initialconfig1_in_synpred2_Ham4Parser1140);
this.initialconfig1();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred2_Ham4Parser_fragment", 139);
}},
// $ANTLR end "synpred2_Ham4Parser",
// $ANTLR start "synpred3_Ham4Parser"
synpred3_Ham4Parser_fragment: function() {
this.traceIn("synpred3_Ham4Parser_fragment", 140);
try {
// Ham4Parser.g:533:11: ( levelbody )
// Ham4Parser.g:533:13: levelbody
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_synpred3_Ham4Parser1836);
this.levelbody();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred3_Ham4Parser_fragment", 140);
}},
// $ANTLR end "synpred3_Ham4Parser",
// $ANTLR start "synpred4_Ham4Parser"
synpred4_Ham4Parser_fragment: function() {
this.traceIn("synpred4_Ham4Parser_fragment", 141);
try {
// Ham4Parser.g:590:9: ( handconfig2 )
// Ham4Parser.g:590:11: handconfig2
this.pushFollow(Ham4Parser.FOLLOW_handconfig2_in_synpred4_Ham4Parser1970);
this.handconfig2();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred4_Ham4Parser_fragment", 141);
}},
// $ANTLR end "synpred4_Ham4Parser",
// $ANTLR start "synpred5_Ham4Parser"
synpred5_Ham4Parser_fragment: function() {
this.traceIn("synpred5_Ham4Parser_fragment", 142);
try {
// Ham4Parser.g:594:13: ( location2 )
// Ham4Parser.g:594:15: location2
this.pushFollow(Ham4Parser.FOLLOW_location2_in_synpred5_Ham4Parser2018);
this.location2();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred5_Ham4Parser_fragment", 142);
}},
// $ANTLR end "synpred5_Ham4Parser",
// $ANTLR start "synpred6_Ham4Parser"
synpred6_Ham4Parser_fragment: function() {
this.traceIn("synpred6_Ham4Parser_fragment", 143);
try {
// Ham4Parser.g:603:13: ( HamPlus )
// Ham4Parser.g:603:15: HamPlus
this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_synpred6_Ham4Parser2131); if (this.state.failed) return ;
}
finally {
this.traceOut("synpred6_Ham4Parser_fragment", 143);
}},
// $ANTLR end "synpred6_Ham4Parser",
// $ANTLR start "synpred7_Ham4Parser"
synpred7_Ham4Parser_fragment: function() {
this.traceIn("synpred7_Ham4Parser_fragment", 144);
try {
// Ham4Parser.g:680:9: ( handshape2 ( HamParbegin )? extfidir1 )
// Ham4Parser.g:680:11: handshape2 ( HamParbegin )? extfidir1
this.pushFollow(Ham4Parser.FOLLOW_handshape2_in_synpred7_Ham4Parser2453);
this.handshape2();
this.state._fsp--;
if (this.state.failed) return ;
// Ham4Parser.g:680:22: ( HamParbegin )?
var alt174=2;
var LA174_0 = this.input.LA(1);
if ( (LA174_0==HamParbegin) ) {
alt174=1;
}
switch (alt174) {
case 1 :
// Ham4Parser.g:680:24: HamParbegin
this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_synpred7_Ham4Parser2457); if (this.state.failed) return ;
break;
}
this.pushFollow(Ham4Parser.FOLLOW_extfidir1_in_synpred7_Ham4Parser2462);
this.extfidir1();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred7_Ham4Parser_fragment", 144);
}},
// $ANTLR end "synpred7_Ham4Parser",
// $ANTLR start "synpred8_Ham4Parser"
synpred8_Ham4Parser_fragment: function() {
this.traceIn("synpred8_Ham4Parser_fragment", 145);
try {
// Ham4Parser.g:686:9: ( handshape2 )
// Ham4Parser.g:686:11: handshape2
this.pushFollow(Ham4Parser.FOLLOW_handshape2_in_synpred8_Ham4Parser2530);
this.handshape2();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred8_Ham4Parser_fragment", 145);
}},
// $ANTLR end "synpred8_Ham4Parser",
// $ANTLR start "synpred9_Ham4Parser"
synpred9_Ham4Parser_fragment: function() {
this.traceIn("synpred9_Ham4Parser_fragment", 146);
try {
// Ham4Parser.g:789:9: ( extfidir2 )
// Ham4Parser.g:789:11: extfidir2
this.pushFollow(Ham4Parser.FOLLOW_extfidir2_in_synpred9_Ham4Parser2859);
this.extfidir2();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred9_Ham4Parser_fragment", 146);
}},
// $ANTLR end "synpred9_Ham4Parser",
// $ANTLR start "synpred10_Ham4Parser"
synpred10_Ham4Parser_fragment: function() {
this.traceIn("synpred10_Ham4Parser_fragment", 147);
try {
// Ham4Parser.g:898:13: ( ( hsfingeritem )+ HamBetween finger )
// Ham4Parser.g:898:15: ( hsfingeritem )+ HamBetween finger
// Ham4Parser.g:898:15: ( hsfingeritem )+
var cnt175=0;
loop175:
do {
var alt175=2;
var LA175_0 = this.input.LA(1);
if ( ((LA175_0>=HamIndexfinger && LA175_0<=HamPinky)) ) {
alt175=1;
}
switch (alt175) {
case 1 :
// Ham4Parser.g:898:17: hsfingeritem
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_synpred10_Ham4Parser3231);
this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
if ( cnt175 >= 1 ) {
break loop175;
}
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var eee = new org.antlr.runtime.EarlyExitException(175, this.input);
throw eee;
}
cnt175++;
} while (true);
this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_synpred10_Ham4Parser3236); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_finger_in_synpred10_Ham4Parser3238);
this.finger();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred10_Ham4Parser_fragment", 147);
}},
// $ANTLR end "synpred10_Ham4Parser",
// $ANTLR start "synpred11_Ham4Parser"
synpred11_Ham4Parser_fragment: function() {
this.traceIn("synpred11_Ham4Parser_fragment", 148);
try {
// Ham4Parser.g:906:13: ( ( hsdigit )* ( fingerbending | fingerpart ) )
// Ham4Parser.g:906:15: ( hsdigit )* ( fingerbending | fingerpart )
// Ham4Parser.g:906:15: ( hsdigit )*
loop176:
do {
var alt176=2;
var LA176_0 = this.input.LA(1);
if ( ((LA176_0>=HamThumb && LA176_0<=HamPinky)) ) {
alt176=1;
}
switch (alt176) {
case 1 :
// Ham4Parser.g:906:17: hsdigit
this.pushFollow(Ham4Parser.FOLLOW_hsdigit_in_synpred11_Ham4Parser3351);
this.hsdigit();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
break loop176;
}
} while (true);
// Ham4Parser.g:906:28: ( fingerbending | fingerpart )
var alt177=2;
var LA177_0 = this.input.LA(1);
if ( ((LA177_0>=HamFingerstraightmod && LA177_0<=HamFingerhookedmod)||(LA177_0>=HamDoublebent && LA177_0<=HamDoublehooked)) ) {
alt177=1;
}
else if ( ((LA177_0>=HamFingertip && LA177_0<=HamFingerside)) ) {
alt177=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 177, 0, this.input);
throw nvae;
}
switch (alt177) {
case 1 :
// Ham4Parser.g:906:30: fingerbending
this.pushFollow(Ham4Parser.FOLLOW_fingerbending_in_synpred11_Ham4Parser3358);
this.fingerbending();
this.state._fsp--;
if (this.state.failed) return ;
break;
case 2 :
// Ham4Parser.g:906:46: fingerpart
this.pushFollow(Ham4Parser.FOLLOW_fingerpart_in_synpred11_Ham4Parser3362);
this.fingerpart();
this.state._fsp--;
if (this.state.failed) return ;
break;
}
}
finally {
this.traceOut("synpred11_Ham4Parser_fragment", 148);
}},
// $ANTLR end "synpred11_Ham4Parser",
// $ANTLR start "synpred12_Ham4Parser"
synpred12_Ham4Parser_fragment: function() {
this.traceIn("synpred12_Ham4Parser_fragment", 149);
try {
// Ham4Parser.g:911:15: ( thumbspecial )
// Ham4Parser.g:911:17: thumbspecial
this.pushFollow(Ham4Parser.FOLLOW_thumbspecial_in_synpred12_Ham4Parser3440);
this.thumbspecial();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred12_Ham4Parser_fragment", 149);
}},
// $ANTLR end "synpred12_Ham4Parser",
// $ANTLR start "synpred13_Ham4Parser"
synpred13_Ham4Parser_fragment: function() {
this.traceIn("synpred13_Ham4Parser_fragment", 150);
try {
// Ham4Parser.g:914:13: ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )
// Ham4Parser.g:914:15: ( hsfingeritem )* ( thumbbetweendefault | thumbextra )
// Ham4Parser.g:914:15: ( hsfingeritem )*
loop178:
do {
var alt178=2;
var LA178_0 = this.input.LA(1);
if ( ((LA178_0>=HamIndexfinger && LA178_0<=HamPinky)) ) {
alt178=1;
}
switch (alt178) {
case 1 :
// Ham4Parser.g:914:17: hsfingeritem
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_synpred13_Ham4Parser3490);
this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
break loop178;
}
} while (true);
// Ham4Parser.g:914:33: ( thumbbetweendefault | thumbextra )
var alt179=2;
var LA179_0 = this.input.LA(1);
if ( (LA179_0==HamBetween) ) {
alt179=1;
}
else if ( (LA179_0==HamThumb||(LA179_0>=HamFingertip && LA179_0<=HamFingerside)) ) {
alt179=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 179, 0, this.input);
throw nvae;
}
switch (alt179) {
case 1 :
// Ham4Parser.g:914:35: thumbbetweendefault
this.pushFollow(Ham4Parser.FOLLOW_thumbbetweendefault_in_synpred13_Ham4Parser3497);
this.thumbbetweendefault();
this.state._fsp--;
if (this.state.failed) return ;
break;
case 2 :
// Ham4Parser.g:914:57: thumbextra
this.pushFollow(Ham4Parser.FOLLOW_thumbextra_in_synpred13_Ham4Parser3501);
this.thumbextra();
this.state._fsp--;
if (this.state.failed) return ;
break;
}
}
finally {
this.traceOut("synpred13_Ham4Parser_fragment", 150);
}},
// $ANTLR end "synpred13_Ham4Parser",
// $ANTLR start "synpred14_Ham4Parser"
synpred14_Ham4Parser_fragment: function() {
this.traceIn("synpred14_Ham4Parser_fragment", 151);
try {
// Ham4Parser.g:956:13: ( HamBetween handshapeclass )
// Ham4Parser.g:956:15: HamBetween handshapeclass
this.match(this.input,HamBetween,Ham4Parser.FOLLOW_HamBetween_in_synpred14_Ham4Parser3784); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_handshapeclass_in_synpred14_Ham4Parser3786);
this.handshapeclass();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred14_Ham4Parser_fragment", 151);
}},
// $ANTLR end "synpred14_Ham4Parser",
// $ANTLR start "synpred15_Ham4Parser"
synpred15_Ham4Parser_fragment: function() {
this.traceIn("synpred15_Ham4Parser_fragment", 152);
try {
// Ham4Parser.g:1065:13: ( hsfingeritem )
// Ham4Parser.g:1065:15: hsfingeritem
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_synpred15_Ham4Parser4193);
this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred15_Ham4Parser_fragment", 152);
}},
// $ANTLR end "synpred15_Ham4Parser",
// $ANTLR start "synpred16_Ham4Parser"
synpred16_Ham4Parser_fragment: function() {
this.traceIn("synpred16_Ham4Parser_fragment", 153);
try {
// Ham4Parser.g:1113:13: ( hsfingeritem digit )
// Ham4Parser.g:1113:15: hsfingeritem digit
this.pushFollow(Ham4Parser.FOLLOW_hsfingeritem_in_synpred16_Ham4Parser4348);
this.hsfingeritem();
this.state._fsp--;
if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_digit_in_synpred16_Ham4Parser4350);
this.digit();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred16_Ham4Parser_fragment", 153);
}},
// $ANTLR end "synpred16_Ham4Parser",
// $ANTLR start "synpred17_Ham4Parser"
synpred17_Ham4Parser_fragment: function() {
this.traceIn("synpred17_Ham4Parser_fragment", 154);
try {
// Ham4Parser.g:1161:13: ( fingershape )
// Ham4Parser.g:1161:15: fingershape
this.pushFollow(Ham4Parser.FOLLOW_fingershape_in_synpred17_Ham4Parser4508);
this.fingershape();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred17_Ham4Parser_fragment", 154);
}},
// $ANTLR end "synpred17_Ham4Parser",
// $ANTLR start "synpred18_Ham4Parser"
synpred18_Ham4Parser_fragment: function() {
this.traceIn("synpred18_Ham4Parser_fragment", 155);
try {
// Ham4Parser.g:1209:13: ( fingercrossing )
// Ham4Parser.g:1209:15: fingercrossing
this.pushFollow(Ham4Parser.FOLLOW_fingercrossing_in_synpred18_Ham4Parser4663);
this.fingercrossing();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred18_Ham4Parser_fragment", 155);
}},
// $ANTLR end "synpred18_Ham4Parser",
// $ANTLR start "synpred19_Ham4Parser"
synpred19_Ham4Parser_fragment: function() {
this.traceIn("synpred19_Ham4Parser_fragment", 156);
try {
// Ham4Parser.g:1706:9: ( handconstellation )
// Ham4Parser.g:1706:11: handconstellation
this.pushFollow(Ham4Parser.FOLLOW_handconstellation_in_synpred19_Ham4Parser6111);
this.handconstellation();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred19_Ham4Parser_fragment", 156);
}},
// $ANTLR end "synpred19_Ham4Parser",
// $ANTLR start "synpred20_Ham4Parser"
synpred20_Ham4Parser_fragment: function() {
this.traceIn("synpred20_Ham4Parser_fragment", 157);
try {
// Ham4Parser.g:1754:9: ( locationindexuse )
// Ham4Parser.g:1754:11: locationindexuse
this.pushFollow(Ham4Parser.FOLLOW_locationindexuse_in_synpred20_Ham4Parser6359);
this.locationindexuse();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred20_Ham4Parser_fragment", 157);
}},
// $ANTLR end "synpred20_Ham4Parser",
// $ANTLR start "synpred21_Ham4Parser"
synpred21_Ham4Parser_fragment: function() {
this.traceIn("synpred21_Ham4Parser_fragment", 158);
try {
// Ham4Parser.g:1758:9: ( levelhand )
// Ham4Parser.g:1758:11: levelhand
this.pushFollow(Ham4Parser.FOLLOW_levelhand_in_synpred21_Ham4Parser6419);
this.levelhand();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred21_Ham4Parser_fragment", 158);
}},
// $ANTLR end "synpred21_Ham4Parser",
// $ANTLR start "synpred22_Ham4Parser"
synpred22_Ham4Parser_fragment: function() {
this.traceIn("synpred22_Ham4Parser_fragment", 159);
try {
// Ham4Parser.g:1839:9: ( levelbody )
// Ham4Parser.g:1839:11: levelbody
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_synpred22_Ham4Parser6650);
this.levelbody();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred22_Ham4Parser_fragment", 159);
}},
// $ANTLR end "synpred22_Ham4Parser",
// $ANTLR start "synpred23_Ham4Parser"
synpred23_Ham4Parser_fragment: function() {
this.traceIn("synpred23_Ham4Parser_fragment", 160);
try {
// Ham4Parser.g:1868:11: ( contactbody )
// Ham4Parser.g:1868:13: contactbody
this.pushFollow(Ham4Parser.FOLLOW_contactbody_in_synpred23_Ham4Parser6771);
this.contactbody();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred23_Ham4Parser_fragment", 160);
}},
// $ANTLR end "synpred23_Ham4Parser",
// $ANTLR start "synpred24_Ham4Parser"
synpred24_Ham4Parser_fragment: function() {
this.traceIn("synpred24_Ham4Parser_fragment", 161);
try {
// Ham4Parser.g:1891:11: ( contacthand )
// Ham4Parser.g:1891:12: contacthand
this.pushFollow(Ham4Parser.FOLLOW_contacthand_in_synpred24_Ham4Parser6857);
this.contacthand();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred24_Ham4Parser_fragment", 161);
}},
// $ANTLR end "synpred24_Ham4Parser",
// $ANTLR start "synpred25_Ham4Parser"
synpred25_Ham4Parser_fragment: function() {
this.traceIn("synpred25_Ham4Parser_fragment", 162);
try {
// Ham4Parser.g:1916:11: ( contactbody )
// Ham4Parser.g:1916:13: contactbody
this.pushFollow(Ham4Parser.FOLLOW_contactbody_in_synpred25_Ham4Parser6955);
this.contactbody();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred25_Ham4Parser_fragment", 162);
}},
// $ANTLR end "synpred25_Ham4Parser",
// $ANTLR start "synpred26_Ham4Parser"
synpred26_Ham4Parser_fragment: function() {
this.traceIn("synpred26_Ham4Parser_fragment", 163);
try {
// Ham4Parser.g:2274:13: ( levelhand )
// Ham4Parser.g:2274:15: levelhand
this.pushFollow(Ham4Parser.FOLLOW_levelhand_in_synpred26_Ham4Parser8384);
this.levelhand();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred26_Ham4Parser_fragment", 163);
}},
// $ANTLR end "synpred26_Ham4Parser",
// $ANTLR start "synpred27_Ham4Parser"
synpred27_Ham4Parser_fragment: function() {
this.traceIn("synpred27_Ham4Parser_fragment", 164);
try {
// Ham4Parser.g:2505:9: ( action1 location2not1 )
// Ham4Parser.g:2505:11: action1 location2not1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_synpred27_Ham4Parser9035);
this.action1();
this.state._fsp--;
if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_location2not1_in_synpred27_Ham4Parser9037);
this.location2not1();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred27_Ham4Parser_fragment", 164);
}},
// $ANTLR end "synpred27_Ham4Parser",
// $ANTLR start "synpred28_Ham4Parser"
synpred28_Ham4Parser_fragment: function() {
this.traceIn("synpred28_Ham4Parser_fragment", 165);
try {
// Ham4Parser.g:2512:9: ( action1t )
// Ham4Parser.g:2512:11: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_synpred28_Ham4Parser9121);
this.action1t();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred28_Ham4Parser_fragment", 165);
}},
// $ANTLR end "synpred28_Ham4Parser",
// $ANTLR start "synpred29_Ham4Parser"
synpred29_Ham4Parser_fragment: function() {
this.traceIn("synpred29_Ham4Parser_fragment", 166);
try {
// Ham4Parser.g:2518:13: ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )
// Ham4Parser.g:2518:15: HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2
this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_synpred29_Ham4Parser9194); if (this.state.failed) return ;
// Ham4Parser.g:2518:27: ( action1 )+
var cnt180=0;
loop180:
do {
var alt180=2;
alt180 = this.dfa180.predict(this.input);
switch (alt180) {
case 1 :
// Ham4Parser.g:2518:29: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_synpred29_Ham4Parser9198);
this.action1();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
if ( cnt180 >= 1 ) {
break loop180;
}
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var eee = new org.antlr.runtime.EarlyExitException(180, this.input);
throw eee;
}
cnt180++;
} while (true);
this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_synpred29_Ham4Parser9203); if (this.state.failed) return ;
// Ham4Parser.g:2519:15: ( action1 )+
var cnt181=0;
loop181:
do {
var alt181=2;
alt181 = this.dfa181.predict(this.input);
switch (alt181) {
case 1 :
// Ham4Parser.g:2519:17: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_synpred29_Ham4Parser9221);
this.action1();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
if ( cnt181 >= 1 ) {
break loop181;
}
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var eee = new org.antlr.runtime.EarlyExitException(181, this.input);
throw eee;
}
cnt181++;
} while (true);
this.match(this.input,HamParend,Ham4Parser.FOLLOW_HamParend_in_synpred29_Ham4Parser9226); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_location2_in_synpred29_Ham4Parser9228);
this.location2();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred29_Ham4Parser_fragment", 166);
}},
// $ANTLR end "synpred29_Ham4Parser",
// $ANTLR start "synpred30_Ham4Parser"
synpred30_Ham4Parser_fragment: function() {
this.traceIn("synpred30_Ham4Parser_fragment", 167);
try {
// Ham4Parser.g:2523:13: ( HamParbegin ( action1t )+ HamPlus )
// Ham4Parser.g:2523:15: HamParbegin ( action1t )+ HamPlus
this.match(this.input,HamParbegin,Ham4Parser.FOLLOW_HamParbegin_in_synpred30_Ham4Parser9284); if (this.state.failed) return ;
// Ham4Parser.g:2523:27: ( action1t )+
var cnt182=0;
loop182:
do {
var alt182=2;
alt182 = this.dfa182.predict(this.input);
switch (alt182) {
case 1 :
// Ham4Parser.g:2523:29: action1t
this.pushFollow(Ham4Parser.FOLLOW_action1t_in_synpred30_Ham4Parser9288);
this.action1t();
this.state._fsp--;
if (this.state.failed) return ;
break;
default :
if ( cnt182 >= 1 ) {
break loop182;
}
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var eee = new org.antlr.runtime.EarlyExitException(182, this.input);
throw eee;
}
cnt182++;
} while (true);
this.match(this.input,HamPlus,Ham4Parser.FOLLOW_HamPlus_in_synpred30_Ham4Parser9293); if (this.state.failed) return ;
}
finally {
this.traceOut("synpred30_Ham4Parser_fragment", 167);
}},
// $ANTLR end "synpred30_Ham4Parser",
// $ANTLR start "synpred31_Ham4Parser"
synpred31_Ham4Parser_fragment: function() {
this.traceIn("synpred31_Ham4Parser_fragment", 168);
try {
// Ham4Parser.g:2583:13: ( action1 )
// Ham4Parser.g:2583:15: action1
this.pushFollow(Ham4Parser.FOLLOW_action1_in_synpred31_Ham4Parser9507);
this.action1();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred31_Ham4Parser_fragment", 168);
}},
// $ANTLR end "synpred31_Ham4Parser",
// $ANTLR start "synpred32_Ham4Parser"
synpred32_Ham4Parser_fragment: function() {
this.traceIn("synpred32_Ham4Parser_fragment", 169);
try {
// Ham4Parser.g:2588:21: ( handconstellation )
// Ham4Parser.g:2588:23: handconstellation
this.pushFollow(Ham4Parser.FOLLOW_handconstellation_in_synpred32_Ham4Parser9597);
this.handconstellation();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred32_Ham4Parser_fragment", 169);
}},
// $ANTLR end "synpred32_Ham4Parser",
// $ANTLR start "synpred33_Ham4Parser"
synpred33_Ham4Parser_fragment: function() {
this.traceIn("synpred33_Ham4Parser_fragment", 170);
try {
// Ham4Parser.g:2664:9: ( HamSeqbegin digit )
// Ham4Parser.g:2664:11: HamSeqbegin digit
this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_synpred33_Ham4Parser10175); if (this.state.failed) return ;
this.pushFollow(Ham4Parser.FOLLOW_digit_in_synpred33_Ham4Parser10177);
this.digit();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred33_Ham4Parser_fragment", 170);
}},
// $ANTLR end "synpred33_Ham4Parser",
// $ANTLR start "synpred34_Ham4Parser"
synpred34_Ham4Parser_fragment: function() {
this.traceIn("synpred34_Ham4Parser_fragment", 171);
try {
// Ham4Parser.g:2912:15: ( levelbody )
// Ham4Parser.g:2912:17: levelbody
this.pushFollow(Ham4Parser.FOLLOW_levelbody_in_synpred34_Ham4Parser11042);
this.levelbody();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred34_Ham4Parser_fragment", 171);
}},
// $ANTLR end "synpred34_Ham4Parser",
// $ANTLR start "synpred35_Ham4Parser"
synpred35_Ham4Parser_fragment: function() {
this.traceIn("synpred35_Ham4Parser_fragment", 172);
try {
// Ham4Parser.g:3055:13: ( ( HamSeqbegin )? repetition | HamAlternatingmotion )
var alt184=2;
var LA184_0 = this.input.LA(1);
if ( ((LA184_0>=HamRepeatfromstart && LA184_0<=HamSeqbegin)||LA184_0==HamRepeatreverse) ) {
alt184=1;
}
else if ( (LA184_0==HamAlternatingmotion) ) {
alt184=2;
}
else {
if (this.state.backtracking>0) {this.state.failed=true; return ;}
var nvae =
new org.antlr.runtime.NoViableAltException("", 184, 0, this.input);
throw nvae;
}
switch (alt184) {
case 1 :
// Ham4Parser.g:3055:15: ( HamSeqbegin )? repetition
// Ham4Parser.g:3055:15: ( HamSeqbegin )?
var alt183=2;
var LA183_0 = this.input.LA(1);
if ( (LA183_0==HamSeqbegin) ) {
alt183=1;
}
switch (alt183) {
case 1 :
// Ham4Parser.g:3055:17: HamSeqbegin
this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_synpred35_Ham4Parser11629); if (this.state.failed) return ;
break;
}
this.pushFollow(Ham4Parser.FOLLOW_repetition_in_synpred35_Ham4Parser11634);
this.repetition();
this.state._fsp--;
if (this.state.failed) return ;
break;
case 2 :
// Ham4Parser.g:3055:45: HamAlternatingmotion
this.match(this.input,HamAlternatingmotion,Ham4Parser.FOLLOW_HamAlternatingmotion_in_synpred35_Ham4Parser11638); if (this.state.failed) return ;
break;
}
}
finally {
this.traceOut("synpred35_Ham4Parser_fragment", 172);
}},
// $ANTLR end "synpred35_Ham4Parser",
// $ANTLR start "synpred36_Ham4Parser"
synpred36_Ham4Parser_fragment: function() {
this.traceIn("synpred36_Ham4Parser_fragment", 173);
try {
// Ham4Parser.g:3108:9: ( HamSeqbegin HamRepeatfromstartseveral HamEtc )
// Ham4Parser.g:3108:11: HamSeqbegin HamRepeatfromstartseveral HamEtc
this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_synpred36_Ham4Parser11722); if (this.state.failed) return ;
this.match(this.input,HamRepeatfromstartseveral,Ham4Parser.FOLLOW_HamRepeatfromstartseveral_in_synpred36_Ham4Parser11724); if (this.state.failed) return ;
this.match(this.input,HamEtc,Ham4Parser.FOLLOW_HamEtc_in_synpred36_Ham4Parser11726); if (this.state.failed) return ;
}
finally {
this.traceOut("synpred36_Ham4Parser_fragment", 173);
}},
// $ANTLR end "synpred36_Ham4Parser",
// $ANTLR start "synpred37_Ham4Parser"
synpred37_Ham4Parser_fragment: function() {
this.traceIn("synpred37_Ham4Parser_fragment", 174);
try {
// Ham4Parser.g:3277:11: ( HamSeqbegin HamBrushing )
// Ham4Parser.g:3277:13: HamSeqbegin HamBrushing
this.match(this.input,HamSeqbegin,Ham4Parser.FOLLOW_HamSeqbegin_in_synpred37_Ham4Parser12701); if (this.state.failed) return ;
this.match(this.input,HamBrushing,Ham4Parser.FOLLOW_HamBrushing_in_synpred37_Ham4Parser12703); if (this.state.failed) return ;
}
finally {
this.traceOut("synpred37_Ham4Parser_fragment", 174);
}},
// $ANTLR end "synpred37_Ham4Parser",
// $ANTLR start "synpred38_Ham4Parser"
synpred38_Ham4Parser_fragment: function() {
this.traceIn("synpred38_Ham4Parser_fragment", 175);
try {
// Ham4Parser.g:3282:11: ( locationindexdefine )
// Ham4Parser.g:3282:13: locationindexdefine
this.pushFollow(Ham4Parser.FOLLOW_locationindexdefine_in_synpred38_Ham4Parser12798);
this.locationindexdefine();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred38_Ham4Parser_fragment", 175);
}},
// $ANTLR end "synpred38_Ham4Parser",
// $ANTLR start "synpred39_Ham4Parser"
synpred39_Ham4Parser_fragment: function() {
this.traceIn("synpred39_Ham4Parser_fragment", 176);
try {
// Ham4Parser.g:3548:17: ( splitreplacetail )
// Ham4Parser.g:3548:19: splitreplacetail
this.pushFollow(Ham4Parser.FOLLOW_splitreplacetail_in_synpred39_Ham4Parser13811);
this.splitreplacetail();
this.state._fsp--;
if (this.state.failed) return ;
}
finally {
this.traceOut("synpred39_Ham4Parser_fragment", 176);
}},
// $ANTLR end "synpred39_Ham4Parser"
// Delegated rules
synpred6_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred6_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred19_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred19_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred22_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred22_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred12_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred12_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred9_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred9_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred3_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred3_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred16_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred16_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred26_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred26_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred36_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred36_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred28_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred28_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred32_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred32_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred31_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred31_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred5_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred5_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred21_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred21_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred38_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred38_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred11_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred11_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred15_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred15_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred25_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred25_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred39_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred39_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred35_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred35_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred2_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred2_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred29_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred29_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred37_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred37_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred14_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred14_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred17_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred17_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred20_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred20_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred10_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred10_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred34_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred34_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred24_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred24_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred30_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred30_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred1_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred1_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred7_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred7_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred18_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred18_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred23_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred23_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred13_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred13_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred8_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred8_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred4_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred4_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred27_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred27_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
},
synpred33_Ham4Parser: function() {
this.state.backtracking++;
var start = this.input.mark();
try {
this.synpred33_Ham4Parser_fragment(); // can never throw exception
} catch (re) {
alert("impossible: "+re.toString());
}
var success = !this.state.failed;
this.input.rewind(start);
this.state.backtracking--;
this.state.failed=false;
return success;
}
}, true); // important to pass true to overwrite default implementations
org.antlr.lang.augmentObject(Ham4Parser, {
DFA13_eotS:
"\u0014\uffff",
DFA13_eofS:
"\u0014\uffff",
DFA13_minS:
"\u0001\u0043\u0011\uffff\u0001\u0000\u0001\uffff",
DFA13_maxS:
"\u0001\u006b\u0011\uffff\u0001\u0000\u0001\uffff",
DFA13_acceptS:
"\u0001\uffff\u0011\u0001\u0001\uffff\u0001\u0002",
DFA13_specialS:
"\u0001\u0000\u0011\uffff\u0001\u0001\u0001\uffff}>",
DFA13_transitionS: [
"\u0001\u0011\u0001\u0006\u0001\u000c\u000d\uffff\u0001\u0007"+
"\u0001\u0008\u0001\u000f\u0001\uffff\u0001\u0001\u0001\u0002"+
"\u0001\u0003\u0001\u0004\u0001\u0008\u0001\u0005\u0002\u0011"+
"\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000d"+
"\u0001\u000e\u0001\u0010\u0002\u0012\u0004\u0013",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA13_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA13_eotS),
DFA13_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA13_eofS),
DFA13_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA13_minS),
DFA13_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA13_maxS),
DFA13_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA13_acceptS),
DFA13_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA13_specialS),
DFA13_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA13_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA13_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA13 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 13;
this.eot = Ham4Parser.DFA13_eot;
this.eof = Ham4Parser.DFA13_eof;
this.min = Ham4Parser.DFA13_min;
this.max = Ham4Parser.DFA13_max;
this.accept = Ham4Parser.DFA13_accept;
this.special = Ham4Parser.DFA13_special;
this.transition = Ham4Parser.DFA13_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA13, org.antlr.runtime.DFA, {
getDescription: function() {
return "532:9: ( ( levelbody )=> levelbody | levelarm )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA13_0 = input.LA(1);
var index13_0 = input.index();
input.rewind();
s = -1;
if ( (LA13_0==HamHead) && (this.synpred3_Ham4Parser())) {s = 1;}
else if ( (LA13_0==HamHeadtop) && (this.synpred3_Ham4Parser())) {s = 2;}
else if ( (LA13_0==HamForehead) && (this.synpred3_Ham4Parser())) {s = 3;}
else if ( (LA13_0==HamEyebrows) && (this.synpred3_Ham4Parser())) {s = 4;}
else if ( (LA13_0==HamNose) && (this.synpred3_Ham4Parser())) {s = 5;}
else if ( (LA13_0==HamNostrils) && (this.synpred3_Ham4Parser())) {s = 6;}
else if ( (LA13_0==HamTongue) && (this.synpred3_Ham4Parser())) {s = 7;}
else if ( (LA13_0==HamTeeth||LA13_0==HamEyes||LA13_0==HamLips) && (this.synpred3_Ham4Parser())) {s = 8;}
else if ( (LA13_0==HamChin) && (this.synpred3_Ham4Parser())) {s = 9;}
else if ( (LA13_0==HamUnderchin) && (this.synpred3_Ham4Parser())) {s = 10;}
else if ( (LA13_0==HamNeck) && (this.synpred3_Ham4Parser())) {s = 11;}
else if ( (LA13_0==HamShouldertop) && (this.synpred3_Ham4Parser())) {s = 12;}
else if ( (LA13_0==HamShoulders) && (this.synpred3_Ham4Parser())) {s = 13;}
else if ( (LA13_0==HamChest) && (this.synpred3_Ham4Parser())) {s = 14;}
else if ( (LA13_0==HamStomach) && (this.synpred3_Ham4Parser())) {s = 15;}
else if ( (LA13_0==HamBelowstomach) && (this.synpred3_Ham4Parser())) {s = 16;}
else if ( (LA13_0==HamEarlobe||(LA13_0>=HamEar && LA13_0<=HamCheek)) && (this.synpred3_Ham4Parser())) {s = 17;}
else if ( ((LA13_0>=HamLrbeside && LA13_0<=HamLrat)) ) {s = 18;}
else if ( ((LA13_0>=HamUpperarm && LA13_0<=HamLowerarm)) ) {s = 19;}
input.seek(index13_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA13_18 = input.LA(1);
var index13_18 = input.index();
input.rewind();
s = -1;
if ( (this.synpred3_Ham4Parser()) ) {s = 17;}
else if ( (true) ) {s = 19;}
input.seek(index13_18);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 13, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA14_eotS:
"\u0027\uffff",
DFA14_eofS:
"\u0001\u001d\u0026\uffff",
DFA14_minS:
"\u0001\u000f\u0018\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u000a"+
"\uffff",
DFA14_maxS:
"\u0001\u00d9\u0018\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u000a"+
"\uffff",
DFA14_acceptS:
"\u0001\uffff\u0018\u0001\u0001\uffff\u0002\u0001\u0001\uffff\u0001"+
"\u0002\u0009\uffff",
DFA14_specialS:
"\u0001\u0000\u0018\uffff\u0001\u0001\u0002\uffff\u0001\u0002\u000a"+
"\uffff}>",
DFA14_transitionS: [
"\u0001\u001d\u0033\uffff\u0001\u0017\u0001\u000c\u0001\u0012"+
"\u0008\uffff\u0001\u001d\u0004\uffff\u0001\u000d\u0001\u000e"+
"\u0001\u0015\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009"+
"\u0001\u000a\u0001\u000e\u0001\u000b\u0002\u0017\u0001\u000e"+
"\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0013\u0001\u0014"+
"\u0001\u0016\u0002\u0005\u0004\u0018\u0005\u0003\u0001\u0001"+
"\u0004\u0002\u0002\u0003\u0001\uffff\u0006\u0004\u0006\uffff"+
"\u0015\u001d\u0008\uffff\u0001\u001d\u0001\u0019\u0001\uffff"+
"\u0006\u001d\u0002\uffff\u0002\u001a\u0002\u001b\u0009\uffff"+
"\u0001\u001c\u000c\uffff\u0006\u001d\u0001\uffff\u000c\u001d",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA14_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA14_eotS),
DFA14_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA14_eofS),
DFA14_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA14_minS),
DFA14_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA14_maxS),
DFA14_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA14_acceptS),
DFA14_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA14_specialS),
DFA14_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA14_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA14_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA14 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 14;
this.eot = Ham4Parser.DFA14_eot;
this.eof = Ham4Parser.DFA14_eof;
this.min = Ham4Parser.DFA14_min;
this.max = Ham4Parser.DFA14_max;
this.accept = Ham4Parser.DFA14_accept;
this.special = Ham4Parser.DFA14_special;
this.transition = Ham4Parser.DFA14_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA14, org.antlr.runtime.DFA, {
getDescription: function() {
return "593:9: ( ( location2 )=> location2 )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA14_0 = input.LA(1);
var index14_0 = input.index();
input.rewind();
s = -1;
if ( (LA14_0==HamThumb) && (this.synpred5_Ham4Parser())) {s = 1;}
else if ( ((LA14_0>=HamIndexfinger && LA14_0<=HamPinky)) && (this.synpred5_Ham4Parser())) {s = 2;}
else if ( ((LA14_0>=HamWristback && LA14_0<=HamHandback)||(LA14_0>=HamThumbside && LA14_0<=HamPinkyside)) && (this.synpred5_Ham4Parser())) {s = 3;}
else if ( ((LA14_0>=HamFingertip && LA14_0<=HamFingerside)) && (this.synpred5_Ham4Parser())) {s = 4;}
else if ( ((LA14_0>=HamLrbeside && LA14_0<=HamLrat)) && (this.synpred5_Ham4Parser())) {s = 5;}
else if ( (LA14_0==HamNeutralspace) && (this.synpred5_Ham4Parser())) {s = 6;}
else if ( (LA14_0==HamHead) && (this.synpred5_Ham4Parser())) {s = 7;}
else if ( (LA14_0==HamHeadtop) && (this.synpred5_Ham4Parser())) {s = 8;}
else if ( (LA14_0==HamForehead) && (this.synpred5_Ham4Parser())) {s = 9;}
else if ( (LA14_0==HamEyebrows) && (this.synpred5_Ham4Parser())) {s = 10;}
else if ( (LA14_0==HamNose) && (this.synpred5_Ham4Parser())) {s = 11;}
else if ( (LA14_0==HamNostrils) && (this.synpred5_Ham4Parser())) {s = 12;}
else if ( (LA14_0==HamTongue) && (this.synpred5_Ham4Parser())) {s = 13;}
else if ( (LA14_0==HamTeeth||LA14_0==HamEyes||LA14_0==HamLips) && (this.synpred5_Ham4Parser())) {s = 14;}
else if ( (LA14_0==HamChin) && (this.synpred5_Ham4Parser())) {s = 15;}
else if ( (LA14_0==HamUnderchin) && (this.synpred5_Ham4Parser())) {s = 16;}
else if ( (LA14_0==HamNeck) && (this.synpred5_Ham4Parser())) {s = 17;}
else if ( (LA14_0==HamShouldertop) && (this.synpred5_Ham4Parser())) {s = 18;}
else if ( (LA14_0==HamShoulders) && (this.synpred5_Ham4Parser())) {s = 19;}
else if ( (LA14_0==HamChest) && (this.synpred5_Ham4Parser())) {s = 20;}
else if ( (LA14_0==HamStomach) && (this.synpred5_Ham4Parser())) {s = 21;}
else if ( (LA14_0==HamBelowstomach) && (this.synpred5_Ham4Parser())) {s = 22;}
else if ( (LA14_0==HamEarlobe||(LA14_0>=HamEar && LA14_0<=HamCheek)) && (this.synpred5_Ham4Parser())) {s = 23;}
else if ( ((LA14_0>=HamUpperarm && LA14_0<=HamLowerarm)) && (this.synpred5_Ham4Parser())) {s = 24;}
else if ( (LA14_0==HamParbegin) ) {s = 25;}
else if ( ((LA14_0>=HamClose && LA14_0<=HamTouch)) && (this.synpred5_Ham4Parser())) {s = 26;}
else if ( ((LA14_0>=HamInterlock && LA14_0<=HamCross)) && (this.synpred5_Ham4Parser())) {s = 27;}
else if ( (LA14_0==HamSeqbegin) ) {s = 28;}
else if ( (LA14_0==EOF||LA14_0==HamPlus||LA14_0==HamReplace||(LA14_0>=HamNomotion && LA14_0<=HamMovex)||LA14_0==HamFingerplay||(LA14_0>=HamCircleo && LA14_0<=HamCircler)||(LA14_0>=HamNodding && LA14_0<=HamFusionbegin)||(LA14_0>=HamCircleul && LA14_0<=HamCircleuo)) ) {s = 29;}
input.seek(index14_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA14_25 = input.LA(1);
var index14_25 = input.index();
input.rewind();
s = -1;
if ( (this.synpred5_Ham4Parser()) ) {s = 27;}
else if ( (true) ) {s = 29;}
input.seek(index14_25);
if ( s>=0 ) return s;
break;
case 2 : 
var LA14_28 = input.LA(1);
var index14_28 = input.index();
input.rewind();
s = -1;
if ( (this.synpred5_Ham4Parser()) ) {s = 27;}
else if ( (true) ) {s = 29;}
input.seek(index14_28);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 14, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA16_eotS:
"\u001a\uffff",
DFA16_eofS:
"\u001a\uffff",
DFA16_minS:
"\u0001\u000f\u0019\uffff",
DFA16_maxS:
"\u0001\u007e\u0019\uffff",
DFA16_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0017\uffff",
DFA16_specialS:
"\u0001\u0000\u0019\uffff}>",
DFA16_transitionS: [
"\u0001\u0001\u0033\uffff\u0003\u0002\u000d\uffff\u0025\u0002"+
"\u0001\uffff\u0006\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA16_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA16_eotS),
DFA16_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA16_eofS),
DFA16_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA16_minS),
DFA16_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA16_maxS),
DFA16_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA16_acceptS),
DFA16_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA16_specialS),
DFA16_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA16_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA16_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA16 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 16;
this.eot = Ham4Parser.DFA16_eot;
this.eof = Ham4Parser.DFA16_eof;
this.min = Ham4Parser.DFA16_min;
this.max = Ham4Parser.DFA16_max;
this.accept = Ham4Parser.DFA16_accept;
this.special = Ham4Parser.DFA16_special;
this.transition = Ham4Parser.DFA16_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA16, org.antlr.runtime.DFA, {
getDescription: function() {
return "602:9: ( ( HamPlus )=> HamPlus location1 HamParend -> ^( MICFG2 handconfig1 HamPlus location1 ) | loc= location1 HamPlus (ploc= location1 )? HamParend -> ^( MICFG2 handconfig1 $loc HamPlus ( $ploc)? ) )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA16_0 = input.LA(1);
var index16_0 = input.index();
input.rewind();
s = -1;
if ( (LA16_0==HamPlus) && (this.synpred6_Ham4Parser())) {s = 1;}
else if ( ((LA16_0>=HamEarlobe && LA16_0<=HamShouldertop)||(LA16_0>=HamTongue && LA16_0<=HamPinkyside)||(LA16_0>=HamFingertip && LA16_0<=HamFingerside)) ) {s = 2;}
input.seek(index16_0);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 16, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA15_eotS:
"\u001a\uffff",
DFA15_eofS:
"\u001a\uffff",
DFA15_minS:
"\u0001\u0043\u0019\uffff",
DFA15_maxS:
"\u0001\u00a4\u0019\uffff",
DFA15_acceptS:
"\u0001\uffff\u0001\u0001\u0017\uffff\u0001\u0002",
DFA15_specialS:
"\u001a\uffff}>",
DFA15_transitionS: [
"\u0003\u0001\u000d\uffff\u0025\u0001\u0001\uffff\u0006\u0001"+
"\u0025\uffff\u0001\u0019",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA15_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA15_eotS),
DFA15_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA15_eofS),
DFA15_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA15_minS),
DFA15_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA15_maxS),
DFA15_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA15_acceptS),
DFA15_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA15_specialS),
DFA15_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA15_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA15_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA15 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 15;
this.eot = Ham4Parser.DFA15_eot;
this.eof = Ham4Parser.DFA15_eof;
this.min = Ham4Parser.DFA15_min;
this.max = Ham4Parser.DFA15_max;
this.accept = Ham4Parser.DFA15_accept;
this.special = Ham4Parser.DFA15_special;
this.transition = Ham4Parser.DFA15_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA15, org.antlr.runtime.DFA, {
getDescription: function() {
return "614:13: (ploc= location1 )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA18_eotS:
"\u0025\uffff",
DFA18_eofS:
"\u0001\u0019\u0024\uffff",
DFA18_minS:
"\u0001\u000f\u0024\uffff",
DFA18_maxS:
"\u0001\u00d9\u0024\uffff",
DFA18_acceptS:
"\u0001\uffff\u0001\u0001\u0017\uffff\u0001\u0002\u000b\uffff",
DFA18_specialS:
"\u0025\uffff}>",
DFA18_transitionS: [
"\u0001\u0019\u0033\uffff\u0003\u0001\u0008\uffff\u0001\u0019"+
"\u0004\uffff\u0025\u0001\u0001\uffff\u0006\u0001\u0006\uffff"+
"\u0015\u0019\u0008\uffff\u0002\u0019\u0001\uffff\u0006\u0019"+
"\u000f\uffff\u0001\u0019\u000c\uffff\u0006\u0019\u0001\uffff"+
"\u000c\u0019",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA18_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA18_eotS),
DFA18_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA18_eofS),
DFA18_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA18_minS),
DFA18_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA18_maxS),
DFA18_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA18_acceptS),
DFA18_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA18_specialS),
DFA18_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA18_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA18_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA18 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 18;
this.eot = Ham4Parser.DFA18_eot;
this.eof = Ham4Parser.DFA18_eof;
this.min = Ham4Parser.DFA18_min;
this.max = Ham4Parser.DFA18_max;
this.accept = Ham4Parser.DFA18_accept;
this.special = Ham4Parser.DFA18_special;
this.transition = Ham4Parser.DFA18_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA18, org.antlr.runtime.DFA, {
getDescription: function() {
return "641:9: ( location1 )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA21_eotS:
"\u0015\uffff",
DFA21_eofS:
"\u0015\uffff",
DFA21_minS:
"\u0001\u0031\u0012\uffff\u0001\u0000\u0001\uffff",
DFA21_maxS:
"\u0001\u00a3\u0012\uffff\u0001\u0000\u0001\uffff",
DFA21_acceptS:
"\u0001\uffff\u0012\u0001\u0001\uffff\u0001\u0002",
DFA21_specialS:
"\u0001\u0000\u0012\uffff\u0001\u0001\u0001\uffff}>",
DFA21_transitionS: [
"\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005"+
"\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a"+
"\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f"+
"\u0001\u0010\u0001\u0011\u0001\u0012\u0060\uffff\u0001\u0013",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA21_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA21_eotS),
DFA21_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA21_eofS),
DFA21_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA21_minS),
DFA21_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA21_maxS),
DFA21_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA21_acceptS),
DFA21_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA21_specialS),
DFA21_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA21_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA21_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA21 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 21;
this.eot = Ham4Parser.DFA21_eot;
this.eof = Ham4Parser.DFA21_eof;
this.min = Ham4Parser.DFA21_min;
this.max = Ham4Parser.DFA21_max;
this.accept = Ham4Parser.DFA21_accept;
this.special = Ham4Parser.DFA21_special;
this.transition = Ham4Parser.DFA21_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA21, org.antlr.runtime.DFA, {
getDescription: function() {
return "788:5: ( ( extfidir2 )=> extfidir2 palmor2 -> ^( HDCFGTAIL2 extfidir2 palmor2 ) | HamParbegin efd1= extfidir1 por1= palmor1 HamPlus efd2= extfidir1 por2= palmor1 HamParend -> ^( HDCFGTAIL2 $efd1 $por1 $efd2 $por2) )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA21_0 = input.LA(1);
var index21_0 = input.index();
input.rewind();
s = -1;
if ( (LA21_0==HamExtfingeru) && (this.synpred9_Ham4Parser())) {s = 1;}
else if ( (LA21_0==HamExtfingerur) && (this.synpred9_Ham4Parser())) {s = 2;}
else if ( (LA21_0==HamExtfingerr) && (this.synpred9_Ham4Parser())) {s = 3;}
else if ( (LA21_0==HamExtfingerdr) && (this.synpred9_Ham4Parser())) {s = 4;}
else if ( (LA21_0==HamExtfingerd) && (this.synpred9_Ham4Parser())) {s = 5;}
else if ( (LA21_0==HamExtfingerdl) && (this.synpred9_Ham4Parser())) {s = 6;}
else if ( (LA21_0==HamExtfingerl) && (this.synpred9_Ham4Parser())) {s = 7;}
else if ( (LA21_0==HamExtfingerul) && (this.synpred9_Ham4Parser())) {s = 8;}
else if ( (LA21_0==HamExtfingerol) && (this.synpred9_Ham4Parser())) {s = 9;}
else if ( (LA21_0==HamExtfingero) && (this.synpred9_Ham4Parser())) {s = 10;}
else if ( (LA21_0==HamExtfingeror) && (this.synpred9_Ham4Parser())) {s = 11;}
else if ( (LA21_0==HamExtfingeril) && (this.synpred9_Ham4Parser())) {s = 12;}
else if ( (LA21_0==HamExtfingeri) && (this.synpred9_Ham4Parser())) {s = 13;}
else if ( (LA21_0==HamExtfingerir) && (this.synpred9_Ham4Parser())) {s = 14;}
else if ( (LA21_0==HamExtfingerui) && (this.synpred9_Ham4Parser())) {s = 15;}
else if ( (LA21_0==HamExtfingerdi) && (this.synpred9_Ham4Parser())) {s = 16;}
else if ( (LA21_0==HamExtfingerdo) && (this.synpred9_Ham4Parser())) {s = 17;}
else if ( (LA21_0==HamExtfingeruo) && (this.synpred9_Ham4Parser())) {s = 18;}
else if ( (LA21_0==HamParbegin) ) {s = 19;}
input.seek(index21_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA21_19 = input.LA(1);
var index21_19 = input.index();
input.rewind();
s = -1;
if ( (this.synpred9_Ham4Parser()) ) {s = 18;}
else if ( (true) ) {s = 20;}
input.seek(index21_19);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 21, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA25_eotS:
"\u0045\uffff",
DFA25_eofS:
"\u0001\u0037\u0044\uffff",
DFA25_minS:
"\u0001\u000f\u0040\u0000\u0004\uffff",
DFA25_maxS:
"\u0001\u00d9\u0040\u0000\u0004\uffff",
DFA25_acceptS:
"\u0041\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004",
DFA25_specialS:
"\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
"\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
"\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
"\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
"\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
"\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
"\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
"\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001"+
"\u002e\u0001\u002f\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0033\u0001"+
"\u0034\u0001\u0035\u0001\u0036\u0001\u0037\u0001\u0038\u0001\u0039\u0001"+
"\u003a\u0001\u003b\u0001\u003c\u0001\u003d\u0001\u003e\u0001\u003f\u0004"+
"\uffff}>",
DFA25_transitionS: [
"\u0001\u0017\u0021\uffff\u0001\u0005\u0001\u0006\u0001\u0007"+
"\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c"+
"\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011"+
"\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016"+
"\u0001\u002b\u0001\u0020\u0001\u0026\u0008\u003b\u0001\u0032"+
"\u0004\uffff\u0001\u0021\u0001\u0022\u0001\u0029\u0001\u001a"+
"\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u0022"+
"\u0001\u001f\u0002\u002b\u0001\u0022\u0001\u0023\u0001\u0024"+
"\u0001\u0025\u0001\u0027\u0001\u0028\u0001\u002a\u0002\u0019"+
"\u0004\u002c\u0005\u0018\u0001\u0002\u0004\u0001\u0002\u0018"+
"\u0001\u0003\u0006\u0004\u0006\uffff\u0001\u002d\u0012\u002e"+
"\u0002\u0030\u0008\uffff\u0001\u0033\u0001\u0035\u0001\u0038"+
"\u0006\u002f\u0002\uffff\u0002\u0039\u0002\u003a\u0005\u003c"+
"\u0004\u003e\u0001\u0034\u0001\u003d\u0001\u003f\u0001\u003e"+
"\u0009\uffff\u0005\u0031\u0001\u0036\u0001\u0040\u000c\u002f",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA25_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA25_eotS),
DFA25_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA25_eofS),
DFA25_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA25_minS),
DFA25_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA25_maxS),
DFA25_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA25_acceptS),
DFA25_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA25_specialS),
DFA25_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA25_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA25_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA25 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 25;
this.eot = Ham4Parser.DFA25_eot;
this.eof = Ham4Parser.DFA25_eof;
this.min = Ham4Parser.DFA25_min;
this.max = Ham4Parser.DFA25_max;
this.accept = Ham4Parser.DFA25_accept;
this.special = Ham4Parser.DFA25_special;
this.transition = Ham4Parser.DFA25_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA25, org.antlr.runtime.DFA, {
getDescription: function() {
return "897:9: ( ( ( hsfingeritem )+ HamBetween finger )=> cautiousfingerlist fingershapelist fingercrossinglist thumbbetweenexplicit | ( ( hsdigit )* ( fingerbending | fingerpart ) )=> cautiousfingerlist fingershapelist fingercrossinglist ( ( thumbspecial )=> thumbspecial )? | ( ( hsfingeritem )* ( thumbbetweendefault | thumbextra ) )=> fingerlist fingershapelist fingercrossinglist ( thumbbetweendefault | thumbextra ) | fingerlist fingershapelist fingercrossinglist )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA25_1 = input.LA(1);
var index25_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred10_Ham4Parser()) ) {s = 65;}
else if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (this.synpred13_Ham4Parser()) ) {s = 67;}
else if ( (true) ) {s = 68;}
input.seek(index25_1);
if ( s>=0 ) return s;
break;
case 1 : 
var LA25_2 = input.LA(1);
var index25_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred10_Ham4Parser()) ) {s = 65;}
else if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (this.synpred13_Ham4Parser()) ) {s = 67;}
else if ( (true) ) {s = 68;}
input.seek(index25_2);
if ( s>=0 ) return s;
break;
case 2 : 
var LA25_3 = input.LA(1);
var index25_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (this.synpred13_Ham4Parser()) ) {s = 67;}
input.seek(index25_3);
if ( s>=0 ) return s;
break;
case 3 : 
var LA25_4 = input.LA(1);
var index25_4 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (this.synpred13_Ham4Parser()) ) {s = 67;}
else if ( (true) ) {s = 68;}
input.seek(index25_4);
if ( s>=0 ) return s;
break;
case 4 : 
var LA25_5 = input.LA(1);
var index25_5 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_5);
if ( s>=0 ) return s;
break;
case 5 : 
var LA25_6 = input.LA(1);
var index25_6 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_6);
if ( s>=0 ) return s;
break;
case 6 : 
var LA25_7 = input.LA(1);
var index25_7 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_7);
if ( s>=0 ) return s;
break;
case 7 : 
var LA25_8 = input.LA(1);
var index25_8 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_8);
if ( s>=0 ) return s;
break;
case 8 : 
var LA25_9 = input.LA(1);
var index25_9 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_9);
if ( s>=0 ) return s;
break;
case 9 : 
var LA25_10 = input.LA(1);
var index25_10 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_10);
if ( s>=0 ) return s;
break;
case 10 : 
var LA25_11 = input.LA(1);
var index25_11 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_11);
if ( s>=0 ) return s;
break;
case 11 : 
var LA25_12 = input.LA(1);
var index25_12 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_12);
if ( s>=0 ) return s;
break;
case 12 : 
var LA25_13 = input.LA(1);
var index25_13 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_13);
if ( s>=0 ) return s;
break;
case 13 : 
var LA25_14 = input.LA(1);
var index25_14 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_14);
if ( s>=0 ) return s;
break;
case 14 : 
var LA25_15 = input.LA(1);
var index25_15 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_15);
if ( s>=0 ) return s;
break;
case 15 : 
var LA25_16 = input.LA(1);
var index25_16 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_16);
if ( s>=0 ) return s;
break;
case 16 : 
var LA25_17 = input.LA(1);
var index25_17 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_17);
if ( s>=0 ) return s;
break;
case 17 : 
var LA25_18 = input.LA(1);
var index25_18 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_18);
if ( s>=0 ) return s;
break;
case 18 : 
var LA25_19 = input.LA(1);
var index25_19 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_19);
if ( s>=0 ) return s;
break;
case 19 : 
var LA25_20 = input.LA(1);
var index25_20 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_20);
if ( s>=0 ) return s;
break;
case 20 : 
var LA25_21 = input.LA(1);
var index25_21 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_21);
if ( s>=0 ) return s;
break;
case 21 : 
var LA25_22 = input.LA(1);
var index25_22 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_22);
if ( s>=0 ) return s;
break;
case 22 : 
var LA25_23 = input.LA(1);
var index25_23 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_23);
if ( s>=0 ) return s;
break;
case 23 : 
var LA25_24 = input.LA(1);
var index25_24 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_24);
if ( s>=0 ) return s;
break;
case 24 : 
var LA25_25 = input.LA(1);
var index25_25 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_25);
if ( s>=0 ) return s;
break;
case 25 : 
var LA25_26 = input.LA(1);
var index25_26 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_26);
if ( s>=0 ) return s;
break;
case 26 : 
var LA25_27 = input.LA(1);
var index25_27 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_27);
if ( s>=0 ) return s;
break;
case 27 : 
var LA25_28 = input.LA(1);
var index25_28 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_28);
if ( s>=0 ) return s;
break;
case 28 : 
var LA25_29 = input.LA(1);
var index25_29 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_29);
if ( s>=0 ) return s;
break;
case 29 : 
var LA25_30 = input.LA(1);
var index25_30 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_30);
if ( s>=0 ) return s;
break;
case 30 : 
var LA25_31 = input.LA(1);
var index25_31 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_31);
if ( s>=0 ) return s;
break;
case 31 : 
var LA25_32 = input.LA(1);
var index25_32 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_32);
if ( s>=0 ) return s;
break;
case 32 : 
var LA25_33 = input.LA(1);
var index25_33 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_33);
if ( s>=0 ) return s;
break;
case 33 : 
var LA25_34 = input.LA(1);
var index25_34 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_34);
if ( s>=0 ) return s;
break;
case 34 : 
var LA25_35 = input.LA(1);
var index25_35 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_35);
if ( s>=0 ) return s;
break;
case 35 : 
var LA25_36 = input.LA(1);
var index25_36 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_36);
if ( s>=0 ) return s;
break;
case 36 : 
var LA25_37 = input.LA(1);
var index25_37 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_37);
if ( s>=0 ) return s;
break;
case 37 : 
var LA25_38 = input.LA(1);
var index25_38 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_38);
if ( s>=0 ) return s;
break;
case 38 : 
var LA25_39 = input.LA(1);
var index25_39 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_39);
if ( s>=0 ) return s;
break;
case 39 : 
var LA25_40 = input.LA(1);
var index25_40 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_40);
if ( s>=0 ) return s;
break;
case 40 : 
var LA25_41 = input.LA(1);
var index25_41 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_41);
if ( s>=0 ) return s;
break;
case 41 : 
var LA25_42 = input.LA(1);
var index25_42 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_42);
if ( s>=0 ) return s;
break;
case 42 : 
var LA25_43 = input.LA(1);
var index25_43 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_43);
if ( s>=0 ) return s;
break;
case 43 : 
var LA25_44 = input.LA(1);
var index25_44 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_44);
if ( s>=0 ) return s;
break;
case 44 : 
var LA25_45 = input.LA(1);
var index25_45 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_45);
if ( s>=0 ) return s;
break;
case 45 : 
var LA25_46 = input.LA(1);
var index25_46 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_46);
if ( s>=0 ) return s;
break;
case 46 : 
var LA25_47 = input.LA(1);
var index25_47 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_47);
if ( s>=0 ) return s;
break;
case 47 : 
var LA25_48 = input.LA(1);
var index25_48 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_48);
if ( s>=0 ) return s;
break;
case 48 : 
var LA25_49 = input.LA(1);
var index25_49 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_49);
if ( s>=0 ) return s;
break;
case 49 : 
var LA25_50 = input.LA(1);
var index25_50 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_50);
if ( s>=0 ) return s;
break;
case 50 : 
var LA25_51 = input.LA(1);
var index25_51 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_51);
if ( s>=0 ) return s;
break;
case 51 : 
var LA25_52 = input.LA(1);
var index25_52 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_52);
if ( s>=0 ) return s;
break;
case 52 : 
var LA25_53 = input.LA(1);
var index25_53 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_53);
if ( s>=0 ) return s;
break;
case 53 : 
var LA25_54 = input.LA(1);
var index25_54 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_54);
if ( s>=0 ) return s;
break;
case 54 : 
var LA25_55 = input.LA(1);
var index25_55 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_55);
if ( s>=0 ) return s;
break;
case 55 : 
var LA25_56 = input.LA(1);
var index25_56 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_56);
if ( s>=0 ) return s;
break;
case 56 : 
var LA25_57 = input.LA(1);
var index25_57 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_57);
if ( s>=0 ) return s;
break;
case 57 : 
var LA25_58 = input.LA(1);
var index25_58 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_58);
if ( s>=0 ) return s;
break;
case 58 : 
var LA25_59 = input.LA(1);
var index25_59 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_59);
if ( s>=0 ) return s;
break;
case 59 : 
var LA25_60 = input.LA(1);
var index25_60 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_60);
if ( s>=0 ) return s;
break;
case 60 : 
var LA25_61 = input.LA(1);
var index25_61 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_61);
if ( s>=0 ) return s;
break;
case 61 : 
var LA25_62 = input.LA(1);
var index25_62 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_62);
if ( s>=0 ) return s;
break;
case 62 : 
var LA25_63 = input.LA(1);
var index25_63 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_63);
if ( s>=0 ) return s;
break;
case 63 : 
var LA25_64 = input.LA(1);
var index25_64 = input.index();
input.rewind();
s = -1;
if ( (this.synpred11_Ham4Parser()) ) {s = 66;}
else if ( (true) ) {s = 68;}
input.seek(index25_64);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 25, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA23_eotS:
"\u0041\uffff",
DFA23_eofS:
"\u0001\u0005\u0040\uffff",
DFA23_minS:
"\u0001\u000f\u0001\u0000\u0001\uffff\u0002\u0000\u003c\uffff",
DFA23_maxS:
"\u0001\u00d9\u0001\u0000\u0001\uffff\u0002\u0000\u003c\uffff",
DFA23_acceptS:
"\u0002\uffff\u0001\u0001\u0002\uffff\u0001\u0002\u003b\uffff",
DFA23_specialS:
"\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001\u0003\u003c"+
"\uffff}>",
DFA23_transitionS: [
"\u0001\u0005\u0021\uffff\u001e\u0005\u0004\uffff\u001e\u0005"+
"\u0001\u0003\u0004\u0001\u0002\u0005\u0001\u0002\u0006\u0004"+
"\u0006\uffff\u0015\u0005\u0008\uffff\u0009\u0005\u0002\uffff"+
"\u0011\u0005\u0009\uffff\u0013\u0005",
"\u0001\uffff",
"",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA23_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA23_eotS),
DFA23_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA23_eofS),
DFA23_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA23_minS),
DFA23_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA23_maxS),
DFA23_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA23_acceptS),
DFA23_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA23_specialS),
DFA23_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA23_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA23_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA23 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 23;
this.eot = Ham4Parser.DFA23_eot;
this.eof = Ham4Parser.DFA23_eof;
this.min = Ham4Parser.DFA23_min;
this.max = Ham4Parser.DFA23_max;
this.accept = Ham4Parser.DFA23_accept;
this.special = Ham4Parser.DFA23_special;
this.transition = Ham4Parser.DFA23_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA23, org.antlr.runtime.DFA, {
getDescription: function() {
return "911:13: ( ( thumbspecial )=> thumbspecial )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA23_0 = input.LA(1);
var index23_0 = input.index();
input.rewind();
s = -1;
if ( ((LA23_0>=HamIndexfinger && LA23_0<=HamPinky)) ) {s = 1;}
else if ( (LA23_0==HamBetween) && (this.synpred12_Ham4Parser())) {s = 2;}
else if ( (LA23_0==HamThumb) ) {s = 3;}
else if ( ((LA23_0>=HamFingertip && LA23_0<=HamFingerside)) ) {s = 4;}
else if ( (LA23_0==EOF||LA23_0==HamPlus||(LA23_0>=HamExtfingeru && LA23_0<=HamReplace)||(LA23_0>=HamTongue && LA23_0<=HamHandback)||(LA23_0>=HamThumbside && LA23_0<=HamPinkyside)||(LA23_0>=HamNomotion && LA23_0<=HamMovex)||(LA23_0>=HamFingerplay && LA23_0<=HamCircler)||(LA23_0>=HamClose && LA23_0<=HamRepeatreverse)||(LA23_0>=HamNodding && LA23_0<=HamCircleuo)) ) {s = 5;}
input.seek(index23_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA23_1 = input.LA(1);
var index23_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred12_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 5;}
input.seek(index23_1);
if ( s>=0 ) return s;
break;
case 2 : 
var LA23_3 = input.LA(1);
var index23_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred12_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 5;}
input.seek(index23_3);
if ( s>=0 ) return s;
break;
case 3 : 
var LA23_4 = input.LA(1);
var index23_4 = input.index();
input.rewind();
s = -1;
if ( (this.synpred12_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 5;}
input.seek(index23_4);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 23, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA26_eotS:
"\u0042\uffff",
DFA26_eofS:
"\u0001\u0002\u0041\uffff",
DFA26_minS:
"\u0001\u000f\u0001\u0000\u0040\uffff",
DFA26_maxS:
"\u0001\u00d9\u0001\u0000\u0040\uffff",
DFA26_acceptS:
"\u0002\uffff\u0001\u0002\u003e\uffff\u0001\u0001",
DFA26_specialS:
"\u0001\uffff\u0001\u0000\u0040\uffff}>",
DFA26_transitionS: [
"\u0001\u0002\u0021\uffff\u001e\u0002\u0004\uffff\u0025\u0002"+
"\u0001\u0001\u0006\u0002\u0006\uffff\u0015\u0002\u0008\uffff"+
"\u0009\u0002\u0002\uffff\u0011\u0002\u0009\uffff\u0013\u0002",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA26_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA26_eotS),
DFA26_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA26_eofS),
DFA26_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA26_minS),
DFA26_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA26_maxS),
DFA26_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA26_acceptS),
DFA26_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA26_specialS),
DFA26_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA26_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA26_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA26 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 26;
this.eot = Ham4Parser.DFA26_eot;
this.eof = Ham4Parser.DFA26_eof;
this.min = Ham4Parser.DFA26_min;
this.max = Ham4Parser.DFA26_max;
this.accept = Ham4Parser.DFA26_accept;
this.special = Ham4Parser.DFA26_special;
this.transition = Ham4Parser.DFA26_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA26, org.antlr.runtime.DFA, {
getDescription: function() {
return "955:9: ( ( HamBetween handshapeclass )=> HamBetween basichandshape )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA26_1 = input.LA(1);
var index26_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred14_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 2;}
input.seek(index26_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 26, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA33_eotS:
"\u0042\uffff",
DFA33_eofS:
"\u0001\u0002\u0041\uffff",
DFA33_minS:
"\u0001\u000f\u0001\u0000\u0040\uffff",
DFA33_maxS:
"\u0001\u00d9\u0001\u0000\u0040\uffff",
DFA33_acceptS:
"\u0002\uffff\u0001\u0002\u003e\uffff\u0001\u0001",
DFA33_specialS:
"\u0001\uffff\u0001\u0000\u0040\uffff}>",
DFA33_transitionS: [
"\u0001\u0002\u0021\uffff\u001e\u0002\u0004\uffff\u001f\u0002"+
"\u0004\u0001\u0009\u0002\u0006\uffff\u0015\u0002\u0008\uffff"+
"\u0009\u0002\u0002\uffff\u0011\u0002\u0009\uffff\u0013\u0002",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA33_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA33_eotS),
DFA33_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA33_eofS),
DFA33_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA33_minS),
DFA33_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA33_maxS),
DFA33_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA33_acceptS),
DFA33_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA33_specialS),
DFA33_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA33_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA33_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA33 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 33;
this.eot = Ham4Parser.DFA33_eot;
this.eof = Ham4Parser.DFA33_eof;
this.min = Ham4Parser.DFA33_min;
this.max = Ham4Parser.DFA33_max;
this.accept = Ham4Parser.DFA33_accept;
this.special = Ham4Parser.DFA33_special;
this.transition = Ham4Parser.DFA33_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA33, org.antlr.runtime.DFA, {
getDescription: function() {
return "1064:9: ( ( hsfingeritem )=> hsfingeritem recfingerlist )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA33_1 = input.LA(1);
var index33_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred15_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 2;}
input.seek(index33_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 33, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA34_eotS:
"\u0042\uffff",
DFA34_eofS:
"\u0001\u0002\u0041\uffff",
DFA34_minS:
"\u0001\u000f\u0001\u0000\u0040\uffff",
DFA34_maxS:
"\u0001\u00d9\u0001\u0000\u0040\uffff",
DFA34_acceptS:
"\u0002\uffff\u0001\u0002\u003e\uffff\u0001\u0001",
DFA34_specialS:
"\u0001\uffff\u0001\u0000\u0040\uffff}>",
DFA34_transitionS: [
"\u0001\u0002\u0021\uffff\u001e\u0002\u0004\uffff\u001f\u0002"+
"\u0004\u0001\u0009\u0002\u0006\uffff\u0015\u0002\u0008\uffff"+
"\u0009\u0002\u0002\uffff\u0011\u0002\u0009\uffff\u0013\u0002",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA34_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA34_eotS),
DFA34_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA34_eofS),
DFA34_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA34_minS),
DFA34_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA34_maxS),
DFA34_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA34_acceptS),
DFA34_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA34_specialS),
DFA34_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA34_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA34_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA34 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 34;
this.eot = Ham4Parser.DFA34_eot;
this.eof = Ham4Parser.DFA34_eof;
this.min = Ham4Parser.DFA34_min;
this.max = Ham4Parser.DFA34_max;
this.accept = Ham4Parser.DFA34_accept;
this.special = Ham4Parser.DFA34_special;
this.transition = Ham4Parser.DFA34_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA34, org.antlr.runtime.DFA, {
getDescription: function() {
return "1112:9: ( ( hsfingeritem digit )=> hsfingeritem reccautiousfingerlist )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA34_1 = input.LA(1);
var index34_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred16_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 2;}
input.seek(index34_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 34, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA35_eotS:
"\u0042\uffff",
DFA35_eofS:
"\u0001\u0003\u0041\uffff",
DFA35_minS:
"\u0001\u000f\u0002\u0000\u003f\uffff",
DFA35_maxS:
"\u0001\u00d9\u0002\u0000\u003f\uffff",
DFA35_acceptS:
"\u0003\uffff\u0001\u0002\u003d\uffff\u0001\u0001",
DFA35_specialS:
"\u0001\uffff\u0001\u0000\u0001\u0001\u003f\uffff}>",
DFA35_transitionS: [
"\u0001\u0003\u0021\uffff\u001e\u0003\u0004\uffff\u001e\u0003"+
"\u0001\u0001\u0004\u0002\u0009\u0003\u0006\uffff\u0015\u0003"+
"\u0008\uffff\u0009\u0003\u0002\uffff\u0011\u0003\u0009\uffff"+
"\u0013\u0003",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA35_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA35_eotS),
DFA35_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA35_eofS),
DFA35_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA35_minS),
DFA35_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA35_maxS),
DFA35_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA35_acceptS),
DFA35_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA35_specialS),
DFA35_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA35_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA35_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA35 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 35;
this.eot = Ham4Parser.DFA35_eot;
this.eof = Ham4Parser.DFA35_eof;
this.min = Ham4Parser.DFA35_min;
this.max = Ham4Parser.DFA35_max;
this.accept = Ham4Parser.DFA35_accept;
this.special = Ham4Parser.DFA35_special;
this.transition = Ham4Parser.DFA35_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA35, org.antlr.runtime.DFA, {
getDescription: function() {
return "1160:9: ( ( fingershape )=> fingershape recfingershapelist )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA35_1 = input.LA(1);
var index35_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred17_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 3;}
input.seek(index35_1);
if ( s>=0 ) return s;
break;
case 1 : 
var LA35_2 = input.LA(1);
var index35_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred17_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 3;}
input.seek(index35_2);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 35, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA36_eotS:
"\u0042\uffff",
DFA36_eofS:
"\u0001\u0003\u0041\uffff",
DFA36_minS:
"\u0001\u000f\u0002\u0000\u003f\uffff",
DFA36_maxS:
"\u0001\u00d9\u0002\u0000\u003f\uffff",
DFA36_acceptS:
"\u0003\uffff\u0001\u0002\u003d\uffff\u0001\u0001",
DFA36_specialS:
"\u0001\uffff\u0001\u0000\u0001\u0001\u003f\uffff}>",
DFA36_transitionS: [
"\u0001\u0003\u0021\uffff\u001e\u0003\u0004\uffff\u001e\u0003"+
"\u0001\u0001\u0004\u0002\u0009\u0003\u0006\uffff\u0015\u0003"+
"\u0008\uffff\u0009\u0003\u0002\uffff\u0011\u0003\u0009\uffff"+
"\u0013\u0003",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA36_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA36_eotS),
DFA36_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA36_eofS),
DFA36_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA36_minS),
DFA36_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA36_maxS),
DFA36_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA36_acceptS),
DFA36_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA36_specialS),
DFA36_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA36_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA36_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA36 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 36;
this.eot = Ham4Parser.DFA36_eot;
this.eof = Ham4Parser.DFA36_eof;
this.min = Ham4Parser.DFA36_min;
this.max = Ham4Parser.DFA36_max;
this.accept = Ham4Parser.DFA36_accept;
this.special = Ham4Parser.DFA36_special;
this.transition = Ham4Parser.DFA36_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA36, org.antlr.runtime.DFA, {
getDescription: function() {
return "1208:9: ( ( fingercrossing )=> fingercrossing recfingercrossinglist )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA36_1 = input.LA(1);
var index36_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred18_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 3;}
input.seek(index36_1);
if ( s>=0 ) return s;
break;
case 1 : 
var LA36_2 = input.LA(1);
var index36_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred18_Ham4Parser()) ) {s = 65;}
else if ( (true) ) {s = 3;}
input.seek(index36_2);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 36, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA49_eotS:
"\u001d\uffff",
DFA49_eofS:
"\u001d\uffff",
DFA49_minS:
"\u0001\u0043\u001c\uffff",
DFA49_maxS:
"\u0001\u00ba\u001c\uffff",
DFA49_acceptS:
"\u0001\uffff\u0001\u0001\u0017\uffff\u0001\u0002\u0003\uffff",
DFA49_specialS:
"\u001d\uffff}>",
DFA49_transitionS: [
"\u0003\u0001\u000d\uffff\u0025\u0001\u0001\uffff\u0006\u0001"+
"\u0024\uffff\u0001\u0019\u0009\uffff\u0004\u0019\u0009\uffff"+
"\u0001\u0019",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA49_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA49_eotS),
DFA49_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA49_eofS),
DFA49_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA49_minS),
DFA49_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA49_maxS),
DFA49_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA49_acceptS),
DFA49_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA49_specialS),
DFA49_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA49_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA49_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA49 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 49;
this.eot = Ham4Parser.DFA49_eot;
this.eof = Ham4Parser.DFA49_eof;
this.min = Ham4Parser.DFA49_min;
this.max = Ham4Parser.DFA49_max;
this.accept = Ham4Parser.DFA49_accept;
this.special = Ham4Parser.DFA49_special;
this.transition = Ham4Parser.DFA49_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA49, org.antlr.runtime.DFA, {
getDescription: function() {
return "1645:5: ( location1as2 | location2not1 )";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA54_eotS:
"\u001a\uffff",
DFA54_eofS:
"\u001a\uffff",
DFA54_minS:
"\u0001\u0043\u0002\u0000\u0002\uffff\u0001\u0000\u0014\uffff",
DFA54_maxS:
"\u0001\u007e\u0002\u0000\u0002\uffff\u0001\u0000\u0014\uffff",
DFA54_acceptS:
"\u0003\uffff\u0002\u0002\u0001\uffff\u0001\u0003\u0012\uffff\u0001"+
"\u0001",
DFA54_specialS:
"\u0001\u0000\u0001\u0001\u0001\u0002\u0002\uffff\u0001\u0003\u0014"+
"\uffff}>",
DFA54_transitionS: [
"\u0003\u0006\u000d\uffff\u0013\u0006\u0002\u0005\u0004\u0006"+
"\u0005\u0003\u0001\u0001\u0004\u0002\u0002\u0003\u0001\uffff"+
"\u0006\u0004",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA54_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA54_eotS),
DFA54_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA54_eofS),
DFA54_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA54_minS),
DFA54_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA54_maxS),
DFA54_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA54_acceptS),
DFA54_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA54_specialS),
DFA54_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA54_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA54_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA54 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 54;
this.eot = Ham4Parser.DFA54_eot;
this.eof = Ham4Parser.DFA54_eof;
this.min = Ham4Parser.DFA54_min;
this.max = Ham4Parser.DFA54_max;
this.accept = Ham4Parser.DFA54_accept;
this.special = Ham4Parser.DFA54_special;
this.transition = Ham4Parser.DFA54_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA54, org.antlr.runtime.DFA, {
getDescription: function() {
return "1753:5: ( ( locationindexuse )=> locationindexuse | ( levelhand )=> locationhand | locationbodyarm )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA54_0 = input.LA(1);
var index54_0 = input.index();
input.rewind();
s = -1;
if ( (LA54_0==HamThumb) ) {s = 1;}
else if ( ((LA54_0>=HamIndexfinger && LA54_0<=HamPinky)) ) {s = 2;}
else if ( ((LA54_0>=HamWristback && LA54_0<=HamHandback)||(LA54_0>=HamThumbside && LA54_0<=HamPinkyside)) && (this.synpred21_Ham4Parser())) {s = 3;}
else if ( ((LA54_0>=HamFingertip && LA54_0<=HamFingerside)) && (this.synpred21_Ham4Parser())) {s = 4;}
else if ( ((LA54_0>=HamLrbeside && LA54_0<=HamLrat)) ) {s = 5;}
else if ( ((LA54_0>=HamEarlobe && LA54_0<=HamShouldertop)||(LA54_0>=HamTongue && LA54_0<=HamBelowstomach)||(LA54_0>=HamUpperarm && LA54_0<=HamLowerarm)) ) {s = 6;}
input.seek(index54_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA54_1 = input.LA(1);
var index54_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred20_Ham4Parser()) ) {s = 25;}
else if ( (this.synpred21_Ham4Parser()) ) {s = 4;}
input.seek(index54_1);
if ( s>=0 ) return s;
break;
case 2 : 
var LA54_2 = input.LA(1);
var index54_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred20_Ham4Parser()) ) {s = 25;}
else if ( (this.synpred21_Ham4Parser()) ) {s = 4;}
input.seek(index54_2);
if ( s>=0 ) return s;
break;
case 3 : 
var LA54_5 = input.LA(1);
var index54_5 = input.index();
input.rewind();
s = -1;
if ( (this.synpred21_Ham4Parser()) ) {s = 4;}
else if ( (true) ) {s = 6;}
input.seek(index54_5);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 54, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA56_eotS:
"\u0015\uffff",
DFA56_eofS:
"\u0015\uffff",
DFA56_minS:
"\u0001\u0043\u0012\uffff\u0001\u0000\u0001\uffff",
DFA56_maxS:
"\u0001\u006b\u0012\uffff\u0001\u0000\u0001\uffff",
DFA56_acceptS:
"\u0001\uffff\u0001\u0001\u0011\u0002\u0001\uffff\u0001\u0003",
DFA56_specialS:
"\u0001\u0000\u0012\uffff\u0001\u0001\u0001\uffff}>",
DFA56_transitionS: [
"\u0001\u0012\u0001\u0007\u0001\u000d\u000d\uffff\u0001\u0008"+
"\u0001\u0009\u0001\u0010\u0001\u0001\u0001\u0002\u0001\u0003"+
"\u0001\u0004\u0001\u0005\u0001\u0009\u0001\u0006\u0002\u0012"+
"\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0001\u000e"+
"\u0001\u000f\u0001\u0011\u0002\u0013\u0004\u0014",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA56_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA56_eotS),
DFA56_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA56_eofS),
DFA56_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA56_minS),
DFA56_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA56_maxS),
DFA56_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA56_acceptS),
DFA56_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA56_specialS),
DFA56_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA56_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA56_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA56 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 56;
this.eot = Ham4Parser.DFA56_eot;
this.eof = Ham4Parser.DFA56_eof;
this.min = Ham4Parser.DFA56_min;
this.max = Ham4Parser.DFA56_max;
this.accept = Ham4Parser.DFA56_accept;
this.special = Ham4Parser.DFA56_special;
this.transition = Ham4Parser.DFA56_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA56, org.antlr.runtime.DFA, {
getDescription: function() {
return "1835:5: ( HamNeutralspace ( HamArmextended )? | ( levelbody )=> locationbody | locationarm )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA56_0 = input.LA(1);
var index56_0 = input.index();
input.rewind();
s = -1;
if ( (LA56_0==HamNeutralspace) ) {s = 1;}
else if ( (LA56_0==HamHead) && (this.synpred22_Ham4Parser())) {s = 2;}
else if ( (LA56_0==HamHeadtop) && (this.synpred22_Ham4Parser())) {s = 3;}
else if ( (LA56_0==HamForehead) && (this.synpred22_Ham4Parser())) {s = 4;}
else if ( (LA56_0==HamEyebrows) && (this.synpred22_Ham4Parser())) {s = 5;}
else if ( (LA56_0==HamNose) && (this.synpred22_Ham4Parser())) {s = 6;}
else if ( (LA56_0==HamNostrils) && (this.synpred22_Ham4Parser())) {s = 7;}
else if ( (LA56_0==HamTongue) && (this.synpred22_Ham4Parser())) {s = 8;}
else if ( (LA56_0==HamTeeth||LA56_0==HamEyes||LA56_0==HamLips) && (this.synpred22_Ham4Parser())) {s = 9;}
else if ( (LA56_0==HamChin) && (this.synpred22_Ham4Parser())) {s = 10;}
else if ( (LA56_0==HamUnderchin) && (this.synpred22_Ham4Parser())) {s = 11;}
else if ( (LA56_0==HamNeck) && (this.synpred22_Ham4Parser())) {s = 12;}
else if ( (LA56_0==HamShouldertop) && (this.synpred22_Ham4Parser())) {s = 13;}
else if ( (LA56_0==HamShoulders) && (this.synpred22_Ham4Parser())) {s = 14;}
else if ( (LA56_0==HamChest) && (this.synpred22_Ham4Parser())) {s = 15;}
else if ( (LA56_0==HamStomach) && (this.synpred22_Ham4Parser())) {s = 16;}
else if ( (LA56_0==HamBelowstomach) && (this.synpred22_Ham4Parser())) {s = 17;}
else if ( (LA56_0==HamEarlobe||(LA56_0>=HamEar && LA56_0<=HamCheek)) && (this.synpred22_Ham4Parser())) {s = 18;}
else if ( ((LA56_0>=HamLrbeside && LA56_0<=HamLrat)) ) {s = 19;}
else if ( ((LA56_0>=HamUpperarm && LA56_0<=HamLowerarm)) ) {s = 20;}
input.seek(index56_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA56_19 = input.LA(1);
var index56_19 = input.index();
input.rewind();
s = -1;
if ( (this.synpred22_Ham4Parser()) ) {s = 18;}
else if ( (true) ) {s = 20;}
input.seek(index56_19);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 56, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA57_eotS:
"\u0016\uffff",
DFA57_eofS:
"\u0001\u0002\u0015\uffff",
DFA57_minS:
"\u0001\u000f\u0015\uffff",
DFA57_maxS:
"\u0001\u00d9\u0015\uffff",
DFA57_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0013\uffff",
DFA57_specialS:
"\u0016\uffff}>",
DFA57_transitionS: [
"\u0001\u0002\u003e\uffff\u0002\u0002\u0001\u0001\u0034\uffff"+
"\u0015\u0002\u0001\uffff\u0001\u0002\u0006\uffff\u0009\u0002"+
"\u0002\uffff\u0002\u0002\u0007\uffff\u0008\u0002\u0009\uffff"+
"\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA57_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA57_eotS),
DFA57_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA57_eofS),
DFA57_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA57_minS),
DFA57_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA57_maxS),
DFA57_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA57_acceptS),
DFA57_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA57_specialS),
DFA57_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA57_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA57_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA57 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 57;
this.eot = Ham4Parser.DFA57_eot;
this.eof = Ham4Parser.DFA57_eof;
this.min = Ham4Parser.DFA57_min;
this.max = Ham4Parser.DFA57_max;
this.accept = Ham4Parser.DFA57_accept;
this.special = Ham4Parser.DFA57_special;
this.transition = Ham4Parser.DFA57_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA57, org.antlr.runtime.DFA, {
getDescription: function() {
return "1867:9: ( HamBehind )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA58_eotS:
"\u0015\uffff",
DFA58_eofS:
"\u0001\u0004\u0014\uffff",
DFA58_minS:
"\u0001\u000f\u0002\uffff\u0001\u0000\u0011\uffff",
DFA58_maxS:
"\u0001\u00d9\u0002\uffff\u0001\u0000\u0011\uffff",
DFA58_acceptS:
"\u0001\uffff\u0002\u0001\u0001\uffff\u0001\u0002\u0010\uffff",
DFA58_specialS:
"\u0001\u0000\u0002\uffff\u0001\u0001\u0011\uffff}>",
DFA58_transitionS: [
"\u0001\u0004\u003e\uffff\u0001\u0004\u0001\u0002\u0035\uffff"+
"\u0015\u0004\u0001\uffff\u0001\u0004\u0006\uffff\u0009\u0004"+
"\u0002\uffff\u0002\u0001\u0007\uffff\u0004\u0004\u0001\u0003"+
"\u0003\u0004\u0009\uffff\u0013\u0004",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA58_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA58_eotS),
DFA58_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA58_eofS),
DFA58_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA58_minS),
DFA58_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA58_maxS),
DFA58_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA58_acceptS),
DFA58_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA58_specialS),
DFA58_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA58_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA58_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA58 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 58;
this.eot = Ham4Parser.DFA58_eot;
this.eof = Ham4Parser.DFA58_eof;
this.min = Ham4Parser.DFA58_min;
this.max = Ham4Parser.DFA58_max;
this.accept = Ham4Parser.DFA58_accept;
this.special = Ham4Parser.DFA58_special;
this.transition = Ham4Parser.DFA58_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA58, org.antlr.runtime.DFA, {
getDescription: function() {
return "1868:9: ( ( contactbody )=> contactbody )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA58_0 = input.LA(1);
var index58_0 = input.index();
input.rewind();
s = -1;
if ( ((LA58_0>=HamClose && LA58_0<=HamTouch)) && (this.synpred23_Ham4Parser())) {s = 1;}
else if ( (LA58_0==HamArmextended) && (this.synpred23_Ham4Parser())) {s = 2;}
else if ( (LA58_0==HamSeqbegin) ) {s = 3;}
else if ( (LA58_0==EOF||LA58_0==HamPlus||LA58_0==HamReplace||(LA58_0>=HamNomotion && LA58_0<=HamMovex)||LA58_0==HamLargemod||(LA58_0>=HamFingerplay && LA58_0<=HamCircler)||(LA58_0>=HamRepeatfromstart && LA58_0<=HamRepeatcontinueseveral)||(LA58_0>=HamSeqend && LA58_0<=HamRepeatreverse)||(LA58_0>=HamNodding && LA58_0<=HamCircleuo)) ) {s = 4;}
input.seek(index58_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA58_3 = input.LA(1);
var index58_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred23_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 4;}
input.seek(index58_3);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 58, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA59_eotS:
"\u0015\uffff",
DFA59_eofS:
"\u0001\u0004\u0014\uffff",
DFA59_minS:
"\u0001\u000f\u0002\uffff\u0001\u0000\u0011\uffff",
DFA59_maxS:
"\u0001\u00d9\u0002\uffff\u0001\u0000\u0011\uffff",
DFA59_acceptS:
"\u0001\uffff\u0002\u0001\u0001\uffff\u0001\u0002\u0010\uffff",
DFA59_specialS:
"\u0001\u0000\u0002\uffff\u0001\u0001\u0011\uffff}>",
DFA59_transitionS: [
"\u0001\u0004\u003e\uffff\u0001\u0004\u0036\uffff\u0015\u0004"+
"\u0001\uffff\u0001\u0004\u0006\uffff\u0009\u0004\u0002\uffff"+
"\u0002\u0001\u0002\u0002\u0005\uffff\u0004\u0004\u0001\u0003"+
"\u0003\u0004\u0009\uffff\u0013\u0004",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA59_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA59_eotS),
DFA59_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA59_eofS),
DFA59_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA59_minS),
DFA59_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA59_maxS),
DFA59_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA59_acceptS),
DFA59_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA59_specialS),
DFA59_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA59_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA59_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA59 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 59;
this.eot = Ham4Parser.DFA59_eot;
this.eof = Ham4Parser.DFA59_eof;
this.min = Ham4Parser.DFA59_min;
this.max = Ham4Parser.DFA59_max;
this.accept = Ham4Parser.DFA59_accept;
this.special = Ham4Parser.DFA59_special;
this.transition = Ham4Parser.DFA59_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA59, org.antlr.runtime.DFA, {
getDescription: function() {
return "1891:9: ( ( contacthand )=> contacthand )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA59_0 = input.LA(1);
var index59_0 = input.index();
input.rewind();
s = -1;
if ( ((LA59_0>=HamClose && LA59_0<=HamTouch)) && (this.synpred24_Ham4Parser())) {s = 1;}
else if ( ((LA59_0>=HamInterlock && LA59_0<=HamCross)) && (this.synpred24_Ham4Parser())) {s = 2;}
else if ( (LA59_0==HamSeqbegin) ) {s = 3;}
else if ( (LA59_0==EOF||LA59_0==HamPlus||LA59_0==HamReplace||(LA59_0>=HamNomotion && LA59_0<=HamMovex)||LA59_0==HamLargemod||(LA59_0>=HamFingerplay && LA59_0<=HamCircler)||(LA59_0>=HamRepeatfromstart && LA59_0<=HamRepeatcontinueseveral)||(LA59_0>=HamSeqend && LA59_0<=HamRepeatreverse)||(LA59_0>=HamNodding && LA59_0<=HamCircleuo)) ) {s = 4;}
input.seek(index59_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA59_3 = input.LA(1);
var index59_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred24_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 4;}
input.seek(index59_3);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 59, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA60_eotS:
"\u0016\uffff",
DFA60_eofS:
"\u0001\u0002\u0015\uffff",
DFA60_minS:
"\u0001\u000f\u0015\uffff",
DFA60_maxS:
"\u0001\u00d9\u0015\uffff",
DFA60_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0013\uffff",
DFA60_specialS:
"\u0016\uffff}>",
DFA60_transitionS: [
"\u0001\u0002\u003e\uffff\u0002\u0002\u0001\u0001\u0034\uffff"+
"\u0015\u0002\u0001\uffff\u0001\u0002\u0006\uffff\u0009\u0002"+
"\u0002\uffff\u0002\u0002\u0007\uffff\u0008\u0002\u0009\uffff"+
"\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA60_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA60_eotS),
DFA60_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA60_eofS),
DFA60_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA60_minS),
DFA60_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA60_maxS),
DFA60_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA60_acceptS),
DFA60_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA60_specialS),
DFA60_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA60_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA60_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA60 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 60;
this.eot = Ham4Parser.DFA60_eot;
this.eof = Ham4Parser.DFA60_eof;
this.min = Ham4Parser.DFA60_min;
this.max = Ham4Parser.DFA60_max;
this.accept = Ham4Parser.DFA60_accept;
this.special = Ham4Parser.DFA60_special;
this.transition = Ham4Parser.DFA60_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA60, org.antlr.runtime.DFA, {
getDescription: function() {
return "1915:9: ( HamBehind )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA61_eotS:
"\u0015\uffff",
DFA61_eofS:
"\u0001\u0004\u0014\uffff",
DFA61_minS:
"\u0001\u000f\u0002\uffff\u0001\u0000\u0011\uffff",
DFA61_maxS:
"\u0001\u00d9\u0002\uffff\u0001\u0000\u0011\uffff",
DFA61_acceptS:
"\u0001\uffff\u0002\u0001\u0001\uffff\u0001\u0002\u0010\uffff",
DFA61_specialS:
"\u0001\u0000\u0002\uffff\u0001\u0001\u0011\uffff}>",
DFA61_transitionS: [
"\u0001\u0004\u003e\uffff\u0001\u0004\u0001\u0002\u0035\uffff"+
"\u0015\u0004\u0001\uffff\u0001\u0004\u0006\uffff\u0009\u0004"+
"\u0002\uffff\u0002\u0001\u0007\uffff\u0004\u0004\u0001\u0003"+
"\u0003\u0004\u0009\uffff\u0013\u0004",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA61_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA61_eotS),
DFA61_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA61_eofS),
DFA61_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA61_minS),
DFA61_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA61_maxS),
DFA61_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA61_acceptS),
DFA61_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA61_specialS),
DFA61_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA61_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA61_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA61 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 61;
this.eot = Ham4Parser.DFA61_eot;
this.eof = Ham4Parser.DFA61_eof;
this.min = Ham4Parser.DFA61_min;
this.max = Ham4Parser.DFA61_max;
this.accept = Ham4Parser.DFA61_accept;
this.special = Ham4Parser.DFA61_special;
this.transition = Ham4Parser.DFA61_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA61, org.antlr.runtime.DFA, {
getDescription: function() {
return "1916:9: ( ( contactbody )=> contactbody )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA61_0 = input.LA(1);
var index61_0 = input.index();
input.rewind();
s = -1;
if ( ((LA61_0>=HamClose && LA61_0<=HamTouch)) && (this.synpred25_Ham4Parser())) {s = 1;}
else if ( (LA61_0==HamArmextended) && (this.synpred25_Ham4Parser())) {s = 2;}
else if ( (LA61_0==HamSeqbegin) ) {s = 3;}
else if ( (LA61_0==EOF||LA61_0==HamPlus||LA61_0==HamReplace||(LA61_0>=HamNomotion && LA61_0<=HamMovex)||LA61_0==HamLargemod||(LA61_0>=HamFingerplay && LA61_0<=HamCircler)||(LA61_0>=HamRepeatfromstart && LA61_0<=HamRepeatcontinueseveral)||(LA61_0>=HamSeqend && LA61_0<=HamRepeatreverse)||(LA61_0>=HamNodding && LA61_0<=HamCircleuo)) ) {s = 4;}
input.seek(index61_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA61_3 = input.LA(1);
var index61_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred25_Ham4Parser()) ) {s = 2;}
else if ( (true) ) {s = 4;}
input.seek(index61_3);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 61, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA92_eotS:
"\u000d\uffff",
DFA92_eofS:
"\u0001\u000b\u000c\uffff",
DFA92_minS:
"\u0001\u000f\u000c\uffff",
DFA92_maxS:
"\u0001\u00d9\u000c\uffff",
DFA92_acceptS:
"\u0001\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0001\uffff",
DFA92_specialS:
"\u000d\uffff}>",
DFA92_transitionS: [
"\u0001\u000b\u003e\uffff\u0001\u0001\u0036\uffff\u0015\u0001"+
"\u0008\uffff\u0002\u0001\u0001\uffff\u0006\u0001\u000f\uffff"+
"\u0001\u0001\u000c\uffff\u0006\u0001\u0001\uffff\u000c\u0001",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA92_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA92_eotS),
DFA92_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA92_eofS),
DFA92_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA92_minS),
DFA92_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA92_maxS),
DFA92_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA92_acceptS),
DFA92_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA92_specialS),
DFA92_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA92_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA92_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA92 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 92;
this.eot = Ham4Parser.DFA92_eot;
this.eof = Ham4Parser.DFA92_eof;
this.min = Ham4Parser.DFA92_min;
this.max = Ham4Parser.DFA92_max;
this.accept = Ham4Parser.DFA92_accept;
this.special = Ham4Parser.DFA92_special;
this.transition = Ham4Parser.DFA92_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA92, org.antlr.runtime.DFA, {
getDescription: function() {
return "2426:9: ( action2t a2tlist )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA93_eotS:
"\u000d\uffff",
DFA93_eofS:
"\u0001\u000b\u000c\uffff",
DFA93_minS:
"\u0001\u000f\u000c\uffff",
DFA93_maxS:
"\u0001\u00d9\u000c\uffff",
DFA93_acceptS:
"\u0001\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0001\uffff",
DFA93_specialS:
"\u000d\uffff}>",
DFA93_transitionS: [
"\u0001\u000b\u003e\uffff\u0001\u0001\u0036\uffff\u0015\u0001"+
"\u0008\uffff\u0002\u0001\u0001\uffff\u0006\u0001\u000f\uffff"+
"\u0001\u0001\u000c\uffff\u0006\u0001\u0001\uffff\u000c\u0001",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA93_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA93_eotS),
DFA93_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA93_eofS),
DFA93_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA93_minS),
DFA93_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA93_maxS),
DFA93_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA93_acceptS),
DFA93_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA93_specialS),
DFA93_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA93_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA93_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA93 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 93;
this.eot = Ham4Parser.DFA93_eot;
this.eof = Ham4Parser.DFA93_eof;
this.min = Ham4Parser.DFA93_min;
this.max = Ham4Parser.DFA93_max;
this.accept = Ham4Parser.DFA93_accept;
this.special = Ham4Parser.DFA93_special;
this.transition = Ham4Parser.DFA93_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA93, org.antlr.runtime.DFA, {
getDescription: function() {
return "2451:9: ( action1t a1tlist )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA95_eotS:
"\u000e\uffff",
DFA95_eofS:
"\u000e\uffff",
DFA95_minS:
"\u0001\u004e\u000a\u0000\u0003\uffff",
DFA95_maxS:
"\u0001\u00d9\u000a\u0000\u0003\uffff",
DFA95_acceptS:
"\u000b\uffff\u0001\u0001\u0001\u0002\u0001\u0003",
DFA95_specialS:
"\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
"\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0003"+
"\uffff}>",
DFA95_transitionS: [
"\u0001\u0006\u0036\uffff\u0001\u0001\u0012\u0002\u0002\u0004"+
"\u0008\uffff\u0001\u0007\u0001\u0009\u0001\uffff\u0006\u0003"+
"\u000f\uffff\u0001\u0008\u000c\uffff\u0005\u0005\u0001\u000a"+
"\u0001\uffff\u000c\u0003",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA95_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA95_eotS),
DFA95_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA95_eofS),
DFA95_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA95_minS),
DFA95_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA95_maxS),
DFA95_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA95_acceptS),
DFA95_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA95_specialS),
DFA95_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA95_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA95_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA95 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 95;
this.eot = Ham4Parser.DFA95_eot;
this.eof = Ham4Parser.DFA95_eof;
this.min = Ham4Parser.DFA95_min;
this.max = Ham4Parser.DFA95_max;
this.accept = Ham4Parser.DFA95_accept;
this.special = Ham4Parser.DFA95_special;
this.transition = Ham4Parser.DFA95_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA95, org.antlr.runtime.DFA, {
getDescription: function() {
return "2504:5: ( ( action1 location2not1 )=> action1 location2not1 repetitionsoption -> ^( ACTION2T action1 location2not1 ( repetitionsoption )? ) | ( action1t )=> action1t -> ^( ACTION2T action1t ) | ( ( HamParbegin ( action1 )+ HamPlus ( action1 )+ HamParend location2 )=> splitaction2loc2 | ( HamParbegin ( action1t )+ HamPlus )=> splitaction2t | paraction2t | seqaction2t | seqfusedaction2t ) repetitionsoption -> ^( ACTION2T ( splitaction2loc2 )? ( splitaction2t )? ( paraction2t )? ( seqaction2t )? ( seqfusedaction2t )? ( repetitionsoption )? ) )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA95_1 = input.LA(1);
var index95_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_1);
if ( s>=0 ) return s;
break;
case 1 : 
var LA95_2 = input.LA(1);
var index95_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_2);
if ( s>=0 ) return s;
break;
case 2 : 
var LA95_3 = input.LA(1);
var index95_3 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_3);
if ( s>=0 ) return s;
break;
case 3 : 
var LA95_4 = input.LA(1);
var index95_4 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_4);
if ( s>=0 ) return s;
break;
case 4 : 
var LA95_5 = input.LA(1);
var index95_5 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_5);
if ( s>=0 ) return s;
break;
case 5 : 
var LA95_6 = input.LA(1);
var index95_6 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_6);
if ( s>=0 ) return s;
break;
case 6 : 
var LA95_7 = input.LA(1);
var index95_7 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
input.seek(index95_7);
if ( s>=0 ) return s;
break;
case 7 : 
var LA95_8 = input.LA(1);
var index95_8 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
else if ( (true) ) {s = 13;}
input.seek(index95_8);
if ( s>=0 ) return s;
break;
case 8 : 
var LA95_9 = input.LA(1);
var index95_9 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
else if ( (true) ) {s = 13;}
input.seek(index95_9);
if ( s>=0 ) return s;
break;
case 9 : 
var LA95_10 = input.LA(1);
var index95_10 = input.index();
input.rewind();
s = -1;
if ( (this.synpred27_Ham4Parser()) ) {s = 11;}
else if ( (this.synpred28_Ham4Parser()) ) {s = 12;}
else if ( (true) ) {s = 13;}
input.seek(index95_10);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 95, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA98_eotS:
"\u000e\uffff",
DFA98_eofS:
"\u000e\uffff",
DFA98_minS:
"\u0001\u004e\u0007\uffff\u0003\u0000\u0003\uffff",
DFA98_maxS:
"\u0001\u00d9\u0007\uffff\u0003\u0000\u0003\uffff",
DFA98_acceptS:
"\u0001\uffff\u0007\u0001\u0003\uffff\u0001\u0003\u0001\u0002\u0001"+
"\u0004",
DFA98_specialS:
"\u0001\u0000\u0007\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0003"+
"\uffff}>",
DFA98_transitionS: [
"\u0001\u0006\u0036\uffff\u0001\u0001\u0012\u0002\u0002\u0004"+
"\u0008\uffff\u0001\u0007\u0001\u0009\u0001\uffff\u0006\u0003"+
"\u000f\uffff\u0001\u0008\u000c\uffff\u0005\u0005\u0001\u000a"+
"\u0001\uffff\u000c\u0003",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA98_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA98_eotS),
DFA98_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA98_eofS),
DFA98_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA98_minS),
DFA98_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA98_maxS),
DFA98_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA98_acceptS),
DFA98_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA98_specialS),
DFA98_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA98_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA98_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA98 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 98;
this.eot = Ham4Parser.DFA98_eot;
this.eof = Ham4Parser.DFA98_eof;
this.min = Ham4Parser.DFA98_min;
this.max = Ham4Parser.DFA98_max;
this.accept = Ham4Parser.DFA98_accept;
this.special = Ham4Parser.DFA98_special;
this.transition = Ham4Parser.DFA98_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA98, org.antlr.runtime.DFA, {
getDescription: function() {
return "2582:9: ( ( action1 )=> ( action1 ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )? ) | paraction1t | seqnmoraction1t | seqfusedaction1t )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA98_0 = input.LA(1);
var index98_0 = input.index();
input.rewind();
s = -1;
if ( (LA98_0==HamNomotion) && (this.synpred31_Ham4Parser())) {s = 1;}
else if ( ((LA98_0>=HamMoveu && LA98_0<=HamMoveuo)) && (this.synpred31_Ham4Parser())) {s = 2;}
else if ( ((LA98_0>=HamCircleo && LA98_0<=HamCircler)||(LA98_0>=HamCircleul && LA98_0<=HamCircleuo)) && (this.synpred31_Ham4Parser())) {s = 3;}
else if ( ((LA98_0>=HamMovecross && LA98_0<=HamMovex)) && (this.synpred31_Ham4Parser())) {s = 4;}
else if ( ((LA98_0>=HamNodding && LA98_0<=HamStirccw)) && (this.synpred31_Ham4Parser())) {s = 5;}
else if ( (LA98_0==HamReplace) && (this.synpred31_Ham4Parser())) {s = 6;}
else if ( (LA98_0==HamFingerplay) && (this.synpred31_Ham4Parser())) {s = 7;}
else if ( (LA98_0==HamSeqbegin) ) {s = 8;}
else if ( (LA98_0==HamParbegin) ) {s = 9;}
else if ( (LA98_0==HamFusionbegin) ) {s = 10;}
input.seek(index98_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA98_8 = input.LA(1);
var index98_8 = input.index();
input.rewind();
s = -1;
if ( (this.synpred31_Ham4Parser()) ) {s = 7;}
else if ( (true) ) {s = 11;}
input.seek(index98_8);
if ( s>=0 ) return s;
break;
case 2 : 
var LA98_9 = input.LA(1);
var index98_9 = input.index();
input.rewind();
s = -1;
if ( (this.synpred31_Ham4Parser()) ) {s = 7;}
else if ( (true) ) {s = 12;}
input.seek(index98_9);
if ( s>=0 ) return s;
break;
case 3 : 
var LA98_10 = input.LA(1);
var index98_10 = input.index();
input.rewind();
s = -1;
if ( (this.synpred31_Ham4Parser()) ) {s = 7;}
else if ( (true) ) {s = 13;}
input.seek(index98_10);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 98, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA97_eotS:
"\u002c\uffff",
DFA97_eofS:
"\u0001\u001d\u002b\uffff",
DFA97_minS:
"\u0001\u000f\u0001\u0000\u0002\uffff\u0001\u0000\u0027\uffff",
DFA97_maxS:
"\u0001\u00d9\u0001\u0000\u0002\uffff\u0001\u0000\u0027\uffff",
DFA97_acceptS:
"\u0002\uffff\u0002\u0001\u0001\uffff\u0001\u0002\u0017\uffff\u0001"+
"\u0003\u000e\uffff",
DFA97_specialS:
"\u0001\u0000\u0001\u0001\u0002\uffff\u0001\u0002\u0027\uffff}>",
DFA97_transitionS: [
"\u0001\u001d\u0033\uffff\u0003\u0005\u0008\uffff\u0001\u001d"+
"\u0004\uffff\u0025\u0005\u0001\uffff\u0006\u0005\u0006\uffff"+
"\u0015\u001d\u0008\uffff\u0001\u001d\u0001\u0001\u0007\u001d"+
"\u0002\uffff\u0002\u0002\u0002\u0003\u0005\uffff\u0004\u001d"+
"\u0001\u0004\u0003\u001d\u0009\uffff\u0013\u001d",
"\u0001\uffff",
"",
"",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA97_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA97_eotS),
DFA97_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA97_eofS),
DFA97_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA97_minS),
DFA97_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA97_maxS),
DFA97_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA97_acceptS),
DFA97_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA97_specialS),
DFA97_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA97_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA97_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA97 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 97;
this.eot = Ham4Parser.DFA97_eot;
this.eof = Ham4Parser.DFA97_eof;
this.min = Ham4Parser.DFA97_min;
this.max = Ham4Parser.DFA97_max;
this.accept = Ham4Parser.DFA97_accept;
this.special = Ham4Parser.DFA97_special;
this.transition = Ham4Parser.DFA97_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA97, org.antlr.runtime.DFA, {
getDescription: function() {
return "2587:17: ( ( handconstellation )=> handconstellation | location1 ( HamLargemod )? )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA97_0 = input.LA(1);
var index97_0 = input.index();
input.rewind();
s = -1;
if ( (LA97_0==HamParbegin) ) {s = 1;}
else if ( ((LA97_0>=HamClose && LA97_0<=HamTouch)) && (this.synpred32_Ham4Parser())) {s = 2;}
else if ( ((LA97_0>=HamInterlock && LA97_0<=HamCross)) && (this.synpred32_Ham4Parser())) {s = 3;}
else if ( (LA97_0==HamSeqbegin) ) {s = 4;}
else if ( ((LA97_0>=HamEarlobe && LA97_0<=HamShouldertop)||(LA97_0>=HamTongue && LA97_0<=HamPinkyside)||(LA97_0>=HamFingertip && LA97_0<=HamFingerside)) ) {s = 5;}
else if ( (LA97_0==EOF||LA97_0==HamPlus||LA97_0==HamReplace||(LA97_0>=HamNomotion && LA97_0<=HamMovex)||LA97_0==HamFingerplay||(LA97_0>=HamParend && LA97_0<=HamCircler)||(LA97_0>=HamRepeatfromstart && LA97_0<=HamRepeatcontinueseveral)||(LA97_0>=HamSeqend && LA97_0<=HamRepeatreverse)||(LA97_0>=HamNodding && LA97_0<=HamCircleuo)) ) {s = 29;}
input.seek(index97_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA97_1 = input.LA(1);
var index97_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred32_Ham4Parser()) ) {s = 3;}
else if ( (true) ) {s = 29;}
input.seek(index97_1);
if ( s>=0 ) return s;
break;
case 2 : 
var LA97_4 = input.LA(1);
var index97_4 = input.index();
input.rewind();
s = -1;
if ( (this.synpred32_Ham4Parser()) ) {s = 3;}
else if ( (true) ) {s = 29;}
input.seek(index97_4);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 97, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA96_eotS:
"\u0013\uffff",
DFA96_eofS:
"\u0001\u0002\u0012\uffff",
DFA96_minS:
"\u0001\u000f\u0012\uffff",
DFA96_maxS:
"\u0001\u00d9\u0012\uffff",
DFA96_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0010\uffff",
DFA96_specialS:
"\u0013\uffff}>",
DFA96_transitionS: [
"\u0001\u0002\u003e\uffff\u0001\u0002\u0036\uffff\u0015\u0002"+
"\u0001\uffff\u0001\u0001\u0006\uffff\u0009\u0002\u000b\uffff"+
"\u0008\u0002\u0009\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA96_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA96_eotS),
DFA96_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA96_eofS),
DFA96_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA96_minS),
DFA96_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA96_maxS),
DFA96_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA96_acceptS),
DFA96_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA96_specialS),
DFA96_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA96_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA96_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA96 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 96;
this.eot = Ham4Parser.DFA96_eot;
this.eof = Ham4Parser.DFA96_eof;
this.min = Ham4Parser.DFA96_min;
this.max = Ham4Parser.DFA96_max;
this.accept = Ham4Parser.DFA96_accept;
this.special = Ham4Parser.DFA96_special;
this.transition = Ham4Parser.DFA96_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA96, org.antlr.runtime.DFA, {
getDescription: function() {
return "2593:21: ( HamLargemod )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA102_eotS:
"\u000d\uffff",
DFA102_eofS:
"\u000d\uffff",
DFA102_minS:
"\u0001\u004e\u0007\uffff\u0001\u0000\u0004\uffff",
DFA102_maxS:
"\u0001\u00d9\u0007\uffff\u0001\u0000\u0004\uffff",
DFA102_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0006\uffff\u0001\u0004\u0001"+
"\u0006\u0001\u0003\u0001\u0005",
DFA102_specialS:
"\u0008\uffff\u0001\u0000\u0004\uffff}>",
DFA102_transitionS: [
"\u0001\u0002\u0036\uffff\u0001\u0001\u0014\u0002\u0008\uffff"+
"\u0001\u0002\u0001\u0009\u0001\uffff\u0006\u0002\u000f\uffff"+
"\u0001\u0008\u000c\uffff\u0005\u0002\u0001\u000a\u0001\uffff"+
"\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA102_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA102_eotS),
DFA102_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA102_eofS),
DFA102_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA102_minS),
DFA102_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA102_maxS),
DFA102_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA102_acceptS),
DFA102_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA102_specialS),
DFA102_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA102_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA102_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA102 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 102;
this.eot = Ham4Parser.DFA102_eot;
this.eof = Ham4Parser.DFA102_eof;
this.min = Ham4Parser.DFA102_min;
this.max = Ham4Parser.DFA102_max;
this.accept = Ham4Parser.DFA102_accept;
this.special = Ham4Parser.DFA102_special;
this.transition = Ham4Parser.DFA102_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA102, org.antlr.runtime.DFA, {
getDescription: function() {
return "2653:5: ( HamNomotion -> ^( ACTION1 HamNomotion ) | simplemovement ( ( modifier )+ ( HamLargemod )? )? -> ^( ACTION1 simplemovement ( modifier )* ( HamLargemod )? ) | ( HamSeqbegin digit )=> specialfingerplaymovement -> ^( ACTION1 specialfingerplaymovement ) | paraction1 -> ^( ACTION1 paraction1 ) | seqaction1 -> ^( ACTION1 seqaction1 ) | seqfusedaction1 -> ^( ACTION1 seqfusedaction1 ) )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA102_8 = input.LA(1);
var index102_8 = input.index();
input.rewind();
s = -1;
if ( (this.synpred33_Ham4Parser()) ) {s = 11;}
else if ( (true) ) {s = 12;}
input.seek(index102_8);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 102, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA103_eotS:
"\u000d\uffff",
DFA103_eofS:
"\u000d\uffff",
DFA103_minS:
"\u0001\u000f\u000c\uffff",
DFA103_maxS:
"\u0001\u00d9\u000c\uffff",
DFA103_acceptS:
"\u0001\uffff\u0001\u0002\u0001\uffff\u0001\u0001\u0009\uffff",
DFA103_specialS:
"\u000d\uffff}>",
DFA103_transitionS: [
"\u0001\u0001\u003e\uffff\u0001\u0003\u0036\uffff\u0015\u0003"+
"\u0008\uffff\u0002\u0003\u0001\u0001\u0006\u0003\u000f\uffff"+
"\u0001\u0003\u000c\uffff\u0006\u0003\u0001\uffff\u000c\u0003",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA103_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA103_eotS),
DFA103_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA103_eofS),
DFA103_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA103_minS),
DFA103_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA103_maxS),
DFA103_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA103_acceptS),
DFA103_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA103_specialS),
DFA103_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA103_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA103_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA103 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 103;
this.eot = Ham4Parser.DFA103_eot;
this.eof = Ham4Parser.DFA103_eof;
this.min = Ham4Parser.DFA103_min;
this.max = Ham4Parser.DFA103_max;
this.accept = Ham4Parser.DFA103_accept;
this.special = Ham4Parser.DFA103_special;
this.transition = Ham4Parser.DFA103_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA103, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2697:7: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA104_eotS:
"\u000d\uffff",
DFA104_eofS:
"\u000d\uffff",
DFA104_minS:
"\u0001\u000f\u000c\uffff",
DFA104_maxS:
"\u0001\u00d9\u000c\uffff",
DFA104_acceptS:
"\u0001\uffff\u0001\u0002\u0001\uffff\u0001\u0001\u0009\uffff",
DFA104_specialS:
"\u000d\uffff}>",
DFA104_transitionS: [
"\u0001\u0001\u003e\uffff\u0001\u0003\u0036\uffff\u0015\u0003"+
"\u0008\uffff\u0002\u0003\u0001\u0001\u0006\u0003\u000f\uffff"+
"\u0001\u0003\u000c\uffff\u0006\u0003\u0001\uffff\u000c\u0003",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA104_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA104_eotS),
DFA104_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA104_eofS),
DFA104_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA104_minS),
DFA104_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA104_maxS),
DFA104_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA104_acceptS),
DFA104_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA104_specialS),
DFA104_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA104_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA104_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA104 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 104;
this.eot = Ham4Parser.DFA104_eot;
this.eof = Ham4Parser.DFA104_eof;
this.min = Ham4Parser.DFA104_min;
this.max = Ham4Parser.DFA104_max;
this.accept = Ham4Parser.DFA104_accept;
this.special = Ham4Parser.DFA104_special;
this.transition = Ham4Parser.DFA104_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA104, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2714:7: ( action1t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA105_eotS:
"\u000c\uffff",
DFA105_eofS:
"\u000c\uffff",
DFA105_minS:
"\u0001\u004e\u000b\uffff",
DFA105_maxS:
"\u0001\u00d9\u000b\uffff",
DFA105_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA105_specialS:
"\u000c\uffff}>",
DFA105_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\u0001\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA105_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA105_eotS),
DFA105_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA105_eofS),
DFA105_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA105_minS),
DFA105_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA105_maxS),
DFA105_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA105_acceptS),
DFA105_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA105_specialS),
DFA105_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA105_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA105_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA105 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 105;
this.eot = Ham4Parser.DFA105_eot;
this.eof = Ham4Parser.DFA105_eof;
this.min = Ham4Parser.DFA105_min;
this.max = Ham4Parser.DFA105_max;
this.accept = Ham4Parser.DFA105_accept;
this.special = Ham4Parser.DFA105_special;
this.transition = Ham4Parser.DFA105_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA105, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2736:9: ( action2t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA106_eotS:
"\u000c\uffff",
DFA106_eofS:
"\u000c\uffff",
DFA106_minS:
"\u0001\u004e\u000b\uffff",
DFA106_maxS:
"\u0001\u00d9\u000b\uffff",
DFA106_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA106_specialS:
"\u000c\uffff}>",
DFA106_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u0001\u0001"+
"\u000b\uffff\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA106_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA106_eotS),
DFA106_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA106_eofS),
DFA106_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA106_minS),
DFA106_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA106_maxS),
DFA106_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA106_acceptS),
DFA106_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA106_specialS),
DFA106_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA106_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA106_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA106 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 106;
this.eot = Ham4Parser.DFA106_eot;
this.eof = Ham4Parser.DFA106_eof;
this.min = Ham4Parser.DFA106_min;
this.max = Ham4Parser.DFA106_max;
this.accept = Ham4Parser.DFA106_accept;
this.special = Ham4Parser.DFA106_special;
this.transition = Ham4Parser.DFA106_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA106, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2761:9: ( action2t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA107_eotS:
"\u000c\uffff",
DFA107_eofS:
"\u000c\uffff",
DFA107_minS:
"\u0001\u004e\u000b\uffff",
DFA107_maxS:
"\u0001\u00d9\u000b\uffff",
DFA107_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA107_specialS:
"\u000c\uffff}>",
DFA107_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\u0001\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA107_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA107_eotS),
DFA107_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA107_eofS),
DFA107_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA107_minS),
DFA107_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA107_maxS),
DFA107_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA107_acceptS),
DFA107_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA107_specialS),
DFA107_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA107_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA107_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA107 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 107;
this.eot = Ham4Parser.DFA107_eot;
this.eof = Ham4Parser.DFA107_eof;
this.min = Ham4Parser.DFA107_min;
this.max = Ham4Parser.DFA107_max;
this.accept = Ham4Parser.DFA107_accept;
this.special = Ham4Parser.DFA107_special;
this.transition = Ham4Parser.DFA107_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA107, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2786:9: ( action2t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA108_eotS:
"\u000c\uffff",
DFA108_eofS:
"\u000c\uffff",
DFA108_minS:
"\u0001\u004e\u000b\uffff",
DFA108_maxS:
"\u0001\u00d9\u000b\uffff",
DFA108_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA108_specialS:
"\u000c\uffff}>",
DFA108_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\u0001\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA108_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA108_eotS),
DFA108_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA108_eofS),
DFA108_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA108_minS),
DFA108_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA108_maxS),
DFA108_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA108_acceptS),
DFA108_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA108_specialS),
DFA108_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA108_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA108_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA108 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 108;
this.eot = Ham4Parser.DFA108_eot;
this.eof = Ham4Parser.DFA108_eof;
this.min = Ham4Parser.DFA108_min;
this.max = Ham4Parser.DFA108_max;
this.accept = Ham4Parser.DFA108_accept;
this.special = Ham4Parser.DFA108_special;
this.transition = Ham4Parser.DFA108_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA108, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2873:9: ( action1t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA111_eotS:
"\u001e\uffff",
DFA111_eofS:
"\u001e\uffff",
DFA111_minS:
"\u0001\u0043\u001d\uffff",
DFA111_maxS:
"\u0001\u00d9\u001d\uffff",
DFA111_acceptS:
"\u0001\uffff\u0001\u0001\u0012\uffff\u0001\u0002\u0009\uffff",
DFA111_specialS:
"\u001e\uffff}>",
DFA111_transitionS: [
"\u0003\u0001\u0008\uffff\u0001\u0014\u0004\uffff\u0003\u0001"+
"\u0001\uffff\u0015\u0001\u0019\uffff\u0015\u0014\u0008\uffff"+
"\u0002\u0014\u0001\uffff\u0006\u0014\u000f\uffff\u0001\u0014"+
"\u000c\uffff\u0006\u0014\u0001\uffff\u000c\u0014",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA111_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA111_eotS),
DFA111_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA111_eofS),
DFA111_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA111_minS),
DFA111_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA111_maxS),
DFA111_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA111_acceptS),
DFA111_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA111_specialS),
DFA111_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA111_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA111_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA111 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 111;
this.eot = Ham4Parser.DFA111_eot;
this.eof = Ham4Parser.DFA111_eof;
this.min = Ham4Parser.DFA111_min;
this.max = Ham4Parser.DFA111_max;
this.accept = Ham4Parser.DFA111_accept;
this.special = Ham4Parser.DFA111_special;
this.transition = Ham4Parser.DFA111_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA111, org.antlr.runtime.DFA, {
getDescription: function() {
return "2910:9: ( ( ( levelbody )=> levelbody | levelarm ) action1t -> ^( NMACT1T ( levelbody )* ( levelarm )* action1t ) | ( action1t )+ -> ^( SEQACT1T ( action1t )* ) )";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA109_eotS:
"\u0014\uffff",
DFA109_eofS:
"\u0014\uffff",
DFA109_minS:
"\u0001\u0043\u0011\uffff\u0001\u0000\u0001\uffff",
DFA109_maxS:
"\u0001\u006b\u0011\uffff\u0001\u0000\u0001\uffff",
DFA109_acceptS:
"\u0001\uffff\u0011\u0001\u0001\uffff\u0001\u0002",
DFA109_specialS:
"\u0001\u0000\u0011\uffff\u0001\u0001\u0001\uffff}>",
DFA109_transitionS: [
"\u0001\u0011\u0001\u0006\u0001\u000c\u000d\uffff\u0001\u0007"+
"\u0001\u0008\u0001\u000f\u0001\uffff\u0001\u0001\u0001\u0002"+
"\u0001\u0003\u0001\u0004\u0001\u0008\u0001\u0005\u0002\u0011"+
"\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000d"+
"\u0001\u000e\u0001\u0010\u0002\u0012\u0004\u0013",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\u0001\uffff",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA109_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA109_eotS),
DFA109_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA109_eofS),
DFA109_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA109_minS),
DFA109_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA109_maxS),
DFA109_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA109_acceptS),
DFA109_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA109_specialS),
DFA109_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA109_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA109_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA109 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 109;
this.eot = Ham4Parser.DFA109_eot;
this.eof = Ham4Parser.DFA109_eof;
this.min = Ham4Parser.DFA109_min;
this.max = Ham4Parser.DFA109_max;
this.accept = Ham4Parser.DFA109_accept;
this.special = Ham4Parser.DFA109_special;
this.transition = Ham4Parser.DFA109_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA109, org.antlr.runtime.DFA, {
getDescription: function() {
return "2911:13: ( ( levelbody )=> levelbody | levelarm )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA109_0 = input.LA(1);
var index109_0 = input.index();
input.rewind();
s = -1;
if ( (LA109_0==HamHead) && (this.synpred34_Ham4Parser())) {s = 1;}
else if ( (LA109_0==HamHeadtop) && (this.synpred34_Ham4Parser())) {s = 2;}
else if ( (LA109_0==HamForehead) && (this.synpred34_Ham4Parser())) {s = 3;}
else if ( (LA109_0==HamEyebrows) && (this.synpred34_Ham4Parser())) {s = 4;}
else if ( (LA109_0==HamNose) && (this.synpred34_Ham4Parser())) {s = 5;}
else if ( (LA109_0==HamNostrils) && (this.synpred34_Ham4Parser())) {s = 6;}
else if ( (LA109_0==HamTongue) && (this.synpred34_Ham4Parser())) {s = 7;}
else if ( (LA109_0==HamTeeth||LA109_0==HamEyes||LA109_0==HamLips) && (this.synpred34_Ham4Parser())) {s = 8;}
else if ( (LA109_0==HamChin) && (this.synpred34_Ham4Parser())) {s = 9;}
else if ( (LA109_0==HamUnderchin) && (this.synpred34_Ham4Parser())) {s = 10;}
else if ( (LA109_0==HamNeck) && (this.synpred34_Ham4Parser())) {s = 11;}
else if ( (LA109_0==HamShouldertop) && (this.synpred34_Ham4Parser())) {s = 12;}
else if ( (LA109_0==HamShoulders) && (this.synpred34_Ham4Parser())) {s = 13;}
else if ( (LA109_0==HamChest) && (this.synpred34_Ham4Parser())) {s = 14;}
else if ( (LA109_0==HamStomach) && (this.synpred34_Ham4Parser())) {s = 15;}
else if ( (LA109_0==HamBelowstomach) && (this.synpred34_Ham4Parser())) {s = 16;}
else if ( (LA109_0==HamEarlobe||(LA109_0>=HamEar && LA109_0<=HamCheek)) && (this.synpred34_Ham4Parser())) {s = 17;}
else if ( ((LA109_0>=HamLrbeside && LA109_0<=HamLrat)) ) {s = 18;}
else if ( ((LA109_0>=HamUpperarm && LA109_0<=HamLowerarm)) ) {s = 19;}
input.seek(index109_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA109_18 = input.LA(1);
var index109_18 = input.index();
input.rewind();
s = -1;
if ( (this.synpred34_Ham4Parser()) ) {s = 17;}
else if ( (true) ) {s = 19;}
input.seek(index109_18);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 109, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA110_eotS:
"\u000c\uffff",
DFA110_eofS:
"\u000c\uffff",
DFA110_minS:
"\u0001\u004e\u000b\uffff",
DFA110_maxS:
"\u0001\u00d9\u000b\uffff",
DFA110_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA110_specialS:
"\u000c\uffff}>",
DFA110_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u0001\u0001"+
"\u000b\uffff\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA110_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA110_eotS),
DFA110_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA110_eofS),
DFA110_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA110_minS),
DFA110_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA110_maxS),
DFA110_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA110_acceptS),
DFA110_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA110_specialS),
DFA110_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA110_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA110_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA110 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 110;
this.eot = Ham4Parser.DFA110_eot;
this.eof = Ham4Parser.DFA110_eof;
this.min = Ham4Parser.DFA110_min;
this.max = Ham4Parser.DFA110_max;
this.accept = Ham4Parser.DFA110_accept;
this.special = Ham4Parser.DFA110_special;
this.transition = Ham4Parser.DFA110_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA110, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2919:13: ( action1t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA112_eotS:
"\u000c\uffff",
DFA112_eofS:
"\u000c\uffff",
DFA112_minS:
"\u0001\u004e\u000b\uffff",
DFA112_maxS:
"\u0001\u00d9\u000b\uffff",
DFA112_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA112_specialS:
"\u000c\uffff}>",
DFA112_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\u0001\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA112_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA112_eotS),
DFA112_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA112_eofS),
DFA112_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA112_minS),
DFA112_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA112_maxS),
DFA112_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA112_acceptS),
DFA112_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA112_specialS),
DFA112_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA112_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA112_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA112 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 112;
this.eot = Ham4Parser.DFA112_eot;
this.eof = Ham4Parser.DFA112_eof;
this.min = Ham4Parser.DFA112_min;
this.max = Ham4Parser.DFA112_max;
this.accept = Ham4Parser.DFA112_accept;
this.special = Ham4Parser.DFA112_special;
this.transition = Ham4Parser.DFA112_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA112, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2947:9: ( action1t )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA113_eotS:
"\u000c\uffff",
DFA113_eofS:
"\u000c\uffff",
DFA113_minS:
"\u0001\u004e\u000b\uffff",
DFA113_maxS:
"\u0001\u00d9\u000b\uffff",
DFA113_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA113_specialS:
"\u000c\uffff}>",
DFA113_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\u0001\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA113_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA113_eotS),
DFA113_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA113_eofS),
DFA113_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA113_minS),
DFA113_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA113_maxS),
DFA113_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA113_acceptS),
DFA113_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA113_specialS),
DFA113_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA113_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA113_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA113 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 113;
this.eot = Ham4Parser.DFA113_eot;
this.eof = Ham4Parser.DFA113_eof;
this.min = Ham4Parser.DFA113_min;
this.max = Ham4Parser.DFA113_max;
this.accept = Ham4Parser.DFA113_accept;
this.special = Ham4Parser.DFA113_special;
this.transition = Ham4Parser.DFA113_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA113, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2974:9: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA114_eotS:
"\u000c\uffff",
DFA114_eofS:
"\u000c\uffff",
DFA114_minS:
"\u0001\u004e\u000b\uffff",
DFA114_maxS:
"\u0001\u00d9\u000b\uffff",
DFA114_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA114_specialS:
"\u000c\uffff}>",
DFA114_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u0001\u0001"+
"\u000b\uffff\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA114_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA114_eotS),
DFA114_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA114_eofS),
DFA114_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA114_minS),
DFA114_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA114_maxS),
DFA114_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA114_acceptS),
DFA114_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA114_specialS),
DFA114_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA114_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA114_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA114 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 114;
this.eot = Ham4Parser.DFA114_eot;
this.eof = Ham4Parser.DFA114_eof;
this.min = Ham4Parser.DFA114_min;
this.max = Ham4Parser.DFA114_max;
this.accept = Ham4Parser.DFA114_accept;
this.special = Ham4Parser.DFA114_special;
this.transition = Ham4Parser.DFA114_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA114, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 3001:9: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA115_eotS:
"\u000c\uffff",
DFA115_eofS:
"\u000c\uffff",
DFA115_minS:
"\u0001\u004e\u000b\uffff",
DFA115_maxS:
"\u0001\u00d9\u000b\uffff",
DFA115_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA115_specialS:
"\u000c\uffff}>",
DFA115_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\uffff\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\u0001\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA115_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA115_eotS),
DFA115_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA115_eofS),
DFA115_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA115_minS),
DFA115_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA115_maxS),
DFA115_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA115_acceptS),
DFA115_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA115_specialS),
DFA115_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA115_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA115_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA115 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 115;
this.eot = Ham4Parser.DFA115_eot;
this.eof = Ham4Parser.DFA115_eof;
this.min = Ham4Parser.DFA115_min;
this.max = Ham4Parser.DFA115_max;
this.accept = Ham4Parser.DFA115_accept;
this.special = Ham4Parser.DFA115_special;
this.transition = Ham4Parser.DFA115_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA115, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 3028:9: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA116_eotS:
"\u0012\uffff",
DFA116_eofS:
"\u0001\u0004\u0011\uffff",
DFA116_minS:
"\u0001\u000f\u0001\u0000\u0010\uffff",
DFA116_maxS:
"\u0001\u00d9\u0001\u0000\u0010\uffff",
DFA116_acceptS:
"\u0002\uffff\u0002\u0001\u0001\u0002\u000d\uffff",
DFA116_specialS:
"\u0001\u0000\u0001\u0001\u0010\uffff}>",
DFA116_transitionS: [
"\u0001\u0004\u003e\uffff\u0001\u0004\u0036\uffff\u0015\u0004"+
"\u0008\uffff\u0009\u0004\u000b\uffff\u0004\u0002\u0001\u0001"+
"\u0001\u0004\u0001\u0003\u0001\u0002\u0009\uffff\u0013\u0004",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA116_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA116_eotS),
DFA116_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA116_eofS),
DFA116_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA116_minS),
DFA116_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA116_maxS),
DFA116_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA116_acceptS),
DFA116_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA116_specialS),
DFA116_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA116_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA116_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA116 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 116;
this.eot = Ham4Parser.DFA116_eot;
this.eof = Ham4Parser.DFA116_eof;
this.min = Ham4Parser.DFA116_min;
this.max = Ham4Parser.DFA116_max;
this.accept = Ham4Parser.DFA116_accept;
this.special = Ham4Parser.DFA116_special;
this.transition = Ham4Parser.DFA116_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA116, org.antlr.runtime.DFA, {
getDescription: function() {
return "3054:9: ( ( ( HamSeqbegin )? repetition | HamAlternatingmotion )=> repetitions )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA116_0 = input.LA(1);
var index116_0 = input.index();
input.rewind();
s = -1;
if ( (LA116_0==HamSeqbegin) ) {s = 1;}
else if ( ((LA116_0>=HamRepeatfromstart && LA116_0<=HamRepeatcontinueseveral)||LA116_0==HamRepeatreverse) && (this.synpred35_Ham4Parser())) {s = 2;}
else if ( (LA116_0==HamAlternatingmotion) && (this.synpred35_Ham4Parser())) {s = 3;}
else if ( (LA116_0==EOF||LA116_0==HamPlus||LA116_0==HamReplace||(LA116_0>=HamNomotion && LA116_0<=HamMovex)||(LA116_0>=HamFingerplay && LA116_0<=HamCircler)||LA116_0==HamSeqend||(LA116_0>=HamNodding && LA116_0<=HamCircleuo)) ) {s = 4;}
input.seek(index116_0);
if ( s>=0 ) return s;
break;
case 1 : 
var LA116_1 = input.LA(1);
var index116_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred35_Ham4Parser()) ) {s = 3;}
else if ( (true) ) {s = 4;}
input.seek(index116_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 116, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA127_eotS:
"\u0030\uffff",
DFA127_eofS:
"\u0001\u0002\u002f\uffff",
DFA127_minS:
"\u0001\u000f\u002f\uffff",
DFA127_maxS:
"\u0001\u00d9\u002f\uffff",
DFA127_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002d\uffff",
DFA127_specialS:
"\u0030\uffff}>",
DFA127_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0002\u0001\u000f\u0002\u0002\uffff\u0011\u0002"+
"\u0009\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA127_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA127_eotS),
DFA127_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA127_eofS),
DFA127_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA127_minS),
DFA127_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA127_maxS),
DFA127_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA127_acceptS),
DFA127_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA127_specialS),
DFA127_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA127_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA127_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA127 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 127;
this.eot = Ham4Parser.DFA127_eot;
this.eof = Ham4Parser.DFA127_eof;
this.min = Ham4Parser.DFA127_min;
this.max = Ham4Parser.DFA127_max;
this.accept = Ham4Parser.DFA127_accept;
this.special = Ham4Parser.DFA127_special;
this.transition = Ham4Parser.DFA127_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA127, org.antlr.runtime.DFA, {
getDescription: function() {
return "3253:13: ( size )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA128_eotS:
"\u002f\uffff",
DFA128_eofS:
"\u0001\u0003\u002e\uffff",
DFA128_minS:
"\u0001\u000f\u002e\uffff",
DFA128_maxS:
"\u0001\u00d9\u002e\uffff",
DFA128_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u002b\uffff",
DFA128_specialS:
"\u002f\uffff}>",
DFA128_transitionS: [
"\u0001\u0003\u0033\uffff\u0003\u0003\u0008\uffff\u0001\u0003"+
"\u0004\uffff\u0025\u0003\u0001\uffff\u0006\u0003\u0006\uffff"+
"\u0015\u0003\u0002\uffff\u0004\u0001\u0002\u0002\u0009\u0003"+
"\u0002\uffff\u0011\u0003\u0009\uffff\u0013\u0003",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA128_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA128_eotS),
DFA128_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA128_eofS),
DFA128_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA128_minS),
DFA128_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA128_maxS),
DFA128_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA128_acceptS),
DFA128_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA128_specialS),
DFA128_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA128_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA128_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA128 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 128;
this.eot = Ham4Parser.DFA128_eot;
this.eof = Ham4Parser.DFA128_eof;
this.min = Ham4Parser.DFA128_min;
this.max = Ham4Parser.DFA128_max;
this.accept = Ham4Parser.DFA128_accept;
this.special = Ham4Parser.DFA128_special;
this.transition = Ham4Parser.DFA128_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA128, org.antlr.runtime.DFA, {
getDescription: function() {
return "3254:13: ( arckind | zigzag )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA129_eotS:
"\u0032\uffff",
DFA129_eofS:
"\u0001\u0002\u0031\uffff",
DFA129_minS:
"\u0001\u000f\u0031\uffff",
DFA129_maxS:
"\u0001\u00d9\u0031\uffff",
DFA129_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002f\uffff",
DFA129_specialS:
"\u0032\uffff}>",
DFA129_transitionS: [
"\u0001\u0002\u0001\uffff\u0009\u0002\u0029\uffff\u0003\u0002"+
"\u0008\uffff\u0001\u0002\u0004\uffff\u0025\u0002\u0001\uffff"+
"\u0006\u0002\u0006\uffff\u0015\u0002\u0002\u0001\u0006\uffff"+
"\u001c\u0002\u0002\uffff\u0004\u0002\u0003\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA129_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA129_eotS),
DFA129_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA129_eofS),
DFA129_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA129_minS),
DFA129_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA129_maxS),
DFA129_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA129_acceptS),
DFA129_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA129_specialS),
DFA129_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA129_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA129_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA129 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 129;
this.eot = Ham4Parser.DFA129_eot;
this.eof = Ham4Parser.DFA129_eof;
this.min = Ham4Parser.DFA129_min;
this.max = Ham4Parser.DFA129_max;
this.accept = Ham4Parser.DFA129_accept;
this.special = Ham4Parser.DFA129_special;
this.transition = Ham4Parser.DFA129_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA129, org.antlr.runtime.DFA, {
getDescription: function() {
return "3261:13: ( size )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA130_eotS:
"\u0031\uffff",
DFA130_eofS:
"\u0001\u0003\u0030\uffff",
DFA130_minS:
"\u0001\u000f\u0030\uffff",
DFA130_maxS:
"\u0001\u00d9\u0030\uffff",
DFA130_acceptS:
"\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0002\u002d\uffff",
DFA130_specialS:
"\u0031\uffff}>",
DFA130_transitionS: [
"\u0001\u0003\u0001\uffff\u0009\u0001\u0029\uffff\u0003\u0003"+
"\u0008\uffff\u0001\u0003\u0004\uffff\u0025\u0003\u0001\uffff"+
"\u0006\u0003\u0006\uffff\u0015\u0003\u0008\uffff\u001c\u0003"+
"\u0002\uffff\u0004\u0003\u0003\uffff\u0013\u0003",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA130_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA130_eotS),
DFA130_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA130_eofS),
DFA130_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA130_minS),
DFA130_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA130_maxS),
DFA130_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA130_acceptS),
DFA130_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA130_specialS),
DFA130_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA130_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA130_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA130 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 130;
this.eot = Ham4Parser.DFA130_eot;
this.eof = Ham4Parser.DFA130_eof;
this.min = Ham4Parser.DFA130_min;
this.max = Ham4Parser.DFA130_max;
this.accept = Ham4Parser.DFA130_accept;
this.special = Ham4Parser.DFA130_special;
this.transition = Ham4Parser.DFA130_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA130, org.antlr.runtime.DFA, {
getDescription: function() {
return "3262:13: ( revolutions )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA131_eotS:
"\u002f\uffff",
DFA131_eofS:
"\u0001\u0002\u002e\uffff",
DFA131_minS:
"\u0001\u000f\u002e\uffff",
DFA131_maxS:
"\u0001\u00d9\u002e\uffff",
DFA131_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002c\uffff",
DFA131_specialS:
"\u002f\uffff}>",
DFA131_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0008\uffff\u001c\u0002\u0002\uffff\u0004\u0001"+
"\u0003\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA131_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA131_eotS),
DFA131_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA131_eofS),
DFA131_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA131_minS),
DFA131_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA131_maxS),
DFA131_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA131_acceptS),
DFA131_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA131_specialS),
DFA131_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA131_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA131_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA131 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 131;
this.eot = Ham4Parser.DFA131_eot;
this.eof = Ham4Parser.DFA131_eof;
this.min = Ham4Parser.DFA131_min;
this.max = Ham4Parser.DFA131_max;
this.accept = Ham4Parser.DFA131_accept;
this.special = Ham4Parser.DFA131_special;
this.transition = Ham4Parser.DFA131_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA131, org.antlr.runtime.DFA, {
getDescription: function() {
return "3263:13: ( ellipse )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA132_eotS:
"\u002e\uffff",
DFA132_eofS:
"\u0001\u0002\u002d\uffff",
DFA132_minS:
"\u0001\u000f\u002d\uffff",
DFA132_maxS:
"\u0001\u00d9\u002d\uffff",
DFA132_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002b\uffff",
DFA132_specialS:
"\u002e\uffff}>",
DFA132_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0008\uffff\u0009\u0002\u0002\u0001\u0011\u0002"+
"\u0009\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA132_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA132_eotS),
DFA132_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA132_eofS),
DFA132_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA132_minS),
DFA132_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA132_maxS),
DFA132_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA132_acceptS),
DFA132_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA132_specialS),
DFA132_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA132_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA132_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA132 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 132;
this.eot = Ham4Parser.DFA132_eot;
this.eof = Ham4Parser.DFA132_eof;
this.min = Ham4Parser.DFA132_min;
this.max = Ham4Parser.DFA132_max;
this.accept = Ham4Parser.DFA132_accept;
this.special = Ham4Parser.DFA132_special;
this.transition = Ham4Parser.DFA132_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA132, org.antlr.runtime.DFA, {
getDescription: function() {
return "3264:13: ( sizechangenonlinear )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA133_eotS:
"\u002e\uffff",
DFA133_eofS:
"\u0001\u0002\u002d\uffff",
DFA133_minS:
"\u0001\u000f\u002d\uffff",
DFA133_maxS:
"\u0001\u00d9\u002d\uffff",
DFA133_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002b\uffff",
DFA133_specialS:
"\u002e\uffff}>",
DFA133_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0002\u0001\u0006\uffff\u0009\u0002\u0002\uffff"+
"\u0011\u0002\u0009\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA133_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA133_eotS),
DFA133_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA133_eofS),
DFA133_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA133_minS),
DFA133_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA133_maxS),
DFA133_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA133_acceptS),
DFA133_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA133_specialS),
DFA133_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA133_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA133_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA133 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 133;
this.eot = Ham4Parser.DFA133_eot;
this.eof = Ham4Parser.DFA133_eof;
this.min = Ham4Parser.DFA133_min;
this.max = Ham4Parser.DFA133_max;
this.accept = Ham4Parser.DFA133_accept;
this.special = Ham4Parser.DFA133_special;
this.transition = Ham4Parser.DFA133_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA133, org.antlr.runtime.DFA, {
getDescription: function() {
return "3267:13: ( size )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA134_eotS:
"\u002e\uffff",
DFA134_eofS:
"\u0001\u0002\u002d\uffff",
DFA134_minS:
"\u0001\u000f\u002d\uffff",
DFA134_maxS:
"\u0001\u00d9\u002d\uffff",
DFA134_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u002b\uffff",
DFA134_specialS:
"\u002e\uffff}>",
DFA134_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0002\u0001\u0006\uffff\u0009\u0002\u0002\uffff"+
"\u0011\u0002\u0009\uffff\u0013\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA134_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA134_eotS),
DFA134_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA134_eofS),
DFA134_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA134_minS),
DFA134_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA134_maxS),
DFA134_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA134_acceptS),
DFA134_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA134_specialS),
DFA134_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA134_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA134_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA134 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 134;
this.eot = Ham4Parser.DFA134_eot;
this.eof = Ham4Parser.DFA134_eof;
this.min = Ham4Parser.DFA134_min;
this.max = Ham4Parser.DFA134_max;
this.accept = Ham4Parser.DFA134_accept;
this.special = Ham4Parser.DFA134_special;
this.transition = Ham4Parser.DFA134_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA134, org.antlr.runtime.DFA, {
getDescription: function() {
return "3270:13: ( size )?";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA136_eotS:
"\u002e\uffff",
DFA136_eofS:
"\u0001\u0002\u002d\uffff",
DFA136_minS:
"\u0001\u000f\u0001\u0000\u002c\uffff",
DFA136_maxS:
"\u0001\u00d9\u0001\u0000\u002c\uffff",
DFA136_acceptS:
"\u0002\uffff\u0001\u0002\u002a\uffff\u0001\u0001",
DFA136_specialS:
"\u0001\uffff\u0001\u0000\u002c\uffff}>",
DFA136_transitionS: [
"\u0001\u0002\u0033\uffff\u0003\u0002\u0008\uffff\u0001\u0002"+
"\u0004\uffff\u0025\u0002\u0001\uffff\u0006\u0002\u0006\uffff"+
"\u0015\u0002\u0008\uffff\u0009\u0002\u0002\uffff\u000d\u0002"+
"\u0001\u0001\u0003\u0002\u0009\uffff\u0013\u0002",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA136_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA136_eotS),
DFA136_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA136_eofS),
DFA136_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA136_minS),
DFA136_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA136_maxS),
DFA136_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA136_acceptS),
DFA136_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA136_specialS),
DFA136_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA136_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA136_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA136 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 136;
this.eot = Ham4Parser.DFA136_eot;
this.eof = Ham4Parser.DFA136_eof;
this.min = Ham4Parser.DFA136_min;
this.max = Ham4Parser.DFA136_max;
this.accept = Ham4Parser.DFA136_accept;
this.special = Ham4Parser.DFA136_special;
this.transition = Ham4Parser.DFA136_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA136, org.antlr.runtime.DFA, {
getDescription: function() {
return "3276:9: ( ( HamSeqbegin HamBrushing )=> brushingcontact )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA136_1 = input.LA(1);
var index136_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred37_Ham4Parser()) ) {s = 45;}
else if ( (true) ) {s = 2;}
input.seek(index136_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 136, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA137_eotS:
"\u002e\uffff",
DFA137_eofS:
"\u0001\u0003\u002d\uffff",
DFA137_minS:
"\u0001\u000f\u0002\u0000\u002b\uffff",
DFA137_maxS:
"\u0001\u00d9\u0002\u0000\u002b\uffff",
DFA137_acceptS:
"\u0003\uffff\u0001\u0002\u0029\uffff\u0001\u0001",
DFA137_specialS:
"\u0001\uffff\u0001\u0000\u0001\u0001\u002b\uffff}>",
DFA137_transitionS: [
"\u0001\u0003\u0033\uffff\u0003\u0003\u0008\uffff\u0001\u0003"+
"\u0004\uffff\u001e\u0003\u0001\u0001\u0004\u0002\u0002\u0003"+
"\u0001\uffff\u0006\u0003\u0006\uffff\u0015\u0003\u0008\uffff"+
"\u0009\u0003\u0002\uffff\u0011\u0003\u0009\uffff\u0013\u0003",
"\u0001\uffff",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA137_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA137_eotS),
DFA137_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA137_eofS),
DFA137_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA137_minS),
DFA137_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA137_maxS),
DFA137_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA137_acceptS),
DFA137_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA137_specialS),
DFA137_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA137_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA137_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA137 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 137;
this.eot = Ham4Parser.DFA137_eot;
this.eof = Ham4Parser.DFA137_eof;
this.min = Ham4Parser.DFA137_min;
this.max = Ham4Parser.DFA137_max;
this.accept = Ham4Parser.DFA137_accept;
this.special = Ham4Parser.DFA137_special;
this.transition = Ham4Parser.DFA137_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA137, org.antlr.runtime.DFA, {
getDescription: function() {
return "3281:9: ( ( locationindexdefine )=> locationindexdefine )?";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA137_1 = input.LA(1);
var index137_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred38_Ham4Parser()) ) {s = 45;}
else if ( (true) ) {s = 3;}
input.seek(index137_1);
if ( s>=0 ) return s;
break;
case 1 : 
var LA137_2 = input.LA(1);
var index137_2 = input.index();
input.rewind();
s = -1;
if ( (this.synpred38_Ham4Parser()) ) {s = 45;}
else if ( (true) ) {s = 3;}
input.seek(index137_2);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 137, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA157_eotS:
"\u0041\uffff",
DFA157_eofS:
"\u0001\u0002\u0040\uffff",
DFA157_minS:
"\u0001\u000f\u0001\u0000\u003f\uffff",
DFA157_maxS:
"\u0001\u00d9\u0001\u0000\u003f\uffff",
DFA157_acceptS:
"\u0002\uffff\u0001\u0002\u003d\uffff\u0001\u0001",
DFA157_specialS:
"\u0001\uffff\u0001\u0000\u003f\uffff}>",
DFA157_transitionS: [
"\u0001\u0002\u0021\uffff\u001e\u0002\u0004\uffff\u0025\u0002"+
"\u0001\uffff\u0006\u0002\u0006\uffff\u0015\u0002\u0008\uffff"+
"\u0001\u0002\u0001\u0001\u0007\u0002\u0002\uffff\u0011\u0002"+
"\u0009\uffff\u0013\u0002",
"\u0001\uffff",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA157_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA157_eotS),
DFA157_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA157_eofS),
DFA157_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA157_minS),
DFA157_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA157_maxS),
DFA157_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA157_acceptS),
DFA157_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA157_specialS),
DFA157_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA157_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA157_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA157 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 157;
this.eot = Ham4Parser.DFA157_eot;
this.eof = Ham4Parser.DFA157_eof;
this.min = Ham4Parser.DFA157_min;
this.max = Ham4Parser.DFA157_max;
this.accept = Ham4Parser.DFA157_accept;
this.special = Ham4Parser.DFA157_special;
this.transition = Ham4Parser.DFA157_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA157, org.antlr.runtime.DFA, {
getDescription: function() {
return "3547:13: ( ( splitreplacetail )=> splitreplacetail | ( extfidir1 )? ( palmor1 )? )";
},
specialStateTransition: function(s, input) {
var _s = s;
/* bind to recognizer so semantic predicates can be evaluated */
var retval = (function(s, input) {
switch ( s ) {
case 0 : 
var LA157_1 = input.LA(1);
var index157_1 = input.index();
input.rewind();
s = -1;
if ( (this.synpred39_Ham4Parser()) ) {s = 64;}
else if ( (true) ) {s = 2;}
input.seek(index157_1);
if ( s>=0 ) return s;
break;
}
}).call(this.recognizer, s, input);
if (!org.antlr.lang.isUndefined(retval)) {
return retval;
}
if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
var nvae =
new org.antlr.runtime.NoViableAltException(this.getDescription(), 157, _s, input);
this.error(nvae);
throw nvae;
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA171_eotS:
"\u0013\uffff",
DFA171_eofS:
"\u0013\uffff",
DFA171_minS:
"\u0001\u0031\u0012\uffff",
DFA171_maxS:
"\u0001\u0042\u0012\uffff",
DFA171_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001"+
"\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001"+
"\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u0001"+
"\u0011\u0001\u0012",
DFA171_specialS:
"\u0013\uffff}>",
DFA171_transitionS: [
"\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005"+
"\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a"+
"\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f"+
"\u0001\u0010\u0001\u0011\u0001\u0012",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA171_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA171_eotS),
DFA171_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA171_eofS),
DFA171_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA171_minS),
DFA171_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA171_maxS),
DFA171_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA171_acceptS),
DFA171_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA171_specialS),
DFA171_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA171_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA171_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA171 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 171;
this.eot = Ham4Parser.DFA171_eot;
this.eof = Ham4Parser.DFA171_eof;
this.min = Ham4Parser.DFA171_min;
this.max = Ham4Parser.DFA171_max;
this.accept = Ham4Parser.DFA171_accept;
this.special = Ham4Parser.DFA171_special;
this.transition = Ham4Parser.DFA171_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA171, org.antlr.runtime.DFA, {
getDescription: function() {
return "3972:5: ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) )";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA173_eotS:
"\u0011\uffff",
DFA173_eofS:
"\u0011\uffff",
DFA173_minS:
"\u0001\u0044\u0010\uffff",
DFA173_maxS:
"\u0001\u0065\u0010\uffff",
DFA173_acceptS:
"\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001"+
"\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001"+
"\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010",
DFA173_specialS:
"\u0011\uffff}>",
DFA173_transitionS: [
"\u0001\u0006\u0001\u000c\u000d\uffff\u0001\u0007\u0001\u0008"+
"\u0001\u000f\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003"+
"\u0001\u0004\u0001\u0008\u0001\u0005\u0002\uffff\u0001\u0008"+
"\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000d\u0001\u000e"+
"\u0001\u0010",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA173_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA173_eotS),
DFA173_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA173_eofS),
DFA173_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA173_minS),
DFA173_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA173_maxS),
DFA173_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA173_acceptS),
DFA173_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA173_specialS),
DFA173_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA173_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA173_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA173 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 173;
this.eot = Ham4Parser.DFA173_eot;
this.eof = Ham4Parser.DFA173_eof;
this.min = Ham4Parser.DFA173_min;
this.max = Ham4Parser.DFA173_max;
this.accept = Ham4Parser.DFA173_accept;
this.special = Ham4Parser.DFA173_special;
this.transition = Ham4Parser.DFA173_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA173, org.antlr.runtime.DFA, {
getDescription: function() {
return "4159:5: ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamNose | HamNostrils | HamTongue | ( ( HamEyes | HamLips | HamTeeth ) ( HamDoublebent | HamDoublehooked )? ) | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach )";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA180_eotS:
"\u000c\uffff",
DFA180_eofS:
"\u000c\uffff",
DFA180_minS:
"\u0001\u000f\u000b\uffff",
DFA180_maxS:
"\u0001\u00d9\u000b\uffff",
DFA180_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA180_specialS:
"\u000c\uffff}>",
DFA180_transitionS: [
"\u0001\u0001\u003e\uffff\u0001\u0002\u0036\uffff\u0015\u0002"+
"\u0008\uffff\u0002\u0002\u0001\uffff\u0006\u0002\u000f\uffff"+
"\u0001\u0002\u000c\uffff\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA180_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA180_eotS),
DFA180_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA180_eofS),
DFA180_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA180_minS),
DFA180_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA180_maxS),
DFA180_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA180_acceptS),
DFA180_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA180_specialS),
DFA180_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA180_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA180_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA180 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 180;
this.eot = Ham4Parser.DFA180_eot;
this.eof = Ham4Parser.DFA180_eof;
this.min = Ham4Parser.DFA180_min;
this.max = Ham4Parser.DFA180_max;
this.accept = Ham4Parser.DFA180_accept;
this.special = Ham4Parser.DFA180_special;
this.transition = Ham4Parser.DFA180_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA180, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2518:27: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA181_eotS:
"\u000c\uffff",
DFA181_eofS:
"\u000c\uffff",
DFA181_minS:
"\u0001\u004e\u000b\uffff",
DFA181_maxS:
"\u0001\u00d9\u000b\uffff",
DFA181_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA181_specialS:
"\u000c\uffff}>",
DFA181_transitionS: [
"\u0001\u0002\u0036\uffff\u0015\u0002\u0008\uffff\u0002\u0002"+
"\u0001\u0001\u0006\u0002\u000f\uffff\u0001\u0002\u000c\uffff"+
"\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA181_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA181_eotS),
DFA181_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA181_eofS),
DFA181_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA181_minS),
DFA181_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA181_maxS),
DFA181_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA181_acceptS),
DFA181_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA181_specialS),
DFA181_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA181_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA181_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA181 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 181;
this.eot = Ham4Parser.DFA181_eot;
this.eof = Ham4Parser.DFA181_eof;
this.min = Ham4Parser.DFA181_min;
this.max = Ham4Parser.DFA181_max;
this.accept = Ham4Parser.DFA181_accept;
this.special = Ham4Parser.DFA181_special;
this.transition = Ham4Parser.DFA181_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA181, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2519:15: ( action1 )+";
},
dummy: null
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA182_eotS:
"\u000c\uffff",
DFA182_eofS:
"\u000c\uffff",
DFA182_minS:
"\u0001\u000f\u000b\uffff",
DFA182_maxS:
"\u0001\u00d9\u000b\uffff",
DFA182_acceptS:
"\u0001\uffff\u0001\u0002\u0001\u0001\u0009\uffff",
DFA182_specialS:
"\u000c\uffff}>",
DFA182_transitionS: [
"\u0001\u0001\u003e\uffff\u0001\u0002\u0036\uffff\u0015\u0002"+
"\u0008\uffff\u0002\u0002\u0001\uffff\u0006\u0002\u000f\uffff"+
"\u0001\u0002\u000c\uffff\u0006\u0002\u0001\uffff\u000c\u0002",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""
]
});
org.antlr.lang.augmentObject(Ham4Parser, {
DFA182_eot:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA182_eotS),
DFA182_eof:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA182_eofS),
DFA182_min:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA182_minS),
DFA182_max:
org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(Ham4Parser.DFA182_maxS),
DFA182_accept:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA182_acceptS),
DFA182_special:
org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA182_specialS),
DFA182_transition: (function() {
var a = [],
i,
numStates = Ham4Parser.DFA182_transitionS.length;
for (i=0; i<numStates; i++) {
a.push(org.antlr.runtime.DFA.unpackEncodedString(Ham4Parser.DFA182_transitionS[i]));
}
return a;
})()
});
Ham4Parser.DFA182 = function(recognizer) {
this.recognizer = recognizer;
this.decisionNumber = 182;
this.eot = Ham4Parser.DFA182_eot;
this.eof = Ham4Parser.DFA182_eof;
this.min = Ham4Parser.DFA182_min;
this.max = Ham4Parser.DFA182_max;
this.accept = Ham4Parser.DFA182_accept;
this.special = Ham4Parser.DFA182_special;
this.transition = Ham4Parser.DFA182_transition;
};
org.antlr.lang.extend(Ham4Parser.DFA182, org.antlr.runtime.DFA, {
getDescription: function() {
return "()+ loopback of 2523:27: ( action1t )+";
},
dummy: null
});
// public class variables
org.antlr.lang.augmentObject(Ham4Parser, {
tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "WS", "HamTab", "HamLinefeed", "HamPagebreak", "HamReturn", "HamVersion40", "HamSpace", "HamExclaim", "HamQuery", "HamFullstop", "HamComma", "HamPlus", "HamMetaalt", "HamClocku", "HamClockul", "HamClockl", "HamClockdl", "HamClockd", "HamClockdr", "HamClockr", "HamClockur", "HamClockfull", "HamSymmpar", "HamSymmlr", "HamFist", "HamFlathand", "HamFinger2", "HamFinger23", "HamFinger23spread", "HamFinger2345", "HamThumboutmod", "HamThumbacrossmod", "HamPinch12", "HamPinchall", "HamPinch12open", "HamCee12", "HamCeeall", "HamCee12open", "HamThumbopenmod", "HamFingerstraightmod", "HamFingerbendmod", "HamFingerhookedmod", "HamNondominant", "HamDoublebent", "HamDoublehooked", "HamExtfingeru", "HamExtfingerur", "HamExtfingerr", "HamExtfingerdr", "HamExtfingerd", "HamExtfingerdl", "HamExtfingerl", "HamExtfingerul", "HamExtfingerol", "HamExtfingero", "HamExtfingeror", "HamExtfingeril", "HamExtfingeri", "HamExtfingerir", "HamExtfingerui", "HamExtfingerdi", "HamExtfingerdo", "HamExtfingeruo", "HamEarlobe", "HamNostrils", "HamShouldertop", "HamPalmu", "HamPalmur", "HamPalmr", "HamPalmdr", "HamPalmd", "HamPalmdl", "HamPalml", "HamPalmul", "HamReplace", "HamArmextended", "HamBehind", "HamEtc", "HamOrirelative", "HamTongue", "HamTeeth", "HamStomach", "HamNeutralspace", "HamHead", "HamHeadtop", "HamForehead", "HamEyebrows", "HamEyes", "HamNose", "HamEar", "HamCheek", "HamLips", "HamChin", "HamUnderchin", "HamNeck", "HamShoulders", "HamChest", "HamBelowstomach", "HamLrbeside", "HamLrat", "HamUpperarm", "HamElbow", "HamElbowinside", "HamLowerarm", "HamWristback", "HamWristpulse", "HamThumbball", "HamPalm", "HamHandback", "HamThumb", "HamIndexfinger", "HamMiddlefinger", "HamRingfinger", "HamPinky", "HamThumbside", "HamPinkyside", "HamBetween", "HamFingertip", "HamFingernail", "HamFingerpad", "HamFingermidjoint", "HamFingerbase", "HamFingerside", "HamWristtopulse", "HamWristtoback", "HamWristtothumb", "HamWristtopinky", "HamCoreftag", "HamCorefref", "HamNomotion", "HamMoveu", "HamMoveur", "HamMover", "HamMovedr", "HamMoved", "HamMovedl", "HamMovel", "HamMoveul", "HamMoveol", "HamMoveo", "HamMoveor", "HamMoveil", "HamMovei", "HamMoveir", "HamMoveui", "HamMovedi", "HamMovedo", "HamMoveuo", "HamMovecross", "HamMovex", "HamSmallmod", "HamLargemod", "HamArcl", "HamArcu", "HamArcr", "HamArcd", "HamWavy", "HamZigzag", "HamFingerplay", "HamParbegin", "HamParend", "HamCircleo", "HamCirclei", "HamCircled", "HamCircleu", "HamCirclel", "HamCircler", "HamIncreasing", "HamDecreasing", "HamClose", "HamTouch", "HamInterlock", "HamCross", "HamFast", "HamSlow", "HamTense", "HamRest", "HamHalt", "HamRepeatfromstart", "HamRepeatfromstartseveral", "HamRepeatcontinue", "HamRepeatcontinueseveral", "HamSeqbegin", "HamSeqend", "HamAlternatingmotion", "HamRepeatreverse", "HamBrushing", "HamNonipsi", "HamEllipseh", "HamEllipseur", "HamEllipsev", "HamEllipseul", "HamMime", "HamAltbegin", "HamAltend", "HamNodding", "HamSwinging", "HamTwisting", "HamStircw", "HamStirccw", "HamFusionbegin", "HamFusionend", "HamCircleul", "HamCircledr", "HamCircleur", "HamCircledl", "HamCircleol", "HamCircleir", "HamCircleor", "HamCircleil", "HamCircledo", "HamCircleui", "HamCircledi", "HamCircleuo", "HamNbs", "HAMSIGNS", "SIGN2", "SIGN1", "ICFG2", "ICFG1", "NMICLIST", "NMICUNIT", "MICFG2", "MICFG1", "HDCONFIG2", "HDCONFIG1", "SPLITHDCFG2", "HDCFGTAIL2", "HSHAPE2", "HSHAPE1", "BASICHDSHP1", "BASICHDSHP", "HSCLASS", "FIBENDING", "THUMBPOS", "FINGERLIST", "FISHPLIST", "FICRSSLIST", "FSHAPE", "FCROSSING", "THSPECIAL", "EXTFIDIR2", "EXTFIDIR1", "EXTFIDIR", "PALMOR2", "PALMOR1", "LOC2", "LOC1", "LOCTNBODYARM", "LOCTNBODY", "LOCTNHAND", "LOCTNARM", "LEVBODY", "LEVHAND", "LEVARM", "HCONSTLLN", "CNTCTBODY", "CNTCTHAND", "CNTCTOFHAND", "A2TLIST", "A1TLIST", "A1LIST", "ACTION2T", "ACTION1T", "ACTION2", "ACTION1", "PARACT2T", "SEQACT2T", "SPLITACT2LOC2", "SPLITACT2T", "PARACT1T", "SEQACT1T", "NMACT1T", "PARACT1", "REPETITIONS", "SIMPLEMVMT", "STRGHTMVMT", "CRCLRMVMT", "REPLACE", "SPLITREPLACETL", "REPLACETAIL1", "HSFINGERITEM", "LOCBODY", "MOVINGREPETITION", "SEQACT1", "SEQFUSEDACT2T", "SEQFUSEDACT1T", "SEQFUSEDACT1", "CNTCTOHHAND", "CNTCTOHARM"],
FOLLOW_hamsignseq_in_hamsinglesign747: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
FOLLOW_EOF_in_hamsinglesign757: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_sign2or1_in_hamsignseq831: new org.antlr.runtime.BitSet([0x00008002, 0x00000000]),
FOLLOW_HamPlus_in_hamsignseq863: new org.antlr.runtime.BitSet([0xFC000000, 0x000043F3,0x00000000, 0x00000000,0x00000020, 0x04000008]),
FOLLOW_sign2or1_in_hamsignseq883: new org.antlr.runtime.BitSet([0x00008002, 0x00000000]),
FOLLOW_nondomsign1_in_sign2or1970: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_sign2_in_sign2or1986: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_symmoperator_in_sign21027: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000008]),
FOLLOW_initialconfig2_in_sign21037: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a2tstar_in_sign21047: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_initialconfig2_in_sign21083: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a1tstar_in_sign21093: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNomotion_in_sign21162: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
FOLLOW_HamNondominant_in_sign21172: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_initialconfig1_in_sign21182: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a1tstar_in_sign21192: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNomotion_in_sign21230: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_initialconfig1_in_sign21240: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a1tstar_in_sign21250: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNondominant_in_nondomsign11305: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_initialconfig1_in_nondomsign11315: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a1tstar_in_nondomsign11325: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_symmoperator1383: new org.antlr.runtime.BitSet([0x00000002, 0x00000800,0x00000000, 0x00000000,0x08000000, 0x90000000]),
FOLLOW_HamFingerstraightmod_in_symmoperator1455: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x90000000]),
FOLLOW_HamLargemod_in_symmoperator1471: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamLargemod_in_symmoperator1498: new org.antlr.runtime.BitSet([0x00000002, 0x00000800,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamFingerstraightmod_in_symmoperator1514: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamAlternatingmotion_in_symmoperator1540: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x80000000]),
FOLLOW_HamNonipsi_in_symmoperator1555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_nminitialconfig_in_initialconfig21592: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000008]),
FOLLOW_minitialconfig2_in_initialconfig21605: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_nminitialconfig_in_initialconfig11664: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_minitialconfig1_in_initialconfig11677: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_nmicunit_in_nminitialconfig1748: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_HamSeqbegin_in_nmicunit1811: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x00000FFF]),
FOLLOW_levelbody_in_nmicunit1842: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_levelarm_in_nmicunit1864: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_nmicunit1884: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_nmicunit1894: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconfig2_in_minitialconfig21992: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x0401E008]),
FOLLOW_location2_in_minitialconfig22048: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_minitialconfig22094: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_handconfig1_in_minitialconfig22105: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_HamPlus_in_minitialconfig22161: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_location1_in_minitialconfig22176: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_minitialconfig22190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_location1_in_minitialconfig22237: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_minitialconfig22251: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x00000010]),
FOLLOW_location1_in_minitialconfig22270: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_minitialconfig22287: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconfig1_in_minitialconfig12364: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_location1_in_minitialconfig12376: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape2_in_handconfig22484: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_handconfigtail2_in_handconfig22494: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape2_in_handconfig22552: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splithandconfig2_in_handconfig22584: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape1_in_handconfig12636: new org.antlr.runtime.BitSet([0x00000002, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_handconfig12660: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_handconfig12674: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splithandconfig22747: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_handconfig1_in_splithandconfig22758: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splithandconfig22768: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_handconfig1_in_splithandconfig22779: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splithandconfig22789: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir2_in_handconfigtail22881: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_palmor2_in_handconfigtail22891: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_handconfigtail22921: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_handconfigtail22934: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_handconfigtail22946: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_handconfigtail22956: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_handconfigtail22969: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_handconfigtail22981: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_handconfigtail22991: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape1_in_handshape23064: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_handshape23096: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3]),
FOLLOW_handshape1_in_handshape23111: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_handshape23121: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3]),
FOLLOW_handshape1_in_handshape23136: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_handshape23146: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_basichandshape1_in_handshape13203: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_cautiousfingerlist_in_handshape13268: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingershapelist_in_handshape13282: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingercrossinglist_in_handshape13296: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_thumbbetweenexplicit_in_handshape13310: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_cautiousfingerlist_in_handshape13394: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingershapelist_in_handshape13408: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingercrossinglist_in_handshape13422: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x7F3E0000]),
FOLLOW_thumbspecial_in_handshape13446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerlist_in_handshape13533: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingershapelist_in_handshape13547: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingercrossinglist_in_handshape13561: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7F3E0000]),
FOLLOW_thumbbetweendefault_in_handshape13577: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbextra_in_handshape13581: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerlist_in_handshape13620: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingershapelist_in_handshape13634: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_fingercrossinglist_in_handshape13648: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_basichandshape_in_basichandshape13758: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_basichandshape13823: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3]),
FOLLOW_basichandshape_in_basichandshape13838: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshapeclass_in_basichandshape3909: new org.antlr.runtime.BitSet([0x00000002, 0x0001BC0C,0x00020000, 0x00000000]),
FOLLOW_HamNondominant_in_basichandshape3933: new org.antlr.runtime.BitSet([0x00000002, 0x0001BC0C,0x00020000, 0x00000000]),
FOLLOW_HamEtc_in_basichandshape3955: new org.antlr.runtime.BitSet([0x00000002, 0x0001BC0C]),
FOLLOW_handbendandthumb_in_basichandshape3968: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbpos_in_handbendandthumb4039: new org.antlr.runtime.BitSet([0x00000002, 0x0001BC0C]),
FOLLOW_fingerbending_in_handbendandthumb4051: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerbending_in_handbendandthumb4070: new org.antlr.runtime.BitSet([0x00000002, 0x0000040C]),
FOLLOW_thumbpos_in_handbendandthumb4082: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_recfingerlist_in_fingerlist4114: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_recfingerlist4223: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_recfingerlist_in_recfingerlist4237: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_reccautiousfingerlist_in_cautiousfingerlist4277: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_reccautiousfingerlist4380: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_reccautiousfingerlist_in_reccautiousfingerlist4394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_recfingershapelist_in_fingershapelist4434: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingershape_in_recfingershapelist4538: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_recfingershapelist_in_recfingershapelist4552: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_recfingercrossinglist_in_fingercrossinglist4592: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingercrossing_in_recfingercrossinglist4693: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_recfingercrossinglist_in_recfingercrossinglist4707: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_finger_in_hsfingeritem4763: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x00000000]),
FOLLOW_HamLargemod_in_hsfingeritem4775: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumb_in_digit4835: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_finger_in_digit4845: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumb_in_hsdigit4895: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_hsdigit4905: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_digit_in_fingershape4934: new org.antlr.runtime.BitSet([0x00000000, 0x0001BC0C]),
FOLLOW_fingerbending_in_fingershape4944: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_digit_in_fingercrossing5004: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7E000000]),
FOLLOW_fingerpart_in_fingercrossing5014: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_fingercrossing5028: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbbetween_in_thumbspecial5088: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbextra_in_thumbspecial5098: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbbetweenexplicit_in_thumbbetween5127: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbbetweendefault_in_thumbbetween5137: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_finger_in_thumbbetweenexplicit5166: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_thumbbetweenexplicit5176: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_finger_in_thumbbetweenexplicit5187: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamBetween_in_thumbbetweendefault5246: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumb_in_thumbextra5312: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerpart_in_thumbextra5328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir1_in_extfidir25394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splitextfidir2_in_extfidir25410: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splitextfidir25461: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_splitextfidir25473: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splitextfidir25483: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_splitextfidir25495: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splitextfidir25505: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir_in_extfidir15536: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00040000, 0x01000000]),
FOLLOW_HamBetween_in_extfidir15560: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir_in_extfidir15574: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamOrirelative_in_extfidir15609: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_palmor1_in_palmor25684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splitpalmor2_in_palmor25700: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splitpalmor25751: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_splitpalmor25763: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splitpalmor25773: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_splitpalmor25785: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splitpalmor25795: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_palmor_in_palmor15826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00060000, 0x01000000]),
FOLLOW_HamBetween_in_palmor15850: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor_in_palmor15864: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamEtc_in_palmor15888: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamOrirelative_in_palmor15923: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_location1as2_in_location26001: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_location2not1_in_location26017: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_location1_in_location1as26052: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconstellation_in_location2not16133: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFF80038, 0x000000FF]),
FOLLOW_HamNeutralspace_in_location2not16157: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00008000, 0x00000000]),
FOLLOW_HamArmextended_in_location2not16173: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationbody_in_location2not16202: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_location2not16253: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_location1_in_location2not16263: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_location2not16273: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_location1_in_location2not16283: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_location2not16293: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationindexuse_in_location16401: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationhand_in_location16441: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationbodyarm_in_location16457: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_digit_in_locationindexdefine6517: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000008, 0x00000000]),
FOLLOW_HamCoreftag_in_locationindexdefine6527: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_digit_in_locationindexuse6564: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
FOLLOW_HamCorefref_in_locationindexuse6574: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNeutralspace_in_locationbodyarm6617: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00008000, 0x00000000]),
FOLLOW_HamArmextended_in_locationbodyarm6629: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationbody_in_locationbodyarm6672: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationarm_in_locationbodyarm6688: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelcomplexbody_in_locationbody6742: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00018000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_HamBehind_in_locationbody6754: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00008000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_contactbody_in_locationbody6777: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelcomplexhand_in_locationhand6844: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_contacthand_in_locationhand6862: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelcomplexarm_in_locationarm6926: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00018000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_HamBehind_in_locationarm6938: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00008000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_contactbody_in_locationarm6961: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelbody_in_levelcomplexbody7028: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_levelcomplexbody7052: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x000000FF]),
FOLLOW_levelbody_in_levelcomplexbody7068: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelhand_in_levelcomplexhand7108: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_levelcomplexhand7132: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x7EFFF0FF]),
FOLLOW_levelhand_in_levelcomplexhand7148: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelarm_in_levelcomplexarm7188: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_levelcomplexarm7212: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x00000FFF]),
FOLLOW_levelarm_in_levelcomplexarm7228: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locbody_in_levelbody7280: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFBA0038, 0x000000FF]),
FOLLOW_HamEtc_in_levelbody7292: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000000FF]),
FOLLOW_side_in_levelbody7307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locsided_in_levelbody7351: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFBA0038, 0x000000FF]),
FOLLOW_HamEtc_in_levelbody7363: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000000FF]),
FOLLOW_side_in_levelbody7378: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_side_in_levelbody7422: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x0000003F]),
FOLLOW_locbody_in_levelbody7446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
FOLLOW_HamEtc_in_levelbody7462: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locsided_in_levelbody7489: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
FOLLOW_HamEtc_in_levelbody7505: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_lochand_in_levelhand7593: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000180FF]),
FOLLOW_dorsalorpalmar_in_levelhand7605: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000000FF]),
FOLLOW_side_in_levelhand7620: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_side_in_levelhand7660: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7EFFF000]),
FOLLOW_lochand_in_levelhand7670: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00018000]),
FOLLOW_dorsalorpalmar_in_levelhand7682: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locarm_in_levelarm7752: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFBA0038, 0x000180FF]),
FOLLOW_HamEtc_in_levelarm7764: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000180FF]),
FOLLOW_dorsalorpalmar_in_levelarm7779: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0xFFB80038, 0x000000FF]),
FOLLOW_side_in_levelarm7794: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_side_in_levelarm7841: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000F00]),
FOLLOW_locarm_in_levelarm7851: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00018000]),
FOLLOW_HamEtc_in_levelarm7863: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00018000]),
FOLLOW_dorsalorpalmar_in_levelarm7878: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_pcontact_in_contactbody7955: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamArmextended_in_contactbody7971: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_contactofhand_in_contactbody7987: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_pcontact_in_contacthand8056: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_ccontact_in_contacthand8072: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_contactofhand_in_contacthand8088: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_handconstellation8159: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x7EFFF0FF]),
FOLLOW_locationhand_in_handconstellation8174: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_handconstellation8188: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB80038, 0x7EFFF0FF]),
FOLLOW_locationhand_in_handconstellation8203: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_handconstellation8217: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x0401E008]),
FOLLOW_contacthand_in_handconstellation8239: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_contactofhand8299: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x0001E000]),
FOLLOW_pcontact_in_contactofhand8324: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_ccontact_in_contactofhand8348: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_contactohhand_in_contactofhand8414: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_contactoharm_in_contactofhand8438: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_contactofhand8458: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelcomplexhand_in_contactohhand8526: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelcomplexarm_in_contactoharm8583: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handpart_in_lochand8652: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerpart_in_lochand8668: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_lochand8680: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_lochand8701: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x7E3E0000]),
FOLLOW_fingerpart_in_lochand8716: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_a2tlist_in_a2tstar8757: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_a1tlist_in_a1tstar8815: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action2t_in_a2tlist8893: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a2tlist_in_a2tlist8907: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1t_in_a1tlist8967: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_a1tlist_in_a1tlist8981: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1_in_action2t9059: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x0401E008]),
FOLLOW_location2not1_in_action2t9069: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_repetitionsoption_in_action2t9079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1t_in_action2t9143: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splitaction2loc2_in_action2t9258: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_splitaction2t_in_action2t9323: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_paraction2t_in_action2t9347: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_seqaction2t_in_action2t9371: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_seqfusedaction2t_in_action2t9395: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_repetitionsoption_in_action2t9415: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1_in_action1t9555: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x37C1E008]),
FOLLOW_handconstellation_in_action1t9643: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_location1_in_action1t9683: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x37C00000]),
FOLLOW_HamLargemod_in_action1t9707: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_paraction1t_in_action1t9767: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_seqnmoraction1t_in_action1t9791: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_seqfusedaction1t_in_action1t9819: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x37C00000]),
FOLLOW_repetitionsoption_in_action1t9839: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNomotion_in_action110038: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_simplemovement_in_action110073: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_modifier_in_action110099: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x003E0000]),
FOLLOW_HamLargemod_in_action110118: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_specialfingerplaymovement_in_action110199: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_paraction1_in_action110234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_seqaction1_in_action110269: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_seqfusedaction1_in_action110304: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1_in_action1seq10359: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1t_in_action1tseq10387: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamParbegin_in_paraction2t10417: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action2t_in_paraction2t10430: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007FC,0x03FFDF80, 0x00000000]),
FOLLOW_HamParend_in_paraction2t10443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_seqaction2t10502: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action2t_in_seqaction2t10515: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x0C0007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamSeqend_in_seqaction2t10528: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFusionbegin_in_seqfusedaction2t10587: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action2t_in_seqfusedaction2t10600: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFFF80, 0x00000000]),
FOLLOW_HamFusionend_in_seqfusedaction2t10613: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splitaction2loc210672: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1seq_in_splitaction2loc210685: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splitaction2loc210695: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1seq_in_splitaction2loc210707: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splitaction2loc210717: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x0401E008]),
FOLLOW_location2_in_splitaction2loc210728: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splitaction2t10793: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1tseq_in_splitaction2t10806: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splitaction2t10816: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1tseq_in_splitaction2t10828: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splitaction2t10838: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_paraction1t10908: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1t_in_paraction1t10921: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007FC,0x03FFDF80, 0x00000000]),
FOLLOW_HamParend_in_paraction1t10934: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_seqnmoraction1t10999: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFB84038, 0x00000FFF,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_levelbody_in_seqnmoraction1t11048: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_levelarm_in_seqnmoraction1t11078: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1t_in_seqnmoraction1t11106: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_action1t_in_seqnmoraction1t11160: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x0C0007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamSeqend_in_seqnmoraction1t11206: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFusionbegin_in_seqfusedaction1t11251: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1t_in_seqfusedaction1t11264: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFFF80, 0x00000000]),
FOLLOW_HamFusionend_in_seqfusedaction1t11277: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_paraction111341: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_paraction111354: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007FC,0x03FFDF80, 0x00000000]),
FOLLOW_HamParend_in_paraction111367: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_seqaction111431: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_seqaction111444: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x0C0007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamSeqend_in_seqaction111457: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFusionbegin_in_seqfusedaction111521: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_seqfusedaction111534: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFFF80, 0x00000000]),
FOLLOW_HamFusionend_in_seqfusedaction111547: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_repetitions_in_repetitionsoption11668: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_repetitions11748: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00800000]),
FOLLOW_HamRepeatfromstartseveral_in_repetitions11759: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00020000, 0x00000000]),
FOLLOW_HamEtc_in_repetitions11769: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x0000000F, 0x00000000]),
FOLLOW_ellipsedirection_in_repetitions11779: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_repetitions11789: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_repetition_in_repetitions11842: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x33C01800]),
FOLLOW_HamEtc_in_repetitions11874: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_repetition_in_repetitions11906: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_movingrepetition_in_repetitions11945: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_sizechangenonlinear_in_repetitions11967: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions11994: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions12010: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamAlternatingmotion_in_repetitions12071: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions12083: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamAlternatingmotion_in_alternations12140: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_alternations12152: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_movingrepetition12190: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x23C00000]),
FOLLOW_repetition_in_movingrepetition12201: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00FFFFC0, 0x00000000]),
FOLLOW_movementarrow_in_movingrepetition12211: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x08001800]),
FOLLOW_size_in_movingrepetition12223: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08001800]),
FOLLOW_sizechangenonlinear_in_movingrepetition12238: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_movingrepetition12251: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_straightmovement_in_simplemovement12335: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0xFC000000, 0x04000003]),
FOLLOW_size_in_simplemovement12351: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0xF0000000, 0x04000003]),
FOLLOW_arckind_in_simplemovement12386: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_zigzag_in_simplemovement12418: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_circularmovement_in_simplemovement12457: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000,0x00000000, 0x003E0000,0x0C000000, 0x04001800,0x0000000F, 0x00000000]),
FOLLOW_size_in_simplemovement12473: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04001800,0x0000000F, 0x00000000]),
FOLLOW_revolutions_in_simplemovement12492: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04001800,0x0000000F, 0x00000000]),
FOLLOW_ellipse_in_simplemovement12511: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04001800]),
FOLLOW_sizechangenonlinear_in_simplemovement12530: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_movementcross_in_simplemovement12557: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x0C000000, 0x04000000]),
FOLLOW_size_in_simplemovement12573: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_wristmovement_in_simplemovement12600: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x0C000000, 0x04000000]),
FOLLOW_size_in_simplemovement12616: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_replacement_in_simplemovement12643: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_HamFingerplay_in_simplemovement12667: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x04000000]),
FOLLOW_brushingcontact_in_simplemovement12729: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_locationindexdefine_in_simplemovement12824: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_specialfingerplaymovement13023: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_specialfingerplaymovement13036: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x00000004]),
FOLLOW_HamFingerplay_in_specialfingerplaymovement13049: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_specialfingerplaymovement13059: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_movementarrow_in_straightmovement13110: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_straightmovement13134: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00FFFFC0, 0x00000000]),
FOLLOW_movementarrow_in_straightmovement13149: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_movementcircle_in_circularmovement13208: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_HamBetween_in_circularmovement13232: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000007E0,0x03FFC000, 0x00000000]),
FOLLOW_movementcircle_in_circularmovement13247: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_arc_in_arckind13306: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0xFC000000, 0x00000000]),
FOLLOW_arc_in_arckind13318: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_arckind13333: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_zigzag13365: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_size_in_zigzag13425: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_ellipsedirection_in_zigzag13440: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800]),
FOLLOW_sizechangenonlinear_in_zigzag13455: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_sizechange_in_sizechangenonlinear13487: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_sizechangenonlinear13499: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_ellipsedirection_in_ellipse13531: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_ellipse13543: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_clock_in_revolutions13587: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions13611: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions13627: new org.antlr.runtime.BitSet([0x01FE0002, 0x00000000]),
FOLLOW_clock_in_revolutions13653: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions13672: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions13684: new org.antlr.runtime.BitSet([0x01FE0002, 0x00000000]),
FOLLOW_clock_in_revolutions13699: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamReplace_in_replacement13737: new org.antlr.runtime.BitSet([0xF0000000, 0xFFFE43F3,0x00003FC7, 0x00000000,0x00000000, 0x00001808]),
FOLLOW_sizechange_in_replacement13750: new org.antlr.runtime.BitSet([0xF0000000, 0xFFFE43F3,0x00003FC7, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_handshape1_in_replacement13777: new org.antlr.runtime.BitSet([0x00000002, 0xFFFE0000,0x00003FC7, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_splitreplacetail_in_replacement13849: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir1_in_replacement13883: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_replacement13906: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splitreplacetail_in_replacement13981: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir1_in_replacement14029: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_replacement14045: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_palmor1_in_replacement14099: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_splitreplacetail14162: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00003FC7, 0x00000000]),
FOLLOW_replacetail1_in_splitreplacetail14173: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_splitreplacetail14183: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00003FC7, 0x00000000,0x00000020, 0x00000000]),
FOLLOW_HamNomotion_in_splitreplacetail14208: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_replacetail1_in_splitreplacetail14233: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
FOLLOW_HamParend_in_splitreplacetail14253: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir1_in_replacetail114323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00003FC0, 0x00000000]),
FOLLOW_palmor1_in_replacetail114335: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_palmor1_in_replacetail114354: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_brushingcontact14413: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
FOLLOW_HamBrushing_in_brushingcontact14425: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF]),
FOLLOW_location1_in_brushingcontact14435: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_HamSeqend_in_brushingcontact14445: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_handshapeclasstok14481: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshapeclasstok_in_handshapeclass14633: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_fingerbendingtok14676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerbendingtok_in_fingerbending14753: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_thumbpostok14798: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbpostok_in_thumbpos14855: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamThumb_in_thumb14898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_finger0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_fingerpart0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingeru_in_extfidirtok15071: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerur_in_extfidirtok15081: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerr_in_extfidirtok15091: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerdr_in_extfidirtok15101: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerd_in_extfidirtok15111: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerdl_in_extfidirtok15121: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerl_in_extfidirtok15131: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerul_in_extfidirtok15141: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerol_in_extfidirtok15165: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000006, 0x00000000]),
FOLLOW_set_in_extfidirtok15179: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingero_in_extfidirtok15250: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingeror_in_extfidirtok15274: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000006, 0x00000000]),
FOLLOW_set_in_extfidirtok15288: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingeril_in_extfidirtok15373: new org.antlr.runtime.BitSet([0x00000002, 0x80000000,0x00000001, 0x00000000]),
FOLLOW_set_in_extfidirtok15387: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingeri_in_extfidirtok15458: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerir_in_extfidirtok15482: new org.antlr.runtime.BitSet([0x00000002, 0x80000000,0x00000001, 0x00000000]),
FOLLOW_set_in_extfidirtok15496: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerui_in_extfidirtok15581: new org.antlr.runtime.BitSet([0x00000002, 0x50000000]),
FOLLOW_set_in_extfidirtok15595: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerdi_in_extfidirtok15680: new org.antlr.runtime.BitSet([0x00000002, 0x50000000]),
FOLLOW_set_in_extfidirtok15694: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingerdo_in_extfidirtok15779: new org.antlr.runtime.BitSet([0x00000002, 0x0A000000]),
FOLLOW_set_in_extfidirtok15793: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamExtfingeruo_in_extfidirtok15878: new org.antlr.runtime.BitSet([0x00000002, 0x0A000000]),
FOLLOW_set_in_extfidirtok15892: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidirtok_in_extfidir15986: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_palmor0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_locarm0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamHead_in_locbodytok16194: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamHeadtop_in_locbodytok16204: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamForehead_in_locbodytok16214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEyebrows_in_locbodytok16224: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNose_in_locbodytok16234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNostrils_in_locbodytok16244: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamTongue_in_locbodytok16254: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_locbodytok16278: new org.antlr.runtime.BitSet([0x00000002, 0x00018000]),
FOLLOW_set_in_locbodytok16360: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamChin_in_locbodytok16431: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamUnderchin_in_locbodytok16441: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNeck_in_locbodytok16451: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamShouldertop_in_locbodytok16461: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamShoulders_in_locbodytok16471: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamChest_in_locbodytok16481: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamStomach_in_locbodytok16491: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamBelowstomach_in_locbodytok16501: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locbodytok_in_locbody16534: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_locsided0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_handpart0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_side0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_dorsalorpalmar0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_pcontact0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_ccontact0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_sizechange0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_repetition0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_movementarrow0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_movementcross0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_wristmovement0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_movementcircle0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_ellipsedirection0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_clock0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_modifier0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_arc0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_set_in_size0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNondominant_in_synpred1_Ham4Parser946: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_initialconfig1_in_synpred1_Ham4Parser948: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNomotion_in_synpred2_Ham4Parser1136: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
FOLLOW_HamNondominant_in_synpred2_Ham4Parser1138: new org.antlr.runtime.BitSet([0xF0000000, 0x000043F3,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_initialconfig1_in_synpred2_Ham4Parser1140: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelbody_in_synpred3_Ham4Parser1836: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconfig2_in_synpred4_Ham4Parser1970: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_location2_in_synpred5_Ham4Parser2018: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPlus_in_synpred6_Ham4Parser2131: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape2_in_synpred7_Ham4Parser2453: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_HamParbegin_in_synpred7_Ham4Parser2457: new org.antlr.runtime.BitSet([0x00000000, 0xFFFE0000,0x00000007, 0x00000000]),
FOLLOW_extfidir1_in_synpred7_Ham4Parser2462: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handshape2_in_synpred8_Ham4Parser2530: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_extfidir2_in_synpred9_Ham4Parser2859: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_synpred10_Ham4Parser3231: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x013E0000]),
FOLLOW_HamBetween_in_synpred10_Ham4Parser3236: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_finger_in_synpred10_Ham4Parser3238: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsdigit_in_synpred11_Ham4Parser3351: new org.antlr.runtime.BitSet([0x00000000, 0x0001BC0C,0x00000000, 0x7E3E0000]),
FOLLOW_fingerbending_in_synpred11_Ham4Parser3358: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingerpart_in_synpred11_Ham4Parser3362: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbspecial_in_synpred12_Ham4Parser3440: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_synpred13_Ham4Parser3490: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7F3E0000]),
FOLLOW_thumbbetweendefault_in_synpred13_Ham4Parser3497: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_thumbextra_in_synpred13_Ham4Parser3501: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamBetween_in_synpred14_Ham4Parser3784: new org.antlr.runtime.BitSet([0xF0000000, 0x000003F3]),
FOLLOW_handshapeclass_in_synpred14_Ham4Parser3786: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_synpred15_Ham4Parser4193: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_hsfingeritem_in_synpred16_Ham4Parser4348: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_synpred16_Ham4Parser4350: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingershape_in_synpred17_Ham4Parser4508: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_fingercrossing_in_synpred18_Ham4Parser4663: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconstellation_in_synpred19_Ham4Parser6111: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationindexuse_in_synpred20_Ham4Parser6359: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelhand_in_synpred21_Ham4Parser6419: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelbody_in_synpred22_Ham4Parser6650: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_contactbody_in_synpred23_Ham4Parser6771: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_contacthand_in_synpred24_Ham4Parser6857: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_contactbody_in_synpred25_Ham4Parser6955: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelhand_in_synpred26_Ham4Parser8384: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1_in_synpred27_Ham4Parser9035: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x0401E008]),
FOLLOW_location2not1_in_synpred27_Ham4Parser9037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1t_in_synpred28_Ham4Parser9121: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_synpred29_Ham4Parser9194: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_synpred29_Ham4Parser9198: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamPlus_in_synpred29_Ham4Parser9203: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1_in_synpred29_Ham4Parser9221: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007FC,0x03FFDF80, 0x00000000]),
FOLLOW_HamParend_in_synpred29_Ham4Parser9226: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xFFF80038, 0x7EFFFFFF,0x00000000, 0x0401E008]),
FOLLOW_location2_in_synpred29_Ham4Parser9228: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamParbegin_in_synpred30_Ham4Parser9284: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_action1t_in_synpred30_Ham4Parser9288: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00004000, 0x00000000,0x03FFFFE0, 0x040007EC,0x03FFDF80, 0x00000000]),
FOLLOW_HamPlus_in_synpred30_Ham4Parser9293: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_action1_in_synpred31_Ham4Parser9507: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_handconstellation_in_synpred32_Ham4Parser9597: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_synpred33_Ham4Parser10175: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_synpred33_Ham4Parser10177: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelbody_in_synpred34_Ham4Parser11042: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_synpred35_Ham4Parser11629: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x23C00000]),
FOLLOW_repetition_in_synpred35_Ham4Parser11634: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamAlternatingmotion_in_synpred35_Ham4Parser11638: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_synpred36_Ham4Parser11722: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00800000]),
FOLLOW_HamRepeatfromstartseveral_in_synpred36_Ham4Parser11724: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00020000, 0x00000000]),
FOLLOW_HamEtc_in_synpred36_Ham4Parser11726: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSeqbegin_in_synpred37_Ham4Parser12701: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
FOLLOW_HamBrushing_in_synpred37_Ham4Parser12703: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_locationindexdefine_in_synpred38_Ham4Parser12798: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_splitreplacetail_in_synpred39_Ham4Parser13811: new org.antlr.runtime.BitSet([0x00000002, 0x00000000])
});
})();
// -------- Ham4HMLGen.js --------
// $ANTLR 3.3 Nov 30, 2010 12:50:56 Ham4HMLGen.g 2024-06-11 18:08:15
// TreeParser header: Start
// Logger enhanced when run from HtoG Tool
var H4MLGenLogger = this.getCWAEnv().get("Logger").get("SiGML");
// TreeParser header: End
var Ham4HMLGen = function(input, state) {
if (!state) {
state = new org.antlr.runtime.RecognizerSharedState();
}
(function(){
// TreeParser members
var hBuilder = null;
this.trace = function(str) {
if (typeof H4MLGenLogger.trace === "function") H4MLGenLogger.trace(str);
};
this.reportError = function(ex) {
if (typeof H4MLGenLogger.debug === "function") {
H4MLGenLogger.debug('Ham4HMLGen Error: ' + ex);
}
this.state.syntaxErrors++;
this.state.errorRecovery = true;
}
}).call(this);
Ham4HMLGen.superclass.constructor.call(this, input, state);
/* @todo only create adaptor if output=AST */
this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();
};
org.antlr.lang.augmentObject(Ham4HMLGen, {
EOF: -1,
WS: 4,
HamTab: 5,
HamLinefeed: 6,
HamPagebreak: 7,
HamReturn: 8,
HamVersion40: 9,
HamSpace: 10,
HamExclaim: 11,
HamQuery: 12,
HamFullstop: 13,
HamComma: 14,
HamPlus: 15,
HamMetaalt: 16,
HamClocku: 17,
HamClockul: 18,
HamClockl: 19,
HamClockdl: 20,
HamClockd: 21,
HamClockdr: 22,
HamClockr: 23,
HamClockur: 24,
HamClockfull: 25,
HamSymmpar: 26,
HamSymmlr: 27,
HamFist: 28,
HamFlathand: 29,
HamFinger2: 30,
HamFinger23: 31,
HamFinger23spread: 32,
HamFinger2345: 33,
HamThumboutmod: 34,
HamThumbacrossmod: 35,
HamPinch12: 36,
HamPinchall: 37,
HamPinch12open: 38,
HamCee12: 39,
HamCeeall: 40,
HamCee12open: 41,
HamThumbopenmod: 42,
HamFingerstraightmod: 43,
HamFingerbendmod: 44,
HamFingerhookedmod: 45,
HamNondominant: 46,
HamDoublebent: 47,
HamDoublehooked: 48,
HamExtfingeru: 49,
HamExtfingerur: 50,
HamExtfingerr: 51,
HamExtfingerdr: 52,
HamExtfingerd: 53,
HamExtfingerdl: 54,
HamExtfingerl: 55,
HamExtfingerul: 56,
HamExtfingerol: 57,
HamExtfingero: 58,
HamExtfingeror: 59,
HamExtfingeril: 60,
HamExtfingeri: 61,
HamExtfingerir: 62,
HamExtfingerui: 63,
HamExtfingerdi: 64,
HamExtfingerdo: 65,
HamExtfingeruo: 66,
HamEarlobe: 67,
HamNostrils: 68,
HamShouldertop: 69,
HamPalmu: 70,
HamPalmur: 71,
HamPalmr: 72,
HamPalmdr: 73,
HamPalmd: 74,
HamPalmdl: 75,
HamPalml: 76,
HamPalmul: 77,
HamReplace: 78,
HamArmextended: 79,
HamBehind: 80,
HamEtc: 81,
HamOrirelative: 82,
HamTongue: 83,
HamTeeth: 84,
HamStomach: 85,
HamNeutralspace: 86,
HamHead: 87,
HamHeadtop: 88,
HamForehead: 89,
HamEyebrows: 90,
HamEyes: 91,
HamNose: 92,
HamEar: 93,
HamCheek: 94,
HamLips: 95,
HamChin: 96,
HamUnderchin: 97,
HamNeck: 98,
HamShoulders: 99,
HamChest: 100,
HamBelowstomach: 101,
HamLrbeside: 102,
HamLrat: 103,
HamUpperarm: 104,
HamElbow: 105,
HamElbowinside: 106,
HamLowerarm: 107,
HamWristback: 108,
HamWristpulse: 109,
HamThumbball: 110,
HamPalm: 111,
HamHandback: 112,
HamThumb: 113,
HamIndexfinger: 114,
HamMiddlefinger: 115,
HamRingfinger: 116,
HamPinky: 117,
HamThumbside: 118,
HamPinkyside: 119,
HamBetween: 120,
HamFingertip: 121,
HamFingernail: 122,
HamFingerpad: 123,
HamFingermidjoint: 124,
HamFingerbase: 125,
HamFingerside: 126,
HamWristtopulse: 127,
HamWristtoback: 128,
HamWristtothumb: 129,
HamWristtopinky: 130,
HamCoreftag: 131,
HamCorefref: 132,
HamNomotion: 133,
HamMoveu: 134,
HamMoveur: 135,
HamMover: 136,
HamMovedr: 137,
HamMoved: 138,
HamMovedl: 139,
HamMovel: 140,
HamMoveul: 141,
HamMoveol: 142,
HamMoveo: 143,
HamMoveor: 144,
HamMoveil: 145,
HamMovei: 146,
HamMoveir: 147,
HamMoveui: 148,
HamMovedi: 149,
HamMovedo: 150,
HamMoveuo: 151,
HamMovecross: 152,
HamMovex: 153,
HamSmallmod: 154,
HamLargemod: 155,
HamArcl: 156,
HamArcu: 157,
HamArcr: 158,
HamArcd: 159,
HamWavy: 160,
HamZigzag: 161,
HamFingerplay: 162,
HamParbegin: 163,
HamParend: 164,
HamCircleo: 165,
HamCirclei: 166,
HamCircled: 167,
HamCircleu: 168,
HamCirclel: 169,
HamCircler: 170,
HamIncreasing: 171,
HamDecreasing: 172,
HamClose: 173,
HamTouch: 174,
HamInterlock: 175,
HamCross: 176,
HamFast: 177,
HamSlow: 178,
HamTense: 179,
HamRest: 180,
HamHalt: 181,
HamRepeatfromstart: 182,
HamRepeatfromstartseveral: 183,
HamRepeatcontinue: 184,
HamRepeatcontinueseveral: 185,
HamSeqbegin: 186,
HamSeqend: 187,
HamAlternatingmotion: 188,
HamRepeatreverse: 189,
HamBrushing: 190,
HamNonipsi: 191,
HamEllipseh: 192,
HamEllipseur: 193,
HamEllipsev: 194,
HamEllipseul: 195,
HamMime: 196,
HamAltbegin: 197,
HamAltend: 198,
HamNodding: 199,
HamSwinging: 200,
HamTwisting: 201,
HamStircw: 202,
HamStirccw: 203,
HamFusionbegin: 204,
HamFusionend: 205,
HamCircleul: 206,
HamCircledr: 207,
HamCircleur: 208,
HamCircledl: 209,
HamCircleol: 210,
HamCircleir: 211,
HamCircleor: 212,
HamCircleil: 213,
HamCircledo: 214,
HamCircleui: 215,
HamCircledi: 216,
HamCircleuo: 217,
HamNbs: 218,
HAMSIGNS: 219,
SIGN2: 220,
SIGN1: 221,
ICFG2: 222,
ICFG1: 223,
NMICLIST: 224,
NMICUNIT: 225,
MICFG2: 226,
MICFG1: 227,
HDCONFIG2: 228,
HDCONFIG1: 229,
SPLITHDCFG2: 230,
HDCFGTAIL2: 231,
HSHAPE2: 232,
HSHAPE1: 233,
BASICHDSHP1: 234,
BASICHDSHP: 235,
HSCLASS: 236,
FIBENDING: 237,
THUMBPOS: 238,
FINGERLIST: 239,
FISHPLIST: 240,
FICRSSLIST: 241,
FSHAPE: 242,
FCROSSING: 243,
THSPECIAL: 244,
EXTFIDIR2: 245,
EXTFIDIR1: 246,
EXTFIDIR: 247,
PALMOR2: 248,
PALMOR1: 249,
LOC2: 250,
LOC1: 251,
LOCTNBODYARM: 252,
LOCTNBODY: 253,
LOCTNHAND: 254,
LOCTNARM: 255,
LEVBODY: 256,
LEVHAND: 257,
LEVARM: 258,
HCONSTLLN: 259,
CNTCTBODY: 260,
CNTCTHAND: 261,
CNTCTOFHAND: 262,
A2TLIST: 263,
A1TLIST: 264,
A1LIST: 265,
ACTION2T: 266,
ACTION1T: 267,
ACTION2: 268,
ACTION1: 269,
PARACT2T: 270,
SEQACT2T: 271,
SPLITACT2LOC2: 272,
SPLITACT2T: 273,
PARACT1T: 274,
SEQACT1T: 275,
NMACT1T: 276,
PARACT1: 277,
REPETITIONS: 278,
SIMPLEMVMT: 279,
STRGHTMVMT: 280,
CRCLRMVMT: 281,
REPLACE: 282,
SPLITREPLACETL: 283,
REPLACETAIL1: 284,
HSFINGERITEM: 285,
LOCBODY: 286,
MOVINGREPETITION: 287,
SEQACT1: 288,
SEQFUSEDACT2T: 289,
SEQFUSEDACT1T: 290,
SEQFUSEDACT1: 291,
CNTCTOHHAND: 292,
CNTCTOHARM: 293
});
(function(){
// public class variables
var EOF= -1,
WS= 4,
HamTab= 5,
HamLinefeed= 6,
HamPagebreak= 7,
HamReturn= 8,
HamVersion40= 9,
HamSpace= 10,
HamExclaim= 11,
HamQuery= 12,
HamFullstop= 13,
HamComma= 14,
HamPlus= 15,
HamMetaalt= 16,
HamClocku= 17,
HamClockul= 18,
HamClockl= 19,
HamClockdl= 20,
HamClockd= 21,
HamClockdr= 22,
HamClockr= 23,
HamClockur= 24,
HamClockfull= 25,
HamSymmpar= 26,
HamSymmlr= 27,
HamFist= 28,
HamFlathand= 29,
HamFinger2= 30,
HamFinger23= 31,
HamFinger23spread= 32,
HamFinger2345= 33,
HamThumboutmod= 34,
HamThumbacrossmod= 35,
HamPinch12= 36,
HamPinchall= 37,
HamPinch12open= 38,
HamCee12= 39,
HamCeeall= 40,
HamCee12open= 41,
HamThumbopenmod= 42,
HamFingerstraightmod= 43,
HamFingerbendmod= 44,
HamFingerhookedmod= 45,
HamNondominant= 46,
HamDoublebent= 47,
HamDoublehooked= 48,
HamExtfingeru= 49,
HamExtfingerur= 50,
HamExtfingerr= 51,
HamExtfingerdr= 52,
HamExtfingerd= 53,
HamExtfingerdl= 54,
HamExtfingerl= 55,
HamExtfingerul= 56,
HamExtfingerol= 57,
HamExtfingero= 58,
HamExtfingeror= 59,
HamExtfingeril= 60,
HamExtfingeri= 61,
HamExtfingerir= 62,
HamExtfingerui= 63,
HamExtfingerdi= 64,
HamExtfingerdo= 65,
HamExtfingeruo= 66,
HamEarlobe= 67,
HamNostrils= 68,
HamShouldertop= 69,
HamPalmu= 70,
HamPalmur= 71,
HamPalmr= 72,
HamPalmdr= 73,
HamPalmd= 74,
HamPalmdl= 75,
HamPalml= 76,
HamPalmul= 77,
HamReplace= 78,
HamArmextended= 79,
HamBehind= 80,
HamEtc= 81,
HamOrirelative= 82,
HamTongue= 83,
HamTeeth= 84,
HamStomach= 85,
HamNeutralspace= 86,
HamHead= 87,
HamHeadtop= 88,
HamForehead= 89,
HamEyebrows= 90,
HamEyes= 91,
HamNose= 92,
HamEar= 93,
HamCheek= 94,
HamLips= 95,
HamChin= 96,
HamUnderchin= 97,
HamNeck= 98,
HamShoulders= 99,
HamChest= 100,
HamBelowstomach= 101,
HamLrbeside= 102,
HamLrat= 103,
HamUpperarm= 104,
HamElbow= 105,
HamElbowinside= 106,
HamLowerarm= 107,
HamWristback= 108,
HamWristpulse= 109,
HamThumbball= 110,
HamPalm= 111,
HamHandback= 112,
HamThumb= 113,
HamIndexfinger= 114,
HamMiddlefinger= 115,
HamRingfinger= 116,
HamPinky= 117,
HamThumbside= 118,
HamPinkyside= 119,
HamBetween= 120,
HamFingertip= 121,
HamFingernail= 122,
HamFingerpad= 123,
HamFingermidjoint= 124,
HamFingerbase= 125,
HamFingerside= 126,
HamWristtopulse= 127,
HamWristtoback= 128,
HamWristtothumb= 129,
HamWristtopinky= 130,
HamCoreftag= 131,
HamCorefref= 132,
HamNomotion= 133,
HamMoveu= 134,
HamMoveur= 135,
HamMover= 136,
HamMovedr= 137,
HamMoved= 138,
HamMovedl= 139,
HamMovel= 140,
HamMoveul= 141,
HamMoveol= 142,
HamMoveo= 143,
HamMoveor= 144,
HamMoveil= 145,
HamMovei= 146,
HamMoveir= 147,
HamMoveui= 148,
HamMovedi= 149,
HamMovedo= 150,
HamMoveuo= 151,
HamMovecross= 152,
HamMovex= 153,
HamSmallmod= 154,
HamLargemod= 155,
HamArcl= 156,
HamArcu= 157,
HamArcr= 158,
HamArcd= 159,
HamWavy= 160,
HamZigzag= 161,
HamFingerplay= 162,
HamParbegin= 163,
HamParend= 164,
HamCircleo= 165,
HamCirclei= 166,
HamCircled= 167,
HamCircleu= 168,
HamCirclel= 169,
HamCircler= 170,
HamIncreasing= 171,
HamDecreasing= 172,
HamClose= 173,
HamTouch= 174,
HamInterlock= 175,
HamCross= 176,
HamFast= 177,
HamSlow= 178,
HamTense= 179,
HamRest= 180,
HamHalt= 181,
HamRepeatfromstart= 182,
HamRepeatfromstartseveral= 183,
HamRepeatcontinue= 184,
HamRepeatcontinueseveral= 185,
HamSeqbegin= 186,
HamSeqend= 187,
HamAlternatingmotion= 188,
HamRepeatreverse= 189,
HamBrushing= 190,
HamNonipsi= 191,
HamEllipseh= 192,
HamEllipseur= 193,
HamEllipsev= 194,
HamEllipseul= 195,
HamMime= 196,
HamAltbegin= 197,
HamAltend= 198,
HamNodding= 199,
HamSwinging= 200,
HamTwisting= 201,
HamStircw= 202,
HamStirccw= 203,
HamFusionbegin= 204,
HamFusionend= 205,
HamCircleul= 206,
HamCircledr= 207,
HamCircleur= 208,
HamCircledl= 209,
HamCircleol= 210,
HamCircleir= 211,
HamCircleor= 212,
HamCircleil= 213,
HamCircledo= 214,
HamCircleui= 215,
HamCircledi= 216,
HamCircleuo= 217,
HamNbs= 218,
HAMSIGNS= 219,
SIGN2= 220,
SIGN1= 221,
ICFG2= 222,
ICFG1= 223,
NMICLIST= 224,
NMICUNIT= 225,
MICFG2= 226,
MICFG1= 227,
HDCONFIG2= 228,
HDCONFIG1= 229,
SPLITHDCFG2= 230,
HDCFGTAIL2= 231,
HSHAPE2= 232,
HSHAPE1= 233,
BASICHDSHP1= 234,
BASICHDSHP= 235,
HSCLASS= 236,
FIBENDING= 237,
THUMBPOS= 238,
FINGERLIST= 239,
FISHPLIST= 240,
FICRSSLIST= 241,
FSHAPE= 242,
FCROSSING= 243,
THSPECIAL= 244,
EXTFIDIR2= 245,
EXTFIDIR1= 246,
EXTFIDIR= 247,
PALMOR2= 248,
PALMOR1= 249,
LOC2= 250,
LOC1= 251,
LOCTNBODYARM= 252,
LOCTNBODY= 253,
LOCTNHAND= 254,
LOCTNARM= 255,
LEVBODY= 256,
LEVHAND= 257,
LEVARM= 258,
HCONSTLLN= 259,
CNTCTBODY= 260,
CNTCTHAND= 261,
CNTCTOFHAND= 262,
A2TLIST= 263,
A1TLIST= 264,
A1LIST= 265,
ACTION2T= 266,
ACTION1T= 267,
ACTION2= 268,
ACTION1= 269,
PARACT2T= 270,
SEQACT2T= 271,
SPLITACT2LOC2= 272,
SPLITACT2T= 273,
PARACT1T= 274,
SEQACT1T= 275,
NMACT1T= 276,
PARACT1= 277,
REPETITIONS= 278,
SIMPLEMVMT= 279,
STRGHTMVMT= 280,
CRCLRMVMT= 281,
REPLACE= 282,
SPLITREPLACETL= 283,
REPLACETAIL1= 284,
HSFINGERITEM= 285,
LOCBODY= 286,
MOVINGREPETITION= 287,
SEQACT1= 288,
SEQFUSEDACT2T= 289,
SEQFUSEDACT1T= 290,
SEQFUSEDACT1= 291,
CNTCTOHHAND= 292,
CNTCTOHARM= 293;
var UP = org.antlr.runtime.Token.UP,
DOWN = org.antlr.runtime.Token.DOWN;
// public instance methods/vars
org.antlr.lang.extend(Ham4HMLGen, org.antlr.runtime.tree.TreeParser, {
getTokenNames: function() { return Ham4HMLGen.tokenNames; },
getGrammarFileName: function() { return "Ham4HMLGen.g"; }
});
org.antlr.lang.augmentObject(Ham4HMLGen.prototype, {
// Ham4HMLGen.g:51:1: hamsignseq[sb] returns [Element r = null] : ^( HAMSIGNS (s2or1= sign2or1 )* ) ;
// $ANTLR start "hamsignseq"
hamsignseq: function(sb) {
var r =  null;
var s2or1 = null;
// this.hBuilder = sb;     // Instance variable initialisation.
hBuilder = sb;     // Instance variable initialisation.
var     hss     = hBuilder.newHMLElement("hamnosys_sign");
//	Element     s2or1   = null
this.trace("HMLGen: hamsignseq starts "+this.state.backtracking);
try {
// Ham4HMLGen.g:66:5: ( ^( HAMSIGNS (s2or1= sign2or1 )* ) )
// Ham4HMLGen.g:67:2: ^( HAMSIGNS (s2or1= sign2or1 )* )
this.match(this.input,HAMSIGNS,Ham4HMLGen.FOLLOW_HAMSIGNS_in_hamsignseq149); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:68:3: (s2or1= sign2or1 )*
loop1:
do {
var alt1=2;
var LA1_0 = this.input.LA(1);
if ( ((LA1_0>=SIGN2 && LA1_0<=SIGN1)) ) {
alt1=1;
}
switch (alt1) {
case 1 :
// Ham4HMLGen.g:69:4: s2or1= sign2or1
this.pushFollow(Ham4HMLGen.FOLLOW_sign2or1_in_hamsignseq164);
s2or1=this.sign2or1();
this.state._fsp--;
hss.appendChild(s2or1); 
break;
default :
break loop1;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
r = hBuilder.rootEl(hss);
this.trace("HMLGen: hamsignseq finish "+this.state.backtracking);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return r;
},
// Ham4HMLGen.g:80:1: sign2or1 returns [Element rsgn = null] : (rsgn1= sign2 | rsgn2= nondomsign1 ) ;
// $ANTLR start "sign2or1"
sign2or1: function() {
var rsgn =  null;
var rsgn1 = null;
var rsgn2 = null;
try {
// Ham4HMLGen.g:84:5: ( (rsgn1= sign2 | rsgn2= nondomsign1 ) )
// Ham4HMLGen.g:85:5: (rsgn1= sign2 | rsgn2= nondomsign1 )
// Ham4HMLGen.g:85:5: (rsgn1= sign2 | rsgn2= nondomsign1 )
var alt2=2;
var LA2_0 = this.input.LA(1);
if ( (LA2_0==SIGN2) ) {
alt2=1;
}
else if ( (LA2_0==SIGN1) ) {
alt2=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 2, 0, this.input);
throw nvae;
}
switch (alt2) {
case 1 :
// Ham4HMLGen.g:86:9: rsgn1= sign2
this.pushFollow(Ham4HMLGen.FOLLOW_sign2_in_sign2or1246);
rsgn1=this.sign2();
this.state._fsp--;
rsgn = rsgn1; 
break;
case 2 :
// Ham4HMLGen.g:88:9: rsgn2= nondomsign1
this.pushFollow(Ham4HMLGen.FOLLOW_nondomsign1_in_sign2or1273);
rsgn2=this.nondomsign1();
this.state._fsp--;
rsgn = rsgn2; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsgn;
},
// Ham4HMLGen.g:92:1: sign2 returns [Element rsgn = null] : ^( SIGN2 (sym= symmoperator icpair= initialconfig2 atlst= a2tstar | icpair= initialconfig2 atlst= a1tstar | HamNomotion ( HamNondominant )? icpair= initialconfig1 atlst= a1tstar ) ) ;
// $ANTLR start "sign2"
sign2: function() {
var rsgn =  null;
var sym = null;
var icpair = null;
var atlst = null;
var     holdover    = false;
var     nondominant = false;
try {
// Ham4HMLGen.g:99:5: ( ^( SIGN2 (sym= symmoperator icpair= initialconfig2 atlst= a2tstar | icpair= initialconfig2 atlst= a1tstar | HamNomotion ( HamNondominant )? icpair= initialconfig1 atlst= a1tstar ) ) )
// Ham4HMLGen.g:100:5: ^( SIGN2 (sym= symmoperator icpair= initialconfig2 atlst= a2tstar | icpair= initialconfig2 atlst= a1tstar | HamNomotion ( HamNondominant )? icpair= initialconfig1 atlst= a1tstar ) )
this.match(this.input,SIGN2,Ham4HMLGen.FOLLOW_SIGN2_in_sign2324); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:101:9: (sym= symmoperator icpair= initialconfig2 atlst= a2tstar | icpair= initialconfig2 atlst= a1tstar | HamNomotion ( HamNondominant )? icpair= initialconfig1 atlst= a1tstar )
var alt4=3;
switch ( this.input.LA(1) ) {
case HamSymmpar:
case HamSymmlr:
alt4=1;
break;
case ICFG2:
alt4=2;
break;
case HamNomotion:
alt4=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 4, 0, this.input);
throw nvae;
}
switch (alt4) {
case 1 :
// Ham4HMLGen.g:102:13: sym= symmoperator icpair= initialconfig2 atlst= a2tstar
this.pushFollow(Ham4HMLGen.FOLLOW_symmoperator_in_sign2356);
sym=this.symmoperator();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_initialconfig2_in_sign2375);
icpair=this.initialconfig2();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_a2tstar_in_sign2395);
atlst=this.a2tstar();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:106:13: icpair= initialconfig2 atlst= a1tstar
this.pushFollow(Ham4HMLGen.FOLLOW_initialconfig2_in_sign2424);
icpair=this.initialconfig2();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_a1tstar_in_sign2444);
atlst=this.a1tstar();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:110:13: HamNomotion ( HamNondominant )? icpair= initialconfig1 atlst= a1tstar
this.match(this.input,HamNomotion,Ham4HMLGen.FOLLOW_HamNomotion_in_sign2481); 
holdover = true; 
// Ham4HMLGen.g:111:13: ( HamNondominant )?
var alt3=2;
var LA3_0 = this.input.LA(1);
if ( (LA3_0==HamNondominant) ) {
alt3=1;
}
switch (alt3) {
case 1 :
// Ham4HMLGen.g:111:15: HamNondominant
this.match(this.input,HamNondominant,Ham4HMLGen.FOLLOW_HamNondominant_in_sign2515); 
nondominant = true; 
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_initialconfig1_in_sign2550);
icpair=this.initialconfig1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_a1tstar_in_sign2570);
atlst=this.a1tstar();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsgn = hBuilder.newHMLElement("sign2");
hBuilder.checkedAppendChild(rsgn, sym);
hBuilder.checkedAppendChild(rsgn, icpair[0]);
hBuilder.checkedAppendChild(rsgn, icpair[1]);
hBuilder.checkedAppendChildList(rsgn, atlst);
hBuilder.checkedSetFlagAttr(rsgn, "nondominant", nondominant);
hBuilder.checkedSetFlagAttr(rsgn, "holdover", holdover);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsgn;
},
// Ham4HMLGen.g:127:1: nondomsign1 returns [Element rsgn = null] : ^( SIGN1 HamNondominant icpair= initialconfig1 atlst= a1tstar ) ;
// $ANTLR start "nondomsign1"
nondomsign1: function() {
var rsgn =  null;
var icpair = null;
var atlst = null;
try {
// Ham4HMLGen.g:131:5: ( ^( SIGN1 HamNondominant icpair= initialconfig1 atlst= a1tstar ) )
// Ham4HMLGen.g:132:5: ^( SIGN1 HamNondominant icpair= initialconfig1 atlst= a1tstar )
this.match(this.input,SIGN1,Ham4HMLGen.FOLLOW_SIGN1_in_nondomsign1624); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.match(this.input,HamNondominant,Ham4HMLGen.FOLLOW_HamNondominant_in_nondomsign1644); 
this.pushFollow(Ham4HMLGen.FOLLOW_initialconfig1_in_nondomsign1659);
icpair=this.initialconfig1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_a1tstar_in_nondomsign1675);
atlst=this.a1tstar();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsgn = hBuilder.newHMLElement("sign1");
hBuilder.checkedSetAttr(rsgn, "which_hand", "nondominant");
hBuilder.checkedAppendChild(rsgn, icpair[0]);
rsgn.appendChild(icpair[1]);
hBuilder.appendChildList(rsgn, atlst);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsgn;
},
// Ham4HMLGen.g:146:1: symmoperator returns [Element rsym = null] : ( ( HamSymmpar | HamSymmlr ) ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? ) ;
// $ANTLR start "symmoperator"
symmoperator: function() {
var rsym =  null;
var  plr = null;
var  lg  = null;
var  fb  = null;
var alt = false;
var ni  = false;
try {
// Ham4HMLGen.g:156:5: ( ( ( HamSymmpar | HamSymmlr ) ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? ) )
// Ham4HMLGen.g:157:5: ( ( HamSymmpar | HamSymmlr ) ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? )
// Ham4HMLGen.g:157:5: ( ( HamSymmpar | HamSymmlr ) ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )? ( HamAlternatingmotion )? ( HamNonipsi )? )
// Ham4HMLGen.g:158:9: ( HamSymmpar | HamSymmlr ) ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )? ( HamAlternatingmotion )? ( HamNonipsi )?
// Ham4HMLGen.g:158:9: ( HamSymmpar | HamSymmlr )
var alt5=2;
var LA5_0 = this.input.LA(1);
if ( (LA5_0==HamSymmpar) ) {
alt5=1;
}
else if ( (LA5_0==HamSymmlr) ) {
alt5=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 5, 0, this.input);
throw nvae;
}
switch (alt5) {
case 1 :
// Ham4HMLGen.g:159:13: HamSymmpar
this.match(this.input,HamSymmpar,Ham4HMLGen.FOLLOW_HamSymmpar_in_symmoperator745); 
plr = "hamsymmpar"; 
break;
case 2 :
// Ham4HMLGen.g:161:13: HamSymmlr
this.match(this.input,HamSymmlr,Ham4HMLGen.FOLLOW_HamSymmlr_in_symmoperator780); 
plr = "hamsymmlr"; 
break;
}
// Ham4HMLGen.g:163:9: ( ( HamLargemod ) ( HamFingerstraightmod )? | ( HamFingerstraightmod ) ( HamLargemod )? )?
var alt8=3;
var LA8_0 = this.input.LA(1);
if ( (LA8_0==HamLargemod) ) {
alt8=1;
}
else if ( (LA8_0==HamFingerstraightmod) ) {
alt8=2;
}
switch (alt8) {
case 1 :
// Ham4HMLGen.g:164:13: ( HamLargemod ) ( HamFingerstraightmod )?
// Ham4HMLGen.g:164:13: ( HamLargemod )
// Ham4HMLGen.g:164:15: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_symmoperator828); 
lg = "hamlargemod"; 
// Ham4HMLGen.g:165:13: ( HamFingerstraightmod )?
var alt6=2;
var LA6_0 = this.input.LA(1);
if ( (LA6_0==HamFingerstraightmod) ) {
alt6=1;
}
switch (alt6) {
case 1 :
// Ham4HMLGen.g:165:15: HamFingerstraightmod
this.match(this.input,HamFingerstraightmod,Ham4HMLGen.FOLLOW_HamFingerstraightmod_in_symmoperator863); 
fb = "hamfingerbent"; 
break;
}
break;
case 2 :
// Ham4HMLGen.g:167:13: ( HamFingerstraightmod ) ( HamLargemod )?
// Ham4HMLGen.g:167:13: ( HamFingerstraightmod )
// Ham4HMLGen.g:167:15: HamFingerstraightmod
this.match(this.input,HamFingerstraightmod,Ham4HMLGen.FOLLOW_HamFingerstraightmod_in_symmoperator897); 
fb = "hamfingerbent"; 
// Ham4HMLGen.g:168:13: ( HamLargemod )?
var alt7=2;
var LA7_0 = this.input.LA(1);
if ( (LA7_0==HamLargemod) ) {
alt7=1;
}
switch (alt7) {
case 1 :
// Ham4HMLGen.g:168:15: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_symmoperator920); 
lg = "hamlargemod"; 
break;
}
break;
}
// Ham4HMLGen.g:170:9: ( HamAlternatingmotion )?
var alt9=2;
var LA9_0 = this.input.LA(1);
if ( (LA9_0==HamAlternatingmotion) ) {
alt9=1;
}
switch (alt9) {
case 1 :
// Ham4HMLGen.g:170:13: HamAlternatingmotion
this.match(this.input,HamAlternatingmotion,Ham4HMLGen.FOLLOW_HamAlternatingmotion_in_symmoperator965); 
alt= true; 
break;
}
// Ham4HMLGen.g:171:9: ( HamNonipsi )?
var alt10=2;
var LA10_0 = this.input.LA(1);
if ( (LA10_0==HamNonipsi) ) {
alt10=1;
}
switch (alt10) {
case 1 :
// Ham4HMLGen.g:171:13: HamNonipsi
this.match(this.input,HamNonipsi,Ham4HMLGen.FOLLOW_HamNonipsi_in_symmoperator987); 
ni = true; 
break;
}
rsym = hBuilder.newHMLElement("symmoperator");
hBuilder.checkedSetAttr(rsym, "att_par_or_lr", plr);
hBuilder.checkedSetAttr(rsym, "attrib_oi_symm", fb);
hBuilder.checkedSetAttr(rsym, "attrib_ud_symm", lg);
hBuilder.checkedSetFlagAttr(rsym, "outofphase", alt);
hBuilder.checkedSetFlagAttr(rsym, "nonipsi", ni);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsym;
},
// Ham4HMLGen.g:186:1: initialconfig2 returns [Element[] ricpair] : ^( ICFG2 (nmic= nminitialconfig )? mic= minitialconfig2 ) ;
// $ANTLR start "initialconfig2"
initialconfig2: function() {
var ricpair = null;
var nmic = null;
var mic = null;
try {
// Ham4HMLGen.g:191:5: ( ^( ICFG2 (nmic= nminitialconfig )? mic= minitialconfig2 ) )
// Ham4HMLGen.g:192:5: ^( ICFG2 (nmic= nminitialconfig )? mic= minitialconfig2 )
this.match(this.input,ICFG2,Ham4HMLGen.FOLLOW_ICFG2_in_initialconfig21048); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:193:9: (nmic= nminitialconfig )?
var alt11=2;
var LA11_0 = this.input.LA(1);
if ( (LA11_0==NMICLIST) ) {
alt11=1;
}
switch (alt11) {
case 1 :
// Ham4HMLGen.g:193:11: nmic= nminitialconfig
this.pushFollow(Ham4HMLGen.FOLLOW_nminitialconfig_in_initialconfig21065);
nmic=this.nminitialconfig();
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_minitialconfig2_in_initialconfig21086);
mic=this.minitialconfig2();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
ricpair = [nmic, mic];
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ricpair;
},
// Ham4HMLGen.g:201:1: initialconfig1 returns [Element[] ricpair] : ^( ICFG1 (nmic= nminitialconfig )? mic= minitialconfig1 ) ;
// $ANTLR start "initialconfig1"
initialconfig1: function() {
var ricpair = null;
var nmic = null;
var mic = null;
try {
// Ham4HMLGen.g:206:5: ( ^( ICFG1 (nmic= nminitialconfig )? mic= minitialconfig1 ) )
// Ham4HMLGen.g:207:5: ^( ICFG1 (nmic= nminitialconfig )? mic= minitialconfig1 )
this.match(this.input,ICFG1,Ham4HMLGen.FOLLOW_ICFG1_in_initialconfig11127); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:208:9: (nmic= nminitialconfig )?
var alt12=2;
var LA12_0 = this.input.LA(1);
if ( (LA12_0==NMICLIST) ) {
alt12=1;
}
switch (alt12) {
case 1 :
// Ham4HMLGen.g:208:11: nmic= nminitialconfig
this.pushFollow(Ham4HMLGen.FOLLOW_nminitialconfig_in_initialconfig11144);
nmic=this.nminitialconfig();
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_minitialconfig1_in_initialconfig11165);
mic=this.minitialconfig1();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
ricpair = [nmic, mic];
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ricpair;
},
// Ham4HMLGen.g:216:1: nminitialconfig returns [Element rnmic = null] : ^( NMICLIST (nmpair= nmicunit )+ ) ;
// $ANTLR start "nminitialconfig"
nminitialconfig: function() {
var rnmic =  null;
var nmpair = null;
rnmic = hBuilder.newHMLElement("nminitialconfig");
try {
// Ham4HMLGen.g:222:5: ( ^( NMICLIST (nmpair= nmicunit )+ ) )
// Ham4HMLGen.g:223:5: ^( NMICLIST (nmpair= nmicunit )+ )
this.match(this.input,NMICLIST,Ham4HMLGen.FOLLOW_NMICLIST_in_nminitialconfig1213); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:224:9: (nmpair= nmicunit )+
var cnt13=0;
loop13:
do {
var alt13=2;
var LA13_0 = this.input.LA(1);
if ( (LA13_0==NMICUNIT) ) {
alt13=1;
}
switch (alt13) {
case 1 :
// Ham4HMLGen.g:225:13: nmpair= nmicunit
this.pushFollow(Ham4HMLGen.FOLLOW_nmicunit_in_nminitialconfig1242);
nmpair=this.nmicunit();
this.state._fsp--;
rnmic.appendChild(nmpair[0]);
rnmic.appendChild(nmpair[1]);
break;
default :
if ( cnt13 >= 1 ) {
break loop13;
}
var eee = new org.antlr.runtime.EarlyExitException(13, this.input);
throw eee;
}
cnt13++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rnmic;
},
// Ham4HMLGen.g:234:1: nmicunit returns [Element[] rnmpair = [null,null]] : ^( NMICUNIT (nma= levelbody | nma= levelarm ) nmb= action1 ) ;
// $ANTLR start "nmicunit"
nmicunit: function() {
var rnmpair =  [null,null];
var nma = null;
var nmb = null;
try {
// Ham4HMLGen.g:240:5: ( ^( NMICUNIT (nma= levelbody | nma= levelarm ) nmb= action1 ) )
// Ham4HMLGen.g:241:5: ^( NMICUNIT (nma= levelbody | nma= levelarm ) nmb= action1 )
this.match(this.input,NMICUNIT,Ham4HMLGen.FOLLOW_NMICUNIT_in_nmicunit1308); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:242:9: (nma= levelbody | nma= levelarm )
var alt14=2;
var LA14_0 = this.input.LA(1);
if ( (LA14_0==LEVBODY) ) {
alt14=1;
}
else if ( (LA14_0==LEVARM) ) {
alt14=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 14, 0, this.input);
throw nvae;
}
switch (alt14) {
case 1 :
// Ham4HMLGen.g:243:13: nma= levelbody
this.pushFollow(Ham4HMLGen.FOLLOW_levelbody_in_nmicunit1336);
nma=this.levelbody();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:245:13: nma= levelarm
this.pushFollow(Ham4HMLGen.FOLLOW_levelarm_in_nmicunit1364);
nma=this.levelarm();
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_nmicunit1388);
nmb=this.action1();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rnmpair[0] = nma;
rnmpair[1] = nmb;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rnmpair;
},
// Ham4HMLGen.g:255:1: minitialconfig2 returns [Element rmic = null] : ^( MICFG2 (hc2= handconfig2 (loc2= location2 )? | hc1= handconfig1 (l1dom= location1 )? HamPlus (l1sub= location1 )? ) ) ;
// $ANTLR start "minitialconfig2"
minitialconfig2: function() {
var rmic =  null;
var hc2 = null;
var loc2 = null;
var hc1 = null;
var l1dom = null;
var l1sub = null;
try {
// Ham4HMLGen.g:258:5: ( ^( MICFG2 (hc2= handconfig2 (loc2= location2 )? | hc1= handconfig1 (l1dom= location1 )? HamPlus (l1sub= location1 )? ) ) )
// Ham4HMLGen.g:259:5: ^( MICFG2 (hc2= handconfig2 (loc2= location2 )? | hc1= handconfig1 (l1dom= location1 )? HamPlus (l1sub= location1 )? ) )
this.match(this.input,MICFG2,Ham4HMLGen.FOLLOW_MICFG2_in_minitialconfig21428); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:260:9: (hc2= handconfig2 (loc2= location2 )? | hc1= handconfig1 (l1dom= location1 )? HamPlus (l1sub= location1 )? )
var alt18=2;
var LA18_0 = this.input.LA(1);
if ( (LA18_0==HDCONFIG2) ) {
alt18=1;
}
else if ( (LA18_0==HDCONFIG1) ) {
alt18=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 18, 0, this.input);
throw nvae;
}
switch (alt18) {
case 1 :
// Ham4HMLGen.g:261:13: hc2= handconfig2 (loc2= location2 )?
this.pushFollow(Ham4HMLGen.FOLLOW_handconfig2_in_minitialconfig21460);
hc2=this.handconfig2();
this.state._fsp--;
// Ham4HMLGen.g:262:13: (loc2= location2 )?
var alt15=2;
var LA15_0 = this.input.LA(1);
if ( (LA15_0==LOC2) ) {
alt15=1;
}
switch (alt15) {
case 1 :
// Ham4HMLGen.g:262:15: loc2= location2
this.pushFollow(Ham4HMLGen.FOLLOW_location2_in_minitialconfig21481);
loc2=this.location2();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:264:13: hc1= handconfig1 (l1dom= location1 )? HamPlus (l1sub= location1 )?
this.pushFollow(Ham4HMLGen.FOLLOW_handconfig1_in_minitialconfig21516);
hc1=this.handconfig1();
this.state._fsp--;
// Ham4HMLGen.g:265:13: (l1dom= location1 )?
var alt16=2;
var LA16_0 = this.input.LA(1);
if ( (LA16_0==LOC1) ) {
alt16=1;
}
switch (alt16) {
case 1 :
// Ham4HMLGen.g:265:15: l1dom= location1
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_minitialconfig21536);
l1dom=this.location1();
this.state._fsp--;
break;
}
this.match(this.input,HamPlus,Ham4HMLGen.FOLLOW_HamPlus_in_minitialconfig21563); 
// Ham4HMLGen.g:267:13: (l1sub= location1 )?
var alt17=2;
var LA17_0 = this.input.LA(1);
if ( (LA17_0==LOC1) ) {
alt17=1;
}
switch (alt17) {
case 1 :
// Ham4HMLGen.g:267:15: l1sub= location1
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_minitialconfig21583);
l1sub=this.location1();
this.state._fsp--;
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
if (hc2 == null) {
hc2 = hBuilder.newHMLElement("handconfig2");
hc2.appendChild(hc1);
loc2 = hBuilder.newHMLElement("location2");
hBuilder.checkedAppendChild(loc2, l1dom);  // ???? valid?
hBuilder.checkedAppendChild(loc2, l1sub);  // ???? valid?
}
rmic = hBuilder.newHMLElement("minitialconfig2");
rmic.appendChild(hc2);
hBuilder.checkedAppendChild(rmic, loc2);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rmic;
},
// Ham4HMLGen.g:284:1: minitialconfig1 returns [Element rmic = null] : ^( MICFG1 hc1= handconfig1 (loc1= location1 )? ) ;
// $ANTLR start "minitialconfig1"
minitialconfig1: function() {
var rmic =  null;
var hc1 = null;
var loc1 = null;
try {
// Ham4HMLGen.g:287:5: ( ^( MICFG1 hc1= handconfig1 (loc1= location1 )? ) )
// Ham4HMLGen.g:288:5: ^( MICFG1 hc1= handconfig1 (loc1= location1 )? )
this.match(this.input,MICFG1,Ham4HMLGen.FOLLOW_MICFG1_in_minitialconfig11636); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_handconfig1_in_minitialconfig11654);
hc1=this.handconfig1();
this.state._fsp--;
// Ham4HMLGen.g:290:9: (loc1= location1 )?
var alt19=2;
var LA19_0 = this.input.LA(1);
if ( (LA19_0==LOC1) ) {
alt19=1;
}
switch (alt19) {
case 1 :
// Ham4HMLGen.g:290:11: loc1= location1
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_minitialconfig11671);
loc1=this.location1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rmic = hBuilder.newHMLElement("minitialconfig1");
rmic.appendChild(hc1);
hBuilder.checkedAppendChild(rmic, loc1);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rmic;
},
// Ham4HMLGen.g:302:1: handconfig2 returns [Element rhc = null] : ^( HDCONFIG2 (hs2= handshape2 (tailpair= handconfigtail2 )? | shc= splithandconfig2 ) ) ;
// $ANTLR start "handconfig2"
handconfig2: function() {
var rhc =  null;
var hs2 = null;
var tailpair = null;
var shc = null;
try {
// Ham4HMLGen.g:305:5: ( ^( HDCONFIG2 (hs2= handshape2 (tailpair= handconfigtail2 )? | shc= splithandconfig2 ) ) )
// Ham4HMLGen.g:306:5: ^( HDCONFIG2 (hs2= handshape2 (tailpair= handconfigtail2 )? | shc= splithandconfig2 ) )
this.match(this.input,HDCONFIG2,Ham4HMLGen.FOLLOW_HDCONFIG2_in_handconfig21721); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:307:9: (hs2= handshape2 (tailpair= handconfigtail2 )? | shc= splithandconfig2 )
var alt21=2;
var LA21_0 = this.input.LA(1);
if ( (LA21_0==HSHAPE2) ) {
alt21=1;
}
else if ( (LA21_0==SPLITHDCFG2) ) {
alt21=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 21, 0, this.input);
throw nvae;
}
switch (alt21) {
case 1 :
// Ham4HMLGen.g:308:13: hs2= handshape2 (tailpair= handconfigtail2 )?
this.pushFollow(Ham4HMLGen.FOLLOW_handshape2_in_handconfig21757);
hs2=this.handshape2();
this.state._fsp--;
// Ham4HMLGen.g:309:13: (tailpair= handconfigtail2 )?
var alt20=2;
var LA20_0 = this.input.LA(1);
if ( (LA20_0==HDCFGTAIL2) ) {
alt20=1;
}
switch (alt20) {
case 1 :
// Ham4HMLGen.g:309:15: tailpair= handconfigtail2
this.pushFollow(Ham4HMLGen.FOLLOW_handconfigtail2_in_handconfig21778);
tailpair=this.handconfigtail2();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:311:13: shc= splithandconfig2
this.pushFollow(Ham4HMLGen.FOLLOW_splithandconfig2_in_handconfig21817);
shc=this.splithandconfig2();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhc = shc;
if (rhc == null) {
rhc = hBuilder.newHMLElement("handconfig2");
rhc.appendChild(hs2);
if (tailpair != null) {
rhc.appendChild(tailpair[0]);   // efd2
rhc.appendChild(tailpair[1]);   // po2
}
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhc;
},
// Ham4HMLGen.g:328:1: handconfig1 returns [Element rhc = null] : ^( HDCONFIG1 hs= handshape1 (efd= extfidir1 )? (po= palmor1 )? ) ;
// $ANTLR start "handconfig1"
handconfig1: function() {
var rhc =  null;
var hs = null;
var efd = null;
var po = null;
try {
// Ham4HMLGen.g:331:5: ( ^( HDCONFIG1 hs= handshape1 (efd= extfidir1 )? (po= palmor1 )? ) )
// Ham4HMLGen.g:332:5: ^( HDCONFIG1 hs= handshape1 (efd= extfidir1 )? (po= palmor1 )? )
this.match(this.input,HDCONFIG1,Ham4HMLGen.FOLLOW_HDCONFIG1_in_handconfig11871); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_handshape1_in_handconfig11890);
hs=this.handshape1();
this.state._fsp--;
// Ham4HMLGen.g:334:9: (efd= extfidir1 )?
var alt22=2;
var LA22_0 = this.input.LA(1);
if ( (LA22_0==EXTFIDIR1) ) {
alt22=1;
}
switch (alt22) {
case 1 :
// Ham4HMLGen.g:334:11: efd= extfidir1
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_handconfig11908);
efd=this.extfidir1();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:335:9: (po= palmor1 )?
var alt23=2;
var LA23_0 = this.input.LA(1);
if ( (LA23_0==PALMOR1) ) {
alt23=1;
}
switch (alt23) {
case 1 :
// Ham4HMLGen.g:335:11: po= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_handconfig11930);
po=this.palmor1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhc = hBuilder.newHMLElement("handconfig1");
rhc.appendChild(hs);
hBuilder.checkedAppendChild(rhc, efd);
hBuilder.checkedAppendChild(rhc, po);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhc;
},
// Ham4HMLGen.g:346:1: splithandconfig2 returns [Element rhc = null] : ^( SPLITHDCFG2 hcdom= handconfig1 hcnd= handconfig1 ) ;
// $ANTLR start "splithandconfig2"
splithandconfig2: function() {
var rhc =  null;
var hcdom = null;
var hcnd = null;
try {
// Ham4HMLGen.g:349:5: ( ^( SPLITHDCFG2 hcdom= handconfig1 hcnd= handconfig1 ) )
// Ham4HMLGen.g:350:5: ^( SPLITHDCFG2 hcdom= handconfig1 hcnd= handconfig1 )
this.match(this.input,SPLITHDCFG2,Ham4HMLGen.FOLLOW_SPLITHDCFG2_in_splithandconfig21985); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_handconfig1_in_splithandconfig22001);
hcdom=this.handconfig1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_handconfig1_in_splithandconfig22017);
hcnd=this.handconfig1();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhc = hBuilder.newHMLElement("handconfig2");
rhc.appendChild(hcdom);
rhc.appendChild(hcnd);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhc;
},
// Ham4HMLGen.g:361:1: handconfigtail2 returns [Element[] rtlpair = [null,null]] : ^( HDCFGTAIL2 (tmp= extfidir2 tmp= palmor2 | efd1d= extfidir1 po1d= palmor1 efd1s= extfidir1 po1s= palmor1 ) ) ;
// $ANTLR start "handconfigtail2"
handconfigtail2: function() {
var rtlpair =  [null,null];
var tmp = null;
var efd1d = null;
var po1d = null;
var efd1s = null;
var po1s = null;
try {
// Ham4HMLGen.g:366:5: ( ^( HDCFGTAIL2 (tmp= extfidir2 tmp= palmor2 | efd1d= extfidir1 po1d= palmor1 efd1s= extfidir1 po1s= palmor1 ) ) )
// Ham4HMLGen.g:367:5: ^( HDCFGTAIL2 (tmp= extfidir2 tmp= palmor2 | efd1d= extfidir1 po1d= palmor1 efd1s= extfidir1 po1s= palmor1 ) )
this.match(this.input,HDCFGTAIL2,Ham4HMLGen.FOLLOW_HDCFGTAIL2_in_handconfigtail22061); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:368:9: (tmp= extfidir2 tmp= palmor2 | efd1d= extfidir1 po1d= palmor1 efd1s= extfidir1 po1s= palmor1 )
var alt24=2;
var LA24_0 = this.input.LA(1);
if ( (LA24_0==EXTFIDIR2) ) {
alt24=1;
}
else if ( (LA24_0==EXTFIDIR1) ) {
alt24=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 24, 0, this.input);
throw nvae;
}
switch (alt24) {
case 1 :
// Ham4HMLGen.g:369:13: tmp= extfidir2 tmp= palmor2
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir2_in_handconfigtail22095);
tmp=this.extfidir2();
this.state._fsp--;
rtlpair[0] = tmp; 
this.pushFollow(Ham4HMLGen.FOLLOW_palmor2_in_handconfigtail22127);
tmp=this.palmor2();
this.state._fsp--;
rtlpair[1] = tmp; 
break;
case 2 :
// Ham4HMLGen.g:372:13: efd1d= extfidir1 po1d= palmor1 efd1s= extfidir1 po1s= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_handconfigtail22169);
efd1d=this.extfidir1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_handconfigtail22192);
po1d=this.palmor1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_handconfigtail22214);
efd1s=this.extfidir1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_handconfigtail22237);
po1s=this.palmor1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
if (efd1d != null) {
rtlpair[0]  =  hBuilder.newHMLElement("extfidir2");
rtlpair[0].appendChild(efd1d);
rtlpair[0].appendChild(efd1s);
rtlpair[1]  =  hBuilder.newHMLElement("palmor2");
rtlpair[1].appendChild(po1d);
rtlpair[1].appendChild(po1s);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rtlpair;
},
// Ham4HMLGen.g:395:1: handshape2 returns [Element rhs = null] : ^( HSHAPE2 hsa= handshape1 (hsb= handshape1 )? ) ;
// $ANTLR start "handshape2"
handshape2: function() {
var rhs =  null;
var hsa = null;
var hsb = null;
try {
// Ham4HMLGen.g:398:5: ( ^( HSHAPE2 hsa= handshape1 (hsb= handshape1 )? ) )
// Ham4HMLGen.g:399:5: ^( HSHAPE2 hsa= handshape1 (hsb= handshape1 )? )
this.match(this.input,HSHAPE2,Ham4HMLGen.FOLLOW_HSHAPE2_in_handshape22295); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_handshape1_in_handshape22313);
hsa=this.handshape1();
this.state._fsp--;
// Ham4HMLGen.g:401:9: (hsb= handshape1 )?
var alt25=2;
var LA25_0 = this.input.LA(1);
if ( (LA25_0==HSHAPE1) ) {
alt25=1;
}
switch (alt25) {
case 1 :
// Ham4HMLGen.g:401:11: hsb= handshape1
this.pushFollow(Ham4HMLGen.FOLLOW_handshape1_in_handshape22331);
hsb=this.handshape1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhs = hBuilder.newHMLElement("handshape2");
rhs.appendChild(hsa);
hBuilder.checkedAppendChild(rhs, hsb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhs;
},
// Ham4HMLGen.g:410:1: handshape1 returns [Element rhs = null] : ^( HSHAPE1 attr24= basichandshape1 (fnglst= fingerlist )? (fshlst= fingershapelist )? (fcrlst= fingercrossinglist )? (thspc= thumbspecial )? ) ;
// $ANTLR start "handshape1"
handshape1: function() {
var rhs =  null;
var attr24 = null;
var fnglst = null;
var fshlst = null;
var fcrlst = null;
var thspc = null;
try {
// Ham4HMLGen.g:413:5: ( ^( HSHAPE1 attr24= basichandshape1 (fnglst= fingerlist )? (fshlst= fingershapelist )? (fcrlst= fingercrossinglist )? (thspc= thumbspecial )? ) )
// Ham4HMLGen.g:414:5: ^( HSHAPE1 attr24= basichandshape1 (fnglst= fingerlist )? (fshlst= fingershapelist )? (fcrlst= fingercrossinglist )? (thspc= thumbspecial )? )
this.match(this.input,HSHAPE1,Ham4HMLGen.FOLLOW_HSHAPE1_in_handshape12379); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_basichandshape1_in_handshape12398);
attr24=this.basichandshape1();
this.state._fsp--;
// Ham4HMLGen.g:416:9: (fnglst= fingerlist )?
var alt26=2;
var LA26_0 = this.input.LA(1);
if ( (LA26_0==FINGERLIST) ) {
alt26=1;
}
switch (alt26) {
case 1 :
// Ham4HMLGen.g:416:11: fnglst= fingerlist
this.pushFollow(Ham4HMLGen.FOLLOW_fingerlist_in_handshape12417);
fnglst=this.fingerlist();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:417:9: (fshlst= fingershapelist )?
var alt27=2;
var LA27_0 = this.input.LA(1);
if ( (LA27_0==FISHPLIST) ) {
alt27=1;
}
switch (alt27) {
case 1 :
// Ham4HMLGen.g:417:11: fshlst= fingershapelist
this.pushFollow(Ham4HMLGen.FOLLOW_fingershapelist_in_handshape12439);
fshlst=this.fingershapelist();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:418:9: (fcrlst= fingercrossinglist )?
var alt28=2;
var LA28_0 = this.input.LA(1);
if ( (LA28_0==FICRSSLIST) ) {
alt28=1;
}
switch (alt28) {
case 1 :
// Ham4HMLGen.g:418:11: fcrlst= fingercrossinglist
this.pushFollow(Ham4HMLGen.FOLLOW_fingercrossinglist_in_handshape12461);
fcrlst=this.fingercrossinglist();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:419:9: (thspc= thumbspecial )?
var alt29=2;
var LA29_0 = this.input.LA(1);
if ( (LA29_0==THSPECIAL) ) {
alt29=1;
}
switch (alt29) {
case 1 :
// Ham4HMLGen.g:419:11: thspc= thumbspecial
this.pushFollow(Ham4HMLGen.FOLLOW_thumbspecial_in_handshape12484);
thspc=this.thumbspecial();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhs = hBuilder.newHMLElement("handshape1");
hBuilder.checkedSetAttr(
rhs,    "handshapeclass",   attr24[0][0]);
hBuilder.checkedSetAttr(
rhs,    "thumbpos",         attr24[0][1]);
hBuilder.checkedSetAttr(rhs,
"fingerbending",    attr24[0][2]);
hBuilder.checkedStringSetFlagAttr(rhs,
"approx_shape",     attr24[0][3]);
if (attr24[1] != null) {
hBuilder.checkedSetAttr(
rhs,    "second_handshapeclass",    attr24[1][0]);
hBuilder.checkedSetAttr(
rhs,    "second_thumbpos",          attr24[1][1]);
hBuilder.checkedSetAttr(
rhs,    "second_fingerbending",     attr24[1][2]);
}
hBuilder.checkedAppendChildList(rhs, fnglst);
hBuilder.checkedAppendChildList(rhs, fshlst);
hBuilder.checkedAppendChildList(rhs, fcrlst);
hBuilder.checkedAppendChild(rhs, thspc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhs;
},
// Ham4HMLGen.g:446:1: basichandshape1 returns [String[][] rbh = []] : ^( BASICHDSHP1 bha= basichandshape (bhb= basichandshape )? ) ;
// $ANTLR start "basichandshape1"
basichandshape1: function() {
var rbh =  [];
var bha = null;
var bhb = null;
try {
// Ham4HMLGen.g:450:5: ( ^( BASICHDSHP1 bha= basichandshape (bhb= basichandshape )? ) )
// Ham4HMLGen.g:451:5: ^( BASICHDSHP1 bha= basichandshape (bhb= basichandshape )? )
this.match(this.input,BASICHDSHP1,Ham4HMLGen.FOLLOW_BASICHDSHP1_in_basichandshape12527); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_basichandshape_in_basichandshape12545);
bha=this.basichandshape();
this.state._fsp--;
rbh[0] = bha; 
// Ham4HMLGen.g:453:9: (bhb= basichandshape )?
var alt30=2;
var LA30_0 = this.input.LA(1);
if ( (LA30_0==BASICHDSHP) ) {
alt30=1;
}
switch (alt30) {
case 1 :
// Ham4HMLGen.g:453:11: bhb= basichandshape
this.pushFollow(Ham4HMLGen.FOLLOW_basichandshape_in_basichandshape12568);
bhb=this.basichandshape();
this.state._fsp--;
rbh[1] = bhb; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rbh;
},
// Ham4HMLGen.g:459:1: basichandshape returns [String[] rbhquad = [null,null,null,null]] : ^( BASICHDSHP (tmp= handshapeclass | HamNondominant ) ( HamEtc )? ( | tmp= thumbpos (tmp= fingerbending )? | tmp= fingerbending (tmp= thumbpos )? ) ) ;
// $ANTLR start "basichandshape"
basichandshape: function() {
var rbhquad =  [null,null,null,null];
var tmp = null;
try {
// Ham4HMLGen.g:468:5: ( ^( BASICHDSHP (tmp= handshapeclass | HamNondominant ) ( HamEtc )? ( | tmp= thumbpos (tmp= fingerbending )? | tmp= fingerbending (tmp= thumbpos )? ) ) )
// Ham4HMLGen.g:469:5: ^( BASICHDSHP (tmp= handshapeclass | HamNondominant ) ( HamEtc )? ( | tmp= thumbpos (tmp= fingerbending )? | tmp= fingerbending (tmp= thumbpos )? ) )
this.match(this.input,BASICHDSHP,Ham4HMLGen.FOLLOW_BASICHDSHP_in_basichandshape2617); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:470:9: (tmp= handshapeclass | HamNondominant )
var alt31=2;
var LA31_0 = this.input.LA(1);
if ( (LA31_0==HSCLASS) ) {
alt31=1;
}
else if ( (LA31_0==HamNondominant) ) {
alt31=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 31, 0, this.input);
throw nvae;
}
switch (alt31) {
case 1 :
// Ham4HMLGen.g:470:11: tmp= handshapeclass
this.pushFollow(Ham4HMLGen.FOLLOW_handshapeclass_in_basichandshape2639);
tmp=this.handshapeclass();
this.state._fsp--;
rbhquad[0] = tmp; 
break;
case 2 :
// Ham4HMLGen.g:471:23: HamNondominant
this.match(this.input,HamNondominant,Ham4HMLGen.FOLLOW_HamNondominant_in_basichandshape2668); 
rbhquad[0] = "ham_nondominant"; 
break;
}
// Ham4HMLGen.g:473:9: ( HamEtc )?
var alt32=2;
var LA32_0 = this.input.LA(1);
if ( (LA32_0==HamEtc) ) {
alt32=1;
}
switch (alt32) {
case 1 :
// Ham4HMLGen.g:473:11: HamEtc
this.match(this.input,HamEtc,Ham4HMLGen.FOLLOW_HamEtc_in_basichandshape2695); 
rbhquad[3] = "true";  
break;
}
// Ham4HMLGen.g:474:9: ( | tmp= thumbpos (tmp= fingerbending )? | tmp= fingerbending (tmp= thumbpos )? )
var alt35=3;
switch ( this.input.LA(1) ) {
case UP:
alt35=1;
break;
case THUMBPOS:
alt35=2;
break;
case FIBENDING:
alt35=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 35, 0, this.input);
throw nvae;
}
switch (alt35) {
case 1 :
// Ham4HMLGen.g:476:9: 
break;
case 2 :
// Ham4HMLGen.g:477:13: tmp= thumbpos (tmp= fingerbending )?
this.pushFollow(Ham4HMLGen.FOLLOW_thumbpos_in_basichandshape2778);
tmp=this.thumbpos();
this.state._fsp--;
rbhquad[1] = tmp; 
// Ham4HMLGen.g:478:13: (tmp= fingerbending )?
var alt33=2;
var LA33_0 = this.input.LA(1);
if ( (LA33_0==FIBENDING) ) {
alt33=1;
}
switch (alt33) {
case 1 :
// Ham4HMLGen.g:478:15: tmp= fingerbending
this.pushFollow(Ham4HMLGen.FOLLOW_fingerbending_in_basichandshape2811);
tmp=this.fingerbending();
this.state._fsp--;
rbhquad[2] = tmp; 
break;
}
break;
case 3 :
// Ham4HMLGen.g:480:13: tmp= fingerbending (tmp= thumbpos )?
this.pushFollow(Ham4HMLGen.FOLLOW_fingerbending_in_basichandshape2852);
tmp=this.fingerbending();
this.state._fsp--;
rbhquad[2] = tmp; 
// Ham4HMLGen.g:481:13: (tmp= thumbpos )?
var alt34=2;
var LA34_0 = this.input.LA(1);
if ( (LA34_0==THUMBPOS) ) {
alt34=1;
}
switch (alt34) {
case 1 :
// Ham4HMLGen.g:481:15: tmp= thumbpos
this.pushFollow(Ham4HMLGen.FOLLOW_thumbpos_in_basichandshape2880);
tmp=this.thumbpos();
this.state._fsp--;
rbhquad[1] = tmp; 
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rbhquad;
},
// Ham4HMLGen.g:486:1: handshapeclass returns [String rhsc = null] : ^( HSCLASS ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open ) ) ;
// $ANTLR start "handshapeclass"
handshapeclass: function() {
var rhsc =  null;
try {
// Ham4HMLGen.g:488:5: ( ^( HSCLASS ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open ) ) )
// Ham4HMLGen.g:489:5: ^( HSCLASS ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open ) )
this.match(this.input,HSCLASS,Ham4HMLGen.FOLLOW_HSCLASS_in_handshapeclass2939); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:490:9: ( HamFist | HamFlathand | HamFinger2 | HamFinger23 | HamFinger23spread | HamFinger2345 | HamPinch12 | HamPinchall | HamPinch12open | HamCee12 | HamCeeall | HamCee12open )
var alt36=12;
switch ( this.input.LA(1) ) {
case HamFist:
alt36=1;
break;
case HamFlathand:
alt36=2;
break;
case HamFinger2:
alt36=3;
break;
case HamFinger23:
alt36=4;
break;
case HamFinger23spread:
alt36=5;
break;
case HamFinger2345:
alt36=6;
break;
case HamPinch12:
alt36=7;
break;
case HamPinchall:
alt36=8;
break;
case HamPinch12open:
alt36=9;
break;
case HamCee12:
alt36=10;
break;
case HamCeeall:
alt36=11;
break;
case HamCee12open:
alt36=12;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 36, 0, this.input);
throw nvae;
}
switch (alt36) {
case 1 :
// Ham4HMLGen.g:490:13: HamFist
this.match(this.input,HamFist,Ham4HMLGen.FOLLOW_HamFist_in_handshapeclass2953); 
rhsc = "ham_fist"; 
break;
case 2 :
// Ham4HMLGen.g:491:13: HamFlathand
this.match(this.input,HamFlathand,Ham4HMLGen.FOLLOW_HamFlathand_in_handshapeclass2981); 
rhsc = "ham_flathand"; 
break;
case 3 :
// Ham4HMLGen.g:492:13: HamFinger2
this.match(this.input,HamFinger2,Ham4HMLGen.FOLLOW_HamFinger2_in_handshapeclass3005); 
rhsc = "ham_finger2"; 
break;
case 4 :
// Ham4HMLGen.g:493:13: HamFinger23
this.match(this.input,HamFinger23,Ham4HMLGen.FOLLOW_HamFinger23_in_handshapeclass3030); 
rhsc = "ham_finger23"; 
break;
case 5 :
// Ham4HMLGen.g:494:13: HamFinger23spread
this.match(this.input,HamFinger23spread,Ham4HMLGen.FOLLOW_HamFinger23spread_in_handshapeclass3054); 
rhsc = "ham_finger23spread"; 
break;
case 6 :
// Ham4HMLGen.g:495:13: HamFinger2345
this.match(this.input,HamFinger2345,Ham4HMLGen.FOLLOW_HamFinger2345_in_handshapeclass3072); 
rhsc = "ham_finger2345"; 
break;
case 7 :
// Ham4HMLGen.g:496:13: HamPinch12
this.match(this.input,HamPinch12,Ham4HMLGen.FOLLOW_HamPinch12_in_handshapeclass3094); 
rhsc = "ham_pinch12"; 
break;
case 8 :
// Ham4HMLGen.g:497:13: HamPinchall
this.match(this.input,HamPinchall,Ham4HMLGen.FOLLOW_HamPinchall_in_handshapeclass3119); 
rhsc = "ham_pinchall"; 
break;
case 9 :
// Ham4HMLGen.g:498:13: HamPinch12open
this.match(this.input,HamPinch12open,Ham4HMLGen.FOLLOW_HamPinch12open_in_handshapeclass3143); 
rhsc = "ham_pinch12open"; 
break;
case 10 :
// Ham4HMLGen.g:499:13: HamCee12
this.match(this.input,HamCee12,Ham4HMLGen.FOLLOW_HamCee12_in_handshapeclass3164); 
rhsc = "ham_cee12"; 
break;
case 11 :
// Ham4HMLGen.g:500:13: HamCeeall
this.match(this.input,HamCeeall,Ham4HMLGen.FOLLOW_HamCeeall_in_handshapeclass3191); 
rhsc = "ham_ceeall"; 
break;
case 12 :
// Ham4HMLGen.g:501:13: HamCee12open
this.match(this.input,HamCee12open,Ham4HMLGen.FOLLOW_HamCee12open_in_handshapeclass3217); 
rhsc = "ham_cee12open"; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhsc;
},
// Ham4HMLGen.g:506:1: fingerbending returns [String rfb = null] : ^( FIBENDING ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked ) ) ;
// $ANTLR start "fingerbending"
fingerbending: function() {
var rfb =  null;
try {
// Ham4HMLGen.g:508:5: ( ^( FIBENDING ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked ) ) )
// Ham4HMLGen.g:509:5: ^( FIBENDING ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked ) )
this.match(this.input,FIBENDING,Ham4HMLGen.FOLLOW_FIBENDING_in_fingerbending3272); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:510:9: ( HamFingerstraightmod | HamFingerbendmod | HamFingerhookedmod | HamDoublebent | HamDoublehooked )
var alt37=5;
switch ( this.input.LA(1) ) {
case HamFingerstraightmod:
alt37=1;
break;
case HamFingerbendmod:
alt37=2;
break;
case HamFingerhookedmod:
alt37=3;
break;
case HamDoublebent:
alt37=4;
break;
case HamDoublehooked:
alt37=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 37, 0, this.input);
throw nvae;
}
switch (alt37) {
case 1 :
// Ham4HMLGen.g:510:13: HamFingerstraightmod
this.match(this.input,HamFingerstraightmod,Ham4HMLGen.FOLLOW_HamFingerstraightmod_in_fingerbending3286); 
rfb = "ham_finger_straight"; 
break;
case 2 :
// Ham4HMLGen.g:511:13: HamFingerbendmod
this.match(this.input,HamFingerbendmod,Ham4HMLGen.FOLLOW_HamFingerbendmod_in_fingerbending3305); 
rfb = "ham_finger_bend"; 
break;
case 3 :
// Ham4HMLGen.g:512:13: HamFingerhookedmod
this.match(this.input,HamFingerhookedmod,Ham4HMLGen.FOLLOW_HamFingerhookedmod_in_fingerbending3328); 
rfb = "ham_finger_hooked"; 
break;
case 4 :
// Ham4HMLGen.g:513:13: HamDoublebent
this.match(this.input,HamDoublebent,Ham4HMLGen.FOLLOW_HamDoublebent_in_fingerbending3349); 
rfb = "ham_finger_dblbent"; 
break;
case 5 :
// Ham4HMLGen.g:514:13: HamDoublehooked
this.match(this.input,HamDoublehooked,Ham4HMLGen.FOLLOW_HamDoublehooked_in_fingerbending3375); 
rfb = "ham_finger_dblhooked"; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfb;
},
// Ham4HMLGen.g:519:1: thumbpos returns [String rtp = null] : ^( THUMBPOS ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod ) ) ;
// $ANTLR start "thumbpos"
thumbpos: function() {
var rtp =  null;
try {
// Ham4HMLGen.g:521:5: ( ^( THUMBPOS ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod ) ) )
// Ham4HMLGen.g:522:5: ^( THUMBPOS ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod ) )
this.match(this.input,THUMBPOS,Ham4HMLGen.FOLLOW_THUMBPOS_in_thumbpos3436); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:523:9: ( HamThumboutmod | HamThumbacrossmod | HamThumbopenmod )
var alt38=3;
switch ( this.input.LA(1) ) {
case HamThumboutmod:
alt38=1;
break;
case HamThumbacrossmod:
alt38=2;
break;
case HamThumbopenmod:
alt38=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 38, 0, this.input);
throw nvae;
}
switch (alt38) {
case 1 :
// Ham4HMLGen.g:523:13: HamThumboutmod
this.match(this.input,HamThumboutmod,Ham4HMLGen.FOLLOW_HamThumboutmod_in_thumbpos3450); 
rtp = "ham_thumb_out"; 
break;
case 2 :
// Ham4HMLGen.g:524:13: HamThumbacrossmod
this.match(this.input,HamThumbacrossmod,Ham4HMLGen.FOLLOW_HamThumbacrossmod_in_thumbpos3471); 
rtp = "ham_thumb_across"; 
break;
case 3 :
// Ham4HMLGen.g:525:13: HamThumbopenmod
this.match(this.input,HamThumbopenmod,Ham4HMLGen.FOLLOW_HamThumbopenmod_in_thumbpos3489); 
rtp = "ham_thumb_open"; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rtp;
},
// Ham4HMLGen.g:530:1: thumb returns [Element rth = null] : HamThumb ;
// $ANTLR start "thumb"
thumb: function() {
var rth =  null;
try {
// Ham4HMLGen.g:533:5: ( HamThumb )
// Ham4HMLGen.g:533:9: HamThumb
this.match(this.input,HamThumb,Ham4HMLGen.FOLLOW_HamThumb_in_thumb3546); 
rth = hBuilder.newHMLElement("thumb");
rth.setAttribute("fingerid", "ham_digit_1");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rth;
},
// Ham4HMLGen.g:540:1: finger returns [Element rfngr = null] : ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky ) ;
// $ANTLR start "finger"
finger: function() {
var rfngr =  null;
var fi = null;
try {
// Ham4HMLGen.g:546:5: ( ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky ) )
// Ham4HMLGen.g:547:5: ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky )
// Ham4HMLGen.g:547:5: ( HamIndexfinger | HamMiddlefinger | HamRingfinger | HamPinky )
var alt39=4;
switch ( this.input.LA(1) ) {
case HamIndexfinger:
alt39=1;
break;
case HamMiddlefinger:
alt39=2;
break;
case HamRingfinger:
alt39=3;
break;
case HamPinky:
alt39=4;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 39, 0, this.input);
throw nvae;
}
switch (alt39) {
case 1 :
// Ham4HMLGen.g:547:9: HamIndexfinger
this.match(this.input,HamIndexfinger,Ham4HMLGen.FOLLOW_HamIndexfinger_in_finger3596); 
fi = "2"; 
break;
case 2 :
// Ham4HMLGen.g:548:9: HamMiddlefinger
this.match(this.input,HamMiddlefinger,Ham4HMLGen.FOLLOW_HamMiddlefinger_in_finger3617); 
fi = "3"; 
break;
case 3 :
// Ham4HMLGen.g:549:9: HamRingfinger
this.match(this.input,HamRingfinger,Ham4HMLGen.FOLLOW_HamRingfinger_in_finger3637); 
fi = "4"; 
break;
case 4 :
// Ham4HMLGen.g:550:9: HamPinky
this.match(this.input,HamPinky,Ham4HMLGen.FOLLOW_HamPinky_in_finger3659); 
fi = "5"; 
break;
}
rfngr = hBuilder.newHMLElement("fingernothumb");
rfngr.setAttribute("fingerid", "ham_digit_" + fi);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfngr;
},
// Ham4HMLGen.g:558:1: hsfingeritem returns [Element rfngr = null] : ^( HSFINGERITEM fngr= finger ( HamLargemod )? ) ;
// $ANTLR start "hsfingeritem"
hsfingeritem: function() {
var rfngr =  null;
var fngr = null;
var opthumb = false;
try {
// Ham4HMLGen.g:564:5: ( ^( HSFINGERITEM fngr= finger ( HamLargemod )? ) )
// Ham4HMLGen.g:565:5: ^( HSFINGERITEM fngr= finger ( HamLargemod )? )
this.match(this.input,HSFINGERITEM,Ham4HMLGen.FOLLOW_HSFINGERITEM_in_hsfingeritem3723); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_finger_in_hsfingeritem3737);
fngr=this.finger();
this.state._fsp--;
rfngr = fngr; 
// Ham4HMLGen.g:567:9: ( HamLargemod )?
var alt40=2;
var LA40_0 = this.input.LA(1);
if ( (LA40_0==HamLargemod) ) {
alt40=1;
}
switch (alt40) {
case 1 :
// Ham4HMLGen.g:567:11: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_hsfingeritem3757); 
opthumb = true; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
hBuilder.checkedSetFlagAttr(rfngr, "thumbopp", opthumb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfngr;
},
// Ham4HMLGen.g:574:1: digit returns [Element rd = null] : (fi= thumb | fi= finger ) ;
// $ANTLR start "digit"
digit: function() {
var rd =  null;
var fi = null;
try {
// Ham4HMLGen.g:577:5: ( (fi= thumb | fi= finger ) )
// Ham4HMLGen.g:578:5: (fi= thumb | fi= finger )
// Ham4HMLGen.g:578:5: (fi= thumb | fi= finger )
var alt41=2;
var LA41_0 = this.input.LA(1);
if ( (LA41_0==HamThumb) ) {
alt41=1;
}
else if ( ((LA41_0>=HamIndexfinger && LA41_0<=HamPinky)) ) {
alt41=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 41, 0, this.input);
throw nvae;
}
switch (alt41) {
case 1 :
// Ham4HMLGen.g:578:9: fi= thumb
this.pushFollow(Ham4HMLGen.FOLLOW_thumb_in_digit3825);
fi=this.thumb();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:579:9: fi= finger
this.pushFollow(Ham4HMLGen.FOLLOW_finger_in_digit3839);
fi=this.finger();
this.state._fsp--;
break;
}
rd = hBuilder.newHMLElement("finger");
rd.setAttribute("fingerid", fi.getAttribute("fingerid"));
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rd;
},
// Ham4HMLGen.g:587:1: fingerlist returns [Element[] rfngl = null] : ^( FINGERLIST (fng= hsfingeritem )* ) ;
// $ANTLR start "fingerlist"
fingerlist: function() {
var rfngl =  null;
var fng = null;
var      al  = [];
try {
// Ham4HMLGen.g:593:5: ( ^( FINGERLIST (fng= hsfingeritem )* ) )
// Ham4HMLGen.g:594:5: ^( FINGERLIST (fng= hsfingeritem )* )
this.match(this.input,FINGERLIST,Ham4HMLGen.FOLLOW_FINGERLIST_in_fingerlist3888); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:595:9: (fng= hsfingeritem )*
loop42:
do {
var alt42=2;
var LA42_0 = this.input.LA(1);
if ( (LA42_0==HSFINGERITEM) ) {
alt42=1;
}
switch (alt42) {
case 1 :
// Ham4HMLGen.g:595:11: fng= hsfingeritem
this.pushFollow(Ham4HMLGen.FOLLOW_hsfingeritem_in_fingerlist3904);
fng=this.hsfingeritem();
this.state._fsp--;
al.push(fng); 
break;
default :
break loop42;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
rfngl = al;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfngl;
},
// Ham4HMLGen.g:602:1: fingershapelist returns [Element[] rfsl = null] : ^( FISHPLIST (fs= fingershape )* ) ;
// $ANTLR start "fingershapelist"
fingershapelist: function() {
var rfsl =  null;
var fs = null;
var    al  = [];
try {
// Ham4HMLGen.g:608:5: ( ^( FISHPLIST (fs= fingershape )* ) )
// Ham4HMLGen.g:609:5: ^( FISHPLIST (fs= fingershape )* )
this.match(this.input,FISHPLIST,Ham4HMLGen.FOLLOW_FISHPLIST_in_fingershapelist3968); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:610:9: (fs= fingershape )*
loop43:
do {
var alt43=2;
var LA43_0 = this.input.LA(1);
if ( (LA43_0==FSHAPE) ) {
alt43=1;
}
switch (alt43) {
case 1 :
// Ham4HMLGen.g:610:11: fs= fingershape
this.pushFollow(Ham4HMLGen.FOLLOW_fingershape_in_fingershapelist3984);
fs=this.fingershape();
this.state._fsp--;
al.push(fs); 
break;
default :
break loop43;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
rfsl = al;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfsl;
},
// Ham4HMLGen.g:617:1: fingercrossinglist returns [Element[] rfcl = null] : ^( FICRSSLIST (fc= fingercrossing )* ) ;
// $ANTLR start "fingercrossinglist"
fingercrossinglist: function() {
var rfcl =  null;
var fc = null;
var    al  = [];
try {
// Ham4HMLGen.g:623:5: ( ^( FICRSSLIST (fc= fingercrossing )* ) )
// Ham4HMLGen.g:624:5: ^( FICRSSLIST (fc= fingercrossing )* )
this.match(this.input,FICRSSLIST,Ham4HMLGen.FOLLOW_FICRSSLIST_in_fingercrossinglist4047); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:625:9: (fc= fingercrossing )*
loop44:
do {
var alt44=2;
var LA44_0 = this.input.LA(1);
if ( (LA44_0==FCROSSING) ) {
alt44=1;
}
switch (alt44) {
case 1 :
// Ham4HMLGen.g:625:11: fc= fingercrossing
this.pushFollow(Ham4HMLGen.FOLLOW_fingercrossing_in_fingercrossinglist4063);
fc=this.fingercrossing();
this.state._fsp--;
al.push(fc); 
break;
default :
break loop44;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
rfcl = al;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfcl;
},
// Ham4HMLGen.g:632:1: fingershape returns [Element rfs = null] : ^( FSHAPE d= digit fb= fingerbending ) ;
// $ANTLR start "fingershape"
fingershape: function() {
var rfs =  null;
var d = null;
var fb = null;
try {
// Ham4HMLGen.g:635:5: ( ^( FSHAPE d= digit fb= fingerbending ) )
// Ham4HMLGen.g:636:5: ^( FSHAPE d= digit fb= fingerbending )
this.match(this.input,FSHAPE,Ham4HMLGen.FOLLOW_FSHAPE_in_fingershape4118); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_fingershape4133);
d=this.digit();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_fingerbending_in_fingershape4147);
fb=this.fingerbending();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rfs = hBuilder.newHMLElement("fingershape");
rfs.appendChild(d);
rfs.setAttribute("fingerbending", fb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfs;
},
// Ham4HMLGen.g:647:1: fingercrossing returns [Element rfc = null] : ^( FCROSSING d0= digit fip= fingerpart d1= digit ) ;
// $ANTLR start "fingercrossing"
fingercrossing: function() {
var rfc =  null;
var d0 = null;
var fip = null;
var d1 = null;
try {
// Ham4HMLGen.g:650:5: ( ^( FCROSSING d0= digit fip= fingerpart d1= digit ) )
// Ham4HMLGen.g:651:5: ^( FCROSSING d0= digit fip= fingerpart d1= digit )
this.match(this.input,FCROSSING,Ham4HMLGen.FOLLOW_FCROSSING_in_fingercrossing4188); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_fingercrossing4202);
d0=this.digit();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_fingerpart_in_fingercrossing4216);
fip=this.fingerpart();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_fingercrossing4230);
d1=this.digit();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rfc = hBuilder.newHMLElement("fingercrossing");
rfc.appendChild(d0);
rfc.appendChild(fip);
rfc.appendChild(d1);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfc;
},
// Ham4HMLGen.g:664:1: thumbspecial returns [Element rts = null] : ^( THSPECIAL ( ^( HamBetween (fng0= finger fng1= finger )? ) | th= thumb | fp= fingerpart ) ) ;
// $ANTLR start "thumbspecial"
thumbspecial: function() {
var rts =  null;
var fng0 = null;
var fng1 = null;
var th = null;
var fp = null;
rts = hBuilder.newHMLElement("thumbspecial");
try {
// Ham4HMLGen.g:670:5: ( ^( THSPECIAL ( ^( HamBetween (fng0= finger fng1= finger )? ) | th= thumb | fp= fingerpart ) ) )
// Ham4HMLGen.g:671:5: ^( THSPECIAL ( ^( HamBetween (fng0= finger fng1= finger )? ) | th= thumb | fp= fingerpart ) )
this.match(this.input,THSPECIAL,Ham4HMLGen.FOLLOW_THSPECIAL_in_thumbspecial4276); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:672:9: ( ^( HamBetween (fng0= finger fng1= finger )? ) | th= thumb | fp= fingerpart )
var alt46=3;
switch ( this.input.LA(1) ) {
case HamBetween:
alt46=1;
break;
case HamThumb:
alt46=2;
break;
case HamFingertip:
case HamFingernail:
case HamFingerpad:
case HamFingermidjoint:
case HamFingerbase:
case HamFingerside:
alt46=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 46, 0, this.input);
throw nvae;
}
switch (alt46) {
case 1 :
// Ham4HMLGen.g:672:13: ^( HamBetween (fng0= finger fng1= finger )? )
this.match(this.input,HamBetween,Ham4HMLGen.FOLLOW_HamBetween_in_thumbspecial4291); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:673:17: (fng0= finger fng1= finger )?
var alt45=2;
var LA45_0 = this.input.LA(1);
if ( ((LA45_0>=HamIndexfinger && LA45_0<=HamPinky)) ) {
alt45=1;
}
switch (alt45) {
case 1 :
// Ham4HMLGen.g:673:21: fng0= finger fng1= finger
this.pushFollow(Ham4HMLGen.FOLLOW_finger_in_thumbspecial4317);
fng0=this.finger();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_finger_in_thumbspecial4343);
fng1=this.finger();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
if (fng0 == null) {
var btwn = hBuilder.newHMLElement("hambetween");
rts.appendChild(btwn);
}
else {
rts.appendChild(fng0);
rts.appendChild(fng1);
}
break;
case 2 :
// Ham4HMLGen.g:687:13: th= thumb
this.pushFollow(Ham4HMLGen.FOLLOW_thumb_in_thumbspecial4408);
th=this.thumb();
this.state._fsp--;
rts.appendChild(th); 
break;
case 3 :
// Ham4HMLGen.g:688:13: fp= fingerpart
this.pushFollow(Ham4HMLGen.FOLLOW_fingerpart_in_thumbspecial4441);
fp=this.fingerpart();
this.state._fsp--;
rts.appendChild(fp); 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rts;
},
// Ham4HMLGen.g:693:1: fingerpart returns [Element rfp = null] : ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside ) ;
// $ANTLR start "fingerpart"
fingerpart: function() {
var rfp =  null;
var  fp = null;
try {
// Ham4HMLGen.g:699:5: ( ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside ) )
// Ham4HMLGen.g:700:5: ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside )
// Ham4HMLGen.g:700:5: ( HamFingertip | HamFingernail | HamFingerpad | HamFingermidjoint | HamFingerbase | HamFingerside )
var alt47=6;
switch ( this.input.LA(1) ) {
case HamFingertip:
alt47=1;
break;
case HamFingernail:
alt47=2;
break;
case HamFingerpad:
alt47=3;
break;
case HamFingermidjoint:
alt47=4;
break;
case HamFingerbase:
alt47=5;
break;
case HamFingerside:
alt47=6;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 47, 0, this.input);
throw nvae;
}
switch (alt47) {
case 1 :
// Ham4HMLGen.g:700:9: HamFingertip
this.match(this.input,HamFingertip,Ham4HMLGen.FOLLOW_HamFingertip_in_fingerpart4507); 
fp = "ham_finger_tip"; 
break;
case 2 :
// Ham4HMLGen.g:701:9: HamFingernail
this.match(this.input,HamFingernail,Ham4HMLGen.FOLLOW_HamFingernail_in_fingerpart4530); 
fp = "ham_finger_nail"; 
break;
case 3 :
// Ham4HMLGen.g:702:9: HamFingerpad
this.match(this.input,HamFingerpad,Ham4HMLGen.FOLLOW_HamFingerpad_in_fingerpart4552); 
fp = "ham_finger_pad"; 
break;
case 4 :
// Ham4HMLGen.g:703:9: HamFingermidjoint
this.match(this.input,HamFingermidjoint,Ham4HMLGen.FOLLOW_HamFingermidjoint_in_fingerpart4575); 
fp = "ham_finger_midjoint"; 
break;
case 5 :
// Ham4HMLGen.g:704:9: HamFingerbase
this.match(this.input,HamFingerbase,Ham4HMLGen.FOLLOW_HamFingerbase_in_fingerpart4593); 
fp = "ham_finger_base"; 
break;
case 6 :
// Ham4HMLGen.g:705:9: HamFingerside
this.match(this.input,HamFingerside,Ham4HMLGen.FOLLOW_HamFingerside_in_fingerpart4615); 
fp = "ham_finger_side"; 
break;
}
rfp = hBuilder.newHMLElement("fingerpart");
rfp.setAttribute("fingerpart", fp);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfp;
},
// Ham4HMLGen.g:716:1: extfidir2 returns [Element refd = null] : ^( EXTFIDIR2 da= extfidir1 (db= extfidir1 )? ) ;
// $ANTLR start "extfidir2"
extfidir2: function() {
var refd =  null;
var da = null;
var db = null;
try {
// Ham4HMLGen.g:719:5: ( ^( EXTFIDIR2 da= extfidir1 (db= extfidir1 )? ) )
// Ham4HMLGen.g:720:5: ^( EXTFIDIR2 da= extfidir1 (db= extfidir1 )? )
this.match(this.input,EXTFIDIR2,Ham4HMLGen.FOLLOW_EXTFIDIR2_in_extfidir24676); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_extfidir24695);
da=this.extfidir1();
this.state._fsp--;
// Ham4HMLGen.g:722:9: (db= extfidir1 )?
var alt48=2;
var LA48_0 = this.input.LA(1);
if ( (LA48_0==EXTFIDIR1) ) {
alt48=1;
}
switch (alt48) {
case 1 :
// Ham4HMLGen.g:722:11: db= extfidir1
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_extfidir24714);
db=this.extfidir1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
refd = hBuilder.newHMLElement("extfidir2");
refd.appendChild(da);
hBuilder.checkedAppendChild(refd, db);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return refd;
},
// Ham4HMLGen.g:731:1: extfidir1 returns [Element refd1 = null] : ^( EXTFIDIR1 efda= extfidir (efdb= extfidir )? ( HamOrirelative )? ) ;
// $ANTLR start "extfidir1"
extfidir1: function() {
var refd1 =  null;
var efda = null;
var efdb = null;
var orirel = false;
try {
// Ham4HMLGen.g:737:5: ( ^( EXTFIDIR1 efda= extfidir (efdb= extfidir )? ( HamOrirelative )? ) )
// Ham4HMLGen.g:738:5: ^( EXTFIDIR1 efda= extfidir (efdb= extfidir )? ( HamOrirelative )? )
this.match(this.input,EXTFIDIR1,Ham4HMLGen.FOLLOW_EXTFIDIR1_in_extfidir14767); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir_in_extfidir14784);
efda=this.extfidir();
this.state._fsp--;
// Ham4HMLGen.g:740:9: (efdb= extfidir )?
var alt49=2;
var LA49_0 = this.input.LA(1);
if ( (LA49_0==EXTFIDIR) ) {
alt49=1;
}
switch (alt49) {
case 1 :
// Ham4HMLGen.g:740:11: efdb= extfidir
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir_in_extfidir14801);
efdb=this.extfidir();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:741:9: ( HamOrirelative )?
var alt50=2;
var LA50_0 = this.input.LA(1);
if ( (LA50_0==HamOrirelative) ) {
alt50=1;
}
switch (alt50) {
case 1 :
// Ham4HMLGen.g:741:19: HamOrirelative
this.match(this.input,HamOrirelative,Ham4HMLGen.FOLLOW_HamOrirelative_in_extfidir14824); 
orirel = true; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
refd1 = hBuilder.newHMLElement("extfidir1");
refd1.setAttribute("extfidir", efda);
hBuilder.checkedSetAttr(refd1, "second_extfidir", efdb);
hBuilder.checkedSetFlagAttr(refd1, "rel_extfidir", orirel);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return refd1;
},
// Ham4HMLGen.g:751:1: extfidir returns [String refd = null] : ^( EXTFIDIR ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) ) ) ;
// $ANTLR start "extfidir"
extfidir: function() {
var refd =  null;
var dir = null;
try {
// Ham4HMLGen.g:758:5: ( ^( EXTFIDIR ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) ) ) )
// Ham4HMLGen.g:759:5: ^( EXTFIDIR ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) ) )
this.match(this.input,EXTFIDIR,Ham4HMLGen.FOLLOW_EXTFIDIR_in_extfidir4887); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:760:9: ( HamExtfingeru | HamExtfingerur | HamExtfingerr | HamExtfingerdr | HamExtfingerd | HamExtfingerdl | HamExtfingerl | HamExtfingerul | ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? ) | HamExtfingero | ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? ) | ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? ) | HamExtfingeri | ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? ) | ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? ) | ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? ) | ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? ) )
var alt59=18;
switch ( this.input.LA(1) ) {
case HamExtfingeru:
alt59=1;
break;
case HamExtfingerur:
alt59=2;
break;
case HamExtfingerr:
alt59=3;
break;
case HamExtfingerdr:
alt59=4;
break;
case HamExtfingerd:
alt59=5;
break;
case HamExtfingerdl:
alt59=6;
break;
case HamExtfingerl:
alt59=7;
break;
case HamExtfingerul:
alt59=8;
break;
case HamExtfingerol:
alt59=9;
break;
case HamExtfingero:
alt59=10;
break;
case HamExtfingeror:
alt59=11;
break;
case HamExtfingeril:
alt59=12;
break;
case HamExtfingeri:
alt59=13;
break;
case HamExtfingerir:
alt59=14;
break;
case HamExtfingeruo:
alt59=15;
break;
case HamExtfingerdo:
alt59=16;
break;
case HamExtfingerui:
alt59=17;
break;
case HamExtfingerdi:
alt59=18;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 59, 0, this.input);
throw nvae;
}
switch (alt59) {
case 1 :
// Ham4HMLGen.g:762:13: HamExtfingeru
this.match(this.input,HamExtfingeru,Ham4HMLGen.FOLLOW_HamExtfingeru_in_extfidir4921); 
dir = "u"; 
break;
case 2 :
// Ham4HMLGen.g:763:13: HamExtfingerur
this.match(this.input,HamExtfingerur,Ham4HMLGen.FOLLOW_HamExtfingerur_in_extfidir4951); 
dir = "ur"; 
break;
case 3 :
// Ham4HMLGen.g:764:13: HamExtfingerr
this.match(this.input,HamExtfingerr,Ham4HMLGen.FOLLOW_HamExtfingerr_in_extfidir4980); 
dir = "r"; 
break;
case 4 :
// Ham4HMLGen.g:765:13: HamExtfingerdr
this.match(this.input,HamExtfingerdr,Ham4HMLGen.FOLLOW_HamExtfingerdr_in_extfidir5010); 
dir = "dr"; 
break;
case 5 :
// Ham4HMLGen.g:766:13: HamExtfingerd
this.match(this.input,HamExtfingerd,Ham4HMLGen.FOLLOW_HamExtfingerd_in_extfidir5039); 
dir = "d"; 
break;
case 6 :
// Ham4HMLGen.g:767:13: HamExtfingerdl
this.match(this.input,HamExtfingerdl,Ham4HMLGen.FOLLOW_HamExtfingerdl_in_extfidir5069); 
dir = "dl"; 
break;
case 7 :
// Ham4HMLGen.g:768:13: HamExtfingerl
this.match(this.input,HamExtfingerl,Ham4HMLGen.FOLLOW_HamExtfingerl_in_extfidir5098); 
dir = "l"; 
break;
case 8 :
// Ham4HMLGen.g:769:13: HamExtfingerul
this.match(this.input,HamExtfingerul,Ham4HMLGen.FOLLOW_HamExtfingerul_in_extfidir5128); 
dir = "ul"; 
break;
case 9 :
// Ham4HMLGen.g:771:13: ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4HMLGen.g:771:13: ( HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4HMLGen.g:772:17: HamExtfingerol ( HamExtfingeruo | HamExtfingerdo )?
this.match(this.input,HamExtfingerol,Ham4HMLGen.FOLLOW_HamExtfingerol_in_extfidir5185); 
dir = "ol"; 
// Ham4HMLGen.g:773:17: ( HamExtfingeruo | HamExtfingerdo )?
var alt51=3;
var LA51_0 = this.input.LA(1);
if ( (LA51_0==HamExtfingeruo) ) {
alt51=1;
}
else if ( (LA51_0==HamExtfingerdo) ) {
alt51=2;
}
switch (alt51) {
case 1 :
// Ham4HMLGen.g:774:21: HamExtfingeruo
this.match(this.input,HamExtfingeruo,Ham4HMLGen.FOLLOW_HamExtfingeruo_in_extfidir5236); 
dir = "uol"; 
break;
case 2 :
// Ham4HMLGen.g:775:21: HamExtfingerdo
this.match(this.input,HamExtfingerdo,Ham4HMLGen.FOLLOW_HamExtfingerdo_in_extfidir5265); 
dir = "dol"; 
break;
}
break;
case 10 :
// Ham4HMLGen.g:778:13: HamExtfingero
this.match(this.input,HamExtfingero,Ham4HMLGen.FOLLOW_HamExtfingero_in_extfidir5319); 
dir = "o"; 
break;
case 11 :
// Ham4HMLGen.g:779:13: ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4HMLGen.g:779:13: ( HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )? )
// Ham4HMLGen.g:780:17: HamExtfingeror ( HamExtfingeruo | HamExtfingerdo )?
this.match(this.input,HamExtfingeror,Ham4HMLGen.FOLLOW_HamExtfingeror_in_extfidir5367); 
dir = "or"; 
// Ham4HMLGen.g:781:17: ( HamExtfingeruo | HamExtfingerdo )?
var alt52=3;
var LA52_0 = this.input.LA(1);
if ( (LA52_0==HamExtfingeruo) ) {
alt52=1;
}
else if ( (LA52_0==HamExtfingerdo) ) {
alt52=2;
}
switch (alt52) {
case 1 :
// Ham4HMLGen.g:782:21: HamExtfingeruo
this.match(this.input,HamExtfingeruo,Ham4HMLGen.FOLLOW_HamExtfingeruo_in_extfidir5418); 
dir = "uor"; 
break;
case 2 :
// Ham4HMLGen.g:783:21: HamExtfingerdo
this.match(this.input,HamExtfingerdo,Ham4HMLGen.FOLLOW_HamExtfingerdo_in_extfidir5447); 
dir = "dor"; 
break;
}
break;
case 12 :
// Ham4HMLGen.g:786:13: ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? )
// Ham4HMLGen.g:786:13: ( HamExtfingeril ( HamExtfingerui | HamExtfingerdi )? )
// Ham4HMLGen.g:787:17: HamExtfingeril ( HamExtfingerui | HamExtfingerdi )?
this.match(this.input,HamExtfingeril,Ham4HMLGen.FOLLOW_HamExtfingeril_in_extfidir5519); 
dir = "il"; 
// Ham4HMLGen.g:788:17: ( HamExtfingerui | HamExtfingerdi )?
var alt53=3;
var LA53_0 = this.input.LA(1);
if ( (LA53_0==HamExtfingerui) ) {
alt53=1;
}
else if ( (LA53_0==HamExtfingerdi) ) {
alt53=2;
}
switch (alt53) {
case 1 :
// Ham4HMLGen.g:789:21: HamExtfingerui
this.match(this.input,HamExtfingerui,Ham4HMLGen.FOLLOW_HamExtfingerui_in_extfidir5570); 
dir = "uil"; 
break;
case 2 :
// Ham4HMLGen.g:790:21: HamExtfingerdi
this.match(this.input,HamExtfingerdi,Ham4HMLGen.FOLLOW_HamExtfingerdi_in_extfidir5599); 
dir = "dil"; 
break;
}
break;
case 13 :
// Ham4HMLGen.g:793:13: HamExtfingeri
this.match(this.input,HamExtfingeri,Ham4HMLGen.FOLLOW_HamExtfingeri_in_extfidir5653); 
dir = "i"; 
break;
case 14 :
// Ham4HMLGen.g:794:13: ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? )
// Ham4HMLGen.g:794:13: ( HamExtfingerir ( HamExtfingerui | HamExtfingerdi )? )
// Ham4HMLGen.g:795:17: HamExtfingerir ( HamExtfingerui | HamExtfingerdi )?
this.match(this.input,HamExtfingerir,Ham4HMLGen.FOLLOW_HamExtfingerir_in_extfidir5701); 
dir = "ir"; 
// Ham4HMLGen.g:796:17: ( HamExtfingerui | HamExtfingerdi )?
var alt54=3;
var LA54_0 = this.input.LA(1);
if ( (LA54_0==HamExtfingerui) ) {
alt54=1;
}
else if ( (LA54_0==HamExtfingerdi) ) {
alt54=2;
}
switch (alt54) {
case 1 :
// Ham4HMLGen.g:797:21: HamExtfingerui
this.match(this.input,HamExtfingerui,Ham4HMLGen.FOLLOW_HamExtfingerui_in_extfidir5752); 
dir = "uir"; 
break;
case 2 :
// Ham4HMLGen.g:798:21: HamExtfingerdi
this.match(this.input,HamExtfingerdi,Ham4HMLGen.FOLLOW_HamExtfingerdi_in_extfidir5781); 
dir = "dir"; 
break;
}
break;
case 15 :
// Ham4HMLGen.g:802:13: ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? )
// Ham4HMLGen.g:802:13: ( HamExtfingeruo ( HamExtfingerol | HamExtfingeror )? )
// Ham4HMLGen.g:803:17: HamExtfingeruo ( HamExtfingerol | HamExtfingeror )?
this.match(this.input,HamExtfingeruo,Ham4HMLGen.FOLLOW_HamExtfingeruo_in_extfidir5863); 
dir = "uo"; 
// Ham4HMLGen.g:804:17: ( HamExtfingerol | HamExtfingeror )?
var alt55=3;
var LA55_0 = this.input.LA(1);
if ( (LA55_0==HamExtfingerol) ) {
alt55=1;
}
else if ( (LA55_0==HamExtfingeror) ) {
alt55=2;
}
switch (alt55) {
case 1 :
// Ham4HMLGen.g:805:21: HamExtfingerol
this.match(this.input,HamExtfingerol,Ham4HMLGen.FOLLOW_HamExtfingerol_in_extfidir5914); 
dir = "uol"; 
break;
case 2 :
// Ham4HMLGen.g:806:21: HamExtfingeror
this.match(this.input,HamExtfingeror,Ham4HMLGen.FOLLOW_HamExtfingeror_in_extfidir5943); 
dir = "uor"; 
break;
}
break;
case 16 :
// Ham4HMLGen.g:809:13: ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? )
// Ham4HMLGen.g:809:13: ( HamExtfingerdo ( HamExtfingerol | HamExtfingeror )? )
// Ham4HMLGen.g:810:17: HamExtfingerdo ( HamExtfingerol | HamExtfingeror )?
this.match(this.input,HamExtfingerdo,Ham4HMLGen.FOLLOW_HamExtfingerdo_in_extfidir6015); 
dir = "do"; 
// Ham4HMLGen.g:811:17: ( HamExtfingerol | HamExtfingeror )?
var alt56=3;
var LA56_0 = this.input.LA(1);
if ( (LA56_0==HamExtfingerol) ) {
alt56=1;
}
else if ( (LA56_0==HamExtfingeror) ) {
alt56=2;
}
switch (alt56) {
case 1 :
// Ham4HMLGen.g:812:21: HamExtfingerol
this.match(this.input,HamExtfingerol,Ham4HMLGen.FOLLOW_HamExtfingerol_in_extfidir6066); 
dir = "dol"; 
break;
case 2 :
// Ham4HMLGen.g:813:21: HamExtfingeror
this.match(this.input,HamExtfingeror,Ham4HMLGen.FOLLOW_HamExtfingeror_in_extfidir6095); 
dir = "dor"; 
break;
}
break;
case 17 :
// Ham4HMLGen.g:816:13: ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? )
// Ham4HMLGen.g:816:13: ( HamExtfingerui ( HamExtfingeril | HamExtfingerir )? )
// Ham4HMLGen.g:817:17: HamExtfingerui ( HamExtfingeril | HamExtfingerir )?
this.match(this.input,HamExtfingerui,Ham4HMLGen.FOLLOW_HamExtfingerui_in_extfidir6167); 
dir = "ui"; 
// Ham4HMLGen.g:818:17: ( HamExtfingeril | HamExtfingerir )?
var alt57=3;
var LA57_0 = this.input.LA(1);
if ( (LA57_0==HamExtfingeril) ) {
alt57=1;
}
else if ( (LA57_0==HamExtfingerir) ) {
alt57=2;
}
switch (alt57) {
case 1 :
// Ham4HMLGen.g:819:21: HamExtfingeril
this.match(this.input,HamExtfingeril,Ham4HMLGen.FOLLOW_HamExtfingeril_in_extfidir6218); 
dir = "uil"; 
break;
case 2 :
// Ham4HMLGen.g:820:21: HamExtfingerir
this.match(this.input,HamExtfingerir,Ham4HMLGen.FOLLOW_HamExtfingerir_in_extfidir6247); 
dir = "uir"; 
break;
}
break;
case 18 :
// Ham4HMLGen.g:823:13: ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? )
// Ham4HMLGen.g:823:13: ( HamExtfingerdi ( HamExtfingeril | HamExtfingerir )? )
// Ham4HMLGen.g:824:17: HamExtfingerdi ( HamExtfingeril | HamExtfingerir )?
this.match(this.input,HamExtfingerdi,Ham4HMLGen.FOLLOW_HamExtfingerdi_in_extfidir6319); 
dir = "di"; 
// Ham4HMLGen.g:825:17: ( HamExtfingeril | HamExtfingerir )?
var alt58=3;
var LA58_0 = this.input.LA(1);
if ( (LA58_0==HamExtfingeril) ) {
alt58=1;
}
else if ( (LA58_0==HamExtfingerir) ) {
alt58=2;
}
switch (alt58) {
case 1 :
// Ham4HMLGen.g:826:21: HamExtfingeril
this.match(this.input,HamExtfingeril,Ham4HMLGen.FOLLOW_HamExtfingeril_in_extfidir6370); 
dir = "dil"; 
break;
case 2 :
// Ham4HMLGen.g:827:21: HamExtfingerir
this.match(this.input,HamExtfingerir,Ham4HMLGen.FOLLOW_HamExtfingerir_in_extfidir6399); 
dir = "dir"; 
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
refd = "direction_" + dir;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return refd;
},
// Ham4HMLGen.g:840:1: palmor2 returns [Element rpo = null] : ^( PALMOR2 poa= palmor1 (pob= palmor1 )? ) ;
// $ANTLR start "palmor2"
palmor2: function() {
var rpo =  null;
var poa = null;
var pob = null;
try {
// Ham4HMLGen.g:843:5: ( ^( PALMOR2 poa= palmor1 (pob= palmor1 )? ) )
// Ham4HMLGen.g:844:5: ^( PALMOR2 poa= palmor1 (pob= palmor1 )? )
this.match(this.input,PALMOR2,Ham4HMLGen.FOLLOW_PALMOR2_in_palmor26500); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_palmor26518);
poa=this.palmor1();
this.state._fsp--;
// Ham4HMLGen.g:846:9: (pob= palmor1 )?
var alt60=2;
var LA60_0 = this.input.LA(1);
if ( (LA60_0==PALMOR1) ) {
alt60=1;
}
switch (alt60) {
case 1 :
// Ham4HMLGen.g:846:11: pob= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_palmor26536);
pob=this.palmor1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rpo = hBuilder.newHMLElement("palmor2");
rpo.appendChild(poa);
hBuilder.checkedAppendChild(rpo, pob);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpo;
},
// Ham4HMLGen.g:855:1: palmor1 returns [Element rpo1 = null] : ^( PALMOR1 poa= palmor (pob= palmor | HamEtc )? ( HamOrirelative )? ) ;
// $ANTLR start "palmor1"
palmor1: function() {
var rpo1 =  null;
var poa = null;
var pob = null;
var approxpo = false;
var orirel = false;
try {
// Ham4HMLGen.g:862:5: ( ^( PALMOR1 poa= palmor (pob= palmor | HamEtc )? ( HamOrirelative )? ) )
// Ham4HMLGen.g:863:5: ^( PALMOR1 poa= palmor (pob= palmor | HamEtc )? ( HamOrirelative )? )
this.match(this.input,PALMOR1,Ham4HMLGen.FOLLOW_PALMOR1_in_palmor16591); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_palmor_in_palmor16609);
poa=this.palmor();
this.state._fsp--;
// Ham4HMLGen.g:865:9: (pob= palmor | HamEtc )?
var alt61=3;
var LA61_0 = this.input.LA(1);
if ( ((LA61_0>=HamPalmu && LA61_0<=HamPalmul)) ) {
alt61=1;
}
else if ( (LA61_0==HamEtc) ) {
alt61=2;
}
switch (alt61) {
case 1 :
// Ham4HMLGen.g:866:13: pob= palmor
this.pushFollow(Ham4HMLGen.FOLLOW_palmor_in_palmor16637);
pob=this.palmor();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:868:19: HamEtc
this.match(this.input,HamEtc,Ham4HMLGen.FOLLOW_HamEtc_in_palmor16667); 
approxpo = true; 
break;
}
// Ham4HMLGen.g:870:9: ( HamOrirelative )?
var alt62=2;
var LA62_0 = this.input.LA(1);
if ( (LA62_0==HamOrirelative) ) {
alt62=1;
}
switch (alt62) {
case 1 :
// Ham4HMLGen.g:870:19: HamOrirelative
this.match(this.input,HamOrirelative,Ham4HMLGen.FOLLOW_HamOrirelative_in_palmor16709); 
orirel = true; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rpo1 = hBuilder.newHMLElement("palmor1");
rpo1.setAttribute("palmor", poa);
hBuilder.checkedSetAttr(rpo1, "second_palmor", pob);
hBuilder.checkedSetFlagAttr(rpo1, "approx_palmor", approxpo);
hBuilder.checkedSetFlagAttr(rpo1, "rel_palmor", orirel);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpo1;
},
// Ham4HMLGen.g:882:1: palmor returns [String rpo = null] : ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul ) ;
// $ANTLR start "palmor"
palmor: function() {
var rpo =  null;
var  dir = null;
try {
// Ham4HMLGen.g:889:5: ( ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul ) )
// Ham4HMLGen.g:890:5: ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul )
// Ham4HMLGen.g:890:5: ( HamPalmu | HamPalmur | HamPalmr | HamPalmdr | HamPalmd | HamPalmdl | HamPalml | HamPalmul )
var alt63=8;
switch ( this.input.LA(1) ) {
case HamPalmu:
alt63=1;
break;
case HamPalmur:
alt63=2;
break;
case HamPalmr:
alt63=3;
break;
case HamPalmdr:
alt63=4;
break;
case HamPalmd:
alt63=5;
break;
case HamPalmdl:
alt63=6;
break;
case HamPalml:
alt63=7;
break;
case HamPalmul:
alt63=8;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 63, 0, this.input);
throw nvae;
}
switch (alt63) {
case 1 :
// Ham4HMLGen.g:890:9: HamPalmu
this.match(this.input,HamPalmu,Ham4HMLGen.FOLLOW_HamPalmu_in_palmor6778); 
dir = "u"; 
break;
case 2 :
// Ham4HMLGen.g:891:9: HamPalmur
this.match(this.input,HamPalmur,Ham4HMLGen.FOLLOW_HamPalmur_in_palmor6801); 
dir = "ur"; 
break;
case 3 :
// Ham4HMLGen.g:892:9: HamPalmr
this.match(this.input,HamPalmr,Ham4HMLGen.FOLLOW_HamPalmr_in_palmor6823); 
dir = "r"; 
break;
case 4 :
// Ham4HMLGen.g:893:9: HamPalmdr
this.match(this.input,HamPalmdr,Ham4HMLGen.FOLLOW_HamPalmdr_in_palmor6846); 
dir = "dr"; 
break;
case 5 :
// Ham4HMLGen.g:894:9: HamPalmd
this.match(this.input,HamPalmd,Ham4HMLGen.FOLLOW_HamPalmd_in_palmor6868); 
dir = "d"; 
break;
case 6 :
// Ham4HMLGen.g:895:9: HamPalmdl
this.match(this.input,HamPalmdl,Ham4HMLGen.FOLLOW_HamPalmdl_in_palmor6891); 
dir = "dl"; 
break;
case 7 :
// Ham4HMLGen.g:896:9: HamPalml
this.match(this.input,HamPalml,Ham4HMLGen.FOLLOW_HamPalml_in_palmor6913); 
dir = "l"; 
break;
case 8 :
// Ham4HMLGen.g:897:9: HamPalmul
this.match(this.input,HamPalmul,Ham4HMLGen.FOLLOW_HamPalmul_in_palmor6936); 
dir = "ul"; 
break;
}
rpo = "ham_palm_" + dir;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpo;
},
// Ham4HMLGen.g:907:1: location2 returns [Element rloc = null] : ^( LOC2 (lc1= location1 (lc1x= location1 )? | hc= handconstellation ( HamArmextended | lb= locationbody )? ) ) ;
// $ANTLR start "location2"
location2: function() {
var rloc =  null;
var lc1 = null;
var lc1x = null;
var hc = null;
var lb = null;
var  ext = null;
try {
// Ham4HMLGen.g:913:5: ( ^( LOC2 (lc1= location1 (lc1x= location1 )? | hc= handconstellation ( HamArmextended | lb= locationbody )? ) ) )
// Ham4HMLGen.g:914:5: ^( LOC2 (lc1= location1 (lc1x= location1 )? | hc= handconstellation ( HamArmextended | lb= locationbody )? ) )
this.match(this.input,LOC2,Ham4HMLGen.FOLLOW_LOC2_in_location27001); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:915:9: (lc1= location1 (lc1x= location1 )? | hc= handconstellation ( HamArmextended | lb= locationbody )? )
var alt66=2;
var LA66_0 = this.input.LA(1);
if ( (LA66_0==LOC1) ) {
alt66=1;
}
else if ( (LA66_0==HCONSTLLN) ) {
alt66=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 66, 0, this.input);
throw nvae;
}
switch (alt66) {
case 1 :
// Ham4HMLGen.g:916:13: lc1= location1 (lc1x= location1 )?
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_location27033);
lc1=this.location1();
this.state._fsp--;
// Ham4HMLGen.g:917:13: (lc1x= location1 )?
var alt64=2;
var LA64_0 = this.input.LA(1);
if ( (LA64_0==LOC1) ) {
alt64=1;
}
switch (alt64) {
case 1 :
// Ham4HMLGen.g:917:15: lc1x= location1
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_location27054);
lc1x=this.location1();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:919:13: hc= handconstellation ( HamArmextended | lb= locationbody )?
this.pushFollow(Ham4HMLGen.FOLLOW_handconstellation_in_location27090);
hc=this.handconstellation();
this.state._fsp--;
// Ham4HMLGen.g:920:13: ( HamArmextended | lb= locationbody )?
var alt65=3;
var LA65_0 = this.input.LA(1);
if ( (LA65_0==HamArmextended) ) {
alt65=1;
}
else if ( (LA65_0==LOCTNBODY) ) {
alt65=2;
}
switch (alt65) {
case 1 :
// Ham4HMLGen.g:921:23: HamArmextended
this.match(this.input,HamArmextended,Ham4HMLGen.FOLLOW_HamArmextended_in_location27128); 
ext = "true"; 
break;
case 2 :
// Ham4HMLGen.g:923:17: lb= locationbody
this.pushFollow(Ham4HMLGen.FOLLOW_locationbody_in_location27174);
lb=this.locationbody();
this.state._fsp--;
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rloc = hBuilder.newHMLElement("location2");
if (lc1 != null) {
rloc.appendChild(lc1);
hBuilder.checkedAppendChild(rloc, lc1x);
}
else {
rloc.appendChild(hc);
if (lb != null) {
rloc.appendChild(lb);
}
else if (ext != null) {
var neut = hBuilder.newHMLElement("hamneutral");
hBuilder.checkedSetAttr(neut, "armextended", ext);
rloc.appendChild(neut);
}
/* else nothing */
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rloc;
},
// Ham4HMLGen.g:948:1: location1 returns [Element rloc = null] : ^( LOC1 (dig= digit | loc= locationhand | loc= locationbodyarm ) ) ;
// $ANTLR start "location1"
location1: function() {
var rloc =  null;
var dig = null;
var loc = null;
try {
// Ham4HMLGen.g:951:5: ( ^( LOC1 (dig= digit | loc= locationhand | loc= locationbodyarm ) ) )
// Ham4HMLGen.g:952:5: ^( LOC1 (dig= digit | loc= locationhand | loc= locationbodyarm ) )
this.match(this.input,LOC1,Ham4HMLGen.FOLLOW_LOC1_in_location17245); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:953:9: (dig= digit | loc= locationhand | loc= locationbodyarm )
var alt67=3;
switch ( this.input.LA(1) ) {
case HamThumb:
case HamIndexfinger:
case HamMiddlefinger:
case HamRingfinger:
case HamPinky:
alt67=1;
break;
case LOCTNHAND:
alt67=2;
break;
case LOCTNBODYARM:
alt67=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 67, 0, this.input);
throw nvae;
}
switch (alt67) {
case 1 :
// Ham4HMLGen.g:954:13: dig= digit
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_location17273);
dig=this.digit();
this.state._fsp--;
var dstr = dig.getAttribute("fingerid");
var ipos = "ham_digit_".length();
var locstr = "loc" + dstr.substring(ipos);
loc = hBuilder.newHMLElement("use_locname");
loc.setAttribute("use_locname", locstr);
break;
case 2 :
// Ham4HMLGen.g:963:13: loc= locationhand
this.pushFollow(Ham4HMLGen.FOLLOW_locationhand_in_location17315);
loc=this.locationhand();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:965:13: loc= locationbodyarm
this.pushFollow(Ham4HMLGen.FOLLOW_locationbodyarm_in_location17343);
loc=this.locationbodyarm();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rloc = hBuilder.newHMLElement("location1");
rloc.appendChild(loc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rloc;
},
// Ham4HMLGen.g:975:1: locationbodyarm returns [Element rlba = null] : ^( LOCTNBODYARM (loc= locationbody | loc= locationarm | ( HamArmextended )? ) ) ;
// $ANTLR start "locationbodyarm"
locationbodyarm: function() {
var rlba =  null;
var loc = null;
var  ext = null;
try {
// Ham4HMLGen.g:981:5: ( ^( LOCTNBODYARM (loc= locationbody | loc= locationarm | ( HamArmextended )? ) ) )
// Ham4HMLGen.g:982:5: ^( LOCTNBODYARM (loc= locationbody | loc= locationarm | ( HamArmextended )? ) )
this.match(this.input,LOCTNBODYARM,Ham4HMLGen.FOLLOW_LOCTNBODYARM_in_locationbodyarm7397); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:983:9: (loc= locationbody | loc= locationarm | ( HamArmextended )? )
var alt69=3;
switch ( this.input.LA(1) ) {
case LOCTNBODY:
alt69=1;
break;
case LOCTNARM:
alt69=2;
break;
case UP:
case HamArmextended:
alt69=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 69, 0, this.input);
throw nvae;
}
switch (alt69) {
case 1 :
// Ham4HMLGen.g:984:13: loc= locationbody
this.pushFollow(Ham4HMLGen.FOLLOW_locationbody_in_locationbodyarm7425);
loc=this.locationbody();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:986:13: loc= locationarm
this.pushFollow(Ham4HMLGen.FOLLOW_locationarm_in_locationbodyarm7453);
loc=this.locationarm();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:988:13: ( HamArmextended )?
// Ham4HMLGen.g:988:13: ( HamArmextended )?
var alt68=2;
var LA68_0 = this.input.LA(1);
if ( (LA68_0==HamArmextended) ) {
alt68=1;
}
switch (alt68) {
case 1 :
// Ham4HMLGen.g:988:15: HamArmextended
this.match(this.input,HamArmextended,Ham4HMLGen.FOLLOW_HamArmextended_in_locationbodyarm7479); 
ext = "true"; 
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
if (loc == null) {
loc =  hBuilder.newHMLElement("hamneutral");
hBuilder.checkedSetAttr(loc, "armextended", ext);
}
rlba = hBuilder.newHMLElement("locationbodyarm");
rlba.appendChild(loc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlba;
},
// Ham4HMLGen.g:1001:1: locationbody returns [Element rlb = null] : ^( LOCTNBODY lcb= levelcomplexbody ( HamBehind )? (cb= contactbody )? ) ;
// $ANTLR start "locationbody"
locationbody: function() {
var rlb =  null;
var lcb = null;
var cb = null;
var hb  = null;
try {
// Ham4HMLGen.g:1007:5: ( ^( LOCTNBODY lcb= levelcomplexbody ( HamBehind )? (cb= contactbody )? ) )
// Ham4HMLGen.g:1008:5: ^( LOCTNBODY lcb= levelcomplexbody ( HamBehind )? (cb= contactbody )? )
this.match(this.input,LOCTNBODY,Ham4HMLGen.FOLLOW_LOCTNBODY_in_locationbody7548); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_levelcomplexbody_in_locationbody7566);
lcb=this.levelcomplexbody();
this.state._fsp--;
// Ham4HMLGen.g:1010:9: ( HamBehind )?
var alt70=2;
var LA70_0 = this.input.LA(1);
if ( (LA70_0==HamBehind) ) {
alt70=1;
}
switch (alt70) {
case 1 :
// Ham4HMLGen.g:1010:19: HamBehind
this.match(this.input,HamBehind,Ham4HMLGen.FOLLOW_HamBehind_in_locationbody7586); 
hb = hBuilder.newHMLElement("hambehind"); 
break;
}
// Ham4HMLGen.g:1013:9: (cb= contactbody )?
var alt71=2;
var LA71_0 = this.input.LA(1);
if ( (LA71_0==CNTCTBODY) ) {
alt71=1;
}
switch (alt71) {
case 1 :
// Ham4HMLGen.g:1013:11: cb= contactbody
this.pushFollow(Ham4HMLGen.FOLLOW_contactbody_in_locationbody7642);
cb=this.contactbody();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rlb = hBuilder.newHMLElement("locationbody");
rlb.appendChild(lcb);
hBuilder.checkedAppendChild(rlb, hb);
hBuilder.checkedAppendChild(rlb, cb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlb;
},
// Ham4HMLGen.g:1023:1: locationhand returns [Element rlh = null] : ^( LOCTNHAND lch= levelcomplexhand (ch= contacthand )? ) ;
// $ANTLR start "locationhand"
locationhand: function() {
var rlh =  null;
var lch = null;
var ch = null;
try {
// Ham4HMLGen.g:1026:5: ( ^( LOCTNHAND lch= levelcomplexhand (ch= contacthand )? ) )
// Ham4HMLGen.g:1027:5: ^( LOCTNHAND lch= levelcomplexhand (ch= contacthand )? )
this.match(this.input,LOCTNHAND,Ham4HMLGen.FOLLOW_LOCTNHAND_in_locationhand7688); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_levelcomplexhand_in_locationhand7706);
lch=this.levelcomplexhand();
this.state._fsp--;
// Ham4HMLGen.g:1029:9: (ch= contacthand )?
var alt72=2;
var LA72_0 = this.input.LA(1);
if ( (LA72_0==CNTCTHAND) ) {
alt72=1;
}
switch (alt72) {
case 1 :
// Ham4HMLGen.g:1029:11: ch= contacthand
this.pushFollow(Ham4HMLGen.FOLLOW_contacthand_in_locationhand7725);
ch=this.contacthand();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rlh = hBuilder.newHMLElement("locationhand");
rlh.appendChild(lch);
hBuilder.checkedAppendChild(rlh, ch);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlh;
},
// Ham4HMLGen.g:1038:1: locationarm returns [Element rla = null] : ^( LOCTNARM lca= levelcomplexarm ( HamBehind )? (cb= contactbody )? ) ;
// $ANTLR start "locationarm"
locationarm: function() {
var rla =  null;
var lca = null;
var cb = null;
var hb  = null;
try {
// Ham4HMLGen.g:1044:5: ( ^( LOCTNARM lca= levelcomplexarm ( HamBehind )? (cb= contactbody )? ) )
// Ham4HMLGen.g:1045:5: ^( LOCTNARM lca= levelcomplexarm ( HamBehind )? (cb= contactbody )? )
this.match(this.input,LOCTNARM,Ham4HMLGen.FOLLOW_LOCTNARM_in_locationarm7776); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_levelcomplexarm_in_locationarm7794);
lca=this.levelcomplexarm();
this.state._fsp--;
// Ham4HMLGen.g:1047:9: ( HamBehind )?
var alt73=2;
var LA73_0 = this.input.LA(1);
if ( (LA73_0==HamBehind) ) {
alt73=1;
}
switch (alt73) {
case 1 :
// Ham4HMLGen.g:1047:19: HamBehind
this.match(this.input,HamBehind,Ham4HMLGen.FOLLOW_HamBehind_in_locationarm7814); 
hb = hBuilder.newHMLElement("hambehind"); 
break;
}
// Ham4HMLGen.g:1050:9: (cb= contactbody )?
var alt74=2;
var LA74_0 = this.input.LA(1);
if ( (LA74_0==CNTCTBODY) ) {
alt74=1;
}
switch (alt74) {
case 1 :
// Ham4HMLGen.g:1050:11: cb= contactbody
this.pushFollow(Ham4HMLGen.FOLLOW_contactbody_in_locationarm7870);
cb=this.contactbody();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rla = hBuilder.newHMLElement("locationarm");
rla.appendChild(lca);
hBuilder.checkedAppendChild(rla, hb);
hBuilder.checkedAppendChild(rla, cb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rla;
},
// Ham4HMLGen.g:1060:1: levelcomplexbody returns [Element rlcb = null] : lba= levelbody (lbb= levelbody )? ;
// $ANTLR start "levelcomplexbody"
levelcomplexbody: function() {
var rlcb =  null;
var lba = null;
var lbb = null;
try {
// Ham4HMLGen.g:1063:5: (lba= levelbody (lbb= levelbody )? )
// Ham4HMLGen.g:1063:9: lba= levelbody (lbb= levelbody )?
this.pushFollow(Ham4HMLGen.FOLLOW_levelbody_in_levelcomplexbody7921);
lba=this.levelbody();
this.state._fsp--;
// Ham4HMLGen.g:1064:9: (lbb= levelbody )?
var alt75=2;
var LA75_0 = this.input.LA(1);
if ( (LA75_0==LEVBODY) ) {
alt75=1;
}
switch (alt75) {
case 1 :
// Ham4HMLGen.g:1064:11: lbb= levelbody
this.pushFollow(Ham4HMLGen.FOLLOW_levelbody_in_levelcomplexbody7939);
lbb=this.levelbody();
this.state._fsp--;
break;
}
rlcb = hBuilder.newHMLElement("levelcomplexbody");
rlcb.appendChild(lba);
hBuilder.checkedAppendChild(rlcb, lbb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlcb;
},
// Ham4HMLGen.g:1072:1: levelcomplexhand returns [Element rlch = null] : lha= levelhand (lhb= levelhand )? ;
// $ANTLR start "levelcomplexhand"
levelcomplexhand: function() {
var rlch =  null;
var lha = null;
var lhb = null;
try {
// Ham4HMLGen.g:1075:5: (lha= levelhand (lhb= levelhand )? )
// Ham4HMLGen.g:1075:9: lha= levelhand (lhb= levelhand )?
this.pushFollow(Ham4HMLGen.FOLLOW_levelhand_in_levelcomplexhand7984);
lha=this.levelhand();
this.state._fsp--;
// Ham4HMLGen.g:1076:9: (lhb= levelhand )?
var alt76=2;
var LA76_0 = this.input.LA(1);
if ( (LA76_0==LEVHAND) ) {
alt76=1;
}
switch (alt76) {
case 1 :
// Ham4HMLGen.g:1076:11: lhb= levelhand
this.pushFollow(Ham4HMLGen.FOLLOW_levelhand_in_levelcomplexhand8002);
lhb=this.levelhand();
this.state._fsp--;
break;
}
rlch = hBuilder.newHMLElement("levelcomplexhand");
rlch.appendChild(lha);
hBuilder.checkedAppendChild(rlch, lhb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlch;
},
// Ham4HMLGen.g:1084:1: levelcomplexarm returns [Element rlca = null] : laa= levelarm (lab= levelarm )? ;
// $ANTLR start "levelcomplexarm"
levelcomplexarm: function() {
var rlca =  null;
var laa = null;
var lab = null;
try {
// Ham4HMLGen.g:1087:5: (laa= levelarm (lab= levelarm )? )
// Ham4HMLGen.g:1087:9: laa= levelarm (lab= levelarm )?
this.pushFollow(Ham4HMLGen.FOLLOW_levelarm_in_levelcomplexarm8048);
laa=this.levelarm();
this.state._fsp--;
// Ham4HMLGen.g:1088:9: (lab= levelarm )?
var alt77=2;
var LA77_0 = this.input.LA(1);
if ( (LA77_0==LEVARM) ) {
alt77=1;
}
switch (alt77) {
case 1 :
// Ham4HMLGen.g:1088:11: lab= levelarm
this.pushFollow(Ham4HMLGen.FOLLOW_levelarm_in_levelcomplexarm8066);
lab=this.levelarm();
this.state._fsp--;
break;
}
rlca = hBuilder.newHMLElement("levelcomplexarm");
rlca.appendChild(laa);
hBuilder.checkedAppendChild(rlca, lab);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlca;
},
// Ham4HMLGen.g:1096:1: levelbody returns [Element rlb = null] : ^( LEVBODY (sd= side[\"left\"] )? (lb= locbody | lb= locsided ) ( HamEtc )? (sd= side[\"right\"] )? ) ;
// $ANTLR start "levelbody"
levelbody: function() {
var rlb =  null;
var sd = null;
var lb = null;
var approxlb = false;
try {
// Ham4HMLGen.g:1102:5: ( ^( LEVBODY (sd= side[\"left\"] )? (lb= locbody | lb= locsided ) ( HamEtc )? (sd= side[\"right\"] )? ) )
// Ham4HMLGen.g:1103:5: ^( LEVBODY (sd= side[\"left\"] )? (lb= locbody | lb= locsided ) ( HamEtc )? (sd= side[\"right\"] )? )
this.match(this.input,LEVBODY,Ham4HMLGen.FOLLOW_LEVBODY_in_levelbody8113); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1104:9: (sd= side[\"left\"] )?
var alt78=2;
var LA78_0 = this.input.LA(1);
if ( ((LA78_0>=HamLrbeside && LA78_0<=HamLrat)) ) {
alt78=1;
}
switch (alt78) {
case 1 :
// Ham4HMLGen.g:1104:11: sd= side[\"left\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelbody8132);
sd=this.side("left");
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1105:9: (lb= locbody | lb= locsided )
var alt79=2;
var LA79_0 = this.input.LA(1);
if ( (LA79_0==LOCBODY) ) {
alt79=1;
}
else if ( (LA79_0==HamEarlobe||(LA79_0>=HamEar && LA79_0<=HamCheek)) ) {
alt79=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 79, 0, this.input);
throw nvae;
}
switch (alt79) {
case 1 :
// Ham4HMLGen.g:1106:13: lb= locbody
this.pushFollow(Ham4HMLGen.FOLLOW_locbody_in_levelbody8165);
lb=this.locbody();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1108:13: lb= locsided
this.pushFollow(Ham4HMLGen.FOLLOW_locsided_in_levelbody8194);
lb=this.locsided();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1110:9: ( HamEtc )?
var alt80=2;
var LA80_0 = this.input.LA(1);
if ( (LA80_0==HamEtc) ) {
alt80=1;
}
switch (alt80) {
case 1 :
// Ham4HMLGen.g:1110:19: HamEtc
this.match(this.input,HamEtc,Ham4HMLGen.FOLLOW_HamEtc_in_levelbody8224); 
approxlb = true; 
break;
}
// Ham4HMLGen.g:1111:9: (sd= side[\"right\"] )?
var alt81=2;
var LA81_0 = this.input.LA(1);
if ( ((LA81_0>=HamLrbeside && LA81_0<=HamLrat)) ) {
alt81=1;
}
switch (alt81) {
case 1 :
// Ham4HMLGen.g:1111:11: sd= side[\"right\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelbody8259);
sd=this.side("right");
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rlb = hBuilder.newHMLElement("levelbody");
rlb.setAttribute("locbody", lb);
hBuilder.checkedSetAttr(rlb, "side", sd);
hBuilder.checkedSetFlagAttr(rlb, "approx_location", approxlb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlb;
},
// Ham4HMLGen.g:1121:1: levelhand returns [Element rlh = null] : ^( LEVHAND (sd= side[\"left\"] )? (hp= handpart | fp= fingerpart (d= digit )* | (d= digit )+ (fp= fingerpart )? ) (dp= dorsalorpalmar )? (sd= side[\"right\"] )? ) ;
// $ANTLR start "levelhand"
levelhand: function() {
var rlh =  null;
var sd = null;
var hp = null;
var fp = null;
var d = null;
var dp = null;
rlh = hBuilder.newHMLElement("levelhand");
try {
// Ham4HMLGen.g:1127:5: ( ^( LEVHAND (sd= side[\"left\"] )? (hp= handpart | fp= fingerpart (d= digit )* | (d= digit )+ (fp= fingerpart )? ) (dp= dorsalorpalmar )? (sd= side[\"right\"] )? ) )
// Ham4HMLGen.g:1128:5: ^( LEVHAND (sd= side[\"left\"] )? (hp= handpart | fp= fingerpart (d= digit )* | (d= digit )+ (fp= fingerpart )? ) (dp= dorsalorpalmar )? (sd= side[\"right\"] )? )
this.match(this.input,LEVHAND,Ham4HMLGen.FOLLOW_LEVHAND_in_levelhand8313); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1129:9: (sd= side[\"left\"] )?
var alt82=2;
var LA82_0 = this.input.LA(1);
if ( ((LA82_0>=HamLrbeside && LA82_0<=HamLrat)) ) {
alt82=1;
}
switch (alt82) {
case 1 :
// Ham4HMLGen.g:1129:11: sd= side[\"left\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelhand8332);
sd=this.side("left");
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1130:9: (hp= handpart | fp= fingerpart (d= digit )* | (d= digit )+ (fp= fingerpart )? )
var alt86=3;
switch ( this.input.LA(1) ) {
case HamWristback:
case HamWristpulse:
case HamThumbball:
case HamPalm:
case HamHandback:
case HamThumbside:
case HamPinkyside:
alt86=1;
break;
case HamFingertip:
case HamFingernail:
case HamFingerpad:
case HamFingermidjoint:
case HamFingerbase:
case HamFingerside:
alt86=2;
break;
case HamThumb:
case HamIndexfinger:
case HamMiddlefinger:
case HamRingfinger:
case HamPinky:
alt86=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 86, 0, this.input);
throw nvae;
}
switch (alt86) {
case 1 :
// Ham4HMLGen.g:1131:13: hp= handpart
this.pushFollow(Ham4HMLGen.FOLLOW_handpart_in_levelhand8365);
hp=this.handpart();
this.state._fsp--;
rlh.appendChild(hp); 
break;
case 2 :
// Ham4HMLGen.g:1134:13: fp= fingerpart (d= digit )*
this.pushFollow(Ham4HMLGen.FOLLOW_fingerpart_in_levelhand8404);
fp=this.fingerpart();
this.state._fsp--;
rlh.appendChild(fp); 
// Ham4HMLGen.g:1135:13: (d= digit )*
loop83:
do {
var alt83=2;
var LA83_0 = this.input.LA(1);
if ( ((LA83_0>=HamThumb && LA83_0<=HamPinky)) ) {
alt83=1;
}
switch (alt83) {
case 1 :
// Ham4HMLGen.g:1135:15: d= digit
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_levelhand8435);
d=this.digit();
this.state._fsp--;
rlh.appendChild(d); 
break;
default :
break loop83;
}
} while (true);
break;
case 3 :
// Ham4HMLGen.g:1137:13: (d= digit )+ (fp= fingerpart )?
// Ham4HMLGen.g:1137:13: (d= digit )+
var cnt84=0;
loop84:
do {
var alt84=2;
var LA84_0 = this.input.LA(1);
if ( ((LA84_0>=HamThumb && LA84_0<=HamPinky)) ) {
alt84=1;
}
switch (alt84) {
case 1 :
// Ham4HMLGen.g:1137:15: d= digit
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_levelhand8478);
d=this.digit();
this.state._fsp--;
rlh.appendChild(d); 
break;
default :
if ( cnt84 >= 1 ) {
break loop84;
}
var eee = new org.antlr.runtime.EarlyExitException(84, this.input);
throw eee;
}
cnt84++;
} while (true);
// Ham4HMLGen.g:1138:13: (fp= fingerpart )?
var alt85=2;
var LA85_0 = this.input.LA(1);
if ( ((LA85_0>=HamFingertip && LA85_0<=HamFingerside)) ) {
alt85=1;
}
switch (alt85) {
case 1 :
// Ham4HMLGen.g:1138:15: fp= fingerpart
this.pushFollow(Ham4HMLGen.FOLLOW_fingerpart_in_levelhand8512);
fp=this.fingerpart();
this.state._fsp--;
rlh.appendChild(fp); 
break;
}
break;
}
// Ham4HMLGen.g:1149:9: (dp= dorsalorpalmar )?
var alt87=2;
var LA87_0 = this.input.LA(1);
if ( ((LA87_0>=HamPalm && LA87_0<=HamHandback)) ) {
alt87=1;
}
switch (alt87) {
case 1 :
// Ham4HMLGen.g:1149:11: dp= dorsalorpalmar
this.pushFollow(Ham4HMLGen.FOLLOW_dorsalorpalmar_in_levelhand8555);
dp=this.dorsalorpalmar();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1150:9: (sd= side[\"right\"] )?
var alt88=2;
var LA88_0 = this.input.LA(1);
if ( ((LA88_0>=HamLrbeside && LA88_0<=HamLrat)) ) {
alt88=1;
}
switch (alt88) {
case 1 :
// Ham4HMLGen.g:1150:11: sd= side[\"right\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelhand8577);
sd=this.side("right");
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
// Check for HNS-3 to HNS-4 conversion:
if (hp != null) {
if (hp.getAttribute("handpart") === "ham_wristpulse") {
hp.setAttribute("handpart", "ham_wristback");
rlh.setAttribute("dorsal_or_palmar", "palmar");
}
}
else
if (fp != null) {
if (fp.getAttribute("fingerpart") === "ham_finger_pad") {
fp.setAttribute("fingerpart", "ham_finger_nail");
rlh.setAttribute("dorsal_or_palmar", "palmar");
}
}
hBuilder.checkedSetAttr(rlh, "side", sd);
hBuilder.checkedSetAttr(rlh, "dorsal_or_palmar", dp);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlh;
},
// Ham4HMLGen.g:1173:1: levelarm returns [Element rla = null] : ^( LEVARM (sd= side[\"left\"] )? la= locarm ( HamEtc )? (dp= dorsalorpalmar )? (sd= side[\"right\"] )? ) ;
// $ANTLR start "levelarm"
levelarm: function() {
var rla =  null;
var sd = null;
var la = null;
var dp = null;
var approxla = false;
try {
// Ham4HMLGen.g:1179:5: ( ^( LEVARM (sd= side[\"left\"] )? la= locarm ( HamEtc )? (dp= dorsalorpalmar )? (sd= side[\"right\"] )? ) )
// Ham4HMLGen.g:1180:5: ^( LEVARM (sd= side[\"left\"] )? la= locarm ( HamEtc )? (dp= dorsalorpalmar )? (sd= side[\"right\"] )? )
this.match(this.input,LEVARM,Ham4HMLGen.FOLLOW_LEVARM_in_levelarm8632); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1181:9: (sd= side[\"left\"] )?
var alt89=2;
var LA89_0 = this.input.LA(1);
if ( ((LA89_0>=HamLrbeside && LA89_0<=HamLrat)) ) {
alt89=1;
}
switch (alt89) {
case 1 :
// Ham4HMLGen.g:1181:11: sd= side[\"left\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelarm8651);
sd=this.side("left");
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_locarm_in_levelarm8674);
la=this.locarm();
this.state._fsp--;
// Ham4HMLGen.g:1183:9: ( HamEtc )?
var alt90=2;
var LA90_0 = this.input.LA(1);
if ( (LA90_0==HamEtc) ) {
alt90=1;
}
switch (alt90) {
case 1 :
// Ham4HMLGen.g:1183:19: HamEtc
this.match(this.input,HamEtc,Ham4HMLGen.FOLLOW_HamEtc_in_levelarm8694); 
approxla = true; 
break;
}
// Ham4HMLGen.g:1184:9: (dp= dorsalorpalmar )?
var alt91=2;
var LA91_0 = this.input.LA(1);
if ( ((LA91_0>=HamPalm && LA91_0<=HamHandback)) ) {
alt91=1;
}
switch (alt91) {
case 1 :
// Ham4HMLGen.g:1184:11: dp= dorsalorpalmar
this.pushFollow(Ham4HMLGen.FOLLOW_dorsalorpalmar_in_levelarm8729);
dp=this.dorsalorpalmar();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1185:9: (sd= side[\"right\"] )?
var alt92=2;
var LA92_0 = this.input.LA(1);
if ( ((LA92_0>=HamLrbeside && LA92_0<=HamLrat)) ) {
alt92=1;
}
switch (alt92) {
case 1 :
// Ham4HMLGen.g:1185:11: sd= side[\"right\"]
this.pushFollow(Ham4HMLGen.FOLLOW_side_in_levelarm8751);
sd=this.side("right");
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rla = hBuilder.newHMLElement("levelarm");
rla.setAttribute("locarm", la);
hBuilder.checkedSetAttr(rla, "side", sd);
hBuilder.checkedSetAttr(rla, "dorsal_or_palmar", dp);
hBuilder.checkedSetFlagAttr(rla, "approx_location", approxla);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rla;
},
// Ham4HMLGen.g:1196:1: contactbody returns [Element rcb = null] : ^( CNTCTBODY (cbsub= pcontact | HamArmextended | cbsub= contactofhand ) ) ;
// $ANTLR start "contactbody"
contactbody: function() {
var rcb =  null;
var cbsub = null;
try {
// Ham4HMLGen.g:1199:5: ( ^( CNTCTBODY (cbsub= pcontact | HamArmextended | cbsub= contactofhand ) ) )
// Ham4HMLGen.g:1200:5: ^( CNTCTBODY (cbsub= pcontact | HamArmextended | cbsub= contactofhand ) )
this.match(this.input,CNTCTBODY,Ham4HMLGen.FOLLOW_CNTCTBODY_in_contactbody8799); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1201:9: (cbsub= pcontact | HamArmextended | cbsub= contactofhand )
var alt93=3;
switch ( this.input.LA(1) ) {
case HamClose:
case HamTouch:
alt93=1;
break;
case HamArmextended:
alt93=2;
break;
case CNTCTOFHAND:
alt93=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 93, 0, this.input);
throw nvae;
}
switch (alt93) {
case 1 :
// Ham4HMLGen.g:1202:13: cbsub= pcontact
this.pushFollow(Ham4HMLGen.FOLLOW_pcontact_in_contactbody8829);
cbsub=this.pcontact();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1204:13: HamArmextended
this.match(this.input,HamArmextended,Ham4HMLGen.FOLLOW_HamArmextended_in_contactbody8853); 
cbsub = hBuilder.newHMLElement("hamarmextended"); 
break;
case 3 :
// Ham4HMLGen.g:1207:13: cbsub= contactofhand
this.pushFollow(Ham4HMLGen.FOLLOW_contactofhand_in_contactbody8905);
cbsub=this.contactofhand();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rcb = hBuilder.wrapperEl("contactbody", cbsub);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcb;
},
// Ham4HMLGen.g:1215:1: contacthand returns [Element rch = null] : ^( CNTCTHAND (chsub= pcontact | chsub= ccontact | chsub= contactofhand ) ) ;
// $ANTLR start "contacthand"
contacthand: function() {
var rch =  null;
var chsub = null;
try {
// Ham4HMLGen.g:1218:5: ( ^( CNTCTHAND (chsub= pcontact | chsub= ccontact | chsub= contactofhand ) ) )
// Ham4HMLGen.g:1219:5: ^( CNTCTHAND (chsub= pcontact | chsub= ccontact | chsub= contactofhand ) )
this.match(this.input,CNTCTHAND,Ham4HMLGen.FOLLOW_CNTCTHAND_in_contacthand8959); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1220:9: (chsub= pcontact | chsub= ccontact | chsub= contactofhand )
var alt94=3;
switch ( this.input.LA(1) ) {
case HamClose:
case HamTouch:
alt94=1;
break;
case HamInterlock:
case HamCross:
alt94=2;
break;
case CNTCTOFHAND:
alt94=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 94, 0, this.input);
throw nvae;
}
switch (alt94) {
case 1 :
// Ham4HMLGen.g:1221:13: chsub= pcontact
this.pushFollow(Ham4HMLGen.FOLLOW_pcontact_in_contacthand8989);
chsub=this.pcontact();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1223:13: chsub= ccontact
this.pushFollow(Ham4HMLGen.FOLLOW_ccontact_in_contacthand9019);
chsub=this.ccontact();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:1225:13: chsub= contactofhand
this.pushFollow(Ham4HMLGen.FOLLOW_contactofhand_in_contacthand9049);
chsub=this.contactofhand();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rch = hBuilder.wrapperEl("contacthand", chsub);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rch;
},
// Ham4HMLGen.g:1239:1: contactofhand returns [Element rcoh = null] : ^( CNTCTOFHAND (pc= pcontact | pc= ccontact ) (loc= contactohhand | loc= contactoharm ) ) ;
// $ANTLR start "contactofhand"
contactofhand: function() {
var rcoh =  null;
var pc = null;
var loc = null;
try {
// Ham4HMLGen.g:1242:5: ( ^( CNTCTOFHAND (pc= pcontact | pc= ccontact ) (loc= contactohhand | loc= contactoharm ) ) )
// Ham4HMLGen.g:1243:5: ^( CNTCTOFHAND (pc= pcontact | pc= ccontact ) (loc= contactohhand | loc= contactoharm ) )
this.match(this.input,CNTCTOFHAND,Ham4HMLGen.FOLLOW_CNTCTOFHAND_in_contactofhand9111); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1244:9: (pc= pcontact | pc= ccontact )
var alt95=2;
var LA95_0 = this.input.LA(1);
if ( ((LA95_0>=HamClose && LA95_0<=HamTouch)) ) {
alt95=1;
}
else if ( ((LA95_0>=HamInterlock && LA95_0<=HamCross)) ) {
alt95=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 95, 0, this.input);
throw nvae;
}
switch (alt95) {
case 1 :
// Ham4HMLGen.g:1245:13: pc= pcontact
this.pushFollow(Ham4HMLGen.FOLLOW_pcontact_in_contactofhand9144);
pc=this.pcontact();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1247:13: pc= ccontact
this.pushFollow(Ham4HMLGen.FOLLOW_ccontact_in_contactofhand9177);
pc=this.ccontact();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1249:9: (loc= contactohhand | loc= contactoharm )
var alt96=2;
var LA96_0 = this.input.LA(1);
if ( (LA96_0==CNTCTOHHAND) ) {
alt96=1;
}
else if ( (LA96_0==CNTCTOHARM) ) {
alt96=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 96, 0, this.input);
throw nvae;
}
switch (alt96) {
case 1 :
// Ham4HMLGen.g:1250:13: loc= contactohhand
this.pushFollow(Ham4HMLGen.FOLLOW_contactohhand_in_contactofhand9219);
loc=this.contactohhand();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1252:13: loc= contactoharm
this.pushFollow(Ham4HMLGen.FOLLOW_contactoharm_in_contactofhand9251);
loc=this.contactoharm();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rcoh = hBuilder.newHMLElement("contactofhand");
rcoh.appendChild(pc);
rcoh.appendChild(loc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcoh;
},
// Ham4HMLGen.g:1262:1: contactohhand returns [Element rcohh = null] : ^( CNTCTOHHAND cohh= levelcomplexhand ) ;
// $ANTLR start "contactohhand"
contactohhand: function() {
var rcohh =  null;
var cohh = null;
try {
// Ham4HMLGen.g:1266:5: ( ^( CNTCTOHHAND cohh= levelcomplexhand ) )
// Ham4HMLGen.g:1267:5: ^( CNTCTOHHAND cohh= levelcomplexhand )
this.match(this.input,CNTCTOHHAND,Ham4HMLGen.FOLLOW_CNTCTOHHAND_in_contactohhand9307); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_levelcomplexhand_in_contactohhand9321);
cohh=this.levelcomplexhand();
this.state._fsp--;
rcohh = cohh; 
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcohh;
},
// Ham4HMLGen.g:1272:1: contactoharm returns [Element rcoha = null] : ^( CNTCTOHARM coha= levelcomplexarm ) ;
// $ANTLR start "contactoharm"
contactoharm: function() {
var rcoha =  null;
var coha = null;
try {
// Ham4HMLGen.g:1276:5: ( ^( CNTCTOHARM coha= levelcomplexarm ) )
// Ham4HMLGen.g:1277:5: ^( CNTCTOHARM coha= levelcomplexarm )
this.match(this.input,CNTCTOHARM,Ham4HMLGen.FOLLOW_CNTCTOHARM_in_contactoharm9366); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_levelcomplexarm_in_contactoharm9380);
coha=this.levelcomplexarm();
this.state._fsp--;
rcoha = coha; 
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcoha;
},
// Ham4HMLGen.g:1282:1: handconstellation returns [Element rhc = null] : ^( HCONSTLLN (lha= locationhand lhb= locationhand )? ch= contacthand ) ;
// $ANTLR start "handconstellation"
handconstellation: function() {
var rhc =  null;
var lha = null;
var lhb = null;
var ch = null;
try {
// Ham4HMLGen.g:1285:5: ( ^( HCONSTLLN (lha= locationhand lhb= locationhand )? ch= contacthand ) )
// Ham4HMLGen.g:1286:5: ^( HCONSTLLN (lha= locationhand lhb= locationhand )? ch= contacthand )
this.match(this.input,HCONSTLLN,Ham4HMLGen.FOLLOW_HCONSTLLN_in_handconstellation9422); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1287:9: (lha= locationhand lhb= locationhand )?
var alt97=2;
var LA97_0 = this.input.LA(1);
if ( (LA97_0==LOCTNHAND) ) {
alt97=1;
}
switch (alt97) {
case 1 :
// Ham4HMLGen.g:1288:13: lha= locationhand lhb= locationhand
this.pushFollow(Ham4HMLGen.FOLLOW_locationhand_in_handconstellation9450);
lha=this.locationhand();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_locationhand_in_handconstellation9468);
lhb=this.locationhand();
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_contacthand_in_handconstellation9498);
ch=this.contacthand();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rhc = hBuilder.newHMLElement("handconstellation");
hBuilder.checkedAppendChild(rhc, lha);
hBuilder.checkedAppendChild(rhc, lhb);
rhc.appendChild(ch);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhc;
},
// Ham4HMLGen.g:1304:1: locarm returns [String rla = null] : ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm ) ;
// $ANTLR start "locarm"
locarm: function() {
var rla =  null;
try {
// Ham4HMLGen.g:1306:5: ( ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm ) )
// Ham4HMLGen.g:1307:5: ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm )
// Ham4HMLGen.g:1307:5: ( HamUpperarm | HamElbow | HamElbowinside | HamLowerarm )
var alt98=4;
switch ( this.input.LA(1) ) {
case HamUpperarm:
alt98=1;
break;
case HamElbow:
alt98=2;
break;
case HamElbowinside:
alt98=3;
break;
case HamLowerarm:
alt98=4;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 98, 0, this.input);
throw nvae;
}
switch (alt98) {
case 1 :
// Ham4HMLGen.g:1307:9: HamUpperarm
this.match(this.input,HamUpperarm,Ham4HMLGen.FOLLOW_HamUpperarm_in_locarm9553); 
rla = "ham_upperarm"; 
break;
case 2 :
// Ham4HMLGen.g:1308:9: HamElbow
this.match(this.input,HamElbow,Ham4HMLGen.FOLLOW_HamElbow_in_locarm9577); 
rla = "ham_elbow"; 
break;
case 3 :
// Ham4HMLGen.g:1309:9: HamElbowinside
this.match(this.input,HamElbowinside,Ham4HMLGen.FOLLOW_HamElbowinside_in_locarm9604); 
rla = "ham_elbowinside"; 
break;
case 4 :
// Ham4HMLGen.g:1310:9: HamLowerarm
this.match(this.input,HamLowerarm,Ham4HMLGen.FOLLOW_HamLowerarm_in_locarm9625); 
rla = "ham_lowerarm"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rla;
},
// Ham4HMLGen.g:1314:1: locbody returns [String rlb = null] : ^( LOCBODY ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamEyes | HamNose | HamNostrils | HamLips | HamTongue | HamTeeth | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach ) ( HamDoublebent | HamDoublehooked )? ) ;
// $ANTLR start "locbody"
locbody: function() {
var rlb =  null;
var uprlwr = null;
try {
// Ham4HMLGen.g:1319:5: ( ^( LOCBODY ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamEyes | HamNose | HamNostrils | HamLips | HamTongue | HamTeeth | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach ) ( HamDoublebent | HamDoublehooked )? ) )
// Ham4HMLGen.g:1320:5: ^( LOCBODY ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamEyes | HamNose | HamNostrils | HamLips | HamTongue | HamTeeth | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach ) ( HamDoublebent | HamDoublehooked )? )
this.match(this.input,LOCBODY,Ham4HMLGen.FOLLOW_LOCBODY_in_locbody9685); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1321:9: ( HamHead | HamHeadtop | HamForehead | HamEyebrows | HamEyes | HamNose | HamNostrils | HamLips | HamTongue | HamTeeth | HamChin | HamUnderchin | HamNeck | HamShouldertop | HamShoulders | HamChest | HamStomach | HamBelowstomach )
var alt99=18;
switch ( this.input.LA(1) ) {
case HamHead:
alt99=1;
break;
case HamHeadtop:
alt99=2;
break;
case HamForehead:
alt99=3;
break;
case HamEyebrows:
alt99=4;
break;
case HamEyes:
alt99=5;
break;
case HamNose:
alt99=6;
break;
case HamNostrils:
alt99=7;
break;
case HamLips:
alt99=8;
break;
case HamTongue:
alt99=9;
break;
case HamTeeth:
alt99=10;
break;
case HamChin:
alt99=11;
break;
case HamUnderchin:
alt99=12;
break;
case HamNeck:
alt99=13;
break;
case HamShouldertop:
alt99=14;
break;
case HamShoulders:
alt99=15;
break;
case HamChest:
alt99=16;
break;
case HamStomach:
alt99=17;
break;
case HamBelowstomach:
alt99=18;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 99, 0, this.input);
throw nvae;
}
switch (alt99) {
case 1 :
// Ham4HMLGen.g:1321:13: HamHead
this.match(this.input,HamHead,Ham4HMLGen.FOLLOW_HamHead_in_locbody9699); 
rlb = "ham_head"; 
break;
case 2 :
// Ham4HMLGen.g:1322:13: HamHeadtop
this.match(this.input,HamHeadtop,Ham4HMLGen.FOLLOW_HamHeadtop_in_locbody9731); 
rlb = "ham_headtop"; 
break;
case 3 :
// Ham4HMLGen.g:1323:13: HamForehead
this.match(this.input,HamForehead,Ham4HMLGen.FOLLOW_HamForehead_in_locbody9760); 
rlb = "ham_forehead"; 
break;
case 4 :
// Ham4HMLGen.g:1324:13: HamEyebrows
this.match(this.input,HamEyebrows,Ham4HMLGen.FOLLOW_HamEyebrows_in_locbody9788); 
rlb = "ham_eyebrows"; 
break;
case 5 :
// Ham4HMLGen.g:1325:13: HamEyes
this.match(this.input,HamEyes,Ham4HMLGen.FOLLOW_HamEyes_in_locbody9816); 
rlb = "ham_eyes"; 
break;
case 6 :
// Ham4HMLGen.g:1326:13: HamNose
this.match(this.input,HamNose,Ham4HMLGen.FOLLOW_HamNose_in_locbody9848); 
rlb = "ham_nose"; 
break;
case 7 :
// Ham4HMLGen.g:1327:13: HamNostrils
this.match(this.input,HamNostrils,Ham4HMLGen.FOLLOW_HamNostrils_in_locbody9880); 
rlb = "ham_nostrils"; 
break;
case 8 :
// Ham4HMLGen.g:1328:13: HamLips
this.match(this.input,HamLips,Ham4HMLGen.FOLLOW_HamLips_in_locbody9908); 
rlb = "ham_lips"; 
break;
case 9 :
// Ham4HMLGen.g:1329:13: HamTongue
this.match(this.input,HamTongue,Ham4HMLGen.FOLLOW_HamTongue_in_locbody9940); 
rlb = "ham_tongue"; 
break;
case 10 :
// Ham4HMLGen.g:1330:13: HamTeeth
this.match(this.input,HamTeeth,Ham4HMLGen.FOLLOW_HamTeeth_in_locbody9970); 
rlb = "ham_teeth"; 
break;
case 11 :
// Ham4HMLGen.g:1331:13: HamChin
this.match(this.input,HamChin,Ham4HMLGen.FOLLOW_HamChin_in_locbody10001); 
rlb = "ham_chin"; 
break;
case 12 :
// Ham4HMLGen.g:1332:13: HamUnderchin
this.match(this.input,HamUnderchin,Ham4HMLGen.FOLLOW_HamUnderchin_in_locbody10033); 
rlb = "ham_underchin"; 
break;
case 13 :
// Ham4HMLGen.g:1333:13: HamNeck
this.match(this.input,HamNeck,Ham4HMLGen.FOLLOW_HamNeck_in_locbody10060); 
rlb = "ham_neck"; 
break;
case 14 :
// Ham4HMLGen.g:1334:13: HamShouldertop
this.match(this.input,HamShouldertop,Ham4HMLGen.FOLLOW_HamShouldertop_in_locbody10092); 
rlb = "ham_shouldertop"; 
break;
case 15 :
// Ham4HMLGen.g:1335:13: HamShoulders
this.match(this.input,HamShoulders,Ham4HMLGen.FOLLOW_HamShoulders_in_locbody10117); 
rlb = "ham_shoulders"; 
break;
case 16 :
// Ham4HMLGen.g:1336:13: HamChest
this.match(this.input,HamChest,Ham4HMLGen.FOLLOW_HamChest_in_locbody10144); 
rlb = "ham_chest"; 
break;
case 17 :
// Ham4HMLGen.g:1337:13: HamStomach
this.match(this.input,HamStomach,Ham4HMLGen.FOLLOW_HamStomach_in_locbody10175); 
rlb = "ham_stomach"; 
break;
case 18 :
// Ham4HMLGen.g:1338:13: HamBelowstomach
this.match(this.input,HamBelowstomach,Ham4HMLGen.FOLLOW_HamBelowstomach_in_locbody10204); 
rlb = "ham_belowstomach"; 
break;
}
// Ham4HMLGen.g:1340:9: ( HamDoublebent | HamDoublehooked )?
var alt100=3;
var LA100_0 = this.input.LA(1);
if ( (LA100_0==HamDoublebent) ) {
alt100=1;
}
else if ( (LA100_0==HamDoublehooked) ) {
alt100=2;
}
switch (alt100) {
case 1 :
// Ham4HMLGen.g:1341:13: HamDoublebent
this.match(this.input,HamDoublebent,Ham4HMLGen.FOLLOW_HamDoublebent_in_locbody10248); 
uprlwr = "ham_upper"; 
break;
case 2 :
// Ham4HMLGen.g:1342:13: HamDoublehooked
this.match(this.input,HamDoublehooked,Ham4HMLGen.FOLLOW_HamDoublehooked_in_locbody10274); 
uprlwr = "ham_lower"; 
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
if (uprlwr != null) {
if (rlb === "ham_eyes") {
rlb = uprlwr + "eyelid";
}
else
if (rlb === "ham_lips") {
rlb = uprlwr + "lip";
}
else
if (rlb === "ham_teeth") {
rlb = uprlwr + "teeth";
}
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rlb;
},
// Ham4HMLGen.g:1362:1: locsided returns [String rls = null] : ( HamEar | HamEarlobe | HamCheek ) ;
// $ANTLR start "locsided"
locsided: function() {
var rls =  null;
try {
// Ham4HMLGen.g:1364:5: ( ( HamEar | HamEarlobe | HamCheek ) )
// Ham4HMLGen.g:1365:5: ( HamEar | HamEarlobe | HamCheek )
// Ham4HMLGen.g:1365:5: ( HamEar | HamEarlobe | HamCheek )
var alt101=3;
switch ( this.input.LA(1) ) {
case HamEar:
alt101=1;
break;
case HamEarlobe:
alt101=2;
break;
case HamCheek:
alt101=3;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 101, 0, this.input);
throw nvae;
}
switch (alt101) {
case 1 :
// Ham4HMLGen.g:1365:9: HamEar
this.match(this.input,HamEar,Ham4HMLGen.FOLLOW_HamEar_in_locsided10345); 
rls = "ham_ear"; 
break;
case 2 :
// Ham4HMLGen.g:1366:9: HamEarlobe
this.match(this.input,HamEarlobe,Ham4HMLGen.FOLLOW_HamEarlobe_in_locsided10374); 
rls = "ham_earlobe"; 
break;
case 3 :
// Ham4HMLGen.g:1367:9: HamCheek
this.match(this.input,HamCheek,Ham4HMLGen.FOLLOW_HamCheek_in_locsided10399); 
rls = "ham_cheek"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rls;
},
// Ham4HMLGen.g:1371:1: handpart returns [Element rhp = null] : ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside ) ;
// $ANTLR start "handpart"
handpart: function() {
var rhp =  null;
var  shp     = null;
try {
// Ham4HMLGen.g:1376:5: ( ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside ) )
// Ham4HMLGen.g:1377:5: ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside )
// Ham4HMLGen.g:1377:5: ( HamWristback | HamWristpulse | HamThumbball | HamPalm | HamHandback | HamThumbside | HamPinkyside )
var alt102=7;
switch ( this.input.LA(1) ) {
case HamWristback:
alt102=1;
break;
case HamWristpulse:
alt102=2;
break;
case HamThumbball:
alt102=3;
break;
case HamPalm:
alt102=4;
break;
case HamHandback:
alt102=5;
break;
case HamThumbside:
alt102=6;
break;
case HamPinkyside:
alt102=7;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 102, 0, this.input);
throw nvae;
}
switch (alt102) {
case 1 :
// Ham4HMLGen.g:1377:9: HamWristback
this.match(this.input,HamWristback,Ham4HMLGen.FOLLOW_HamWristback_in_handpart10464); 
shp = "ham_wristback"; 
break;
case 2 :
// Ham4HMLGen.g:1378:9: HamWristpulse
this.match(this.input,HamWristpulse,Ham4HMLGen.FOLLOW_HamWristpulse_in_handpart10487); 
shp = "ham_wristpulse"; 
break;
case 3 :
// Ham4HMLGen.g:1379:9: HamThumbball
this.match(this.input,HamThumbball,Ham4HMLGen.FOLLOW_HamThumbball_in_handpart10509); 
shp = "ham_thumbball"; 
break;
case 4 :
// Ham4HMLGen.g:1380:9: HamPalm
this.match(this.input,HamPalm,Ham4HMLGen.FOLLOW_HamPalm_in_handpart10532); 
shp = "ham_palm"; 
break;
case 5 :
// Ham4HMLGen.g:1381:9: HamHandback
this.match(this.input,HamHandback,Ham4HMLGen.FOLLOW_HamHandback_in_handpart10560); 
shp = "ham_handback"; 
break;
case 6 :
// Ham4HMLGen.g:1382:9: HamThumbside
this.match(this.input,HamThumbside,Ham4HMLGen.FOLLOW_HamThumbside_in_handpart10584); 
shp = "ham_thumbside"; 
break;
case 7 :
// Ham4HMLGen.g:1383:9: HamPinkyside
this.match(this.input,HamPinkyside,Ham4HMLGen.FOLLOW_HamPinkyside_in_handpart10607); 
shp = "ham_pinkyside"; 
break;
}
rhp = hBuilder.newHMLElement("handpart");
rhp.setAttribute("handpart", shp);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rhp;
},
// Ham4HMLGen.g:1391:1: side[lh_or_rh] returns [String rs = null] : ( HamLrbeside | HamLrat ) ;
// $ANTLR start "side"
side: function(lh_or_rh) {
var rs =  null;
try {
// Ham4HMLGen.g:1396:5: ( ( HamLrbeside | HamLrat ) )
// Ham4HMLGen.g:1397:5: ( HamLrbeside | HamLrat )
// Ham4HMLGen.g:1397:5: ( HamLrbeside | HamLrat )
var alt103=2;
var LA103_0 = this.input.LA(1);
if ( (LA103_0==HamLrbeside) ) {
alt103=1;
}
else if ( (LA103_0==HamLrat) ) {
alt103=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 103, 0, this.input);
throw nvae;
}
switch (alt103) {
case 1 :
// Ham4HMLGen.g:1397:9: HamLrbeside
this.match(this.input,HamLrbeside,Ham4HMLGen.FOLLOW_HamLrbeside_in_side10692); 
rs = "beside"; 
break;
case 2 :
// Ham4HMLGen.g:1398:9: HamLrat
this.match(this.input,HamLrat,Ham4HMLGen.FOLLOW_HamLrat_in_side10716); 
rs = "at"; 
break;
}
rs = "ham_" + lh_or_rh + "_" + rs;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rs;
},
// Ham4HMLGen.g:1405:1: dorsalorpalmar returns [String rdp = null] : ( HamHandback | HamPalm ) ;
// $ANTLR start "dorsalorpalmar"
dorsalorpalmar: function() {
var rdp =  null;
try {
// Ham4HMLGen.g:1408:5: ( ( HamHandback | HamPalm ) )
// Ham4HMLGen.g:1409:5: ( HamHandback | HamPalm )
// Ham4HMLGen.g:1409:5: ( HamHandback | HamPalm )
var alt104=2;
var LA104_0 = this.input.LA(1);
if ( (LA104_0==HamHandback) ) {
alt104=1;
}
else if ( (LA104_0==HamPalm) ) {
alt104=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 104, 0, this.input);
throw nvae;
}
switch (alt104) {
case 1 :
// Ham4HMLGen.g:1409:9: HamHandback
this.match(this.input,HamHandback,Ham4HMLGen.FOLLOW_HamHandback_in_dorsalorpalmar10778); 
rdp = "dorsal"; 
break;
case 2 :
// Ham4HMLGen.g:1410:9: HamPalm
this.match(this.input,HamPalm,Ham4HMLGen.FOLLOW_HamPalm_in_dorsalorpalmar10802); 
rdp = "palmar"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rdp;
},
// Ham4HMLGen.g:1414:1: pcontact returns [Element rpc = null] : ( HamTouch | HamClose ) ;
// $ANTLR start "pcontact"
pcontact: function() {
var rpc =  null;
var  spc     = null;
try {
// Ham4HMLGen.g:1419:5: ( ( HamTouch | HamClose ) )
// Ham4HMLGen.g:1420:5: ( HamTouch | HamClose )
// Ham4HMLGen.g:1420:5: ( HamTouch | HamClose )
var alt105=2;
var LA105_0 = this.input.LA(1);
if ( (LA105_0==HamTouch) ) {
alt105=1;
}
else if ( (LA105_0==HamClose) ) {
alt105=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 105, 0, this.input);
throw nvae;
}
switch (alt105) {
case 1 :
// Ham4HMLGen.g:1420:9: HamTouch
this.match(this.input,HamTouch,Ham4HMLGen.FOLLOW_HamTouch_in_pcontact10868); 
spc = "ham_touch"; 
break;
case 2 :
// Ham4HMLGen.g:1421:9: HamClose
this.match(this.input,HamClose,Ham4HMLGen.FOLLOW_HamClose_in_pcontact10895); 
spc = "ham_close"; 
break;
}
rpc = hBuilder.newHMLElement("pcontact");
rpc.setAttribute("where", spc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpc;
},
// Ham4HMLGen.g:1429:1: ccontact returns [Element rcc = null] : ( HamInterlock | HamCross ) ;
// $ANTLR start "ccontact"
ccontact: function() {
var rcc =  null;
var  scc     = null;
try {
// Ham4HMLGen.g:1434:5: ( ( HamInterlock | HamCross ) )
// Ham4HMLGen.g:1435:5: ( HamInterlock | HamCross )
// Ham4HMLGen.g:1435:5: ( HamInterlock | HamCross )
var alt106=2;
var LA106_0 = this.input.LA(1);
if ( (LA106_0==HamInterlock) ) {
alt106=1;
}
else if ( (LA106_0==HamCross) ) {
alt106=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 106, 0, this.input);
throw nvae;
}
switch (alt106) {
case 1 :
// Ham4HMLGen.g:1435:9: HamInterlock
this.match(this.input,HamInterlock,Ham4HMLGen.FOLLOW_HamInterlock_in_ccontact10966); 
scc = "ham_interlock"; 
break;
case 2 :
// Ham4HMLGen.g:1436:9: HamCross
this.match(this.input,HamCross,Ham4HMLGen.FOLLOW_HamCross_in_ccontact10989); 
scc = "ham_cross"; 
break;
}
rcc = hBuilder.newHMLElement("ccontact");
rcc.setAttribute("crosskind", scc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcc;
},
// Ham4HMLGen.g:1447:1: a2tstar returns [Element[] ral = null] : ^( A2TLIST (a2t= action2t )* ) ;
// $ANTLR start "a2tstar"
a2tstar: function() {
var ral =  null;
var a2t = null;
alist   = [];
try {
// Ham4HMLGen.g:1453:5: ( ^( A2TLIST (a2t= action2t )* ) )
// Ham4HMLGen.g:1454:5: ^( A2TLIST (a2t= action2t )* )
this.match(this.input,A2TLIST,Ham4HMLGen.FOLLOW_A2TLIST_in_a2tstar11061); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1455:9: (a2t= action2t )*
loop107:
do {
var alt107=2;
var LA107_0 = this.input.LA(1);
if ( (LA107_0==ACTION2T) ) {
alt107=1;
}
switch (alt107) {
case 1 :
// Ham4HMLGen.g:1455:11: a2t= action2t
this.pushFollow(Ham4HMLGen.FOLLOW_action2t_in_a2tstar11079);
a2t=this.action2t();
this.state._fsp--;
alist.push(a2t); 
break;
default :
break loop107;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
ral = alist;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ral;
},
// Ham4HMLGen.g:1462:1: a1tstar returns [Element[] ral = null] : ^( A1TLIST (a1t= action1t )* ) ;
// $ANTLR start "a1tstar"
a1tstar: function() {
var ral =  null;
var a1t = null;
var alist   = [];
try {
// Ham4HMLGen.g:1468:5: ( ^( A1TLIST (a1t= action1t )* ) )
// Ham4HMLGen.g:1469:5: ^( A1TLIST (a1t= action1t )* )
this.match(this.input,A1TLIST,Ham4HMLGen.FOLLOW_A1TLIST_in_a1tstar11141); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1470:9: (a1t= action1t )*
loop108:
do {
var alt108=2;
var LA108_0 = this.input.LA(1);
if ( (LA108_0==ACTION1T) ) {
alt108=1;
}
switch (alt108) {
case 1 :
// Ham4HMLGen.g:1470:11: a1t= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_a1tstar11159);
a1t=this.action1t();
this.state._fsp--;
alist.push(a1t); 
break;
default :
break loop108;
}
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
ral = alist;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ral;
},
// Ham4HMLGen.g:1477:1: action2t returns [Element ra = null] : ^( ACTION2T (sub= action1t | a= action1 loc= location2 | ra1= splitaction2loc2 | ra2= splitaction2t | sub= paraction2t | sub= seqaction2t | sub= seqfusedaction2t ) ( repetitions[ra] )? ) ;
// $ANTLR start "action2t"
action2t: function() {
var ra =  null;
var sub = null;
var a = null;
var loc = null;
var ra1 = null;
var ra2 = null;
try {
// Ham4HMLGen.g:1480:5: ( ^( ACTION2T (sub= action1t | a= action1 loc= location2 | ra1= splitaction2loc2 | ra2= splitaction2t | sub= paraction2t | sub= seqaction2t | sub= seqfusedaction2t ) ( repetitions[ra] )? ) )
// Ham4HMLGen.g:1481:5: ^( ACTION2T (sub= action1t | a= action1 loc= location2 | ra1= splitaction2loc2 | ra2= splitaction2t | sub= paraction2t | sub= seqaction2t | sub= seqfusedaction2t ) ( repetitions[ra] )? )
this.match(this.input,ACTION2T,Ham4HMLGen.FOLLOW_ACTION2T_in_action2t11216); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1482:9: (sub= action1t | a= action1 loc= location2 | ra1= splitaction2loc2 | ra2= splitaction2t | sub= paraction2t | sub= seqaction2t | sub= seqfusedaction2t )
var alt109=7;
switch ( this.input.LA(1) ) {
case ACTION1T:
alt109=1;
break;
case ACTION1:
alt109=2;
break;
case SPLITACT2LOC2:
alt109=3;
break;
case SPLITACT2T:
alt109=4;
break;
case PARACT2T:
alt109=5;
break;
case SEQACT2T:
alt109=6;
break;
case SEQFUSEDACT2T:
alt109=7;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 109, 0, this.input);
throw nvae;
}
switch (alt109) {
case 1 :
// Ham4HMLGen.g:1483:13: sub= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_action2t11244);
sub=this.action1t();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1485:13: a= action1 loc= location2
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_action2t11274);
a=this.action1();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_location2_in_action2t11292);
loc=this.location2();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:1488:13: ra1= splitaction2loc2
this.pushFollow(Ham4HMLGen.FOLLOW_splitaction2loc2_in_action2t11321);
ra1=this.splitaction2loc2();
this.state._fsp--;
ra = ra1; 
break;
case 4 :
// Ham4HMLGen.g:1490:13: ra2= splitaction2t
this.pushFollow(Ham4HMLGen.FOLLOW_splitaction2t_in_action2t11356);
ra2=this.splitaction2t();
this.state._fsp--;
ra = ra2; 
break;
case 5 :
// Ham4HMLGen.g:1492:13: sub= paraction2t
this.pushFollow(Ham4HMLGen.FOLLOW_paraction2t_in_action2t11393);
sub=this.paraction2t();
this.state._fsp--;
break;
case 6 :
// Ham4HMLGen.g:1494:13: sub= seqaction2t
this.pushFollow(Ham4HMLGen.FOLLOW_seqaction2t_in_action2t11421);
sub=this.seqaction2t();
this.state._fsp--;
break;
case 7 :
// Ham4HMLGen.g:1496:13: sub= seqfusedaction2t
this.pushFollow(Ham4HMLGen.FOLLOW_seqfusedaction2t_in_action2t11449);
sub=this.seqfusedaction2t();
this.state._fsp--;
break;
}
if (ra == null) {
if (sub != null) {
ra = hBuilder.wrapperEl("action2t", sub);
}
else /* a != null */ {
ra = hBuilder.wrapPair("action2t", a, loc);
}
}
// Ham4HMLGen.g:1508:9: ( repetitions[ra] )?
var alt110=2;
var LA110_0 = this.input.LA(1);
if ( (LA110_0==REPETITIONS) ) {
alt110=1;
}
switch (alt110) {
case 1 :
// Ham4HMLGen.g:1508:11: repetitions[ra]
this.pushFollow(Ham4HMLGen.FOLLOW_repetitions_in_action2t11485);
this.repetitions(ra);
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
/*  TBD: allow location2? after repetitions, and in this case
*  wrap ra and the extra loc as a new action2t;
*/
ra = hBuilder.stripParentIfNotNeeded(ra);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ra;
},
// Ham4HMLGen.g:1518:1: action1t returns [Element ra = null] : ^( ACTION1T (a= action1 (tl= location1 ( HamLargemod )? | tl= handconstellation )? | sub= paraction1t | sub= seqaction1t | sub= seqfusedaction1t | ract= nmaction1t ) ( repetitions[ra] )? ) ;
// $ANTLR start "action1t"
action1t: function() {
var ra =  null;
var a = null;
var tl = null;
var sub = null;
var ract = null;
var     bouncing= false;
try {
// Ham4HMLGen.g:1524:5: ( ^( ACTION1T (a= action1 (tl= location1 ( HamLargemod )? | tl= handconstellation )? | sub= paraction1t | sub= seqaction1t | sub= seqfusedaction1t | ract= nmaction1t ) ( repetitions[ra] )? ) )
// Ham4HMLGen.g:1525:5: ^( ACTION1T (a= action1 (tl= location1 ( HamLargemod )? | tl= handconstellation )? | sub= paraction1t | sub= seqaction1t | sub= seqfusedaction1t | ract= nmaction1t ) ( repetitions[ra] )? )
this.match(this.input,ACTION1T,Ham4HMLGen.FOLLOW_ACTION1T_in_action1t11540); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1526:9: (a= action1 (tl= location1 ( HamLargemod )? | tl= handconstellation )? | sub= paraction1t | sub= seqaction1t | sub= seqfusedaction1t | ract= nmaction1t )
var alt113=5;
switch ( this.input.LA(1) ) {
case ACTION1:
alt113=1;
break;
case PARACT1T:
alt113=2;
break;
case SEQACT1T:
alt113=3;
break;
case SEQFUSEDACT1T:
alt113=4;
break;
case NMACT1T:
alt113=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 113, 0, this.input);
throw nvae;
}
switch (alt113) {
case 1 :
// Ham4HMLGen.g:1527:13: a= action1 (tl= location1 ( HamLargemod )? | tl= handconstellation )?
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_action1t11574);
a=this.action1();
this.state._fsp--;
// Ham4HMLGen.g:1528:13: (tl= location1 ( HamLargemod )? | tl= handconstellation )?
var alt112=3;
var LA112_0 = this.input.LA(1);
if ( (LA112_0==LOC1) ) {
alt112=1;
}
else if ( (LA112_0==HCONSTLLN) ) {
alt112=2;
}
switch (alt112) {
case 1 :
// Ham4HMLGen.g:1529:17: tl= location1 ( HamLargemod )?
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_action1t11611);
tl=this.location1();
this.state._fsp--;
// Ham4HMLGen.g:1530:21: ( HamLargemod )?
var alt111=2;
var LA111_0 = this.input.LA(1);
if ( (LA111_0==HamLargemod) ) {
alt111=1;
}
switch (alt111) {
case 1 :
// Ham4HMLGen.g:1530:23: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_action1t11635); 
bouncing = true; 
break;
}
break;
case 2 :
// Ham4HMLGen.g:1532:17: tl= handconstellation
this.pushFollow(Ham4HMLGen.FOLLOW_handconstellation_in_action1t11679);
tl=this.handconstellation();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:1535:13: sub= paraction1t
this.pushFollow(Ham4HMLGen.FOLLOW_paraction1t_in_action1t11726);
sub=this.paraction1t();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:1537:13: sub= seqaction1t
this.pushFollow(Ham4HMLGen.FOLLOW_seqaction1t_in_action1t11758);
sub=this.seqaction1t();
this.state._fsp--;
break;
case 4 :
// Ham4HMLGen.g:1539:13: sub= seqfusedaction1t
this.pushFollow(Ham4HMLGen.FOLLOW_seqfusedaction1t_in_action1t11790);
sub=this.seqfusedaction1t();
this.state._fsp--;
break;
case 5 :
// Ham4HMLGen.g:1541:13: ract= nmaction1t
this.pushFollow(Ham4HMLGen.FOLLOW_nmaction1t_in_action1t11821);
ract=this.nmaction1t();
this.state._fsp--;
ra = ract; 
break;
}
if (ra == null) {
if (sub != null) {
ra = hBuilder.wrapperEl("action1t", sub);
}
else /* a != null */ {
hBuilder.checkedSetFlagAttr(
a, "bouncing", bouncing);
ra = hBuilder.wrapperEl("action1t", a);
hBuilder.checkedAppendChild(ra, tl);
}
}
// Ham4HMLGen.g:1556:9: ( repetitions[ra] )?
var alt114=2;
var LA114_0 = this.input.LA(1);
if ( (LA114_0==REPETITIONS) ) {
alt114=1;
}
switch (alt114) {
case 1 :
// Ham4HMLGen.g:1556:11: repetitions[ra]
this.pushFollow(Ham4HMLGen.FOLLOW_repetitions_in_action1t11863);
this.repetitions(ra);
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
/*  TBD: allow location1? after repetitions, and in this case
*  wrap ra and the extra loc as a new action1t;
*/
ra = hBuilder.stripParentIfNotNeeded(ra);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ra;
},
// Ham4HMLGen.g:1566:1: action1 returns [Element ra = null] : ^( ACTION1 ( HamNomotion | sub= simplemovement ( (mod= modifier )+ ( HamLargemod )? )? | sub= paraction1 | sub= seqaction1 | sub= seqfusedaction1 ) ) ;
// $ANTLR start "action1"
action1: function() {
var ra =  null;
var sub = null;
var mod = null;
var     bouncing    = false;
try {
// Ham4HMLGen.g:1572:5: ( ^( ACTION1 ( HamNomotion | sub= simplemovement ( (mod= modifier )+ ( HamLargemod )? )? | sub= paraction1 | sub= seqaction1 | sub= seqfusedaction1 ) ) )
// Ham4HMLGen.g:1573:5: ^( ACTION1 ( HamNomotion | sub= simplemovement ( (mod= modifier )+ ( HamLargemod )? )? | sub= paraction1 | sub= seqaction1 | sub= seqfusedaction1 ) )
this.match(this.input,ACTION1,Ham4HMLGen.FOLLOW_ACTION1_in_action111919); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1574:9: ( HamNomotion | sub= simplemovement ( (mod= modifier )+ ( HamLargemod )? )? | sub= paraction1 | sub= seqaction1 | sub= seqfusedaction1 )
var alt118=5;
switch ( this.input.LA(1) ) {
case HamNomotion:
alt118=1;
break;
case SIMPLEMVMT:
alt118=2;
break;
case PARACT1:
alt118=3;
break;
case SEQACT1:
alt118=4;
break;
case SEQFUSEDACT1:
alt118=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 118, 0, this.input);
throw nvae;
}
switch (alt118) {
case 1 :
// Ham4HMLGen.g:1575:23: HamNomotion
this.match(this.input,HamNomotion,Ham4HMLGen.FOLLOW_HamNomotion_in_action111953); 
sub = hBuilder.newHMLElement("hamnomotion"); 
break;
case 2 :
// Ham4HMLGen.g:1578:13: sub= simplemovement ( (mod= modifier )+ ( HamLargemod )? )?
this.pushFollow(Ham4HMLGen.FOLLOW_simplemovement_in_action112009);
sub=this.simplemovement();
this.state._fsp--;
// Ham4HMLGen.g:1579:13: ( (mod= modifier )+ ( HamLargemod )? )?
var alt117=2;
var LA117_0 = this.input.LA(1);
if ( ((LA117_0>=HamFast && LA117_0<=HamHalt)) ) {
alt117=1;
}
switch (alt117) {
case 1 :
// Ham4HMLGen.g:1580:17: (mod= modifier )+ ( HamLargemod )?
// Ham4HMLGen.g:1580:17: (mod= modifier )+
var cnt115=0;
loop115:
do {
var alt115=2;
var LA115_0 = this.input.LA(1);
if ( ((LA115_0>=HamFast && LA115_0<=HamHalt)) ) {
alt115=1;
}
switch (alt115) {
case 1 :
// Ham4HMLGen.g:1581:17: mod= modifier
this.pushFollow(Ham4HMLGen.FOLLOW_modifier_in_action112063);
mod=this.modifier();
this.state._fsp--;
sub.setAttribute(mod, "true"); 
break;
default :
if ( cnt115 >= 1 ) {
break loop115;
}
var eee = new org.antlr.runtime.EarlyExitException(115, this.input);
throw eee;
}
cnt115++;
} while (true);
// Ham4HMLGen.g:1584:21: ( HamLargemod )?
var alt116=2;
var LA116_0 = this.input.LA(1);
if ( (LA116_0==HamLargemod) ) {
alt116=1;
}
switch (alt116) {
case 1 :
// Ham4HMLGen.g:1584:23: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_action112130); 
bouncing = true; 
break;
}
break;
}
break;
case 3 :
// Ham4HMLGen.g:1587:13: sub= paraction1
this.pushFollow(Ham4HMLGen.FOLLOW_paraction1_in_action112184);
sub=this.paraction1();
this.state._fsp--;
break;
case 4 :
// Ham4HMLGen.g:1589:13: sub= seqaction1
this.pushFollow(Ham4HMLGen.FOLLOW_seqaction1_in_action112216);
sub=this.seqaction1();
this.state._fsp--;
break;
case 5 :
// Ham4HMLGen.g:1591:13: sub= seqfusedaction1
this.pushFollow(Ham4HMLGen.FOLLOW_seqfusedaction1_in_action112248);
sub=this.seqfusedaction1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
ra = hBuilder.wrapIfNeeded("action1", sub);
hBuilder.checkedSetFlagAttr(ra, "bouncing", bouncing);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ra;
},
// Ham4HMLGen.g:1603:1: paraction2t returns [Element rpa = null] : ^( PARACT2T (a= action2t )+ ) ;
// $ANTLR start "paraction2t"
paraction2t: function() {
var rpa =  null;
var a = null;
al  = [];
try {
// Ham4HMLGen.g:1609:5: ( ^( PARACT2T (a= action2t )+ ) )
// Ham4HMLGen.g:1610:5: ^( PARACT2T (a= action2t )+ )
this.match(this.input,PARACT2T,Ham4HMLGen.FOLLOW_PARACT2T_in_paraction2t12309); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1611:9: (a= action2t )+
var cnt119=0;
loop119:
do {
var alt119=2;
var LA119_0 = this.input.LA(1);
if ( (LA119_0==ACTION2T) ) {
alt119=1;
}
switch (alt119) {
case 1 :
// Ham4HMLGen.g:1612:13: a= action2t
this.pushFollow(Ham4HMLGen.FOLLOW_action2t_in_paraction2t12339);
a=this.action2t();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt119 >= 1 ) {
break loop119;
}
var eee = new org.antlr.runtime.EarlyExitException(119, this.input);
throw eee;
}
cnt119++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rpa = hBuilder.elementFromList(al, "par_action2t");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpa;
},
// Ham4HMLGen.g:1620:1: seqaction2t returns [Element rsa = null] : ^( SEQACT2T (a= action2t )+ ) ;
// $ANTLR start "seqaction2t"
seqaction2t: function() {
var rsa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1626:5: ( ^( SEQACT2T (a= action2t )+ ) )
// Ham4HMLGen.g:1627:5: ^( SEQACT2T (a= action2t )+ )
this.match(this.input,SEQACT2T,Ham4HMLGen.FOLLOW_SEQACT2T_in_seqaction2t12405); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1628:9: (a= action2t )+
var cnt120=0;
loop120:
do {
var alt120=2;
var LA120_0 = this.input.LA(1);
if ( (LA120_0==ACTION2T) ) {
alt120=1;
}
switch (alt120) {
case 1 :
// Ham4HMLGen.g:1629:13: a= action2t
this.pushFollow(Ham4HMLGen.FOLLOW_action2t_in_seqaction2t12435);
a=this.action2t();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt120 >= 1 ) {
break loop120;
}
var eee = new org.antlr.runtime.EarlyExitException(120, this.input);
throw eee;
}
cnt120++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsa = hBuilder.elementFromList(al, "seq_action2t");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsa;
},
// Ham4HMLGen.g:1637:1: seqfusedaction2t returns [Element rsfa = null] : ^( SEQFUSEDACT2T (a= action2t )+ ) ;
// $ANTLR start "seqfusedaction2t"
seqfusedaction2t: function() {
var rsfa =  null;
var a = null;
var al = [];
try {
// Ham4HMLGen.g:1644:5: ( ^( SEQFUSEDACT2T (a= action2t )+ ) )
// Ham4HMLGen.g:1645:5: ^( SEQFUSEDACT2T (a= action2t )+ )
this.match(this.input,SEQFUSEDACT2T,Ham4HMLGen.FOLLOW_SEQFUSEDACT2T_in_seqfusedaction2t12504); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1646:9: (a= action2t )+
var cnt121=0;
loop121:
do {
var alt121=2;
var LA121_0 = this.input.LA(1);
if ( (LA121_0==ACTION2T) ) {
alt121=1;
}
switch (alt121) {
case 1 :
// Ham4HMLGen.g:1647:13: a= action2t
this.pushFollow(Ham4HMLGen.FOLLOW_action2t_in_seqfusedaction2t12534);
a=this.action2t();
this.state._fsp--;
al.add(a); 
break;
default :
if ( cnt121 >= 1 ) {
break loop121;
}
var eee = new org.antlr.runtime.EarlyExitException(121, this.input);
throw eee;
}
cnt121++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsfa = hBuilder.elementFromList(al, "seq_action2t");
if (al.length != 1) {
rsfa.setAttribute("fused", "true");
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsfa;
},
// Ham4HMLGen.g:1658:1: splitaction2loc2 returns [Element rsal = null] : ^( SPLITACT2LOC2 (a= action1 )+ HamPlus (a= action1 )+ loc= location2 ) ;
// $ANTLR start "splitaction2loc2"
splitaction2loc2: function() {
var rsal =  null;
var a = null;
var loc = null;
var sadom   = hBuilder.newHMLElement("seq_action1");
var sasub   = hBuilder.newHMLElement("seq_action1");
try {
// Ham4HMLGen.g:1665:5: ( ^( SPLITACT2LOC2 (a= action1 )+ HamPlus (a= action1 )+ loc= location2 ) )
// Ham4HMLGen.g:1666:5: ^( SPLITACT2LOC2 (a= action1 )+ HamPlus (a= action1 )+ loc= location2 )
this.match(this.input,SPLITACT2LOC2,Ham4HMLGen.FOLLOW_SPLITACT2LOC2_in_splitaction2loc212599); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1667:9: (a= action1 )+
var cnt122=0;
loop122:
do {
var alt122=2;
var LA122_0 = this.input.LA(1);
if ( (LA122_0==ACTION1) ) {
alt122=1;
}
switch (alt122) {
case 1 :
// Ham4HMLGen.g:1667:11: a= action1
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_splitaction2loc212619);
a=this.action1();
this.state._fsp--;
sadom.appendChild(a); 
break;
default :
if ( cnt122 >= 1 ) {
break loop122;
}
var eee = new org.antlr.runtime.EarlyExitException(122, this.input);
throw eee;
}
cnt122++;
} while (true);
this.match(this.input,HamPlus,Ham4HMLGen.FOLLOW_HamPlus_in_splitaction2loc212642); 
// Ham4HMLGen.g:1669:9: (a= action1 )+
var cnt123=0;
loop123:
do {
var alt123=2;
var LA123_0 = this.input.LA(1);
if ( (LA123_0==ACTION1) ) {
alt123=1;
}
switch (alt123) {
case 1 :
// Ham4HMLGen.g:1669:11: a= action1
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_splitaction2loc212662);
a=this.action1();
this.state._fsp--;
sasub.appendChild(a); 
break;
default :
if ( cnt123 >= 1 ) {
break loop123;
}
var eee = new org.antlr.runtime.EarlyExitException(123, this.input);
throw eee;
}
cnt123++;
} while (true);
this.pushFollow(Ham4HMLGen.FOLLOW_location2_in_splitaction2loc212693);
loc=this.location2();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
var a2  = hBuilder.newHMLElement("action2");
// A singleton sequence can be unwrapped, rather
// than being wrapped.
var adom =
sadom.childNodes.length==1 ?
sadom.firstChild :
hBuilder.wrapperEl("action1", sadom);
a2.appendChild(adom);
// Again, choose between unwrapping and wrapping.
var asub =
sasub.childNodes.length==1 ?
sasub.firstChild :
hBuilder.wrapperEl("action1", sasub);
a2.appendChild(asub);
rsal = hBuilder.newHMLElement("action2t");
rsal.appendChild(a2);
rsal.appendChild(loc);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsal;
},
// Ham4HMLGen.g:1696:1: splitaction2t returns [Element rsa = null] : ^( SPLITACT2T (at= action1t )+ HamPlus (at= action1t )+ ) ;
// $ANTLR start "splitaction2t"
splitaction2t: function() {
var rsa =  null;
var at = null;
var satdom  = hBuilder.newHMLElement("seq_action1t");
var satsub  = hBuilder.newHMLElement("seq_action1t");
try {
// Ham4HMLGen.g:1703:5: ( ^( SPLITACT2T (at= action1t )+ HamPlus (at= action1t )+ ) )
// Ham4HMLGen.g:1704:5: ^( SPLITACT2T (at= action1t )+ HamPlus (at= action1t )+ )
this.match(this.input,SPLITACT2T,Ham4HMLGen.FOLLOW_SPLITACT2T_in_splitaction2t12739); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1705:9: (at= action1t )+
var cnt124=0;
loop124:
do {
var alt124=2;
var LA124_0 = this.input.LA(1);
if ( (LA124_0==ACTION1T) ) {
alt124=1;
}
switch (alt124) {
case 1 :
// Ham4HMLGen.g:1705:11: at= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_splitaction2t12758);
at=this.action1t();
this.state._fsp--;
satdom.appendChild(at); 
break;
default :
if ( cnt124 >= 1 ) {
break loop124;
}
var eee = new org.antlr.runtime.EarlyExitException(124, this.input);
throw eee;
}
cnt124++;
} while (true);
this.match(this.input,HamPlus,Ham4HMLGen.FOLLOW_HamPlus_in_splitaction2t12780); 
// Ham4HMLGen.g:1707:9: (at= action1t )+
var cnt125=0;
loop125:
do {
var alt125=2;
var LA125_0 = this.input.LA(1);
if ( (LA125_0==ACTION1T) ) {
alt125=1;
}
switch (alt125) {
case 1 :
// Ham4HMLGen.g:1707:11: at= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_splitaction2t12799);
at=this.action1t();
this.state._fsp--;
satsub.appendChild(at); 
break;
default :
if ( cnt125 >= 1 ) {
break loop125;
}
var eee = new org.antlr.runtime.EarlyExitException(125, this.input);
throw eee;
}
cnt125++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsa = hBuilder.newHMLElement("action2t");
// A singleton sequence can be unwrapped, rather
// than being wrapped.
var atdom =
satdom.childNodes.length==1 ?
satdom.firstChild :
hBuilder.wrapperEl("action1t", satdom);
rsa.appendChild(atdom);
// Again, choose between unwrapping and wrapping.
var atsub =
satsub.childNodes.length==1 ?
satsub.firstChild :
hBuilder.wrapperEl("action1t", satsub);
rsa.appendChild(atsub);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsa;
},
// Ham4HMLGen.g:1729:1: paraction1t returns [Element rpa = null] : ^( PARACT1T (a= action1t )+ ) ;
// $ANTLR start "paraction1t"
paraction1t: function() {
var rpa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1735:5: ( ^( PARACT1T (a= action1t )+ ) )
// Ham4HMLGen.g:1736:5: ^( PARACT1T (a= action1t )+ )
this.match(this.input,PARACT1T,Ham4HMLGen.FOLLOW_PARACT1T_in_paraction1t12859); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1737:9: (a= action1t )+
var cnt126=0;
loop126:
do {
var alt126=2;
var LA126_0 = this.input.LA(1);
if ( (LA126_0==ACTION1T) ) {
alt126=1;
}
switch (alt126) {
case 1 :
// Ham4HMLGen.g:1738:13: a= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_paraction1t12889);
a=this.action1t();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt126 >= 1 ) {
break loop126;
}
var eee = new org.antlr.runtime.EarlyExitException(126, this.input);
throw eee;
}
cnt126++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rpa = hBuilder.elementFromList(al, "par_action1t");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpa;
},
// Ham4HMLGen.g:1746:1: seqaction1t returns [Element rsa = null] : ^( SEQACT1T (a= action1t )+ ) ;
// $ANTLR start "seqaction1t"
seqaction1t: function() {
var rsa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1752:5: ( ^( SEQACT1T (a= action1t )+ ) )
// Ham4HMLGen.g:1753:5: ^( SEQACT1T (a= action1t )+ )
this.match(this.input,SEQACT1T,Ham4HMLGen.FOLLOW_SEQACT1T_in_seqaction1t12955); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1754:9: (a= action1t )+
var cnt127=0;
loop127:
do {
var alt127=2;
var LA127_0 = this.input.LA(1);
if ( (LA127_0==ACTION1T) ) {
alt127=1;
}
switch (alt127) {
case 1 :
// Ham4HMLGen.g:1755:13: a= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_seqaction1t12985);
a=this.action1t();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt127 >= 1 ) {
break loop127;
}
var eee = new org.antlr.runtime.EarlyExitException(127, this.input);
throw eee;
}
cnt127++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsa = hBuilder.elementFromList(al, "seq_action1t");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsa;
},
// Ham4HMLGen.g:1763:1: seqfusedaction1t returns [Element rsfa = null] : ^( SEQFUSEDACT1T (a= action1t )+ ) ;
// $ANTLR start "seqfusedaction1t"
seqfusedaction1t: function() {
var rsfa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1770:5: ( ^( SEQFUSEDACT1T (a= action1t )+ ) )
// Ham4HMLGen.g:1771:5: ^( SEQFUSEDACT1T (a= action1t )+ )
this.match(this.input,SEQFUSEDACT1T,Ham4HMLGen.FOLLOW_SEQFUSEDACT1T_in_seqfusedaction1t13054); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1772:9: (a= action1t )+
var cnt128=0;
loop128:
do {
var alt128=2;
var LA128_0 = this.input.LA(1);
if ( (LA128_0==ACTION1T) ) {
alt128=1;
}
switch (alt128) {
case 1 :
// Ham4HMLGen.g:1773:13: a= action1t
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_seqfusedaction1t13084);
a=this.action1t();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt128 >= 1 ) {
break loop128;
}
var eee = new org.antlr.runtime.EarlyExitException(128, this.input);
throw eee;
}
cnt128++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsfa = hBuilder.elementFromList(al, "seq_action1t");
if (al.length != 1) {
rsfa.setAttribute("fused", "true");
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsfa;
},
// Ham4HMLGen.g:1784:1: nmaction1t returns [Element rnma = null] : ^( NMACT1T (hd= levelbody | hd= levelarm ) a= action1t ) ;
// $ANTLR start "nmaction1t"
nmaction1t: function() {
var rnma =  null;
var hd = null;
var a = null;
try {
// Ham4HMLGen.g:1787:5: ( ^( NMACT1T (hd= levelbody | hd= levelarm ) a= action1t ) )
// Ham4HMLGen.g:1788:5: ^( NMACT1T (hd= levelbody | hd= levelarm ) a= action1t )
this.match(this.input,NMACT1T,Ham4HMLGen.FOLLOW_NMACT1T_in_nmaction1t13147); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1789:9: (hd= levelbody | hd= levelarm )
var alt129=2;
var LA129_0 = this.input.LA(1);
if ( (LA129_0==LEVBODY) ) {
alt129=1;
}
else if ( (LA129_0==LEVARM) ) {
alt129=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 129, 0, this.input);
throw nvae;
}
switch (alt129) {
case 1 :
// Ham4HMLGen.g:1790:13: hd= levelbody
this.pushFollow(Ham4HMLGen.FOLLOW_levelbody_in_nmaction1t13176);
hd=this.levelbody();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1792:13: hd= levelarm
this.pushFollow(Ham4HMLGen.FOLLOW_levelarm_in_nmaction1t13205);
hd=this.levelarm();
this.state._fsp--;
break;
}
this.pushFollow(Ham4HMLGen.FOLLOW_action1t_in_nmaction1t13236);
a=this.action1t();
this.state._fsp--;
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rnma = hBuilder.newHMLElement("action1t");
rnma.appendChild(hd);
rnma.appendChild(a);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rnma;
},
// Ham4HMLGen.g:1804:1: paraction1 returns [Element rpa = null] : ^( PARACT1 (a= action1 )+ ) ;
// $ANTLR start "paraction1"
paraction1: function() {
var rpa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1810:5: ( ^( PARACT1 (a= action1 )+ ) )
// Ham4HMLGen.g:1811:5: ^( PARACT1 (a= action1 )+ )
this.match(this.input,PARACT1,Ham4HMLGen.FOLLOW_PARACT1_in_paraction113285); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1812:9: (a= action1 )+
var cnt130=0;
loop130:
do {
var alt130=2;
var LA130_0 = this.input.LA(1);
if ( (LA130_0==ACTION1) ) {
alt130=1;
}
switch (alt130) {
case 1 :
// Ham4HMLGen.g:1813:13: a= action1
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_paraction113315);
a=this.action1();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt130 >= 1 ) {
break loop130;
}
var eee = new org.antlr.runtime.EarlyExitException(130, this.input);
throw eee;
}
cnt130++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rpa = hBuilder.elementFromList(al, "par_action1");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rpa;
},
// Ham4HMLGen.g:1821:1: seqaction1 returns [Element rsa = null] : ^( SEQACT1 (a= action1 )+ ) ;
// $ANTLR start "seqaction1"
seqaction1: function() {
var rsa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1827:5: ( ^( SEQACT1 (a= action1 )+ ) )
// Ham4HMLGen.g:1828:5: ^( SEQACT1 (a= action1 )+ )
this.match(this.input,SEQACT1,Ham4HMLGen.FOLLOW_SEQACT1_in_seqaction113387); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1829:9: (a= action1 )+
var cnt131=0;
loop131:
do {
var alt131=2;
var LA131_0 = this.input.LA(1);
if ( (LA131_0==ACTION1) ) {
alt131=1;
}
switch (alt131) {
case 1 :
// Ham4HMLGen.g:1830:13: a= action1
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_seqaction113417);
a=this.action1();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt131 >= 1 ) {
break loop131;
}
var eee = new org.antlr.runtime.EarlyExitException(131, this.input);
throw eee;
}
cnt131++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsa = hBuilder.elementFromList(al, "seq_action1");
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsa;
},
// Ham4HMLGen.g:1838:1: seqfusedaction1 returns [Element rsfa = null] : ^( SEQFUSEDACT1 (a= action1 )+ ) ;
// $ANTLR start "seqfusedaction1"
seqfusedaction1: function() {
var rsfa =  null;
var a = null;
var al  = [];
try {
// Ham4HMLGen.g:1845:5: ( ^( SEQFUSEDACT1 (a= action1 )+ ) )
// Ham4HMLGen.g:1846:5: ^( SEQFUSEDACT1 (a= action1 )+ )
this.match(this.input,SEQFUSEDACT1,Ham4HMLGen.FOLLOW_SEQFUSEDACT1_in_seqfusedaction113492); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1847:9: (a= action1 )+
var cnt132=0;
loop132:
do {
var alt132=2;
var LA132_0 = this.input.LA(1);
if ( (LA132_0==ACTION1) ) {
alt132=1;
}
switch (alt132) {
case 1 :
// Ham4HMLGen.g:1848:13: a= action1
this.pushFollow(Ham4HMLGen.FOLLOW_action1_in_seqfusedaction113522);
a=this.action1();
this.state._fsp--;
al.push(a); 
break;
default :
if ( cnt132 >= 1 ) {
break loop132;
}
var eee = new org.antlr.runtime.EarlyExitException(132, this.input);
throw eee;
}
cnt132++;
} while (true);
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsfa = hBuilder.elementFromList(al, "seq_action1");
if (al.length != 1) {
rsfa.setAttribute("fused", "true");
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsfa;
},
// Ham4HMLGen.g:1859:1: repetitions[action] : ^( REPETITIONS ( (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] ) (sc= sizechange (sz= size )? )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? | HamAlternatingmotion ( HamAlternatingmotion )? ) ) ;
// $ANTLR start "repetitions"
repetitions: function(action) {
var r0 = null;
var ed = null;
var r1 = null;
var sc = null;
var sz = null;
var     approxrpt = false;
var     alta    = false;
var     altb    = false;
try {
// Ham4HMLGen.g:1866:5: ( ^( REPETITIONS ( (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] ) (sc= sizechange (sz= size )? )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? | HamAlternatingmotion ( HamAlternatingmotion )? ) ) )
// Ham4HMLGen.g:1867:5: ^( REPETITIONS ( (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] ) (sc= sizechange (sz= size )? )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? | HamAlternatingmotion ( HamAlternatingmotion )? ) )
this.match(this.input,REPETITIONS,Ham4HMLGen.FOLLOW_REPETITIONS_in_repetitions13595); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1868:9: ( (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] ) (sc= sizechange (sz= size )? )? ( HamAlternatingmotion ( HamAlternatingmotion )? )? | HamAlternatingmotion ( HamAlternatingmotion )? )
var alt141=2;
var LA141_0 = this.input.LA(1);
if ( ((LA141_0>=HamRepeatfromstart && LA141_0<=HamRepeatcontinueseveral)||LA141_0==HamRepeatreverse||LA141_0==MOVINGREPETITION) ) {
alt141=1;
}
else if ( (LA141_0==HamAlternatingmotion) ) {
alt141=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 141, 0, this.input);
throw nvae;
}
switch (alt141) {
case 1 :
// Ham4HMLGen.g:1869:13: (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] ) (sc= sizechange (sz= size )? )? ( HamAlternatingmotion ( HamAlternatingmotion )? )?
// Ham4HMLGen.g:1869:13: (r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )? | movingrepetition[action] )
var alt135=2;
var LA135_0 = this.input.LA(1);
if ( ((LA135_0>=HamRepeatfromstart && LA135_0<=HamRepeatcontinueseveral)||LA135_0==HamRepeatreverse) ) {
alt135=1;
}
else if ( (LA135_0==MOVINGREPETITION) ) {
alt135=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 135, 0, this.input);
throw nvae;
}
switch (alt135) {
case 1 :
// Ham4HMLGen.g:1870:21: r0= repetition ( HamEtc (ed= ellipsedirection )? | r1= repetition )?
this.pushFollow(Ham4HMLGen.FOLLOW_repetition_in_repetitions13646);
r0=this.repetition();
this.state._fsp--;
// Ham4HMLGen.g:1871:17: ( HamEtc (ed= ellipsedirection )? | r1= repetition )?
var alt134=3;
var LA134_0 = this.input.LA(1);
if ( (LA134_0==HamEtc) ) {
alt134=1;
}
else if ( ((LA134_0>=HamRepeatfromstart && LA134_0<=HamRepeatcontinueseveral)||LA134_0==HamRepeatreverse) ) {
alt134=2;
}
switch (alt134) {
case 1 :
// Ham4HMLGen.g:1872:27: HamEtc (ed= ellipsedirection )?
this.match(this.input,HamEtc,Ham4HMLGen.FOLLOW_HamEtc_in_repetitions13692); 
approxrpt = true; 
// Ham4HMLGen.g:1873:20: (ed= ellipsedirection )?
var alt133=2;
var LA133_0 = this.input.LA(1);
if ( ((LA133_0>=HamEllipseh && LA133_0<=HamEllipseul)) ) {
alt133=1;
}
switch (alt133) {
case 1 :
// Ham4HMLGen.g:1873:22: ed= ellipsedirection
this.pushFollow(Ham4HMLGen.FOLLOW_ellipsedirection_in_repetitions13736);
ed=this.ellipsedirection();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:1875:22: r1= repetition
this.pushFollow(Ham4HMLGen.FOLLOW_repetition_in_repetitions13784);
r1=this.repetition();
this.state._fsp--;
break;
}
break;
case 2 :
// Ham4HMLGen.g:1878:27: movingrepetition[action]
this.pushFollow(Ham4HMLGen.FOLLOW_movingrepetition_in_repetitions13845);
this.movingrepetition(action);
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1880:13: (sc= sizechange (sz= size )? )?
var alt137=2;
var LA137_0 = this.input.LA(1);
if ( ((LA137_0>=HamIncreasing && LA137_0<=HamDecreasing)) ) {
alt137=1;
}
switch (alt137) {
case 1 :
// Ham4HMLGen.g:1881:17: sc= sizechange (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_sizechange_in_repetitions13901);
sc=this.sizechange();
this.state._fsp--;
// Ham4HMLGen.g:1882:17: (sz= size )?
var alt136=2;
var LA136_0 = this.input.LA(1);
if ( ((LA136_0>=HamSmallmod && LA136_0<=HamLargemod)) ) {
alt136=1;
}
switch (alt136) {
case 1 :
// Ham4HMLGen.g:1882:19: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_repetitions13928);
sz=this.size();
this.state._fsp--;
break;
}
break;
}
// Ham4HMLGen.g:1884:13: ( HamAlternatingmotion ( HamAlternatingmotion )? )?
var alt139=2;
var LA139_0 = this.input.LA(1);
if ( (LA139_0==HamAlternatingmotion) ) {
alt139=1;
}
switch (alt139) {
case 1 :
// Ham4HMLGen.g:1885:27: HamAlternatingmotion ( HamAlternatingmotion )?
this.match(this.input,HamAlternatingmotion,Ham4HMLGen.FOLLOW_HamAlternatingmotion_in_repetitions13988); 
alta = true; 
// Ham4HMLGen.g:1886:7: ( HamAlternatingmotion )?
var alt138=2;
var LA138_0 = this.input.LA(1);
if ( (LA138_0==HamAlternatingmotion) ) {
alt138=1;
}
switch (alt138) {
case 1 :
// Ham4HMLGen.g:1886:9: HamAlternatingmotion
this.match(this.input,HamAlternatingmotion,Ham4HMLGen.FOLLOW_HamAlternatingmotion_in_repetitions14001); 
altb = true; 
break;
}
break;
}
break;
case 2 :
// Ham4HMLGen.g:1889:13: HamAlternatingmotion ( HamAlternatingmotion )?
this.match(this.input,HamAlternatingmotion,Ham4HMLGen.FOLLOW_HamAlternatingmotion_in_repetitions14046); 
alta = true; 
// Ham4HMLGen.g:1890:13: ( HamAlternatingmotion )?
var alt140=2;
var LA140_0 = this.input.LA(1);
if ( (LA140_0==HamAlternatingmotion) ) {
alt140=1;
}
switch (alt140) {
case 1 :
// Ham4HMLGen.g:1890:15: HamAlternatingmotion
this.match(this.input,HamAlternatingmotion,Ham4HMLGen.FOLLOW_HamAlternatingmotion_in_repetitions14067); 
altb = true; 
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
if (r0 != null) {
hBuilder.checkedSetAttr(action, "repetition", r0);
hBuilder.checkedSetAttr(action, "second_repetition", r1);
if (approxrpt && r0.endsWith("fromstartseveral")) {
hBuilder.checkedSetAttr(action, "approx_repetition", "true");
hBuilder.checkedSetAttr(action, "ellipsedirection", ed);
}
}
hBuilder.checkedSetAttr(action, "repetition_incrdecr", sc);
hBuilder.checkedSetAttr(action, "repetition_incrdecr_size", sz);
hBuilder.checkedSetFlagAttr(action, "alternating", alta);
hBuilder.checkedSetFlagAttr(action, "second_alternating", altb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:1909:1: movingrepetition[action] : ^( MOVINGREPETITION r= repetition ma= movementarrow (sz= size )? (sc= sizechange (idsz= size )? )? ) ;
// $ANTLR start "movingrepetition"
movingrepetition: function(action) {
var r = null;
var ma = null;
var sz = null;
var sc = null;
var idsz = null;
try {
// Ham4HMLGen.g:1911:5: ( ^( MOVINGREPETITION r= repetition ma= movementarrow (sz= size )? (sc= sizechange (idsz= size )? )? ) )
// Ham4HMLGen.g:1912:5: ^( MOVINGREPETITION r= repetition ma= movementarrow (sz= size )? (sc= sizechange (idsz= size )? )? )
this.match(this.input,MOVINGREPETITION,Ham4HMLGen.FOLLOW_MOVINGREPETITION_in_movingrepetition14124); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_repetition_in_movingrepetition14148);
r=this.repetition();
this.state._fsp--;
this.pushFollow(Ham4HMLGen.FOLLOW_movementarrow_in_movingrepetition14171);
ma=this.movementarrow();
this.state._fsp--;
// Ham4HMLGen.g:1915:9: (sz= size )?
var alt142=2;
var LA142_0 = this.input.LA(1);
if ( ((LA142_0>=HamSmallmod && LA142_0<=HamLargemod)) ) {
alt142=1;
}
switch (alt142) {
case 1 :
// Ham4HMLGen.g:1915:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_movingrepetition14194);
sz=this.size();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1916:9: (sc= sizechange (idsz= size )? )?
var alt144=2;
var LA144_0 = this.input.LA(1);
if ( ((LA144_0>=HamIncreasing && LA144_0<=HamDecreasing)) ) {
alt144=1;
}
switch (alt144) {
case 1 :
// Ham4HMLGen.g:1917:13: sc= sizechange (idsz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_sizechange_in_movingrepetition14230);
sc=this.sizechange();
this.state._fsp--;
// Ham4HMLGen.g:1918:13: (idsz= size )?
var alt143=2;
var LA143_0 = this.input.LA(1);
if ( ((LA143_0>=HamSmallmod && LA143_0<=HamLargemod)) ) {
alt143=1;
}
switch (alt143) {
case 1 :
// Ham4HMLGen.g:1918:15: idsz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_movingrepetition14251);
idsz=this.size();
this.state._fsp--;
break;
}
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
hBuilder.checkedSetAttr(action, "repetition", r);
hBuilder.checkedSetAttr(action, "repetition_baseshift", ma);
hBuilder.checkedSetAttr(action, "baseshift_size", sz);
hBuilder.checkedSetAttr(action, "baseshift_incrdecr", sc);
hBuilder.checkedSetAttr(action, "baseshift_incrdecr_size", idsz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:1933:1: simplemovement returns [rsm = null] : ^( SIMPLEMVMT (mv= fullstraightmovement | mv= fullcircularmovement | mv= fullwristmovement | mv= fullmovementcross | mv= replacement | (tmpdig= digit )* HamFingerplay ) ( HamBrushing bl= location1 )? (dig= digit )? ) ;
// $ANTLR start "simplemovement"
simplemovement: function() {
var rsm =  null;
var mv = null;
var tmpdig = null;
var bl = null;
var dig = null;
var dl = null;
try {
// Ham4HMLGen.g:1939:5: ( ^( SIMPLEMVMT (mv= fullstraightmovement | mv= fullcircularmovement | mv= fullwristmovement | mv= fullmovementcross | mv= replacement | (tmpdig= digit )* HamFingerplay ) ( HamBrushing bl= location1 )? (dig= digit )? ) )
// Ham4HMLGen.g:1940:5: ^( SIMPLEMVMT (mv= fullstraightmovement | mv= fullcircularmovement | mv= fullwristmovement | mv= fullmovementcross | mv= replacement | (tmpdig= digit )* HamFingerplay ) ( HamBrushing bl= location1 )? (dig= digit )? )
this.match(this.input,SIMPLEMVMT,Ham4HMLGen.FOLLOW_SIMPLEMVMT_in_simplemovement14313); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:1941:9: (mv= fullstraightmovement | mv= fullcircularmovement | mv= fullwristmovement | mv= fullmovementcross | mv= replacement | (tmpdig= digit )* HamFingerplay )
var alt146=6;
switch ( this.input.LA(1) ) {
case STRGHTMVMT:
alt146=1;
break;
case CRCLRMVMT:
alt146=2;
break;
case HamNodding:
case HamSwinging:
case HamTwisting:
case HamStircw:
case HamStirccw:
alt146=3;
break;
case HamMovecross:
case HamMovex:
alt146=4;
break;
case REPLACE:
alt146=5;
break;
case HamThumb:
case HamIndexfinger:
case HamMiddlefinger:
case HamRingfinger:
case HamPinky:
case HamFingerplay:
alt146=6;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 146, 0, this.input);
throw nvae;
}
switch (alt146) {
case 1 :
// Ham4HMLGen.g:1942:13: mv= fullstraightmovement
this.pushFollow(Ham4HMLGen.FOLLOW_fullstraightmovement_in_simplemovement14342);
mv=this.fullstraightmovement();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1944:13: mv= fullcircularmovement
this.pushFollow(Ham4HMLGen.FOLLOW_fullcircularmovement_in_simplemovement14371);
mv=this.fullcircularmovement();
this.state._fsp--;
break;
case 3 :
// Ham4HMLGen.g:1946:13: mv= fullwristmovement
this.pushFollow(Ham4HMLGen.FOLLOW_fullwristmovement_in_simplemovement14400);
mv=this.fullwristmovement();
this.state._fsp--;
break;
case 4 :
// Ham4HMLGen.g:1948:13: mv= fullmovementcross
this.pushFollow(Ham4HMLGen.FOLLOW_fullmovementcross_in_simplemovement14429);
mv=this.fullmovementcross();
this.state._fsp--;
break;
case 5 :
// Ham4HMLGen.g:1950:13: mv= replacement
this.pushFollow(Ham4HMLGen.FOLLOW_replacement_in_simplemovement14458);
mv=this.replacement();
this.state._fsp--;
break;
case 6 :
// Ham4HMLGen.g:1952:19: (tmpdig= digit )* HamFingerplay
// Ham4HMLGen.g:1952:19: (tmpdig= digit )*
loop145:
do {
var alt145=2;
var LA145_0 = this.input.LA(1);
if ( ((LA145_0>=HamThumb && LA145_0<=HamPinky)) ) {
alt145=1;
}
switch (alt145) {
case 1 :
// Ham4HMLGen.g:1953:23: tmpdig= digit
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_simplemovement14516);
tmpdig=this.digit();
this.state._fsp--;
if (dl == null) { dl = []; }
dl.push(tmpdig);
break;
default :
break loop145;
}
} while (true);
this.match(this.input,HamFingerplay,Ham4HMLGen.FOLLOW_HamFingerplay_in_simplemovement14581); 
mv = hBuilder.newHMLElement("hamfingerplay"); 
break;
}
// Ham4HMLGen.g:1962:9: ( HamBrushing bl= location1 )?
var alt147=2;
var LA147_0 = this.input.LA(1);
if ( (LA147_0==HamBrushing) ) {
alt147=1;
}
switch (alt147) {
case 1 :
// Ham4HMLGen.g:1963:19: HamBrushing bl= location1
this.match(this.input,HamBrushing,Ham4HMLGen.FOLLOW_HamBrushing_in_simplemovement14641); 
this.pushFollow(Ham4HMLGen.FOLLOW_location1_in_simplemovement14660);
bl=this.location1();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1966:9: (dig= digit )?
var alt148=2;
var LA148_0 = this.input.LA(1);
if ( ((LA148_0>=HamThumb && LA148_0<=HamPinky)) ) {
alt148=1;
}
switch (alt148) {
case 1 :
// Ham4HMLGen.g:1966:13: dig= digit
this.pushFollow(Ham4HMLGen.FOLLOW_digit_in_simplemovement14689);
dig=this.digit();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsm = hBuilder.newHMLElement("simplemovement");
if (dl != null) {
for (var i = 0; i < dl.length; i++) { mv.appendChild(dl[i]); }
}
rsm.appendChild(mv);
hBuilder.checkedAppendChild(rsm, bl);
if (dig != null) {
var dstr = dig.getAttribute("fingerid");
var ipos = "ham_digit_".length();
var locstr = "loc" + dstr.substring(ipos);
hBuilder.checkedSetAttr(rsm, "def_locname", locstr);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsm;
},
// Ham4HMLGen.g:1984:1: fullstraightmovement returns [Element rfsm = null] : (fsm= straightmovement (sz= size )? ( arckind[rfsm] | zigzag[rfsm] )? ) ;
// $ANTLR start "fullstraightmovement"
fullstraightmovement: function() {
var rfsm =  null;
var fsm = null;
var sz = null;
try {
// Ham4HMLGen.g:1988:5: ( (fsm= straightmovement (sz= size )? ( arckind[rfsm] | zigzag[rfsm] )? ) )
// Ham4HMLGen.g:1989:5: (fsm= straightmovement (sz= size )? ( arckind[rfsm] | zigzag[rfsm] )? )
// Ham4HMLGen.g:1989:5: (fsm= straightmovement (sz= size )? ( arckind[rfsm] | zigzag[rfsm] )? )
// Ham4HMLGen.g:1990:9: fsm= straightmovement (sz= size )? ( arckind[rfsm] | zigzag[rfsm] )?
this.pushFollow(Ham4HMLGen.FOLLOW_straightmovement_in_fullstraightmovement14752);
fsm=this.straightmovement();
this.state._fsp--;
rfsm = fsm; 
// Ham4HMLGen.g:1991:9: (sz= size )?
var alt149=2;
var LA149_0 = this.input.LA(1);
if ( ((LA149_0>=HamSmallmod && LA149_0<=HamLargemod)) ) {
alt149=1;
}
switch (alt149) {
case 1 :
// Ham4HMLGen.g:1991:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_fullstraightmovement14777);
sz=this.size();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:1992:9: ( arckind[rfsm] | zigzag[rfsm] )?
var alt150=3;
var LA150_0 = this.input.LA(1);
if ( ((LA150_0>=HamArcl && LA150_0<=HamArcd)) ) {
alt150=1;
}
else if ( ((LA150_0>=HamWavy && LA150_0<=HamZigzag)) ) {
alt150=2;
}
switch (alt150) {
case 1 :
// Ham4HMLGen.g:1993:19: arckind[rfsm]
this.pushFollow(Ham4HMLGen.FOLLOW_arckind_in_fullstraightmovement14810);
this.arckind(rfsm);
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:1995:19: zigzag[rfsm]
this.pushFollow(Ham4HMLGen.FOLLOW_zigzag_in_fullstraightmovement14841);
this.zigzag(rfsm);
this.state._fsp--;
break;
}
hBuilder.checkedSetAttr(rfsm, "size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfsm;
},
// Ham4HMLGen.g:2003:1: straightmovement returns [Element rsm = null] : ^( STRGHTMVMT ma= movementarrow (mb= movementarrow )? ) ;
// $ANTLR start "straightmovement"
straightmovement: function() {
var rsm =  null;
var ma = null;
var mb = null;
try {
// Ham4HMLGen.g:2006:5: ( ^( STRGHTMVMT ma= movementarrow (mb= movementarrow )? ) )
// Ham4HMLGen.g:2007:5: ^( STRGHTMVMT ma= movementarrow (mb= movementarrow )? )
this.match(this.input,STRGHTMVMT,Ham4HMLGen.FOLLOW_STRGHTMVMT_in_straightmovement14896); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_movementarrow_in_straightmovement14915);
ma=this.movementarrow();
this.state._fsp--;
// Ham4HMLGen.g:2009:9: (mb= movementarrow )?
var alt151=2;
var LA151_0 = this.input.LA(1);
if ( ((LA151_0>=HamMoveu && LA151_0<=HamMoveuo)) ) {
alt151=1;
}
switch (alt151) {
case 1 :
// Ham4HMLGen.g:2009:11: mb= movementarrow
this.pushFollow(Ham4HMLGen.FOLLOW_movementarrow_in_straightmovement14934);
mb=this.movementarrow();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsm = hBuilder.newHMLElement("straightmovement");
hBuilder.checkedSetAttr(rsm, "movement", ma);
hBuilder.checkedSetAttr(rsm, "second_movement", mb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsm;
},
// Ham4HMLGen.g:2018:1: arckind[ake] : (aa= arc (ab= arc )? (sz= size )? ) ;
// $ANTLR start "arckind"
arckind: function(ake) {
var aa = null;
var ab = null;
var sz = null;
try {
// Ham4HMLGen.g:2022:5: ( (aa= arc (ab= arc )? (sz= size )? ) )
// Ham4HMLGen.g:2023:5: (aa= arc (ab= arc )? (sz= size )? )
// Ham4HMLGen.g:2023:5: (aa= arc (ab= arc )? (sz= size )? )
// Ham4HMLGen.g:2024:9: aa= arc (ab= arc )? (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_arc_in_arckind15001);
aa=this.arc();
this.state._fsp--;
// Ham4HMLGen.g:2025:9: (ab= arc )?
var alt152=2;
var LA152_0 = this.input.LA(1);
if ( ((LA152_0>=HamArcl && LA152_0<=HamArcd)) ) {
alt152=1;
}
switch (alt152) {
case 1 :
// Ham4HMLGen.g:2025:11: ab= arc
this.pushFollow(Ham4HMLGen.FOLLOW_arc_in_arckind15020);
ab=this.arc();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2026:9: (sz= size )?
var alt153=2;
var LA153_0 = this.input.LA(1);
if ( ((LA153_0>=HamSmallmod && LA153_0<=HamLargemod)) ) {
alt153=1;
}
switch (alt153) {
case 1 :
// Ham4HMLGen.g:2026:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_arckind15043);
sz=this.size();
this.state._fsp--;
break;
}
if (ab != null) {
var   aax = aa.charAt(aa.length()-1);
var   abx = ab.charAt(ab.length()-1);
if (aax=='u' || aax=='d') {
if (abx=='l' || abx=='r') {
aa = aa + abx;
}
}
}
ake.setAttribute("arc", aa);
hBuilder.checkedSetAttr(ake, "arc_size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:2043:1: zigzag[zze] : ( ( HamZigzag | HamWavy ) (sz= size )? (ed= ellipsedirection )? ( sizechangenonlinear[zze] )? ) ;
// $ANTLR start "zigzag"
zigzag: function(zze) {
var sz = null;
var ed = null;
var  style   = null;
try {
// Ham4HMLGen.g:2050:5: ( ( ( HamZigzag | HamWavy ) (sz= size )? (ed= ellipsedirection )? ( sizechangenonlinear[zze] )? ) )
// Ham4HMLGen.g:2051:5: ( ( HamZigzag | HamWavy ) (sz= size )? (ed= ellipsedirection )? ( sizechangenonlinear[zze] )? )
// Ham4HMLGen.g:2051:5: ( ( HamZigzag | HamWavy ) (sz= size )? (ed= ellipsedirection )? ( sizechangenonlinear[zze] )? )
// Ham4HMLGen.g:2052:9: ( HamZigzag | HamWavy ) (sz= size )? (ed= ellipsedirection )? ( sizechangenonlinear[zze] )?
// Ham4HMLGen.g:2052:9: ( HamZigzag | HamWavy )
var alt154=2;
var LA154_0 = this.input.LA(1);
if ( (LA154_0==HamZigzag) ) {
alt154=1;
}
else if ( (LA154_0==HamWavy) ) {
alt154=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 154, 0, this.input);
throw nvae;
}
switch (alt154) {
case 1 :
// Ham4HMLGen.g:2053:19: HamZigzag
this.match(this.input,HamZigzag,Ham4HMLGen.FOLLOW_HamZigzag_in_zigzag15126); 
style = "ham_zigzag"; 
break;
case 2 :
// Ham4HMLGen.g:2055:19: HamWavy
this.match(this.input,HamWavy,Ham4HMLGen.FOLLOW_HamWavy_in_zigzag15162); 
style = "ham_wavy"; 
break;
}
// Ham4HMLGen.g:2057:9: (sz= size )?
var alt155=2;
var LA155_0 = this.input.LA(1);
if ( ((LA155_0>=HamSmallmod && LA155_0<=HamLargemod)) ) {
alt155=1;
}
switch (alt155) {
case 1 :
// Ham4HMLGen.g:2057:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_zigzag15199);
sz=this.size();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2058:9: (ed= ellipsedirection )?
var alt156=2;
var LA156_0 = this.input.LA(1);
if ( ((LA156_0>=HamEllipseh && LA156_0<=HamEllipseul)) ) {
alt156=1;
}
switch (alt156) {
case 1 :
// Ham4HMLGen.g:2058:11: ed= ellipsedirection
this.pushFollow(Ham4HMLGen.FOLLOW_ellipsedirection_in_zigzag15221);
ed=this.ellipsedirection();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2059:9: ( sizechangenonlinear[zze] )?
var alt157=2;
var LA157_0 = this.input.LA(1);
if ( ((LA157_0>=HamIncreasing && LA157_0<=HamDecreasing)) ) {
alt157=1;
}
switch (alt157) {
case 1 :
// Ham4HMLGen.g:2059:19: sizechangenonlinear[zze]
this.pushFollow(Ham4HMLGen.FOLLOW_sizechangenonlinear_in_zigzag15244);
this.sizechangenonlinear(zze);
this.state._fsp--;
break;
}
hBuilder.checkedSetAttr(zze, "zigzagstyle", style);
hBuilder.checkedSetAttr(zze, "zigzag_size", sz);
hBuilder.checkedSetAttr(zze, "ellipsedirection", ed);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:2068:1: sizechangenonlinear[sce] : (sc= sizechange (sz= size )? ) ;
// $ANTLR start "sizechangenonlinear"
sizechangenonlinear: function(sce) {
var sc = null;
var sz = null;
try {
// Ham4HMLGen.g:2072:5: ( (sc= sizechange (sz= size )? ) )
// Ham4HMLGen.g:2073:5: (sc= sizechange (sz= size )? )
// Ham4HMLGen.g:2073:5: (sc= sizechange (sz= size )? )
// Ham4HMLGen.g:2074:9: sc= sizechange (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_sizechange_in_sizechangenonlinear15308);
sc=this.sizechange();
this.state._fsp--;
// Ham4HMLGen.g:2075:9: (sz= size )?
var alt158=2;
var LA158_0 = this.input.LA(1);
if ( ((LA158_0>=HamSmallmod && LA158_0<=HamLargemod)) ) {
alt158=1;
}
switch (alt158) {
case 1 :
// Ham4HMLGen.g:2075:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_sizechangenonlinear15327);
sz=this.size();
this.state._fsp--;
break;
}
hBuilder.checkedSetAttr(sce, "incrdecr", sc);
hBuilder.checkedSetAttr(sce, "incrdecr_size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:2083:1: fullcircularmovement returns [Element rfcm = null] : (fcm= circularmovement (sz= size )? ( revolutions[rfcm] )? (el= ellipse )? ( sizechangenonlinear[rfcm] )? ) ;
// $ANTLR start "fullcircularmovement"
fullcircularmovement: function() {
var rfcm =  null;
var fcm = null;
var sz = null;
var el = null;
try {
// Ham4HMLGen.g:2087:5: ( (fcm= circularmovement (sz= size )? ( revolutions[rfcm] )? (el= ellipse )? ( sizechangenonlinear[rfcm] )? ) )
// Ham4HMLGen.g:2088:5: (fcm= circularmovement (sz= size )? ( revolutions[rfcm] )? (el= ellipse )? ( sizechangenonlinear[rfcm] )? )
// Ham4HMLGen.g:2088:5: (fcm= circularmovement (sz= size )? ( revolutions[rfcm] )? (el= ellipse )? ( sizechangenonlinear[rfcm] )? )
// Ham4HMLGen.g:2089:9: fcm= circularmovement (sz= size )? ( revolutions[rfcm] )? (el= ellipse )? ( sizechangenonlinear[rfcm] )?
this.pushFollow(Ham4HMLGen.FOLLOW_circularmovement_in_fullcircularmovement15390);
fcm=this.circularmovement();
this.state._fsp--;
rfcm = fcm; 
// Ham4HMLGen.g:2090:9: (sz= size )?
var alt159=2;
var LA159_0 = this.input.LA(1);
if ( ((LA159_0>=HamSmallmod && LA159_0<=HamLargemod)) ) {
alt159=1;
}
switch (alt159) {
case 1 :
// Ham4HMLGen.g:2090:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_fullcircularmovement15415);
sz=this.size();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2091:9: ( revolutions[rfcm] )?
var alt160=2;
var LA160_0 = this.input.LA(1);
if ( ((LA160_0>=HamClocku && LA160_0<=HamClockfull)) ) {
alt160=1;
}
switch (alt160) {
case 1 :
// Ham4HMLGen.g:2091:19: revolutions[rfcm]
this.pushFollow(Ham4HMLGen.FOLLOW_revolutions_in_fullcircularmovement15438);
this.revolutions(rfcm);
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2092:9: (el= ellipse )?
var alt161=2;
var LA161_0 = this.input.LA(1);
if ( ((LA161_0>=HamEllipseh && LA161_0<=HamEllipseul)) ) {
alt161=1;
}
switch (alt161) {
case 1 :
// Ham4HMLGen.g:2092:11: el= ellipse
this.pushFollow(Ham4HMLGen.FOLLOW_ellipse_in_fullcircularmovement15461);
el=this.ellipse();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2093:9: ( sizechangenonlinear[rfcm] )?
var alt162=2;
var LA162_0 = this.input.LA(1);
if ( ((LA162_0>=HamIncreasing && LA162_0<=HamDecreasing)) ) {
alt162=1;
}
switch (alt162) {
case 1 :
// Ham4HMLGen.g:2093:19: sizechangenonlinear[rfcm]
this.pushFollow(Ham4HMLGen.FOLLOW_sizechangenonlinear_in_fullcircularmovement15484);
this.sizechangenonlinear(rfcm);
this.state._fsp--;
break;
}
hBuilder.checkedAppendChild(rfcm, el);
hBuilder.checkedSetAttr(rfcm, "size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfcm;
},
// Ham4HMLGen.g:2101:1: circularmovement returns [Element rcm = null] : ^( CRCLRMVMT mca= movementcircle (mcb= movementcircle )? ) ;
// $ANTLR start "circularmovement"
circularmovement: function() {
var rcm =  null;
var mca = null;
var mcb = null;
try {
// Ham4HMLGen.g:2104:5: ( ^( CRCLRMVMT mca= movementcircle (mcb= movementcircle )? ) )
// Ham4HMLGen.g:2105:5: ^( CRCLRMVMT mca= movementcircle (mcb= movementcircle )? )
this.match(this.input,CRCLRMVMT,Ham4HMLGen.FOLLOW_CRCLRMVMT_in_circularmovement15531); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_movementcircle_in_circularmovement15549);
mca=this.movementcircle();
this.state._fsp--;
// Ham4HMLGen.g:2107:9: (mcb= movementcircle )?
var alt163=2;
var LA163_0 = this.input.LA(1);
if ( ((LA163_0>=HamCircleo && LA163_0<=HamCircler)||(LA163_0>=HamCircleul && LA163_0<=HamCircleuo)) ) {
alt163=1;
}
switch (alt163) {
case 1 :
// Ham4HMLGen.g:2107:11: mcb= movementcircle
this.pushFollow(Ham4HMLGen.FOLLOW_movementcircle_in_circularmovement15567);
mcb=this.movementcircle();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rcm = hBuilder.newHMLElement("circularmovement");
hBuilder.checkedSetAttr(rcm, "movement", mca);
hBuilder.checkedSetAttr(rcm, "second_movement", mcb);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rcm;
},
// Ham4HMLGen.g:2116:1: ellipse returns [Element rell = null] : (ed= ellipsedirection (sz= size )? ) ;
// $ANTLR start "ellipse"
ellipse: function() {
var rell =  null;
var ed = null;
var sz = null;
try {
// Ham4HMLGen.g:2120:5: ( (ed= ellipsedirection (sz= size )? ) )
// Ham4HMLGen.g:2121:5: (ed= ellipsedirection (sz= size )? )
// Ham4HMLGen.g:2121:5: (ed= ellipsedirection (sz= size )? )
// Ham4HMLGen.g:2122:9: ed= ellipsedirection (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_ellipsedirection_in_ellipse15636);
ed=this.ellipsedirection();
this.state._fsp--;
// Ham4HMLGen.g:2123:9: (sz= size )?
var alt164=2;
var LA164_0 = this.input.LA(1);
if ( ((LA164_0>=HamSmallmod && LA164_0<=HamLargemod)) ) {
alt164=1;
}
switch (alt164) {
case 1 :
// Ham4HMLGen.g:2123:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_ellipse15655);
sz=this.size();
this.state._fsp--;
break;
}
rell = hBuilder.newHMLElement("ellipse");
hBuilder.checkedSetAttr(rell, "ellipsedirection", ed);
hBuilder.checkedSetAttr(rell, "size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rell;
},
// Ham4HMLGen.g:2132:1: revolutions[reve] : ( (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? ) (ce= clock )? ) ;
// $ANTLR start "revolutions"
revolutions: function(reve) {
var cs = null;
var ce = null;
var cfa = false;
var cfb = false;
try {
// Ham4HMLGen.g:2140:5: ( ( (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? ) (ce= clock )? ) )
// Ham4HMLGen.g:2141:5: ( (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? ) (ce= clock )? )
// Ham4HMLGen.g:2141:5: ( (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? ) (ce= clock )? )
// Ham4HMLGen.g:2142:9: (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? ) (ce= clock )?
// Ham4HMLGen.g:2142:9: (cs= clock ( HamClockfull ( HamClockfull )? )? | HamClockfull ( HamClockfull )? )
var alt168=2;
var LA168_0 = this.input.LA(1);
if ( ((LA168_0>=HamClocku && LA168_0<=HamClockur)) ) {
alt168=1;
}
else if ( (LA168_0==HamClockfull) ) {
alt168=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 168, 0, this.input);
throw nvae;
}
switch (alt168) {
case 1 :
// Ham4HMLGen.g:2143:13: cs= clock ( HamClockfull ( HamClockfull )? )?
this.pushFollow(Ham4HMLGen.FOLLOW_clock_in_revolutions15736);
cs=this.clock();
this.state._fsp--;
// Ham4HMLGen.g:2144:13: ( HamClockfull ( HamClockfull )? )?
var alt166=2;
var LA166_0 = this.input.LA(1);
if ( (LA166_0==HamClockfull) ) {
alt166=1;
}
switch (alt166) {
case 1 :
// Ham4HMLGen.g:2145:17: HamClockfull ( HamClockfull )?
this.match(this.input,HamClockfull,Ham4HMLGen.FOLLOW_HamClockfull_in_revolutions15768); 
cfa = true; 
// Ham4HMLGen.g:2146:17: ( HamClockfull )?
var alt165=2;
var LA165_0 = this.input.LA(1);
if ( (LA165_0==HamClockfull) ) {
alt165=1;
}
switch (alt165) {
case 1 :
// Ham4HMLGen.g:2146:19: HamClockfull
this.match(this.input,HamClockfull,Ham4HMLGen.FOLLOW_HamClockfull_in_revolutions15797); 
cfb = true; 
break;
}
break;
}
break;
case 2 :
// Ham4HMLGen.g:2149:13: HamClockfull ( HamClockfull )?
this.match(this.input,HamClockfull,Ham4HMLGen.FOLLOW_HamClockfull_in_revolutions15846); 
cfa = true; 
// Ham4HMLGen.g:2150:13: ( HamClockfull )?
var alt167=2;
var LA167_0 = this.input.LA(1);
if ( (LA167_0==HamClockfull) ) {
alt167=1;
}
switch (alt167) {
case 1 :
// Ham4HMLGen.g:2150:15: HamClockfull
this.match(this.input,HamClockfull,Ham4HMLGen.FOLLOW_HamClockfull_in_revolutions15875); 
cfb = true; 
break;
}
break;
}
// Ham4HMLGen.g:2152:9: (ce= clock )?
var alt169=2;
var LA169_0 = this.input.LA(1);
if ( ((LA169_0>=HamClocku && LA169_0<=HamClockur)) ) {
alt169=1;
}
switch (alt169) {
case 1 :
// Ham4HMLGen.g:2152:13: ce= clock
this.pushFollow(Ham4HMLGen.FOLLOW_clock_in_revolutions15922);
ce=this.clock();
this.state._fsp--;
break;
}
hBuilder.checkedSetAttr(reve, "start", cs);
if (cfa) {
hBuilder.checkedSetAttr(reve, "clockfull", "true");
if (cfb) {
hBuilder.checkedSetAttr(reve, "second_clockfull", "true");
}
}
hBuilder.checkedSetAttr(reve, "end", ce);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ;
},
// Ham4HMLGen.g:2166:1: fullwristmovement returns [Element rfwm = null] : (wm= wristmovement (sz= size )? ) ;
// $ANTLR start "fullwristmovement"
fullwristmovement: function() {
var rfwm =  null;
var wm = null;
var sz = null;
try {
// Ham4HMLGen.g:2169:5: ( (wm= wristmovement (sz= size )? ) )
// Ham4HMLGen.g:2170:5: (wm= wristmovement (sz= size )? )
// Ham4HMLGen.g:2170:5: (wm= wristmovement (sz= size )? )
// Ham4HMLGen.g:2171:9: wm= wristmovement (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_wristmovement_in_fullwristmovement15985);
wm=this.wristmovement();
this.state._fsp--;
// Ham4HMLGen.g:2172:9: (sz= size )?
var alt170=2;
var LA170_0 = this.input.LA(1);
if ( ((LA170_0>=HamSmallmod && LA170_0<=HamLargemod)) ) {
alt170=1;
}
switch (alt170) {
case 1 :
// Ham4HMLGen.g:2172:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_fullwristmovement16004);
sz=this.size();
this.state._fsp--;
break;
}
rfwm = hBuilder.newHMLElement("wristmovement");
hBuilder.checkedSetAttr(rfwm, "movement", wm);
hBuilder.checkedSetAttr(rfwm, "size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfwm;
},
// Ham4HMLGen.g:2181:1: fullmovementcross returns [Element rfmc = null] : (smc= movementcross (sz= size )? ) ;
// $ANTLR start "fullmovementcross"
fullmovementcross: function() {
var rfmc =  null;
var smc = null;
var sz = null;
try {
// Ham4HMLGen.g:2185:5: ( (smc= movementcross (sz= size )? ) )
// Ham4HMLGen.g:2186:5: (smc= movementcross (sz= size )? )
// Ham4HMLGen.g:2186:5: (smc= movementcross (sz= size )? )
// Ham4HMLGen.g:2187:9: smc= movementcross (sz= size )?
this.pushFollow(Ham4HMLGen.FOLLOW_movementcross_in_fullmovementcross16067);
smc=this.movementcross();
this.state._fsp--;
// Ham4HMLGen.g:2188:9: (sz= size )?
var alt171=2;
var LA171_0 = this.input.LA(1);
if ( ((LA171_0>=HamSmallmod && LA171_0<=HamLargemod)) ) {
alt171=1;
}
switch (alt171) {
case 1 :
// Ham4HMLGen.g:2188:11: sz= size
this.pushFollow(Ham4HMLGen.FOLLOW_size_in_fullmovementcross16086);
sz=this.size();
this.state._fsp--;
break;
}
rfmc = hBuilder.newHMLElement("movementcross");
hBuilder.checkedSetAttr(rfmc, "movementcross", smc);
hBuilder.checkedSetAttr(rfmc, "size", sz);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rfmc;
},
// Ham4HMLGen.g:2198:1: replacement returns [Element rr = null] : ^( REPLACE (sc= sizechange )? (hs= handshape1 )? (srt= splitreplacetail | efd= extfidir1 (po= palmor1 )? | po= palmor1 )? ) ;
// $ANTLR start "replacement"
replacement: function() {
var rr =  null;
var sc = null;
var hs = null;
var srt = null;
var efd = null;
var po = null;
try {
// Ham4HMLGen.g:2201:5: ( ^( REPLACE (sc= sizechange )? (hs= handshape1 )? (srt= splitreplacetail | efd= extfidir1 (po= palmor1 )? | po= palmor1 )? ) )
// Ham4HMLGen.g:2202:5: ^( REPLACE (sc= sizechange )? (hs= handshape1 )? (srt= splitreplacetail | efd= extfidir1 (po= palmor1 )? | po= palmor1 )? )
this.match(this.input,REPLACE,Ham4HMLGen.FOLLOW_REPLACE_in_replacement16138); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:2203:9: (sc= sizechange )?
var alt172=2;
var LA172_0 = this.input.LA(1);
if ( ((LA172_0>=HamIncreasing && LA172_0<=HamDecreasing)) ) {
alt172=1;
}
switch (alt172) {
case 1 :
// Ham4HMLGen.g:2203:11: sc= sizechange
this.pushFollow(Ham4HMLGen.FOLLOW_sizechange_in_replacement16157);
sc=this.sizechange();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2204:9: (hs= handshape1 )?
var alt173=2;
var LA173_0 = this.input.LA(1);
if ( (LA173_0==HSHAPE1) ) {
alt173=1;
}
switch (alt173) {
case 1 :
// Ham4HMLGen.g:2204:11: hs= handshape1
this.pushFollow(Ham4HMLGen.FOLLOW_handshape1_in_replacement16179);
hs=this.handshape1();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2205:9: (srt= splitreplacetail | efd= extfidir1 (po= palmor1 )? | po= palmor1 )?
var alt175=4;
switch ( this.input.LA(1) ) {
case SPLITREPLACETL:
alt175=1;
break;
case EXTFIDIR1:
alt175=2;
break;
case PALMOR1:
alt175=3;
break;
}
switch (alt175) {
case 1 :
// Ham4HMLGen.g:2206:13: srt= splitreplacetail
this.pushFollow(Ham4HMLGen.FOLLOW_splitreplacetail_in_replacement16214);
srt=this.splitreplacetail();
this.state._fsp--;
break;
case 2 :
// Ham4HMLGen.g:2208:13: efd= extfidir1 (po= palmor1 )?
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_replacement16246);
efd=this.extfidir1();
this.state._fsp--;
// Ham4HMLGen.g:2209:13: (po= palmor1 )?
var alt174=2;
var LA174_0 = this.input.LA(1);
if ( (LA174_0==PALMOR1) ) {
alt174=1;
}
switch (alt174) {
case 1 :
// Ham4HMLGen.g:2209:15: po= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_replacement16269);
po=this.palmor1();
this.state._fsp--;
break;
}
break;
case 3 :
// Ham4HMLGen.g:2211:13: po= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_replacement16305);
po=this.palmor1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
rr = hBuilder.newHMLElement("replacement");
hBuilder.checkedSetAttr(rr, "replace_incrdecr", sc);
hBuilder.checkedAppendChild(rr, hs);
if (srt == null) {
hBuilder.checkedAppendChild(rr, efd);
hBuilder.checkedAppendChild(rr, po);
}
else {
rr.appendChild(srt);
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rr;
},
// Ham4HMLGen.g:2228:1: splitreplacetail returns [Element rsrt = null] : ^( SPLITREPLACETL drt= replacetail1 (srt= replacetail1 )? ) ;
// $ANTLR start "splitreplacetail"
splitreplacetail: function() {
var rsrt =  null;
var drt = null;
var srt = null;
try {
// Ham4HMLGen.g:2231:5: ( ^( SPLITREPLACETL drt= replacetail1 (srt= replacetail1 )? ) )
// Ham4HMLGen.g:2232:5: ^( SPLITREPLACETL drt= replacetail1 (srt= replacetail1 )? )
this.match(this.input,SPLITREPLACETL,Ham4HMLGen.FOLLOW_SPLITREPLACETL_in_splitreplacetail16359); 
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
this.pushFollow(Ham4HMLGen.FOLLOW_replacetail1_in_splitreplacetail16377);
drt=this.replacetail1();
this.state._fsp--;
// Ham4HMLGen.g:2234:9: (srt= replacetail1 )?
var alt176=2;
var LA176_0 = this.input.LA(1);
if ( (LA176_0==REPLACETAIL1) ) {
alt176=1;
}
switch (alt176) {
case 1 :
// Ham4HMLGen.g:2234:11: srt= replacetail1
this.pushFollow(Ham4HMLGen.FOLLOW_replacetail1_in_splitreplacetail16395);
srt=this.replacetail1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
rsrt = hBuilder.newHMLElement("splitreplacetail");
hBuilder.checkedAppendChild(rsrt, drt);
hBuilder.checkedAppendChild(rsrt, srt);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsrt;
},
// Ham4HMLGen.g:2243:1: replacetail1 returns [Element rrt = null] : ^( REPLACETAIL1 ( (efd= extfidir1 )? (po= palmor1 )? ) ) ;
// $ANTLR start "replacetail1"
replacetail1: function() {
var rrt =  null;
var efd = null;
var po = null;
try {
// Ham4HMLGen.g:2246:5: ( ^( REPLACETAIL1 ( (efd= extfidir1 )? (po= palmor1 )? ) ) )
// Ham4HMLGen.g:2247:5: ^( REPLACETAIL1 ( (efd= extfidir1 )? (po= palmor1 )? ) )
this.match(this.input,REPLACETAIL1,Ham4HMLGen.FOLLOW_REPLACETAIL1_in_replacetail116445); 
if ( this.input.LA(1)==org.antlr.runtime.Token.DOWN ) {
this.match(this.input, org.antlr.runtime.Token.DOWN, null); 
// Ham4HMLGen.g:2248:9: ( (efd= extfidir1 )? (po= palmor1 )? )
// Ham4HMLGen.g:2249:13: (efd= extfidir1 )? (po= palmor1 )?
// Ham4HMLGen.g:2249:13: (efd= extfidir1 )?
var alt177=2;
var LA177_0 = this.input.LA(1);
if ( (LA177_0==EXTFIDIR1) ) {
alt177=1;
}
switch (alt177) {
case 1 :
// Ham4HMLGen.g:2249:15: efd= extfidir1
this.pushFollow(Ham4HMLGen.FOLLOW_extfidir1_in_replacetail116477);
efd=this.extfidir1();
this.state._fsp--;
break;
}
// Ham4HMLGen.g:2250:13: (po= palmor1 )?
var alt178=2;
var LA178_0 = this.input.LA(1);
if ( (LA178_0==PALMOR1) ) {
alt178=1;
}
switch (alt178) {
case 1 :
// Ham4HMLGen.g:2250:15: po= palmor1
this.pushFollow(Ham4HMLGen.FOLLOW_palmor1_in_replacetail116503);
po=this.palmor1();
this.state._fsp--;
break;
}
this.match(this.input, org.antlr.runtime.Token.UP, null); 
}
rrt = hBuilder.newHMLElement("replacetail1");
hBuilder.checkedAppendChild(rrt, efd);
hBuilder.checkedAppendChild(rrt, po);
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rrt;
},
// Ham4HMLGen.g:2263:1: repetition returns [String rr = null] : ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse ) ;
// $ANTLR start "repetition"
repetition: function() {
var rr =  null;
try {
// Ham4HMLGen.g:2265:5: ( ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse ) )
// Ham4HMLGen.g:2266:5: ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse )
// Ham4HMLGen.g:2266:5: ( HamRepeatfromstart | HamRepeatfromstartseveral | HamRepeatcontinue | HamRepeatcontinueseveral | HamRepeatreverse )
var alt179=5;
switch ( this.input.LA(1) ) {
case HamRepeatfromstart:
alt179=1;
break;
case HamRepeatfromstartseveral:
alt179=2;
break;
case HamRepeatcontinue:
alt179=3;
break;
case HamRepeatcontinueseveral:
alt179=4;
break;
case HamRepeatreverse:
alt179=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 179, 0, this.input);
throw nvae;
}
switch (alt179) {
case 1 :
// Ham4HMLGen.g:2266:9: HamRepeatfromstart
this.match(this.input,HamRepeatfromstart,Ham4HMLGen.FOLLOW_HamRepeatfromstart_in_repetition16567); 
rr = "ham_repeat_fromstart"; 
break;
case 2 :
// Ham4HMLGen.g:2267:9: HamRepeatfromstartseveral
this.match(this.input,HamRepeatfromstartseveral,Ham4HMLGen.FOLLOW_HamRepeatfromstartseveral_in_repetition16580); 
rr = "ham_repeat_fromstartseveral"; 
break;
case 3 :
// Ham4HMLGen.g:2269:9: HamRepeatcontinue
this.match(this.input,HamRepeatcontinue,Ham4HMLGen.FOLLOW_HamRepeatcontinue_in_repetition16620); 
rr = "ham_repeat_continue"; 
break;
case 4 :
// Ham4HMLGen.g:2270:9: HamRepeatcontinueseveral
this.match(this.input,HamRepeatcontinueseveral,Ham4HMLGen.FOLLOW_HamRepeatcontinueseveral_in_repetition16634); 
rr = "ham_repeat_continueseveral"; 
break;
case 5 :
// Ham4HMLGen.g:2272:9: HamRepeatreverse
this.match(this.input,HamRepeatreverse,Ham4HMLGen.FOLLOW_HamRepeatreverse_in_repetition16674); 
rr = "ham_repeat_reverse"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rr;
},
// Ham4HMLGen.g:2276:1: movementarrow returns [String rma = null] : ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo ) ;
// $ANTLR start "movementarrow"
movementarrow: function() {
var rma =  null;
try {
// Ham4HMLGen.g:2278:5: ( ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo ) )
// Ham4HMLGen.g:2279:5: ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo )
// Ham4HMLGen.g:2279:5: ( HamMoveu | HamMoveur | HamMover | HamMovedr | HamMoved | HamMovedl | HamMovel | HamMoveul | HamMoveol | HamMoveo | HamMoveor | HamMoveil | HamMovei | HamMoveir | HamMoveui | HamMovedi | HamMovedo | HamMoveuo )
var alt180=18;
switch ( this.input.LA(1) ) {
case HamMoveu:
alt180=1;
break;
case HamMoveur:
alt180=2;
break;
case HamMover:
alt180=3;
break;
case HamMovedr:
alt180=4;
break;
case HamMoved:
alt180=5;
break;
case HamMovedl:
alt180=6;
break;
case HamMovel:
alt180=7;
break;
case HamMoveul:
alt180=8;
break;
case HamMoveol:
alt180=9;
break;
case HamMoveo:
alt180=10;
break;
case HamMoveor:
alt180=11;
break;
case HamMoveil:
alt180=12;
break;
case HamMovei:
alt180=13;
break;
case HamMoveir:
alt180=14;
break;
case HamMoveui:
alt180=15;
break;
case HamMovedi:
alt180=16;
break;
case HamMovedo:
alt180=17;
break;
case HamMoveuo:
alt180=18;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 180, 0, this.input);
throw nvae;
}
switch (alt180) {
case 1 :
// Ham4HMLGen.g:2279:9: HamMoveu
this.match(this.input,HamMoveu,Ham4HMLGen.FOLLOW_HamMoveu_in_movementarrow16718); 
rma = "u"; 
break;
case 2 :
// Ham4HMLGen.g:2280:9: HamMoveur
this.match(this.input,HamMoveur,Ham4HMLGen.FOLLOW_HamMoveur_in_movementarrow16741); 
rma = "ur"; 
break;
case 3 :
// Ham4HMLGen.g:2281:9: HamMover
this.match(this.input,HamMover,Ham4HMLGen.FOLLOW_HamMover_in_movementarrow16763); 
rma = "r"; 
break;
case 4 :
// Ham4HMLGen.g:2282:9: HamMovedr
this.match(this.input,HamMovedr,Ham4HMLGen.FOLLOW_HamMovedr_in_movementarrow16786); 
rma = "dr"; 
break;
case 5 :
// Ham4HMLGen.g:2283:9: HamMoved
this.match(this.input,HamMoved,Ham4HMLGen.FOLLOW_HamMoved_in_movementarrow16808); 
rma = "d"; 
break;
case 6 :
// Ham4HMLGen.g:2284:9: HamMovedl
this.match(this.input,HamMovedl,Ham4HMLGen.FOLLOW_HamMovedl_in_movementarrow16831); 
rma = "dl"; 
break;
case 7 :
// Ham4HMLGen.g:2285:9: HamMovel
this.match(this.input,HamMovel,Ham4HMLGen.FOLLOW_HamMovel_in_movementarrow16853); 
rma = "l"; 
break;
case 8 :
// Ham4HMLGen.g:2286:9: HamMoveul
this.match(this.input,HamMoveul,Ham4HMLGen.FOLLOW_HamMoveul_in_movementarrow16876); 
rma = "ul"; 
break;
case 9 :
// Ham4HMLGen.g:2287:9: HamMoveol
this.match(this.input,HamMoveol,Ham4HMLGen.FOLLOW_HamMoveol_in_movementarrow16898); 
rma = "ol"; 
break;
case 10 :
// Ham4HMLGen.g:2288:9: HamMoveo
this.match(this.input,HamMoveo,Ham4HMLGen.FOLLOW_HamMoveo_in_movementarrow16920); 
rma = "o"; 
break;
case 11 :
// Ham4HMLGen.g:2289:9: HamMoveor
this.match(this.input,HamMoveor,Ham4HMLGen.FOLLOW_HamMoveor_in_movementarrow16943); 
rma = "or"; 
break;
case 12 :
// Ham4HMLGen.g:2290:9: HamMoveil
this.match(this.input,HamMoveil,Ham4HMLGen.FOLLOW_HamMoveil_in_movementarrow16965); 
rma = "il"; 
break;
case 13 :
// Ham4HMLGen.g:2291:9: HamMovei
this.match(this.input,HamMovei,Ham4HMLGen.FOLLOW_HamMovei_in_movementarrow16987); 
rma = "i"; 
break;
case 14 :
// Ham4HMLGen.g:2292:9: HamMoveir
this.match(this.input,HamMoveir,Ham4HMLGen.FOLLOW_HamMoveir_in_movementarrow17010); 
rma = "ir"; 
break;
case 15 :
// Ham4HMLGen.g:2293:9: HamMoveui
this.match(this.input,HamMoveui,Ham4HMLGen.FOLLOW_HamMoveui_in_movementarrow17032); 
rma = "ui"; 
break;
case 16 :
// Ham4HMLGen.g:2294:9: HamMovedi
this.match(this.input,HamMovedi,Ham4HMLGen.FOLLOW_HamMovedi_in_movementarrow17054); 
rma = "di"; 
break;
case 17 :
// Ham4HMLGen.g:2295:9: HamMovedo
this.match(this.input,HamMovedo,Ham4HMLGen.FOLLOW_HamMovedo_in_movementarrow17076); 
rma = "do"; 
break;
case 18 :
// Ham4HMLGen.g:2296:9: HamMoveuo
this.match(this.input,HamMoveuo,Ham4HMLGen.FOLLOW_HamMoveuo_in_movementarrow17098); 
rma = "uo"; 
break;
}
rma = "ham_move_" + rma;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rma;
},
// Ham4HMLGen.g:2303:1: movementcross returns [String rmc = null] : ( HamMovecross | HamMovex ) ;
// $ANTLR start "movementcross"
movementcross: function() {
var rmc =  null;
try {
// Ham4HMLGen.g:2305:5: ( ( HamMovecross | HamMovex ) )
// Ham4HMLGen.g:2306:5: ( HamMovecross | HamMovex )
// Ham4HMLGen.g:2306:5: ( HamMovecross | HamMovex )
var alt181=2;
var LA181_0 = this.input.LA(1);
if ( (LA181_0==HamMovecross) ) {
alt181=1;
}
else if ( (LA181_0==HamMovex) ) {
alt181=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 181, 0, this.input);
throw nvae;
}
switch (alt181) {
case 1 :
// Ham4HMLGen.g:2306:9: HamMovecross
this.match(this.input,HamMovecross,Ham4HMLGen.FOLLOW_HamMovecross_in_movementcross17155); 
rmc = "ham_move_cross"; 
break;
case 2 :
// Ham4HMLGen.g:2307:9: HamMovex
this.match(this.input,HamMovex,Ham4HMLGen.FOLLOW_HamMovex_in_movementcross17174); 
rmc = "ham_move_x"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rmc;
},
// Ham4HMLGen.g:2311:1: wristmovement returns [String rwm = null] : ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw ) ;
// $ANTLR start "wristmovement"
wristmovement: function() {
var rwm =  null;
try {
// Ham4HMLGen.g:2313:5: ( ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw ) )
// Ham4HMLGen.g:2314:5: ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw )
// Ham4HMLGen.g:2314:5: ( HamNodding | HamSwinging | HamTwisting | HamStircw | HamStirccw )
var alt182=5;
switch ( this.input.LA(1) ) {
case HamNodding:
alt182=1;
break;
case HamSwinging:
alt182=2;
break;
case HamTwisting:
alt182=3;
break;
case HamStircw:
alt182=4;
break;
case HamStirccw:
alt182=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 182, 0, this.input);
throw nvae;
}
switch (alt182) {
case 1 :
// Ham4HMLGen.g:2314:9: HamNodding
this.match(this.input,HamNodding,Ham4HMLGen.FOLLOW_HamNodding_in_wristmovement17226); 
rwm = "ham_wrist_nodding"; 
break;
case 2 :
// Ham4HMLGen.g:2315:9: HamSwinging
this.match(this.input,HamSwinging,Ham4HMLGen.FOLLOW_HamSwinging_in_wristmovement17247); 
rwm = "ham_wrist_swinging"; 
break;
case 3 :
// Ham4HMLGen.g:2316:9: HamTwisting
this.match(this.input,HamTwisting,Ham4HMLGen.FOLLOW_HamTwisting_in_wristmovement17267); 
rwm = "ham_wrist_twisting"; 
break;
case 4 :
// Ham4HMLGen.g:2317:9: HamStircw
this.match(this.input,HamStircw,Ham4HMLGen.FOLLOW_HamStircw_in_wristmovement17287); 
rwm = "ham_wrist_stircw"; 
break;
case 5 :
// Ham4HMLGen.g:2318:9: HamStirccw
this.match(this.input,HamStirccw,Ham4HMLGen.FOLLOW_HamStirccw_in_wristmovement17309); 
rwm = "ham_wrist_stirccw"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rwm;
},
// Ham4HMLGen.g:2322:1: movementcircle returns [String rmc = null] : ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo ) ;
// $ANTLR start "movementcircle"
movementcircle: function() {
var rmc =  null;
try {
// Ham4HMLGen.g:2326:5: ( ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo ) )
// Ham4HMLGen.g:2327:5: ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo )
// Ham4HMLGen.g:2327:5: ( HamCircleo | HamCirclei | HamCircled | HamCircleu | HamCirclel | HamCircler | HamCircleul | HamCircledr | HamCircleur | HamCircledl | HamCircleol | HamCircleir | HamCircleor | HamCircleil | HamCircleui | HamCircledo | HamCircledi | HamCircleuo )
var alt183=18;
switch ( this.input.LA(1) ) {
case HamCircleo:
alt183=1;
break;
case HamCirclei:
alt183=2;
break;
case HamCircled:
alt183=3;
break;
case HamCircleu:
alt183=4;
break;
case HamCirclel:
alt183=5;
break;
case HamCircler:
alt183=6;
break;
case HamCircleul:
alt183=7;
break;
case HamCircledr:
alt183=8;
break;
case HamCircleur:
alt183=9;
break;
case HamCircledl:
alt183=10;
break;
case HamCircleol:
alt183=11;
break;
case HamCircleir:
alt183=12;
break;
case HamCircleor:
alt183=13;
break;
case HamCircleil:
alt183=14;
break;
case HamCircleui:
alt183=15;
break;
case HamCircledo:
alt183=16;
break;
case HamCircledi:
alt183=17;
break;
case HamCircleuo:
alt183=18;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 183, 0, this.input);
throw nvae;
}
switch (alt183) {
case 1 :
// Ham4HMLGen.g:2327:9: HamCircleo
this.match(this.input,HamCircleo,Ham4HMLGen.FOLLOW_HamCircleo_in_movementcircle17358); 
rmc = "o"; 
break;
case 2 :
// Ham4HMLGen.g:2328:9: HamCirclei
this.match(this.input,HamCirclei,Ham4HMLGen.FOLLOW_HamCirclei_in_movementcircle17379); 
rmc = "i"; 
break;
case 3 :
// Ham4HMLGen.g:2329:9: HamCircled
this.match(this.input,HamCircled,Ham4HMLGen.FOLLOW_HamCircled_in_movementcircle17400); 
rmc = "d"; 
break;
case 4 :
// Ham4HMLGen.g:2330:9: HamCircleu
this.match(this.input,HamCircleu,Ham4HMLGen.FOLLOW_HamCircleu_in_movementcircle17421); 
rmc = "u"; 
break;
case 5 :
// Ham4HMLGen.g:2331:9: HamCirclel
this.match(this.input,HamCirclel,Ham4HMLGen.FOLLOW_HamCirclel_in_movementcircle17442); 
rmc = "l"; 
break;
case 6 :
// Ham4HMLGen.g:2332:9: HamCircler
this.match(this.input,HamCircler,Ham4HMLGen.FOLLOW_HamCircler_in_movementcircle17463); 
rmc = "r"; 
break;
case 7 :
// Ham4HMLGen.g:2333:9: HamCircleul
this.match(this.input,HamCircleul,Ham4HMLGen.FOLLOW_HamCircleul_in_movementcircle17484); 
rmc = "ul"; 
break;
case 8 :
// Ham4HMLGen.g:2334:9: HamCircledr
this.match(this.input,HamCircledr,Ham4HMLGen.FOLLOW_HamCircledr_in_movementcircle17504); 
rmc = "dr"; 
break;
case 9 :
// Ham4HMLGen.g:2335:9: HamCircleur
this.match(this.input,HamCircleur,Ham4HMLGen.FOLLOW_HamCircleur_in_movementcircle17524); 
rmc = "ur"; 
break;
case 10 :
// Ham4HMLGen.g:2336:9: HamCircledl
this.match(this.input,HamCircledl,Ham4HMLGen.FOLLOW_HamCircledl_in_movementcircle17544); 
rmc = "dl"; 
break;
case 11 :
// Ham4HMLGen.g:2337:9: HamCircleol
this.match(this.input,HamCircleol,Ham4HMLGen.FOLLOW_HamCircleol_in_movementcircle17564); 
rmc = "ol"; 
break;
case 12 :
// Ham4HMLGen.g:2338:9: HamCircleir
this.match(this.input,HamCircleir,Ham4HMLGen.FOLLOW_HamCircleir_in_movementcircle17584); 
rmc = "ir"; 
break;
case 13 :
// Ham4HMLGen.g:2339:9: HamCircleor
this.match(this.input,HamCircleor,Ham4HMLGen.FOLLOW_HamCircleor_in_movementcircle17604); 
rmc = "or"; 
break;
case 14 :
// Ham4HMLGen.g:2340:9: HamCircleil
this.match(this.input,HamCircleil,Ham4HMLGen.FOLLOW_HamCircleil_in_movementcircle17624); 
rmc = "il"; 
break;
case 15 :
// Ham4HMLGen.g:2341:9: HamCircleui
this.match(this.input,HamCircleui,Ham4HMLGen.FOLLOW_HamCircleui_in_movementcircle17644); 
rmc = "ui"; 
break;
case 16 :
// Ham4HMLGen.g:2342:9: HamCircledo
this.match(this.input,HamCircledo,Ham4HMLGen.FOLLOW_HamCircledo_in_movementcircle17664); 
rmc = "do"; 
break;
case 17 :
// Ham4HMLGen.g:2343:9: HamCircledi
this.match(this.input,HamCircledi,Ham4HMLGen.FOLLOW_HamCircledi_in_movementcircle17684); 
rmc = "di"; 
break;
case 18 :
// Ham4HMLGen.g:2344:9: HamCircleuo
this.match(this.input,HamCircleuo,Ham4HMLGen.FOLLOW_HamCircleuo_in_movementcircle17704); 
rmc = "uo"; 
break;
}
rmc = "ham_circle_" + rmc;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rmc;
},
// Ham4HMLGen.g:2351:1: ellipsedirection returns [String red = null] : ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul ) ;
// $ANTLR start "ellipsedirection"
ellipsedirection: function() {
var red =  null;
try {
// Ham4HMLGen.g:2355:5: ( ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul ) )
// Ham4HMLGen.g:2356:5: ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul )
// Ham4HMLGen.g:2356:5: ( HamEllipseh | HamEllipseur | HamEllipsev | HamEllipseul )
var alt184=4;
switch ( this.input.LA(1) ) {
case HamEllipseh:
alt184=1;
break;
case HamEllipseur:
alt184=2;
break;
case HamEllipsev:
alt184=3;
break;
case HamEllipseul:
alt184=4;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 184, 0, this.input);
throw nvae;
}
switch (alt184) {
case 1 :
// Ham4HMLGen.g:2356:9: HamEllipseh
this.match(this.input,HamEllipseh,Ham4HMLGen.FOLLOW_HamEllipseh_in_ellipsedirection17760); 
red = "h"; 
break;
case 2 :
// Ham4HMLGen.g:2357:9: HamEllipseur
this.match(this.input,HamEllipseur,Ham4HMLGen.FOLLOW_HamEllipseur_in_ellipsedirection17780); 
red = "ur"; 
break;
case 3 :
// Ham4HMLGen.g:2358:9: HamEllipsev
this.match(this.input,HamEllipsev,Ham4HMLGen.FOLLOW_HamEllipsev_in_ellipsedirection17799); 
red = "v"; 
break;
case 4 :
// Ham4HMLGen.g:2359:9: HamEllipseul
this.match(this.input,HamEllipseul,Ham4HMLGen.FOLLOW_HamEllipseul_in_ellipsedirection17819); 
red = "ul"; 
break;
}
red = "ham_ellipse_" + red;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return red;
},
// Ham4HMLGen.g:2366:1: clock returns [String rclk = null] : ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur ) ;
// $ANTLR start "clock"
clock: function() {
var rclk =  null;
try {
// Ham4HMLGen.g:2370:5: ( ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur ) )
// Ham4HMLGen.g:2371:5: ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur )
// Ham4HMLGen.g:2371:5: ( HamClocku | HamClockul | HamClockl | HamClockdl | HamClockd | HamClockdr | HamClockr | HamClockur )
var alt185=8;
switch ( this.input.LA(1) ) {
case HamClocku:
alt185=1;
break;
case HamClockul:
alt185=2;
break;
case HamClockl:
alt185=3;
break;
case HamClockdl:
alt185=4;
break;
case HamClockd:
alt185=5;
break;
case HamClockdr:
alt185=6;
break;
case HamClockr:
alt185=7;
break;
case HamClockur:
alt185=8;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 185, 0, this.input);
throw nvae;
}
switch (alt185) {
case 1 :
// Ham4HMLGen.g:2371:9: HamClocku
this.match(this.input,HamClocku,Ham4HMLGen.FOLLOW_HamClocku_in_clock17881); 
rclk = "u"; 
break;
case 2 :
// Ham4HMLGen.g:2372:9: HamClockul
this.match(this.input,HamClockul,Ham4HMLGen.FOLLOW_HamClockul_in_clock17903); 
rclk = "ul"; 
break;
case 3 :
// Ham4HMLGen.g:2373:9: HamClockl
this.match(this.input,HamClockl,Ham4HMLGen.FOLLOW_HamClockl_in_clock17924); 
rclk = "l"; 
break;
case 4 :
// Ham4HMLGen.g:2374:9: HamClockdl
this.match(this.input,HamClockdl,Ham4HMLGen.FOLLOW_HamClockdl_in_clock17946); 
rclk = "dl"; 
break;
case 5 :
// Ham4HMLGen.g:2375:9: HamClockd
this.match(this.input,HamClockd,Ham4HMLGen.FOLLOW_HamClockd_in_clock17967); 
rclk = "d"; 
break;
case 6 :
// Ham4HMLGen.g:2376:9: HamClockdr
this.match(this.input,HamClockdr,Ham4HMLGen.FOLLOW_HamClockdr_in_clock17989); 
rclk = "dr"; 
break;
case 7 :
// Ham4HMLGen.g:2377:9: HamClockr
this.match(this.input,HamClockr,Ham4HMLGen.FOLLOW_HamClockr_in_clock18010); 
rclk = "r"; 
break;
case 8 :
// Ham4HMLGen.g:2378:9: HamClockur
this.match(this.input,HamClockur,Ham4HMLGen.FOLLOW_HamClockur_in_clock18032); 
rclk = "ur"; 
break;
}
rclk = "ham_clock_" + rclk;
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rclk;
},
// Ham4HMLGen.g:2385:1: modifier returns [String rmod = null] : ( HamFast | HamSlow | HamTense | HamRest | HamHalt ) ;
// $ANTLR start "modifier"
modifier: function() {
var rmod =  null;
try {
// Ham4HMLGen.g:2387:5: ( ( HamFast | HamSlow | HamTense | HamRest | HamHalt ) )
// Ham4HMLGen.g:2388:5: ( HamFast | HamSlow | HamTense | HamRest | HamHalt )
// Ham4HMLGen.g:2388:5: ( HamFast | HamSlow | HamTense | HamRest | HamHalt )
var alt186=5;
switch ( this.input.LA(1) ) {
case HamFast:
alt186=1;
break;
case HamSlow:
alt186=2;
break;
case HamTense:
alt186=3;
break;
case HamRest:
alt186=4;
break;
case HamHalt:
alt186=5;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 186, 0, this.input);
throw nvae;
}
switch (alt186) {
case 1 :
// Ham4HMLGen.g:2388:9: HamFast
this.match(this.input,HamFast,Ham4HMLGen.FOLLOW_HamFast_in_modifier18093); 
rmod = "ham_fast"; 
break;
case 2 :
// Ham4HMLGen.g:2389:9: HamSlow
this.match(this.input,HamSlow,Ham4HMLGen.FOLLOW_HamSlow_in_modifier18117); 
rmod = "ham_slow"; 
break;
case 3 :
// Ham4HMLGen.g:2390:9: HamTense
this.match(this.input,HamTense,Ham4HMLGen.FOLLOW_HamTense_in_modifier18141); 
rmod = "ham_tense"; 
break;
case 4 :
// Ham4HMLGen.g:2391:9: HamRest
this.match(this.input,HamRest,Ham4HMLGen.FOLLOW_HamRest_in_modifier18164); 
rmod = "ham_rest"; 
break;
case 5 :
// Ham4HMLGen.g:2392:9: HamHalt
this.match(this.input,HamHalt,Ham4HMLGen.FOLLOW_HamHalt_in_modifier18188); 
rmod = "ham_halt"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rmod;
},
// Ham4HMLGen.g:2396:1: arc returns [String ra = null] : ( HamArcl | HamArcu | HamArcr | HamArcd ) ;
// $ANTLR start "arc"
arc: function() {
var ra =  null;
try {
// Ham4HMLGen.g:2398:5: ( ( HamArcl | HamArcu | HamArcr | HamArcd ) )
// Ham4HMLGen.g:2399:5: ( HamArcl | HamArcu | HamArcr | HamArcd )
// Ham4HMLGen.g:2399:5: ( HamArcl | HamArcu | HamArcr | HamArcd )
var alt187=4;
switch ( this.input.LA(1) ) {
case HamArcl:
alt187=1;
break;
case HamArcu:
alt187=2;
break;
case HamArcr:
alt187=3;
break;
case HamArcd:
alt187=4;
break;
default:
var nvae =
new org.antlr.runtime.NoViableAltException("", 187, 0, this.input);
throw nvae;
}
switch (alt187) {
case 1 :
// Ham4HMLGen.g:2399:9: HamArcl
this.match(this.input,HamArcl,Ham4HMLGen.FOLLOW_HamArcl_in_arc18251); 
ra = "ham_arc_l"; 
break;
case 2 :
// Ham4HMLGen.g:2400:9: HamArcu
this.match(this.input,HamArcu,Ham4HMLGen.FOLLOW_HamArcu_in_arc18275); 
ra = "ham_arc_u"; 
break;
case 3 :
// Ham4HMLGen.g:2401:9: HamArcr
this.match(this.input,HamArcr,Ham4HMLGen.FOLLOW_HamArcr_in_arc18299); 
ra = "ham_arc_r"; 
break;
case 4 :
// Ham4HMLGen.g:2402:9: HamArcd
this.match(this.input,HamArcd,Ham4HMLGen.FOLLOW_HamArcd_in_arc18323); 
ra = "ham_arc_d"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return ra;
},
// Ham4HMLGen.g:2406:1: size returns [String rsz = null] : ( HamSmallmod | HamLargemod ) ;
// $ANTLR start "size"
size: function() {
var rsz =  null;
try {
// Ham4HMLGen.g:2410:5: ( ( HamSmallmod | HamLargemod ) )
// Ham4HMLGen.g:2411:5: ( HamSmallmod | HamLargemod )
// Ham4HMLGen.g:2411:5: ( HamSmallmod | HamLargemod )
var alt188=2;
var LA188_0 = this.input.LA(1);
if ( (LA188_0==HamSmallmod) ) {
alt188=1;
}
else if ( (LA188_0==HamLargemod) ) {
alt188=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 188, 0, this.input);
throw nvae;
}
switch (alt188) {
case 1 :
// Ham4HMLGen.g:2411:9: HamSmallmod
this.match(this.input,HamSmallmod,Ham4HMLGen.FOLLOW_HamSmallmod_in_size18385); 
rsz = "small"; 
break;
case 2 :
// Ham4HMLGen.g:2412:9: HamLargemod
this.match(this.input,HamLargemod,Ham4HMLGen.FOLLOW_HamLargemod_in_size18405); 
rsz = "large"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsz;
},
// Ham4HMLGen.g:2416:1: sizechange returns [String rsc = null] : ( HamIncreasing | HamDecreasing ) ;
// $ANTLR start "sizechange"
sizechange: function() {
var rsc =  null;
try {
// Ham4HMLGen.g:2418:5: ( ( HamIncreasing | HamDecreasing ) )
// Ham4HMLGen.g:2419:5: ( HamIncreasing | HamDecreasing )
// Ham4HMLGen.g:2419:5: ( HamIncreasing | HamDecreasing )
var alt189=2;
var LA189_0 = this.input.LA(1);
if ( (LA189_0==HamIncreasing) ) {
alt189=1;
}
else if ( (LA189_0==HamDecreasing) ) {
alt189=2;
}
else {
var nvae =
new org.antlr.runtime.NoViableAltException("", 189, 0, this.input);
throw nvae;
}
switch (alt189) {
case 1 :
// Ham4HMLGen.g:2419:9: HamIncreasing
this.match(this.input,HamIncreasing,Ham4HMLGen.FOLLOW_HamIncreasing_in_sizechange18457); 
rsc = "ham_increasing"; 
break;
case 2 :
// Ham4HMLGen.g:2420:9: HamDecreasing
this.match(this.input,HamDecreasing,Ham4HMLGen.FOLLOW_HamDecreasing_in_sizechange18475); 
rsc = "ham_decreasing"; 
break;
}
}
catch (re) {
if (re instanceof org.antlr.runtime.RecognitionException) {
this.reportError(re);
this.recover(this.input,re);
} else {
throw re;
}
}
finally {
}
return rsc;
}
// Delegated rules
}, true); // important to pass true to overwrite default implementations
// public class variables
org.antlr.lang.augmentObject(Ham4HMLGen, {
tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "WS", "HamTab", "HamLinefeed", "HamPagebreak", "HamReturn", "HamVersion40", "HamSpace", "HamExclaim", "HamQuery", "HamFullstop", "HamComma", "HamPlus", "HamMetaalt", "HamClocku", "HamClockul", "HamClockl", "HamClockdl", "HamClockd", "HamClockdr", "HamClockr", "HamClockur", "HamClockfull", "HamSymmpar", "HamSymmlr", "HamFist", "HamFlathand", "HamFinger2", "HamFinger23", "HamFinger23spread", "HamFinger2345", "HamThumboutmod", "HamThumbacrossmod", "HamPinch12", "HamPinchall", "HamPinch12open", "HamCee12", "HamCeeall", "HamCee12open", "HamThumbopenmod", "HamFingerstraightmod", "HamFingerbendmod", "HamFingerhookedmod", "HamNondominant", "HamDoublebent", "HamDoublehooked", "HamExtfingeru", "HamExtfingerur", "HamExtfingerr", "HamExtfingerdr", "HamExtfingerd", "HamExtfingerdl", "HamExtfingerl", "HamExtfingerul", "HamExtfingerol", "HamExtfingero", "HamExtfingeror", "HamExtfingeril", "HamExtfingeri", "HamExtfingerir", "HamExtfingerui", "HamExtfingerdi", "HamExtfingerdo", "HamExtfingeruo", "HamEarlobe", "HamNostrils", "HamShouldertop", "HamPalmu", "HamPalmur", "HamPalmr", "HamPalmdr", "HamPalmd", "HamPalmdl", "HamPalml", "HamPalmul", "HamReplace", "HamArmextended", "HamBehind", "HamEtc", "HamOrirelative", "HamTongue", "HamTeeth", "HamStomach", "HamNeutralspace", "HamHead", "HamHeadtop", "HamForehead", "HamEyebrows", "HamEyes", "HamNose", "HamEar", "HamCheek", "HamLips", "HamChin", "HamUnderchin", "HamNeck", "HamShoulders", "HamChest", "HamBelowstomach", "HamLrbeside", "HamLrat", "HamUpperarm", "HamElbow", "HamElbowinside", "HamLowerarm", "HamWristback", "HamWristpulse", "HamThumbball", "HamPalm", "HamHandback", "HamThumb", "HamIndexfinger", "HamMiddlefinger", "HamRingfinger", "HamPinky", "HamThumbside", "HamPinkyside", "HamBetween", "HamFingertip", "HamFingernail", "HamFingerpad", "HamFingermidjoint", "HamFingerbase", "HamFingerside", "HamWristtopulse", "HamWristtoback", "HamWristtothumb", "HamWristtopinky", "HamCoreftag", "HamCorefref", "HamNomotion", "HamMoveu", "HamMoveur", "HamMover", "HamMovedr", "HamMoved", "HamMovedl", "HamMovel", "HamMoveul", "HamMoveol", "HamMoveo", "HamMoveor", "HamMoveil", "HamMovei", "HamMoveir", "HamMoveui", "HamMovedi", "HamMovedo", "HamMoveuo", "HamMovecross", "HamMovex", "HamSmallmod", "HamLargemod", "HamArcl", "HamArcu", "HamArcr", "HamArcd", "HamWavy", "HamZigzag", "HamFingerplay", "HamParbegin", "HamParend", "HamCircleo", "HamCirclei", "HamCircled", "HamCircleu", "HamCirclel", "HamCircler", "HamIncreasing", "HamDecreasing", "HamClose", "HamTouch", "HamInterlock", "HamCross", "HamFast", "HamSlow", "HamTense", "HamRest", "HamHalt", "HamRepeatfromstart", "HamRepeatfromstartseveral", "HamRepeatcontinue", "HamRepeatcontinueseveral", "HamSeqbegin", "HamSeqend", "HamAlternatingmotion", "HamRepeatreverse", "HamBrushing", "HamNonipsi", "HamEllipseh", "HamEllipseur", "HamEllipsev", "HamEllipseul", "HamMime", "HamAltbegin", "HamAltend", "HamNodding", "HamSwinging", "HamTwisting", "HamStircw", "HamStirccw", "HamFusionbegin", "HamFusionend", "HamCircleul", "HamCircledr", "HamCircleur", "HamCircledl", "HamCircleol", "HamCircleir", "HamCircleor", "HamCircleil", "HamCircledo", "HamCircleui", "HamCircledi", "HamCircleuo", "HamNbs", "HAMSIGNS", "SIGN2", "SIGN1", "ICFG2", "ICFG1", "NMICLIST", "NMICUNIT", "MICFG2", "MICFG1", "HDCONFIG2", "HDCONFIG1", "SPLITHDCFG2", "HDCFGTAIL2", "HSHAPE2", "HSHAPE1", "BASICHDSHP1", "BASICHDSHP", "HSCLASS", "FIBENDING", "THUMBPOS", "FINGERLIST", "FISHPLIST", "FICRSSLIST", "FSHAPE", "FCROSSING", "THSPECIAL", "EXTFIDIR2", "EXTFIDIR1", "EXTFIDIR", "PALMOR2", "PALMOR1", "LOC2", "LOC1", "LOCTNBODYARM", "LOCTNBODY", "LOCTNHAND", "LOCTNARM", "LEVBODY", "LEVHAND", "LEVARM", "HCONSTLLN", "CNTCTBODY", "CNTCTHAND", "CNTCTOFHAND", "A2TLIST", "A1TLIST", "A1LIST", "ACTION2T", "ACTION1T", "ACTION2", "ACTION1", "PARACT2T", "SEQACT2T", "SPLITACT2LOC2", "SPLITACT2T", "PARACT1T", "SEQACT1T", "NMACT1T", "PARACT1", "REPETITIONS", "SIMPLEMVMT", "STRGHTMVMT", "CRCLRMVMT", "REPLACE", "SPLITREPLACETL", "REPLACETAIL1", "HSFINGERITEM", "LOCBODY", "MOVINGREPETITION", "SEQACT1", "SEQFUSEDACT2T", "SEQFUSEDACT1T", "SEQFUSEDACT1", "CNTCTOHHAND", "CNTCTOHARM"],
FOLLOW_HAMSIGNS_in_hamsignseq149: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_sign2or1_in_hamsignseq164: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x30000000, 0x00000000]),
FOLLOW_sign2_in_sign2or1246: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_nondomsign1_in_sign2or1273: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_SIGN2_in_sign2324: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_symmoperator_in_sign2356: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
FOLLOW_initialconfig2_in_sign2375: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
FOLLOW_a2tstar_in_sign2395: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_initialconfig2_in_sign2424: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
FOLLOW_a1tstar_in_sign2444: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamNomotion_in_sign2481: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
FOLLOW_HamNondominant_in_sign2515: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
FOLLOW_initialconfig1_in_sign2550: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
FOLLOW_a1tstar_in_sign2570: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_SIGN1_in_nondomsign1624: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamNondominant_in_nondomsign1644: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
FOLLOW_initialconfig1_in_nondomsign1659: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
FOLLOW_a1tstar_in_nondomsign1675: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamSymmpar_in_symmoperator745: new org.antlr.runtime.BitSet([0x00000002, 0x00000800,0x00000000, 0x00000000,0x08000000, 0x90000000]),
FOLLOW_HamSymmlr_in_symmoperator780: new org.antlr.runtime.BitSet([0x00000002, 0x00000800,0x00000000, 0x00000000,0x08000000, 0x90000000]),
FOLLOW_HamLargemod_in_symmoperator828: new org.antlr.runtime.BitSet([0x00000002, 0x00000800,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamFingerstraightmod_in_symmoperator863: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamFingerstraightmod_in_symmoperator897: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x90000000]),
FOLLOW_HamLargemod_in_symmoperator920: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x90000000]),
FOLLOW_HamAlternatingmotion_in_symmoperator965: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x80000000]),
FOLLOW_HamNonipsi_in_symmoperator987: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_ICFG2_in_initialconfig21048: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_nminitialconfig_in_initialconfig21065: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
FOLLOW_minitialconfig2_in_initialconfig21086: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_ICFG1_in_initialconfig11127: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_nminitialconfig_in_initialconfig11144: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000008]),
FOLLOW_minitialconfig1_in_initialconfig11165: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_NMICLIST_in_nminitialconfig1213: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_nmicunit_in_nminitialconfig1242: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
FOLLOW_NMICUNIT_in_nmicunit1308: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelbody_in_nmicunit1336: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_levelarm_in_nmicunit1364: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_action1_in_nmicunit1388: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_MICFG2_in_minitialconfig21428: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handconfig2_in_minitialconfig21460: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_location2_in_minitialconfig21481: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_handconfig1_in_minitialconfig21516: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_location1_in_minitialconfig21536: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
FOLLOW_HamPlus_in_minitialconfig21563: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_location1_in_minitialconfig21583: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_MICFG1_in_minitialconfig11636: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handconfig1_in_minitialconfig11654: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_location1_in_minitialconfig11671: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HDCONFIG2_in_handconfig21721: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handshape2_in_handconfig21757: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
FOLLOW_handconfigtail2_in_handconfig21778: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_splithandconfig2_in_handconfig21817: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HDCONFIG1_in_handconfig11871: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handshape1_in_handconfig11890: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02400000]),
FOLLOW_extfidir1_in_handconfig11908: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_handconfig11930: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_SPLITHDCFG2_in_splithandconfig21985: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handconfig1_in_splithandconfig22001: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
FOLLOW_handconfig1_in_splithandconfig22017: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HDCFGTAIL2_in_handconfigtail22061: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_extfidir2_in_handconfigtail22095: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x01000000]),
FOLLOW_palmor2_in_handconfigtail22127: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_extfidir1_in_handconfigtail22169: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_handconfigtail22192: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00400000]),
FOLLOW_extfidir1_in_handconfigtail22214: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_handconfigtail22237: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HSHAPE2_in_handshape22295: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handshape1_in_handshape22313: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000200]),
FOLLOW_handshape1_in_handshape22331: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HSHAPE1_in_handshape12379: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_basichandshape1_in_handshape12398: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00138000]),
FOLLOW_fingerlist_in_handshape12417: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00130000]),
FOLLOW_fingershapelist_in_handshape12439: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00120000]),
FOLLOW_fingercrossinglist_in_handshape12461: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00100000]),
FOLLOW_thumbspecial_in_handshape12484: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_BASICHDSHP1_in_basichandshape12527: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_basichandshape_in_basichandshape12545: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
FOLLOW_basichandshape_in_basichandshape12568: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_BASICHDSHP_in_basichandshape2617: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_handshapeclass_in_basichandshape2639: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
FOLLOW_HamNondominant_in_basichandshape2668: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
FOLLOW_HamEtc_in_basichandshape2695: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
FOLLOW_thumbpos_in_basichandshape2778: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
FOLLOW_fingerbending_in_basichandshape2811: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_fingerbending_in_basichandshape2852: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00004000]),
FOLLOW_thumbpos_in_basichandshape2880: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HSCLASS_in_handshapeclass2939: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamFist_in_handshapeclass2953: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFlathand_in_handshapeclass2981: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFinger2_in_handshapeclass3005: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFinger23_in_handshapeclass3030: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFinger23spread_in_handshapeclass3054: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFinger2345_in_handshapeclass3072: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamPinch12_in_handshapeclass3094: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamPinchall_in_handshapeclass3119: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamPinch12open_in_handshapeclass3143: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamCee12_in_handshapeclass3164: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamCeeall_in_handshapeclass3191: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamCee12open_in_handshapeclass3217: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_FIBENDING_in_fingerbending3272: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamFingerstraightmod_in_fingerbending3286: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFingerbendmod_in_fingerbending3305: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFingerhookedmod_in_fingerbending3328: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamDoublebent_in_fingerbending3349: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamDoublehooked_in_fingerbending3375: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_THUMBPOS_in_thumbpos3436: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamThumboutmod_in_thumbpos3450: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamThumbacrossmod_in_thumbpos3471: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamThumbopenmod_in_thumbpos3489: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamThumb_in_thumb3546: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamIndexfinger_in_finger3596: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMiddlefinger_in_finger3617: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRingfinger_in_finger3637: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPinky_in_finger3659: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HSFINGERITEM_in_hsfingeritem3723: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_finger_in_hsfingeritem3737: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x00000000]),
FOLLOW_HamLargemod_in_hsfingeritem3757: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_thumb_in_digit3825: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_finger_in_digit3839: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_FINGERLIST_in_fingerlist3888: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_hsfingeritem_in_fingerlist3904: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
FOLLOW_FISHPLIST_in_fingershapelist3968: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_fingershape_in_fingershapelist3984: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00040000]),
FOLLOW_FICRSSLIST_in_fingercrossinglist4047: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_fingercrossing_in_fingercrossinglist4063: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00080000]),
FOLLOW_FSHAPE_in_fingershape4118: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_digit_in_fingershape4133: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
FOLLOW_fingerbending_in_fingershape4147: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_FCROSSING_in_fingercrossing4188: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_digit_in_fingercrossing4202: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7E000000]),
FOLLOW_fingerpart_in_fingercrossing4216: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_fingercrossing4230: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_THSPECIAL_in_thumbspecial4276: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamBetween_in_thumbspecial4291: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_finger_in_thumbspecial4317: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_finger_in_thumbspecial4343: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_thumb_in_thumbspecial4408: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_fingerpart_in_thumbspecial4441: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamFingertip_in_fingerpart4507: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFingernail_in_fingerpart4530: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFingerpad_in_fingerpart4552: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFingermidjoint_in_fingerpart4575: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFingerbase_in_fingerpart4593: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFingerside_in_fingerpart4615: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_EXTFIDIR2_in_extfidir24676: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_extfidir1_in_extfidir24695: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00400000]),
FOLLOW_extfidir1_in_extfidir24714: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_EXTFIDIR1_in_extfidir14767: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_extfidir_in_extfidir14784: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00040000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00800000]),
FOLLOW_extfidir_in_extfidir14801: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamOrirelative_in_extfidir14824: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_EXTFIDIR_in_extfidir4887: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamExtfingeru_in_extfidir4921: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerur_in_extfidir4951: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerr_in_extfidir4980: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdr_in_extfidir5010: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerd_in_extfidir5039: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdl_in_extfidir5069: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerl_in_extfidir5098: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerul_in_extfidir5128: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerol_in_extfidir5185: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000006, 0x00000000]),
FOLLOW_HamExtfingeruo_in_extfidir5236: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdo_in_extfidir5265: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingero_in_extfidir5319: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeror_in_extfidir5367: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000006, 0x00000000]),
FOLLOW_HamExtfingeruo_in_extfidir5418: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdo_in_extfidir5447: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeril_in_extfidir5519: new org.antlr.runtime.BitSet([0x00000008, 0x80000000,0x00000001, 0x00000000]),
FOLLOW_HamExtfingerui_in_extfidir5570: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdi_in_extfidir5599: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeri_in_extfidir5653: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerir_in_extfidir5701: new org.antlr.runtime.BitSet([0x00000008, 0x80000000,0x00000001, 0x00000000]),
FOLLOW_HamExtfingerui_in_extfidir5752: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdi_in_extfidir5781: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeruo_in_extfidir5863: new org.antlr.runtime.BitSet([0x00000008, 0x0A000000]),
FOLLOW_HamExtfingerol_in_extfidir5914: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeror_in_extfidir5943: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdo_in_extfidir6015: new org.antlr.runtime.BitSet([0x00000008, 0x0A000000]),
FOLLOW_HamExtfingerol_in_extfidir6066: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingeror_in_extfidir6095: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerui_in_extfidir6167: new org.antlr.runtime.BitSet([0x00000008, 0x50000000]),
FOLLOW_HamExtfingeril_in_extfidir6218: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerir_in_extfidir6247: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerdi_in_extfidir6319: new org.antlr.runtime.BitSet([0x00000008, 0x50000000]),
FOLLOW_HamExtfingeril_in_extfidir6370: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamExtfingerir_in_extfidir6399: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_PALMOR2_in_palmor26500: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_palmor1_in_palmor26518: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_palmor26536: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_PALMOR1_in_palmor16591: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_palmor_in_palmor16609: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00063FC0, 0x00000000]),
FOLLOW_palmor_in_palmor16637: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamEtc_in_palmor16667: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00040000, 0x00000000]),
FOLLOW_HamOrirelative_in_palmor16709: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamPalmu_in_palmor6778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmur_in_palmor6801: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmr_in_palmor6823: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmdr_in_palmor6846: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmd_in_palmor6868: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmdl_in_palmor6891: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalml_in_palmor6913: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalmul_in_palmor6936: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_LOC2_in_location27001: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_location1_in_location27033: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_location1_in_location27054: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_handconstellation_in_location27090: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00008000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
FOLLOW_HamArmextended_in_location27128: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_locationbody_in_location27174: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LOC1_in_location17245: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_digit_in_location17273: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_locationhand_in_location17315: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_locationbodyarm_in_location17343: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LOCTNBODYARM_in_locationbodyarm7397: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_locationbody_in_locationbodyarm7425: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_locationarm_in_locationbodyarm7453: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamArmextended_in_locationbodyarm7479: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LOCTNBODY_in_locationbody7548: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelcomplexbody_in_locationbody7566: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00010000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
FOLLOW_HamBehind_in_locationbody7586: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
FOLLOW_contactbody_in_locationbody7642: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LOCTNHAND_in_locationhand7688: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelcomplexhand_in_locationhand7706: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
FOLLOW_contacthand_in_locationhand7725: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LOCTNARM_in_locationarm7776: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelcomplexarm_in_locationarm7794: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00010000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
FOLLOW_HamBehind_in_locationarm7814: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
FOLLOW_contactbody_in_locationarm7870: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_levelbody_in_levelcomplexbody7921: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
FOLLOW_levelbody_in_levelcomplexbody7939: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelhand_in_levelcomplexhand7984: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000002, 0x00000000]),
FOLLOW_levelhand_in_levelcomplexhand8002: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_levelarm_in_levelcomplexarm8048: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000004, 0x00000000]),
FOLLOW_levelarm_in_levelcomplexarm8066: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_LEVBODY_in_levelbody8113: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_side_in_levelbody8132: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x60000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
FOLLOW_locbody_in_levelbody8165: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x000000C0]),
FOLLOW_locsided_in_levelbody8194: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x000000C0]),
FOLLOW_HamEtc_in_levelbody8224: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000000C0]),
FOLLOW_side_in_levelbody8259: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LEVHAND_in_levelhand8313: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_side_in_levelhand8332: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x7EFFF000]),
FOLLOW_handpart_in_levelhand8365: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000180C0]),
FOLLOW_fingerpart_in_levelhand8404: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003F80C0]),
FOLLOW_digit_in_levelhand8435: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003F80C0]),
FOLLOW_digit_in_levelhand8478: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x7E3F80C0]),
FOLLOW_fingerpart_in_levelhand8512: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000180C0]),
FOLLOW_dorsalorpalmar_in_levelhand8555: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000000C0]),
FOLLOW_side_in_levelhand8577: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_LEVARM_in_levelarm8632: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_side_in_levelarm8651: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000F00]),
FOLLOW_locarm_in_levelarm8674: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x000180C0]),
FOLLOW_HamEtc_in_levelarm8694: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000180C0]),
FOLLOW_dorsalorpalmar_in_levelarm8729: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x000000C0]),
FOLLOW_side_in_levelarm8751: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_CNTCTBODY_in_contactbody8799: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_pcontact_in_contactbody8829: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamArmextended_in_contactbody8853: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_contactofhand_in_contactbody8905: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_CNTCTHAND_in_contacthand8959: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_pcontact_in_contacthand8989: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_ccontact_in_contacthand9019: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_contactofhand_in_contacthand9049: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_CNTCTOFHAND_in_contactofhand9111: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_pcontact_in_contactofhand9144: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000030]),
FOLLOW_ccontact_in_contactofhand9177: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000030]),
FOLLOW_contactohhand_in_contactofhand9219: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_contactoharm_in_contactofhand9251: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_CNTCTOHHAND_in_contactohhand9307: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelcomplexhand_in_contactohhand9321: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_CNTCTOHARM_in_contactoharm9366: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelcomplexarm_in_contactoharm9380: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HCONSTLLN_in_handconstellation9422: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_locationhand_in_handconstellation9450: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
FOLLOW_locationhand_in_handconstellation9468: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
FOLLOW_contacthand_in_handconstellation9498: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamUpperarm_in_locarm9553: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamElbow_in_locarm9577: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamElbowinside_in_locarm9604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamLowerarm_in_locarm9625: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_LOCBODY_in_locbody9685: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamHead_in_locbody9699: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamHeadtop_in_locbody9731: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamForehead_in_locbody9760: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamEyebrows_in_locbody9788: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamEyes_in_locbody9816: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamNose_in_locbody9848: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamNostrils_in_locbody9880: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamLips_in_locbody9908: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamTongue_in_locbody9940: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamTeeth_in_locbody9970: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamChin_in_locbody10001: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamUnderchin_in_locbody10033: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamNeck_in_locbody10060: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamShouldertop_in_locbody10092: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamShoulders_in_locbody10117: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamChest_in_locbody10144: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamStomach_in_locbody10175: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamBelowstomach_in_locbody10204: new org.antlr.runtime.BitSet([0x00000008, 0x00018000]),
FOLLOW_HamDoublebent_in_locbody10248: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamDoublehooked_in_locbody10274: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamEar_in_locsided10345: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEarlobe_in_locsided10374: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCheek_in_locsided10399: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamWristback_in_handpart10464: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamWristpulse_in_handpart10487: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamThumbball_in_handpart10509: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalm_in_handpart10532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamHandback_in_handpart10560: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamThumbside_in_handpart10584: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPinkyside_in_handpart10607: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamLrbeside_in_side10692: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamLrat_in_side10716: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamHandback_in_dorsalorpalmar10778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamPalm_in_dorsalorpalmar10802: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamTouch_in_pcontact10868: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClose_in_pcontact10895: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamInterlock_in_ccontact10966: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCross_in_ccontact10989: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_A2TLIST_in_a2tstar11061: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action2t_in_a2tstar11079: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
FOLLOW_A1TLIST_in_a1tstar11141: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_a1tstar11159: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_ACTION2T_in_action2t11216: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_action2t11244: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_action1_in_action2t11274: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
FOLLOW_location2_in_action2t11292: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_splitaction2loc2_in_action2t11321: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_splitaction2t_in_action2t11356: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_paraction2t_in_action2t11393: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_seqaction2t_in_action2t11421: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_seqfusedaction2t_in_action2t11449: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_repetitions_in_action2t11485: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_ACTION1T_in_action1t11540: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1_in_action1t11574: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000,0x00400008, 0x00000000]),
FOLLOW_location1_in_action1t11611: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_HamLargemod_in_action1t11635: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_handconstellation_in_action1t11679: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_paraction1t_in_action1t11726: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_seqaction1t_in_action1t11758: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_seqfusedaction1t_in_action1t11790: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_nmaction1t_in_action1t11821: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
FOLLOW_repetitions_in_action1t11863: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_ACTION1_in_action111919: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_HamNomotion_in_action111953: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_simplemovement_in_action112009: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_modifier_in_action112063: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x003E0000]),
FOLLOW_HamLargemod_in_action112130: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_paraction1_in_action112184: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_seqaction1_in_action112216: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_seqfusedaction1_in_action112248: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_PARACT2T_in_paraction2t12309: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action2t_in_paraction2t12339: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
FOLLOW_SEQACT2T_in_seqaction2t12405: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action2t_in_seqaction2t12435: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
FOLLOW_SEQFUSEDACT2T_in_seqfusedaction2t12504: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action2t_in_seqfusedaction2t12534: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
FOLLOW_SPLITACT2LOC2_in_splitaction2loc212599: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1_in_splitaction2loc212619: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_HamPlus_in_splitaction2loc212642: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_action1_in_splitaction2loc212662: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000,0x00002000, 0x00000000]),
FOLLOW_location2_in_splitaction2loc212693: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_SPLITACT2T_in_splitaction2t12739: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_splitaction2t12758: new org.antlr.runtime.BitSet([0x00008008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_HamPlus_in_splitaction2t12780: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_action1t_in_splitaction2t12799: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_PARACT1T_in_paraction1t12859: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_paraction1t12889: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_SEQACT1T_in_seqaction1t12955: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_seqaction1t12985: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_SEQFUSEDACT1T_in_seqfusedaction1t13054: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1t_in_seqfusedaction1t13084: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_NMACT1T_in_nmaction1t13147: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_levelbody_in_nmaction1t13176: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_levelarm_in_nmaction1t13205: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
FOLLOW_action1t_in_nmaction1t13236: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_PARACT1_in_paraction113285: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1_in_paraction113315: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_SEQACT1_in_seqaction113387: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1_in_seqaction113417: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_SEQFUSEDACT1_in_seqfusedaction113492: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_action1_in_seqfusedaction113522: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
FOLLOW_REPETITIONS_in_repetitions13595: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_repetition_in_repetitions13646: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00020000, 0x00000000,0x00000000, 0x33C01800]),
FOLLOW_HamEtc_in_repetitions13692: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800,0x0000000F, 0x00000000]),
FOLLOW_ellipsedirection_in_repetitions13736: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_repetition_in_repetitions13784: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_movingrepetition_in_repetitions13845: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10001800]),
FOLLOW_sizechange_in_repetitions13901: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x10000000]),
FOLLOW_size_in_repetitions13928: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions13988: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions14001: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamAlternatingmotion_in_repetitions14046: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10000000]),
FOLLOW_HamAlternatingmotion_in_repetitions14067: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_MOVINGREPETITION_in_movingrepetition14124: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_repetition_in_movingrepetition14148: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00FFFFC0, 0x00000000]),
FOLLOW_movementarrow_in_movingrepetition14171: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00001800]),
FOLLOW_size_in_movingrepetition14194: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800]),
FOLLOW_sizechange_in_movingrepetition14230: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_movingrepetition14251: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_SIMPLEMVMT_in_simplemovement14313: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_fullstraightmovement_in_simplemovement14342: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_fullcircularmovement_in_simplemovement14371: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_fullwristmovement_in_simplemovement14400: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_fullmovementcross_in_simplemovement14429: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_replacement_in_simplemovement14458: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_digit_in_simplemovement14516: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x00000004]),
FOLLOW_HamFingerplay_in_simplemovement14581: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000,0x00000000, 0x40000000]),
FOLLOW_HamBrushing_in_simplemovement14641: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
FOLLOW_location1_in_simplemovement14660: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x003E0000]),
FOLLOW_digit_in_simplemovement14689: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_straightmovement_in_fullstraightmovement14752: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0xFC000000, 0x00000003]),
FOLLOW_size_in_fullstraightmovement14777: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0xF0000000, 0x00000003]),
FOLLOW_arckind_in_fullstraightmovement14810: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_zigzag_in_fullstraightmovement14841: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_STRGHTMVMT_in_straightmovement14896: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_movementarrow_in_straightmovement14915: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00FFFFC0, 0x00000000]),
FOLLOW_movementarrow_in_straightmovement14934: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_arc_in_arckind15001: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0xFC000000, 0x00000000]),
FOLLOW_arc_in_arckind15020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_arckind15043: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamZigzag_in_zigzag15126: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_HamWavy_in_zigzag15162: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_size_in_zigzag15199: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_ellipsedirection_in_zigzag15221: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800]),
FOLLOW_sizechangenonlinear_in_zigzag15244: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_sizechange_in_sizechangenonlinear15308: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_sizechangenonlinear15327: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_circularmovement_in_fullcircularmovement15390: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_size_in_fullcircularmovement15415: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_revolutions_in_fullcircularmovement15438: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800,0x0000000F, 0x00000000]),
FOLLOW_ellipse_in_fullcircularmovement15461: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001800]),
FOLLOW_sizechangenonlinear_in_fullcircularmovement15484: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_CRCLRMVMT_in_circularmovement15531: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_movementcircle_in_circularmovement15549: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000007E0,0x03FFC000, 0x00000000]),
FOLLOW_movementcircle_in_circularmovement15567: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_ellipsedirection_in_ellipse15636: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_ellipse15655: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_clock_in_revolutions15736: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions15768: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions15797: new org.antlr.runtime.BitSet([0x01FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions15846: new org.antlr.runtime.BitSet([0x03FE0002, 0x00000000]),
FOLLOW_HamClockfull_in_revolutions15875: new org.antlr.runtime.BitSet([0x01FE0002, 0x00000000]),
FOLLOW_clock_in_revolutions15922: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_wristmovement_in_fullwristmovement15985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_fullwristmovement16004: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_movementcross_in_fullmovementcross16067: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x0C000000, 0x00000000]),
FOLLOW_size_in_fullmovementcross16086: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_REPLACE_in_replacement16138: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_sizechange_in_replacement16157: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02400200,0x08000000, 0x00000000]),
FOLLOW_handshape1_in_replacement16179: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02400000,0x08000000, 0x00000000]),
FOLLOW_splitreplacetail_in_replacement16214: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_extfidir1_in_replacement16246: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_replacement16269: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_palmor1_in_replacement16305: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_SPLITREPLACETL_in_splitreplacetail16359: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_replacetail1_in_splitreplacetail16377: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x10000000, 0x00000000]),
FOLLOW_replacetail1_in_splitreplacetail16395: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_REPLACETAIL1_in_replacetail116445: new org.antlr.runtime.BitSet([0x00000004, 0x00000000]),
FOLLOW_extfidir1_in_replacetail116477: new org.antlr.runtime.BitSet([0x00000008, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
FOLLOW_palmor1_in_replacetail116503: new org.antlr.runtime.BitSet([0x00000008, 0x00000000]),
FOLLOW_HamRepeatfromstart_in_repetition16567: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRepeatfromstartseveral_in_repetition16580: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRepeatcontinue_in_repetition16620: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRepeatcontinueseveral_in_repetition16634: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRepeatreverse_in_repetition16674: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveu_in_movementarrow16718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveur_in_movementarrow16741: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMover_in_movementarrow16763: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovedr_in_movementarrow16786: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoved_in_movementarrow16808: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovedl_in_movementarrow16831: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovel_in_movementarrow16853: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveul_in_movementarrow16876: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveol_in_movementarrow16898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveo_in_movementarrow16920: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveor_in_movementarrow16943: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveil_in_movementarrow16965: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovei_in_movementarrow16987: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveir_in_movementarrow17010: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveui_in_movementarrow17032: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovedi_in_movementarrow17054: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovedo_in_movementarrow17076: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMoveuo_in_movementarrow17098: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovecross_in_movementcross17155: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamMovex_in_movementcross17174: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamNodding_in_wristmovement17226: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSwinging_in_wristmovement17247: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamTwisting_in_wristmovement17267: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamStircw_in_wristmovement17287: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamStirccw_in_wristmovement17309: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleo_in_movementcircle17358: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCirclei_in_movementcircle17379: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircled_in_movementcircle17400: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleu_in_movementcircle17421: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCirclel_in_movementcircle17442: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircler_in_movementcircle17463: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleul_in_movementcircle17484: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircledr_in_movementcircle17504: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleur_in_movementcircle17524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircledl_in_movementcircle17544: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleol_in_movementcircle17564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleir_in_movementcircle17584: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleor_in_movementcircle17604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleil_in_movementcircle17624: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleui_in_movementcircle17644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircledo_in_movementcircle17664: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircledi_in_movementcircle17684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamCircleuo_in_movementcircle17704: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEllipseh_in_ellipsedirection17760: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEllipseur_in_ellipsedirection17780: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEllipsev_in_ellipsedirection17799: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamEllipseul_in_ellipsedirection17819: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClocku_in_clock17881: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockul_in_clock17903: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockl_in_clock17924: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockdl_in_clock17946: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockd_in_clock17967: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockdr_in_clock17989: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockr_in_clock18010: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamClockur_in_clock18032: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamFast_in_modifier18093: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSlow_in_modifier18117: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamTense_in_modifier18141: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamRest_in_modifier18164: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamHalt_in_modifier18188: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamArcl_in_arc18251: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamArcu_in_arc18275: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamArcr_in_arc18299: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamArcd_in_arc18323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamSmallmod_in_size18385: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamLargemod_in_size18405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamIncreasing_in_sizechange18457: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
FOLLOW_HamDecreasing_in_sizechange18475: new org.antlr.runtime.BitSet([0x00000002, 0x00000000])
});
})();
// -------- Coffee-fix.js --------
// Exports
this.getCWAEnv().add(Ham4Parser, "Ham4Parser");
// -------- HamLexer.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   A TokenStream lexer for ANTLR
var CommonToken, EOF, HamLexer, Logger, Token, cwaenv, document, hamLimit, lggr, ttMap, ttUnused;
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
// Enhanced if run from HtoG tool
lggr = Logger.get("SiGML");
document = this.document;
EOF = 1;
ttUnused = -1;
hamLimit = 256;
ttMap = [
ttUnused, // 00   0
ttUnused, // 01   1
ttUnused, // 02   2
ttUnused, // 03   3
ttUnused, // 04   4
ttUnused, // 05   5
ttUnused, // 06   6
ttUnused, // 07   7
ttUnused, // 08   8
Ham4Parser.HamTab, // 09   9
Ham4Parser.HamLinefeed, // 0a  10
ttUnused, // 0b  11
Ham4Parser.HamPagebreak, // 0c  12
Ham4Parser.HamReturn, // 0d  13
ttUnused, // 0e  14
ttUnused, // 0f  15
ttUnused, // 10  16
ttUnused, // 11  17
ttUnused, // 12  18
ttUnused, // 13  19
Ham4Parser.HamVersion40, // 14  20
ttUnused, // 15  21
ttUnused, // 16  22
ttUnused, // 17  23
ttUnused, // 18  24
ttUnused, // 19  25
ttUnused, // 1a  26
ttUnused, // 1b  27
ttUnused, // 1c  28
ttUnused, // 1d  29
ttUnused, // 1e  30
ttUnused, // 1f  31
Ham4Parser.HamSpace, // 20  32
Ham4Parser.HamExclaim, // 21  33
Ham4Parser.HamQuery, // 22  34
Ham4Parser.HamFullstop, // 23  35
Ham4Parser.HamComma, // 24  36
Ham4Parser.HamPlus, // 25  37
Ham4Parser.HamMetaalt, // 26  38
Ham4Parser.HamClocku, // 27  39
Ham4Parser.HamClockul, // 28  40
Ham4Parser.HamClockl, // 29  41
Ham4Parser.HamClockdl, // 2a  42
Ham4Parser.HamClockd, // 2b  43
Ham4Parser.HamClockdr, // 2c  44
Ham4Parser.HamClockr, // 2d  45
Ham4Parser.HamClockur, // 2e  46
Ham4Parser.HamClockfull, // 2f  47
Ham4Parser.HamSymmpar, // 30  48
Ham4Parser.HamSymmlr, // 31  49
Ham4Parser.HamFist, // 32  50
Ham4Parser.HamFlathand, // 33  51
Ham4Parser.HamFinger2, // 34  52
Ham4Parser.HamFinger23, // 35  53
Ham4Parser.HamFinger23spread, // 36  54
Ham4Parser.HamFinger2345, // 37  55
Ham4Parser.HamThumboutmod, // 38  56
Ham4Parser.HamThumbacrossmod, // 39  57
Ham4Parser.HamPinch12, // 3a  58
Ham4Parser.HamPinchall, // 3b  59
Ham4Parser.HamPinch12open, // 3c  60
Ham4Parser.HamCee12, // 3d  61
Ham4Parser.HamCeeall, // 3e  62
Ham4Parser.HamCee12open, // 3f  63
Ham4Parser.HamThumbopenmod, // 40  64
Ham4Parser.HamFingerstraightmod, // 41  65
Ham4Parser.HamFingerbendmod, // 42  66
Ham4Parser.HamFingerhookedmod, // 43  67
Ham4Parser.HamNondominant, // 44  68
Ham4Parser.HamDoublebent, // 45  69
Ham4Parser.HamDoublehooked, // 46  70
ttUnused, // 47  71
Ham4Parser.HamExtfingeru, // 48  72
Ham4Parser.HamExtfingerur, // 49  73
Ham4Parser.HamExtfingerr, // 4a  74
Ham4Parser.HamExtfingerdr, // 4b  75
Ham4Parser.HamExtfingerd, // 4c  76
Ham4Parser.HamExtfingerdl, // 4d  77
Ham4Parser.HamExtfingerl, // 4e  78
Ham4Parser.HamExtfingerul, // 4f  79
Ham4Parser.HamExtfingerol, // 50  80
Ham4Parser.HamExtfingero, // 51  81
Ham4Parser.HamExtfingeror, // 52  82
Ham4Parser.HamExtfingeril, // 53  83
Ham4Parser.HamExtfingeri, // 54  84
Ham4Parser.HamExtfingerir, // 55  85
Ham4Parser.HamExtfingerui, // 56  86
Ham4Parser.HamExtfingerdi, // 57  87
Ham4Parser.HamExtfingerdo, // 58  88
Ham4Parser.HamExtfingeruo, // 59  89
ttUnused, // 5a  90
ttUnused, // 5b  91
ttUnused, // 5c  92
Ham4Parser.HamEarlobe, // 5d  93
Ham4Parser.HamNostrils, // 5e  94
Ham4Parser.HamShouldertop, // 5f  95
Ham4Parser.HamPalmu, // 60  96
Ham4Parser.HamPalmur, // 61  97
Ham4Parser.HamPalmr, // 62  98
Ham4Parser.HamPalmdr, // 63  99
Ham4Parser.HamPalmd, // 64 100
Ham4Parser.HamPalmdl, // 65 101
Ham4Parser.HamPalml, // 66 102
Ham4Parser.HamPalmul, // 67 103
Ham4Parser.HamReplace, // 68 104
Ham4Parser.HamArmextended, // 69 105
Ham4Parser.HamBehind, // 6a 106
Ham4Parser.HamEtc, // 6b 107
Ham4Parser.HamOrirelative, // 6c 108
Ham4Parser.HamTongue, // 6d 109
Ham4Parser.HamTeeth, // 6e 110
Ham4Parser.HamStomach, // 6f 111
Ham4Parser.HamNeutralspace, // 70 112
Ham4Parser.HamHead, // 71 113
Ham4Parser.HamHeadtop, // 72 114
Ham4Parser.HamForehead, // 73 115
Ham4Parser.HamEyebrows, // 74 116
Ham4Parser.HamEyes, // 75 117
Ham4Parser.HamNose, // 76 118
Ham4Parser.HamEar, // 77 119
Ham4Parser.HamCheek, // 78 120
Ham4Parser.HamLips, // 79 121
Ham4Parser.HamChin, // 7a 122
Ham4Parser.HamUnderchin, // 7b 123
Ham4Parser.HamNeck, // 7c 124
Ham4Parser.HamShoulders, // 7d 125
Ham4Parser.HamChest, // 7e 126
Ham4Parser.HamStomach, // 7f 127
Ham4Parser.HamBelowstomach, // 80 128
Ham4Parser.HamLrbeside, // 129
Ham4Parser.HamLrat, // 130
Ham4Parser.HamUpperarm, // 131
Ham4Parser.HamElbow, // 132
Ham4Parser.HamElbowinside, // 133
Ham4Parser.HamLowerarm, // 134
Ham4Parser.HamWristback, // 135
Ham4Parser.HamWristpulse, // 136
Ham4Parser.HamThumbball, // 137
Ham4Parser.HamPalm, // 138
Ham4Parser.HamHandback, // 139
Ham4Parser.HamThumb, // 140
Ham4Parser.HamIndexfinger, // 141
Ham4Parser.HamMiddlefinger, // 142
Ham4Parser.HamRingfinger, // 143
Ham4Parser.HamPinky, // 144
Ham4Parser.HamThumbside, // 145
Ham4Parser.HamPinkyside, // 146
Ham4Parser.HamBetween, // 147
Ham4Parser.HamFingertip, // 148
Ham4Parser.HamFingernail, // 149
Ham4Parser.HamFingerpad, // 150
Ham4Parser.HamFingermidjoint, // 151
Ham4Parser.HamFingerbase, // 152
Ham4Parser.HamFingerside, // 153
Ham4Parser.HamWristtopulse, // 154
Ham4Parser.HamWristtoback, // 155
Ham4Parser.HamWristtothumb, // 156
Ham4Parser.HamWristtopinky, // 157
Ham4Parser.HamCoreftag, // 158
Ham4Parser.HamCorefref, // 159
Ham4Parser.HamNomotion, // 160
Ham4Parser.HamMoveu, // 161
Ham4Parser.HamMoveur, // 162
Ham4Parser.HamMover, // 163
Ham4Parser.HamMovedr, // 164
Ham4Parser.HamMoved, // 165
Ham4Parser.HamMovedl, // 166
Ham4Parser.HamMovel, // 167
Ham4Parser.HamMoveul, // 168
Ham4Parser.HamMoveol, // 169
Ham4Parser.HamMoveo, // 170
Ham4Parser.HamMoveor, // 171
Ham4Parser.HamMoveil, // 172
Ham4Parser.HamMovei, // 173
Ham4Parser.HamMoveir, // 174
Ham4Parser.HamMoveui, // 175
Ham4Parser.HamMovedi, // 176
Ham4Parser.HamMovedo, // 177
Ham4Parser.HamMoveuo, // 178
Ham4Parser.HamMovecross, // 179
Ham4Parser.HamMovex, // 180
Ham4Parser.HamSmallmod, // 181
Ham4Parser.HamLargemod, // 182
Ham4Parser.HamArcl, // 183
Ham4Parser.HamArcu, // 184
Ham4Parser.HamArcr, // 185
Ham4Parser.HamArcd, // 186
Ham4Parser.HamWavy, // 187
Ham4Parser.HamZigzag, // 188
Ham4Parser.HamFingerplay, // 189
Ham4Parser.HamParbegin, // 190
Ham4Parser.HamParend, // 191
Ham4Parser.HamCircleo, // 192
Ham4Parser.HamCirclei, // 193
Ham4Parser.HamCircled, // 194
Ham4Parser.HamCircleu, // 195
Ham4Parser.HamCirclel, // 196
Ham4Parser.HamCircler, // 197
Ham4Parser.HamIncreasing, // 198
Ham4Parser.HamDecreasing, // 199
Ham4Parser.HamClose, // 200
Ham4Parser.HamTouch, // 201
Ham4Parser.HamInterlock, // 202
Ham4Parser.HamCross, // 203
Ham4Parser.HamFast, // 204
Ham4Parser.HamSlow, // 205
Ham4Parser.HamTense, // 206
Ham4Parser.HamRest, // 207
Ham4Parser.HamHalt, // 208
Ham4Parser.HamRepeatfromstart, // 209
Ham4Parser.HamRepeatfromstartseveral, // 210
Ham4Parser.HamRepeatcontinue, // 211
Ham4Parser.HamRepeatcontinueseveral, // 212
Ham4Parser.HamSeqbegin, // 213
Ham4Parser.HamSeqend, // 214
Ham4Parser.HamAlternatingmotion, // 215
Ham4Parser.HamRepeatreverse, // 216
Ham4Parser.HamBrushing, // 217
Ham4Parser.HamNonipsi, // 218
ttUnused, // 219
Ham4Parser.HamEllipseh, // 220
Ham4Parser.HamEllipseur, // 221
Ham4Parser.HamEllipsev, // 222
Ham4Parser.HamEllipseul, // 223
Ham4Parser.HamMime, // 224
Ham4Parser.HamAltbegin, // 225
Ham4Parser.HamAltend, // 226
Ham4Parser.HamNodding, // 227
Ham4Parser.HamSwinging, // 228
Ham4Parser.HamTwisting, // 229
Ham4Parser.HamStircw, // 230
Ham4Parser.HamStirccw, // 231
ttUnused, // 232
ttUnused, // 233
ttUnused, // 234
ttUnused, // 235
Ham4Parser.HamFusionbegin, // 236
Ham4Parser.HamFusionend, // 237
ttUnused, // 238
ttUnused, // 239
Ham4Parser.HamCircleul, // 240
Ham4Parser.HamCircledr, // 241
Ham4Parser.HamCircleur, // 242
Ham4Parser.HamCircledl, // 243
Ham4Parser.HamCircleol, // 244
Ham4Parser.HamCircleir, // 245
Ham4Parser.HamCircleor, // 246
Ham4Parser.HamCircleil, // 247
Ham4Parser.HamCircledo, // 248
Ham4Parser.HamCircleui, // 249
Ham4Parser.HamCircledi, // 250
Ham4Parser.HamCircleuo, // 251
ttUnused, // 252
ttUnused, // 253
Ham4Parser.HamNbs, // 254
ttUnused // 255
];
Token = org.antlr.runtime.Token;
CommonToken = org.antlr.runtime.CommonToken;
HamLexer = class HamLexer {
constructor(hamSignCharCodes, tokenNames) {
this.hamSignCharCodes = hamSignCharCodes;
this.tokenNames = tokenNames;
this.hamSignLength = this.hamSignCharCodes.length;
if (typeof lggr.debug === "function") {
lggr.debug(`Lex: Overridden Input: ${this.hamSignCharCodes} length=${this.hamSignLength}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: Tokens: ${this.tokenNames}`);
}
this.iScan = 0;
this.lMark = -1;
}
seek(ix) {
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: seek(${ix}) called`);
}
return this.iScan = ix;
}
rewind(ix) {
if (ix != null) {
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: rewind(${ix}) called`);
}
return this.iScan = ix;
} else {
if (typeof lggr.trace === "function") {
lggr.trace("Lex: rewind() called");
}
if (this.lMark >= 0) {
return this.iScan = this.lMark;
}
}
}
mark() {
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: mark() yeilds ${this.iScan}`);
}
this.lMark = this.iScan;
return this.iScan;
}
index() {
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: index() yeilds ${this.iScan}`);
}
return this.iScan;
}
tokName(i) {
if (i === EOF) {
return "<EOF>";
} else if (i === ttUnused) {
return "<UNUSED>";
} else {
return this.tokenNames[i];
}
}
getType(i, tag) {
var ich, res;
res = Token.EOF;
if (i >= 0 && i < this.hamSignLength) {
ich = this.hamSignCharCodes.charCodeAt(i);
res = ich < hamLimit ? ttMap[ich] : ttUnused;
}
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: at ${this.iScan} getType(${i}) for ${tag} yeilds ${res}=${this.tokName(res)}`);
}
return res;
}
getToken(i) {
var ttype;
ttype = this.getType(i, "getToken");
return new CommonToken(ttype, `${this.tokName(ttype)}{${i}}`);
}
LA(ah) {
var typ;
typ = ah === 0 ? EOF : ah < 0 ? getType(this.iScan + ah, "LA") : this.getType(this.iScan + ah - 1, "LA");
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: LA(${ah}) yeilds ${typ}`);
}
return typ;
}
LT(ah) {
if (typeof lggr.trace === "function") {
lggr.trace(`Lex: LT(${ah}) calls getToken`);
}
if (ah === 0 || (this.iScan + ah) < 0) {
return null;
} else if (ah < 0) {
return this.getToken(this.iScan + ah);
} else {
return this.getToken(this.iScan + ah - 1);
}
}
consume() {
this.iScan++;
return typeof lggr.trace === "function" ? lggr.trace(`Lex: consume() now ${this.iScan}`) : void 0;
}
};
// Export
cwaenv.add(HamLexer, "HamLexer");
// (End HamLexer.coffee)
}).call(this);
// -------- HMLBuilder.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   A DOM creator for Gestural SiGML
var Data, Defs, HMLBuilder, Logger, cwaenv, document, lggr;
cwaenv = this.getCWAEnv();
document = this.document;
Data = cwaenv.get("Data");
Defs = cwaenv.get("HNSDefs");
Logger = cwaenv.get("Logger");
// Enhanced if run from HtoG tool
lggr = Logger.get("SiGML");
HMLBuilder = class HMLBuilder {
constructor() {
this.doc = Data.toDOM("<sign/>");
if (typeof lggr.debug === "function") {
lggr.debug("HML: HMLBuilder: Sign document created");
}
}
newHMLElement(tag) {
if (typeof lggr.trace === "function") {
lggr.trace(`HML: newHMLElement(${tag})`);
}
return this.doc.createElement(tag);
}
// newHMLAttr: Not used from HMLGen
// newHMLComment: Not used from HMLGen
wrapperEl(tag, inner) {
var wel;
if (typeof lggr.trace === "function") {
lggr.trace(`HML: wrapperEl(${tag})`);
}
wel = this.newHMLElement(tag);
wel.appendChild(inner);
return wel;
}
wrapPair(tag, inner0, inner1) {
var wel;
if (typeof lggr.trace === "function") {
lggr.trace(`HML: wrapPair(${tag})`);
}
wel = this.wrapperEl(tag, inner0);
wel.appendChild(inner1);
return wel;
}
wrapIfNeeded(tag, el) {
var elIsOK;
elIsOK = el.tagName === tag && !(el.hasAttributes());
if (typeof lggr.trace === "function") {
lggr.trace(`HML: wrapIfNeeded(${tag}) Needed is ${elIsOK}`);
}
if (elIsOK) {
return el;
} else {
return this.wrapperEl(tag, el);
}
}
stripParentIfNotNeeded(el) {
var child, res;
if (typeof lggr.trace === "function") {
lggr.trace("HML: stripParentIfNotNeeded");
}
res = el;
// Assume always an element
child = el.firstChild;
if (typeof lggr.trace === "function") {
lggr.trace(`HML: Child ${child} Element name ${el.tagName}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`HML: Element\n${Data.ppDOM(el)}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`HML: Child\n${Data.ppDOM(child)}`);
}
//for elm in el.childNodes
//  lggr.trace? "HML: Child elem\n#{Data.ppDOM elm}"
if (el.tagName === (child != null ? child.tagName : void 0) && !(el.hasAttributes())) {
if (typeof lggr.trace === "function") {
lggr.trace("HML: stripParentIfNotNeeded removing child");
}
res = el.removeChild(child);
}
return res;
}
elementFromList(al, etag) {
var e, elmem, i, ix, len;
if (typeof lggr.trace === "function") {
lggr.trace(`HML: elementFromList ${etag} length ${al.length}`);
}
if (al.length === 1) {
return al[0];
} else {
e = this.newHMLElement(etag);
for (ix = i = 0, len = al.length; i < len; ix = ++i) {
elmem = al[ix];
if (typeof lggr.trace === "function") {
lggr.trace(`HML: elementFromList ${etag} append child ${ix} ${elmem.tagName}`);
}
e.appendChild(elmem);
}
return e;
}
}
// insertNonManual: Defined below
// setDocRoot: Not used from HMLGen
// parseElement: Not used from HMLGen
rootEl(inner) {
this.doc.documentElement.appendChild(inner);
return this.doc;
}
appendChildList(el, chl) {
var chlel, i, len, results;
results = [];
for (i = 0, len = chl.length; i < len; i++) {
chlel = chl[i];
// Now checking for null elements
results.push(this.checkedAppendChild(el, chlel));
}
return results;
}
checkedAppendChildList(el, chl) {
if (chl != null) {
return this.appendChildList(el, chl);
}
}
checkedAppendChild(el, ch) {
if (ch != null) {
return el.appendChild(ch);
}
}
checkedSetAttr(el, aname, aval) {
if (aval != null) {
if (typeof lggr.trace === "function") {
lggr.trace(`HML: checkedSetAttr: ${aname} set to ${aval}`);
}
return el.setAttribute(aname, aval);
} else {
return typeof lggr.trace === "function" ? lggr.trace(`HML: checkedSetAttr: ${aname} not set`) : void 0;
}
}
checkedSetFlagAttr(el, aname, flagIsTrue) {
if (flagIsTrue) {
return el.setAttribute(aname, "true");
}
}
checkedStringSetFlagAttr(el, aname, aval) {
if (aval === "true") {
if (typeof lggr.trace === "function") {
lggr.trace(`HML: checkedStringSetFlagAttr: ${aname} set to true`);
}
return el.setAttribute(aname, "true");
} else {
return typeof lggr.trace === "function" ? lggr.trace(`HML: checkedStringSetFlagAttr: ${aname} not set for ${aval}`) : void 0;
}
}
// getLSSerializer
// Construct nonmanual element and insert in document
insertNonManual(signel, nmstr) {
var aid, aval, chEl, childtag, fullnmtag, i, len, nmEl, ref;
if (typeof lggr.debug === "function") {
lggr.debug(`HML: insertNonManual: \"${nmstr}\"`);
}
if (nmstr.length > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`NM: <${Defs.HNS_NONMAN_TAG}>`);
}
nmEl = this.newHMLElement(Defs.HNS_NONMAN_TAG);
ref = nmstr.split(/\s+/);
for (i = 0, len = ref.length; i < len; i++) {
fullnmtag = ref[i];
childtag = this._hnsNMElementTag(fullnmtag);
aid = this._hnsNMAttrName(fullnmtag);
aval = this._hnsNMAttrValueFull(fullnmtag);
if (typeof lggr.trace === "function") {
lggr.trace(`NM: <${childtag} ${aid}=\"${aval}\"/>`);
}
chEl = this.newHMLElement(childtag);
this.checkedSetAttr(chEl, aid, aval);
this.checkedAppendChild(nmEl, chEl);
}
if (typeof lggr.trace === "function") {
lggr.trace(`NM: </${Defs.HNS_NONMAN_TAG}>`);
}
signel.insertBefore(nmEl, signel.firstChild);
return typeof lggr.trace === "function" ? lggr.trace("NM: Inserted") : void 0;
}
}
_hnsNMElementTag(nmtag) {
var ID, ei, hnseltag, mgi, nmi, t;
t = (nmtag.charAt(0)).toLowerCase();
if (t === Defs.MOUTH_PICTURE_LETTER) {
return Defs.HNS_MOUTHPICTURE_TAG;
} else {
mgi = Defs.MOUTH_GESTURE_LETTERS.indexOf(t);
if (0 <= mgi) {
hnseltag = Defs.HNS_MOUTHGESTURE_TAG;
} else {
nmi = Defs.NON_MOUTH_RELATED_LETTERS.indexOf(t);
if (0 <= nmi) {
hnseltag = Defs.NON_MOUTH_RELATED_HML_TAGS[nmi];
if (hnseltag === null) {
// Eyes
ID = (nmtag.substring(1)).toUpperCase();
ei = 0;
while (ei < Defs.EYES_TAG_LISTS.length && (Defs.EYES_TAG_LISTS[ei].indexOf(ID)) < 0) {
ei++;
}
if (ei < Defs.EYES_TAG_LISTS.length) {
hnseltag = Defs.EYE_RELATED_HML_TAGS[ei];
} else {
hnseltag = Defs.HNS_EXTRA_TAG;
}
}
} else {
hnseltag = Defs.HNS_EXTRA_TAG;
}
}
return hnseltag;
}
}
_hnsNMAttrName(nmtag) {
var tagLetter;
tagLetter = (nmtag.charAt(0)).toLowerCase();
if (tagLetter === Defs.MOUTH_PICTURE_LETTER) {
return Defs.PICTURE_ATTR;
} else {
return Defs.TAG_ATTR;
}
}
_hnsNMAttrValueFull(nmtag) {
var htail, htailU, tlL, tlU;
tlL = (nmtag.charAt(0)).toLowerCase();
tlU = tlL.toUpperCase();
htail = nmtag.substring(1);
htailU = tlL === Defs.MOUTH_PICTURE_LETTER ? null : htail.toUpperCase();
if (tlL === Defs.MOUTH_PICTURE_LETTER) {
// Do not encode strings for now
// @_xmlAttrValueString htail
return htail;
} else if (0 <= Defs.MOUTH_GESTURE_LETTERS.indexOf(tlL)) {
return `${tlU}${htailU}`;
} else if (0 <= Defs.NON_MOUTH_RELATED_LETTERS.indexOf(tlL)) {
return htailU;
} else {
return `${tlU}${htailU}`;
}
}
_xmlAttrValueString(aval) {
var abuf, ch, i, len, xs;
abuf = "";
for (i = 0, len = aval.length; i < len; i++) {
ch = aval[i];
xs = Defs.xmlSpecials.indexOf(ch);
abuf += xs < 0 ? ch : Defs.xmlEscapes[xs];
}
return abuf;
}
};
// Static
// Export
cwaenv.add(HMLBuilder, "HMLBuilder");
// (End HMLBuilder.coffee)
}).call(this);
// -------- HNSSign.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   A DOM parser for h-SiGML creating an HNSSign object
//		Combines HNSSign and HNSSignSAXHandler
var Defs, HNSSign, Logger, Node, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Node = cwaenv.get("Node");
Defs = cwaenv.get("HNSDefs");
Logger = cwaenv.get("Logger");
lggr = Logger.get("SiGML");
HNSSign = class HNSSign {
// Static
// Class
constructor(hnsEl) {
this.hnsEl = hnsEl;
this.hnsMan = "";
this.hnsNonMan = "";
this.hnsGloss = null;
this.hnsDuration = null;
this.hnsSpeed = null;
this.hnsTimeScale = null;
this.hnsSignElText = null;
this.hnsErr = null;
this.scanRoot();
if (typeof lggr.debug === "function") {
lggr.debug(`HNSSign: Sign object created for [${this.hnsGloss}]`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Manual:    [${this.hnsMan}]`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Nonmanual: [${this.hnsNonMan}]`);
}
}
scanRoot() {
var ref, ref1, ref2, ref3;
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Root Name ${this.hnsEl.nodeName}`);
}
if (this.hnsEl.nodeName === "hns_sign") {
this.hnsGloss = (ref = this.hnsEl.attributes.getNamedItem("gloss")) != null ? ref.value : void 0;
this.hnsDuration = (ref1 = this.hnsEl.attributes.getNamedItem("duration")) != null ? ref1.value : void 0;
this.hnsSpeed = (ref2 = this.hnsEl.attributes.getNamedItem("speed")) != null ? ref2.value : void 0;
this.hnsTimeScale = (ref3 = this.hnsEl.attributes.getNamedItem("timescale")) != null ? ref3.value : void 0;
return this._scanSign(this.hnsEl);
}
}
_scanSign(el) {
var i, len, nd, ref, results;
ref = el.childNodes;
results = [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Sign Name ${nd.nodeName}`);
}
if (nd.nodeName === "hamnosys_manual") {
results.push(this._scanMan(nd));
} else if (nd.nodeName === "hamnosys_nonmanual") {
results.push(this._scanNonMan(nd));
} else {
results.push(void 0);
}
}
return results;
}
_scanMan(el) {
var hamVal, i, len, nd, ref, results;
ref = el.childNodes;
results = [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
if (!(nd.nodeType === Node.ELEMENT_NODE)) {
continue;
}
hamVal = Defs.hamMap[nd.nodeName];
if (hamVal != null) {
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Man Element Name ${nd.nodeName}=${hamVal.charCodeAt(0)}`);
}
this.hnsMan += hamVal;
} else {
if (typeof lggr.info === "function") {
lggr.info(`HNSSign: Manual Element not recognised: ${nd.nodeName}`);
}
}
// Nothing expected
results.push(this._scanMan(nd));
}
return results;
}
_nonManVal(el) {
var currTag, i, ix, j, k, len, len1, len2, newTok, ref, ref1, ref2, tagMatch, tagVal, tags, testTag, theTag, tok;
theTag = el.tagName;
if (theTag === Defs.HNS_MOUTHPICTURE_TAG) {
tok = Defs.MOUTH_PICTURE_LETTER + el.getAttribute(Defs.PICTURE_ATTR);
} else {
// Treat missing tag attributes as empty string
tagVal = (ref = el.getAttribute(Defs.TAG_ATTR)) != null ? ref : "";
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: NMs: ${theTag} ${tagVal}`);
}
if (theTag === Defs.HNS_MOUTHGESTURE_TAG) {
tok = tagVal;
} else {
tok = "";
// Handle multiple tags separated by |
tags = (tagVal.replace(/\s/g, "")).split("|");
for (i = 0, len = tags.length; i < len; i++) {
currTag = tags[i];
tagMatch = -1;
ref1 = Defs.EYE_RELATED_HML_TAGS;
// Check for an Eye teir
for (ix = j = 0, len1 = ref1.length; j < len1; ix = ++j) {
testTag = ref1[ix];
if (theTag === testTag) {
tagMatch = ix;
}
}
if (tagMatch >= 0) {
newTok = Defs.EYES_LETTER + currTag;
} else {
ref2 = Defs.NON_MOUTH_RELATED_HML_TAGS;
for (ix = k = 0, len2 = ref2.length; k < len2; ix = ++k) {
testTag = ref2[ix];
if (theTag === testTag) {
tagMatch = ix;
}
}
if (tagMatch >= 0) {
newTok = (Defs.NON_MOUTH_RELATED_LETTERS.charAt(tagMatch)) + currTag;
} else {
newTok = currTag;
}
}
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: Tk: ${newTok}`);
}
tok = (tok === "" ? "" : tok + " ") + newTok;
}
}
}
return tok;
}
_scanNonMan(el) {
var hamVal, i, len, nd, ref, results;
ref = el.childNodes;
results = [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
if (!(nd.nodeType === Node.ELEMENT_NODE)) {
continue;
}
hamVal = this._nonManVal(nd);
if (typeof lggr.trace === "function") {
lggr.trace(`HNSSign: NonMan Element Name ${nd.nodeName}: ${hamVal}`);
}
if (this.hnsNonMan.length > 0) {
this.hnsNonMan += " ";
}
this.hnsNonMan += hamVal;
// Nothing expected
results.push(this._scanNonMan(nd));
}
return results;
}
man() {
return this.hnsMan;
}
nonman() {
return this.hnsNonMan;
}
gloss() {
return this.hnsGloss;
}
duration() {
return this.hnsDuration;
}
speed() {
return this.hnsSpeed;
}
timeScale() {
return this.hnsTimeScale;
}
};
// Export
cwaenv.add(HNSSign, "HNSSign");
// (End HNSSign.coffee)
}).call(this);
// -------- XSLT.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Wrapper for XSLT processing
var Data, Logger, XSLT, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
Logger = cwaenv.get("Logger");
lggr = Logger.get("XSLT"); // , "trace", "force"
XSLT = class XSLT {
// Static
// Class Methods
constructor(_xslURI) {
this._xslURI = _xslURI;
if (typeof lggr.trace === "function") {
lggr.trace(`XSLT: Processor creating for ${this._xslURI}`);
}
this._xsltProc = null;
this._hasXSLTP = typeof XSLTProcessor !== "undefined" && XSLTProcessor !== null;
this.load = (Data.fetchText(this._xslURI)).then((xslText) => {
var ssDOM, xsltProc;
if (typeof lggr.debug === "function") {
lggr.debug(`Stylesheet fetched: ${this._xslURI}`);
}
if (this._hasXSLTP) {
ssDOM = Data.toDOM(xslText);
xsltProc = new XSLTProcessor();
xsltProc.importStylesheet(ssDOM);
} else {
xsltProc = new ActiveXObject("Msxml2.DOMDocument.6.0");
xsltProc.validateOnParse = true;
xsltProc.async = false;
xsltProc.loadXML(xslText);
}
this._xsltProc = xsltProc;
if (typeof lggr.debug === "function") {
lggr.debug(`Stylesheet loaded: ${this._xslURI}`);
}
return true;
}).catch((err) => {
if (typeof lggr.debug === "function") {
lggr.debug(`XSLT load: Error for ${this._xslURI}: ${Logger.errDesc(err)}`);
}
return false;
});
if (typeof lggr.debug === "function") {
lggr.debug(`XSLT: Processor created for ${this._xslURI}`);
}
}
apply(theXML) {
var docRes, docTxt, err, xmlTxt, xmldom;
if (typeof lggr.trace === "function") {
lggr.trace(`Stylesheet applying: ${this._xslURI}`);
}
if (this._xsltProc != null) {
try {
if (this._hasXSLTP) {
docRes = this._xsltProc.transformToDocument(theXML, document);
} else {
xmlTxt = Data.mnDOM(theXML);
xmldom = new ActiveXObject("Msxml2.DOMDocument.6.0");
xmldom.validateOnParse = true;
xmldom.async = false;
xmldom.loadXML(xmlTxt);
docTxt = xmldom.transformNode(this._xsltProc);
docRes = Data.toDOM(docTxt);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Stylesheet applied: ${this._xslURI}`);
}
return docRes.documentElement;
} catch (error) {
err = error;
lggr.warn(`XSLT transform failure: ${err}`);
return null;
}
} else {
return lggr.warn("XSLT transform unavailable: Need to load XSLT processor");
}
}
};
// Export
cwaenv.add(XSLT, "XSLT");
// (End XSLT.coffee)
}).call(this);
// -------- HtoG.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Convert HamNoSys SiGML to Gestural SiGML
var Data, HMLBuilder, HNSSign, Ham4Parser, HamLexer, HtoG, Logger, Node, XSLT, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
Node = cwaenv.get("Node");
HNSSign = cwaenv.get("HNSSign");
HamLexer = cwaenv.get("HamLexer");
Ham4Parser = cwaenv.get("Ham4Parser");
HMLBuilder = cwaenv.get("HMLBuilder");
XSLT = cwaenv.get("XSLT");
Logger = cwaenv.get("Logger");
lggr = Logger.get("SiGML"); // , "trace"
// For cyclic objects
// Util            = require 'util'
HtoG = class HtoG {
constructor(XSLTURI, hmlLog = false) {
this.XSLTURI = XSLTURI;
this.hmlLog = hmlLog;
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Creating HtoG processor for \"${this.XSLTURI}\"`);
}
this.XSLTProc = new XSLT(this.XSLTURI);
}
treeString(el, lev = 0) {
var elStr, i, j, n, ref, res;
res = "";
if (el) {
elStr = el.toString();
res = `(${elStr}`;
if (false && (lev === 0 || elStr.startsWith('<'))) {
res = res + ` [${Data.mnJSON(el)}]`;
}
n = el.getChildCount();
for (i = j = 0, ref = n; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
res += " " + this.treeString(el.getChild(i), lev + 1);
}
res += ")";
}
return res;
}
// Sort attributes into name order
_sortAttrs(el) {
var attList, attr, j, k, l, len, len1, len2, nd, newList, ref, results;
if (el.hasChildNodes()) {
ref = el.childNodes;
for (j = 0, len = ref.length; j < len; j++) {
nd = ref[j];
if (nd.nodeType === Node.ELEMENT_NODE || nd.nodeType === Node.DOCUMENT_NODE) {
this._sortAttrs(nd);
}
}
}
if (el.nodeType === Node.ELEMENT_NODE && el.hasAttributes() && el.attributes.length > 1) {
attList = (function() {
var k, len1, ref1, results;
ref1 = el.attributes;
results = [];
for (k = 0, len1 = ref1.length; k < len1; k++) {
attr = ref1[k];
results.push(attr);
}
return results;
})();
// attNames = (attr.name for attr in attList)
// lggr.trace? "Unsorted: #{JSON.stringify attNames}"
newList = attList.sort(function(a, b) {
if (a.name > b.name) {
return 1;
} else if (a.name < b.name) {
return -1;
} else {
return 0;
}
});
for (k = 0, len1 = attList.length; k < len1; k++) {
attr = attList[k];
// newNames = (attr.name for attr in newList)
// lggr.trace? "Sorted: #{JSON.stringify newNames}"
el.removeAttribute(attr.name);
}
results = [];
for (l = 0, len2 = newList.length; l < len2; l++) {
attr = newList[l];
results.push(el.setAttribute(attr.name, attr.value));
}
return results;
}
}
sortDocAttrs(doc) {
this._sortAttrs(doc.documentElement);
return doc;
}
// Process an a hns_sign element to hamgestural_sign
_parseHSign(sigDoc) {
var builder, errReport, hamString, hmlDoc, lexer, parser, root, sigtrans, sigtree, treewalker;
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: SiGML:\n${Data.ppDOM(sigDoc)}`);
}
hmlDoc = new HNSSign(sigDoc);
hamString = hmlDoc.man();
lexer = new HamLexer(hamString, Ham4Parser.tokenNames);
parser = new Ham4Parser(lexer);
// parser.setLogLevel 440 # Set Logging
root = (parser.hamsinglesign()).getTree();
errReport = parser.checkErrors();
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Updated Parse errors: ${Data.mnJSON(errReport)}`);
}
// JRWG Assume valid tree even after errors : But still need to report errors
if (root != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: After parsing: ${this.treeString(root)}`);
}
treewalker = new Ham4HMLGen(new org.antlr.runtime.tree.CommonTreeNodeStream(root));
// treewalker.setLogLevel 440
builder = new HMLBuilder();
try {
sigtree = treewalker.hamsignseq(builder);
// Add nonmanuals
builder.insertNonManual(sigtree.documentElement, hmlDoc.nonman());
// Set sign attributes
builder.checkedSetAttr(sigtree.documentElement, "gloss", hmlDoc.gloss());
builder.checkedSetAttr(sigtree.documentElement, "duration", hmlDoc.duration());
builder.checkedSetAttr(sigtree.documentElement, "speed", hmlDoc.speed());
builder.checkedSetAttr(sigtree.documentElement, "timescale", hmlDoc.timeScale());
if (this.hmlLog) {
Logger.OrigWarnLogger(`########  HML -- gloss: ${hmlDoc.gloss()}  ########\n${Data.ppDOM(sigtree)}\n`);
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Gloss: \"${hmlDoc.gloss()}\". After tree building:\n${Data.ppDOM(sigtree)}`);
}
}
// sigtrans = @XSLTProc.applyXSLT sigtree # JRWG old
sigtrans = this.XSLTProc.apply(sigtree);
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: After XSLT processing:\n${Data.ppDOM(sigtrans)}`);
}
// JRWG Assume no errors for now : But keep earlier messages
// errReport.sigDoc = sigtrans
errReport.errDoc = sigtrans;
} catch (error) {
// Expect an error has been caught earlier
if (errReport.errNum === 0) {
if (typeof lggr.debug === "function") {
lggr.debug("HtoG: Failed tree building or XSLT transformation");
}
errReport = {
errNum: Logger.errNum('EPERM'),
errMsg: 'Failed tree building or XSLT transformation'
};
}
} // true
}
return errReport;
}
// Clean a node of Text and Comment children
_cleanSiGML(parent) {
var cn, ix, j, k, len, len1, nd, nds, ref;
// Problems if not handled as array: but Array.from not available in IE
nds = [];
ref = parent.childNodes;
for (j = 0, len = ref.length; j < len; j++) {
cn = ref[j];
if (cn != null) {
nds.push(cn);
}
}
for (ix = k = 0, len1 = nds.length; k < len1; ix = ++k) {
nd = nds[ix];
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: SiGML Element ${ix}: ${nd.nodeType} ${nd.nodeName}`);
}
switch (nd.nodeType) {
case Node.COMMENT_NODE:
case Node.TEXT_NODE:
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: Removing ${ix}: ${nd.nodeType} ${nd.nodeName}`);
}
parent.removeChild(nd);
break;
default:
if (nd.childNodes != null) {
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: Recursive call ${ix}`);
}
this._cleanSiGML(nd);
}
}
}
return parent;
}
// Process a complete SiGML DOM
_parseSiGML(sigDoc) {
var errObj, gloss, j, len, nd, nom, parseRes, ref, ref1, ref2, signIx, typ;
errObj = null;
signIx = 0;
if (sigDoc.documentElement != null) {
if (typeof lggr.info === "function") {
lggr.info("HtoG: SiGML document starts");
}
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: ppDOM orig:\n${Data.ppDOM(sigDoc)}`);
}
this._cleanSiGML(sigDoc);
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: ppDOM clean:\n${Data.ppDOM(sigDoc)}`);
}
ref = sigDoc.documentElement.childNodes;
for (j = 0, len = ref.length; j < len; j++) {
nd = ref[j];
nom = nd != null ? nd.nodeName : void 0;
typ = nd != null ? nd.nodeType : void 0;
if (typeof lggr.trace === "function") {
lggr.trace(`HtoG: SiGML Element: ${typ} ${nom}`);
}
if (nom === "hns_sign") {
signIx++;
gloss = (ref1 = nd.attributes.getNamedItem("gloss")) != null ? ref1.value : void 0;
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Sign ${signIx}: ${nom} gloss: ${gloss}`);
}
parseRes = this._parseHSign(nd);
if (parseRes.errNum === 0) {
sigDoc.documentElement.replaceChild(parseRes.errDoc, nd);
} else {
// Chain in new error
parseRes.errDetail = `Sign: ${signIx} Gloss: \"${gloss}\" ${parseRes.errDetail}`;
if (errObj != null) {
parseRes.errLink = errObj;
}
errObj = parseRes;
sigDoc.documentElement.removeChild(nd);
}
} else if (nom === "hamgestural_sign") {
signIx++;
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Sign ${signIx}: ${nom} gloss: ${(ref2 = nd.attributes.getNamedItem("gloss")) != null ? ref2.value : void 0}`);
}
}
}
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: ppDOM After:\n${Data.ppDOM(sigDoc)}`);
}
if (typeof lggr.debug === "function") {
lggr.debug("HtoG: SiGML document ends");
}
} else {
// Should have no errObj here
if (errObj != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`HtoG: Unexpected error ${Logger.errDesc(errObj)}`);
}
}
errObj = {
errNum: Logger.errNum('EINVAL'),
errMsg: 'Invalid SiGML file'
};
}
return errObj != null ? errObj : {
errNum: 0,
errMsg: 'SiGML document processed',
errDoc: sigDoc
};
}
parseHtoGDom(sigDoc, theCB) {
// Ensure XSLT processor is loaded before proceeding
return this.XSLTProc.load.then((stat) => {
if (stat) {
return theCB(this._parseSiGML(sigDoc)); // res.sigDoc
} else {
return theCB({
errNum: Logger.errNum('EPERM'),
errMsg: 'Could not create XSLT Processor',
errRef: this.XSLTURI
});
}
});
}
parseHtoGText(sigTxt, theCB) {
var errObj, errXML, sigDoc;
errObj = null;
errXML = (level, msg) => {
var newErr;
newErr = {
errNum: Logger.errNum('EPERM'),
errMsg: 'XML format error',
errDetail: `${level}: ${msg}`
};
if (errObj != null) {
newErr.errLink = errObj;
}
return errObj = newErr;
};
// Unclear why not just using sigTxt or sigTxt.toString()
sigDoc = Data.toDOM(`${sigTxt}`, errXML);
if (errObj != null) {
return theCB(errObj);
} else {
return this.parseHtoGDom(sigDoc, theCB);
}
}
// JRWG Only used in TestHam4Parser.html : Revisit error handling there when reviewing
parseHtoGURI(sigURI, theCB) {
return (Data.fetchText(sigURI)).then((sigDoc) => {
return this.parseHtoGText(sigDoc, theCB);
}).catch((err) => {
return theCB(err);
});
}
setHMLLog(flag) {
return this.hmlLog = flag;
}
};
// Export
cwaenv.add(HtoG, "HtoG");
// (End HtoG.coffee)
}).call(this);
// -------- AnimgenInstance.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AGI, AsyncQueue, AvCache, Config, Data, HtoG, Logger, allg, cwaenv, document, lggr, theConfig;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
AvCache = cwaenv.get("AvCache");
Config = cwaenv.get("Config");
HtoG = cwaenv.get("HtoG");
AsyncQueue = cwaenv.get("AsyncQueue");
Logger = cwaenv.get("Logger");
lggr = Logger.get("AGI"); // , "trace", "force"  # "debug"
allg = Logger.get("AGLite"); //, "trace", "force"  # "debug"
document = this.document;
theConfig = Config != null ? Config.theConfig : void 0;
AGI = (function() {
//--------
class AGI {
static SetInterface() {
// Check environment
// lggr.debug? "AGI: SetInterface: Starting"
// unless Module? then lggr.debug? "Module undefined"
// unless Module.cwrap? then lggr.debug? "Module.cwrap undefined"
// unless Module["cwrap"]? then lggr.debug? "Module.cwrap undefined"
// unless Module.asm? then lggr.debug? "Module.asm undefined"
// if Module?
//   for nom, val of Module
//     lggr.debug? "Module has #{nom}"
// Wrap C++ functions
AGI.animInit = Module.cwrap('animgenInit', ['number'], []);
AGI.animAlloc = Module.cwrap('animgenAllocate', ['number'], ['number', 'string', 'number', 'number', 'number']);
AGI.animSetOutput = Module.cwrap('animgenSetOutput', ['number'], ['number', 'string']);
AGI.animSetAvatar = Module.cwrap('animgenSetAvatar', ['number'], ['number', 'string', 'string', 'string', 'string', 'string']);
AGI.animSetSequence = Module.cwrap('animgenSetSequence', ['number'], ['number', 'number']);
AGI.animGenerateFrames = Module.cwrap('animgenGenerateFrames', ['number'], ['number', 'string']);
AGI.animDeAlloc = Module.cwrap('animgenDeAllocate', ['number'], ['number']);
AGI.animTerm = Module.cwrap('animgenTerminate', ['number'], []);
// Testing
AGI.main = Module.cwrap('main', ['number'], []);
// Set up callbacks
Module.CB_SeqStart = function(jagid, status, nframes) {
return (AGI.Get(jagid)).SeqStart(status, nframes);
};
Module.CB_SignStart = function(jagid, gloss, signIx, frameIx) {
return (AGI.Get(jagid)).SignStart(gloss, signIx, frameIx);
};
Module.CB_SeqEnd = (jagid) => {
return (AGI.Get(jagid)).SeqEnd();
};
Module.CB_FrameStart = (jagid, nmorphs, nbones, time, duration) => {
return (AGI.Get(jagid)).FrameStart(nmorphs, nbones, time, duration);
};
Module.CB_Morph = function(jagid, morph) {
return (AGI.Get(jagid)).Morph(morph);
};
Module.CB_Bone = function(jagid, bone) {
return (AGI.Get(jagid)).Bone(bone);
};
Module.Log_Debug = function(msg) {
return typeof allg.debug === "function" ? allg.debug(msg) : void 0;
};
return Module.Log_Trace = function(msg) {
return typeof allg.trace === "function" ? allg.trace(msg) : void 0;
};
}
static Valid(id) {
return id >= 0 && id < AGI.MAX;
}
// JRWG: For now create a Valid instance if not present: Only testing CBs from EMCC
// JRWG Does or null add anything?
static Get(id) {
return AGI.instances[id] || null;
}
// @Get = (id) -> AGI.instances[id] ?= if AGI.Valid id then new AGI id else null
static Terminate() {
if (typeof lggr.debug === "function") {
lggr.debug("Terminate: Called");
}
if (AGI.isInitialised) {
AGI.isInitialised = false;
if (AGI.animTerm()) {
return true;
} else {
lggr.warn("Terminate: Failed to terminate");
return false;
}
} else {
lggr.warn("Terminate: Not running");
return false;
}
}
static Alloc(errPath = null, errAppend = false, errNoErr = true, datefmt = 0) {
var id, newAGI;
if (typeof lggr.debug === "function") {
lggr.debug("Alloc: Called");
}
newAGI = null;
if (AGI.isInitialised) {
id = 0;
while ((AGI.Valid(id)) && (AGI.Get(id)) !== null) {
id++;
}
if (AGI.Valid(id)) {
if (typeof lggr.trace === "function") {
lggr.trace(`Alloc: Available instance ${id}`);
}
if (AGI.animAlloc(id, errPath, errAppend, errNoErr, datefmt)) {
newAGI = AGI.instances[id] = new AGI(id);
if (typeof lggr.debug === "function") {
lggr.debug(`Alloc: Allocated instance ${id}`);
}
} else {
lggr.warn(`Alloc: Failed to allocate instance ${id}`);
}
} else {
lggr.warn("Alloc: All Instances already allocated");
}
} else {
lggr.warn("Alloc: Animgen failed to initialise");
}
return newAGI;
}
constructor(jagid1) {
this.jagid = jagid1;
//----------
this.state = AGI.STATE.Alloc;
this.doneProm = null;
this.doneResolve = null;
this.avatar = null;
this.guiPanel = null;
// JRWG Seems to be set but never used. Hence seems safe to omit including Config
this.fps = theConfig != null ? theConfig.animgenFPS : void 0;
this.sigmlSigns = null; // Not sure this is used (as opposed to a static sigmlSigns)
this.seqFrames = 0;
this.currSigns = null;
this.currFrames = this.currGloss = this.currSignIx = this.currFrameIx = null;
this.frameMorphs = this.frameBones = this.frameTime = this.frameDur = null;
if (typeof lggr.debug === "function") {
lggr.debug(`Created AGI ${this.jagid}`);
}
}
// "Instance" members.
SetAvatar(newAv, avXMLs, gui = 0) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetAvatar ${newAv}: Called for instance=${this.jagid} state=${this.state} gui=${gui}`);
}
if (this.state === AGI.STATE.Alloc) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> ???`);
}
//       allg.debug? "Length #{avXMLs[1].length}\n<<<< avXMLs[1]\n#{avXMLs[1]}\n>>>> avXMLs[1]"
//       allg.debug? "Length #{avXMLs[0].length}\n<<<< avXMLs[0]\n#{avXMLs[0]}\n>>>> avXMLs[0]"
//       allg.debug? "Length #{avXMLs[2].length}\n<<<< avXMLs[2]\n#{avXMLs[2]}\n>>>> avXMLs[2]"
//       allg.debug? "Length #{avXMLs[3].length}\n<<<< avXMLs[3]\n#{avXMLs[3]}\n>>>> avXMLs[3]"
// Note order of XMLs puts COMMON config second
if (AGI.animSetAvatar(this.jagid, newAv, avXMLs[1], avXMLs[0], avXMLs[2], avXMLs[3])) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> true`);
}
this.avatar = newAv;
this.guiPanel = gui;
this.state = AGI.STATE.AvatarSet;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> false`);
}
lggr.warn(`SetAvatar ${newAv}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetAvatar ${newAv}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
SetSequence(fps) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetSequence ${fps}: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> ???`);
}
if (AGI.animSetSequence(this.jagid, fps)) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> true`);
}
this.fps = fps;
this.state = AGI.STATE.SeqReady;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> false`);
}
lggr.warn(`SetSequence ${fps}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetSequence ${fps}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
EndSequence() {
if (typeof lggr.debug === "function") {
lggr.debug(`EndSequence: Called for instance ${this.jagid} (${this.state})`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.AvatarSet;
if (this.doneResolve != null) {
if (typeof lggr.debug === "function") {
lggr.debug("EndSequence: Calling doneResolve");
}
}
if (typeof this.doneResolve === "function") {
this.doneResolve(null);
}
return true;
} else {
lggr.warn(`EndSequence: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
// Without @casCB callback, signs are accumulated in @currSigns by SignStart and SeqEnd CB via _endSign
GenerateFrames(sigml, casCB = null) {
var res, theSigns;
this.casCB = casCB;
if (typeof lggr.debug === "function") {
lggr.debug(`GenerateFrames: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.SeqInProgress;
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ???`);
}
res = AGI.animGenerateFrames(this.jagid, sigml);
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ` + (res ? "true" : "false"));
}
if (!res) {
lggr.warn(`GenerateFrames: Failed for instance ${this.jagid}`);
}
// Assumes only returns when completed
this.state = AGI.STATE.SeqReady;
theSigns = this.currSigns;
this.currSigns = null;
return theSigns;
} else {
lggr.warn(`GenerateFrames: Wrong state for instance ${this.jagid} (${this.state})`);
return null;
}
}
DeAlloc() {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Called for instance ${this.jagid} (${this.state})`);
}
// Check in state to be closed down
if (this.state === AGI.STATE.Alloc || this.state === AGI.STATE.AvatarSet) {
// Deallocate instance
this.state = AGI.STATE.Terminated;
AGI.instances[this.jagid] = null;
if (AGI.animDeAlloc(this.jagid)) {
return true;
} else {
lggr.warn(`DeAlloc: Could not release instance ${this.jagid}`);
return false;
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Wrong state for instance ${this.jagid} (${this.state})`);
}
return false;
}
}
// Callbacks from GenerateFrames
SeqStart(status, nframes) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SeqStart ${this.jagid}: status ${status}. frames ${nframes}`);
}
this.seqFrames = nframes;
return this.currSigns = [];
}
_endFrame() {
var newFrame;
if (this.frameBones) {
newFrame = {
time: this.frameTime,
duration: this.frameDur,
morphs: this.frameMorphs,
bones: this.frameBones
};
this.currFrames.push(newFrame);
return this.frameMorphs = this.frameBones = null;
}
}
FrameStart(nmorphs, nbones, time, duration) {
this._endFrame();
this.frameTime = time;
this.frameDur = duration;
this.frameMorphs = [];
return this.frameBones = [];
}
Morph(newMorph) {
return this.frameMorphs.push(newMorph);
}
Bone(newBone) {
return this.frameBones.push(newBone);
}
_endSign() {
var newSign;
if (this.currFrames) {
this._endFrame();
newSign = {
type: AGI.CB.Sign,
signIndex: this.currSignIx,
gloss: this.currGloss,
baseFrameIndex: this.currFrameIx,
frames: this.currFrames
};
if (this.casCB) {
this.casCB(newSign);
} else {
this.currSigns.push(newSign);
}
return this.currFrames = this.currGloss = null;
}
}
SignStart(gloss, signIx, frameIx) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SignStart ${this.jagid}: gloss ${gloss}. signIx ${signIx}. frameIx ${frameIx}`);
}
this._endSign();
this.currGloss = gloss;
this.currSignIx = signIx;
this.currFrameIx = frameIx;
return this.currFrames = [];
}
SeqEnd() {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SeqEnd ${this.jagid}: Called`);
}
return this._endSign();
}
static PrepInstance(av, gui) {
return new Promise((resolve, reject) => {
var makeNewAGI, theAGI, waitAGIDone;
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Called for ${av}/${gui}`);
}
// Singleton currently
theAGI = AGI.Get(0);
if ((theAGI != null ? theAGI.avatar : void 0) === av && (theAGI != null ? theAGI.guiPanel : void 0) === gui) {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Finds ${av}/${gui}`);
}
return resolve(theAGI);
} else {
if (theAGI != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Needs new ${av}/${gui} but finds ${theAGI != null ? theAGI.avatar : void 0}/${theAGI != null ? theAGI.guiPanel : void 0}`);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Needs new ${av}/${gui} but no Animgen instance set`);
}
}
makeNewAGI = () => {
var avC, cmC, newAGI;
// Deallocate current Instance
// Was: do (AGI.Get 0)?.DeAlloc
if (theAGI != null) {
theAGI.DeAlloc();
}
// No logging for now
newAGI = AGI.Alloc();
if (newAGI == null) {
reject(`PrepInstance: Cannot allocate AnimgenInstance for ${av}/${gui}`);
}
cmC = AvCache.get("COMMON");
avC = AvCache.get(av);
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Awaits ZIP entries to SetAvatar ${av}/${gui}`);
}
return Promise.all([cmC.getZIPEnt("config"), avC.getZIPEnt("config"), avC.getZIPEnt("asd"), avC.getZIPEnt("nonManuals")]).catch((err) => {
lggr.warn(`Prepinstance: Configuration unavailable for ${av}/${gui}: ${err}`);
return reject(`SetAvatar failed for ${av}/${gui} with ${err}`);
}).then((XMLs) => {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Calls SetAvatar ${av}/${gui}`);
}
if (newAGI.SetAvatar(av, XMLs, gui)) {
return resolve(newAGI);
} else {
newAGI.DeAlloc();
return reject(`PrepInstance: SetAvatar failed for ${av}/${gui}`);
}
});
};
waitAGIDone = () => {
theAGI = AGI.Get(0);
if (!AGI.isInitialised) {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone finds Animgen not running");
}
return reject(`waitAGIDone failed for ${av}/${gui}`);
} else if ((theAGI != null) && theAGI.state !== AGI.STATE.AvatarSet) {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone Promise " + (this.doneProm != null ? "exists" : "needed"));
}
if (theAGI.doneProm == null) {
theAGI.doneProm = new Promise((resolveDone, rejectDone) => {
if (typeof lggr.trace === "function") {
lggr.trace("waitAGIDone creating promise");
}
return theAGI.doneResolve = resolveDone;
});
}
return theAGI.doneProm.then(() => {
return waitAGIDone();
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone state OK");
}
return makeNewAGI();
}
};
return waitAGIDone();
}
});
}
static delayTime(fps, speed, tag = "") {
var delay, elapsed, target;
elapsed = Date.now() - this.startTime;
// Assumes a playing rate haigher than effective fps
target = this.totFrames * 700 / (fps * speed);
// Minimum delay 20. Maximum delay 500
delay = Math.min(Math.max(20, target - elapsed), 500);
if (typeof lggr.debug === "function") {
lggr.debug(`${tag} Elapsed ${elapsed} Frames ${this.totFrames} Delay ${delay}`);
}
return delay;
}
// Static Driving routine: Omit SetSequence to add more SiGML
static SiGMLToCAS(sigml, av, gui, fps, speedFun, H2G, CB, drainFun) {
if (typeof lggr.info === "function") {
lggr.info(`SiGMLToCAS: Started for ${av} panel ${gui} FPS ${fps}`);
}
AGI.Ready.then(() => {});
(AGI.PrepInstance(av, gui)).then((theAGI) => {
var genFrames, gloss, i, len, nd, nn, okSigns, procHtoGSiGML, ref, ref1, sigDoc;
this.startTime = Date.now();
this.totFrames = 0;
this.sigmlSigns = 0;
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Started");
}
// Create SiGML Queue
this.sigmlQueue = new AsyncQueue("HorG-SiGML");
sigDoc = Data.toDOM(sigml, function(err, msg) {
return typeof lggr.debug === "function" ? lggr.debug(`Animgen: SiGML malformed: ${err}`) : void 0;
});
ref = (sigDoc != null ? sigDoc.documentElement.childNodes : void 0) || [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
nn = nd != null ? nd.nodeName : void 0;
if (nn === "hamgestural_sign" || nn === "hns_sign") {
gloss = (ref1 = nd.attributes.getNamedItem("gloss")) != null ? ref1.value : void 0;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGML XML has: ${gloss}`);
}
this.sigmlQueue.put({
type: nn,
gloss: gloss,
sigml: "<sigml>" + (Data.mnDOM(nd)) + "</sigml>"
});
}
}
if (this.sigmlQueue.putLen === 0) {
if (typeof lggr.debug === "function") {
lggr.debug("SiGMLToCAS: No valid signs");
}
CB({
type: AGI.CB.Fail,
err: `No valid signs for ${av}`
});
} else {
// Terminate SiGMLQueue
this.sigmlQueue.put(null);
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Ended");
}
// Create GSiGML Queue after completion of SiGML Queue
this.gSigmlQueue = new AsyncQueue("G-SiGML");
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGMLToCAS ${theAGI.jagid} call SetSequence ${av}/${gui} fps ${fps}`);
}
theAGI.SetSequence(fps);
okSigns = 0;
// Process HtoG Queue
procHtoGSiGML = (sign) => {
var procHtoGSign;
procHtoGSign = () => {
var entry;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\" start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\"skipped as draining`);
}
} else {
if (sign.type === "hns_sign") {
entry = new Promise((resolve, reject) => {
var h2gCB;
h2gCB = (res) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applied HtoG`);
}
if (res.errNum !== 0) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: HtoG Errors: ${sign.gloss}`);
}
lggr.warn(`SiGMLToCAS: HtoG Errors: ${Logger.errDesc(res)}`);
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: HtoG Errors:\n${res.errDetail}`);
}
CB({
type: AGI.CB.Skip,
err: "SiGML invalid HNS sign"
});
return resolve({
gloss: sign.gloss
});
} else {
return resolve({
gloss: sign.gloss,
sigml: Data.mnDOM(res.errDoc)
});
}
};
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applying HtoG`);
}
// setTimeout (=> H2G.parseHtoGText sign.sigml, h2gCB), 20 # Try without JRWG
return H2G.parseHtoGText(sign.sigml, h2gCB);
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} transferred`);
}
entry = sign;
}
this.gSigmlQueue.put(entry);
}
return this.sigmlQueue.get(procHtoGSiGML);
};
// Delay as appropriate
if (sign != null) {
// No delay if draining
if (drainFun()) {
return procHtoGSign();
} else {
return setTimeout(procHtoGSign, this.delayTime(fps, speedFun(), "HtoG"));
}
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Ended");
}
return this.gSigmlQueue.put(null);
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Started");
}
this.sigmlQueue.get(procHtoGSiGML);
// Process G-SiGML Queue
genFrames = (sign) => {
var nSigns;
if (sign != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} skipped as draining`);
}
} else {
// Check for valid SiGML after H to G
if (sign.sigml != null) {
nSigns = 1;
if (theAGI.GenerateFrames(sign.sigml, CB)) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} generated ${theAGI.seqFrames} frames`);
}
this.totFrames += theAGI.seqFrames;
okSigns += nSigns;
} else {
CB({
type: AGI.CB.Skip,
err: "SiGML invalid sign"
});
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} has no SiGML`);
}
}
}
// Get next sign
return this.gSigmlQueue.get(genFrames); // No delay here JRWG
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Ended");
}
// Indicate end by sending CB.Done
if (okSigns > 0) {
theAGI.EndSequence();
CB({
type: AGI.CB.Done
});
} else {
CB({
type: AGI.CB.Fail,
err: "SiGML invalid"
});
}
return typeof lggr.info === "function" ? lggr.info(`SiGMLToCAS: SiGMLToCAS for ${av} panel ${gui} Ended. Signs ${okSigns}. Frames ${this.totFrames}`) : void 0;
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Started");
}
this.gSigmlQueue.get(genFrames);
}
return null;
}).catch((msg) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: PrepInstance failed: ${msg}`);
}
return CB({
type: AGI.CB.Fail,
err: `Cannot process SiGML for ${av}`
});
});
return void 0;
}
};
//--------
// "Static" members.
// @static
// Fully serialise for now
AGI.MAX = 1;
AGI.STATE = {
Failed: 0,
Running: 1,
Alloc: 2,
AvatarSet: 3,
SeqReady: 4,
SeqInProgress: 5,
Terminated: 6
};
AGI.CB = {
Unset: 0,
Sign: 1,
Skip: 2,
Done: 3,
Fail: 4
};
// Test for successful initialisation. Possibly unnecessary but could guard calls
AGI.isInitialised = false;
// lggr.debug? "AGI: SetInterface: Wrapped functions and Callbacks created"
// if Module?
//   for nom, val of Module
//     lggr.debug? "Module has #{nom}"
// Initialisation folowing EMCC initialisation
(function() {
var promres;
// EMCC setup code called at strartup
AGI.SetInterface();
promres = null;
AGI.Ready = new Promise(function(resolve, reject) {
promres = resolve;
return typeof lggr.trace === "function" ? lggr.trace("AGI: AGI.Ready Promise created") : void 0;
});
return Module.EMCCInitialised.then(function() {
var e, initted;
if (typeof lggr.debug === "function") {
lggr.debug("AGI: Initialisation: EMCCInitialised resolved");
}
// Try again: JRWG
initted = false;
try {
initted = AGI.isInitialised = AGI.animInit();
} catch (error) {
e = error;
lggr.error(`Failed call to animInit : ${e.stack}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`AGI: initted = ${initted}`);
}
//       if initted
//         true
if (!AGI.isInitialised) {
lggr.warn("AGI: Failed to initialise");
false;
}
if (typeof lggr.trace === "function") {
lggr.trace("AGI: AGI.Ready Calling Promise resolve");
}
return promres();
});
})();
AGI.Ready.then(() => {
return typeof lggr.trace === "function" ? lggr.trace("AGI: AGI.Ready Promise resolve detected in AnimgenInstance") : void 0;
});
// Initialise during setup
AGI.instances = [];
return AGI;
}).call(this);
// Export
cwaenv.add(AGI, "AGI");
// (End AnimgenInstance.coffee)
}).call(this);
// -------- AmbientAnim.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AmbientAnim, CASFrame, CASMorph, CASTRSet, Logger, RQ, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("CASAnim");
RQ = cwaenv.get("RotQuat");
CASTRSet = cwaenv.get("CASTRSet");
CASMorph = cwaenv.get("CASMorph");
CASFrame = cwaenv.get("CASFrame");
//----------------
AmbientAnim = class AmbientAnim {
//----------------
constructor() {
//----------
this.AMBIENT_FPS = 0;
this.N_FRAMES = 0;
this.CYCLE_TIME = 0;
this.ixAmbient = 0;
this.tAmbient = 0;
this.tCurrent = 0;
}
// "Static" members.
//   Creates a new JSA Ambient Manager with the given frames and
//   FPS value.
static create(aframes, fps) {
var aa;
//------
aa = new AmbientAnim();
aa.set(aframes, fps);
return aa;
}
// "Instance" members.
set(aframes, fps) {
var lastfrm;
//--
this.AMBIENT_FPS = fps;
this.AMBIENT_FRAMES = aframes;
this.N_FRAMES = aframes.length;
lastfrm = aframes[this.N_FRAMES - 1];
return this.CYCLE_TIME = (lastfrm.getTime()) + (lastfrm.getDuration());
}
resetClock() {
//---------
this.ixAmbient = 0;
this.tAmbient = 0;
return this.tCurrent = 0;
}
randomResetClock() {
var IX;
//----------
// [ 2010-06: Method currently unused. ]
this.ixAmbient = IX = Math.floor((Math.random()) * this.N_FRAMES);
return this.tCurrent = this.tAmbient = this.AMBIENT_FRAMES[IX].getTime();
}
synchClock() {
return this.tCurrent = this.tAmbient;
}
//---------
getTime() {
return this.tCurrent;
}
//------
getAmbientFPS() {
return this.AMBIENT_FPS;
}
//------------
getAmbientFrames() {
return this.AMBIENT_FRAMES;
}
//---------------
adjust(frame, scale) {
//-----
return this.adjustForTime(frame, scale, frame.getTime());
}
adjustForTimeDelta(frame, scale, td) {
//-----------------
return this.adjustForTime(frame, scale, this.tCurrent + td);
}
adjustForTime(frame, scale, t) {
//------------
return this.applyAmbientToFrame(frame, this.findAmbientFrame(t)(), scale);
}
findAmbientFrame(t) {
var EPS, N_CYCLES, T_CYCLES, T_DELTA, T_REL, T_STEP, fcurr, fnext, frame, ix, tix, tixnext;
//---------------
// Work out T_REL, the difference between t and our current
// tAmbient, modulo the total ambient cycle time.
T_DELTA = t - this.tAmbient;
N_CYCLES = Math.floor(T_DELTA / this.CYCLE_TIME);
T_CYCLES = N_CYCLES * this.CYCLE_TIME;
T_REL = T_DELTA - T_CYCLES;
// Work out how many steps we need to advance ixAmbient
// in order to bring tAmbient to within a single step of
// T_REL (modulo CYCLE_TIME).
ix = this.ixAmbient;
tix = 0;
tixnext = this.AMBIENT_FRAMES[ix].getDuration();
while (tixnext <= T_REL) {
ix = this.nextAmbientIndex(ix);
tix = tixnext;
tixnext += this.AMBIENT_FRAMES[ix].getDuration();
}
T_STEP = tixnext - tix;
EPS = T_STEP * 0.05;
// Interpolate between frames only if both the time gaps from
// the interval ends are significant.
frame = null;
if (T_DELTA < tix + EPS) {
frame = this.AMBIENT_FRAMES[ix];
} else if (tixnext < T_DELTA + EPS) {
frame = this.AMBIENT_FRAMES[this.nextAmbientIndex(ix)];
} else {
fcurr = this.AMBIENT_FRAMES[ix];
fnext = this.AMBIENT_FRAMES[this.nextAmbientIndex(ix)];
frame = this.interpolate(fcurr, fnext, (T_DELTA - tix) / T_STEP);
}
// Update our cursor data.
this.ixAmbient = ix;
this.tAmbient += T_CYCLES + tix;
this.tCurrent = t;
return frame;
}
//   Returns the index following the given one, with respect to
//   this manager''s ambient frame sequence -- cycling back to zero if
//   the given index is the maximum for that sequence.
nextAmbientIndex(ix) {
var nextix;
//---------------
nextix = ix + 1;
if (nextix === this.N_FRAMES) {
nextix = 0;
}
return nextix;
}
//   Returns a new frame obtained by interpolating between the given
//   pair using the given weighting, whose value should be in the
//   interval (0, 1).
interpolate(fa, fb, T) {
var DUR_A, TM_A, TM_ADJ, bones, morphs;
//----------
bones = this.interpolateBones(fa.getTRSets(), fb.getTRSets(), T);
morphs = this.interpolateMorphs(fa, fb, T);
TM_A = fa.getTime();
DUR_A = fa.getDuration();
TM_ADJ = DUR_A * T;
return CASFrame.create(TM_A + TM_ADJ, DUR_A - TM_ADJ, bones, morphs);
}
//   Returns a new array of bones settings obtained by interpolating
//   between the given pair of bones settings arrays using the given
//   weighting, whose value should be in the interval (0, 1).
interpolateBones(A_BONES, B_BONES, T) {
var A_4CC, A_BONE, A_TRANS, B_4CC, B_BONE, ISSUE, NEW_ROT, N_BONES, PFX_ID, bones, fourccerrs, i, j, lenok, qa, qb, qnew, ref;
//---------------
bones = null;
lenok = true;
fourccerrs = 0;
if (A_BONES.length !== B_BONES.length) {
lenok = false;
} else {
N_BONES = A_BONES.length;
bones = new Array(N_BONES);
qa = new RQ();
qb = new RQ();
qnew = new RQ();
for (i = j = 0, ref = N_BONES; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
A_BONE = A_BONES[i];
B_BONE = B_BONES[i];
qa.setVec(A_BONE.getRotation());
qb.setVec(B_BONE.getRotation());
RQ.slerp(qnew, qa, qb, T);
NEW_ROT = qnew.copyXYZW();
A_4CC = A_BONE.getFourCC();
B_4CC = B_BONE.getFourCC();
if (A_4CC !== B_4CC) {
++fourccerrs;
}
A_TRANS = A_BONE.getTranslation();
bones[i] = CASTRSet.create(A_4CC, NEW_ROT, A_TRANS);
}
}
if (!lenok || fourccerrs !== 0) {
bones = A_BONES;
PFX_ID = "AmbientAnim.interpolateBones(): ";
ISSUE = !lenok ? "nonmatching bone-set sizes." : `${fourccerrs} nonmatching bone-set indices.`;
//FIXME: is this too draconian?
throw new Error(PFX_ID + ISSUE);
}
return bones;
}
//   Returns a new array of morph settings containing (i) an empty slot
//   for each of the given frame''s morph settings and (ii) a slot
//   containing a copy of each of the "extra" settings, that is,
//   settings appearing in the given array of morph settings, but but
//   not in the given frame''s morph settings.
makeMorphListWithExtras(A_FRAME, B_MORPHS) {
var A_MORPHS, bextras, morphs;
//----------------------
A_MORPHS = A_FRAME.getMorphs();
// Identify the extra B morphs, i.e. those for which there is
// for which there is no entry in the A list.
bextras = B_MORPHS.filter(function(bmph) {
return (A_FRAME.getMorph(bmph.getName())) === null;
});
// Create the new list, with room for a copy of A_MOPPHS.
morphs = new Array(A_MORPHS.length);
// If there are extra B morphs, append them to the new list.
if (bextras.length) {
morphs = morphs.concat(bextras);
}
return morphs;
}
//   Returns a new array of morphs settings obtained by interpolating
//   between the morphs settings of the given pair of frames, using the
//   given weighting, whose value should be in the interval (0, 1).
interpolateMorphs(fa, fb, T) {
var AMOUNT, A_MORPH, A_MORPHS, B_MORPH, B_MORPHS, M_4CC, j, len, m, morph, morphs;
//----------------
A_MORPHS = fa.getMorphs();
B_MORPHS = fb.getMorphs();
morphs = null;
if (A_MORPHS.length === 0 && B_MORPHS.length === 0) {
morphs = A_MORPHS;
} else {
morphs = this.makeMorphListWithExtras(fa, B_MORPHS);
// Generate the new values for each of the frame A morphs.
for (m = j = 0, len = A_MORPHS.length; j < len; m = ++j) {
A_MORPH = A_MORPHS[m];
M_4CC = A_MORPH.getName();
B_MORPH = fb.getMorph(M_4CC);
// Use the frame A morph setting, unless frame B
// also has an entry for this morph.
morph = A_MORPH;
if (B_MORPH !== null) {
AMOUNT = (A_MORPH.getAmount()) * (1 - T) + (B_MORPH.getAmount()) * T;
morph = CASMorph.create(M_4CC, AMOUNT);
}
morphs[m] = morph;
}
}
return morphs;
}
//   Given an animation frame, and a frame containing ambient motion
//   adjustments, returns a new frame obtained by adjusting the
//   former as specified by the latter.
//   In the (unexpected) case where the ambient does not require any
//   adjustments, the original animation frame is returned;
//   otherwise a newly generated frame is returned.
applyAmbientToFrame(frame, ambientframe, scale) {
var FBONES, FMORPHS, NEW_BONES, NEW_MORPHS;
//------------------
NEW_BONES = this.bonesWithAmbient(frame, ambientframe, scale);
NEW_MORPHS = this.morphsWithAmbient(frame, ambientframe, scale);
FBONES = frame.getTRSets();
FMORPHS = frame.getMorphs();
if (NEW_BONES === FBONES && NEW_MORPHS === FMORPHS) {
return frame;
} else {
// If new data differs from old, create a new frame.
return CASFrame.create(frame.getTime(), frame.getDuration(), NEW_BONES, NEW_MORPHS);
}
}
//   Given an animation frame, and a frame containing ambient
//   motion adjustments, this method returns an array of bone
//   definitions, i.e. {@link CASTRSet}s, obtained by adjusting
//   those of the former as specified by the latter.
//   If the ambient frame has an empty list of bone settings then the
//   result is just the given animation frame''s original bones array;
//   otherwise it is a newly generated one.
bonesWithAmbient(frame, ambientframe, scale) {
var AMB_BONE, AMB_BONES, BONE, BONES, NAME, NEW_BONES, N_BONES, TRANS, b, j, len, newbone, qamb, qnew;
//---------------
BONES = frame.getTRSets();
AMB_BONES = ambientframe.getTRSets();
N_BONES = BONES.length;
// If the ambient frame has bones then we need to build a new
// set of bones; otherwise we can just copy the original set.
// (The expected case is the former: build a new bones set.)
NEW_BONES = AMB_BONES.length === 0 ? BONES : new Array(N_BONES);
if (NEW_BONES !== BONES) {
// Workspace for composition of rotations.
qnew = new RQ();
qamb = new RQ();
// Copy the original bones one by one, but with the
// appropriate adjustment for each one that has an entry in
// the ambient frame.
for (b = j = 0, len = BONES.length; j < len; b = ++j) {
BONE = BONES[b];
NAME = BONE.getFourCC();
// Assume we can use the old bone as is.
newbone = BONE;
// But we need to adjust it if the ambient frame
// has an entry for this bone.
AMB_BONE = ambientframe.getTRSet(NAME);
if (AMB_BONE !== null) {
// Trust that the scaling operation is done
// efficiently in the case scale===ONE_FP.
qnew.setVec(BONE.getRotation());
qamb.setVec(AMB_BONE.getRotation());
qamb.setScaleRot(scale);
qnew.setPostMultiply(qamb);
TRANS = BONE.getTranslation();
newbone = CASTRSet.create(NAME, qnew.copyXYZW(), TRANS);
}
NEW_BONES[b] = newbone;
}
}
return NEW_BONES;
}
//   Given an animation frame, and a frame containing ambient
//   motion adjustments, this method returns an array of CASMorphs,
//   obtained by adjusting the morphs settings of the former as
//   specified by the latter.
//   If the ambient frame has an empty list of morph settings then
//   the result is just the given animation frame's original morph
//   settings list; otherwise it is a newly generated one.
morphsWithAmbient(frame, ambientframe, scale) {
var AMB_AMT, AMB_MORPH, AMB_MORPHS, MORPH, MORPHS, M_4CC, amt, j, len, m, newmorph, newmorphs;
//----------------
MORPHS = frame.getMorphs();
AMB_MORPHS = ambientframe.getMorphs();
// Assume initially that we can just use the original morphs.
// But if the ambient frame has a non-empty morph list then
// we need to create a new one.
newmorphs = MORPHS;
if (AMB_MORPHS.length !== 0) {
newmorphs = this.makeMorphListWithExtras(frame, AMB_MORPHS);
// Copy our existing morph settings, one by one, but with
// a suitable adjustment for each one that also has an
// entry in the ambient frame.
for (m = j = 0, len = MORPHS.length; j < len; m = ++j) {
MORPH = MORPHS[m];
M_4CC = MORPH.getName();
// Assume that we can use the existing morph setting.
newmorph = MORPH;
// But we need to adjust it if the ambient frame
// has an entry for this morph.
AMB_MORPH = ambientframe.getMorph(M_4CC)();
if (AMB_MORPH !== null) {
AMB_AMT = (AMB_MORPH.getAmount()) * scale;
amt = (MORPH.getAmount()) + AMB_AMT;
if (1 < amt) {
amt = 1;
}
newmorph = CASMorph.create(M_4CC, amt);
}
newmorphs[m] = newmorph;
}
}
return newmorphs;
}
//   Return an AmbientAnim as an object
asObject() {
var f;
return {
fps: this.AMBIENT_FPS,
cycleTime: this.CYCLE_TIME,
frameCount: this.N_FRAMES,
frames: (function() {
var j, len, ref, results;
ref = this.AMBIENT_FRAMES;
results = [];
for (j = 0, len = ref.length; j < len; j++) {
f = ref[j];
results.push(f.asObject());
}
return results;
}).call(this)
};
}
};
// Export
cwaenv.add(AmbientAnim, "AmbientAnim");
// (End AmbientAnim.coffee)
}).call(this);
// -------- Character.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AmbientAnim, CASFrame, CASTRSet, Character, Config, Logger, Mesh, Skeleton, V3, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("WebGL");
Config = cwaenv.get("Config");
V3 = cwaenv.get("E3Vec");
CASTRSet = cwaenv.get("CASTRSet");
CASFrame = cwaenv.get("CASFrame");
Skeleton = cwaenv.get("Skeleton");
Mesh = cwaenv.get("Mesh");
AmbientAnim = cwaenv.get("AmbientAnim");
Character = (function() {
//--------------
class Character {
//--------------
constructor() {
//----------
this.gl = null;
this.avBase = "";
this.readJSON = null;
this.avatarName = "";
this.volMin = null;
this.volMax = null;
this.meshes = [];
this.defaultPose = null;
this.skeleton = null;
this.ambientAnim = null;
this.textureFileName = "";
this.jsonTextureURL = "";
this.currentMorphs = [];
this.scaleFromMetres = -1;
this.USE_TRX_BONE_DATA = true;
this.TEST_CPU_TRX_TO_MAT = false;
if (typeof lggr.trace === "function") {
lggr.trace("Character: Constructor called");
}
}
//----------------
// "Instance" members.
//   Constructs this avatar using data from the given stream.
loadJSON(gl, avatarName) {
this.gl = gl;
this.avatarName = avatarName;
lggr.warn(`Character: Loading JSON avatar ${this.avatarName} not supported`);
return null;
}
//   Constructs this avatar using data from the given stream.
loadJSONOrig(gl, avatarName) {
var VER_3_DIG, jsnchrctr;
this.gl = gl;
this.avatarName = avatarName;
//-------
// Init.
this.avBase = Config.getAvBase(this.avatarName);
this.readJSON = (jfile) => {
// @STD_DATA_IN.getJSON "#{@avBase}#{jfile}"
lggr.warn(`Character: Synchronous reading of JSON data not possible for ${this.avBase}${jfile}`);
return null;
};
// Load JSON avatar definition data and check the version is ok.
jsnchrctr = this.readJSON("avdef.json");
VER_3_DIG = Math.floor(100 * Number(jsnchrctr.version));
if (VER_3_DIG < 310) {
throw new Error(`Avatar version ${VER_3_DIG} is not viable!`);
}
// Populate this character.
this.loadVolumeLimits(jsnchrctr);
this.loadMeshes(jsnchrctr);
this.loadInitPose(jsnchrctr);
this.loadSkeleton(jsnchrctr);
this.loadAmbientMotionDef(jsnchrctr);
this.loadTextureData(jsnchrctr);
// Tidy up loose ends.
this.setUpTextureFromJSON();
this.setLengthScaleFactor();
this.setUpMeshesForGL();
return void 0; // void result
}
loadBinary(gl, avatarName, avdv) {
var VER_3_DIG, version;
this.gl = gl;
this.avatarName = avatarName;
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Starting");
}
version = avdv.nextStr();
VER_3_DIG = Math.floor(100 * Number(version));
if (VER_3_DIG < 310) {
throw new Error(`(Binary) Avatar version ${VER_3_DIG} is not viable!`);
}
// Populate this character.
// JRWG: @scale seems unused
this.scale = avdv.nextFloat();
this.loadVolumeLimitsBin(avdv); //----
this.setLengthScaleFactor();
this.matRefl = avdv.nextVec3();
this.skelYOffset = avdv.nextFloat();
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling loadMeshesBin");
}
this.loadMeshesBin(avdv); //----
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling loadInitPoseBin");
}
this.loadInitPoseBin(avdv); //----
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling loadSkeletonBin");
}
this.loadSkeletonBin(avdv); //----
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling loadAmbientMotionDefBin");
}
this.loadAmbientMotionDefBin(avdv); //----
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling loadTextureDataBin");
}
this.loadTextureDataBin(avdv);
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling setUpTextureFromAvDV");
}
this.setUpTextureFromAvDV(avdv);
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Calling setUpMshes");
}
this.setUpMeshes();
if (typeof lggr.trace === "function") {
lggr.trace("loadBinary: Done");
}
return void 0; // void result
}
// Set up for GL
// JRWG: Later try to omit @gl from loadBinary (and loadJSON)
bindForGL(gl) {
this.gl = gl;
//--------
// Bind to GL
this.bindTextures();
return this.setUpMeshesForGL();
}
// Restore for future binding
release() {
//------
return this.releaseTextures();
}
//   Returns a frame with standard timestamp and duration values,
//   the default skeleton pose and an empty morph set.
getDefaultPose() {
return CASFrame.create(0, 40, this.defaultPose, null);
}
//-------------
//   Returns a frame with standard timestamp and duration values,
//   an empty skeleton adjustment set, and an empty morph set (which,
//   when played, should give the avatar's current pose -- e.g. the
//   initial pose when the avatar is first loaded.
//   the default skeleton pose and an empty morph set.
getEmptyPose(time = 0, dur = 40) {
return CASFrame.create(time, dur, [], null);
}
//-----------
setUpTextureFromJSON() {
var k, len, mesh, ref;
ref = this.meshes;
//-------------------
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
mesh.createTextureFromJSON(this.jsonTextureURL);
}
return void 0; // void result
}
setUpTextureFromAvDV(avdv) {
var k, len, mesh, ref;
ref = this.meshes;
//-------------------
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
mesh.createTextureFromAvDV(avdv, this.textureFileName, this.mustFlip);
}
return void 0; // void result
}
bindTextures() {
var k, len, mesh, ref;
ref = this.meshes;
//-----------
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
mesh.bindTextureForGL(this.textureFileName);
}
return void 0; // void result
}
releaseTextures() {
var k, len, mesh, ref;
ref = this.meshes;
//--------------
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
mesh.releaseMesh(this.textureFileName);
}
return void 0; // void result
}
//   Fix the duplicate vertex data for this character''s
//   meshes and generate their bind poses.
setUpMeshes() {
var k, len, mesh, ref;
ref = this.meshes;
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
//---------------
mesh.prepareSkeleton(this.skeleton);
}
return void 0; // void result
}
setUpMeshesForGL() {
var k, len, mesh, ref;
ref = this.meshes;
for (k = 0, len = ref.length; k < len; k++) {
mesh = ref[k];
//---------------
mesh.prepareForGL(this.skeleton);
}
return void 0; // void result
}
//   Reads this character''s bounding box from the given JSON
//   character data structure.
loadVolumeLimits(jsnchrctr) {
//---------------
this.volMin = V3.fromVec(jsnchrctr.volMin);
return this.volMax = V3.fromVec(jsnchrctr.volMax);
}
loadVolumeLimitsBin(avdv) {
//------------------
this.volMin = V3.fromVec(avdv.nextVec3());
return this.volMax = V3.fromVec(avdv.nextVec3());
}
//   Reads this character''s mesh(es) from the given stream.
loadMeshes(jsnchrctr) {
//---------
// The given jsnchrctr.meshes is an array of mesh file names. We
// need to read each of these files (itself JSON) and convert it to
// a Mesh object.
this.meshes = jsnchrctr.meshes.map((mfname) => {
var mesh;
mesh = new Mesh(this.gl, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
mesh.setFromJSON(this.readJSON(mfname));
return mesh;
});
return void 0; // void result
}
loadMeshesBin(avdv) {
var nMeshes;
//------------
nMeshes = avdv.nextUint();
this.meshes = (function() {
var results = [];
for (var k = 0; 0 <= nMeshes ? k < nMeshes : k > nMeshes; 0 <= nMeshes ? k++ : k--){ results.push(k); }
return results;
}).apply(this).map(() => {
var mesh;
mesh = new Mesh(this.gl, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
mesh.setFromBin(avdv);
if (typeof lggr.trace === "function") {
lggr.trace("loadMeshesBin: loaded mesh");
}
return mesh;
});
return void 0; // void result
}
//   Reads this character''s default pose from the given stream.
loadInitPose(jsnchrctr) {
//-----------
return this.defaultPose = jsnchrctr.initPose.map(CASTRSet.fromJSON);
}
loadInitPoseBin(avdv) {
var b, nInitPose;
//--------------
nInitPose = avdv.nextUint();
return this.defaultPose = (function() {
var k, ref, results;
results = [];
for (b = k = 0, ref = nInitPose; (0 <= ref ? k < ref : k > ref); b = 0 <= ref ? ++k : --k) {
results.push(CASTRSet.fromBin(avdv));
}
return results;
})();
}
//   Reads this character''s skeleton from the given stream, with 4-cc
//   names in string format.
loadSkeleton(jsnchrctr) {
//-----------
return this.skeleton = Skeleton.create(jsnchrctr.skelBones, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
}
loadSkeletonBin(avdv) {
//--------------
return this.skeleton = Skeleton.fromBin(avdv, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
}
//   Reads this character''s ambient data, if any.
loadAmbientMotionDef(jsnchrctr) {
var amfrms, jsnamb;
//-------------------
amfrms = null;
if (jsnchrctr.ambientFrames) {
amfrms = jsnchrctr.ambientFrames.map(CASFrame.fromJSON);
} else if (jsnchrctr.ambientFileName) {
jsnamb = this.readJSON(jsnchrctr.ambientFileName);
amfrms = jsnamb.ambientFrames.map(CASFrame.fromJSON);
}
this.ambientAnim = !amfrms ? null : AmbientAnim.create(amfrms, jsnchrctr.ambientFPS);
return void 0; // void result
}
loadAmbientMotionDefBin(avdv) {
var ambFPS, f, frame, frames, k, len, nAmbFrames, t, tNxt;
//----------------------
this.ambientAnim = null;
nAmbFrames = avdv.nextUint();
if (nAmbFrames !== 0) {
ambFPS = avdv.nextFloat();
//FIXME
// Decide what (complete) initial frame ambient motion should
// be applied to -- both when the avatar is first loaded, and
// when a new idle/ambient sequence starts.
// frames = [do @getDefaultPose]  # explicit initial frame
// frames.push (CASFrame.fromBin avdv) for f in [0...nAmbFrames]
frames = (function() {
var k, ref, results;
results = [];
for (f = k = 0, ref = nAmbFrames; (0 <= ref ? k < ref : k > ref); f = 0 <= ref ? ++k : --k) {
results.push(CASFrame.fromBin(avdv));
}
return results;
})();
// Insert timeStamp and duration values into the frames, based
// on the given frame rate.
t = 0;
for (f = k = 0, len = frames.length; k < len; f = ++k) {
frame = frames[f];
tNxt = (f + 1) * 1000 / ambFPS;
frame.setTime(t);
frame.setDuration(tNxt - t);
t = tNxt;
}
this.ambientAnim = AmbientAnim.create(frames, ambFPS);
}
return void 0; // void result
}
//   Copies texture parameters from JSON character data.
loadTextureData(jsnchrctr) {
//--------------
this.textureFileName = jsnchrctr.textureFileName;
return this.jsonTextureURL = `${this.avBase}${this.textureFileName}`;
}
loadTextureDataBin(avdv) {
var j, k;
//-----------------
this.textureFileName = avdv.nextStr();
this.textureFlags = (function() {
var k, results;
results = [];
for (j = k = 0; k < 12; j = ++k) {
results.push(avdv.nextBool());
}
return results;
})();
this.mustFlip = !this.textureFlags[5];
for (j = k = 0; k < 6; j = ++k) {
if (typeof lggr.trace === "function") {
lggr.trace(`loadTextureDataBin: Texture flag ${j}: ${this.textureFlags[j]}`);
}
}
return typeof lggr.trace === "function" ? lggr.trace(`loadTextureDataBin: Must Flip: ${this.mustFlip}`) : void 0;
}
//   Sets this character''s length scale factor (from metres to
//   intrinsic/GL renderer units).
setLengthScaleFactor() {
//-------------------
return this.scaleFromMetres = ((this.volMax.y()) - (this.volMin.y())) / Character.STD_AVATAR_HEIGHT_METRES;
}
//   Returns this character''s name.
getName() {
return this.avatarName;
}
//------
//   Returns this character''s ambient frames array -- or an array
//   containing a single empty frame if it has no ambient motion.
getAmbientFrames(doIdle = true) {
var i, k, results;
//---------------
if (doIdle && (this.ambientAnim != null)) {
return this.ambientAnim.getAmbientFrames();
} else {
results = [];
for (i = k = 0; k <= 99; i = ++k) {
// Need a real sequence to allow camera changes in
// Might manage with a single long duration frame
results.push(this.getEmptyPose(i * 40, 40));
}
return results;
}
}
//   Returns this character's scale factor from metres to GL renderer
//   units.
getMetresToInternal() {
return this.scaleFromMetres;
}
//------------------
//   Returns the Y-view adjustment for this character (in external
//   units, i.e. metres), based on its height relative to its root bone.
getAdjustViewY() {
var max_y_metres;
//-------------
max_y_metres = (this.volMax.y()) / this.scaleFromMetres;
return max_y_metres - Character.STD_MAX_Y_METRES;
}
//   Sets a new pose for this character.
setFrame(frame) {
//-------
this.skeleton.setBones(frame.getTRSets());
return this.currentMorphs = frame.getMorphs();
}
//   Draws the character at position x,y,z using the argument view and
//   projection matrices.
draw(x, y, z, viewMatrix, projMatrix) {
var mesh;
//---
// Current reality: we work only with the one mesh.
mesh = this.meshes[0];
// (MORPH TIME MONITORING)
//window.tMorphForDraw = null
mesh.draw(this.skeleton, this.currentMorphs, x, y, z, viewMatrix, projMatrix);
// (MORPH TIME MONITORING)
//if window.tMorphForDraw and window.tMorphLog
//	 window.tMorphLog.push window.tMorphForDraw
return void 0; // void result
}
};
// "Static" members.
Character.STD_AVATAR_HEIGHT_METRES = 1.80;
//------------------------
Character.STD_MAX_Y_METRES = 0.75;
return Character;
}).call(this);
// checkBinaryAvData: (avdv) ->
// #----------------
//   #---- CHECK avdv DATA, BUT ONLY HOLD IT LOCALLY ----
//   ic = -1;  tc = -1;  fpsc = -1
//   nextMorphSet = ->
//   #-----------
//     vtx = do avdv.nextUint;   wgt = do avdv.nextFloat;
//     ost = do avdv.nextVec3;   nml = do avdv.nextVec3
//     ms =  vertex: vtx,  weight: wgt,  offset: ost,  normal: nml
//   nextCASMorph = ->
//   #-----------
//     id4 = do avdv.nextUint;  amt = do avdv.nextFloat
//     morph =  id4cc: id4,  amount: amt
//   nextCASTRSet = ->
//   #-----------
//     id4 = do avdv.nextUint
//     trn = do avdv.nextVec3;  rtn = do avdv.nextQuat
//     trset =  id4cc: id4,  trans: trn,  rot: rtn
//   # CAS Frame sequence data:
//   resetCASTiming = (fps) -> [ic, tc, fpsc] = [0, 0, fps]
//   #-------------
//   nextCASFrame = ->
//   #-----------
//     inxt = ic + 1;  tnxt = inxt * (1000 / fpsc)
//     [icur, tcur, dur, ic, tc] = [ic, tc, tnxt-tc, inxt, tnxt]
//     lggr.trace? "iAmb=#{icur}  tAmb=#{tcur}"
//     nm = do avdv.nextUint
//     mphs = (do nextCASMorph for m in [0...nm])
//     nt = do avdv.nextUint
//     bns = (do nextCASTRSet for s in [0...nt])
//     frame =  time: tcur,  duration: dur,  morphs: mphs,  bones: bns
//   nextSkelBone = ->
//   #-----------
//     id4 = do avdv.nextUint;  pr4 = do avdv.nextUint
//     trn = do avdv.nextVec3;  rtn = do avdv.nextQuat
//     iix = do avdv.nextQuat;  len = do avdv.nextFloat
//     bone =
//       id4cc: id4,  parent4cc: pr4
//       trans: trn,  rot: rtn,  invInitXRot: iix,  length: len
//   version = do avdv.nextStr
//   lggr.debug? "Version: #{version}"
//   scale = do avdv.nextFloat
//   volMin = do avdv.nextVec3
//   volMax = do avdv.nextVec3
//   matRefl = do avdv.nextVec3
//   skelYOffset = do avdv.nextFloat
//   nMeshes = do avdv.nextUint
//   lggr.debug? "scale: #{scale}"
//   lggr.debug? "Mesh count: #{nMeshes}"
//   for m in [0...nMeshes]
//     lodRange = do avdv.nextFloat
//     nMeshPts = do avdv.nextUint
//     lggr.debug? "Mesh points count: #{nMeshPts}"
//     for p in [0...nMeshPts]
//       nInfluences = do avdv.nextUint
//       mpiRange = [0...nInfluences]
//       mpiOffsets = (do avdv.nextVec3 for j in mpiRange)
//       mpiBaseNorms = (do avdv.nextVec3 for j in mpiRange)
//       mpiNames = (do avdv.nextStr for j in mpiRange)
//       mpiWeights = (do avdv.nextFloat for j in mpiRange)
//       mpiBEDistances = (do avdv.nextFloat for j in mpiRange)
//     nTriStripIxs = do avdv.nextUint
//     lggr.debug? "TriStrip Index count: #{nTriStripIxs}"
//     triStripIndices = (do avdv.nextUshort for j in [0...nTriStripIxs])
//     nDupVertices = do avdv.nextUint
//     lggr.debug? "Dup Vertices count: #{nDupVertices}"
//     dupVtxIndices = (do avdv.nextUint for j in [0...nDupVertices])
//     nTxtrCoordPairs = do avdv.nextUint
//     lggr.debug? "Texture coord pairs count: #{nTxtrCoordPairs}"
//     textureCoordPairs = (do avdv.nextVec2 for j in [0...nTxtrCoordPairs])
//     nMorphTargets = do avdv.nextUint
//     lggr.debug? "Morph Target count: #{nMorphTargets}"
//     for t in [0...nMorphTargets]
//       mtName = do avdv.nextStr
//       nMorphSets = do avdv.nextUint
//       morphSets = (do nextMorphSet for j in [0...nMorphSets])
//   nInitPose = do avdv.nextUint
//   lggr.debug? "Init Pose bone count: #{nInitPose}"
//   initPose = (do nextCASTRSet for j in [0...nInitPose])
//   nSkelBones = do avdv.nextUint
//   lggr.debug? "Skel bone count: #{nSkelBones}"
//   skelBones = (do nextSkelBone for j in [0...nSkelBones])
//   #@checkBytes @i, 16, "at nAmbient"    #++++++++++++++++++++++++
//   nAmbFrames = do avdv.nextUint
//   lggr.debug? "Ambient frames count: #{nAmbFrames}"
//   if nAmbFrames is 0
//     ambFPS = -1
//     ambFrames = []
//   else
//     ambFPS = do avdv.nextFloat
//     resetCASTiming ambFPS
//     ambFrames = (do nextCASFrame for j in [0...nAmbFrames])
//   doLogLastAF = true
//   if doLogLastAF and nAmbFrames
//     lastAF = ambFrames[nAmbFrames-1]
//     lastAFBones = lastAF.bones
//     lastAFBone = lastAFBones[lastAFBones.length-1]
//     lastAFBoneTrans = lastAFBone.trans
//     lggr.debug? "Last ambient frame: ix=#{nAmbFrames-1}  t=#{lastAF.time}  "+
//       "nBones=#{lastAFBones.length}  "
//     lggr.debug? "... id4cc: #{lastAFBone.id4cc.toString(16)}"
//     lggr.debug? "... transX: #{lastAFBone.trans[0]}"
//   #@checkBytes @i, 8, "at tFileName"    #++++++++++++++++++++++++
//   tFileName = do avdv.nextStr
//   tFlags = (do avdv.nextBool for j in [0...12])
//   lggr.debug? "Texture file:    [#{tFileName}]"
//   lggr.debug? "Embedded flag:   #{tFlags[0]}"
//   lggr.debug? "Compressed flag: #{tFlags[1]}"
//   lggr.debug? "PNG fmt. flag:   #{tFlags[2]}"
//   lggr.debug? "TGA fmt. flag:   #{tFlags[3]}"
//   lggr.debug? "JIB fmt. flag:   #{tFlags[4]}"
//   #@tWidth = do @nextUint
//   #@tHeight = do @nextUint
//   nRemaining = avdv.data.byteLength - avdv.i
//   lggr.debug? "Remaining block length: #{nRemaining}."
//   lggr.debug? "----------------------------------------"
//   throw new Error "Binary avatar load is WIP."
// Export
cwaenv.add(Character, "Character");
// (End Character.coffee)
}).call(this);
// -------- AvSpeedController.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvSpeedController, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar");
//----------------------
AvSpeedController = class AvSpeedController {
//----------------------
constructor(domEls, seit, initSpeed = -1, stepRate = 4) {
this.initSpeed = initSpeed;
this.stepRate = stepRate;
//----------
this.SPEED_EL_IS_TEXT = Boolean(seit);
this.displayEl = domEls.speedDisplay;
this.downEl = domEls.speedDown;
this.upEl = domEls.speedUp;
this.resetEl = domEls.speedReset;
// Speed goes up and down by a factor of 2^(-stepRate), so the exponent
// increases in steps of 1/stepRate.
// Set speed-up/down limits at 2^-6 and 2^3.
// Check ranges for safety
this.stepRate = Math.max(1, this.stepRate);
this.stepsLo = -(this.stepRate * 6);
this.stepsHi = this.stepRate * 3;
this.initSpeed = Math.max(this.stepsLo, Math.min(this.stepsHi, this.initSpeed));
this._initGUI();
}
// domEls Utilities
_setElsValue(els, newval) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.value = newval);
}
return results;
}
_setElsOnclick(els, hdlr) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.onclick = hdlr);
}
return results;
}
_setElsDisabled(els, isDis) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.disabled = isDis);
}
return results;
}
_initGUI() {
//-------
this._setElsOnclick(this.resetEl, ((evt) => {
return this.reset();
}));
this._setElsOnclick(this.upEl, ((evt) => {
return this.increase();
}));
this._setElsOnclick(this.downEl, ((evt) => {
return this.decrease();
}));
return this.reset();
}
_updateGUI() {
var sstr;
//---------
sstr = (this.nSteps / this.stepRate).toFixed(2);
if (0 <= this.nSteps) {
sstr = `+${sstr}`;
}
if (this.SPEED_EL_IS_TEXT) {
this._setElsValue(this.displayEl, sstr);
} else {
this.displayEl[0].innerHTML = sstr;
}
this._setElsDisabled(this.downEl, this.nSteps === this.stepsLo);
this._setElsDisabled(this.upEl, this.nSteps === this.stepsHi);
this._setElsDisabled(this.resetEl, this.nSteps === this.initSpeed);
return void 0;
}
_updateSpeed(nw) {
this.nSteps = nw;
return typeof lggr.info === "function" ? lggr.info(`Speed Controller: Steps ${this.nSteps} Rate ${this.stepRate}: Speed ${(this.curSpeed()).toFixed(2)}`) : void 0;
}
curSpeed() {
return Math.pow(2, this.nSteps / this.stepRate);
}
//-------
reset() {
this._updateSpeed(this.initSpeed);
return this._updateGUI();
}
//----
increase() {
(this.nSteps < this.stepsHi ? this._updateSpeed(this.nSteps + 1) : void 0);
return this._updateGUI();
}
//-------
decrease() {
(this.stepsLo < this.nSteps ? this._updateSpeed(this.nSteps - 1) : void 0);
return this._updateGUI();
}
};
//-------
// Export
cwaenv.add(AvSpeedController, "AvSpeedController");
// (End AvSpeedController.coffee)
}).call(this);
// -------- CASAnimation.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var CASAnimation, CASFrame, Data, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Data = cwaenv.get("Data");
CASFrame = cwaenv.get("CASFrame");
Logger = cwaenv.get("Logger");
lggr = Logger.get("CASAnim"); // , "debug"
//-----------------
CASAnimation = class CASAnimation {
//-----------------
constructor() {
//----------
// Filter on tracing
this.traceMax = 200;
// See initAnimation for information about fields
this.initAnimation();
}
// "Static" methods.
//   Creates and returns a new CASAnimation instance from the given
//   CASFrame sequence.
static fromFrames(frames) {
var anim;
//----------
anim = new CASAnimation();
anim.setFromFrames(frames);
return anim;
}
//   Extracts animation data from the given CAS XML DOM, and returns a
//   new CASAnimation instance for it, which may have an empty
//   frame-sequence if the input is invalid.
static fromCASDOM(casdoc) {
var ELEMENT_TYPE, NF, NS, anim, casel, doCheckSigns, f, fel, fhi, flo, framesSegment, frmels, glossStr, i, j, k, len, len1, len2, s, sd, signdesc, signdescs, ssel, ssels;
//----------
ELEMENT_TYPE = 1;
anim = new CASAnimation();
if (casdoc) {
casel = casdoc.documentElement();
// Get the XML "frame" elements.
frmels = casel.getElementsByTagName("frame");
NF = frmels.length || 0;
// Function to create a JSACASFrames segment from the
// corresponding XML frame elements.
framesSegment = function(flo, fhi) {
var f, frames, i, ref, ref1;
frames = [];
for (f = i = ref = flo, ref1 = fhi; (ref <= ref1 ? i <= ref1 : i >= ref1); f = ref <= ref1 ? ++i : --i) {
frames.push(CASFrame.fromXML(frmels[f]));
}
return frames;
};
// Create sign descriptors from the XML data, and repeatedly
// extend the animation with the corresponding signs.
ssels = casel.getElementsByTagName("signStart");
NS = ssels.length || 0;
if (NS === 0) {
anim.setFromFrames(framesSegment(0, NF));
} else {
signdescs = [];
f = 0;
for (s = i = 0, len = ssels.length; i < len; s = ++i) {
ssel = ssels[s];
glossStr = ssel.getAttribute("gloss");
// Skip to next element, which usually but not always will
// be a "frame" (it may be the next "signStart").
fel = ssel.nextSibling;
while (fel && fel.nodeType !== ELEMENT_TYPE) {
fel = fel.nextSibling;
}
if (fel && fel.nodeName === "frame") {
f = Number(fel.getAttribute("index"));
}
signdescs.push({
i: s,
gloss: glossStr,
fLo: f
});
}
for (s = j = 0, len1 = signdescs.length; j < len1; s = ++j) {
signdesc = signdescs[s];
flo = signdesc.fLo;
fhi = s + 1 === NS ? NF : signdescs[s + 1].fLo;
signdesc.frames = framesSegment(flo, fhi);
anim.extendSigns(signdesc);
}
doCheckSigns = false;
if (doCheckSigns) {
for (s = k = 0, len2 = signdescs.length; k < len2; s = ++k) {
sd = signdescs[s];
if (typeof lggr.debug === "function") {
lggr.debug(`Sign ${sd.i}, ${sd.gloss}: fLo=${sd.fLo} ` + `#frames=${sd.frames.length}.`);
}
}
}
}
if (typeof lggr.info === "function") {
lggr.info(`CAS animation:  #signs=${anim.countSigns()}.`);
}
}
return anim;
}
//   Extracts animation data from the given CAS XML file, and returns a
//   new CASAnimation instance for it, which may have an empty
//   frame-sequence if the input is invalid.
//   Use deprecated synchronous XHR call.
static fromCASFile(casfile) {
//-----------
lggr.warn("fromCASFile: Not implemented");
return void 0;
}
// casdoc = STD_DATA_IN.getXML casfile
// casanim = CASAnimation.fromCASDOM casdoc
// lggr.info? report =
//   if do casanim.hasFrames then "CAS frames #=#{do casanim.countFrames}"
//   else "CAS file #{casfile} is invalid."
// casanim
//   Extracts animation data from the given CAS XML text, and returns
//   a new CASAnimation instance for it, which may have an empty
//   frame-sequence if the input is invalid.
static fromCASText(casxmltxt) {
var casanim, casdoc, report;
//-----------
casdoc = Data.toDOM(casxmltxt);
casanim = CASAnimation.fromCASDOM(casdoc);
if (typeof lggr.info === "function") {
lggr.info(report = casanim.hasFrames() ? `CAS frames #=${casanim.countFrames()}` : "CAS XML text is invalid.");
}
return casanim;
}
// "Instance" methods.
initAnimation() {
// Each sign has these members:
//   i:      the index of this sign within the entire sequence (unused?);
//   gloss:  gloss string;
//   frames: the CASFrame array for this sign;
//   fLo:    index (over  the entire animation) of the sign''s
//           first frame -- or, if frames is empty, the total number
//           of frames prior to this sign;
//   fHi:    the number of frames in the entire animation up to the
//           end of this sign, i.e. fLo + frames.length. The same as fLo
//           for the next sign, if there is one.
// JRWG: At the moment, frames are accessed via signs but it is proposed to move to a
// single CASFrame array with a link to the sign record with the frame as well
this.signs = []; // Signs (to date) for this animation.
this.frames = []; // Frames (to date) for this animation
this.isComplete = false; // true iff this animation can no longer be extended.
this.fIncomplete = 0; // Count of attempts to play at end of incomplete animation
this.fCount = 0; // The total frame count for this animation.
this.tLimit = 0; // The duration of this entire animation.
// Information on data being added to animation
this.signNew = null; // The sign for frames being added
// Cache of animation scanning data:
this.frameCur = null; // The currently scanned frame
return this.fCur = 0; // Index of frameCur
}
//   Extends the animation with an extra sign, as described in signdesc.
extendSigns(signdesc) {
var NS, f, fhi, flo, i, len, sframes;
//----------
NS = this.signs.length;
sframes = signdesc.frames;
flo = this.fCount;
fhi = flo + sframes.length;
this.signNew = {
i: NS,
gloss: signdesc.gloss,
fLo: flo,
fHi: fhi
};
this.signs.push(this.signNew);
for (i = 0, len = sframes.length; i < len; i++) {
f = sframes[i];
f.sign = this.signNew;
this.frames.push(f);
this.fCount++;
}
this.setTimeLimit();
if (NS === 0) {
this.reset();
}
if (typeof lggr.debug === "function") {
lggr.debug(`extendSigns ${this.signNew.gloss} (${NS}) frames ${sframes.length} total frames ${this.fCount}`);
}
return void 0;
}
//   Indicates that this animation is now complete, i.e. that it will
//   not be extended with any more signs.
setCompleted() {
return this.isComplete = true;
}
//-----------
//   Converts this empty animation into a single-(pseudo-)sign
//   animation using the given JSACASFrames.
setFromFrames(frames) {
var signdesc;
//------------
// ASSERT: this is currently empty.
if (frames != null ? frames.length : void 0) {
signdesc = {
i: 0,
gloss: "ALL_FRAMES",
frames: frames
};
this.extendSigns(signdesc);
this.setCompleted();
} else {
if (typeof lggr.debug === "function") {
lggr.debug("JASAnimData.setFromFrames(): empty frames list.");
}
}
return void 0; // void result
}
//   Sets this animation''s time limit, i.e. the completion time for
//   its final frame, or zero if it has no frames.
setTimeLimit() {
var lastframe;
//-----------
if (this.fCount === 0) {
return this.tLimit = 0;
} else {
lastframe = this.frameAt(this.fCount - 1);
return this.tLimit = (lastframe.getTime()) + (lastframe.getDuration());
}
}
// "Instance" methods for scanning the animation.
//   Side effects set @fCur and @frameCurr
reset() {
return this.setFrameAt(0);
}
//----
//   Indicates whether or not this animation has one or more frames.
hasFrames() {
return this.fCount !== 0;
}
//--------
//   Returns this animation''s current frame count.
countFrames() {
return this.fCount;
}
//----------
//   Returns this animation''s current sign count.
countSigns() {
return this.signs.length;
}
//---------
//   Returns the frame with the given index in the animation.
frameAt(f) {
//------
//ASSERT: 0 <= f < @fCount
return this.frames[f];
}
//   Sets the frame with the given index in the animation
//   as the current frame.
//   Returns the frame.
setFrameAt(f) {
//------
//ASSERT: 0 <= f < @fCount
this.fCur = f;
return this.frameCur = this.frameAt(f);
}
//   Returns the index of the frame, between the currently scanned
//   frame and the given frame index limit, whose time interval
//   includes the given time value (ms).
//   Returns NF if no earlier frame includes t
getFrameIndex(t, NF) {
var f, ff, frm, tfrm;
//------------
// Bounded linear search for latest frame before t.
f = this.fCur;
ff = NF;
while (f !== ff) {
frm = this.setFrameAt(f);
tfrm = frm.getTime();
if (this.traceMax > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`i=${f} ff=${ff} t=${t} tfrm=${tfrm} dur=${frm.getDuration()}`);
}
}
if (t < tfrm + frm.getDuration()) {
ff = f;
} else {
f += 1;
}
}
if (this.traceMax > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`i=${f} selected`);
}
}
return f;
}
//   Returns the gloss, sign index and frame index for the current
//   frame and the sign containing it.
getSignAndFrameInfo() {
//------------------
// Handle frame beyond end of animation
if (this.fCur === this.fCount) {
return ["[none]", this.signs.length, this.fCur];
} else {
// Rely on @frameCur being set according to @fCur
return [this.frameCur.sign.gloss, this.frameCur.sign.i, this.fCur];
}
}
//   Advances the frame cursor to the frame whose time interval includes
//   the given time value (ms) -- or to the notional position just
//   after the final frame if the time value is beyond the upper limit
//   for this animation -- and returns the frame thus indicated, or
//   null in the second case (time value beyond upper limit).
getFrame(t) {
var NF, f, frame, resolved, was_complete;
//-------
// Allow for the possibility that the frame seqeuence is extended
// while we are scanning it.  In the case where our search apparently
// hits the sequence limit this means (a) that we should check
// whether new frames have been added, and (b) that we shouldn''t
// terminate the animation until we know that it is complete.
// If I knew more about modern browsers' scheduling, I might realise
// that this is unnecessarily complicated, or perhaps alternatively
// that it is not complicated enough to be safe.
resolved = false;
while (!resolved) {
was_complete = this.isComplete;
NF = this.fCount;
f = this.getFrameIndex(t, NF);
resolved = f !== NF || was_complete || NF === this.fCount;
if (--this.traceMax > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`Resolved: ${resolved} f=${f} NF=${NF} fCount=${this.fCount}`);
}
}
}
// Find result frame
// Rather than terminate the animation, stick at the last available
// frame, pending the arrival of possible successors -- via
// @extendSigns() -- or the indication that there will never be
// any successors -- via @setCompleted.
return frame = f !== NF ? (this.fIncomplete = 0, this.setFrameAt(f)) : this.isComplete ? null : (this.fIncomplete++, this.fIncomplete < 5 ? typeof lggr.debug === "function" ? lggr.debug("getFrame: at end of incomplete animation") : void 0 : void 0, this.setFrameAt(NF - 1));
}
// FIXME
// Do something (out in Skeleton/Character) to get a version of the final
// frame with all bones, so that when getPreviousFrame wraps back to
// the end of the animation, it can return the correct frame rather than
// frame 0 modified by the final CASFrame, which in general is partial.
//   Moves the frame cursor back by one position (cycling round to the
//   end if necessary) and returns the resulting frame.
getPreviousFrame() {
var f;
f = this.fCur - 1;
if (f < 0) {
f = this.fCount - 1;
}
return this.setFrameAt(f);
}
//---------------
//   Moves the frame cursor forwards by one position (cycling round to
//   the start if necessary) and returns the resulting frame.
getNextFrame() {
var f;
f = this.fCur + 1;
if (this.fCount <= f) {
f = 0;
}
return this.setFrameAt(f);
}
};
//-----------
// Export
cwaenv.add(CASAnimation, "CASAnimation");
// (End CASAnimation.coffee)
}).call(this);
// -------- AnimScheduler.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AnimScheduler, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("AnimScheduler"); // , "debug"
//------------------
AnimScheduler = class AnimScheduler {
//------------------
constructor(casAnim, reporting, _playFrame, _animDone, _getSpeed, _reportSF, _reportGS, _updateFPS, _rqstAnim) {
this.casAnim = casAnim;
this.reporting = reporting;
this._playFrame = _playFrame;
this._animDone = _animDone;
this._getSpeed = _getSpeed;
this._reportSF = _reportSF;
this._reportGS = _reportGS;
this._updateFPS = _updateFPS;
this._rqstAnim = _rqstAnim;
//----------
// Force @reporting to true to report ambient animation
if (this._getSpeed == null) {
this._getSpeed = function() {
return 1;
};
}
this._needsResetClock = true;
}
// No "static" methods.
//   If we assume we're in the brave new HTML 5 world where
//   DOMHighResTimeStamp and window.performance are to be found,
//   then we could use window.performance.now to initialise
//   @clckCur, but for now we do that initialisation via the first
//   invocation of _doNextStep(), triggered by the @_needsResetClock
//   flag.
//   Later we could use higher resolution and shim for older environments.
restart() {
//------
this._needsResetClock = true;
this.clckBase = 0; // this should be set properly via _doResetClock()
this.clckCur = 0; // this should be set properly via _doResetClock()
this.animBase = 0;
this.animCur = 0;
this.speedCur = this._getSpeed();
this.frameCur = -1; // indicates no frame played yet
this.signCur = -1; // indicates no sign played yet
this.glossCur = null;
this.isStopped = false;
this.isSuspended = false;
this.oneStepUpIsPending = false;
this.oneStepDownIsPending = false;
this.casAnim.reset(); //========
if (this._updateFPS) {
this._resetFPS();
}
this._rqstNextTick();
this.traceMax = 400;
return typeof lggr.trace === "function" ? lggr.trace("restart") : void 0;
}
suspend() {
return this.isSuspended = true;
}
//------
resume() {
return this.isSuspended = false;
}
//-----
showPreviousFrame() {
if (this.isSuspended) {
return this.oneStepDownIsPending = true;
}
}
//----------------
showNextFrame() {
if (this.isSuspended) {
return this.oneStepUpIsPending = true;
}
}
//------------
stop() {
//---
this.isStopped = true;
return this.isSuspended = false;
}
//if @isSuspended then setTimeout (=> do @_doneAnim), 0
// Private "instance" methods.
// Reset frame and sign records and call schedular callback
_doneAnim() {
this.frameCur = -1;
this.signCur = -1;
this.glossCur = null;
this._animDone();
return typeof lggr.trace === "function" ? lggr.trace("doneAnim") : void 0;
}
//   This method allows us to initialise @clckCur, using the clknow
//   value supplied to the first _doNextStep() invocation following
//   each reset() invocation.
_doResetClock(clknow) {
//------------
this._needsResetClock = false;
return this.clckBase = this.clckCur = Date.now(); // clknow
}
_clockTime(animT) {
return this.clckBase + (animT - this.animBase) / this.speedCur;
}
//---------
_animTime(clockT) {
return this.animBase + (clockT - this.clckBase) * this.speedCur;
}
//--------
_rqstNextTick(delay = 0) {
if (this.reporting && this.animCur < this.traceMax) {
if (typeof lggr.trace === "function") {
lggr.trace(`rqstNextTick delay=${delay}`);
}
}
return this._rqstAnim(((cnow) => {
return this._doNextStep(cnow);
}), delay);
}
_doNextStep(clknow) {
//----------
if (this._needsResetClock) {
this._doResetClock(clknow);
}
if (this.isStopped) {
return this._doneAnim();
} else {
return this._doNormalStep(clknow);
}
}
_doNormalStep(clknow) {
var clkprev, deltaclk, frame, newSpeed;
if (this.reporting && this.animCur < this.traceMax) {
if (typeof lggr.trace === "function") {
lggr.trace(`_doNormalStep(): clknow=${clknow} delta=${clknow - this.clckCur}`);
}
}
// JRWG: Need to rebase if speed has changed: Already done?
clkprev = this.clckCur;
this.clckCur = Date.now(); // clknow
deltaclk = this.clckCur - clkprev;
// Rebase clock if speed has changed
if ((newSpeed = this._getSpeed()) !== this.speedCur) {
this.speedCur = newSpeed;
this.clckBase = this.clckCur;
this.animBase = this.animCur;
}
frame = null;
if (this.isSuspended) {
if (this.oneStepDownIsPending) {
frame = this.casAnim.getPreviousFrame();
this.oneStepDownIsPending = false;
} else if (this.oneStepUpIsPending) {
frame = this.casAnim.getNextFrame();
this.oneStepUpIsPending = false;
}
if (frame) {
this.animCur = frame.getTime();
}
// Rebase clock while suspended
this.clckBase = this.clckCur;
this.animBase = this.animCur;
} else {
this.animCur = this._animTime(this.clckCur);
}
if (frame == null) {
frame = this.casAnim.getFrame(this.animCur);
}
return this._completeCurrentStep(frame, deltaclk);
}
_completeCurrentStep(frame, deltaclk) {
var delay, f, g, s, sFrame, sSign;
//-------------------
// Review handling of sign beyond end of sequence maybe with dummy frame
[g, s, f] = this.casAnim.getSignAndFrameInfo();
// Report appropriate changes
if (f !== this.frameCur) {
this._reportSF(s, f); // JRWG move into loop below
}
// Process any skipped frames
if (f > this.frameCur) {
// Stepping forward
this.frameCur++;
while (f > this.frameCur) {
// Frames Skipped
sFrame = this.casAnim.frameAt(this.frameCur);
if (this.reporting && this.animCur < this.traceMax) {
if (typeof lggr.trace === "function") {
lggr.trace(`Frame ${this.frameCur} skipped`);
}
}
if (sFrame.sign.i !== this.signCur) {
sSign = sFrame.sign;
if (this.reporting && this.signCur >= 0) {
if (typeof lggr.info === "function") {
lggr.info(`Sign ${this.signCur} [${this.glossCur}] Played. ${this.framesPlayed + this.framesSkipped} frames` + (this.framesSkipped > 0 ? ` (${this.framesSkipped} skipped)` : ""));
}
}
this.signCur = sSign.i;
this.glossCur = sSign.gloss;
this._reportGS(this.glossCur, this.signCur, this.frameCur);
this.framesPlayed = 0;
this.framesSkipped = 0;
}
this.framesSkipped++;
this.frameCur++;
}
} else if (f === this.frameCur) {
if (this.reporting && this.animCur < this.traceMax) {
if (typeof lggr.trace === "function") {
lggr.trace(`Frame ${f} repeated`);
}
}
} else {
// Stepping backwards: To be handled better later
this.frameCur = f;
}
// Report on chosen frame
if (s !== this.signCur || !frame) {
if (this.reporting && this.signCur >= 0) {
if (typeof lggr.info === "function") {
lggr.info(`Sign ${this.signCur} [${this.glossCur}] Played. ${this.framesPlayed + this.framesSkipped} frames` + (this.framesSkipped > 0 ? ` (${this.framesSkipped} skipped)` : ""));
}
}
this.signCur = s;
this.glossCur = g;
this._reportGS(this.glossCur, this.signCur, this.frameCur);
this.framesPlayed = 0;
this.framesSkipped = 0;
}
// Play frame or signal end of sequence
if (frame) {
this._playFrame(frame, deltaclk);
this.framesPlayed++;
delay = (this._clockTime(frame.getTime() + frame.getDuration())) - Date.now();
this._rqstNextTick(Math.max(delay, 0)); // 10
} else {
this._doneAnim();
}
return this._checkFPS(deltaclk);
}
_resetFPS() {
//--------
this.clkFPSBase = this.clckCur;
this.tFPSAccum = 0;
return this.nFPSTicks = 0;
}
_checkFPS(deltaclk) {
//--------
if (this._updateFPS) {
this.tFPSAccum += deltaclk;
this.nFPSTicks += 1;
if (1000 <= this.tFPSAccum) {
this._updateFPS(this.nFPSTicks * 1000 / this.tFPSAccum);
return this._resetFPS();
}
}
}
};
// Export
cwaenv.add(AnimScheduler, "AnimScheduler");
// (End AnimScheduler.coffee)
}).call(this);
// -------- SigningAvatar.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AGI, AnimScheduler, AvCache, AvDefView, AvatarCamera, CASAnimation, CASFrame, Character, Config, Data, HtoG, Logger, SigningAvatar, cwaenv, document, lggr, setTimeout, theConfig, theSToCA;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Avatar");
Data = cwaenv.get("Data");
Config = cwaenv.get("Config");
AvCache = cwaenv.get("AvCache");
AvDefView = cwaenv.get("AvDefView");
AvatarCamera = cwaenv.get("AvatarCamera");
AGI = cwaenv.get("AGI");
CASFrame = cwaenv.get("CASFrame");
Character = cwaenv.get("Character");
CASAnimation = cwaenv.get("CASAnimation");
AnimScheduler = cwaenv.get("AnimScheduler");
HtoG = cwaenv.get("HtoG");
theSToCA = cwaenv.get("theSToCA");
theConfig = Config.theConfig;
SigningAvatar = (function() {
//------------------
class SigningAvatar {
constructor(avGUI, canvasEl, speedFun, drainFun) {
var acCommon, xslLoc;
//   Plays given SiGML text which is guaranteed to be G-SiGML.
//   Also used as callback when loading from a URL.
this.playGSiGML = this.playGSiGML.bind(this);
//   Plays given SiGML text.
//   Also used as callback when loading from a URL.
this.playSiGMLText = this.playSiGMLText.bind(this);
//   Plays given SiGML text.
this.playSiGML = this.playSiGML.bind(this);
this.avGUI = avGUI;
this.canvasEl = canvasEl;
this.speedFun = speedFun;
this.drainFun = drainFun;
//----------
this.avIndex = this.avGUI.avIndex; // Avatar panel index
this.configIndex = this.avIndex % theConfig.avSettings.length; // Config entry used
this.gl = null; // WebGL graphics context.
this.character = null; // The avatar.
this.camera = null; // Simple orbit camera.
this.pendingAvName = null; // Pending new avatar.
this.pendingCASAnim = null; // Pending new animation.
this.curAnimScheduler = null; // Animation scheduler
this.stocMap = {}; // SiGML-to-CAS request ID map.
this.nSToC = 0; // SiGML-to-CAS request index.
this.divAv = this.canvasEl.parentNode; // Using parent node size for resizing
this.avWidth = 0; // Previous divAv clientWidth
this.avHeight = 0; // Previous divAv clientWidth
if (typeof lggr.info === "function") {
lggr.info(`Starting SigningAvatar ${this.avIndex}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`SigningAvatar Config: ${Data.ppJSON(theConfig)}`);
}
this.USING_JAR_FOR_AV_DEF = theConfig.useAvatarJARs; // Av-Data JAR vs. JSON for avatar definition.
// Prefetch COMMON configuration
acCommon = AvCache.get("COMMON");
(acCommon.getZIPEnt("config")).catch((err) => {
return lggr.warn(`Cannot load COMMON config for GUI ${this.avIndex}`);
});
this.sigmlBase = theConfig.sigmlBase;
xslLoc = Data.absoluteURI("h2s.xsl", theConfig.cwaBase);
if (typeof lggr.debug === "function") {
lggr.debug(`SiGML base: ${this.sigmlBase} XSLfile: ${xslLoc}`);
}
// Assumed to be global to all instances so share H2G processor
if (SigningAvatar.H2G == null) {
SigningAvatar.H2G = new HtoG(xslLoc);
}
this.animgenServer = theConfig.animgenServer;
if (this.animgenServer != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`Animgen Server: ${this.animgenServer}`);
}
}
this.USING_JSON_STOC_FORMAT = true; // JSON stream vs. XML CAS results.
this.jCAS = null; // Cache for streamed SiGML-to-CAS JSON results.
// OpenGL context for the canvas.
this.canvasEl.setAttribute("ondragstart", "return false");
if (typeof lggr.debug === "function") {
lggr.debug(`WebGL context: ${this.canvasEl.getContext}`);
}
this.gl = (this.canvasEl.getContext("webgl")) || (this.canvasEl.getContext("experimental-webgl"));
if (this.gl == null) {
lggr.warn("SigningAvatar: No WebGL context. Disaster.");
}
this.gl.viewport(0, 0, this.canvasEl.width, this.canvasEl.height);
// A light blue around #A3B8D4
// @gl.clearColor 0.64, 0.72, 0.82, 1.0
// Transparent background
this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
this.logGLImplementationData();
}
// Public "instance" methods.
switchAvatar(av) {
if (typeof lggr.log === "function") {
lggr.log(`SigningAvatar: Switch Avatar to ${av}`);
}
if (!this.character || (this.character.getName()) !== av) {
this.pendingAvName = av;
if (this.curAnimScheduler) {
return this.stopPlay();
} else {
return setTimeout((() => {
return this.loadNewAvatar();
}), 0);
}
} else {
return typeof lggr.info === "function" ? lggr.info(`SigningAvatar: Character ${av} already loaded`) : void 0;
}
}
playGSiGML(sigmlText) {
var CASCB, av, blob, cascb, casfmt, form, rqst, rqstid, servURI, skipSign;
if (typeof lggr.debug === "function") {
lggr.debug("SigningAvatar: playGSiGML");
}
if (typeof lggr.trace === "function") {
lggr.trace(`SigningAvatar: GSiGML Text:\n${sigmlText}`);
}
av = this.character.getName();
if (theConfig.animgenProc === "Client") {
// Use Animgen in JavaScript: Similar to SToCA interface
this.avGUI.stat(`SiGML Loading for ${av}`);
// Set up for Animgen callback
skipSign = 0;
// JRWG reuse jCAS
if (this.jCAS == null) {
this.jCAS = {
anim: new CASAnimation(),
playStarted: false
};
}
CASCB = (jsonsign) => {
var pfx;
pfx = "Animgen: ";
switch (jsonsign.type) {
case AGI.CB.Sign:
return this.acceptJSONCASSign(jsonsign, pfx);
case AGI.CB.Skip:
return skipSign++;
case AGI.CB.Done:
this.acceptJSONCASEndSignStream(pfx, skipSign === 0 ? "" : " with errors");
return this.jCAS = null;
case AGI.CB.Fail:
// No valid signs returned
this.avGUI.stat(`${jsonsign.err}`);
if (this.jCAS.playStarted) {
if (typeof lggr.warn === "function") {
lggr.warn("SigningAvatar: SiGML failed but play has started");
}
}
return Logger.callHook("sigmlloaded", null, this.avIndex);
default:
return this.avGUI.stat(`Unexpected callback ${jsonsign.type}`);
}
};
// Make the Animgen request
return AGI.SiGMLToCAS(sigmlText, av, this.avIndex, theConfig.animgenFPS, this.speedFun, SigningAvatar.H2G, CASCB, this.drainFun);
} else if (theConfig.animgenProc === "Server") {
// Using Animgen Server: JRWG Time to remove this?
servURI = `${this.animgenServer}?avatar=${av}`;
if ((sigmlText.indexOf("hns_sign")) !== -1) {
if (typeof lggr.warn === "function") {
lggr.warn("SigningAvatar: Error: Still needs H-SiGML to G-SiGML processing");
}
servURI += "&htog=true";
}
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: playGSiGML Server URI: ${servURI}`);
}
this.avGUI.stat(`Processing SiGML for ${av}`);
this.jCAS = {
anim: new CASAnimation(),
playStarted: false
};
// Call Server
form = new FormData();
blob = new Blob([sigmlText]);
form.append("sigml", blob, "temp.sigml");
return (Data.fetchJSON(servURI, form)).then((jsonData) => {
var i, len, sign;
Logger.callHook("json", Data.ppJSON(jsonData), this.avIndex);
for (i = 0, len = jsonData.length; i < len; i++) {
sign = jsonData[i];
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Sign ${sign.signIndex} ${sign.gloss}`);
}
this.acceptJSONCASSign(sign, "AnimgenServer");
}
this.acceptJSONCASEndSignStream("AnimgenServer");
// May be unnecessary
if (jsonData.length === 0) {
Logger.callHook("animidle", null, this.avIndex);
return this.avGUI.stat(`No signs returned for ${av}`);
}
}).catch((err) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: Server ${servURI}: Failed ${Logger.errDesc(err)}`);
}
// May be necessary to clear stream
this.acceptJSONCASEndSignStream("AnimgenServer");
this.avGUI.stat("Animgen: SiGML not loaded from server");
return Logger.callHook("animidle", null, this.avIndex);
});
} else if ((theSToCA.getSToCA()) != null) {
// Using SToCA: JRWG Time to remove this?
casfmt = (this.USING_JSON_STOC_FORMAT ? "json" : "xml");
rqstid = `stoca${this.nSToC}_${this.avIndex}`;
this.nSToC += 1;
rqst = {
stext: sigmlText
};
this.stocMap[rqstid] = rqst;
this.avGUI.stat(`Loading SiGML text for ${av}`);
// Set up S-to-C callback.
if (this.USING_JSON_STOC_FORMAT) {
this.jCAS = {
anim: new CASAnimation(),
playStarted: false
};
}
cascb = (cas) => {
if (this.USING_JSON_STOC_FORMAT) {
return this.acceptJSONCAS(rqstid, cas);
} else {
return this.acceptXMLCAS(rqstid, cas);
}
};
// Make the S-to-C request if possible
//@avGUI.stat "typeof theSToCA.doSiGMLTextToCAS: #{typeof theSToCA.doSiGMLTextToCAS}"
if (!theSToCA.doSiGMLTextToCAS(rqstid, sigmlText, av, casfmt, cascb)) {
// Revert to Client and retry
this.avGUI.stat("Revert to Client as no SiGML Text to CAS method");
theConfig.animgenProc = "Client";
return this.playGSiGML(sigmlText);
}
} else {
// No applet so revert to Client and retry
this.avGUI.stat("Revert to Client as SToCA applet unavailable");
theConfig.animgenProc = "Client";
return this.playGSiGML(sigmlText);
}
}
playSiGMLText(sigmlText) {
var CB, av;
//--------
av = this.character.getName();
if (typeof lggr.debug === "function") {
lggr.debug("SigningAvatar: playSiGMLText");
}
if (typeof lggr.trace === "function") {
lggr.trace(`SigningAvatar: SiGML text:\n${sigmlText}`);
}
// JRWG Client will become the only option
if (theConfig.animgenProc === "Client") {
if (typeof lggr.trace === "function") {
lggr.trace("SigningAvatar: Client will ensure G-SiGML format");
}
return this.playGSiGML(sigmlText);
} else if ((sigmlText.indexOf("hns_sign")) !== -1) {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: playSiGML ${theConfig.animgenProc}: Needs H-SiGML to G-SiGML processing`);
}
CB = (res) => {
if (typeof lggr.debug === "function") {
lggr.debug("SigningAvatar: playSiGML: Processed to G-SiGML");
}
if (res.errNum !== 0) {
// Will not be animating but will be loading
Logger.callHook("sigmlloaded", null, this.avIndex);
this.avGUI.stat(`No signs available for ${av}`);
return typeof lggr.trace === "function" ? lggr.trace(`SigningAvatar: Errors:\n${res.errDetail}`) : void 0;
} else {
return this.playGSiGML(Data.mnDOM(res.errDoc));
}
};
this.avGUI.stat(`Converting H-SiGML to G-SiGML for ${av}`);
return SigningAvatar.H2G.parseHtoGText(sigmlText, CB);
} else {
if (typeof lggr.trace === "function") {
lggr.trace(`SigningAvatar ${theConfig.animgenProc}: Already in G-SiGML format`);
}
return this.playGSiGML(sigmlText);
}
}
playSiGML(sigmlText) {
//--------
Logger.callHook("sigmlloading", null, this.avIndex);
if (typeof lggr.info === "function") {
lggr.info("SigningAvatar: playSiGML");
}
return this.playSiGMLText(sigmlText);
}
//   Loads and plays text from given SiGML URL
playSiGMLURL(sigmlURL) {
var surlAbs;
//-----------
Logger.callHook("sigmlloading", null, this.avIndex);
surlAbs = Data.absoluteURI(sigmlURL, this.sigmlBase);
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: playSiGMLURL: ${surlAbs}`);
}
return (Data.fetchText(surlAbs)).then(this.playSiGMLText).catch((err) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: playSiGMLURL: ${surlAbs}: Failed ${Logger.errDesc(err)}`);
}
this.avGUI.stat("Animgen: SiGML URL not loaded");
// This will set animation to idle
return Logger.callHook("sigmlloaded", null, this.avIndex);
});
}
// JRWG: Unused and uses deprecated synchronous call in fromCASFile
playCAS(casfile) {
//------
lggr.warn("SigningAvatar: playCAS: Not implemented");
return void 0;
}
// try
//   @checkFramesAndSwitchAnimation (CASAnimation.fromCASFile casfile)
// catch e
//   lggr.warn "SigningAvatar:  e.stack or e.stacktrace or e
stopPlay() {
if (this._checkAS("Stop")) {
return this.curAnimScheduler.stop();
}
}
//-------
suspendPlay() {
if (this._checkAS("Suspend")) {
return this.curAnimScheduler.suspend();
}
}
//----------
resumePlay() {
if (this._checkAS("Resume")) {
return this.curAnimScheduler.resume();
}
}
//---------
showPreviousFrame() {
if (this._checkAS("Show Previous Frame")) {
//----------------
return this.curAnimScheduler.showPreviousFrame();
}
}
showNextFrame() {
if (this._checkAS("Show Next Frame")) {
//------------
return this.curAnimScheduler.showNextFrame();
}
}
_checkAS(optag) {
if (!this.curAnimScheduler) {
//-------
lggr.warn(`SigningAvatar: ${optag} impossible: no current animation.`);
}
return this.curAnimScheduler != null;
}
// Private "instance" methods.
//@speedFun() -- is a ctor parameter
logGLImplementationData() {
var glver, maXVUV, maxVA, renderer, slver, vendor;
//----------------------
glver = this.gl.getParameter(this.gl.VERSION);
slver = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
vendor = this.gl.getParameter(this.gl.VENDOR);
renderer = this.gl.getParameter(this.gl.RENDERER);
maxVA = this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);
maXVUV = this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS);
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar WebGL: Version: ${glver}. GLSL Version: ${slver}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar WebGL: Vendor: ${vendor}. Renderer: ${renderer}`);
}
return typeof lggr.debug === "function" ? lggr.debug(`SigningAvatar WebGL: MAX_VERTEX_ATTRIBS: ${maxVA};  MAX_VERTEX_UNIFORM_VECTORS: ${maXVUV}`) : void 0;
}
notifyFrame(s, f) {
//----------
if (this.curAnimScheduler.reporting) { // isnt @ambientScheduler
Logger.callHook("avatarframe", {
s: s,
f: f
}, this.avIndex);
return this.character.meshes[0].morphsManager._f = f;
}
}
//     else
//       # Temp JRWG for ambient
//       Logger.callHook "avatarframe", {s:s; f:f}, @avIndex
notifySign(g, s, f) {
if (this.curAnimScheduler.reporting) { // isnt @ambientScheduler
return Logger.callHook("avatarsign", {
g: g,
s: s,
f: f
}, this.avIndex);
}
}
draw(frame, deltaclk) {
var avHeightCurr, avWidthCurr;
//---
// Set Canvas size from element dimensions
// Assume: No padding or border on Canvas
avWidthCurr = this.canvasEl.clientWidth;
avHeightCurr = this.canvasEl.clientHeight;
if (this.avWidth !== avWidthCurr || this.avHeight !== avHeightCurr) {
this.canvasEl.width = avWidthCurr;
this.canvasEl.height = avHeightCurr;
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Set Canvas Size ${this.avIndex}: W=${this.canvasEl.width} H=${this.canvasEl.height}`);
}
this.avWidth = avWidthCurr;
this.avHeight = avHeightCurr;
}
this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
this.gl.viewport(0, 0, this.canvasEl.width, this.canvasEl.height);
this.gl.enable(this.gl.DEPTH_TEST);
this.gl.enable(this.gl.CULL_FACE);
this.camera.update(deltaclk, this.canvasEl.width, this.canvasEl.height);
this.character.setFrame(frame);
return this.character.draw(this.avPos[0], this.avPos[1], this.avPos[2], this.camera.getViewMatrix(), this.camera.getProjMatrix());
}
startNewCamera() {
var camdata, m2internal, yadj;
//-------------
m2internal = this.character.getMetresToInternal();
yadj = this.character.getAdjustViewY();
// Avatar''s location -- fixed at origin.
this.avPos = [0, 0, 0];
// Camera parameters, as for JARP:
// Target (cor) [X,Y],  CamLoc [R,theta,phi], FOV, Rotation Limits [l,r];
// Target Z=0,  CamLoc theta from +Z in XZ plane, phi from XZ towards +Y;
// Lengths (X,Y,R) in metres, angles (theta,phi,FOV,l,r) in degrees.
camdata = theConfig.avSettings[this.configIndex].initCamera || [0, 0, 4, 12, 19, 30, -1, -1];
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Camera: [${camdata.toString()}]`);
}
// Create camera.
this.camera = new AvatarCamera(this.gl, camdata, yadj, m2internal);
// Attach camera''s mouse event handlers to the canvas.
this.canvasEl.onmousedown = (evt) => {
return this.camera.mousedown(evt);
};
this.canvasEl.onmousemove = (evt) => {
return this.camera.mousemove(evt);
};
this.canvasEl.onmouseup = (evt) => {
return this.camera.mouseup(evt);
};
this.canvasEl.onmouseover = (evt) => {
return this.camera.mouseover(evt);
};
this.canvasEl.onmouseout = (evt) => {
return this.camera.mouseout(evt);
};
// Attach camera''s touch event handlers to the canvas.
this.canvasEl.addEventListener('touchstart', this.camera.touchstart, false);
this.canvasEl.addEventListener('touchend', this.camera.touchend, false);
return this.canvasEl.addEventListener('touchmove', this.camera.touchmove, false);
}
loadNewAvatar() {
var av;
//------------
// Now only release character when new character is sucessful
av = this.pendingAvName;
this.pendingAvName = null;
this.pendingCASAnim = null;
Logger.callHook("avatarloading", av, this.avIndex);
if (this.USING_JAR_FOR_AV_DEF) {
return this.startBinaryAvatar(av);
} else {
return this.startJSONAvatar(av);
}
}
startJSONAvatar(av) {
var e;
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Start JSON character load for ${av}`);
}
try {
// Load character.
this.character = new Character();
this.character.loadJSON(this.gl, av);
return this.startNewCharacter(av, "JSON");
} catch (error) {
e = error;
this.character = null;
Logger.callHook("avatarloaded", null, this.avIndex);
return typeof lggr.warn === "function" ? lggr.warn("SigningAvatar: " + (e.stack || e.stacktrace || e)) : void 0;
}
}
loadBinaryAvatar(avdef) {
var av, e;
//---------------
// Load character
av = avdef.av;
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Load Binary character ${av}`);
}
try {
return this.character.loadBinary(this.gl, av, avdef);
} catch (error) {
e = error;
this.character = null;
// Might need better backup
Logger.callHook("avatarloaded", null, this.avIndex);
return typeof lggr.warn === "function" ? lggr.warn(`SigningAvatar: Error ${e}\nStack:\n${e.stack}\nStackTrace:\n${e.stacktrace}`) : void 0;
}
}
startBinaryAvatar(av) {
var avCache, avChar, bindForGL, prevAv, prevCharacter, ref;
//----------------
avCache = AvCache.get(av);
avChar = avCache.getCharacter(this.avIndex);
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Start Binary character ${av} (Character cached=${avChar != null})`);
}
prevCharacter = this.character;
prevAv = (ref = this.character) != null ? ref.avatarName : void 0;
if (prevAv != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: Previous character ${prevAv}`);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: No Previous character ${prevAv}`);
}
}
bindForGL = () => {
if (prevCharacter != null) {
prevCharacter.release();
}
this.character.bindForGL(this.gl);
return this.startNewCharacter(av, "Binary");
};
if (avChar != null) {
this.character = avChar;
bindForGL();
} else {
this.character = new Character();
avCache.setCharacter(this.character, this.avIndex);
// Load or access avatar data
(avCache.procAvDef()).then((avdef) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: Called Handler for ${avdef.av}`);
}
this.loadBinaryAvatar(avdef);
return bindForGL();
}).catch((e) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: Error for ${av}: ${e}`);
}
// Could mark in cache and avoid reloading but this should be unexpected
AvCache.clear(av);
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Cannot load ${av}. Reverting to ${prevAv}`);
}
this.character = prevCharacter;
return this.startNewCharacter(prevAv, "Binary");
});
}
// Preload Animgen configuration files
return Promise.all([avCache.getZIPEnt("config"), avCache.getZIPEnt("asd"), avCache.getZIPEnt("nonManuals")]).then((xmls) => {
return typeof lggr.info === "function" ? lggr.info(`Configuration files loaded for ${this.avIndex}`) : void 0;
}).catch((err) => {
return lggr.warn(`SigningAvatar: Configuration files unavailable for ${this.avIndex}: ${err}`);
});
}
startNewCharacter(avname, loadkind) {
//----------------
Logger.callHook("avatarloaded", (this.character ? avname : null), this.avIndex);
if (this.character) {
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: Character loaded (${loadkind}): ${avname}`);
}
this.startNewCamera();
return this.makeNewAmbientScheduler(true);
}
}
makeNewAmbientScheduler(startAmb = false) {
var ambFrames, wasAmb;
//-----------------------
wasAmb = this.curAnimScheduler === this.ambientScheduler;
if (typeof lggr.debug === "function") {
lggr.debug(`makeNewAmbientScheduler startAmb=${startAmb} wasAmb=${wasAmb}`);
}
ambFrames = CASAnimation.fromFrames(this.character.getAmbientFrames(this.avGUI.ambIdle));
this.ambientScheduler = this.makeAnimScheduler(ambFrames, false);
// Stopping the ambient animation will automatically start it again
if (wasAmb) {
return this.curAnimScheduler.stop();
} else if (startAmb) {
return this.startAmbientAnimation();
}
}
donePlay() {
var actionfun;
//-------
if (this.curAnimScheduler.reporting) { // isnt @ambientScheduler
Logger.callHook("animidle", null, this.avIndex);
this.avGUI.stat("Playing complete");
}
this.curAnimScheduler = null;
actionfun = this.pendingAvName ? (() => {
return this.loadNewAvatar();
}) : this.pendingCASAnim ? (() => {
return this.startPendingAnimation();
}) : (() => {
return this.startAmbientAnimation();
});
return setTimeout(actionfun, 0);
}
// (MORPH TIME MONITORING -- for case not @pendingAvName above)
// if newframes is window.tmLogFrames
// 	window.tMorphLog = [ ]
// else if window.tMorphLog and not window.doneTMLog
// 	window.doneTMLog = true
// 	NML = window.tMorphLog.length
//   for k in [0...NML]
// 		tmdata = window.tMorphLog[k]
// 		tm = tmdata[0];  nm = tmdata[1]
// 		lggr.trace? "SigningAvatar:  "#{k}: nm=#{nm},  tm=#{tm}")
checkFramesAndSwitchAnimation(casanim) {
if (casanim.hasFrames()) {
//----------------------------
return this.switchAnimation(casanim);
}
}
switchAnimation(casanim) {
//--------------
this.pendingCASAnim = casanim;
if (this.curAnimScheduler) {
return this.curAnimScheduler.stop();
} else {
return this.startPendingAnimation();
}
}
startPendingAnimation() {
//--------------------
this.curAnimScheduler = this.makeAnimScheduler(this.pendingCASAnim, true);
this.pendingCASAnim = null;
Logger.callHook("animactive", null, this.avIndex);
this.avGUI.stat("Playing starts");
return this.curAnimScheduler.restart();
}
startAmbientAnimation() {
//--------------------
this.curAnimScheduler = this.ambientScheduler;
return this.curAnimScheduler.restart();
}
makeAnimScheduler(casanim, report) {
var donefun, framefun, playfun, rqstanimfun, signfun, updatefps;
//----------------
playfun = this.draw.bind(this); // (frm, dclk)
donefun = this.donePlay.bind(this); // ()
framefun = this.notifyFrame.bind(this); // (s, f)
signfun = this.notifySign.bind(this); // (g, s, f)
rqstanimfun = window.delayAnimationFrame.bind(window);
updatefps = (fps) => {
return Logger.callHook("avatarfps", fps, this.avIndex);
};
return new AnimScheduler(casanim, report, playfun, donefun, this.speedFun, framefun, signfun, updatefps, rqstanimfun);
}
// SToCA receiver of JSON CAS chunks
acceptJSONCAS(rqstid, jcassign) {
var jsonsign, pfx, s, sigmlText, theJSON;
//------------
s = this.jCAS.anim.countSigns();
pfx = `S-to-C request ID=${rqstid}, sign ${s}: `;
if (this.stocMap[rqstid]) {
jsonsign = Data.parseJSON(jcassign);
if (jsonsign) {
if (jsonsign.signIndex === void 0) {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: SToCA acceptJSONCAS ${pfx}End of stream`);
}
sigmlText = this.stocMap[rqstid].stext;
this.acceptJSONCASEndSignStream(pfx);
this.closeSToCRequest(rqstid);
// Revert to Client for crashed applet
if (theSToCA.statusIs("dead")) {
this.avGUI.stat("Revert to Client as SToCA applet has crashed");
theConfig.animgenProc = "Client";
return this.playGSiGML(sigmlText);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: SToCA acceptJSONCAS ${pfx}${jsonsign.gloss}`);
}
if (s === 0) {
// JRWG Maybe avoid if no hook set up
theJSON = "";
}
theJSON += Data.ppJSON(jsonsign);
// Will send increasingly long sequence presumably
Logger.callHook("json", theJSON, this.avIndex);
return this.acceptJSONCASSign(jsonsign, pfx);
}
} else {
return lggr.warn(`SigningAvatar: ${pfx}invalid JSON for sign ${s}.`);
}
} else {
return lggr.warn(`SigningAvatar: ${pfx}unexpected request ID.`);
}
}
acceptJSONCASSign(jsonsign, msgpfx) {
var anim, s, sframes, sgloss;
//----------------
Logger.callHook("sigmlsign", jsonsign, this.avIndex);
anim = this.jCAS.anim;
sframes = jsonsign.frames.map(CASFrame.fromJSON);
s = jsonsign.signIndex;
sgloss = jsonsign.gloss;
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: acceptJSONCASSign call ${msgpfx}${sgloss}, #frames=${sframes.length}`);
}
anim.extendSigns({
i: s,
gloss: sgloss,
frames: sframes
});
if (!this.jCAS.playStarted && anim.hasFrames()) {
this.switchAnimation(anim);
this.jCAS.playStarted = true;
}
return typeof lggr.debug === "function" ? lggr.debug(`SigningAvatar: acceptJSONCASSign done ${msgpfx}${sgloss}`) : void 0;
}
acceptJSONCASEndSignStream(msgpfx, qual = "") {
var anim;
//-------------------------
anim = this.jCAS.anim;
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: ${msgpfx}Complete ${anim.countFrames()} frames`);
}
anim.setCompleted();
if (anim.hasFrames()) {
this.avGUI.stat(`SiGML Loaded${qual}`);
return Logger.callHook("sigmlloaded", {
s: anim.countSigns(),
f: anim.countFrames()
}, this.avIndex);
} else {
this.avGUI.stat("SiGML has no valid signs");
// Loading but not activated
return Logger.callHook("sigmlloaded", null, this.avIndex);
}
}
acceptXMLCAS(rqstid, cas) {
var pfx, rqst;
//-----------
rqst = this.stocMap[rqstid];
pfx = `S-to-C request ID=${rqstid}: `;
if (!rqst) {
lggr.warn(`SigningAvatar: ${pfx}unexpected ID.`);
} else if (!cas) {
if (typeof lggr.debug === "function") {
lggr.debug(`SigningAvatar: ${pfx}failed.`);
}
} else {
if (typeof lggr.info === "function") {
lggr.info(`SigningAvatar: ${pfx}CAS text length=${cas.length}.`);
}
this.checkFramesAndSwitchAnimation(CASAnimation.fromCASText(cas));
}
return this.closeSToCRequest(rqstid);
}
closeSToCRequest(rqstid) {
//---------------
theSToCA.setDoneSiGMLToCASRequest(rqstid);
delete this.stocMap[rqstid];
return this.jCAS = null;
}
};
//------------------
// Class "static" methods
// Example from AGI
// @STATE = { Failed:0, Running:1, Alloc:2, AvatarSet:3, SeqReady:4, SeqInProgress:5, Terminated:6 }
// @CB = { Unset:0, Sign:1, Skip:2, Done:3, Fail:4 }
SigningAvatar.H2G = null;
return SigningAvatar;
}).call(this);
// Export
cwaenv.add(SigningAvatar, "SigningAvatar");
// (End SigningAvatar.coffee)
}).call(this);
// -------- HTMLForAvatarGUI.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var HTMLForAvatarGUI, Logger, cwaenv, document, lggr, setTimeout;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Logger = cwaenv.get("Logger");
lggr = Logger.get("AvatarGUI");
//---------------------
HTMLForAvatarGUI = class HTMLForAvatarGUI {
//---------------------
constructor(ix, avSettings) {
this.ix = ix;
//----------
this.avw = avSettings.width;
this.avh = avSettings.height;
this.avBg = avSettings.background;
this.avs = avSettings.avList;
this.initav = avSettings.initAv;
this.doFrameSteps = avSettings.allowFrameSteps;
this.dostext = avSettings.allowSiGMLText;
this.initsurl = avSettings.initSiGMLURL;
this.ambIdle = avSettings.ambIdle;
}
// "Instance" methods.
allHTML() {
var avatar, avgui, table;
//------
avatar = this.htmlForAv();
avgui = this.htmlForGUI();
table = `<table class=\"avTable av${this.ix}\" ><tr>
<td align=\"center\" >
${avgui}
</td>
<td width="8"></td>
<td width="${this.avw}" height="${this.avh}" >
${avatar}
</td>
</tr></table>`;
if (typeof lggr.trace === "function") {
lggr.trace(`HTMLForAvatarGUI: Full HTML:\n${table}`);
}
return table;
}
htmlForGUI() {
var gui, html;
//---------
gui = [this.htmlForAvCtrl(), this.htmlForSpeed(), this.htmlForSiGML(), this.htmlForSiGMLCtrl(), this.htmlForInfo()].join("\n<br>\n");
return html = `<div class="divCtrlPanel" >
${gui}
</div>`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForAv() {
var html, sty;
//--------
sty = this.avBg != null ? `style=\"background: ${this.avBg};\" ` : "";
if (typeof lggr.debug === "function") {
lggr.debug(`HTMLForAvatarGUI: Style for background is: \'${sty}\'`);
}
html = `<div class="divAv av${this.ix}" ${sty}>
<canvas class="canvasAv av${this.ix}" ></canvas>
</div>  <!--class="divAv av${this.ix}"-->`;
if (typeof lggr.trace === "function") {
lggr.trace(`HTMLForAvatarGUI: HTML:\n${html}`);
}
return html;
}
htmlForAvMenu() {
var av, avopts, html, opt;
//------------
opt = (av) => {
var sel;
sel = av === this.initav ? " selected=\"selected\"" : "";
return `<option value=\"${av}\"${sel} >${av}</option>`;
};
avopts = ((function() {
var i, len, ref, results;
ref = this.avs;
results = [];
for (i = 0, len = ref.length; i < len; i++) {
av = ref[i];
results.push(opt(av));
}
return results;
}).call(this)).join("\n");
return html = `<select class="menuAv av${this.ix}" >
${avopts}
</select>`;
}
htmlForAmbBox() {
var checked, html;
//------------
checked = this.ambIdle ? " checked" : "";
return html = `<input type="checkbox" class="boxAmb av${this.ix}"${checked}>`;
}
htmlForAvCtrl() {
var gap, html;
//------------
gap = "&nbsp;";
return html = `<!--========================================================-->
<span class="spanPlayA av${this.ix}" >
Avatar:
${this.htmlForAvMenu()}
${gap}
Ambient:
${this.htmlForAmbBox()}
</span>  <!--class="spanPlayA av${this.ix}"-->`;
}
//" (comment to placate textwrangler''s quote-counting)
_htmlForSiGMLPlayButtons(surl, stext) {
var bstext, bstop, bsurl, gap, html, sep;
if (typeof lggr.debug === "function") {
lggr.debug(`HTMLForAvatarGUI: PlayButtons: URL=${surl}, Text=${stext}`);
}
bstop = `<input type=\"button\" value=\"Stop\" class=\"bttnStop av${this.ix}\" />`;
bsurl = !surl ? "" : "<input type=\"button\" value=\"Play SiGML URL\" " + `class=\"bttnPlaySiGMLURL av${this.ix}\" />`;
bstext = !stext ? "" : "<input type=\"button\" value=\"Play SiGML Text\" " + `class=\"bttnPlaySiGMLText av${this.ix}\" />`;
sep = "";
gap = "";
if (bsurl.length !== 0 && bstext.length !== 0) {
sep = "\n";
gap = "&nbsp;";
}
return html = !surl && !stext ? "" : `<span class="spanSiGMLCtrlA av${this.ix}" >
<!--input type="button" value="Play CAS" class="bttnPlayCAS av${this.ix}" /-->
${bsurl}${sep}${bstext}
${gap}
${bstop}
</span>  <!--class="spanSiGMLCtrlA av${this.ix}"-->`;
}
//" (placate textwrangler)
htmlForSiGMLPlay() {
var hastext, hasurl, html;
//---------------
hasurl = (document.getElementsByClassName(`txtSiGMLURL av${this.ix}`)).length > 0;
hastext = (document.getElementsByClassName(`txtaSiGMLText av${this.ix}`)).length > 0;
return html = this._htmlForSiGMLPlayButtons(hasurl, hastext);
}
htmlForFrameSteps() {
var html;
//----------------
return html = `<input type="button" value="-1" class="bttnPrevF av${this.ix}" />
<input type="button" value="+1" class="bttnNextF av${this.ix}" />`;
}
//" (placate textwrangler)
htmlForSiGMLPlayExtra() {
var html;
//---------------------
return html = `<input type="button" value="Suspend" class="bttnSuspend av${this.ix}" />
<input type="button" value="Resume" class="bttnResume av${this.ix}" />`;
}
//" (placate textwrangler)
htmlForSiGMLCtrl() {
var buttons, fstext, html;
//---------------
buttons = this._htmlForSiGMLPlayButtons((this.initsurl != null) && this.initsurl !== "", this.dostext);
fstext = "";
if (this.doFrameSteps) {
fstext = `<br/>
<span align="center" class="spanSiGMLCtrlB av${this.ix}" >
${this.htmlForSiGMLPlayExtra()}
&nbsp;
Frames:
${this.htmlForFrameSteps()}
</span>  <!--class="spanSiGMLCtrlB av${this.ix}"-->`;
}
//" (placate textwrangler)
return html = `<!--========================================================-->
${buttons}
${fstext}`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForSpeedCtrl() {
var html;
//---------------
return html = `<input type="text" class="txtLogSpeed av${this.ix}" value="+1.0" />
<input type="button" value="-" class="bttnSpeedDown av${this.ix}" />
<input type="button" value="+" class="bttnSpeedUp av${this.ix}" />
<input type="button" value="Reset" class="bttnSpeedReset av${this.ix}" />`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForSpeed() {
var html;
//-----------
return html = `<!--========================================================-->
<span class="spanSpeed av${this.ix}" >
Speed (log<sub>2</sub> scale):
${this.htmlForSpeedCtrl()}
</span>  <!--class="spanSpeed av${this.ix}"-->`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForProgress() {
var html;
//----------
return html = `<!--========================================================-->
<span class="spanInfo av${this.ix}" >
Sign/Frame:
<input type="text" class="txtSF av${this.ix}" value="0/0" />
&nbsp;
Gloss:
<input type="text" class="txtGloss av${this.ix}" value="[none]" />
&nbsp;
FPS:
<input type="text" class="txtFPS av${this.ix}" value="00.00" />
</span>  <!--class="spanInfo av${this.ix}"-->`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForStatus() {
var html;
//----------
return html = `<!--========================================================-->
<span class="spanInfo av${this.ix}" >
Status:
<input type="text" class="statusExtra av${this.ix}" />
</span>  <!--class="spanInfo av${this.ix}"-->`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForInfo() {
var html;
//----------
return html = `<!--========================================================-->
<hr style="height:1px;" />
${this.htmlForProgress()}
<br>
${this.htmlForStatus()}`;
}
//" (comment to placate textwrangler''s quote-counting)
htmlForSiGMLURL() {
var html;
//--------------
return html = `<input type="text" class="txtSiGMLURL av${this.ix}" value="${this.initsurl}" />`;
}
//" (placate textwrangler)
htmlForSiGMLText() {
var html;
//--------------
return html = `<textarea class="txtaSiGMLText av${this.ix}" rows="4">
${this.sigmlText()}
</textarea>`;
}
//" (placate textwrangler)
htmlForSiGML() {
var html, stext, surl;
//-----------
surl = "";
stext = "";
if (this.initsurl) {
surl = `SiGML URL:<br>
${this.htmlForSiGMLURL()}`;
}
//" (placate textwrangler)
if (this.dostext) {
stext = `SiGML Text:<br>
${this.htmlForSiGMLText()}`;
//" (placate textwrangler)
if (surl !== "") {
surl += "<br>\n";
}
}
return html = `<hr style="height:1px;" />
<span align="center" class="divSiGML av${this.ix}" >
${surl}
${stext}
</span>  <!--class="divSiGML av${this.ix}"-->`;
}
//" (comment to placate textwrangler''s quote-counting)
sigmlText() {
var sigml;
//--------
// FIXME: it would probably be better if we got this from a file.
return sigml = `<?xml version="1.0" encoding="utf-8"?>
<sigml>
<hns_sign gloss="mug">
<hamnosys_nonmanual>
<hnm_mouthpicture picture="mVg"/>
</hamnosys_nonmanual>
<hamnosys_manual>
<hamfist/> <hamthumbacrossmod/>
<hamextfingerol/> <hampalml/>
<hamshoulders/>
<hamparbegin/> <hammoveu/> <hamarcu/>
<hamreplace/> <hamextfingerul/> <hampalmdl/>
<hamparend/>
</hamnosys_manual>
</hns_sign>
<hns_sign gloss="take">
<hamnosys_nonmanual>
<hnm_mouthpicture picture="te_Ik"/>
</hamnosys_nonmanual>
<hamnosys_manual>
<hamceeall/> <hamextfingerol/> <hampalml/>
<hamlrbeside/> <hamshoulders/> <hamarmextended/>
<hamreplace/> <hamextfingerl/> <hampalml/>
<hamchest/> <hamclose/>
</hamnosys_manual>
</hns_sign>
<hns_sign gloss="i">
<hamnosys_nonmanual>
<hnm_mouthpicture picture="a_I"/>
</hamnosys_nonmanual>
<hamnosys_manual>
<hamfinger2/> <hamthumbacrossmod/>
<hamextfingeril/> <hampalmr/>
<hamchest/> <hamtouch/>
</hamnosys_manual>
</hns_sign>
</sigml>`;
}
};
//" (comment to placate textwrangler''s quote-counting)
// Export
cwaenv.add(HTMLForAvatarGUI, "HTMLForAvatarGUI");
// (End HTMLForAvatarGUI.coffee)
}).call(this);
// -------- AvatarGUI.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AvSpeedController, AvatarGUI, Config, HTMLForAvatarGUI, Logger, SigningAvatar, State, cwaenv, document, lggr, setTimeout, slgr, theConfig, theSToCA;
cwaenv = this.getCWAEnv();
document = this.document;
setTimeout = this.setTimeout;
Config = cwaenv.get("Config");
AvSpeedController = cwaenv.get("AvSpeedController");
SigningAvatar = cwaenv.get("SigningAvatar");
HTMLForAvatarGUI = cwaenv.get("HTMLForAvatarGUI");
theSToCA = cwaenv.get("theSToCA");
Logger = cwaenv.get("Logger");
lggr = Logger.get("AvatarGUI");
slgr = Logger.get("Status");
theConfig = Config.theConfig;
// Stopping means Draining queues if necessary
// Starting means planned but not started
State = {
Idle: 0,
Starting: 1,
Running: 2,
Stopping: 3
};
AvatarGUI = class AvatarGUI {
// Static methods.
constructor(avIndex, avSettings) {
var allDiv, avEvtAnimActive, avEvtAnimIdle, avEvtAtFrame, avEvtAtSign, avEvtFPS, avEvtLoaded, avEvtLoading, avEvtSiGMLLoaded, avEvtSiGMLLoading, avaDiv, div, drainFun, htmlgen, i, j, k, l, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, q, r, ref, ref1, ref2, ref3, s, speedFun, statHook, theDivs;
// Not much has happened at the end of this ctor: we have a GUI but
// the avatar has yet to be loaded and displayed, and the GUI's not
// yet wired up to anything.
// Things really kick off when @startAvatar is called.
// Instance methods.
// Status display
this.stat = this.stat.bind(this);
this.avIndex = avIndex;
//----------
this.initAv = avSettings.initAv;
if (typeof lggr.info === "function") {
lggr.info(`Starting AvatarGUI ${this.avIndex}`);
}
htmlgen = new HTMLForAvatarGUI(this.avIndex, avSettings);
// Full GUI if CWASAPanel class
allDiv = document.getElementsByClassName(`CWASAPanel av${this.avIndex}`);
if ((ref = allDiv[0]) != null) {
ref.innerHTML = htmlgen.allHTML();
}
if (typeof lggr.trace === "function") {
lggr.trace(`Injected GUI HTML:\n${(ref1 = allDiv[0]) != null ? ref1.innerHTML : void 0}`);
}
// Ought not to find Avatar div if GUI div has been used
avaDiv = document.getElementsByClassName(`CWASAAvatar av${this.avIndex}`);
if ((ref2 = avaDiv[0]) != null) {
ref2.innerHTML = htmlgen.htmlForAv();
}
if (typeof lggr.trace === "function") {
lggr.trace(`Injected Avatar HTML:\n${(ref3 = avaDiv[0]) != null ? ref3.innerHTML : void 0}`);
}
theDivs = document.getElementsByClassName(`CWASAGUI av${this.avIndex}`);
for (i = 0, len = theDivs.length; i < len; i++) {
div = theDivs[i];
div.innerHTML = htmlgen.htmlForGUI();
}
theDivs = document.getElementsByClassName(`CWASAAvMenu av${this.avIndex}`);
for (j = 0, len1 = theDivs.length; j < len1; j++) {
div = theDivs[j];
div.innerHTML = htmlgen.htmlForAvMenu();
}
theDivs = document.getElementsByClassName(`CWASAAmbBox av${this.avIndex}`);
for (k = 0, len2 = theDivs.length; k < len2; k++) {
div = theDivs[k];
div.innerHTML = htmlgen.htmlForAmbBox();
}
theDivs = document.getElementsByClassName(`CWASASpeed av${this.avIndex}`);
for (l = 0, len3 = theDivs.length; l < len3; l++) {
div = theDivs[l];
div.innerHTML = htmlgen.htmlForSpeedCtrl();
}
theDivs = document.getElementsByClassName(`CWASASiGMLURL av${this.avIndex}`);
for (m = 0, len4 = theDivs.length; m < len4; m++) {
div = theDivs[m];
div.innerHTML = htmlgen.htmlForSiGMLURL();
}
theDivs = document.getElementsByClassName(`CWASASiGMLText av${this.avIndex}`);
for (n = 0, len5 = theDivs.length; n < len5; n++) {
div = theDivs[n];
div.innerHTML = htmlgen.htmlForSiGMLText();
}
// Needs to be after SiGML URL and Text fileds have been created
theDivs = document.getElementsByClassName(`CWASAPlay av${this.avIndex}`);
for (o = 0, len6 = theDivs.length; o < len6; o++) {
div = theDivs[o];
div.innerHTML = htmlgen.htmlForSiGMLPlay();
}
theDivs = document.getElementsByClassName(`CWASAPlayExtra av${this.avIndex}`);
for (p = 0, len7 = theDivs.length; p < len7; p++) {
div = theDivs[p];
div.innerHTML = htmlgen.htmlForSiGMLPlayExtra();
}
theDivs = document.getElementsByClassName(`CWASAFrames av${this.avIndex}`);
for (q = 0, len8 = theDivs.length; q < len8; q++) {
div = theDivs[q];
div.innerHTML = htmlgen.htmlForFrameSteps();
}
theDivs = document.getElementsByClassName(`CWASAProgress av${this.avIndex}`);
for (r = 0, len9 = theDivs.length; r < len9; r++) {
div = theDivs[r];
div.innerHTML = htmlgen.htmlForProgress();
}
theDivs = document.getElementsByClassName(`CWASAStatus av${this.avIndex}`);
for (s = 0, len10 = theDivs.length; s < len10; s++) {
div = theDivs[s];
div.innerHTML = htmlgen.htmlForStatus();
}
this.domEls = this._getDOMEls();
// State of loading and playing
this.signState = State.Idle;
this.animState = State.Idle;
this.ambIdle = avSettings.ambIdle;
this.guiDisablePlay();
// Avatar event handlers
avEvtFPS = (evt) => {
return this._setElsValue(this.domEls.fps, `${evt.msg.toFixed(2)}`);
};
Logger.addHook("avatarfps", avEvtFPS, this.avIndex);
// Increment sign and frame for natural presentation
avEvtAtFrame = (evt) => {
var msg;
msg = evt.msg;
return this._setElsValue(this.domEls.signAndFrame, `${msg.s + 1}/${msg.f + 1}`);
};
Logger.addHook("avatarframe", avEvtAtFrame, this.avIndex);
avEvtAtSign = (evt) => {
this._setElsValue(this.domEls.gloss, `${evt.msg.g}`);
return typeof lggr.trace === "function" ? lggr.trace(`End Sign: Anim: ${this.animState}  Sign: ${this.signState}`) : void 0;
};
Logger.addHook("avatarsign", avEvtAtSign, this.avIndex);
// Assuming that animation and sign loading are Idle
avEvtLoading = (evt) => {
this.guiDisablePlay();
return this._setElsValue(this.domEls.avMenu, evt.msg);
};
Logger.addHook("avatarloading", avEvtLoading, this.avIndex);
avEvtLoaded = (evt) => {
this.guiStopPlay();
return this._setElsValue(this.domEls.avMenu, evt.msg);
};
Logger.addHook("avatarloaded", avEvtLoaded, this.avIndex);
avEvtSiGMLLoading = () => {
if (typeof lggr.debug === "function") {
lggr.debug("Event sigmlloading");
}
this.signState = State.Running;
this.animState = State.Starting;
return this.guiDisablePlay();
};
Logger.addHook("sigmlloading", avEvtSiGMLLoading, this.avIndex);
avEvtSiGMLLoaded = (evt) => {
// Test for report of signs and frames or abandoned
if (evt.msg != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`Event sigmlloaded: ${evt.msg.s} signs. ${evt.msg.f} frames`);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug("Event sigmlloaded: Loading abandoned");
}
Logger.callHook("animidle", null, this.avIndex);
}
if (typeof lggr.trace === "function") {
lggr.trace(`SiGMLLoaded: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this.signState = State.Idle;
// GUI action needed if not playing
if (this.animState === State.Idle) {
this.guiStopPlay();
}
return typeof lggr.trace === "function" ? lggr.trace(`SiGMLLoaded: Anim: ${this.animState}  Sign: ${this.signState}`) : void 0;
};
Logger.addHook("sigmlloaded", avEvtSiGMLLoaded, this.avIndex);
avEvtAnimActive = () => {
if (typeof lggr.debug === "function") {
lggr.debug("Event animactive");
}
this.animState = State.Running;
return this.guiStartPlay();
};
Logger.addHook("animactive", avEvtAnimActive, this.avIndex);
avEvtAnimIdle = () => {
if (typeof lggr.debug === "function") {
lggr.debug("Event animidle");
}
if (typeof lggr.trace === "function") {
lggr.trace(`AnimIdle: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this.animState = State.Idle;
// Different GUI action needed if still loading
if (this.signState === State.Running) {
// Need to drain queues
this.signState = State.Stopping;
this.guiDisablePlay();
} else {
this.guiStopPlay();
}
return typeof lggr.trace === "function" ? lggr.trace(`AnimIdle: Anim: ${this.animState}  Sign: ${this.signState}`) : void 0;
};
Logger.addHook("animidle", avEvtAnimIdle, this.avIndex);
// Create SigningAvatar
this.speedController = new AvSpeedController(this.domEls, true, avSettings.initSpeed, avSettings.rateSpeed);
speedFun = (() => {
return this.speedController.curSpeed();
});
drainFun = (() => {
return this.signState === State.Stopping;
});
this.avatar = new SigningAvatar(this, this.domEls.avCanvas[0], speedFun, drainFun);
// Status reporting
statHook = (evt) => {
var len11, msg, results, statels, stel, t;
// lggr.trace? "AvatarGUI statHook av#{@avIndex}: #{evt.typ} av#{evt.av} \"#{evt.msg}\""
msg = slgr.info != null ? `${theConfig.animgenProc}: ${evt.msg}` : evt.msg;
statels = document.getElementsByClassName(`statusExtra av${this.avIndex}`);
results = [];
for (t = 0, len11 = statels.length; t < len11; t++) {
stel = statels[t];
results.push(stel.value = msg);
}
return results;
};
Logger.addHook("status", statHook, this.avIndex);
}
stat(msg) {
return Logger.callHook("status", msg, this.avIndex);
}
// GUI event handlers.
startAvatar() {
//----------
this.initGUI();
return this.avatar.switchAvatar(this.initAv);
}
setAmbMode(ambIdle) {
var ambEl, i, len, ref;
this.ambIdle = ambIdle;
if (typeof lggr.trace === "function") {
lggr.trace(`Called setAmbMode: Finds ${this.ambIdle}`);
}
ref = this.domEls.avAmb;
for (i = 0, len = ref.length; i < len; i++) {
ambEl = ref[i];
ambEl.checked = this.ambIdle;
}
return setTimeout((() => {
return this.avatar.makeNewAmbientScheduler();
}), 0);
}
playSiGMLText(sigml) {
//------------
return this.avatar.playSiGML(sigml);
}
playSiGMLURL(sigmlurl) {
//-----------
return this.avatar.playSiGMLURL(sigmlurl);
}
playSiGMLTextFromEl(sigmltxtel) {
var ref, sigml;
//------------
//sigml = sigmltxtel?.value
sigml = (ref = sigmltxtel[0]) != null ? ref.value : void 0;
return this.playSiGMLText(sigml);
}
playSiGMLURLFromEl(sigmlurlel) {
var ref, sigmlurl;
//-----------
//sigmlurl = sigmlurlel?.value
sigmlurl = (ref = sigmlurlel[0]) != null ? ref.value : void 0;
return this.playSiGMLURL(sigmlurl);
}
stopPlay() {
//-------
return this.avatar.stopPlay();
}
suspendPlay() {
//----------
this.guiSuspendPlay();
return this.avatar.suspendPlay();
}
resumePlay() {
//---------
this.guiStartPlay();
return this.avatar.resumePlay();
}
showPreviousFrame() {
return this.avatar.showPreviousFrame();
}
//----------------
showNextFrame() {
return this.avatar.showNextFrame();
}
//------------
handleURLKey(evt) {
var chr;
//-----------
// IE doesn't do evt.which, but always does evt.keyCode;
// (But we don't support IE anyway!) (Oh yes we do!)
chr = evt.which || evt.keyCode;
if (chr === theSToCA.RETURN_CHAR) {
// Treat "return" on the URL field like a click on the
// Play-SiGML-URL button, after suppressing further handling
// of the character.
// DOM vs. IE (nonstandard)
if (evt.preventDefault != null) {
evt.preventDefault();
} else {
evt.returnValue = false;
}
return this.playSiGMLURLFromEl(this.domEls.sigmlURL);
}
}
// domEls Utilities
_setElsValue(els, newval) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.value = newval);
}
return results;
}
_setElsOnclick(els, hdlr) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.onclick = hdlr);
}
return results;
}
_setElsDisabled(els, isDis) {
var el, i, len, results;
results = [];
for (i = 0, len = els.length; i < len; i++) {
el = els[i];
results.push(el.disabled = isDis);
}
return results;
}
// Avatar event handlers
//----------------
// GUI management methods.
initGUI() {
var ava, avamb, avm, avmenu, i, j, len, len1, textsu;
//------
this.nSFD = 0; // reportAnimStatus() counter
this._setElsOnclick(this.domEls.stop, this.stopPlay.bind(this));
this._setElsOnclick(this.domEls.suspend, this.suspendPlay.bind(this));
this._setElsOnclick(this.domEls.resume, this.resumePlay.bind(this));
this._setElsOnclick(this.domEls.playSU, (() => {
return this.playSiGMLURLFromEl(this.domEls.sigmlURL);
}));
this._setElsOnclick(this.domEls.playST, (() => {
return this.playSiGMLTextFromEl(this.domEls.sigmlText);
}));
// FIXME: Do something to bind arrow keys to these actions?
this._setElsOnclick(this.domEls.prevF, this.showPreviousFrame.bind(this));
this._setElsOnclick(this.domEls.nextF, this.showNextFrame.bind(this));
avmenu = this.domEls.avMenu;
for (i = 0, len = avmenu.length; i < len; i++) {
avm = avmenu[i];
avm.onchange = ((mnu) => {
return () => {
return this.avatar.switchAvatar(mnu.value);
};
})(avm);
}
avamb = this.domEls.avAmb;
for (j = 0, len1 = avamb.length; j < len1; j++) {
ava = avamb[j];
ava.onclick = ((box) => {
return () => {
return this.setAmbMode(box.checked);
};
})(ava);
}
textsu = this.domEls.sigmlURL[0];
return textsu != null ? textsu.onkeypress = ((evt) => {
return this.handleURLKey(evt);
}) : void 0;
}
guiDisablePlay() {
if (typeof lggr.trace === "function") {
lggr.trace(`guiDisablePlay: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this._setElsDisabled(this.domEls.avMenu, true);
this._setElsDisabled(this.domEls.avAmb, true);
this._setElsDisabled(this.domEls.playSU, true);
this._setElsDisabled(this.domEls.playST, true);
this._setElsDisabled(this.domEls.stop, true);
this._setElsDisabled(this.domEls.suspend, true);
this._setElsDisabled(this.domEls.resume, true);
this._setElsDisabled(this.domEls.prevF, true);
return this._setElsDisabled(this.domEls.nextF, true);
}
guiStartPlay() {
if (typeof lggr.trace === "function") {
lggr.trace(`guiStartPlay: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this._setElsDisabled(this.domEls.avMenu, true);
this._setElsDisabled(this.domEls.avAmb, true);
this._setElsDisabled(this.domEls.playSU, true);
this._setElsDisabled(this.domEls.playST, true);
this._setElsDisabled(this.domEls.stop, false);
this._setElsDisabled(this.domEls.suspend, false);
this._setElsDisabled(this.domEls.resume, true);
this._setElsDisabled(this.domEls.prevF, true);
return this._setElsDisabled(this.domEls.nextF, true);
}
guiStopPlay() {
if (typeof lggr.trace === "function") {
lggr.trace(`guiStopPlay: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this._setElsDisabled(this.domEls.avMenu, false);
this._setElsDisabled(this.domEls.avAmb, false);
this._setElsDisabled(this.domEls.playSU, false);
this._setElsDisabled(this.domEls.playST, false);
this._setElsDisabled(this.domEls.stop, true);
this._setElsDisabled(this.domEls.suspend, true);
this._setElsDisabled(this.domEls.resume, true);
this._setElsDisabled(this.domEls.prevF, true);
return this._setElsDisabled(this.domEls.nextF, true);
}
guiSuspendPlay() {
if (typeof lggr.trace === "function") {
lggr.trace(`guiSuspendPlay: Anim: ${this.animState}  Sign: ${this.signState}`);
}
this._setElsDisabled(this.domEls.avMenu, true);
this._setElsDisabled(this.domEls.avAmb, true);
this._setElsDisabled(this.domEls.playSU, true);
this._setElsDisabled(this.domEls.playST, true);
this._setElsDisabled(this.domEls.stop, false);
this._setElsDisabled(this.domEls.suspend, true);
this._setElsDisabled(this.domEls.resume, false);
this._setElsDisabled(this.domEls.prevF, false);
return this._setElsDisabled(this.domEls.nextF, false);
}
_getDOMEls() {
var avix, bttnForAv, domels, elForAv, txtForAv, txtaForAv;
//---------
avix = this.avIndex;
// This assumes that the HTML text for this avatar's GUI has
// now been injected into the document's DOM.
elForAv = function(tag) {
var elms;
elms = document.getElementsByClassName(`${tag} av${avix}`);
if (elms.length === 0) {
if (typeof lggr.debug === "function") {
lggr.debug(`No element for ${tag} av${avix}`);
}
} else if (elms.length > 1) {
if (typeof lggr.debug === "function") {
lggr.debug(`Multiple (${elms.length}) elements for ${tag} av${avix}`);
}
}
return elms;
};
bttnForAv = function(btag) {
return elForAv(`bttn${btag}`);
};
txtForAv = function(ttag) {
return elForAv(`txt${ttag}`);
};
txtaForAv = function(tatag) {
return elForAv(`txta${tatag}`);
};
return domels = {
avCanvas: elForAv("canvasAv"),
avMenu: elForAv("menuAv"),
avAmb: elForAv("boxAmb"),
playSU: bttnForAv("PlaySiGMLURL"),
playST: bttnForAv("PlaySiGMLText"),
stop: bttnForAv("Stop"),
suspend: bttnForAv("Suspend"),
resume: bttnForAv("Resume"),
prevF: bttnForAv("PrevF"),
nextF: bttnForAv("NextF"),
speedDisplay: txtForAv("LogSpeed"),
speedDown: bttnForAv("SpeedDown"),
speedUp: bttnForAv("SpeedUp"),
speedReset: bttnForAv("SpeedReset"),
signAndFrame: txtForAv("SF"),
gloss: txtForAv("Gloss"),
fps: txtForAv("FPS"),
sigmlURL: txtForAv("SiGMLURL"),
sigmlText: txtaForAv("SiGMLText")
};
}
};
// Export
cwaenv.add(AvatarGUI, "AvatarGUI");
// (End AvatarGUI.coffee)
}).call(this);
// -------- CWASA.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   CWASA.coffee
//   ------------
var AvatarGUI, Config, Env, Logger, _CWASAHook, _configureCWA, _cwasaInitialise, avPanels, cfg, cwaenv, cwasaHTMLForSToCA, cwasaInit, document, getLogger, lggr, navigator, playSiGMLText, playSiGMLURL, setTimeout, slgr, stat, status, stopSiGML, theSToCA;
cwaenv = this.getCWAEnv();
document = this.document;
status = this.status;
setTimeout = this.setTimeout;
navigator = this.navigator;
Logger = cwaenv.get("Logger");
Config = cwaenv.get("Config");
AvatarGUI = cwaenv.get("AvatarGUI");
Env = cwaenv.get("CWAEnv");
theSToCA = cwaenv.get("theSToCA");
cfg = Config.theConfig;
lggr = Logger.get("CWASA");
slgr = Logger.get("Status");
// Logger Tests
// lggr.log "Logger name #{lggr.modName}. maxLog #{lggr.maxLog}. maxLogLev #{lggr.maxLogLev}. Version loc2025"
// lggr.error "error test"
// lggr.warn "warn test"
// lggr.log "log test"
// lggr.info? "info test"
// lggr.debug? "debug test"
// lggr.trace? "trace test"
// lggr = Logger.get "CWASA", "trace" # Higher level
// lggr.log "Logger name #{lggr.modName}. maxLog #{lggr.maxLog}. maxLogLev #{lggr.maxLogLev}. Version loc2025"
// lggr.error "error test"
// lggr.warn "warn test"
// lggr.log "log test"
// lggr.info? "info test"
// lggr.debug? "debug test"
// lggr.trace? "trace test"
// lggr = Logger.get "CWASA", "info" # Lower level
// lggr.error "error test"
// lggr.warn "warn test"
// lggr.log "log test"
// lggr.info? "info test"
// lggr.debug? "debug test"
// lggr.trace? "trace test"
// lggr.log "Logger name #{lggr.modName}. maxLog #{lggr.maxLog}. maxLogLev #{lggr.maxLogLev}. Version loc2025"
// lggr = Logger.get "CWASA" # Same level
// lggr.error "error test"
// lggr.warn "warn test"
// lggr.log "log test"
// lggr.info? "info test"
// lggr.debug? "debug test"
// lggr.trace? "trace test"
// logTest = Logger.get "Test", "trace"
// logTest.error "error test"
// logTest.warn "warn test"
// logTest.log "log test"
// logTest.info? "info test"
// logTest.debug? "debug test"
// logTest.trace? "trace test"
// logTest.log "Logger name #{logTest.modName}. maxLog #{logTest.maxLog}. maxLogLev #{logTest.maxLogLev}. Version loc2025"
// lggr.log "Current Loggers: #{do Logger.list}"
// End Logger Tests
// Hook Tests
// hklg = Logger.get "Hooks"
// Logger.addHook "status", (evt) => hklg.debug? "Test status hook: #{evt.typ} #{evt.av} \"#{evt.msg}\""
// Logger.callHook "status", "My message"
// Logger.callHook "none", "Bad hook", 1
// Logger.addHook "status", ((evt) => hklg.debug? "Panel 0: #{evt.typ} #{evt.av} #{evt.msg}"), 0
// Logger.addHook "status", ((evt) => hklg.debug? "Panel 1: #{evt.typ} #{evt.av} #{evt.msg}"), 1
// Logger.addHook "message", (evt) => hklg.debug? "My message hook #{evt.typ} #{evt.av} #{evt.msg}"
// Logger.callHook "status", "Status All"
// Logger.callHook "status", "Status Just 0", 0
// End Status Tests
// Sleep tests for implicit async and await
// sleep = (ms, msg = "") ->
//   lggr.log "sleep #{msg} #{ms}"
//   new Promise (resolve) -> setTimeout resolve, ms
// demo = (ms, msg = "") ->
//   lggr.log "Calling sleep #{msg} #{ms}"
//   await sleep ms, msg
//   lggr.log "Calling sleep #{msg} #{ms} again"
//   await sleep ms, msg
//   lggr.log "Called  sleep #{msg} #{ms}"
// lggr.log "Calling demo 2000"
// demo 2000, "One"
// lggr.log "Calling demo 1000"
// demo 1000, "Two"
// lggr.log "Called  demo"
// Async Queue Tests
// AsyncQueue = cwaenv.get "AsyncQueue"
// TQ = new AsyncQueue "Test"
// Task = (msg = "", wait = 0) =>
//   lggr.log "Task #{msg} yeilds #{msg} wait #{wait}"
//   new Promise (resolve) ->
//     res = -> resolve msg
//     setTimeout res, wait
// Rprt = (msg = "") =>
//   (val) -> lggr.log "Report #{msg} returns #{val}"
// TQ.get Rprt 0
// TQ.get Rprt 1
// TQ.put Task 0, 200
// TQ.put Task 1, 100
// lggr.log "Task 2 yeilds 2 directly"
// TQ.put 2
// TQ.get Rprt 2
// End Async Queue Tests
// Structure to contain main CWASA interface: Could be populated in advance
if (this.CWASA == null) {
this.CWASA = {};
}
avPanels = [];
_CWASAHook = (evt) => {
var msg;
if (typeof slgr.trace === "function") {
slgr.trace(`CWASA statHook: ${evt.typ} av${evt.av} \"${evt.msg}\"`);
}
msg = slgr.info != null ? `${cfg.animgenProc}: ${evt.msg}` : evt.msg;
if (evt.av !== "*") {
msg = `[av${evt.av}] ${msg}`;
}
slgr.log(msg);
return status = msg;
};
Logger.addHook("status", _CWASAHook);
stat = function(msg) {
return Logger.callHook("status", msg);
};
_configureCWA = function(configDone, ccfgpath, initCfg) {
if (typeof lggr.info === "function") {
lggr.info(`Loading configuration: ${ccfgpath}`);
}
return Config.load(configDone, ccfgpath, initCfg);
};
_cwasaInitialise = function(resolve) {
var allavs, alldivs, avDefs, avmatch, cla, div, divclasses, i, initAv, j, k, l, len, len1, len2, len3, len4, len5, m, o, p, ref, ref1, ref2, ref3, ref4, rex, stocadivs;
if (typeof lggr.info === "function") {
lggr.info("Avatar initialisation");
}
// Avatar definitions in the config file.
avDefs = cfg.avSettings.length;
if (typeof lggr.trace === "function") {
lggr.trace("Scanning CWASAPanel and CWASAAvatar divs\n");
}
// getElementsByClassName does not return pure array
allavs = [];
alldivs = [];
ref = document.getElementsByClassName("CWASAPanel");
for (j = 0, len = ref.length; j < len; j++) {
div = ref[j];
alldivs.push(div);
}
ref1 = document.getElementsByClassName("CWASAAvatar");
for (k = 0, len1 = ref1.length; k < len1; k++) {
div = ref1[k];
alldivs.push(div);
}
for (l = 0, len2 = alldivs.length; l < len2; l++) {
div = alldivs[l];
divclasses = div.getAttribute("class");
ref2 = divclasses.split(" ");
for (m = 0, len3 = ref2.length; m < len3; m++) {
cla = ref2[m];
// Poor support for iterators in coffeescript and matchAll in node
// avmatches = [...cla.matchAll /av([0-9]+)/g]
// allavs.push avmatch[1]  for avmatch in avmatches
rex = RegExp('av([0-9]+)', 'g');
while (avmatch = rex.exec(cla)) {
allavs.push(parseInt(avmatch[1], 10));
}
}
}
if (typeof lggr.debug === "function") {
lggr.debug(`Avatars in CWASAPanel and CWASAAvatar divs: ${allavs}`);
}
initAv = "luna";
// First, create all the HTML/DOM/GUI apparatus for every avatar for
// which the HTML document has a <div> element (which should be empty).
//   for i in [0...N_AVS]
//     guidivs = document.getElementsByClassName "CWASAPanel av#{i}"
//     avadivs = document.getElementsByClassName "CWASAAvatar av#{i}"
//     # Choose initial avatar from active avatar specs
//     if (guidivs.length + avadivs.length) > 0
//       initAv = cfg.avSettings[i].initAv
//       avPanels[i] = new AvatarGUI i, cfg.avSettings[i]
//     else
//       # Is this necessary?
//       avPanels[i] = null
for (o = 0, len4 = allavs.length; o < len4; o++) {
i = allavs[o];
// Choose initial avatar from active avatar specs
if (avPanels[i] == null) {
if (typeof lggr.trace === "function") {
lggr.trace(`Panel ${i} with config ${i % avDefs}\n`);
}
initAv = cfg.avSettings[i % avDefs].initAv; // Only for applet
avPanels[i] = new AvatarGUI(i, cfg.avSettings[i % avDefs]);
}
}
// when avPanels[i]
// Second, load each avatar and connect it to its GUI, that is,
// its control panel.
// Should be able to avoid the when and use avPanels[i]?.
for (p = 0, len5 = allavs.length; p < len5; p++) {
i = allavs[p];
if (typeof lggr.trace === "function") {
lggr.trace(`Start loaded avatar ${i}\n`);
}
avPanels[i].startAvatar();
}
// Logging of environment for Status Log
//stat "userAgent=\"#{navigator.userAgent}\""
//stat "appName=\"#{navigator.appName}\" appVersion=\"#{navigator.appVersion}\""
//stat "platform=\"#{navigator.platform}\""
//for mi, mix in navigator.mimeTypes
//  stat "Type: #{mi.type}: #{mi.description}"
if (navigator != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`navigator.javaEnabled()=\"${(navigator != null ? navigator.javaEnabled : void 0) ? navigator.javaEnabled() : void 0}\"`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`navigator.mimeTypes has application/x-java-applet=\"${((ref3 = navigator.mimeTypes) != null ? ref3['application/x-java-applet'] : void 0) != null}\"`);
}
}
if (typeof lggr.debug === "function") {
lggr.debug(`Platform=${Env.platTag} Browser=${Env.browTag} Java=${Env.hasJava}`);
}
// Finally, write SToCA element if appropriate. Should check exactly one element is found
// Requires Java support if Animgen Applet is specified
if (cfg.animgenProc === "Applet") {
// Test of SToCA stat method
theSToCA.stat("Request to use deprecated Java Applet");
if (Env.hasJava) {
stocadivs = document.getElementsByClassName("SToCA");
if (stocadivs[0] != null) {
stat("Animgen by deprecated Java Applet");
if ((ref4 = stocadivs[0]) != null) {
ref4.innerHTML = cwasaHTMLForSToCA(initAv);
}
} else {
cfg.animgenProc = "Client";
stat("Animgen finds no Java Applet element on page");
// Avoid messages about missing SToCA
Env.hasJava = false;
}
// May need to call this even if cannot run SToCA
theSToCA.initialise();
} else {
cfg.animgenProc = "Client";
stat("Animgen finds Java unavailable for Applet");
}
}
stat(`Animgen by ${cfg.animgenProc}`);
this.CWASA.version = cfg.jasVersionTag;
if (typeof lggr.info === "function") {
lggr.info(`Animgen ${cfg.animgenProc} for Version ${this.CWASA.version}`);
}
// Resolve Promise indicating CWASA initialised
resolve();
return void 0; // void result
};
cwasaInit = (initCfg) => {
var CWASAReady;
//--------
CWASAReady = new Promise((resolve, reject) => {
var configDone, j, len, pf, ref;
if (typeof lggr.info === "function") {
lggr.info("Initialisation starts. Build Version %s: Development Build", "loc2025");
}
ref = this.Polyfills;
for (j = 0, len = ref.length; j < len; j++) {
pf = ref[j];
if (typeof lggr.debug === "function") {
lggr.debug(`Polyfill: ${pf}`);
}
}
if (typeof lggr.debug === "function") {
lggr.debug("Loading configuration starts");
}
// This must be the first thing we do: it populates
// the configuration data, cfg, via Config.load().
configDone = () => {
if (typeof lggr.info === "function") {
lggr.info("Loading configuration done");
}
return _cwasaInitialise(resolve);
};
return _configureCWA(configDone, "cwaclientcfg.json", initCfg);
});
CWASAReady.then(function() {
return lggr.log("Initialisation ends");
});
this.CWASA.ready = CWASAReady;
cwaenv.add(CWASAReady, "cwasaReady");
if (typeof lggr.debug === "function") {
lggr.debug("cwasaInit done");
}
return CWASAReady;
};
cwasaHTMLForSToCA = function(av) {
var applethtml, attributes, avlist, mkparam, objecthtml, parameters;
if (typeof lggr.debug === "function") {
lggr.debug(`Creating element for SToCA applet with avatar ${av}`);
}
avlist = cfg.allavs.join(":");
// Explicit Applet tag
mkparam = function(n, v) {
return `<param name=\"${n}\" value=\"${v}\" />`;
};
applethtml = `<!--========================================================-->
<applet name="stocapplet" id="stocApplet" class="stocApplet" width="1"  height="1" >
${mkparam("jnlp_href", `${cfg.jasBase}jnlp/SToCA.jnlp`)}
${mkparam("avatar.id.list", avlist)}
${mkparam("cacheable.avatar.list", avlist)}
${mkparam("avatar.id", av)}
${mkparam("camera.settings", "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0")}
${mkparam("avatar.fps", cfg.animgenFPS)}
</applet>`;
//lggr.debug? "================ Applet ================"
//lggr.debug? applethtml
objecthtml = `<!--========================================================-->
<object type="application/x-java-applet" id="stocApplet" class="stocApplet" width="1"  height="1" >
${mkparam("jnlp_href", `${cfg.jasBase}jnlp/SToCA.jnlp`)}
${mkparam("avatar.id.list", avlist)}
${mkparam("cacheable.avatar.list", avlist)}
${mkparam("avatar.id", av)}
${mkparam("camera.settings", "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0")}
${mkparam("avatar.fps", cfg.animgenFPS)}
</object>`;
//"
//lggr.debug? "================ Object ================"
//lggr.debug? objecthtml
// deployJava approach
attributes = {
name: "stocApplet",
id: "stocApplet",
class: "stocApplet",
codebase: `${cfg.jasBase}`,
code: "app.SToCApplet",
archive: "jars/use-jarp.jar, jars/jarpb.jar, jars/avatars/avatar-basic.jar, jars/sigmlinlib.jar, jars/antlr-3.5.2-complete.jar, jogl/jogl.jar, jogl/gluegen-rt.jar",
width: 1,
height: 1
};
parameters = {
codebase_lookup: "false",
scriptable: "true",
options: "SToCApplet",
"ja.version.tag": cfg.jasVersionTag,
"ja.remote.base.url": cfg.jasBase,
"ja.force.remote.ja.home": "true",
"avatar.id.list": avlist,
"cacheable.avatar.list": avlist,
"avatar.id": av,
"do.streamed.animation.build": "true",
"camera.settings": "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0",
"avatar.fps": cfg.animgenFPS,
"quit.delay.ms": "400",
jnlp_href: "jnlp/SToCA.jnlp"
};
// deployJava start
// version = '1.7'
// deployhtml = deployJava?.runAppletText attributes, parameters, version
// lggr.debug? "================ deployJava ================"
// lggr.debug? deployhtml
// lggr.debug? "============================================"
// deployJava end
// lggr.debug? "SToCA base URL: #{cfg.jasBase}" + if applettxt? then " [deployJava available]" else ""
// Ignore deployJava even if available
// Use object tag
if (Env.browTag === "IE") {
return applethtml;
} else {
return objecthtml;
}
};
// Export
// CWASA object with major interfaces
playSiGMLText = (stext, av = 0) => {
var avP;
if (typeof lggr.trace === "function") {
lggr.trace(`playSiGMLText for avatar ${av}`);
}
if (avP = avPanels[av]) {
avP.playSiGMLText(stext);
return `Played SiGML for avatar ${av}`;
} else {
return `Undefined avatar ${av}`;
}
};
playSiGMLURL = (surl, av = 0) => {
var avP;
if (typeof lggr.trace === "function") {
lggr.trace(`playSiGMLURL for avatar ${av} : ${surl}`);
}
if (avP = avPanels[av]) {
avP.playSiGMLURL(surl);
return `Played SiGML from URL for avatar ${av}`;
} else {
return `Undefined avatar ${av}`;
}
};
stopSiGML = (av = 0) => {
var avP;
if (typeof lggr.trace === "function") {
lggr.trace(`stopSiGML for avatar ${av}`);
}
if (avP = avPanels[av]) {
avP.stopPlay();
return `Stopped SiGML for avatar ${av}`;
} else {
return `Undefined avatar ${av}`;
}
};
getLogger = (nom, maxLog) => {
if (typeof lggr.trace === "function") {
lggr.trace(`getLogger ${nom} level ${maxLog}`);
}
return Logger.get(nom, maxLog, "force");
};
// Seems unused via cwaenv
cwaenv.add(cwasaInit, "cwasaInit");
this.CWASA.init = cwasaInit;
this.CWASA.playSiGMLURL = playSiGMLURL;
this.CWASA.playSiGMLText = playSiGMLText;
this.CWASA.stopSiGML = stopSiGML;
this.CWASA.getLogger = getLogger;
this.CWASA.addHook = Logger.addHook;
this.CWASA.callHook = Logger.callHook;
// (end)
}).call(this);
// --------  END  --------
